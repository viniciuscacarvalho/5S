
geral_test_h755zi-q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a810  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800aab0  0800aab0  0000bab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aca0  0800aca0  0000c070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aca0  0800aca0  0000bca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aca8  0800aca8  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aca8  0800aca8  0000bca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800acac  0800acac  0000bcac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  0800acb0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004474  24000070  0800ad20  0000c070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240044e4  0800ad20  0000c4e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029244  00000000  00000000  0000c09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051ca  00000000  00000000  000352e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef0  00000000  00000000  0003a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017be  00000000  00000000  0003c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042d8b  00000000  00000000  0003db5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029882  00000000  00000000  000808e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ac9ef  00000000  00000000  000aa16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00256b5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008898  00000000  00000000  00256ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0025f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800aa98 	.word	0x0800aa98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800aa98 	.word	0x0800aa98

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	@ 0x28
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800085c:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <MX_ADC1_Init+0xec>)
 800085e:	4a32      	ldr	r2, [pc, #200]	@ (8000928 <MX_ADC1_Init+0xf0>)
 8000860:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000864:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000868:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800086a:	4b2e      	ldr	r3, [pc, #184]	@ (8000924 <MX_ADC1_Init+0xec>)
 800086c:	2210      	movs	r2, #16
 800086e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000870:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000878:	2204      	movs	r2, #4
 800087a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800087c:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <MX_ADC1_Init+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000882:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000884:	2200      	movs	r2, #0
 8000886:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000888:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <MX_ADC1_Init+0xec>)
 800088a:	2201      	movs	r2, #1
 800088c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000890:	2200      	movs	r2, #0
 8000892:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089a:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <MX_ADC1_Init+0xec>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008a0:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008bc:	2201      	movs	r2, #1
 80008be:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c0:	4818      	ldr	r0, [pc, #96]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008c2:	f001 f825 	bl	8001910 <HAL_ADC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008cc:	f000 fab0 	bl	8000e30 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4812      	ldr	r0, [pc, #72]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008dc:	f001 ffb2 	bl	8002844 <HAL_ADCEx_MultiModeConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008e6:	f000 faa3 	bl	8000e30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_ADC1_Init+0xf4>)
 80008ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ee:	2306      	movs	r3, #6
 80008f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80008fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008fc:	2304      	movs	r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_ADC1_Init+0xec>)
 800090e:	f001 faed 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000918:	f000 fa8a 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	@ 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2400008c 	.word	0x2400008c
 8000928:	40022000 	.word	0x40022000
 800092c:	3ef08000 	.word	0x3ef08000

08000930 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0ba      	sub	sp, #232	@ 0xe8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	22c0      	movs	r2, #192	@ 0xc0
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f009 fa8a 	bl	8009e6a <memset>
  if(adcHandle->Instance==ADC1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a08 <HAL_ADC_MspInit+0xd8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d14f      	bne.n	8000a00 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000960:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000970:	230a      	movs	r3, #10
 8000972:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000980:	23c0      	movs	r3, #192	@ 0xc0
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000984:	2320      	movs	r3, #32
 8000986:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	4618      	mov	r0, r3
 8000998:	f003 fb72 	bl	8004080 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80009a2:	f000 fa45 	bl	8000e30 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009ac:	4a17      	ldr	r2, [pc, #92]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009ae:	f043 0320 	orr.w	r3, r3, #32
 80009b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ca:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009e2:	2308      	movs	r3, #8
 80009e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <HAL_ADC_MspInit+0xe0>)
 80009fc:	f002 f8e0 	bl	8002bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a00:	bf00      	nop
 8000a02:	37e8      	adds	r7, #232	@ 0xe8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40022000 	.word	0x40022000
 8000a0c:	58024400 	.word	0x58024400
 8000a10:	58020000 	.word	0x58020000

08000a14 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idle */
  idleHandle = osThreadNew(idle_task, NULL, &idle_attributes);
 8000a18:	4a1c      	ldr	r2, [pc, #112]	@ (8000a8c <MX_FREERTOS_Init+0x78>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	481c      	ldr	r0, [pc, #112]	@ (8000a90 <MX_FREERTOS_Init+0x7c>)
 8000a1e:	f007 ff79 	bl	8008914 <osThreadNew>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <MX_FREERTOS_Init+0x80>)
 8000a26:	6013      	str	r3, [r2, #0]

  /* creation of nb_iot */
  nb_iotHandle = osThreadNew(nb_iot_task, NULL, &nb_iot_attributes);
 8000a28:	4a1b      	ldr	r2, [pc, #108]	@ (8000a98 <MX_FREERTOS_Init+0x84>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	481b      	ldr	r0, [pc, #108]	@ (8000a9c <MX_FREERTOS_Init+0x88>)
 8000a2e:	f007 ff71 	bl	8008914 <osThreadNew>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa0 <MX_FREERTOS_Init+0x8c>)
 8000a36:	6013      	str	r3, [r2, #0]

  /* creation of cnss */
  cnssHandle = osThreadNew(cnss_task, NULL, &cnss_attributes);
 8000a38:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa4 <MX_FREERTOS_Init+0x90>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	481a      	ldr	r0, [pc, #104]	@ (8000aa8 <MX_FREERTOS_Init+0x94>)
 8000a3e:	f007 ff69 	bl	8008914 <osThreadNew>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a19      	ldr	r2, [pc, #100]	@ (8000aac <MX_FREERTOS_Init+0x98>)
 8000a46:	6013      	str	r3, [r2, #0]

  /* creation of sd_card */
  sd_cardHandle = osThreadNew(sd_card_task, NULL, &sd_card_attributes);
 8000a48:	4a19      	ldr	r2, [pc, #100]	@ (8000ab0 <MX_FREERTOS_Init+0x9c>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4819      	ldr	r0, [pc, #100]	@ (8000ab4 <MX_FREERTOS_Init+0xa0>)
 8000a4e:	f007 ff61 	bl	8008914 <osThreadNew>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a18      	ldr	r2, [pc, #96]	@ (8000ab8 <MX_FREERTOS_Init+0xa4>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* creation of temp */
  tempHandle = osThreadNew(temp_task, NULL, &temp_attributes);
 8000a58:	4a18      	ldr	r2, [pc, #96]	@ (8000abc <MX_FREERTOS_Init+0xa8>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4818      	ldr	r0, [pc, #96]	@ (8000ac0 <MX_FREERTOS_Init+0xac>)
 8000a5e:	f007 ff59 	bl	8008914 <osThreadNew>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <MX_FREERTOS_Init+0xb0>)
 8000a66:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(imu_task, NULL, &imu_attributes);
 8000a68:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <MX_FREERTOS_Init+0xb4>)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4817      	ldr	r0, [pc, #92]	@ (8000acc <MX_FREERTOS_Init+0xb8>)
 8000a6e:	f007 ff51 	bl	8008914 <osThreadNew>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4a16      	ldr	r2, [pc, #88]	@ (8000ad0 <MX_FREERTOS_Init+0xbc>)
 8000a76:	6013      	str	r3, [r2, #0]

  /* creation of batterie */
  batterieHandle = osThreadNew(batterie_task, NULL, &batterie_attributes);
 8000a78:	4a16      	ldr	r2, [pc, #88]	@ (8000ad4 <MX_FREERTOS_Init+0xc0>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4816      	ldr	r0, [pc, #88]	@ (8000ad8 <MX_FREERTOS_Init+0xc4>)
 8000a7e:	f007 ff49 	bl	8008914 <osThreadNew>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4a15      	ldr	r2, [pc, #84]	@ (8000adc <MX_FREERTOS_Init+0xc8>)
 8000a86:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	0800ab48 	.word	0x0800ab48
 8000a90:	08009b31 	.word	0x08009b31
 8000a94:	240000f0 	.word	0x240000f0
 8000a98:	0800ab6c 	.word	0x0800ab6c
 8000a9c:	08009bd1 	.word	0x08009bd1
 8000aa0:	240000f4 	.word	0x240000f4
 8000aa4:	0800ab90 	.word	0x0800ab90
 8000aa8:	08009b8d 	.word	0x08009b8d
 8000aac:	240000f8 	.word	0x240000f8
 8000ab0:	0800abb4 	.word	0x0800abb4
 8000ab4:	08009bf5 	.word	0x08009bf5
 8000ab8:	240000fc 	.word	0x240000fc
 8000abc:	0800abd8 	.word	0x0800abd8
 8000ac0:	08009c19 	.word	0x08009c19
 8000ac4:	24000100 	.word	0x24000100
 8000ac8:	0800abfc 	.word	0x0800abfc
 8000acc:	08009bb1 	.word	0x08009bb1
 8000ad0:	24000104 	.word	0x24000104
 8000ad4:	0800ac20 	.word	0x0800ac20
 8000ad8:	08009b3d 	.word	0x08009b3d
 8000adc:	24000108 	.word	0x24000108

08000ae0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b51      	ldr	r3, [pc, #324]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afc:	4a4f      	ldr	r2, [pc, #316]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b06:	4b4d      	ldr	r3, [pc, #308]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b49      	ldr	r3, [pc, #292]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1a:	4a48      	ldr	r2, [pc, #288]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b24:	4b45      	ldr	r3, [pc, #276]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b42      	ldr	r3, [pc, #264]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b38:	4a40      	ldr	r2, [pc, #256]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b42:	4b3e      	ldr	r3, [pc, #248]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b50:	4b3a      	ldr	r3, [pc, #232]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b56:	4a39      	ldr	r2, [pc, #228]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b60:	4b36      	ldr	r3, [pc, #216]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6e:	4b33      	ldr	r3, [pc, #204]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b74:	4a31      	ldr	r2, [pc, #196]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <MX_GPIO_Init+0x15c>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b8c:	2332      	movs	r3, #50	@ 0x32
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4826      	ldr	r0, [pc, #152]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000ba8:	f002 f80a 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bac:	2386      	movs	r3, #134	@ 0x86
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481f      	ldr	r0, [pc, #124]	@ (8000c44 <MX_GPIO_Init+0x164>)
 8000bc8:	f001 fffa 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bde:	230b      	movs	r3, #11
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4817      	ldr	r0, [pc, #92]	@ (8000c48 <MX_GPIO_Init+0x168>)
 8000bea:	f001 ffe9 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bee:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c00:	230a      	movs	r3, #10
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <MX_GPIO_Init+0x164>)
 8000c0c:	f001 ffd8 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c10:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c22:	230b      	movs	r3, #11
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4807      	ldr	r0, [pc, #28]	@ (8000c4c <MX_GPIO_Init+0x16c>)
 8000c2e:	f001 ffc7 	bl	8002bc0 <HAL_GPIO_Init>

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	@ 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58020800 	.word	0x58020800
 8000c44:	58020000 	.word	0x58020000
 8000c48:	58020400 	.word	0x58020400
 8000c4c:	58021800 	.word	0x58021800

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c5a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c5c:	bf00      	nop
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d08 <main+0xb8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d004      	beq.n	8000c74 <main+0x24>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	dcf4      	bgt.n	8000c5e <main+0xe>
  if ( timeout < 0 )
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	da01      	bge.n	8000c7e <main+0x2e>
  {
  Error_Handler();
 8000c7a:	f000 f8d9 	bl	8000e30 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7e:	f000 fbeb 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c82:	f000 f847 	bl	8000d14 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c86:	4b20      	ldr	r3, [pc, #128]	@ (8000d08 <main+0xb8>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8000d08 <main+0xb8>)
 8000c8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <main+0xb8>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f002 f93b 	bl	8002f20 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000caa:	2100      	movs	r1, #0
 8000cac:	2000      	movs	r0, #0
 8000cae:	f002 f951 	bl	8002f54 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000cb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cb6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000cb8:	bf00      	nop
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <main+0xb8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <main+0x80>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	dcf4      	bgt.n	8000cba <main+0x6a>
if ( timeout < 0 )
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da01      	bge.n	8000cda <main+0x8a>
{
Error_Handler();
 8000cd6:	f000 f8ab 	bl	8000e30 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cda:	f7ff ff01 	bl	8000ae0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cde:	f000 f8ad 	bl	8000e3c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ce2:	f000 fad7 	bl	8001294 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000ce6:	f7ff fda7 	bl	8000838 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cea:	f007 fdef 	bl	80088cc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000cee:	f7ff fe91 	bl	8000a14 <MX_FREERTOS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit_IT(&huart3, "Test\n", 6);
 8000cf2:	2206      	movs	r2, #6
 8000cf4:	4905      	ldr	r1, [pc, #20]	@ (8000d0c <main+0xbc>)
 8000cf6:	4806      	ldr	r0, [pc, #24]	@ (8000d10 <main+0xc0>)
 8000cf8:	f006 fb16 	bl	8007328 <HAL_UART_Transmit_IT>
	  osDelay(100);
 8000cfc:	2064      	movs	r0, #100	@ 0x64
 8000cfe:	f007 febb 	bl	8008a78 <osDelay>
	  HAL_UART_Transmit_IT(&huart3, "Test\n", 6);
 8000d02:	bf00      	nop
 8000d04:	e7f5      	b.n	8000cf2 <main+0xa2>
 8000d06:	bf00      	nop
 8000d08:	58024400 	.word	0x58024400
 8000d0c:	0800aae8 	.word	0x0800aae8
 8000d10:	240001e4 	.word	0x240001e4

08000d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b09c      	sub	sp, #112	@ 0x70
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1e:	224c      	movs	r2, #76	@ 0x4c
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f009 f8a1 	bl	8009e6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f009 f89b 	bl	8009e6a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d34:	2004      	movs	r0, #4
 8000d36:	f002 f921 	bl	8002f7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b31      	ldr	r3, [pc, #196]	@ (8000e04 <SystemClock_Config+0xf0>)
 8000d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d42:	4a30      	ldr	r2, [pc, #192]	@ (8000e04 <SystemClock_Config+0xf0>)
 8000d44:	f023 0301 	bic.w	r3, r3, #1
 8000d48:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e04 <SystemClock_Config+0xf0>)
 8000d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	4b2c      	ldr	r3, [pc, #176]	@ (8000e08 <SystemClock_Config+0xf4>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8000e08 <SystemClock_Config+0xf4>)
 8000d5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b28      	ldr	r3, [pc, #160]	@ (8000e08 <SystemClock_Config+0xf4>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d70:	bf00      	nop
 8000d72:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <SystemClock_Config+0xf4>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d7e:	d1f8      	bne.n	8000d72 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d80:	2302      	movs	r3, #2
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d88:	2340      	movs	r3, #64	@ 0x40
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d90:	2300      	movs	r3, #0
 8000d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d94:	2304      	movs	r3, #4
 8000d96:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d98:	230a      	movs	r3, #10
 8000d9a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000da8:	230c      	movs	r3, #12
 8000daa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000dac:	2302      	movs	r3, #2
 8000dae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db8:	4618      	mov	r0, r3
 8000dba:	f002 f939 	bl	8003030 <HAL_RCC_OscConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dc4:	f000 f834 	bl	8000e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc8:	233f      	movs	r3, #63	@ 0x3f
 8000dca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ddc:	2340      	movs	r3, #64	@ 0x40
 8000dde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2101      	movs	r1, #1
 8000dec:	4618      	mov	r0, r3
 8000dee:	f002 fd79 	bl	80038e4 <HAL_RCC_ClockConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000df8:	f000 f81a 	bl	8000e30 <Error_Handler>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3770      	adds	r7, #112	@ 0x70
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58000400 	.word	0x58000400
 8000e08:	58024800 	.word	0x58024800

08000e0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a04      	ldr	r2, [pc, #16]	@ (8000e2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d101      	bne.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e1e:	f000 fb57 	bl	80014d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40010000 	.word	0x40010000

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <Error_Handler+0x8>

08000e3c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e40:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e42:	4a28      	ldr	r2, [pc, #160]	@ (8000ee4 <MX_SPI1_Init+0xa8>)
 8000e44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e46:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e48:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e54:	4b22      	ldr	r3, [pc, #136]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e56:	2203      	movs	r2, #3
 8000e58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e68:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e92:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <MX_SPI1_Init+0xa4>)
 8000ecc:	f005 fdd6 	bl	8006a7c <HAL_SPI_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000ed6:	f7ff ffab 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2400010c 	.word	0x2400010c
 8000ee4:	40013000 	.word	0x40013000

08000ee8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0bc      	sub	sp, #240	@ 0xf0
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 0318 	add.w	r3, r7, #24
 8000f04:	22c0      	movs	r2, #192	@ 0xc0
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f008 ffae 	bl	8009e6a <memset>
  if(spiHandle->Instance==SPI1)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a38      	ldr	r2, [pc, #224]	@ (8000ff4 <HAL_SPI_MspInit+0x10c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d168      	bne.n	8000fea <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 f8a7 	bl	8004080 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000f38:	f7ff ff7a 	bl	8000e30 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff8 <HAL_SPI_MspInit+0x110>)
 8000f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f42:	4a2d      	ldr	r2, [pc, #180]	@ (8000ff8 <HAL_SPI_MspInit+0x110>)
 8000f44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <HAL_SPI_MspInit+0x110>)
 8000f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <HAL_SPI_MspInit+0x110>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f60:	4a25      	ldr	r2, [pc, #148]	@ (8000ff8 <HAL_SPI_MspInit+0x110>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <HAL_SPI_MspInit+0x110>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <HAL_SPI_MspInit+0x110>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <HAL_SPI_MspInit+0x110>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <HAL_SPI_MspInit+0x110>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f96:	2360      	movs	r3, #96	@ 0x60
 8000f98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fae:	2305      	movs	r3, #5
 8000fb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4810      	ldr	r0, [pc, #64]	@ (8000ffc <HAL_SPI_MspInit+0x114>)
 8000fbc:	f001 fe00 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fc0:	2380      	movs	r3, #128	@ 0x80
 8000fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fd8:	2305      	movs	r3, #5
 8000fda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fde:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4806      	ldr	r0, [pc, #24]	@ (8001000 <HAL_SPI_MspInit+0x118>)
 8000fe6:	f001 fdeb 	bl	8002bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	37f0      	adds	r7, #240	@ 0xf0
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40013000 	.word	0x40013000
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	58020000 	.word	0x58020000
 8001000:	58020c00 	.word	0x58020c00

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <HAL_MspInit+0x38>)
 800100c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001010:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <HAL_MspInit+0x38>)
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <HAL_MspInit+0x38>)
 800101c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	210f      	movs	r1, #15
 800102c:	f06f 0001 	mvn.w	r0, #1
 8001030:	f001 fd9e 	bl	8002b70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	58024400 	.word	0x58024400

08001040 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	@ 0x38
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	d842      	bhi.n	80010d4 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800104e:	2200      	movs	r2, #0
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	2019      	movs	r0, #25
 8001054:	f001 fd8c 	bl	8002b70 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001058:	2019      	movs	r0, #25
 800105a:	f001 fda3 	bl	8002ba4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800105e:	4a23      	ldr	r2, [pc, #140]	@ (80010ec <HAL_InitTick+0xac>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001064:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <HAL_InitTick+0xb0>)
 8001066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800106a:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <HAL_InitTick+0xb0>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <HAL_InitTick+0xb0>)
 8001076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001082:	f107 020c 	add.w	r2, r7, #12
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f002 ffb5 	bl	8003ffc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001092:	f002 ff9d 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 8001096:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109a:	4a16      	ldr	r2, [pc, #88]	@ (80010f4 <HAL_InitTick+0xb4>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	0c9b      	lsrs	r3, r3, #18
 80010a2:	3b01      	subs	r3, #1
 80010a4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_InitTick+0xb8>)
 80010a8:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <HAL_InitTick+0xbc>)
 80010aa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <HAL_InitTick+0xb8>)
 80010ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010b2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010b4:	4a10      	ldr	r2, [pc, #64]	@ (80010f8 <HAL_InitTick+0xb8>)
 80010b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <HAL_InitTick+0xb8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <HAL_InitTick+0xb8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010c6:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <HAL_InitTick+0xb8>)
 80010c8:	f005 fe17 	bl	8006cfa <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d107      	bne.n	80010e2 <HAL_InitTick+0xa2>
 80010d2:	e001      	b.n	80010d8 <HAL_InitTick+0x98>
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e005      	b.n	80010e4 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010d8:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <HAL_InitTick+0xb8>)
 80010da:	f005 fe6f 	bl	8006dbc <HAL_TIM_Base_Start_IT>
 80010de:	4603      	mov	r3, r0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3738      	adds	r7, #56	@ 0x38
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	24000008 	.word	0x24000008
 80010f0:	58024400 	.word	0x58024400
 80010f4:	431bde83 	.word	0x431bde83
 80010f8:	24000194 	.word	0x24000194
 80010fc:	40010000 	.word	0x40010000

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <NMI_Handler+0x4>

08001108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <MemManage_Handler+0x4>

08001118 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <UsageFault_Handler+0x4>

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <TIM1_UP_IRQHandler+0x10>)
 800113e:	f005 feb5 	bl	8006eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	24000194 	.word	0x24000194

0800114c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e00a      	b.n	8001174 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800115e:	f3af 8000 	nop.w
 8001162:	4601      	mov	r1, r0
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	60ba      	str	r2, [r7, #8]
 800116a:	b2ca      	uxtb	r2, r1
 800116c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf0      	blt.n	800115e <_read+0x12>
  }

  return len;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e009      	b.n	80011ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	60ba      	str	r2, [r7, #8]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dbf1      	blt.n	8001198 <_write+0x12>
  }
  return len;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_close>:

int _close(int file)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011e6:	605a      	str	r2, [r3, #4]
  return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <_isatty>:

int _isatty(int file)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001230:	4a14      	ldr	r2, [pc, #80]	@ (8001284 <_sbrk+0x5c>)
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <_sbrk+0x60>)
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <_sbrk+0x64>)
 8001246:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <_sbrk+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d207      	bcs.n	8001268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001258:	f008 fe56 	bl	8009f08 <__errno>
 800125c:	4603      	mov	r3, r0
 800125e:	220c      	movs	r2, #12
 8001260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001266:	e009      	b.n	800127c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126e:	4b07      	ldr	r3, [pc, #28]	@ (800128c <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	@ (800128c <_sbrk+0x64>)
 8001278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	24080000 	.word	0x24080000
 8001288:	00000400 	.word	0x00000400
 800128c:	240001e0 	.word	0x240001e0
 8001290:	240044e8 	.word	0x240044e8

08001294 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001298:	4b22      	ldr	r3, [pc, #136]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 800129a:	4a23      	ldr	r2, [pc, #140]	@ (8001328 <MX_USART3_UART_Init+0x94>)
 800129c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800129e:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ca:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d6:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012dc:	4811      	ldr	r0, [pc, #68]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012de:	f005 ffd3 	bl	8007288 <HAL_UART_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012e8:	f7ff fda2 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ec:	2100      	movs	r1, #0
 80012ee:	480d      	ldr	r0, [pc, #52]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012f0:	f007 fa11 	bl	8008716 <HAL_UARTEx_SetTxFifoThreshold>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012fa:	f7ff fd99 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fe:	2100      	movs	r1, #0
 8001300:	4808      	ldr	r0, [pc, #32]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 8001302:	f007 fa46 	bl	8008792 <HAL_UARTEx_SetRxFifoThreshold>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800130c:	f7ff fd90 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 8001312:	f007 f9c7 	bl	80086a4 <HAL_UARTEx_DisableFifoMode>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800131c:	f7ff fd88 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	240001e4 	.word	0x240001e4
 8001328:	40004800 	.word	0x40004800

0800132c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0ba      	sub	sp, #232	@ 0xe8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	22c0      	movs	r2, #192	@ 0xc0
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f008 fd8c 	bl	8009e6a <memset>
  if(uartHandle->Instance==USART3)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a27      	ldr	r2, [pc, #156]	@ (80013f4 <HAL_UART_MspInit+0xc8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d146      	bne.n	80013ea <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800135c:	f04f 0202 	mov.w	r2, #2
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4618      	mov	r0, r3
 8001374:	f002 fe84 	bl	8004080 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800137e:	f7ff fd57 	bl	8000e30 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001382:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <HAL_UART_MspInit+0xcc>)
 8001384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001388:	4a1b      	ldr	r2, [pc, #108]	@ (80013f8 <HAL_UART_MspInit+0xcc>)
 800138a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800138e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <HAL_UART_MspInit+0xcc>)
 8001394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001398:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a0:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <HAL_UART_MspInit+0xcc>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a6:	4a14      	ldr	r2, [pc, #80]	@ (80013f8 <HAL_UART_MspInit+0xcc>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <HAL_UART_MspInit+0xcc>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d8:	2307      	movs	r3, #7
 80013da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	@ (80013fc <HAL_UART_MspInit+0xd0>)
 80013e6:	f001 fbeb 	bl	8002bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013ea:	bf00      	nop
 80013ec:	37e8      	adds	r7, #232	@ 0xe8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40004800 	.word	0x40004800
 80013f8:	58024400 	.word	0x58024400
 80013fc:	58020c00 	.word	0x58020c00

08001400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800143c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001404:	f7ff fa00 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001408:	f7ff f950 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	@ (8001440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	@ (8001444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	@ (8001448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	@ (8001450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001432:	f008 fd6f 	bl	8009f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff fc0b 	bl	8000c50 <main>
  bx  lr
 800143a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800143c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001440:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001444:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001448:	0800acb0 	.word	0x0800acb0
  ldr r2, =_sbss
 800144c:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001450:	240044e4 	.word	0x240044e4

08001454 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC3_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145e:	2003      	movs	r0, #3
 8001460:	f001 fb7b 	bl	8002b5a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001464:	f002 fbf4 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8001468:	4602      	mov	r2, r0
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <HAL_Init+0x68>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	4913      	ldr	r1, [pc, #76]	@ (80014c4 <HAL_Init+0x6c>)
 8001476:	5ccb      	ldrb	r3, [r1, r3]
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
 8001480:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <HAL_Init+0x68>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	4a0e      	ldr	r2, [pc, #56]	@ (80014c4 <HAL_Init+0x6c>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	f003 031f 	and.w	r3, r3, #31
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
 8001498:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <HAL_Init+0x70>)
 800149a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800149c:	4a0b      	ldr	r2, [pc, #44]	@ (80014cc <HAL_Init+0x74>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a2:	200f      	movs	r0, #15
 80014a4:	f7ff fdcc 	bl	8001040 <HAL_InitTick>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e002      	b.n	80014b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014b2:	f7ff fda7 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	58024400 	.word	0x58024400
 80014c4:	0800ab38 	.word	0x0800ab38
 80014c8:	24000004 	.word	0x24000004
 80014cc:	24000000 	.word	0x24000000

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	2400000c 	.word	0x2400000c
 80014f4:	24000278 	.word	0x24000278

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	24000278 	.word	0x24000278

08001510 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <HAL_GetREVID+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0c1b      	lsrs	r3, r3, #16
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	5c001000 	.word	0x5c001000

08001528 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	609a      	str	r2, [r3, #8]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d107      	bne.n	80015b4 <LL_ADC_SetChannelPreselection+0x24>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	0e9b      	lsrs	r3, r3, #26
 80015a8:	f003 031f 	and.w	r3, r3, #31
 80015ac:	2201      	movs	r2, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	e015      	b.n	80015e0 <LL_ADC_SetChannelPreselection+0x50>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80015ca:	2320      	movs	r3, #32
 80015cc:	e003      	b.n	80015d6 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	fab3 f383 	clz	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	2201      	movs	r2, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	69d2      	ldr	r2, [r2, #28]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80015ea:	bf00      	nop
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b087      	sub	sp, #28
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3360      	adds	r3, #96	@ 0x60
 8001608:	461a      	mov	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	430b      	orrs	r3, r1
 8001624:	431a      	orrs	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800162a:	bf00      	nop
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001636:	b480      	push	{r7}
 8001638:	b085      	sub	sp, #20
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	431a      	orrs	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	611a      	str	r2, [r3, #16]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3360      	adds	r3, #96	@ 0x60
 8001678:	461a      	mov	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	431a      	orrs	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	601a      	str	r2, [r3, #0]
  }
}
 8001692:	bf00      	nop
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800169e:	b480      	push	{r7}
 80016a0:	b087      	sub	sp, #28
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3330      	adds	r3, #48	@ 0x30
 80016ae:	461a      	mov	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	4413      	add	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	211f      	movs	r1, #31
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	401a      	ands	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	0e9b      	lsrs	r3, r3, #26
 80016d6:	f003 011f 	and.w	r1, r3, #31
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	431a      	orrs	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016ea:	bf00      	nop
 80016ec:	371c      	adds	r7, #28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b087      	sub	sp, #28
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3314      	adds	r3, #20
 8001706:	461a      	mov	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	0e5b      	lsrs	r3, r3, #25
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	4413      	add	r3, r2
 8001714:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	0d1b      	lsrs	r3, r3, #20
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	2107      	movs	r1, #7
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	0d1b      	lsrs	r3, r3, #20
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	431a      	orrs	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001740:	bf00      	nop
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001764:	43db      	mvns	r3, r3
 8001766:	401a      	ands	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0318 	and.w	r3, r3, #24
 800176e:	4908      	ldr	r1, [pc, #32]	@ (8001790 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001770:	40d9      	lsrs	r1, r3
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	400b      	ands	r3, r1
 8001776:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800177a:	431a      	orrs	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	000fffff 	.word	0x000fffff

08001794 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 031f 	and.w	r3, r3, #31
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80017be:	4013      	ands	r3, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6093      	str	r3, [r2, #8]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	5fffffc0 	.word	0x5fffffc0

080017d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017e8:	d101      	bne.n	80017ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <LL_ADC_EnableInternalRegulator+0x24>)
 800180a:	4013      	ands	r3, r2
 800180c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	6fffffc0 	.word	0x6fffffc0

08001824 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001838:	d101      	bne.n	800183e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <LL_ADC_Enable+0x24>)
 800185a:	4013      	ands	r3, r2
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	7fffffc0 	.word	0x7fffffc0

08001874 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <LL_ADC_IsEnabled+0x18>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <LL_ADC_IsEnabled+0x1a>
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <LL_ADC_REG_StartConversion+0x24>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	f043 0204 	orr.w	r2, r3, #4
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	7fffffc0 	.word	0x7fffffc0

080018c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d101      	bne.n	80018dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d101      	bne.n	8001902 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e18f      	b.n	8001c4a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7fe fff9 	bl	8000930 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff3f 	bl	80017d4 <LL_ADC_IsDeepPowerDownEnabled>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff25 	bl	80017b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff5a 	bl	8001824 <LL_ADC_IsInternalRegulatorEnabled>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d114      	bne.n	80019a0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff3e 	bl	80017fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001980:	4b87      	ldr	r3, [pc, #540]	@ (8001ba0 <HAL_ADC_Init+0x290>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	4a87      	ldr	r2, [pc, #540]	@ (8001ba4 <HAL_ADC_Init+0x294>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	3301      	adds	r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001992:	e002      	b.n	800199a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	3b01      	subs	r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f9      	bne.n	8001994 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff3d 	bl	8001824 <LL_ADC_IsInternalRegulatorEnabled>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10d      	bne.n	80019cc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b4:	f043 0210 	orr.w	r2, r3, #16
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff77 	bl	80018c4 <LL_ADC_REG_IsConversionOngoing>
 80019d6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 8129 	bne.w	8001c38 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f040 8125 	bne.w	8001c38 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff36 	bl	8001874 <LL_ADC_IsEnabled>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d136      	bne.n	8001a7c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a65      	ldr	r2, [pc, #404]	@ (8001ba8 <HAL_ADC_Init+0x298>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d004      	beq.n	8001a22 <HAL_ADC_Init+0x112>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a63      	ldr	r2, [pc, #396]	@ (8001bac <HAL_ADC_Init+0x29c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10e      	bne.n	8001a40 <HAL_ADC_Init+0x130>
 8001a22:	4861      	ldr	r0, [pc, #388]	@ (8001ba8 <HAL_ADC_Init+0x298>)
 8001a24:	f7ff ff26 	bl	8001874 <LL_ADC_IsEnabled>
 8001a28:	4604      	mov	r4, r0
 8001a2a:	4860      	ldr	r0, [pc, #384]	@ (8001bac <HAL_ADC_Init+0x29c>)
 8001a2c:	f7ff ff22 	bl	8001874 <LL_ADC_IsEnabled>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4323      	orrs	r3, r4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	e008      	b.n	8001a52 <HAL_ADC_Init+0x142>
 8001a40:	485b      	ldr	r0, [pc, #364]	@ (8001bb0 <HAL_ADC_Init+0x2a0>)
 8001a42:	f7ff ff17 	bl	8001874 <LL_ADC_IsEnabled>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d012      	beq.n	8001a7c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a53      	ldr	r2, [pc, #332]	@ (8001ba8 <HAL_ADC_Init+0x298>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d004      	beq.n	8001a6a <HAL_ADC_Init+0x15a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a51      	ldr	r2, [pc, #324]	@ (8001bac <HAL_ADC_Init+0x29c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_Init+0x15e>
 8001a6a:	4a52      	ldr	r2, [pc, #328]	@ (8001bb4 <HAL_ADC_Init+0x2a4>)
 8001a6c:	e000      	b.n	8001a70 <HAL_ADC_Init+0x160>
 8001a6e:	4a52      	ldr	r2, [pc, #328]	@ (8001bb8 <HAL_ADC_Init+0x2a8>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f7ff fd56 	bl	8001528 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a7c:	f7ff fd48 	bl	8001510 <HAL_GetREVID>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d914      	bls.n	8001ab4 <HAL_ADC_Init+0x1a4>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b10      	cmp	r3, #16
 8001a90:	d110      	bne.n	8001ab4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7d5b      	ldrb	r3, [r3, #21]
 8001a96:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a9c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001aa2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7f1b      	ldrb	r3, [r3, #28]
 8001aa8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001aaa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aac:	f043 030c 	orr.w	r3, r3, #12
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	e00d      	b.n	8001ad0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7d5b      	ldrb	r3, [r3, #21]
 8001ab8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001abe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ac4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7f1b      	ldrb	r3, [r3, #28]
 8001aca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7f1b      	ldrb	r3, [r3, #28]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d106      	bne.n	8001ae6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	045b      	lsls	r3, r3, #17
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	4b2c      	ldr	r3, [pc, #176]	@ (8001bbc <HAL_ADC_Init+0x2ac>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	69b9      	ldr	r1, [r7, #24]
 8001b12:	430b      	orrs	r3, r1
 8001b14:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fed2 	bl	80018c4 <LL_ADC_REG_IsConversionOngoing>
 8001b20:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fedf 	bl	80018ea <LL_ADC_INJ_IsConversionOngoing>
 8001b2c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d15f      	bne.n	8001bf4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d15c      	bne.n	8001bf4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7d1b      	ldrb	r3, [r3, #20]
 8001b3e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <HAL_ADC_Init+0x2b0>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	69b9      	ldr	r1, [r7, #24]
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d130      	bne.n	8001bc8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <HAL_ADC_Init+0x2b4>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b7a:	3a01      	subs	r2, #1
 8001b7c:	0411      	lsls	r1, r2, #16
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b82:	4311      	orrs	r1, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b88:	4311      	orrs	r1, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	611a      	str	r2, [r3, #16]
 8001b9c:	e01c      	b.n	8001bd8 <HAL_ADC_Init+0x2c8>
 8001b9e:	bf00      	nop
 8001ba0:	24000000 	.word	0x24000000
 8001ba4:	053e2d63 	.word	0x053e2d63
 8001ba8:	40022000 	.word	0x40022000
 8001bac:	40022100 	.word	0x40022100
 8001bb0:	58026000 	.word	0x58026000
 8001bb4:	40022300 	.word	0x40022300
 8001bb8:	58026300 	.word	0x58026300
 8001bbc:	fff0c003 	.word	0xfff0c003
 8001bc0:	ffffbffc 	.word	0xffffbffc
 8001bc4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0201 	bic.w	r2, r2, #1
 8001bd6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fcf6 	bl	80025e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d10c      	bne.n	8001c16 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f023 010f 	bic.w	r1, r3, #15
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	1e5a      	subs	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c14:	e007      	b.n	8001c26 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 020f 	bic.w	r2, r2, #15
 8001c24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2a:	f023 0303 	bic.w	r3, r3, #3
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c36:	e007      	b.n	8001c48 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3c:	f043 0210 	orr.w	r2, r3, #16
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c48:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd90      	pop	{r4, r7, pc}
 8001c52:	bf00      	nop

08001c54 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a92      	ldr	r2, [pc, #584]	@ (8001eac <HAL_ADC_Start_IT+0x258>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d004      	beq.n	8001c70 <HAL_ADC_Start_IT+0x1c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a91      	ldr	r2, [pc, #580]	@ (8001eb0 <HAL_ADC_Start_IT+0x25c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_Start_IT+0x20>
 8001c70:	4b90      	ldr	r3, [pc, #576]	@ (8001eb4 <HAL_ADC_Start_IT+0x260>)
 8001c72:	e000      	b.n	8001c76 <HAL_ADC_Start_IT+0x22>
 8001c74:	4b90      	ldr	r3, [pc, #576]	@ (8001eb8 <HAL_ADC_Start_IT+0x264>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fd8c 	bl	8001794 <LL_ADC_GetMultimode>
 8001c7c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fe1e 	bl	80018c4 <LL_ADC_REG_IsConversionOngoing>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 8118 	bne.w	8001ec0 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_Start_IT+0x4a>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e113      	b.n	8001ec6 <HAL_ADC_Start_IT+0x272>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fc10 	bl	80024cc <ADC_Enable>
 8001cac:	4603      	mov	r3, r0
 8001cae:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 80f5 	bne.w	8001ea2 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001cbc:	4b7f      	ldr	r3, [pc, #508]	@ (8001ebc <HAL_ADC_Start_IT+0x268>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a78      	ldr	r2, [pc, #480]	@ (8001eb0 <HAL_ADC_Start_IT+0x25c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d002      	beq.n	8001cd8 <HAL_ADC_Start_IT+0x84>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e000      	b.n	8001cda <HAL_ADC_Start_IT+0x86>
 8001cd8:	4b74      	ldr	r3, [pc, #464]	@ (8001eac <HAL_ADC_Start_IT+0x258>)
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d002      	beq.n	8001ce8 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d105      	bne.n	8001cf4 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d04:	f023 0206 	bic.w	r2, r3, #6
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	221c      	movs	r2, #28
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 021c 	bic.w	r2, r2, #28
 8001d32:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d108      	bne.n	8001d4e <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0208 	orr.w	r2, r2, #8
 8001d4a:	605a      	str	r2, [r3, #4]
          break;
 8001d4c:	e008      	b.n	8001d60 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0204 	orr.w	r2, r2, #4
 8001d5c:	605a      	str	r2, [r3, #4]
          break;
 8001d5e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d107      	bne.n	8001d78 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0210 	orr.w	r2, r2, #16
 8001d76:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb0 <HAL_ADC_Start_IT+0x25c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d002      	beq.n	8001d88 <HAL_ADC_Start_IT+0x134>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	e000      	b.n	8001d8a <HAL_ADC_Start_IT+0x136>
 8001d88:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <HAL_ADC_Start_IT+0x258>)
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d008      	beq.n	8001da4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b05      	cmp	r3, #5
 8001d9c:	d002      	beq.n	8001da4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d13a      	bne.n	8001e1a <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d02d      	beq.n	8001e0e <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d110      	bne.n	8001dec <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0220 	bic.w	r2, r2, #32
 8001dd8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001de8:	605a      	str	r2, [r3, #4]
              break;
 8001dea:	e010      	b.n	8001e0e <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dfa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0220 	orr.w	r2, r2, #32
 8001e0a:	605a      	str	r2, [r3, #4]
              break;
 8001e0c:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fd42 	bl	800189c <LL_ADC_REG_StartConversion>
 8001e18:	e054      	b.n	8001ec4 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a21      	ldr	r2, [pc, #132]	@ (8001eb0 <HAL_ADC_Start_IT+0x25c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d002      	beq.n	8001e36 <HAL_ADC_Start_IT+0x1e2>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	e000      	b.n	8001e38 <HAL_ADC_Start_IT+0x1e4>
 8001e36:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <HAL_ADC_Start_IT+0x258>)
 8001e38:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d03e      	beq.n	8001ec4 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e4e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d110      	bne.n	8001e80 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0220 	bic.w	r2, r2, #32
 8001e6c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e7c:	605a      	str	r2, [r3, #4]
              break;
 8001e7e:	e021      	b.n	8001ec4 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e8e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0220 	orr.w	r2, r2, #32
 8001e9e:	605a      	str	r2, [r3, #4]
              break;
 8001ea0:	e010      	b.n	8001ec4 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001eaa:	e00b      	b.n	8001ec4 <HAL_ADC_Start_IT+0x270>
 8001eac:	40022000 	.word	0x40022000
 8001eb0:	40022100 	.word	0x40022100
 8001eb4:	40022300 	.word	0x40022300
 8001eb8:	58026300 	.word	0x58026300
 8001ebc:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop

08001ed0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b08d      	sub	sp, #52	@ 0x34
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a65      	ldr	r2, [pc, #404]	@ (800209c <HAL_ADC_ConfigChannel+0x1b0>)
 8001f06:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x2a>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e2c7      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x5ba>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fcce 	bl	80018c4 <LL_ADC_REG_IsConversionOngoing>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 82ac 	bne.w	8002488 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db2c      	blt.n	8001f92 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d108      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x6a>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0e9b      	lsrs	r3, r3, #26
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2201      	movs	r2, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	e016      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x98>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	613b      	str	r3, [r7, #16]
  return result;
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	e003      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2201      	movs	r2, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	69d1      	ldr	r1, [r2, #28]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6859      	ldr	r1, [r3, #4]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f7ff fb7d 	bl	800169e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fc8b 	bl	80018c4 <LL_ADC_REG_IsConversionOngoing>
 8001fae:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fc98 	bl	80018ea <LL_ADC_INJ_IsConversionOngoing>
 8001fba:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 80b8 	bne.w	8002134 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 80b4 	bne.w	8002134 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f7ff fb8c 	bl	80016f6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fde:	4b30      	ldr	r3, [pc, #192]	@ (80020a0 <HAL_ADC_ConfigChannel+0x1b4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001fe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fea:	d10b      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x118>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	e01d      	b.n	8002040 <HAL_ADC_ConfigChannel+0x154>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10b      	bne.n	800202a <HAL_ADC_ConfigChannel+0x13e>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	e00a      	b.n	8002040 <HAL_ADC_ConfigChannel+0x154>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d02c      	beq.n	80020a4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6919      	ldr	r1, [r3, #16]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	f7ff facd 	bl	80015f6 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6919      	ldr	r1, [r3, #16]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	7e5b      	ldrb	r3, [r3, #25]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d102      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x186>
 800206c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002070:	e000      	b.n	8002074 <HAL_ADC_ConfigChannel+0x188>
 8002072:	2300      	movs	r3, #0
 8002074:	461a      	mov	r2, r3
 8002076:	f7ff faf7 	bl	8001668 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6919      	ldr	r1, [r3, #16]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	7e1b      	ldrb	r3, [r3, #24]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d102      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1a4>
 800208a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800208e:	e000      	b.n	8002092 <HAL_ADC_ConfigChannel+0x1a6>
 8002090:	2300      	movs	r3, #0
 8002092:	461a      	mov	r2, r3
 8002094:	f7ff facf 	bl	8001636 <LL_ADC_SetDataRightShift>
 8002098:	e04c      	b.n	8002134 <HAL_ADC_ConfigChannel+0x248>
 800209a:	bf00      	nop
 800209c:	47ff0000 	.word	0x47ff0000
 80020a0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	069b      	lsls	r3, r3, #26
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d107      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020c6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	069b      	lsls	r3, r3, #26
 80020d8:	429a      	cmp	r2, r3
 80020da:	d107      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020ea:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	069b      	lsls	r3, r3, #26
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d107      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800210e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002116:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	069b      	lsls	r3, r3, #26
 8002120:	429a      	cmp	r2, r3
 8002122:	d107      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002132:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fb9b 	bl	8001874 <LL_ADC_IsEnabled>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 81aa 	bne.w	800249a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6819      	ldr	r1, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	461a      	mov	r2, r3
 8002154:	f7ff fafa 	bl	800174c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a87      	ldr	r2, [pc, #540]	@ (800237c <HAL_ADC_ConfigChannel+0x490>)
 800215e:	4293      	cmp	r3, r2
 8002160:	f040 809a 	bne.w	8002298 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4984      	ldr	r1, [pc, #528]	@ (8002380 <HAL_ADC_ConfigChannel+0x494>)
 800216e:	428b      	cmp	r3, r1
 8002170:	d147      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x316>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4983      	ldr	r1, [pc, #524]	@ (8002384 <HAL_ADC_ConfigChannel+0x498>)
 8002178:	428b      	cmp	r3, r1
 800217a:	d040      	beq.n	80021fe <HAL_ADC_ConfigChannel+0x312>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4981      	ldr	r1, [pc, #516]	@ (8002388 <HAL_ADC_ConfigChannel+0x49c>)
 8002182:	428b      	cmp	r3, r1
 8002184:	d039      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x30e>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4980      	ldr	r1, [pc, #512]	@ (800238c <HAL_ADC_ConfigChannel+0x4a0>)
 800218c:	428b      	cmp	r3, r1
 800218e:	d032      	beq.n	80021f6 <HAL_ADC_ConfigChannel+0x30a>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	497e      	ldr	r1, [pc, #504]	@ (8002390 <HAL_ADC_ConfigChannel+0x4a4>)
 8002196:	428b      	cmp	r3, r1
 8002198:	d02b      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x306>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	497d      	ldr	r1, [pc, #500]	@ (8002394 <HAL_ADC_ConfigChannel+0x4a8>)
 80021a0:	428b      	cmp	r3, r1
 80021a2:	d024      	beq.n	80021ee <HAL_ADC_ConfigChannel+0x302>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	497b      	ldr	r1, [pc, #492]	@ (8002398 <HAL_ADC_ConfigChannel+0x4ac>)
 80021aa:	428b      	cmp	r3, r1
 80021ac:	d01d      	beq.n	80021ea <HAL_ADC_ConfigChannel+0x2fe>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	497a      	ldr	r1, [pc, #488]	@ (800239c <HAL_ADC_ConfigChannel+0x4b0>)
 80021b4:	428b      	cmp	r3, r1
 80021b6:	d016      	beq.n	80021e6 <HAL_ADC_ConfigChannel+0x2fa>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4978      	ldr	r1, [pc, #480]	@ (80023a0 <HAL_ADC_ConfigChannel+0x4b4>)
 80021be:	428b      	cmp	r3, r1
 80021c0:	d00f      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x2f6>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4977      	ldr	r1, [pc, #476]	@ (80023a4 <HAL_ADC_ConfigChannel+0x4b8>)
 80021c8:	428b      	cmp	r3, r1
 80021ca:	d008      	beq.n	80021de <HAL_ADC_ConfigChannel+0x2f2>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4975      	ldr	r1, [pc, #468]	@ (80023a8 <HAL_ADC_ConfigChannel+0x4bc>)
 80021d2:	428b      	cmp	r3, r1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x2ee>
 80021d6:	4b75      	ldr	r3, [pc, #468]	@ (80023ac <HAL_ADC_ConfigChannel+0x4c0>)
 80021d8:	e05a      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 80021da:	2300      	movs	r3, #0
 80021dc:	e058      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 80021de:	4b74      	ldr	r3, [pc, #464]	@ (80023b0 <HAL_ADC_ConfigChannel+0x4c4>)
 80021e0:	e056      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 80021e2:	4b74      	ldr	r3, [pc, #464]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4c8>)
 80021e4:	e054      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 80021e6:	4b6e      	ldr	r3, [pc, #440]	@ (80023a0 <HAL_ADC_ConfigChannel+0x4b4>)
 80021e8:	e052      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 80021ea:	4b6c      	ldr	r3, [pc, #432]	@ (800239c <HAL_ADC_ConfigChannel+0x4b0>)
 80021ec:	e050      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 80021ee:	4b72      	ldr	r3, [pc, #456]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4cc>)
 80021f0:	e04e      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 80021f2:	4b72      	ldr	r3, [pc, #456]	@ (80023bc <HAL_ADC_ConfigChannel+0x4d0>)
 80021f4:	e04c      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 80021f6:	4b72      	ldr	r3, [pc, #456]	@ (80023c0 <HAL_ADC_ConfigChannel+0x4d4>)
 80021f8:	e04a      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 80021fa:	4b72      	ldr	r3, [pc, #456]	@ (80023c4 <HAL_ADC_ConfigChannel+0x4d8>)
 80021fc:	e048      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 80021fe:	2301      	movs	r3, #1
 8002200:	e046      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4970      	ldr	r1, [pc, #448]	@ (80023c8 <HAL_ADC_ConfigChannel+0x4dc>)
 8002208:	428b      	cmp	r3, r1
 800220a:	d140      	bne.n	800228e <HAL_ADC_ConfigChannel+0x3a2>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	495c      	ldr	r1, [pc, #368]	@ (8002384 <HAL_ADC_ConfigChannel+0x498>)
 8002212:	428b      	cmp	r3, r1
 8002214:	d039      	beq.n	800228a <HAL_ADC_ConfigChannel+0x39e>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	495b      	ldr	r1, [pc, #364]	@ (8002388 <HAL_ADC_ConfigChannel+0x49c>)
 800221c:	428b      	cmp	r3, r1
 800221e:	d032      	beq.n	8002286 <HAL_ADC_ConfigChannel+0x39a>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4959      	ldr	r1, [pc, #356]	@ (800238c <HAL_ADC_ConfigChannel+0x4a0>)
 8002226:	428b      	cmp	r3, r1
 8002228:	d02b      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x396>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4958      	ldr	r1, [pc, #352]	@ (8002390 <HAL_ADC_ConfigChannel+0x4a4>)
 8002230:	428b      	cmp	r3, r1
 8002232:	d024      	beq.n	800227e <HAL_ADC_ConfigChannel+0x392>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4956      	ldr	r1, [pc, #344]	@ (8002394 <HAL_ADC_ConfigChannel+0x4a8>)
 800223a:	428b      	cmp	r3, r1
 800223c:	d01d      	beq.n	800227a <HAL_ADC_ConfigChannel+0x38e>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4955      	ldr	r1, [pc, #340]	@ (8002398 <HAL_ADC_ConfigChannel+0x4ac>)
 8002244:	428b      	cmp	r3, r1
 8002246:	d016      	beq.n	8002276 <HAL_ADC_ConfigChannel+0x38a>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4953      	ldr	r1, [pc, #332]	@ (800239c <HAL_ADC_ConfigChannel+0x4b0>)
 800224e:	428b      	cmp	r3, r1
 8002250:	d00f      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x386>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4952      	ldr	r1, [pc, #328]	@ (80023a0 <HAL_ADC_ConfigChannel+0x4b4>)
 8002258:	428b      	cmp	r3, r1
 800225a:	d008      	beq.n	800226e <HAL_ADC_ConfigChannel+0x382>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4951      	ldr	r1, [pc, #324]	@ (80023a8 <HAL_ADC_ConfigChannel+0x4bc>)
 8002262:	428b      	cmp	r3, r1
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x37e>
 8002266:	4b51      	ldr	r3, [pc, #324]	@ (80023ac <HAL_ADC_ConfigChannel+0x4c0>)
 8002268:	e012      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 800226a:	2300      	movs	r3, #0
 800226c:	e010      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 800226e:	4b51      	ldr	r3, [pc, #324]	@ (80023b4 <HAL_ADC_ConfigChannel+0x4c8>)
 8002270:	e00e      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 8002272:	4b4b      	ldr	r3, [pc, #300]	@ (80023a0 <HAL_ADC_ConfigChannel+0x4b4>)
 8002274:	e00c      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 8002276:	4b49      	ldr	r3, [pc, #292]	@ (800239c <HAL_ADC_ConfigChannel+0x4b0>)
 8002278:	e00a      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 800227a:	4b4f      	ldr	r3, [pc, #316]	@ (80023b8 <HAL_ADC_ConfigChannel+0x4cc>)
 800227c:	e008      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 800227e:	4b4f      	ldr	r3, [pc, #316]	@ (80023bc <HAL_ADC_ConfigChannel+0x4d0>)
 8002280:	e006      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 8002282:	4b4f      	ldr	r3, [pc, #316]	@ (80023c0 <HAL_ADC_ConfigChannel+0x4d4>)
 8002284:	e004      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 8002286:	4b4f      	ldr	r3, [pc, #316]	@ (80023c4 <HAL_ADC_ConfigChannel+0x4d8>)
 8002288:	e002      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_ADC_ConfigChannel+0x3a4>
 800228e:	2300      	movs	r3, #0
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f7ff f97c 	bl	8001590 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	f280 80fc 	bge.w	800249a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a36      	ldr	r2, [pc, #216]	@ (8002380 <HAL_ADC_ConfigChannel+0x494>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d004      	beq.n	80022b6 <HAL_ADC_ConfigChannel+0x3ca>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a45      	ldr	r2, [pc, #276]	@ (80023c8 <HAL_ADC_ConfigChannel+0x4dc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x3ce>
 80022b6:	4b45      	ldr	r3, [pc, #276]	@ (80023cc <HAL_ADC_ConfigChannel+0x4e0>)
 80022b8:	e000      	b.n	80022bc <HAL_ADC_ConfigChannel+0x3d0>
 80022ba:	4b45      	ldr	r3, [pc, #276]	@ (80023d0 <HAL_ADC_ConfigChannel+0x4e4>)
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff f959 	bl	8001574 <LL_ADC_GetCommonPathInternalCh>
 80022c2:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002380 <HAL_ADC_ConfigChannel+0x494>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_ADC_ConfigChannel+0x3ec>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a3d      	ldr	r2, [pc, #244]	@ (80023c8 <HAL_ADC_ConfigChannel+0x4dc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d10e      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x40a>
 80022d8:	4829      	ldr	r0, [pc, #164]	@ (8002380 <HAL_ADC_ConfigChannel+0x494>)
 80022da:	f7ff facb 	bl	8001874 <LL_ADC_IsEnabled>
 80022de:	4604      	mov	r4, r0
 80022e0:	4839      	ldr	r0, [pc, #228]	@ (80023c8 <HAL_ADC_ConfigChannel+0x4dc>)
 80022e2:	f7ff fac7 	bl	8001874 <LL_ADC_IsEnabled>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4323      	orrs	r3, r4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	e008      	b.n	8002308 <HAL_ADC_ConfigChannel+0x41c>
 80022f6:	4837      	ldr	r0, [pc, #220]	@ (80023d4 <HAL_ADC_ConfigChannel+0x4e8>)
 80022f8:	f7ff fabc 	bl	8001874 <LL_ADC_IsEnabled>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80b3 	beq.w	8002474 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a31      	ldr	r2, [pc, #196]	@ (80023d8 <HAL_ADC_ConfigChannel+0x4ec>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d165      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x4f8>
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d160      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2b      	ldr	r2, [pc, #172]	@ (80023d4 <HAL_ADC_ConfigChannel+0x4e8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	f040 80b6 	bne.w	800249a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a13      	ldr	r2, [pc, #76]	@ (8002380 <HAL_ADC_ConfigChannel+0x494>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_ADC_ConfigChannel+0x456>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a22      	ldr	r2, [pc, #136]	@ (80023c8 <HAL_ADC_ConfigChannel+0x4dc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x45a>
 8002342:	4a22      	ldr	r2, [pc, #136]	@ (80023cc <HAL_ADC_ConfigChannel+0x4e0>)
 8002344:	e000      	b.n	8002348 <HAL_ADC_ConfigChannel+0x45c>
 8002346:	4a22      	ldr	r2, [pc, #136]	@ (80023d0 <HAL_ADC_ConfigChannel+0x4e4>)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f7ff f8fc 	bl	800154e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002356:	4b21      	ldr	r3, [pc, #132]	@ (80023dc <HAL_ADC_ConfigChannel+0x4f0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	099b      	lsrs	r3, r3, #6
 800235c:	4a20      	ldr	r2, [pc, #128]	@ (80023e0 <HAL_ADC_ConfigChannel+0x4f4>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	099b      	lsrs	r3, r3, #6
 8002364:	3301      	adds	r3, #1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800236a:	e002      	b.n	8002372 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3b01      	subs	r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f9      	bne.n	800236c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002378:	e08f      	b.n	800249a <HAL_ADC_ConfigChannel+0x5ae>
 800237a:	bf00      	nop
 800237c:	47ff0000 	.word	0x47ff0000
 8002380:	40022000 	.word	0x40022000
 8002384:	04300002 	.word	0x04300002
 8002388:	08600004 	.word	0x08600004
 800238c:	0c900008 	.word	0x0c900008
 8002390:	10c00010 	.word	0x10c00010
 8002394:	14f00020 	.word	0x14f00020
 8002398:	2a000400 	.word	0x2a000400
 800239c:	2e300800 	.word	0x2e300800
 80023a0:	32601000 	.word	0x32601000
 80023a4:	43210000 	.word	0x43210000
 80023a8:	4b840000 	.word	0x4b840000
 80023ac:	4fb80000 	.word	0x4fb80000
 80023b0:	47520000 	.word	0x47520000
 80023b4:	36902000 	.word	0x36902000
 80023b8:	25b00200 	.word	0x25b00200
 80023bc:	21800100 	.word	0x21800100
 80023c0:	1d500080 	.word	0x1d500080
 80023c4:	19200040 	.word	0x19200040
 80023c8:	40022100 	.word	0x40022100
 80023cc:	40022300 	.word	0x40022300
 80023d0:	58026300 	.word	0x58026300
 80023d4:	58026000 	.word	0x58026000
 80023d8:	cb840000 	.word	0xcb840000
 80023dc:	24000000 	.word	0x24000000
 80023e0:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a31      	ldr	r2, [pc, #196]	@ (80024b0 <HAL_ADC_ConfigChannel+0x5c4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d11e      	bne.n	800242c <HAL_ADC_ConfigChannel+0x540>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d119      	bne.n	800242c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2d      	ldr	r2, [pc, #180]	@ (80024b4 <HAL_ADC_ConfigChannel+0x5c8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d14b      	bne.n	800249a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2c      	ldr	r2, [pc, #176]	@ (80024b8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_ADC_ConfigChannel+0x52a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2a      	ldr	r2, [pc, #168]	@ (80024bc <HAL_ADC_ConfigChannel+0x5d0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_ADC_ConfigChannel+0x52e>
 8002416:	4a2a      	ldr	r2, [pc, #168]	@ (80024c0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002418:	e000      	b.n	800241c <HAL_ADC_ConfigChannel+0x530>
 800241a:	4a2a      	ldr	r2, [pc, #168]	@ (80024c4 <HAL_ADC_ConfigChannel+0x5d8>)
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f7ff f892 	bl	800154e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800242a:	e036      	b.n	800249a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a25      	ldr	r2, [pc, #148]	@ (80024c8 <HAL_ADC_ConfigChannel+0x5dc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d131      	bne.n	800249a <HAL_ADC_ConfigChannel+0x5ae>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d12c      	bne.n	800249a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1b      	ldr	r2, [pc, #108]	@ (80024b4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d127      	bne.n	800249a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1a      	ldr	r2, [pc, #104]	@ (80024b8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d004      	beq.n	800245e <HAL_ADC_ConfigChannel+0x572>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a18      	ldr	r2, [pc, #96]	@ (80024bc <HAL_ADC_ConfigChannel+0x5d0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x576>
 800245e:	4a18      	ldr	r2, [pc, #96]	@ (80024c0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002460:	e000      	b.n	8002464 <HAL_ADC_ConfigChannel+0x578>
 8002462:	4a18      	ldr	r2, [pc, #96]	@ (80024c4 <HAL_ADC_ConfigChannel+0x5d8>)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f7ff f86e 	bl	800154e <LL_ADC_SetCommonPathInternalCh>
 8002472:	e012      	b.n	800249a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002486:	e008      	b.n	800249a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3734      	adds	r7, #52	@ 0x34
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
 80024ae:	bf00      	nop
 80024b0:	c7520000 	.word	0xc7520000
 80024b4:	58026000 	.word	0x58026000
 80024b8:	40022000 	.word	0x40022000
 80024bc:	40022100 	.word	0x40022100
 80024c0:	40022300 	.word	0x40022300
 80024c4:	58026300 	.word	0x58026300
 80024c8:	cfb80000 	.word	0xcfb80000

080024cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff f9cb 	bl	8001874 <LL_ADC_IsEnabled>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d16e      	bne.n	80025c2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	4b38      	ldr	r3, [pc, #224]	@ (80025cc <ADC_Enable+0x100>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00d      	beq.n	800250e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f6:	f043 0210 	orr.w	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e05a      	b.n	80025c4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff f99a 	bl	800184c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002518:	f7fe ffee 	bl	80014f8 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a2b      	ldr	r2, [pc, #172]	@ (80025d0 <ADC_Enable+0x104>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d004      	beq.n	8002532 <ADC_Enable+0x66>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a29      	ldr	r2, [pc, #164]	@ (80025d4 <ADC_Enable+0x108>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <ADC_Enable+0x6a>
 8002532:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <ADC_Enable+0x10c>)
 8002534:	e000      	b.n	8002538 <ADC_Enable+0x6c>
 8002536:	4b29      	ldr	r3, [pc, #164]	@ (80025dc <ADC_Enable+0x110>)
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff f92b 	bl	8001794 <LL_ADC_GetMultimode>
 800253e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a23      	ldr	r2, [pc, #140]	@ (80025d4 <ADC_Enable+0x108>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d002      	beq.n	8002550 <ADC_Enable+0x84>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	e000      	b.n	8002552 <ADC_Enable+0x86>
 8002550:	4b1f      	ldr	r3, [pc, #124]	@ (80025d0 <ADC_Enable+0x104>)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	4293      	cmp	r3, r2
 8002558:	d02c      	beq.n	80025b4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d130      	bne.n	80025c2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002560:	e028      	b.n	80025b4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f984 	bl	8001874 <LL_ADC_IsEnabled>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff f968 	bl	800184c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800257c:	f7fe ffbc 	bl	80014f8 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d914      	bls.n	80025b4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d00d      	beq.n	80025b4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	f043 0210 	orr.w	r2, r3, #16
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e007      	b.n	80025c4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d1cf      	bne.n	8002562 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	8000003f 	.word	0x8000003f
 80025d0:	40022000 	.word	0x40022000
 80025d4:	40022100 	.word	0x40022100
 80025d8:	40022300 	.word	0x40022300
 80025dc:	58026300 	.word	0x58026300

080025e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a7a      	ldr	r2, [pc, #488]	@ (80027d8 <ADC_ConfigureBoostMode+0x1f8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <ADC_ConfigureBoostMode+0x1c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a79      	ldr	r2, [pc, #484]	@ (80027dc <ADC_ConfigureBoostMode+0x1fc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d109      	bne.n	8002610 <ADC_ConfigureBoostMode+0x30>
 80025fc:	4b78      	ldr	r3, [pc, #480]	@ (80027e0 <ADC_ConfigureBoostMode+0x200>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf14      	ite	ne
 8002608:	2301      	movne	r3, #1
 800260a:	2300      	moveq	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	e008      	b.n	8002622 <ADC_ConfigureBoostMode+0x42>
 8002610:	4b74      	ldr	r3, [pc, #464]	@ (80027e4 <ADC_ConfigureBoostMode+0x204>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01c      	beq.n	8002660 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002626:	f001 fc8d 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 800262a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002634:	d010      	beq.n	8002658 <ADC_ConfigureBoostMode+0x78>
 8002636:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800263a:	d873      	bhi.n	8002724 <ADC_ConfigureBoostMode+0x144>
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002640:	d002      	beq.n	8002648 <ADC_ConfigureBoostMode+0x68>
 8002642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002646:	d16d      	bne.n	8002724 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0c1b      	lsrs	r3, r3, #16
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	60fb      	str	r3, [r7, #12]
        break;
 8002656:	e068      	b.n	800272a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	60fb      	str	r3, [r7, #12]
        break;
 800265e:	e064      	b.n	800272a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002660:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002664:	f04f 0100 	mov.w	r1, #0
 8002668:	f002 ff14 	bl	8005494 <HAL_RCCEx_GetPeriphCLKFreq>
 800266c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002676:	d051      	beq.n	800271c <ADC_ConfigureBoostMode+0x13c>
 8002678:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800267c:	d854      	bhi.n	8002728 <ADC_ConfigureBoostMode+0x148>
 800267e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002682:	d047      	beq.n	8002714 <ADC_ConfigureBoostMode+0x134>
 8002684:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002688:	d84e      	bhi.n	8002728 <ADC_ConfigureBoostMode+0x148>
 800268a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800268e:	d03d      	beq.n	800270c <ADC_ConfigureBoostMode+0x12c>
 8002690:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002694:	d848      	bhi.n	8002728 <ADC_ConfigureBoostMode+0x148>
 8002696:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800269a:	d033      	beq.n	8002704 <ADC_ConfigureBoostMode+0x124>
 800269c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026a0:	d842      	bhi.n	8002728 <ADC_ConfigureBoostMode+0x148>
 80026a2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80026a6:	d029      	beq.n	80026fc <ADC_ConfigureBoostMode+0x11c>
 80026a8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80026ac:	d83c      	bhi.n	8002728 <ADC_ConfigureBoostMode+0x148>
 80026ae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026b2:	d01a      	beq.n	80026ea <ADC_ConfigureBoostMode+0x10a>
 80026b4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026b8:	d836      	bhi.n	8002728 <ADC_ConfigureBoostMode+0x148>
 80026ba:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026be:	d014      	beq.n	80026ea <ADC_ConfigureBoostMode+0x10a>
 80026c0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026c4:	d830      	bhi.n	8002728 <ADC_ConfigureBoostMode+0x148>
 80026c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026ca:	d00e      	beq.n	80026ea <ADC_ConfigureBoostMode+0x10a>
 80026cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026d0:	d82a      	bhi.n	8002728 <ADC_ConfigureBoostMode+0x148>
 80026d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026d6:	d008      	beq.n	80026ea <ADC_ConfigureBoostMode+0x10a>
 80026d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026dc:	d824      	bhi.n	8002728 <ADC_ConfigureBoostMode+0x148>
 80026de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026e2:	d002      	beq.n	80026ea <ADC_ConfigureBoostMode+0x10a>
 80026e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026e8:	d11e      	bne.n	8002728 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	0c9b      	lsrs	r3, r3, #18
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	60fb      	str	r3, [r7, #12]
        break;
 80026fa:	e016      	b.n	800272a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	60fb      	str	r3, [r7, #12]
        break;
 8002702:	e012      	b.n	800272a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	60fb      	str	r3, [r7, #12]
        break;
 800270a:	e00e      	b.n	800272a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	099b      	lsrs	r3, r3, #6
 8002710:	60fb      	str	r3, [r7, #12]
        break;
 8002712:	e00a      	b.n	800272a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	09db      	lsrs	r3, r3, #7
 8002718:	60fb      	str	r3, [r7, #12]
        break;
 800271a:	e006      	b.n	800272a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	60fb      	str	r3, [r7, #12]
        break;
 8002722:	e002      	b.n	800272a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002724:	bf00      	nop
 8002726:	e000      	b.n	800272a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002728:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800272a:	f7fe fef1 	bl	8001510 <HAL_GetREVID>
 800272e:	4603      	mov	r3, r0
 8002730:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002734:	4293      	cmp	r3, r2
 8002736:	d815      	bhi.n	8002764 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a2b      	ldr	r2, [pc, #172]	@ (80027e8 <ADC_ConfigureBoostMode+0x208>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d908      	bls.n	8002752 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800274e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002750:	e03e      	b.n	80027d0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002760:	609a      	str	r2, [r3, #8]
}
 8002762:	e035      	b.n	80027d0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4a1f      	ldr	r2, [pc, #124]	@ (80027ec <ADC_ConfigureBoostMode+0x20c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d808      	bhi.n	8002784 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002780:	609a      	str	r2, [r3, #8]
}
 8002782:	e025      	b.n	80027d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a1a      	ldr	r2, [pc, #104]	@ (80027f0 <ADC_ConfigureBoostMode+0x210>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d80a      	bhi.n	80027a2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800279e:	609a      	str	r2, [r3, #8]
}
 80027a0:	e016      	b.n	80027d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a13      	ldr	r2, [pc, #76]	@ (80027f4 <ADC_ConfigureBoostMode+0x214>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d80a      	bhi.n	80027c0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027bc:	609a      	str	r2, [r3, #8]
}
 80027be:	e007      	b.n	80027d0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40022000 	.word	0x40022000
 80027dc:	40022100 	.word	0x40022100
 80027e0:	40022300 	.word	0x40022300
 80027e4:	58026300 	.word	0x58026300
 80027e8:	01312d00 	.word	0x01312d00
 80027ec:	005f5e10 	.word	0x005f5e10
 80027f0:	00bebc20 	.word	0x00bebc20
 80027f4:	017d7840 	.word	0x017d7840

080027f8 <LL_ADC_IsEnabled>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <LL_ADC_IsEnabled+0x18>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <LL_ADC_IsEnabled+0x1a>
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_ADC_REG_IsConversionOngoing>:
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b04      	cmp	r3, #4
 8002830:	d101      	bne.n	8002836 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b09f      	sub	sp, #124	@ 0x7c
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800285e:	2302      	movs	r3, #2
 8002860:	e0be      	b.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800286e:	2300      	movs	r3, #0
 8002870:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a5c      	ldr	r2, [pc, #368]	@ (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d102      	bne.n	8002882 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800287c:	4b5b      	ldr	r3, [pc, #364]	@ (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	e001      	b.n	8002886 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10b      	bne.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e09d      	b.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ffb9 	bl	800281e <LL_ADC_REG_IsConversionOngoing>
 80028ac:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ffb3 	bl	800281e <LL_ADC_REG_IsConversionOngoing>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d17f      	bne.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d17c      	bne.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a47      	ldr	r2, [pc, #284]	@ (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a46      	ldr	r2, [pc, #280]	@ (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80028d8:	4b45      	ldr	r3, [pc, #276]	@ (80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80028da:	e000      	b.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80028dc:	4b45      	ldr	r3, [pc, #276]	@ (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80028de:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d039      	beq.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80028e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028f8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a3a      	ldr	r2, [pc, #232]	@ (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d004      	beq.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a38      	ldr	r2, [pc, #224]	@ (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10e      	bne.n	800292c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800290e:	4836      	ldr	r0, [pc, #216]	@ (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002910:	f7ff ff72 	bl	80027f8 <LL_ADC_IsEnabled>
 8002914:	4604      	mov	r4, r0
 8002916:	4835      	ldr	r0, [pc, #212]	@ (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002918:	f7ff ff6e 	bl	80027f8 <LL_ADC_IsEnabled>
 800291c:	4603      	mov	r3, r0
 800291e:	4323      	orrs	r3, r4
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	e008      	b.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800292c:	4832      	ldr	r0, [pc, #200]	@ (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800292e:	f7ff ff63 	bl	80027f8 <LL_ADC_IsEnabled>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d047      	beq.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002948:	4013      	ands	r3, r2
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	6811      	ldr	r1, [r2, #0]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	6892      	ldr	r2, [r2, #8]
 8002952:	430a      	orrs	r2, r1
 8002954:	431a      	orrs	r2, r3
 8002956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002958:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800295a:	e03a      	b.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800295c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002966:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1e      	ldr	r2, [pc, #120]	@ (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1d      	ldr	r2, [pc, #116]	@ (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d10e      	bne.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800297c:	481a      	ldr	r0, [pc, #104]	@ (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800297e:	f7ff ff3b 	bl	80027f8 <LL_ADC_IsEnabled>
 8002982:	4604      	mov	r4, r0
 8002984:	4819      	ldr	r0, [pc, #100]	@ (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002986:	f7ff ff37 	bl	80027f8 <LL_ADC_IsEnabled>
 800298a:	4603      	mov	r3, r0
 800298c:	4323      	orrs	r3, r4
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	e008      	b.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800299a:	4817      	ldr	r0, [pc, #92]	@ (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800299c:	f7ff ff2c 	bl	80027f8 <LL_ADC_IsEnabled>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d010      	beq.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029ba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029bc:	e009      	b.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c2:	f043 0220 	orr.w	r2, r3, #32
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80029d0:	e000      	b.n	80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029dc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	377c      	adds	r7, #124	@ 0x7c
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd90      	pop	{r4, r7, pc}
 80029e8:	40022000 	.word	0x40022000
 80029ec:	40022100 	.word	0x40022100
 80029f0:	40022300 	.word	0x40022300
 80029f4:	58026300 	.word	0x58026300
 80029f8:	58026000 	.word	0x58026000
 80029fc:	fffff0e0 	.word	0xfffff0e0

08002a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <__NVIC_SetPriorityGrouping+0x40>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a28:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2e:	4a04      	ldr	r2, [pc, #16]	@ (8002a40 <__NVIC_SetPriorityGrouping+0x40>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	60d3      	str	r3, [r2, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00
 8002a44:	05fa0000 	.word	0x05fa0000

08002a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a4c:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <__NVIC_GetPriorityGrouping+0x18>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	f003 0307 	and.w	r3, r3, #7
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	db0b      	blt.n	8002a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	f003 021f 	and.w	r2, r3, #31
 8002a7c:	4907      	ldr	r1, [pc, #28]	@ (8002a9c <__NVIC_EnableIRQ+0x38>)
 8002a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2001      	movs	r0, #1
 8002a86:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000e100 	.word	0xe000e100

08002aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db0a      	blt.n	8002aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	490c      	ldr	r1, [pc, #48]	@ (8002aec <__NVIC_SetPriority+0x4c>)
 8002aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac8:	e00a      	b.n	8002ae0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4908      	ldr	r1, [pc, #32]	@ (8002af0 <__NVIC_SetPriority+0x50>)
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	3b04      	subs	r3, #4
 8002ad8:	0112      	lsls	r2, r2, #4
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	440b      	add	r3, r1
 8002ade:	761a      	strb	r2, [r3, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	@ 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f1c3 0307 	rsb	r3, r3, #7
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	bf28      	it	cs
 8002b12:	2304      	movcs	r3, #4
 8002b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d902      	bls.n	8002b24 <NVIC_EncodePriority+0x30>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3b03      	subs	r3, #3
 8002b22:	e000      	b.n	8002b26 <NVIC_EncodePriority+0x32>
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	4313      	orrs	r3, r2
         );
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3724      	adds	r7, #36	@ 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ff4c 	bl	8002a00 <__NVIC_SetPriorityGrouping>
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b7e:	f7ff ff63 	bl	8002a48 <__NVIC_GetPriorityGrouping>
 8002b82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	6978      	ldr	r0, [r7, #20]
 8002b8a:	f7ff ffb3 	bl	8002af4 <NVIC_EncodePriority>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ff82 	bl	8002aa0 <__NVIC_SetPriority>
}
 8002b9c:	bf00      	nop
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff ff56 	bl	8002a64 <__NVIC_EnableIRQ>
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	@ 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002bce:	4b89      	ldr	r3, [pc, #548]	@ (8002df4 <HAL_GPIO_Init+0x234>)
 8002bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bd2:	e194      	b.n	8002efe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2101      	movs	r1, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 8186 	beq.w	8002ef8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d005      	beq.n	8002c04 <HAL_GPIO_Init+0x44>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d130      	bne.n	8002c66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	f003 0201 	and.w	r2, r3, #1
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d017      	beq.n	8002ca2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d123      	bne.n	8002cf6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	08da      	lsrs	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3208      	adds	r2, #8
 8002cf0:	69b9      	ldr	r1, [r7, #24]
 8002cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	2203      	movs	r2, #3
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0203 	and.w	r2, r3, #3
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 80e0 	beq.w	8002ef8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d38:	4b2f      	ldr	r3, [pc, #188]	@ (8002df8 <HAL_GPIO_Init+0x238>)
 8002d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8002df8 <HAL_GPIO_Init+0x238>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d48:	4b2b      	ldr	r3, [pc, #172]	@ (8002df8 <HAL_GPIO_Init+0x238>)
 8002d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d56:	4a29      	ldr	r2, [pc, #164]	@ (8002dfc <HAL_GPIO_Init+0x23c>)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a20      	ldr	r2, [pc, #128]	@ (8002e00 <HAL_GPIO_Init+0x240>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d052      	beq.n	8002e28 <HAL_GPIO_Init+0x268>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a1f      	ldr	r2, [pc, #124]	@ (8002e04 <HAL_GPIO_Init+0x244>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d031      	beq.n	8002dee <HAL_GPIO_Init+0x22e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8002e08 <HAL_GPIO_Init+0x248>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d02b      	beq.n	8002dea <HAL_GPIO_Init+0x22a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a1d      	ldr	r2, [pc, #116]	@ (8002e0c <HAL_GPIO_Init+0x24c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d025      	beq.n	8002de6 <HAL_GPIO_Init+0x226>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8002e10 <HAL_GPIO_Init+0x250>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01f      	beq.n	8002de2 <HAL_GPIO_Init+0x222>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e14 <HAL_GPIO_Init+0x254>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d019      	beq.n	8002dde <HAL_GPIO_Init+0x21e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a1a      	ldr	r2, [pc, #104]	@ (8002e18 <HAL_GPIO_Init+0x258>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_GPIO_Init+0x21a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a19      	ldr	r2, [pc, #100]	@ (8002e1c <HAL_GPIO_Init+0x25c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00d      	beq.n	8002dd6 <HAL_GPIO_Init+0x216>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a18      	ldr	r2, [pc, #96]	@ (8002e20 <HAL_GPIO_Init+0x260>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <HAL_GPIO_Init+0x212>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a17      	ldr	r2, [pc, #92]	@ (8002e24 <HAL_GPIO_Init+0x264>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_GPIO_Init+0x20e>
 8002dca:	2309      	movs	r3, #9
 8002dcc:	e02d      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dce:	230a      	movs	r3, #10
 8002dd0:	e02b      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	e029      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dd6:	2307      	movs	r3, #7
 8002dd8:	e027      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dda:	2306      	movs	r3, #6
 8002ddc:	e025      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dde:	2305      	movs	r3, #5
 8002de0:	e023      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002de2:	2304      	movs	r3, #4
 8002de4:	e021      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002de6:	2303      	movs	r3, #3
 8002de8:	e01f      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e01d      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e01b      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002df2:	bf00      	nop
 8002df4:	58000080 	.word	0x58000080
 8002df8:	58024400 	.word	0x58024400
 8002dfc:	58000400 	.word	0x58000400
 8002e00:	58020000 	.word	0x58020000
 8002e04:	58020400 	.word	0x58020400
 8002e08:	58020800 	.word	0x58020800
 8002e0c:	58020c00 	.word	0x58020c00
 8002e10:	58021000 	.word	0x58021000
 8002e14:	58021400 	.word	0x58021400
 8002e18:	58021800 	.word	0x58021800
 8002e1c:	58021c00 	.word	0x58021c00
 8002e20:	58022000 	.word	0x58022000
 8002e24:	58022400 	.word	0x58022400
 8002e28:	2300      	movs	r3, #0
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	f002 0203 	and.w	r2, r2, #3
 8002e30:	0092      	lsls	r2, r2, #2
 8002e32:	4093      	lsls	r3, r2
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e3a:	4938      	ldr	r1, [pc, #224]	@ (8002f1c <HAL_GPIO_Init+0x35c>)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	3302      	adds	r3, #2
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f47f ae63 	bne.w	8002bd4 <HAL_GPIO_Init+0x14>
  }
}
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
 8002f12:	3724      	adds	r7, #36	@ 0x24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	58000400 	.word	0x58000400

08002f20 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002f28:	4a08      	ldr	r2, [pc, #32]	@ (8002f4c <HAL_HSEM_FastTake+0x2c>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3320      	adds	r3, #32
 8002f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f32:	4a07      	ldr	r2, [pc, #28]	@ (8002f50 <HAL_HSEM_FastTake+0x30>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d101      	bne.n	8002f3c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	58026400 	.word	0x58026400
 8002f50:	80000300 	.word	0x80000300

08002f54 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002f5e:	4906      	ldr	r1, [pc, #24]	@ (8002f78 <HAL_HSEM_Release+0x24>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	58026400 	.word	0x58026400

08002f7c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f84:	4b29      	ldr	r3, [pc, #164]	@ (800302c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f90:	4b26      	ldr	r3, [pc, #152]	@ (800302c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d001      	beq.n	8002fa2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e040      	b.n	8003024 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e03e      	b.n	8003024 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002fa6:	4b21      	ldr	r3, [pc, #132]	@ (800302c <HAL_PWREx_ConfigSupply+0xb0>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002fae:	491f      	ldr	r1, [pc, #124]	@ (800302c <HAL_PWREx_ConfigSupply+0xb0>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002fb6:	f7fe fa9f 	bl	80014f8 <HAL_GetTick>
 8002fba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fbc:	e009      	b.n	8002fd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fbe:	f7fe fa9b 	bl	80014f8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fcc:	d901      	bls.n	8002fd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e028      	b.n	8003024 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fd2:	4b16      	ldr	r3, [pc, #88]	@ (800302c <HAL_PWREx_ConfigSupply+0xb0>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fde:	d1ee      	bne.n	8002fbe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b1e      	cmp	r3, #30
 8002fe4:	d008      	beq.n	8002ff8 <HAL_PWREx_ConfigSupply+0x7c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fea:	d005      	beq.n	8002ff8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b1d      	cmp	r3, #29
 8002ff0:	d002      	beq.n	8002ff8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b2d      	cmp	r3, #45	@ 0x2d
 8002ff6:	d114      	bne.n	8003022 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002ff8:	f7fe fa7e 	bl	80014f8 <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ffe:	e009      	b.n	8003014 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003000:	f7fe fa7a 	bl	80014f8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800300e:	d901      	bls.n	8003014 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e007      	b.n	8003024 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_PWREx_ConfigSupply+0xb0>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003020:	d1ee      	bne.n	8003000 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	58024800 	.word	0x58024800

08003030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	@ 0x30
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	f000 bc48 	b.w	80038d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8088 	beq.w	8003162 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003052:	4b99      	ldr	r3, [pc, #612]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800305a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800305c:	4b96      	ldr	r3, [pc, #600]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003064:	2b10      	cmp	r3, #16
 8003066:	d007      	beq.n	8003078 <HAL_RCC_OscConfig+0x48>
 8003068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306a:	2b18      	cmp	r3, #24
 800306c:	d111      	bne.n	8003092 <HAL_RCC_OscConfig+0x62>
 800306e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d10c      	bne.n	8003092 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	4b8f      	ldr	r3, [pc, #572]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d06d      	beq.n	8003160 <HAL_RCC_OscConfig+0x130>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d169      	bne.n	8003160 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f000 bc21 	b.w	80038d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x7a>
 800309c:	4b86      	ldr	r3, [pc, #536]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a85      	ldr	r2, [pc, #532]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	e02e      	b.n	8003108 <HAL_RCC_OscConfig+0xd8>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x9c>
 80030b2:	4b81      	ldr	r3, [pc, #516]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a80      	ldr	r2, [pc, #512]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b7e      	ldr	r3, [pc, #504]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7d      	ldr	r2, [pc, #500]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e01d      	b.n	8003108 <HAL_RCC_OscConfig+0xd8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0xc0>
 80030d6:	4b78      	ldr	r3, [pc, #480]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a77      	ldr	r2, [pc, #476]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b75      	ldr	r3, [pc, #468]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a74      	ldr	r2, [pc, #464]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xd8>
 80030f0:	4b71      	ldr	r3, [pc, #452]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a70      	ldr	r2, [pc, #448]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b6e      	ldr	r3, [pc, #440]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6d      	ldr	r2, [pc, #436]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe f9f2 	bl	80014f8 <HAL_GetTick>
 8003114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe f9ee 	bl	80014f8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	@ 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e3d4      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800312a:	4b63      	ldr	r3, [pc, #396]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xe8>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe f9de 	bl	80014f8 <HAL_GetTick>
 800313c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe f9da 	bl	80014f8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	@ 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e3c0      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003152:	4b59      	ldr	r3, [pc, #356]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x110>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80ca 	beq.w	8003304 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003170:	4b51      	ldr	r3, [pc, #324]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003178:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800317a:	4b4f      	ldr	r3, [pc, #316]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_RCC_OscConfig+0x166>
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	2b18      	cmp	r3, #24
 800318a:	d156      	bne.n	800323a <HAL_RCC_OscConfig+0x20a>
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d151      	bne.n	800323a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003196:	4b48      	ldr	r3, [pc, #288]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_RCC_OscConfig+0x17e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e392      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031ae:	4b42      	ldr	r3, [pc, #264]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 0219 	bic.w	r2, r3, #25
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	493f      	ldr	r1, [pc, #252]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe f99a 	bl	80014f8 <HAL_GetTick>
 80031c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fe f996 	bl	80014f8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e37c      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031da:	4b37      	ldr	r3, [pc, #220]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	f7fe f993 	bl	8001510 <HAL_GetREVID>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d817      	bhi.n	8003224 <HAL_RCC_OscConfig+0x1f4>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	d108      	bne.n	800320e <HAL_RCC_OscConfig+0x1de>
 80031fc:	4b2e      	ldr	r3, [pc, #184]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003204:	4a2c      	ldr	r2, [pc, #176]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800320a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320c:	e07a      	b.n	8003304 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320e:	4b2a      	ldr	r3, [pc, #168]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	031b      	lsls	r3, r3, #12
 800321c:	4926      	ldr	r1, [pc, #152]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003222:	e06f      	b.n	8003304 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b24      	ldr	r3, [pc, #144]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	4921      	ldr	r1, [pc, #132]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003238:	e064      	b.n	8003304 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d047      	beq.n	80032d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003242:	4b1d      	ldr	r3, [pc, #116]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 0219 	bic.w	r2, r3, #25
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	491a      	ldr	r1, [pc, #104]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe f950 	bl	80014f8 <HAL_GetTick>
 8003258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325c:	f7fe f94c 	bl	80014f8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e332      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800326e:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327a:	f7fe f949 	bl	8001510 <HAL_GetREVID>
 800327e:	4603      	mov	r3, r0
 8003280:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003284:	4293      	cmp	r3, r2
 8003286:	d819      	bhi.n	80032bc <HAL_RCC_OscConfig+0x28c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b40      	cmp	r3, #64	@ 0x40
 800328e:	d108      	bne.n	80032a2 <HAL_RCC_OscConfig+0x272>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003298:	4a07      	ldr	r2, [pc, #28]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800329a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800329e:	6053      	str	r3, [r2, #4]
 80032a0:	e030      	b.n	8003304 <HAL_RCC_OscConfig+0x2d4>
 80032a2:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	031b      	lsls	r3, r3, #12
 80032b0:	4901      	ldr	r1, [pc, #4]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	604b      	str	r3, [r1, #4]
 80032b6:	e025      	b.n	8003304 <HAL_RCC_OscConfig+0x2d4>
 80032b8:	58024400 	.word	0x58024400
 80032bc:	4b9a      	ldr	r3, [pc, #616]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	4997      	ldr	r1, [pc, #604]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
 80032d0:	e018      	b.n	8003304 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d2:	4b95      	ldr	r3, [pc, #596]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a94      	ldr	r2, [pc, #592]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fe f90b 	bl	80014f8 <HAL_GetTick>
 80032e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e6:	f7fe f907 	bl	80014f8 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e2ed      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032f8:	4b8b      	ldr	r3, [pc, #556]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a9 	beq.w	8003464 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003312:	4b85      	ldr	r3, [pc, #532]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800331a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800331c:	4b82      	ldr	r3, [pc, #520]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d007      	beq.n	8003338 <HAL_RCC_OscConfig+0x308>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b18      	cmp	r3, #24
 800332c:	d13a      	bne.n	80033a4 <HAL_RCC_OscConfig+0x374>
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d135      	bne.n	80033a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003338:	4b7b      	ldr	r3, [pc, #492]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x320>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	2b80      	cmp	r3, #128	@ 0x80
 800334a:	d001      	beq.n	8003350 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e2c1      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003350:	f7fe f8de 	bl	8001510 <HAL_GetREVID>
 8003354:	4603      	mov	r3, r0
 8003356:	f241 0203 	movw	r2, #4099	@ 0x1003
 800335a:	4293      	cmp	r3, r2
 800335c:	d817      	bhi.n	800338e <HAL_RCC_OscConfig+0x35e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	2b20      	cmp	r3, #32
 8003364:	d108      	bne.n	8003378 <HAL_RCC_OscConfig+0x348>
 8003366:	4b70      	ldr	r3, [pc, #448]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800336e:	4a6e      	ldr	r2, [pc, #440]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003370:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003374:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003376:	e075      	b.n	8003464 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003378:	4b6b      	ldr	r3, [pc, #428]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	069b      	lsls	r3, r3, #26
 8003386:	4968      	ldr	r1, [pc, #416]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800338c:	e06a      	b.n	8003464 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800338e:	4b66      	ldr	r3, [pc, #408]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	061b      	lsls	r3, r3, #24
 800339c:	4962      	ldr	r1, [pc, #392]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033a2:	e05f      	b.n	8003464 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d042      	beq.n	8003432 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80033ac:	4b5e      	ldr	r3, [pc, #376]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80033b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe f89e 	bl	80014f8 <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033c0:	f7fe f89a 	bl	80014f8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e280      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033d2:	4b55      	ldr	r3, [pc, #340]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033de:	f7fe f897 	bl	8001510 <HAL_GetREVID>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d817      	bhi.n	800341c <HAL_RCC_OscConfig+0x3ec>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d108      	bne.n	8003406 <HAL_RCC_OscConfig+0x3d6>
 80033f4:	4b4c      	ldr	r3, [pc, #304]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80033fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80033fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003402:	6053      	str	r3, [r2, #4]
 8003404:	e02e      	b.n	8003464 <HAL_RCC_OscConfig+0x434>
 8003406:	4b48      	ldr	r3, [pc, #288]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	069b      	lsls	r3, r3, #26
 8003414:	4944      	ldr	r1, [pc, #272]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
 800341a:	e023      	b.n	8003464 <HAL_RCC_OscConfig+0x434>
 800341c:	4b42      	ldr	r3, [pc, #264]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	493f      	ldr	r1, [pc, #252]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800342c:	4313      	orrs	r3, r2
 800342e:	60cb      	str	r3, [r1, #12]
 8003430:	e018      	b.n	8003464 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003432:	4b3d      	ldr	r3, [pc, #244]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a3c      	ldr	r2, [pc, #240]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fe f85b 	bl	80014f8 <HAL_GetTick>
 8003442:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003446:	f7fe f857 	bl	80014f8 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e23d      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003458:	4b33      	ldr	r3, [pc, #204]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f0      	bne.n	8003446 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d036      	beq.n	80034de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d019      	beq.n	80034ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003478:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800347a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800347c:	4a2a      	ldr	r2, [pc, #168]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fe f838 	bl	80014f8 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7fe f834 	bl	80014f8 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e21a      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800349e:	4b22      	ldr	r3, [pc, #136]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80034a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x45c>
 80034aa:	e018      	b.n	80034de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80034ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fe f81e 	bl	80014f8 <HAL_GetTick>
 80034bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c0:	f7fe f81a 	bl	80014f8 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e200      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034d2:	4b15      	ldr	r3, [pc, #84]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80034d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d039      	beq.n	800355e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01c      	beq.n	800352c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80034f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034fe:	f7fd fffb 	bl	80014f8 <HAL_GetTick>
 8003502:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003506:	f7fd fff7 	bl	80014f8 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e1dd      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003518:	4b03      	ldr	r3, [pc, #12]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x4d6>
 8003524:	e01b      	b.n	800355e <HAL_RCC_OscConfig+0x52e>
 8003526:	bf00      	nop
 8003528:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800352c:	4b9b      	ldr	r3, [pc, #620]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a9a      	ldr	r2, [pc, #616]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003532:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003536:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003538:	f7fd ffde 	bl	80014f8 <HAL_GetTick>
 800353c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003540:	f7fd ffda 	bl	80014f8 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e1c0      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003552:	4b92      	ldr	r3, [pc, #584]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8081 	beq.w	800366e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800356c:	4b8c      	ldr	r3, [pc, #560]	@ (80037a0 <HAL_RCC_OscConfig+0x770>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a8b      	ldr	r2, [pc, #556]	@ (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003576:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003578:	f7fd ffbe 	bl	80014f8 <HAL_GetTick>
 800357c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003580:	f7fd ffba 	bl	80014f8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	@ 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1a0      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003592:	4b83      	ldr	r3, [pc, #524]	@ (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d106      	bne.n	80035b4 <HAL_RCC_OscConfig+0x584>
 80035a6:	4b7d      	ldr	r3, [pc, #500]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	4a7c      	ldr	r2, [pc, #496]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b2:	e02d      	b.n	8003610 <HAL_RCC_OscConfig+0x5e0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10c      	bne.n	80035d6 <HAL_RCC_OscConfig+0x5a6>
 80035bc:	4b77      	ldr	r3, [pc, #476]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c0:	4a76      	ldr	r2, [pc, #472]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c8:	4b74      	ldr	r3, [pc, #464]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035cc:	4a73      	ldr	r2, [pc, #460]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035ce:	f023 0304 	bic.w	r3, r3, #4
 80035d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d4:	e01c      	b.n	8003610 <HAL_RCC_OscConfig+0x5e0>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b05      	cmp	r3, #5
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x5c8>
 80035de:	4b6f      	ldr	r3, [pc, #444]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e2:	4a6e      	ldr	r2, [pc, #440]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035e4:	f043 0304 	orr.w	r3, r3, #4
 80035e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ea:	4b6c      	ldr	r3, [pc, #432]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ee:	4a6b      	ldr	r2, [pc, #428]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f6:	e00b      	b.n	8003610 <HAL_RCC_OscConfig+0x5e0>
 80035f8:	4b68      	ldr	r3, [pc, #416]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fc:	4a67      	ldr	r2, [pc, #412]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	6713      	str	r3, [r2, #112]	@ 0x70
 8003604:	4b65      	ldr	r3, [pc, #404]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003608:	4a64      	ldr	r2, [pc, #400]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800360a:	f023 0304 	bic.w	r3, r3, #4
 800360e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fd ff6e 	bl	80014f8 <HAL_GetTick>
 800361c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003620:	f7fd ff6a 	bl	80014f8 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e14e      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003636:	4b59      	ldr	r3, [pc, #356]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0ee      	beq.n	8003620 <HAL_RCC_OscConfig+0x5f0>
 8003642:	e014      	b.n	800366e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fd ff58 	bl	80014f8 <HAL_GetTick>
 8003648:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fd ff54 	bl	80014f8 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e138      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003662:	4b4e      	ldr	r3, [pc, #312]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1ee      	bne.n	800364c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 812d 	beq.w	80038d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003678:	4b48      	ldr	r3, [pc, #288]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003680:	2b18      	cmp	r3, #24
 8003682:	f000 80bd 	beq.w	8003800 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	2b02      	cmp	r3, #2
 800368c:	f040 809e 	bne.w	80037cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003690:	4b42      	ldr	r3, [pc, #264]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a41      	ldr	r2, [pc, #260]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800369a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fd ff2c 	bl	80014f8 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fd ff28 	bl	80014f8 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e10e      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036b6:	4b39      	ldr	r3, [pc, #228]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c2:	4b36      	ldr	r3, [pc, #216]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80036c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036c6:	4b37      	ldr	r3, [pc, #220]	@ (80037a4 <HAL_RCC_OscConfig+0x774>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036d2:	0112      	lsls	r2, r2, #4
 80036d4:	430a      	orrs	r2, r1
 80036d6:	4931      	ldr	r1, [pc, #196]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	628b      	str	r3, [r1, #40]	@ 0x28
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	3b01      	subs	r3, #1
 80036e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ea:	3b01      	subs	r3, #1
 80036ec:	025b      	lsls	r3, r3, #9
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	3b01      	subs	r3, #1
 80036f8:	041b      	lsls	r3, r3, #16
 80036fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003704:	3b01      	subs	r3, #1
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800370c:	4923      	ldr	r1, [pc, #140]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800370e:	4313      	orrs	r3, r2
 8003710:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003712:	4b22      	ldr	r3, [pc, #136]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003716:	4a21      	ldr	r2, [pc, #132]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800371e:	4b1f      	ldr	r3, [pc, #124]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003722:	4b21      	ldr	r3, [pc, #132]	@ (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003724:	4013      	ands	r3, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800372a:	00d2      	lsls	r2, r2, #3
 800372c:	491b      	ldr	r1, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003732:	4b1a      	ldr	r3, [pc, #104]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	f023 020c 	bic.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	4917      	ldr	r1, [pc, #92]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003740:	4313      	orrs	r3, r2
 8003742:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003744:	4b15      	ldr	r3, [pc, #84]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	f023 0202 	bic.w	r2, r3, #2
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003750:	4912      	ldr	r1, [pc, #72]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003756:	4b11      	ldr	r3, [pc, #68]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375a:	4a10      	ldr	r2, [pc, #64]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003760:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003762:	4b0e      	ldr	r3, [pc, #56]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	4a0d      	ldr	r2, [pc, #52]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800376c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800376e:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	4a0a      	ldr	r2, [pc, #40]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003778:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800377a:	4b08      	ldr	r3, [pc, #32]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800377c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377e:	4a07      	ldr	r2, [pc, #28]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003786:	4b05      	ldr	r3, [pc, #20]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a04      	ldr	r2, [pc, #16]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800378c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7fd feb1 	bl	80014f8 <HAL_GetTick>
 8003796:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003798:	e011      	b.n	80037be <HAL_RCC_OscConfig+0x78e>
 800379a:	bf00      	nop
 800379c:	58024400 	.word	0x58024400
 80037a0:	58024800 	.word	0x58024800
 80037a4:	fffffc0c 	.word	0xfffffc0c
 80037a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fd fea4 	bl	80014f8 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e08a      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037be:	4b47      	ldr	r3, [pc, #284]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x77c>
 80037ca:	e082      	b.n	80038d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037cc:	4b43      	ldr	r3, [pc, #268]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a42      	ldr	r2, [pc, #264]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80037d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fd fe8e 	bl	80014f8 <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fd fe8a 	bl	80014f8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e070      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037f2:	4b3a      	ldr	r3, [pc, #232]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x7b0>
 80037fe:	e068      	b.n	80038d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003800:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003806:	4b35      	ldr	r3, [pc, #212]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	2b01      	cmp	r3, #1
 8003812:	d031      	beq.n	8003878 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0203 	and.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d12a      	bne.n	8003878 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d122      	bne.n	8003878 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d11a      	bne.n	8003878 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	0a5b      	lsrs	r3, r3, #9
 8003846:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d111      	bne.n	8003878 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003860:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d108      	bne.n	8003878 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	0e1b      	lsrs	r3, r3, #24
 800386a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003872:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e02b      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800387c:	4b17      	ldr	r3, [pc, #92]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 800387e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003886:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	429a      	cmp	r2, r3
 8003890:	d01f      	beq.n	80038d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003892:	4b12      	ldr	r3, [pc, #72]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 8003894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003896:	4a11      	ldr	r2, [pc, #68]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800389e:	f7fd fe2b 	bl	80014f8 <HAL_GetTick>
 80038a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80038a4:	bf00      	nop
 80038a6:	f7fd fe27 	bl	80014f8 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d0f9      	beq.n	80038a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038b2:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80038b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038b6:	4b0a      	ldr	r3, [pc, #40]	@ (80038e0 <HAL_RCC_OscConfig+0x8b0>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038be:	00d2      	lsls	r2, r2, #3
 80038c0:	4906      	ldr	r1, [pc, #24]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80038c6:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ca:	4a04      	ldr	r2, [pc, #16]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3730      	adds	r7, #48	@ 0x30
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	58024400 	.word	0x58024400
 80038e0:	ffff0007 	.word	0xffff0007

080038e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e19c      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d910      	bls.n	8003928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b87      	ldr	r3, [pc, #540]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 020f 	bic.w	r2, r3, #15
 800390e:	4985      	ldr	r1, [pc, #532]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b83      	ldr	r3, [pc, #524]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e184      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d010      	beq.n	8003956 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	4b7b      	ldr	r3, [pc, #492]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003940:	429a      	cmp	r2, r3
 8003942:	d908      	bls.n	8003956 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003944:	4b78      	ldr	r3, [pc, #480]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	4975      	ldr	r1, [pc, #468]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003952:	4313      	orrs	r3, r2
 8003954:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d010      	beq.n	8003984 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	4b70      	ldr	r3, [pc, #448]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800396e:	429a      	cmp	r2, r3
 8003970:	d908      	bls.n	8003984 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003972:	4b6d      	ldr	r3, [pc, #436]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	496a      	ldr	r1, [pc, #424]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003980:	4313      	orrs	r3, r2
 8003982:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	d010      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	4b64      	ldr	r3, [pc, #400]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800399c:	429a      	cmp	r2, r3
 800399e:	d908      	bls.n	80039b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039a0:	4b61      	ldr	r3, [pc, #388]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	495e      	ldr	r1, [pc, #376]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d010      	beq.n	80039e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	4b59      	ldr	r3, [pc, #356]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d908      	bls.n	80039e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039ce:	4b56      	ldr	r3, [pc, #344]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4953      	ldr	r1, [pc, #332]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d010      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d908      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f023 020f 	bic.w	r2, r3, #15
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4947      	ldr	r1, [pc, #284]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d055      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a1a:	4b43      	ldr	r3, [pc, #268]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	4940      	ldr	r1, [pc, #256]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a34:	4b3c      	ldr	r3, [pc, #240]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d121      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0f6      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a4c:	4b36      	ldr	r3, [pc, #216]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d115      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0ea      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a64:	4b30      	ldr	r3, [pc, #192]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0de      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a74:	4b2c      	ldr	r3, [pc, #176]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0d6      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a84:	4b28      	ldr	r3, [pc, #160]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f023 0207 	bic.w	r2, r3, #7
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4925      	ldr	r1, [pc, #148]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a96:	f7fd fd2f 	bl	80014f8 <HAL_GetTick>
 8003a9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9c:	e00a      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a9e:	f7fd fd2b 	bl	80014f8 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e0be      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d1eb      	bne.n	8003a9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d010      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	4b14      	ldr	r3, [pc, #80]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d208      	bcs.n	8003af4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae2:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f023 020f 	bic.w	r2, r3, #15
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	490e      	ldr	r1, [pc, #56]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d214      	bcs.n	8003b2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 020f 	bic.w	r2, r3, #15
 8003b0a:	4906      	ldr	r1, [pc, #24]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b04      	ldr	r3, [pc, #16]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e086      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
 8003b24:	52002000 	.word	0x52002000
 8003b28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d010      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d208      	bcs.n	8003b5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b48:	4b3c      	ldr	r3, [pc, #240]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	4939      	ldr	r1, [pc, #228]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d010      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	4b34      	ldr	r3, [pc, #208]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d208      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b76:	4b31      	ldr	r3, [pc, #196]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	492e      	ldr	r1, [pc, #184]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d010      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699a      	ldr	r2, [r3, #24]
 8003b98:	4b28      	ldr	r3, [pc, #160]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d208      	bcs.n	8003bb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ba4:	4b25      	ldr	r3, [pc, #148]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	4922      	ldr	r1, [pc, #136]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d010      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69da      	ldr	r2, [r3, #28]
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d208      	bcs.n	8003be4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	4917      	ldr	r1, [pc, #92]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003be4:	f000 f834 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b14      	ldr	r3, [pc, #80]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	4912      	ldr	r1, [pc, #72]	@ (8003c40 <HAL_RCC_ClockConfig+0x35c>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c02:	4b0e      	ldr	r3, [pc, #56]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003c40 <HAL_RCC_ClockConfig+0x35c>)
 8003c0c:	5cd3      	ldrb	r3, [r2, r3]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
 8003c18:	4a0a      	ldr	r2, [pc, #40]	@ (8003c44 <HAL_RCC_ClockConfig+0x360>)
 8003c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c48 <HAL_RCC_ClockConfig+0x364>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c22:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <HAL_RCC_ClockConfig+0x368>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fd fa0a 	bl	8001040 <HAL_InitTick>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	58024400 	.word	0x58024400
 8003c40:	0800ab38 	.word	0x0800ab38
 8003c44:	24000004 	.word	0x24000004
 8003c48:	24000000 	.word	0x24000000
 8003c4c:	24000008 	.word	0x24000008

08003c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b089      	sub	sp, #36	@ 0x24
 8003c54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c56:	4bb3      	ldr	r3, [pc, #716]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c5e:	2b18      	cmp	r3, #24
 8003c60:	f200 8155 	bhi.w	8003f0e <HAL_RCC_GetSysClockFreq+0x2be>
 8003c64:	a201      	add	r2, pc, #4	@ (adr r2, 8003c6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003cd1 	.word	0x08003cd1
 8003c70:	08003f0f 	.word	0x08003f0f
 8003c74:	08003f0f 	.word	0x08003f0f
 8003c78:	08003f0f 	.word	0x08003f0f
 8003c7c:	08003f0f 	.word	0x08003f0f
 8003c80:	08003f0f 	.word	0x08003f0f
 8003c84:	08003f0f 	.word	0x08003f0f
 8003c88:	08003f0f 	.word	0x08003f0f
 8003c8c:	08003cf7 	.word	0x08003cf7
 8003c90:	08003f0f 	.word	0x08003f0f
 8003c94:	08003f0f 	.word	0x08003f0f
 8003c98:	08003f0f 	.word	0x08003f0f
 8003c9c:	08003f0f 	.word	0x08003f0f
 8003ca0:	08003f0f 	.word	0x08003f0f
 8003ca4:	08003f0f 	.word	0x08003f0f
 8003ca8:	08003f0f 	.word	0x08003f0f
 8003cac:	08003cfd 	.word	0x08003cfd
 8003cb0:	08003f0f 	.word	0x08003f0f
 8003cb4:	08003f0f 	.word	0x08003f0f
 8003cb8:	08003f0f 	.word	0x08003f0f
 8003cbc:	08003f0f 	.word	0x08003f0f
 8003cc0:	08003f0f 	.word	0x08003f0f
 8003cc4:	08003f0f 	.word	0x08003f0f
 8003cc8:	08003f0f 	.word	0x08003f0f
 8003ccc:	08003d03 	.word	0x08003d03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cd0:	4b94      	ldr	r3, [pc, #592]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d009      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cdc:	4b91      	ldr	r3, [pc, #580]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	08db      	lsrs	r3, r3, #3
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	4a90      	ldr	r2, [pc, #576]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003cee:	e111      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003cf0:	4b8d      	ldr	r3, [pc, #564]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cf2:	61bb      	str	r3, [r7, #24]
      break;
 8003cf4:	e10e      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003cf6:	4b8d      	ldr	r3, [pc, #564]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cf8:	61bb      	str	r3, [r7, #24]
      break;
 8003cfa:	e10b      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003cfc:	4b8c      	ldr	r3, [pc, #560]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003cfe:	61bb      	str	r3, [r7, #24]
      break;
 8003d00:	e108      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d02:	4b88      	ldr	r3, [pc, #544]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003d0c:	4b85      	ldr	r3, [pc, #532]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d18:	4b82      	ldr	r3, [pc, #520]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d22:	4b80      	ldr	r3, [pc, #512]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d26:	08db      	lsrs	r3, r3, #3
 8003d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80e1 	beq.w	8003f08 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	f000 8083 	beq.w	8003e54 <HAL_RCC_GetSysClockFreq+0x204>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	f200 80a1 	bhi.w	8003e98 <HAL_RCC_GetSysClockFreq+0x248>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x114>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d056      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d62:	e099      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d64:	4b6f      	ldr	r3, [pc, #444]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d02d      	beq.n	8003dcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d70:	4b6c      	ldr	r3, [pc, #432]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	08db      	lsrs	r3, r3, #3
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	4a6b      	ldr	r2, [pc, #428]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9a:	4b62      	ldr	r3, [pc, #392]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003dca:	e087      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003f38 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dde:	4b51      	ldr	r3, [pc, #324]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003df2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e0e:	e065      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003f3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e22:	4b40      	ldr	r3, [pc, #256]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e36:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e52:	e043      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003f40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e66:	4b2f      	ldr	r3, [pc, #188]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e7a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e96:	e021      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003f3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ebe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003eda:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003edc:	4b11      	ldr	r3, [pc, #68]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	0a5b      	lsrs	r3, r3, #9
 8003ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	ee07 3a90 	vmov	s15, r3
 8003ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f00:	ee17 3a90 	vmov	r3, s15
 8003f04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003f06:	e005      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61bb      	str	r3, [r7, #24]
      break;
 8003f0c:	e002      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003f0e:	4b07      	ldr	r3, [pc, #28]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f10:	61bb      	str	r3, [r7, #24]
      break;
 8003f12:	bf00      	nop
  }

  return sysclockfreq;
 8003f14:	69bb      	ldr	r3, [r7, #24]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3724      	adds	r7, #36	@ 0x24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	58024400 	.word	0x58024400
 8003f28:	03d09000 	.word	0x03d09000
 8003f2c:	003d0900 	.word	0x003d0900
 8003f30:	017d7840 	.word	0x017d7840
 8003f34:	46000000 	.word	0x46000000
 8003f38:	4c742400 	.word	0x4c742400
 8003f3c:	4a742400 	.word	0x4a742400
 8003f40:	4bbebc20 	.word	0x4bbebc20

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f4a:	f7ff fe81 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	4b10      	ldr	r3, [pc, #64]	@ (8003f94 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	490f      	ldr	r1, [pc, #60]	@ (8003f98 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f5c:	5ccb      	ldrb	r3, [r1, r3]
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	fa22 f303 	lsr.w	r3, r2, r3
 8003f66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f68:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	4a09      	ldr	r2, [pc, #36]	@ (8003f98 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7e:	4a07      	ldr	r2, [pc, #28]	@ (8003f9c <HAL_RCC_GetHCLKFreq+0x58>)
 8003f80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f82:	4a07      	ldr	r2, [pc, #28]	@ (8003fa0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f88:	4b04      	ldr	r3, [pc, #16]	@ (8003f9c <HAL_RCC_GetHCLKFreq+0x58>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	58024400 	.word	0x58024400
 8003f98:	0800ab38 	.word	0x0800ab38
 8003f9c:	24000004 	.word	0x24000004
 8003fa0:	24000000 	.word	0x24000000

08003fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003fa8:	f7ff ffcc 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b06      	ldr	r3, [pc, #24]	@ (8003fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	091b      	lsrs	r3, r3, #4
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	4904      	ldr	r1, [pc, #16]	@ (8003fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	58024400 	.word	0x58024400
 8003fcc:	0800ab38 	.word	0x0800ab38

08003fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003fd4:	f7ff ffb6 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b06      	ldr	r3, [pc, #24]	@ (8003ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4904      	ldr	r1, [pc, #16]	@ (8003ff8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	58024400 	.word	0x58024400
 8003ff8:	0800ab38 	.word	0x0800ab38

08003ffc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	223f      	movs	r2, #63	@ 0x3f
 800400a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800400c:	4b1a      	ldr	r3, [pc, #104]	@ (8004078 <HAL_RCC_GetClockConfig+0x7c>)
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0207 	and.w	r2, r3, #7
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004018:	4b17      	ldr	r3, [pc, #92]	@ (8004078 <HAL_RCC_GetClockConfig+0x7c>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004024:	4b14      	ldr	r3, [pc, #80]	@ (8004078 <HAL_RCC_GetClockConfig+0x7c>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f003 020f 	and.w	r2, r3, #15
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004030:	4b11      	ldr	r3, [pc, #68]	@ (8004078 <HAL_RCC_GetClockConfig+0x7c>)
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800403c:	4b0e      	ldr	r3, [pc, #56]	@ (8004078 <HAL_RCC_GetClockConfig+0x7c>)
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004048:	4b0b      	ldr	r3, [pc, #44]	@ (8004078 <HAL_RCC_GetClockConfig+0x7c>)
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004054:	4b08      	ldr	r3, [pc, #32]	@ (8004078 <HAL_RCC_GetClockConfig+0x7c>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004060:	4b06      	ldr	r3, [pc, #24]	@ (800407c <HAL_RCC_GetClockConfig+0x80>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 020f 	and.w	r2, r3, #15
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	601a      	str	r2, [r3, #0]
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	58024400 	.word	0x58024400
 800407c:	52002000 	.word	0x52002000

08004080 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004084:	b0ca      	sub	sp, #296	@ 0x128
 8004086:	af00      	add	r7, sp, #0
 8004088:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800408c:	2300      	movs	r3, #0
 800408e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004092:	2300      	movs	r3, #0
 8004094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80040a4:	2500      	movs	r5, #0
 80040a6:	ea54 0305 	orrs.w	r3, r4, r5
 80040aa:	d049      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040b6:	d02f      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80040b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040bc:	d828      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040c2:	d01a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040c8:	d822      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80040ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040d2:	d007      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040d4:	e01c      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d6:	4bb8      	ldr	r3, [pc, #736]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	4ab7      	ldr	r2, [pc, #732]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040e2:	e01a      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e8:	3308      	adds	r3, #8
 80040ea:	2102      	movs	r1, #2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f002 fb61 	bl	80067b4 <RCCEx_PLL2_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040f8:	e00f      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fe:	3328      	adds	r3, #40	@ 0x28
 8004100:	2102      	movs	r1, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f002 fc08 	bl	8006918 <RCCEx_PLL3_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800410e:	e004      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004122:	4ba5      	ldr	r3, [pc, #660]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004126:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004130:	4aa1      	ldr	r2, [pc, #644]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004132:	430b      	orrs	r3, r1
 8004134:	6513      	str	r3, [r2, #80]	@ 0x50
 8004136:	e003      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800413c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800414c:	f04f 0900 	mov.w	r9, #0
 8004150:	ea58 0309 	orrs.w	r3, r8, r9
 8004154:	d047      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415c:	2b04      	cmp	r3, #4
 800415e:	d82a      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004160:	a201      	add	r2, pc, #4	@ (adr r2, 8004168 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004166:	bf00      	nop
 8004168:	0800417d 	.word	0x0800417d
 800416c:	0800418b 	.word	0x0800418b
 8004170:	080041a1 	.word	0x080041a1
 8004174:	080041bf 	.word	0x080041bf
 8004178:	080041bf 	.word	0x080041bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417c:	4b8e      	ldr	r3, [pc, #568]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	4a8d      	ldr	r2, [pc, #564]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004188:	e01a      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	3308      	adds	r3, #8
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f002 fb0e 	bl	80067b4 <RCCEx_PLL2_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800419e:	e00f      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a4:	3328      	adds	r3, #40	@ 0x28
 80041a6:	2100      	movs	r1, #0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f002 fbb5 	bl	8006918 <RCCEx_PLL3_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041b4:	e004      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041bc:	e000      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80041be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041c8:	4b7b      	ldr	r3, [pc, #492]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041cc:	f023 0107 	bic.w	r1, r3, #7
 80041d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	4a78      	ldr	r2, [pc, #480]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041d8:	430b      	orrs	r3, r1
 80041da:	6513      	str	r3, [r2, #80]	@ 0x50
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80041f2:	f04f 0b00 	mov.w	fp, #0
 80041f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80041fa:	d04c      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80041fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004206:	d030      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800420c:	d829      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800420e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004210:	d02d      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004212:	2bc0      	cmp	r3, #192	@ 0xc0
 8004214:	d825      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004216:	2b80      	cmp	r3, #128	@ 0x80
 8004218:	d018      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800421a:	2b80      	cmp	r3, #128	@ 0x80
 800421c:	d821      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004222:	2b40      	cmp	r3, #64	@ 0x40
 8004224:	d007      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004226:	e01c      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004228:	4b63      	ldr	r3, [pc, #396]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	4a62      	ldr	r2, [pc, #392]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800422e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004234:	e01c      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423a:	3308      	adds	r3, #8
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f002 fab8 	bl	80067b4 <RCCEx_PLL2_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800424a:	e011      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004250:	3328      	adds	r3, #40	@ 0x28
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f002 fb5f 	bl	8006918 <RCCEx_PLL3_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004260:	e006      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004268:	e002      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800426a:	bf00      	nop
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800426e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004278:	4b4f      	ldr	r3, [pc, #316]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800427a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004286:	4a4c      	ldr	r2, [pc, #304]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004288:	430b      	orrs	r3, r1
 800428a:	6513      	str	r3, [r2, #80]	@ 0x50
 800428c:	e003      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004292:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80042a2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80042a6:	2300      	movs	r3, #0
 80042a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80042ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80042b0:	460b      	mov	r3, r1
 80042b2:	4313      	orrs	r3, r2
 80042b4:	d053      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80042be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042c2:	d035      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80042c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042c8:	d82e      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80042ce:	d031      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80042d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80042d4:	d828      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042da:	d01a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80042dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042e0:	d822      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80042e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ea:	d007      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80042ec:	e01c      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ee:	4b32      	ldr	r3, [pc, #200]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f2:	4a31      	ldr	r2, [pc, #196]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042fa:	e01c      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004300:	3308      	adds	r3, #8
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f002 fa55 	bl	80067b4 <RCCEx_PLL2_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004310:	e011      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004316:	3328      	adds	r3, #40	@ 0x28
 8004318:	2100      	movs	r1, #0
 800431a:	4618      	mov	r0, r3
 800431c:	f002 fafc 	bl	8006918 <RCCEx_PLL3_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004326:	e006      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800432e:	e002      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004330:	bf00      	nop
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800433e:	4b1e      	ldr	r3, [pc, #120]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004342:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800434e:	4a1a      	ldr	r2, [pc, #104]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004350:	430b      	orrs	r3, r1
 8004352:	6593      	str	r3, [r2, #88]	@ 0x58
 8004354:	e003      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800435a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800436a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800436e:	2300      	movs	r3, #0
 8004370:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004374:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004378:	460b      	mov	r3, r1
 800437a:	4313      	orrs	r3, r2
 800437c:	d056      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004386:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800438a:	d038      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800438c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004390:	d831      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004392:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004396:	d034      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004398:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800439c:	d82b      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800439e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043a2:	d01d      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80043a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043a8:	d825      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d006      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80043ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043b4:	e01f      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043b6:	bf00      	nop
 80043b8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043bc:	4ba2      	ldr	r3, [pc, #648]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	4aa1      	ldr	r2, [pc, #644]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043c8:	e01c      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ce:	3308      	adds	r3, #8
 80043d0:	2100      	movs	r1, #0
 80043d2:	4618      	mov	r0, r3
 80043d4:	f002 f9ee 	bl	80067b4 <RCCEx_PLL2_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043de:	e011      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e4:	3328      	adds	r3, #40	@ 0x28
 80043e6:	2100      	movs	r1, #0
 80043e8:	4618      	mov	r0, r3
 80043ea:	f002 fa95 	bl	8006918 <RCCEx_PLL3_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043f4:	e006      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043fc:	e002      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10b      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800440c:	4b8e      	ldr	r3, [pc, #568]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800440e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004410:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004418:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800441c:	4a8a      	ldr	r2, [pc, #552]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800441e:	430b      	orrs	r3, r1
 8004420:	6593      	str	r3, [r2, #88]	@ 0x58
 8004422:	e003      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004428:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004438:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800443c:	2300      	movs	r3, #0
 800443e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004442:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004446:	460b      	mov	r3, r1
 8004448:	4313      	orrs	r3, r2
 800444a:	d03a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004452:	2b30      	cmp	r3, #48	@ 0x30
 8004454:	d01f      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004456:	2b30      	cmp	r3, #48	@ 0x30
 8004458:	d819      	bhi.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800445a:	2b20      	cmp	r3, #32
 800445c:	d00c      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800445e:	2b20      	cmp	r3, #32
 8004460:	d815      	bhi.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d019      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004466:	2b10      	cmp	r3, #16
 8004468:	d111      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446a:	4b77      	ldr	r3, [pc, #476]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800446c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446e:	4a76      	ldr	r2, [pc, #472]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004474:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004476:	e011      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447c:	3308      	adds	r3, #8
 800447e:	2102      	movs	r1, #2
 8004480:	4618      	mov	r0, r3
 8004482:	f002 f997 	bl	80067b4 <RCCEx_PLL2_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800448c:	e006      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004494:	e002      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004496:	bf00      	nop
 8004498:	e000      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800449a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80044a4:	4b68      	ldr	r3, [pc, #416]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80044ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b2:	4a65      	ldr	r2, [pc, #404]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044b4:	430b      	orrs	r3, r1
 80044b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044b8:	e003      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80044ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80044d2:	2300      	movs	r3, #0
 80044d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80044d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80044dc:	460b      	mov	r3, r1
 80044de:	4313      	orrs	r3, r2
 80044e0:	d051      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044ec:	d035      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80044ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044f2:	d82e      	bhi.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80044f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044f8:	d031      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80044fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044fe:	d828      	bhi.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004504:	d01a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800450a:	d822      	bhi.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004514:	d007      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004516:	e01c      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004518:	4b4b      	ldr	r3, [pc, #300]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	4a4a      	ldr	r2, [pc, #296]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800451e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004522:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004524:	e01c      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452a:	3308      	adds	r3, #8
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f002 f940 	bl	80067b4 <RCCEx_PLL2_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800453a:	e011      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004540:	3328      	adds	r3, #40	@ 0x28
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f002 f9e7 	bl	8006918 <RCCEx_PLL3_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004550:	e006      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004558:	e002      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800455a:	bf00      	nop
 800455c:	e000      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800455e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004568:	4b37      	ldr	r3, [pc, #220]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800456a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004576:	4a34      	ldr	r2, [pc, #208]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004578:	430b      	orrs	r3, r1
 800457a:	6513      	str	r3, [r2, #80]	@ 0x50
 800457c:	e003      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004592:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004596:	2300      	movs	r3, #0
 8004598:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800459c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80045a0:	460b      	mov	r3, r1
 80045a2:	4313      	orrs	r3, r2
 80045a4:	d056      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045b0:	d033      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80045b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045b6:	d82c      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045bc:	d02f      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80045be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045c2:	d826      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045c8:	d02b      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80045ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045ce:	d820      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045d4:	d012      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80045d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045da:	d81a      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d022      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e4:	d115      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ea:	3308      	adds	r3, #8
 80045ec:	2101      	movs	r1, #1
 80045ee:	4618      	mov	r0, r3
 80045f0:	f002 f8e0 	bl	80067b4 <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045fa:	e015      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004600:	3328      	adds	r3, #40	@ 0x28
 8004602:	2101      	movs	r1, #1
 8004604:	4618      	mov	r0, r3
 8004606:	f002 f987 	bl	8006918 <RCCEx_PLL3_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004610:	e00a      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004618:	e006      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800461a:	bf00      	nop
 800461c:	e004      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800461e:	bf00      	nop
 8004620:	e002      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004622:	bf00      	nop
 8004624:	e000      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10d      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004630:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004634:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800463e:	4a02      	ldr	r2, [pc, #8]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004640:	430b      	orrs	r3, r1
 8004642:	6513      	str	r3, [r2, #80]	@ 0x50
 8004644:	e006      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004646:	bf00      	nop
 8004648:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800466a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d055      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004678:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800467c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004680:	d033      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004682:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004686:	d82c      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468c:	d02f      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004692:	d826      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004694:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004698:	d02b      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800469a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800469e:	d820      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80046a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046a4:	d012      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80046a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046aa:	d81a      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d022      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80046b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046b4:	d115      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ba:	3308      	adds	r3, #8
 80046bc:	2101      	movs	r1, #1
 80046be:	4618      	mov	r0, r3
 80046c0:	f002 f878 	bl	80067b4 <RCCEx_PLL2_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046ca:	e015      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d0:	3328      	adds	r3, #40	@ 0x28
 80046d2:	2101      	movs	r1, #1
 80046d4:	4618      	mov	r0, r3
 80046d6:	f002 f91f 	bl	8006918 <RCCEx_PLL3_Config>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046e0:	e00a      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046e8:	e006      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046ea:	bf00      	nop
 80046ec:	e004      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046ee:	bf00      	nop
 80046f0:	e002      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004700:	4ba3      	ldr	r3, [pc, #652]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004704:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004710:	4a9f      	ldr	r2, [pc, #636]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004712:	430b      	orrs	r3, r1
 8004714:	6593      	str	r3, [r2, #88]	@ 0x58
 8004716:	e003      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800471c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800472c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004730:	2300      	movs	r3, #0
 8004732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004736:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800473a:	460b      	mov	r3, r1
 800473c:	4313      	orrs	r3, r2
 800473e:	d037      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800474a:	d00e      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800474c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004750:	d816      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d018      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004756:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800475a:	d111      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800475c:	4b8c      	ldr	r3, [pc, #560]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	4a8b      	ldr	r2, [pc, #556]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004766:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004768:	e00f      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800476a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476e:	3308      	adds	r3, #8
 8004770:	2101      	movs	r1, #1
 8004772:	4618      	mov	r0, r3
 8004774:	f002 f81e 	bl	80067b4 <RCCEx_PLL2_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800477e:	e004      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004786:	e000      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004792:	4b7f      	ldr	r3, [pc, #508]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004796:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a0:	4a7b      	ldr	r2, [pc, #492]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047a2:	430b      	orrs	r3, r1
 80047a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80047a6:	e003      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80047bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047c0:	2300      	movs	r3, #0
 80047c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80047c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4313      	orrs	r3, r2
 80047ce:	d039      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d81c      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80047da:	a201      	add	r2, pc, #4	@ (adr r2, 80047e0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	0800481d 	.word	0x0800481d
 80047e4:	080047f1 	.word	0x080047f1
 80047e8:	080047ff 	.word	0x080047ff
 80047ec:	0800481d 	.word	0x0800481d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f0:	4b67      	ldr	r3, [pc, #412]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	4a66      	ldr	r2, [pc, #408]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047fc:	e00f      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004802:	3308      	adds	r3, #8
 8004804:	2102      	movs	r1, #2
 8004806:	4618      	mov	r0, r3
 8004808:	f001 ffd4 	bl	80067b4 <RCCEx_PLL2_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004812:	e004      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800481a:	e000      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800481c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004826:	4b5a      	ldr	r3, [pc, #360]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482a:	f023 0103 	bic.w	r1, r3, #3
 800482e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004834:	4a56      	ldr	r2, [pc, #344]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004836:	430b      	orrs	r3, r1
 8004838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800483a:	e003      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004840:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004850:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004854:	2300      	movs	r3, #0
 8004856:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800485a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800485e:	460b      	mov	r3, r1
 8004860:	4313      	orrs	r3, r2
 8004862:	f000 809f 	beq.w	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004866:	4b4b      	ldr	r3, [pc, #300]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a4a      	ldr	r2, [pc, #296]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800486c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004870:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004872:	f7fc fe41 	bl	80014f8 <HAL_GetTick>
 8004876:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800487a:	e00b      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487c:	f7fc fe3c 	bl	80014f8 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b64      	cmp	r3, #100	@ 0x64
 800488a:	d903      	bls.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004892:	e005      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004894:	4b3f      	ldr	r3, [pc, #252]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ed      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80048a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d179      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80048a8:	4b39      	ldr	r3, [pc, #228]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048b4:	4053      	eors	r3, r2
 80048b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d015      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048be:	4b34      	ldr	r3, [pc, #208]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048ca:	4b31      	ldr	r3, [pc, #196]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ce:	4a30      	ldr	r2, [pc, #192]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	4a2d      	ldr	r2, [pc, #180]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f6:	d118      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fc fdfe 	bl	80014f8 <HAL_GetTick>
 80048fc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004900:	e00d      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004902:	f7fc fdf9 	bl	80014f8 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800490c:	1ad2      	subs	r2, r2, r3
 800490e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004912:	429a      	cmp	r2, r3
 8004914:	d903      	bls.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800491c:	e005      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800491e:	4b1c      	ldr	r3, [pc, #112]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0eb      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800492a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800492e:	2b00      	cmp	r3, #0
 8004930:	d129      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004936:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800493a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800493e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004942:	d10e      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004944:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004950:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004954:	091a      	lsrs	r2, r3, #4
 8004956:	4b10      	ldr	r3, [pc, #64]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004958:	4013      	ands	r3, r2
 800495a:	4a0d      	ldr	r2, [pc, #52]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800495c:	430b      	orrs	r3, r1
 800495e:	6113      	str	r3, [r2, #16]
 8004960:	e005      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004962:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	4a0a      	ldr	r2, [pc, #40]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004968:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800496c:	6113      	str	r3, [r2, #16]
 800496e:	4b08      	ldr	r3, [pc, #32]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004970:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004976:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800497a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800497e:	4a04      	ldr	r2, [pc, #16]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004980:	430b      	orrs	r3, r1
 8004982:	6713      	str	r3, [r2, #112]	@ 0x70
 8004984:	e00e      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800498a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800498e:	e009      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004990:	58024400 	.word	0x58024400
 8004994:	58024800 	.word	0x58024800
 8004998:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80049a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	f002 0301 	and.w	r3, r2, #1
 80049b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049be:	460b      	mov	r3, r1
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f000 8089 	beq.w	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80049c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049cc:	2b28      	cmp	r3, #40	@ 0x28
 80049ce:	d86b      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80049d0:	a201      	add	r2, pc, #4	@ (adr r2, 80049d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	08004ab1 	.word	0x08004ab1
 80049dc:	08004aa9 	.word	0x08004aa9
 80049e0:	08004aa9 	.word	0x08004aa9
 80049e4:	08004aa9 	.word	0x08004aa9
 80049e8:	08004aa9 	.word	0x08004aa9
 80049ec:	08004aa9 	.word	0x08004aa9
 80049f0:	08004aa9 	.word	0x08004aa9
 80049f4:	08004aa9 	.word	0x08004aa9
 80049f8:	08004a7d 	.word	0x08004a7d
 80049fc:	08004aa9 	.word	0x08004aa9
 8004a00:	08004aa9 	.word	0x08004aa9
 8004a04:	08004aa9 	.word	0x08004aa9
 8004a08:	08004aa9 	.word	0x08004aa9
 8004a0c:	08004aa9 	.word	0x08004aa9
 8004a10:	08004aa9 	.word	0x08004aa9
 8004a14:	08004aa9 	.word	0x08004aa9
 8004a18:	08004a93 	.word	0x08004a93
 8004a1c:	08004aa9 	.word	0x08004aa9
 8004a20:	08004aa9 	.word	0x08004aa9
 8004a24:	08004aa9 	.word	0x08004aa9
 8004a28:	08004aa9 	.word	0x08004aa9
 8004a2c:	08004aa9 	.word	0x08004aa9
 8004a30:	08004aa9 	.word	0x08004aa9
 8004a34:	08004aa9 	.word	0x08004aa9
 8004a38:	08004ab1 	.word	0x08004ab1
 8004a3c:	08004aa9 	.word	0x08004aa9
 8004a40:	08004aa9 	.word	0x08004aa9
 8004a44:	08004aa9 	.word	0x08004aa9
 8004a48:	08004aa9 	.word	0x08004aa9
 8004a4c:	08004aa9 	.word	0x08004aa9
 8004a50:	08004aa9 	.word	0x08004aa9
 8004a54:	08004aa9 	.word	0x08004aa9
 8004a58:	08004ab1 	.word	0x08004ab1
 8004a5c:	08004aa9 	.word	0x08004aa9
 8004a60:	08004aa9 	.word	0x08004aa9
 8004a64:	08004aa9 	.word	0x08004aa9
 8004a68:	08004aa9 	.word	0x08004aa9
 8004a6c:	08004aa9 	.word	0x08004aa9
 8004a70:	08004aa9 	.word	0x08004aa9
 8004a74:	08004aa9 	.word	0x08004aa9
 8004a78:	08004ab1 	.word	0x08004ab1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a80:	3308      	adds	r3, #8
 8004a82:	2101      	movs	r1, #1
 8004a84:	4618      	mov	r0, r3
 8004a86:	f001 fe95 	bl	80067b4 <RCCEx_PLL2_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a90:	e00f      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a96:	3328      	adds	r3, #40	@ 0x28
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 ff3c 	bl	8006918 <RCCEx_PLL3_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004aa6:	e004      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aae:	e000      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004aba:	4bbf      	ldr	r3, [pc, #764]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004abe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ac8:	4abb      	ldr	r2, [pc, #748]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004aca:	430b      	orrs	r3, r1
 8004acc:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ace:	e003      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f002 0302 	and.w	r3, r2, #2
 8004ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004aee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004af2:	460b      	mov	r3, r1
 8004af4:	4313      	orrs	r3, r2
 8004af6:	d041      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004afe:	2b05      	cmp	r3, #5
 8004b00:	d824      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004b02:	a201      	add	r2, pc, #4	@ (adr r2, 8004b08 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b55 	.word	0x08004b55
 8004b0c:	08004b21 	.word	0x08004b21
 8004b10:	08004b37 	.word	0x08004b37
 8004b14:	08004b55 	.word	0x08004b55
 8004b18:	08004b55 	.word	0x08004b55
 8004b1c:	08004b55 	.word	0x08004b55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b24:	3308      	adds	r3, #8
 8004b26:	2101      	movs	r1, #1
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 fe43 	bl	80067b4 <RCCEx_PLL2_Config>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b34:	e00f      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3a:	3328      	adds	r3, #40	@ 0x28
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 feea 	bl	8006918 <RCCEx_PLL3_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b4a:	e004      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b52:	e000      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b5e:	4b96      	ldr	r3, [pc, #600]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b62:	f023 0107 	bic.w	r1, r3, #7
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b6c:	4a92      	ldr	r2, [pc, #584]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b72:	e003      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f002 0304 	and.w	r3, r2, #4
 8004b88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	d044      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ba4:	2b05      	cmp	r3, #5
 8004ba6:	d825      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bfd 	.word	0x08004bfd
 8004bb4:	08004bc9 	.word	0x08004bc9
 8004bb8:	08004bdf 	.word	0x08004bdf
 8004bbc:	08004bfd 	.word	0x08004bfd
 8004bc0:	08004bfd 	.word	0x08004bfd
 8004bc4:	08004bfd 	.word	0x08004bfd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bcc:	3308      	adds	r3, #8
 8004bce:	2101      	movs	r1, #1
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 fdef 	bl	80067b4 <RCCEx_PLL2_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bdc:	e00f      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be2:	3328      	adds	r3, #40	@ 0x28
 8004be4:	2101      	movs	r1, #1
 8004be6:	4618      	mov	r0, r3
 8004be8:	f001 fe96 	bl	8006918 <RCCEx_PLL3_Config>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bf2:	e004      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bfa:	e000      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c06:	4b6c      	ldr	r3, [pc, #432]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0a:	f023 0107 	bic.w	r1, r3, #7
 8004c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c16:	4a68      	ldr	r2, [pc, #416]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c1c:	e003      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f002 0320 	and.w	r3, r2, #32
 8004c32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c36:	2300      	movs	r3, #0
 8004c38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c40:	460b      	mov	r3, r1
 8004c42:	4313      	orrs	r3, r2
 8004c44:	d055      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c52:	d033      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c58:	d82c      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c5e:	d02f      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c64:	d826      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c6a:	d02b      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004c6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c70:	d820      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c76:	d012      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c7c:	d81a      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d022      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c86:	d115      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4618      	mov	r0, r3
 8004c92:	f001 fd8f 	bl	80067b4 <RCCEx_PLL2_Config>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c9c:	e015      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca2:	3328      	adds	r3, #40	@ 0x28
 8004ca4:	2102      	movs	r1, #2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f001 fe36 	bl	8006918 <RCCEx_PLL3_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004cb2:	e00a      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cba:	e006      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cbc:	bf00      	nop
 8004cbe:	e004      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cc0:	bf00      	nop
 8004cc2:	e002      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cc4:	bf00      	nop
 8004cc6:	e000      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cd2:	4b39      	ldr	r3, [pc, #228]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce2:	4a35      	ldr	r2, [pc, #212]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ce8:	e003      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d02:	2300      	movs	r3, #0
 8004d04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	d058      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d1e:	d033      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004d20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d24:	d82c      	bhi.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d2a:	d02f      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d30:	d826      	bhi.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d36:	d02b      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004d38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d3c:	d820      	bhi.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d42:	d012      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004d44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d48:	d81a      	bhi.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d022      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d52:	d115      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d58:	3308      	adds	r3, #8
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 fd29 	bl	80067b4 <RCCEx_PLL2_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d68:	e015      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6e:	3328      	adds	r3, #40	@ 0x28
 8004d70:	2102      	movs	r1, #2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f001 fdd0 	bl	8006918 <RCCEx_PLL3_Config>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d86:	e006      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d88:	bf00      	nop
 8004d8a:	e004      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d8c:	bf00      	nop
 8004d8e:	e002      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d90:	bf00      	nop
 8004d92:	e000      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10e      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d9e:	4b06      	ldr	r3, [pc, #24]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dae:	4a02      	ldr	r2, [pc, #8]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004db0:	430b      	orrs	r3, r1
 8004db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004db4:	e006      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004db6:	bf00      	nop
 8004db8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004dd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004dde:	460b      	mov	r3, r1
 8004de0:	4313      	orrs	r3, r2
 8004de2:	d055      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004dec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004df0:	d033      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004df2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004df6:	d82c      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dfc:	d02f      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e02:	d826      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004e08:	d02b      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004e0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004e0e:	d820      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e14:	d012      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004e16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e1a:	d81a      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d022      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e24:	d115      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 fcc0 	bl	80067b4 <RCCEx_PLL2_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e3a:	e015      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e40:	3328      	adds	r3, #40	@ 0x28
 8004e42:	2102      	movs	r1, #2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f001 fd67 	bl	8006918 <RCCEx_PLL3_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e50:	e00a      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e58:	e006      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e5a:	bf00      	nop
 8004e5c:	e004      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e70:	4ba1      	ldr	r3, [pc, #644]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e80:	4a9d      	ldr	r2, [pc, #628]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e82:	430b      	orrs	r3, r1
 8004e84:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e86:	e003      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f002 0308 	and.w	r3, r2, #8
 8004e9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ea6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4313      	orrs	r3, r2
 8004eae:	d01e      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec2:	3328      	adds	r3, #40	@ 0x28
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 fd26 	bl	8006918 <RCCEx_PLL3_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ed8:	4b87      	ldr	r3, [pc, #540]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004edc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee8:	4a83      	ldr	r2, [pc, #524]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eea:	430b      	orrs	r3, r1
 8004eec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef6:	f002 0310 	and.w	r3, r2, #16
 8004efa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004efe:	2300      	movs	r3, #0
 8004f00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	d01e      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f1a:	d10c      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f20:	3328      	adds	r3, #40	@ 0x28
 8004f22:	2102      	movs	r1, #2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f001 fcf7 	bl	8006918 <RCCEx_PLL3_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f36:	4b70      	ldr	r3, [pc, #448]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f46:	4a6c      	ldr	r2, [pc, #432]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004f58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f62:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004f66:	460b      	mov	r3, r1
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	d03e      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f78:	d022      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f7e:	d81b      	bhi.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f88:	d00b      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004f8a:	e015      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f90:	3308      	adds	r3, #8
 8004f92:	2100      	movs	r1, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	f001 fc0d 	bl	80067b4 <RCCEx_PLL2_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004fa0:	e00f      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa6:	3328      	adds	r3, #40	@ 0x28
 8004fa8:	2102      	movs	r1, #2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 fcb4 	bl	8006918 <RCCEx_PLL3_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004fb6:	e004      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fbe:	e000      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10b      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fca:	4b4b      	ldr	r3, [pc, #300]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fda:	4a47      	ldr	r2, [pc, #284]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fe0:	e003      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004ff6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ffc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005000:	460b      	mov	r3, r1
 8005002:	4313      	orrs	r3, r2
 8005004:	d03b      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005012:	d01f      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005014:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005018:	d818      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800501a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800501e:	d003      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005020:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005024:	d007      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005026:	e011      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005028:	4b33      	ldr	r3, [pc, #204]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	4a32      	ldr	r2, [pc, #200]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800502e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005034:	e00f      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503a:	3328      	adds	r3, #40	@ 0x28
 800503c:	2101      	movs	r1, #1
 800503e:	4618      	mov	r0, r3
 8005040:	f001 fc6a 	bl	8006918 <RCCEx_PLL3_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800504a:	e004      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005052:	e000      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10b      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800505e:	4b26      	ldr	r3, [pc, #152]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005062:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506e:	4a22      	ldr	r2, [pc, #136]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005070:	430b      	orrs	r3, r1
 8005072:	6553      	str	r3, [r2, #84]	@ 0x54
 8005074:	e003      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800507a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800508a:	673b      	str	r3, [r7, #112]	@ 0x70
 800508c:	2300      	movs	r3, #0
 800508e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005090:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005094:	460b      	mov	r3, r1
 8005096:	4313      	orrs	r3, r2
 8005098:	d034      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a8:	d007      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80050aa:	e011      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ac:	4b12      	ldr	r3, [pc, #72]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	4a11      	ldr	r2, [pc, #68]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050b8:	e00e      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050be:	3308      	adds	r3, #8
 80050c0:	2102      	movs	r1, #2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 fb76 	bl	80067b4 <RCCEx_PLL2_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050ce:	e003      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10d      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050e0:	4b05      	ldr	r3, [pc, #20]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ee:	4a02      	ldr	r2, [pc, #8]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050f0:	430b      	orrs	r3, r1
 80050f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050f4:	e006      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80050f6:	bf00      	nop
 80050f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005112:	2300      	movs	r3, #0
 8005114:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005116:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800511a:	460b      	mov	r3, r1
 800511c:	4313      	orrs	r3, r2
 800511e:	d00c      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005124:	3328      	adds	r3, #40	@ 0x28
 8005126:	2102      	movs	r1, #2
 8005128:	4618      	mov	r0, r3
 800512a:	f001 fbf5 	bl	8006918 <RCCEx_PLL3_Config>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005146:	663b      	str	r3, [r7, #96]	@ 0x60
 8005148:	2300      	movs	r3, #0
 800514a:	667b      	str	r3, [r7, #100]	@ 0x64
 800514c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005150:	460b      	mov	r3, r1
 8005152:	4313      	orrs	r3, r2
 8005154:	d038      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800515e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005162:	d018      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005164:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005168:	d811      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800516a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800516e:	d014      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005174:	d80b      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d011      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800517a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800517e:	d106      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005180:	4bc3      	ldr	r3, [pc, #780]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005184:	4ac2      	ldr	r2, [pc, #776]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800518a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800518c:	e008      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005194:	e004      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005196:	bf00      	nop
 8005198:	e002      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800519a:	bf00      	nop
 800519c:	e000      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800519e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10b      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051a8:	4bb9      	ldr	r3, [pc, #740]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051b8:	4ab5      	ldr	r2, [pc, #724]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051ba:	430b      	orrs	r3, r1
 80051bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80051be:	e003      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80051d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051d6:	2300      	movs	r3, #0
 80051d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80051de:	460b      	mov	r3, r1
 80051e0:	4313      	orrs	r3, r2
 80051e2:	d009      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051e4:	4baa      	ldr	r3, [pc, #680]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f2:	4aa7      	ldr	r2, [pc, #668]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80051f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005204:	653b      	str	r3, [r7, #80]	@ 0x50
 8005206:	2300      	movs	r3, #0
 8005208:	657b      	str	r3, [r7, #84]	@ 0x54
 800520a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800520e:	460b      	mov	r3, r1
 8005210:	4313      	orrs	r3, r2
 8005212:	d00a      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005214:	4b9e      	ldr	r3, [pc, #632]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005224:	4a9a      	ldr	r2, [pc, #616]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005226:	430b      	orrs	r3, r1
 8005228:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800522a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005238:	2300      	movs	r3, #0
 800523a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800523c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005240:	460b      	mov	r3, r1
 8005242:	4313      	orrs	r3, r2
 8005244:	d009      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005246:	4b92      	ldr	r3, [pc, #584]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800524a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005254:	4a8e      	ldr	r2, [pc, #568]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005256:	430b      	orrs	r3, r1
 8005258:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005266:	643b      	str	r3, [r7, #64]	@ 0x40
 8005268:	2300      	movs	r3, #0
 800526a:	647b      	str	r3, [r7, #68]	@ 0x44
 800526c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005270:	460b      	mov	r3, r1
 8005272:	4313      	orrs	r3, r2
 8005274:	d00e      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005276:	4b86      	ldr	r3, [pc, #536]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	4a85      	ldr	r2, [pc, #532]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800527c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005280:	6113      	str	r3, [r2, #16]
 8005282:	4b83      	ldr	r3, [pc, #524]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005284:	6919      	ldr	r1, [r3, #16]
 8005286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800528e:	4a80      	ldr	r2, [pc, #512]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005290:	430b      	orrs	r3, r1
 8005292:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80052a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052a2:	2300      	movs	r3, #0
 80052a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80052aa:	460b      	mov	r3, r1
 80052ac:	4313      	orrs	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052b0:	4b77      	ldr	r3, [pc, #476]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80052b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052be:	4a74      	ldr	r2, [pc, #464]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052c0:	430b      	orrs	r3, r1
 80052c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80052d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80052d2:	2300      	movs	r3, #0
 80052d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80052d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80052da:	460b      	mov	r3, r1
 80052dc:	4313      	orrs	r3, r2
 80052de:	d00a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052e0:	4b6b      	ldr	r3, [pc, #428]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80052e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052f0:	4a67      	ldr	r2, [pc, #412]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052f2:	430b      	orrs	r3, r1
 80052f4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	2100      	movs	r1, #0
 8005300:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005308:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800530c:	460b      	mov	r3, r1
 800530e:	4313      	orrs	r3, r2
 8005310:	d011      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005316:	3308      	adds	r3, #8
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f001 fa4a 	bl	80067b4 <RCCEx_PLL2_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005332:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	2100      	movs	r1, #0
 8005340:	6239      	str	r1, [r7, #32]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	627b      	str	r3, [r7, #36]	@ 0x24
 8005348:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800534c:	460b      	mov	r3, r1
 800534e:	4313      	orrs	r3, r2
 8005350:	d011      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005356:	3308      	adds	r3, #8
 8005358:	2101      	movs	r1, #1
 800535a:	4618      	mov	r0, r3
 800535c:	f001 fa2a 	bl	80067b4 <RCCEx_PLL2_Config>
 8005360:	4603      	mov	r3, r0
 8005362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	2100      	movs	r1, #0
 8005380:	61b9      	str	r1, [r7, #24]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800538c:	460b      	mov	r3, r1
 800538e:	4313      	orrs	r3, r2
 8005390:	d011      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005396:	3308      	adds	r3, #8
 8005398:	2102      	movs	r1, #2
 800539a:	4618      	mov	r0, r3
 800539c:	f001 fa0a 	bl	80067b4 <RCCEx_PLL2_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80053a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80053b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	2100      	movs	r1, #0
 80053c0:	6139      	str	r1, [r7, #16]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80053cc:	460b      	mov	r3, r1
 80053ce:	4313      	orrs	r3, r2
 80053d0:	d011      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d6:	3328      	adds	r3, #40	@ 0x28
 80053d8:	2100      	movs	r1, #0
 80053da:	4618      	mov	r0, r3
 80053dc:	f001 fa9c 	bl	8006918 <RCCEx_PLL3_Config>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80053e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	2100      	movs	r1, #0
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800540c:	460b      	mov	r3, r1
 800540e:	4313      	orrs	r3, r2
 8005410:	d011      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005416:	3328      	adds	r3, #40	@ 0x28
 8005418:	2101      	movs	r1, #1
 800541a:	4618      	mov	r0, r3
 800541c:	f001 fa7c 	bl	8006918 <RCCEx_PLL3_Config>
 8005420:	4603      	mov	r3, r0
 8005422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	2100      	movs	r1, #0
 8005440:	6039      	str	r1, [r7, #0]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	607b      	str	r3, [r7, #4]
 8005448:	e9d7 1200 	ldrd	r1, r2, [r7]
 800544c:	460b      	mov	r3, r1
 800544e:	4313      	orrs	r3, r2
 8005450:	d011      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005456:	3328      	adds	r3, #40	@ 0x28
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f001 fa5c 	bl	8006918 <RCCEx_PLL3_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005472:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005476:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	e000      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
}
 8005484:	4618      	mov	r0, r3
 8005486:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800548a:	46bd      	mov	sp, r7
 800548c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005490:	58024400 	.word	0x58024400

08005494 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b090      	sub	sp, #64	@ 0x40
 8005498:	af00      	add	r7, sp, #0
 800549a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800549e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80054a6:	430b      	orrs	r3, r1
 80054a8:	f040 8094 	bne.w	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80054ac:	4b9e      	ldr	r3, [pc, #632]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	f200 8087 	bhi.w	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80054be:	a201      	add	r2, pc, #4	@ (adr r2, 80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054d9 	.word	0x080054d9
 80054c8:	08005501 	.word	0x08005501
 80054cc:	08005529 	.word	0x08005529
 80054d0:	080055c5 	.word	0x080055c5
 80054d4:	08005551 	.word	0x08005551
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054d8:	4b93      	ldr	r3, [pc, #588]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054e4:	d108      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 f810 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054f4:	f000 bd45 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054f8:	2300      	movs	r3, #0
 80054fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054fc:	f000 bd41 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005500:	4b89      	ldr	r3, [pc, #548]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800550c:	d108      	bne.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800550e:	f107 0318 	add.w	r3, r7, #24
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fd54 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800551c:	f000 bd31 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005524:	f000 bd2d 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005528:	4b7f      	ldr	r3, [pc, #508]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005534:	d108      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005536:	f107 030c 	add.w	r3, r7, #12
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fe94 	bl	8006268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005544:	f000 bd1d 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800554c:	f000 bd19 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005550:	4b75      	ldr	r3, [pc, #468]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005554:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005558:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800555a:	4b73      	ldr	r3, [pc, #460]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b04      	cmp	r3, #4
 8005564:	d10c      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005568:	2b00      	cmp	r3, #0
 800556a:	d109      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800556c:	4b6e      	ldr	r3, [pc, #440]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	08db      	lsrs	r3, r3, #3
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	4a6d      	ldr	r2, [pc, #436]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005578:	fa22 f303 	lsr.w	r3, r2, r3
 800557c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800557e:	e01f      	b.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005580:	4b69      	ldr	r3, [pc, #420]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800558c:	d106      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800558e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005594:	d102      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005596:	4b66      	ldr	r3, [pc, #408]	@ (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800559a:	e011      	b.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800559c:	4b62      	ldr	r3, [pc, #392]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055a8:	d106      	bne.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80055aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055b0:	d102      	bne.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055b2:	4b60      	ldr	r3, [pc, #384]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80055b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b6:	e003      	b.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80055bc:	f000 bce1 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80055c0:	f000 bcdf 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055c4:	4b5c      	ldr	r3, [pc, #368]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80055c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055c8:	f000 bcdb 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055d0:	f000 bcd7 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80055d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055d8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80055dc:	430b      	orrs	r3, r1
 80055de:	f040 80ad 	bne.w	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80055e2:	4b51      	ldr	r3, [pc, #324]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80055ea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80055ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055f2:	d056      	beq.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055fa:	f200 8090 	bhi.w	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80055fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005600:	2bc0      	cmp	r3, #192	@ 0xc0
 8005602:	f000 8088 	beq.w	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	2bc0      	cmp	r3, #192	@ 0xc0
 800560a:	f200 8088 	bhi.w	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005610:	2b80      	cmp	r3, #128	@ 0x80
 8005612:	d032      	beq.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005616:	2b80      	cmp	r3, #128	@ 0x80
 8005618:	f200 8081 	bhi.w	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	2b40      	cmp	r3, #64	@ 0x40
 8005626:	d014      	beq.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005628:	e079      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800562a:	4b3f      	ldr	r3, [pc, #252]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005636:	d108      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800563c:	4618      	mov	r0, r3
 800563e:	f000 ff67 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005646:	f000 bc9c 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800564a:	2300      	movs	r3, #0
 800564c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800564e:	f000 bc98 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005652:	4b35      	ldr	r3, [pc, #212]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800565a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800565e:	d108      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005660:	f107 0318 	add.w	r3, r7, #24
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fcab 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800566e:	f000 bc88 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005676:	f000 bc84 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800567a:	4b2b      	ldr	r3, [pc, #172]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005686:	d108      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005688:	f107 030c 	add.w	r3, r7, #12
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fdeb 	bl	8006268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005696:	f000 bc74 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800569e:	f000 bc70 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056a2:	4b21      	ldr	r3, [pc, #132]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80056aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d10c      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80056b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d109      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056be:	4b1a      	ldr	r3, [pc, #104]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	08db      	lsrs	r3, r3, #3
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	4a18      	ldr	r2, [pc, #96]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80056ca:	fa22 f303 	lsr.w	r3, r2, r3
 80056ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056d0:	e01f      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056d2:	4b15      	ldr	r3, [pc, #84]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056de:	d106      	bne.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80056e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056e6:	d102      	bne.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80056e8:	4b11      	ldr	r3, [pc, #68]	@ (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80056ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056ec:	e011      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056fa:	d106      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80056fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005702:	d102      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005704:	4b0b      	ldr	r3, [pc, #44]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005708:	e003      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800570e:	f000 bc38 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005712:	f000 bc36 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005716:	4b08      	ldr	r3, [pc, #32]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800571a:	f000 bc32 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005722:	f000 bc2e 	b.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005726:	bf00      	nop
 8005728:	58024400 	.word	0x58024400
 800572c:	03d09000 	.word	0x03d09000
 8005730:	003d0900 	.word	0x003d0900
 8005734:	017d7840 	.word	0x017d7840
 8005738:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800573c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005740:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005744:	430b      	orrs	r3, r1
 8005746:	f040 809c 	bne.w	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800574a:	4b9e      	ldr	r3, [pc, #632]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005752:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800575a:	d054      	beq.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005762:	f200 808b 	bhi.w	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005768:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800576c:	f000 8083 	beq.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005772:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005776:	f200 8081 	bhi.w	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005780:	d02f      	beq.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005788:	d878      	bhi.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005796:	d012      	beq.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005798:	e070      	b.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800579a:	4b8a      	ldr	r3, [pc, #552]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057a6:	d107      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 feaf 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057b6:	e3e4      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057bc:	e3e1      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057be:	4b81      	ldr	r3, [pc, #516]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ca:	d107      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057cc:	f107 0318 	add.w	r3, r7, #24
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fbf5 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057da:	e3d2      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e0:	e3cf      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057e2:	4b78      	ldr	r3, [pc, #480]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057ee:	d107      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057f0:	f107 030c 	add.w	r3, r7, #12
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fd37 	bl	8006268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057fe:	e3c0      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005804:	e3bd      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005806:	4b6f      	ldr	r3, [pc, #444]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800580a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800580e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005810:	4b6c      	ldr	r3, [pc, #432]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b04      	cmp	r3, #4
 800581a:	d10c      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800581c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005822:	4b68      	ldr	r3, [pc, #416]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	08db      	lsrs	r3, r3, #3
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	4a66      	ldr	r2, [pc, #408]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800582e:	fa22 f303 	lsr.w	r3, r2, r3
 8005832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005834:	e01e      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005836:	4b63      	ldr	r3, [pc, #396]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005842:	d106      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800584a:	d102      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800584c:	4b5f      	ldr	r3, [pc, #380]	@ (80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800584e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005850:	e010      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005852:	4b5c      	ldr	r3, [pc, #368]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800585e:	d106      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005866:	d102      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005868:	4b59      	ldr	r3, [pc, #356]	@ (80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800586a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800586c:	e002      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005872:	e386      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005874:	e385      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005876:	4b57      	ldr	r3, [pc, #348]	@ (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800587a:	e382      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005880:	e37f      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005882:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005886:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800588a:	430b      	orrs	r3, r1
 800588c:	f040 80a7 	bne.w	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005890:	4b4c      	ldr	r3, [pc, #304]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005894:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005898:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800589a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058a0:	d055      	beq.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058a8:	f200 8096 	bhi.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058b2:	f000 8084 	beq.w	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80058b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058bc:	f200 808c 	bhi.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058c6:	d030      	beq.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80058c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058ce:	f200 8083 	bhi.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058de:	d012      	beq.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80058e0:	e07a      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058e2:	4b38      	ldr	r3, [pc, #224]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058ee:	d107      	bne.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fe0b 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058fe:	e340      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005904:	e33d      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005906:	4b2f      	ldr	r3, [pc, #188]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800590e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005912:	d107      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005914:	f107 0318 	add.w	r3, r7, #24
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fb51 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005922:	e32e      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005928:	e32b      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800592a:	4b26      	ldr	r3, [pc, #152]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005936:	d107      	bne.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005938:	f107 030c 	add.w	r3, r7, #12
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fc93 	bl	8006268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005946:	e31c      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005948:	2300      	movs	r3, #0
 800594a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800594c:	e319      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800594e:	4b1d      	ldr	r3, [pc, #116]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005952:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005956:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005958:	4b1a      	ldr	r3, [pc, #104]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b04      	cmp	r3, #4
 8005962:	d10c      	bne.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800596a:	4b16      	ldr	r3, [pc, #88]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	08db      	lsrs	r3, r3, #3
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	4a14      	ldr	r2, [pc, #80]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005976:	fa22 f303 	lsr.w	r3, r2, r3
 800597a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800597c:	e01e      	b.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800597e:	4b11      	ldr	r3, [pc, #68]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800598a:	d106      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800598c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800598e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005992:	d102      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005994:	4b0d      	ldr	r3, [pc, #52]	@ (80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005998:	e010      	b.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800599a:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059a6:	d106      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80059a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059ae:	d102      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059b0:	4b07      	ldr	r3, [pc, #28]	@ (80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059b4:	e002      	b.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80059ba:	e2e2      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059bc:	e2e1      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80059be:	4b05      	ldr	r3, [pc, #20]	@ (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80059c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c2:	e2de      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059c4:	58024400 	.word	0x58024400
 80059c8:	03d09000 	.word	0x03d09000
 80059cc:	003d0900 	.word	0x003d0900
 80059d0:	017d7840 	.word	0x017d7840
 80059d4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059dc:	e2d1      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80059de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80059e6:	430b      	orrs	r3, r1
 80059e8:	f040 809c 	bne.w	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80059ec:	4b93      	ldr	r3, [pc, #588]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80059ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80059f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80059f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059fc:	d054      	beq.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80059fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a04:	f200 808b 	bhi.w	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a0e:	f000 8083 	beq.w	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a18:	f200 8081 	bhi.w	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a22:	d02f      	beq.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a2a:	d878      	bhi.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a38:	d012      	beq.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005a3a:	e070      	b.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a3c:	4b7f      	ldr	r3, [pc, #508]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a48:	d107      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fd5e 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a58:	e293      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a5e:	e290      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a60:	4b76      	ldr	r3, [pc, #472]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a6c:	d107      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a6e:	f107 0318 	add.w	r3, r7, #24
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 faa4 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a7c:	e281      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a82:	e27e      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a84:	4b6d      	ldr	r3, [pc, #436]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a90:	d107      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a92:	f107 030c 	add.w	r3, r7, #12
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fbe6 	bl	8006268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aa0:	e26f      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aa6:	e26c      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005aa8:	4b64      	ldr	r3, [pc, #400]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ab0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ab2:	4b62      	ldr	r3, [pc, #392]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d10c      	bne.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ac4:	4b5d      	ldr	r3, [pc, #372]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	08db      	lsrs	r3, r3, #3
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	4a5c      	ldr	r2, [pc, #368]	@ (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ad6:	e01e      	b.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ad8:	4b58      	ldr	r3, [pc, #352]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ae4:	d106      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005aec:	d102      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005aee:	4b55      	ldr	r3, [pc, #340]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005af2:	e010      	b.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005af4:	4b51      	ldr	r3, [pc, #324]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b00:	d106      	bne.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b08:	d102      	bne.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b0e:	e002      	b.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b14:	e235      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b16:	e234      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b18:	4b4c      	ldr	r3, [pc, #304]	@ (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b1c:	e231      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b22:	e22e      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b28:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	f040 808f 	bne.w	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005b32:	4b42      	ldr	r3, [pc, #264]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b36:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b42:	d06b      	beq.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b4a:	d874      	bhi.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b52:	d056      	beq.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b5a:	d86c      	bhi.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b62:	d03b      	beq.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b6a:	d864      	bhi.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b72:	d021      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b7a:	d85c      	bhi.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b88:	d004      	beq.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005b8a:	e054      	b.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005b8c:	f7fe fa0a 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 8005b90:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b92:	e1f6      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b94:	4b29      	ldr	r3, [pc, #164]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ba0:	d107      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ba2:	f107 0318 	add.w	r3, r7, #24
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fa0a 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bb0:	e1e7      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb6:	e1e4      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bb8:	4b20      	ldr	r3, [pc, #128]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bc4:	d107      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bc6:	f107 030c 	add.w	r3, r7, #12
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fb4c 	bl	8006268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bd4:	e1d5      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bda:	e1d2      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bdc:	4b17      	ldr	r3, [pc, #92]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d109      	bne.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005be8:	4b14      	ldr	r3, [pc, #80]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	08db      	lsrs	r3, r3, #3
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	4a13      	ldr	r2, [pc, #76]	@ (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bfa:	e1c2      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c00:	e1bf      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005c02:	4b0e      	ldr	r3, [pc, #56]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c0e:	d102      	bne.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005c10:	4b0c      	ldr	r3, [pc, #48]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c14:	e1b5      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c1a:	e1b2      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c1c:	4b07      	ldr	r3, [pc, #28]	@ (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c28:	d102      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005c2a:	4b07      	ldr	r3, [pc, #28]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c2e:	e1a8      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c34:	e1a5      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c3a:	e1a2      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	03d09000 	.word	0x03d09000
 8005c44:	003d0900 	.word	0x003d0900
 8005c48:	017d7840 	.word	0x017d7840
 8005c4c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c54:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	d173      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005c5c:	4b9c      	ldr	r3, [pc, #624]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c64:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c6c:	d02f      	beq.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c74:	d863      	bhi.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c82:	d012      	beq.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005c84:	e05b      	b.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c86:	4b92      	ldr	r3, [pc, #584]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c92:	d107      	bne.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c94:	f107 0318 	add.w	r3, r7, #24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 f991 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ca2:	e16e      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ca8:	e16b      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005caa:	4b89      	ldr	r3, [pc, #548]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cb6:	d107      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cb8:	f107 030c 	add.w	r3, r7, #12
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fad3 	bl	8006268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cc6:	e15c      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ccc:	e159      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005cce:	4b80      	ldr	r3, [pc, #512]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005cd6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cd8:	4b7d      	ldr	r3, [pc, #500]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d10c      	bne.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cea:	4b79      	ldr	r3, [pc, #484]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	08db      	lsrs	r3, r3, #3
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	4a77      	ldr	r2, [pc, #476]	@ (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cfc:	e01e      	b.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cfe:	4b74      	ldr	r3, [pc, #464]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d0a:	d106      	bne.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d12:	d102      	bne.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d14:	4b70      	ldr	r3, [pc, #448]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d18:	e010      	b.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d1a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d26:	d106      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d2e:	d102      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005d30:	4b6a      	ldr	r3, [pc, #424]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d34:	e002      	b.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005d3a:	e122      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d3c:	e121      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d42:	e11e      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d48:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	d133      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005d50:	4b5f      	ldr	r3, [pc, #380]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d004      	beq.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d66:	d012      	beq.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005d68:	e023      	b.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d6a:	4b59      	ldr	r3, [pc, #356]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d76:	d107      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fbc7 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d86:	e0fc      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d8c:	e0f9      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d8e:	4b50      	ldr	r3, [pc, #320]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d9a:	d107      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d9c:	f107 0318 	add.w	r3, r7, #24
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 f90d 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005daa:	e0ea      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005db0:	e0e7      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005db6:	e0e4      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dbc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	f040 808d 	bne.w	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005dc6:	4b42      	ldr	r3, [pc, #264]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005dce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dd6:	d06b      	beq.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dde:	d874      	bhi.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005de6:	d056      	beq.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dee:	d86c      	bhi.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005df6:	d03b      	beq.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005dfe:	d864      	bhi.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e06:	d021      	beq.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e0e:	d85c      	bhi.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e1c:	d004      	beq.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005e1e:	e054      	b.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005e20:	f000 f8b8 	bl	8005f94 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e24:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e26:	e0ac      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e28:	4b29      	ldr	r3, [pc, #164]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e34:	d107      	bne.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e36:	f107 0318 	add.w	r3, r7, #24
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 f8c0 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e44:	e09d      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e4a:	e09a      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e4c:	4b20      	ldr	r3, [pc, #128]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e58:	d107      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e5a:	f107 030c 	add.w	r3, r7, #12
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fa02 	bl	8006268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e68:	e08b      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e6e:	e088      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e70:	4b17      	ldr	r3, [pc, #92]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d109      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e7c:	4b14      	ldr	r3, [pc, #80]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	08db      	lsrs	r3, r3, #3
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	4a13      	ldr	r2, [pc, #76]	@ (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e8e:	e078      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e94:	e075      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005e96:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea2:	d102      	bne.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ea8:	e06b      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eae:	e068      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005eb0:	4b07      	ldr	r3, [pc, #28]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ebc:	d102      	bne.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005ebe:	4b07      	ldr	r3, [pc, #28]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ec2:	e05e      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ec8:	e05b      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ece:	e058      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ed0:	58024400 	.word	0x58024400
 8005ed4:	03d09000 	.word	0x03d09000
 8005ed8:	003d0900 	.word	0x003d0900
 8005edc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	d148      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005eec:	4b27      	ldr	r3, [pc, #156]	@ (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ef4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005efc:	d02a      	beq.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f04:	d838      	bhi.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f12:	d00d      	beq.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005f14:	e030      	b.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f16:	4b1d      	ldr	r3, [pc, #116]	@ (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f22:	d102      	bne.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005f24:	4b1a      	ldr	r3, [pc, #104]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f28:	e02b      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f2e:	e028      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f30:	4b16      	ldr	r3, [pc, #88]	@ (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f3c:	d107      	bne.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fae4 	bl	8006510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f4c:	e019      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f52:	e016      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f54:	4b0d      	ldr	r3, [pc, #52]	@ (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f60:	d107      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f62:	f107 0318 	add.w	r3, r7, #24
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 f82a 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f70:	e007      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f76:	e004      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f7c:	e001      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3740      	adds	r7, #64	@ 0x40
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	58024400 	.word	0x58024400
 8005f90:	017d7840 	.word	0x017d7840

08005f94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f98:	f7fd ffd4 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	4b06      	ldr	r3, [pc, #24]	@ (8005fb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	091b      	lsrs	r3, r3, #4
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	4904      	ldr	r1, [pc, #16]	@ (8005fbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005faa:	5ccb      	ldrb	r3, [r1, r3]
 8005fac:	f003 031f 	and.w	r3, r3, #31
 8005fb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	58024400 	.word	0x58024400
 8005fbc:	0800ab38 	.word	0x0800ab38

08005fc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b089      	sub	sp, #36	@ 0x24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fc8:	4ba1      	ldr	r3, [pc, #644]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fcc:	f003 0303 	and.w	r3, r3, #3
 8005fd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005fd2:	4b9f      	ldr	r3, [pc, #636]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd6:	0b1b      	lsrs	r3, r3, #12
 8005fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005fde:	4b9c      	ldr	r3, [pc, #624]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe2:	091b      	lsrs	r3, r3, #4
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005fea:	4b99      	ldr	r3, [pc, #612]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fee:	08db      	lsrs	r3, r3, #3
 8005ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	fb02 f303 	mul.w	r3, r2, r3
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006002:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 8111 	beq.w	8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b02      	cmp	r3, #2
 8006012:	f000 8083 	beq.w	800611c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b02      	cmp	r3, #2
 800601a:	f200 80a1 	bhi.w	8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d056      	beq.n	80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800602a:	e099      	b.n	8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800602c:	4b88      	ldr	r3, [pc, #544]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d02d      	beq.n	8006094 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006038:	4b85      	ldr	r3, [pc, #532]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	08db      	lsrs	r3, r3, #3
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	4a84      	ldr	r2, [pc, #528]	@ (8006254 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006044:	fa22 f303 	lsr.w	r3, r2, r3
 8006048:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006062:	4b7b      	ldr	r3, [pc, #492]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006072:	ed97 6a03 	vldr	s12, [r7, #12]
 8006076:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800607a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006092:	e087      	b.n	80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800625c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80060a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a6:	4b6a      	ldr	r3, [pc, #424]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060d6:	e065      	b.n	80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ea:	4b59      	ldr	r3, [pc, #356]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80060fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800610e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800611a:	e043      	b.n	80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800612a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612e:	4b48      	ldr	r3, [pc, #288]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006142:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800615e:	e021      	b.n	80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800616e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006172:	4b37      	ldr	r3, [pc, #220]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006182:	ed97 6a03 	vldr	s12, [r7, #12]
 8006186:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800618a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80061a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a8:	0a5b      	lsrs	r3, r3, #9
 80061aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061be:	edd7 6a07 	vldr	s13, [r7, #28]
 80061c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ca:	ee17 2a90 	vmov	r2, s15
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80061d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	0c1b      	lsrs	r3, r3, #16
 80061d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061dc:	ee07 3a90 	vmov	s15, r3
 80061e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80061f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061f8:	ee17 2a90 	vmov	r2, s15
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006200:	4b13      	ldr	r3, [pc, #76]	@ (8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006204:	0e1b      	lsrs	r3, r3, #24
 8006206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006212:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800621a:	edd7 6a07 	vldr	s13, [r7, #28]
 800621e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006226:	ee17 2a90 	vmov	r2, s15
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800622e:	e008      	b.n	8006242 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	609a      	str	r2, [r3, #8]
}
 8006242:	bf00      	nop
 8006244:	3724      	adds	r7, #36	@ 0x24
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	58024400 	.word	0x58024400
 8006254:	03d09000 	.word	0x03d09000
 8006258:	46000000 	.word	0x46000000
 800625c:	4c742400 	.word	0x4c742400
 8006260:	4a742400 	.word	0x4a742400
 8006264:	4bbebc20 	.word	0x4bbebc20

08006268 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006268:	b480      	push	{r7}
 800626a:	b089      	sub	sp, #36	@ 0x24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006270:	4ba1      	ldr	r3, [pc, #644]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	f003 0303 	and.w	r3, r3, #3
 8006278:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800627a:	4b9f      	ldr	r3, [pc, #636]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800627c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627e:	0d1b      	lsrs	r3, r3, #20
 8006280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006284:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006286:	4b9c      	ldr	r3, [pc, #624]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628a:	0a1b      	lsrs	r3, r3, #8
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006292:	4b99      	ldr	r3, [pc, #612]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006296:	08db      	lsrs	r3, r3, #3
 8006298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8111 	beq.w	80064d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	f000 8083 	beq.w	80063c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	f200 80a1 	bhi.w	8006408 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d056      	beq.n	8006380 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80062d2:	e099      	b.n	8006408 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062d4:	4b88      	ldr	r3, [pc, #544]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d02d      	beq.n	800633c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062e0:	4b85      	ldr	r3, [pc, #532]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	08db      	lsrs	r3, r3, #3
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	4a84      	ldr	r2, [pc, #528]	@ (80064fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80062ec:	fa22 f303 	lsr.w	r3, r2, r3
 80062f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800630a:	4b7b      	ldr	r3, [pc, #492]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631a:	ed97 6a03 	vldr	s12, [r7, #12]
 800631e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800632a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800632e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006336:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800633a:	e087      	b.n	800644c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006346:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800634a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634e:	4b6a      	ldr	r3, [pc, #424]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800635e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006362:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800636a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800636e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800637e:	e065      	b.n	800644c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800638e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006392:	4b59      	ldr	r3, [pc, #356]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063c2:	e043      	b.n	800644c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	ee07 3a90 	vmov	s15, r3
 80063ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800650c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80063d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d6:	4b48      	ldr	r3, [pc, #288]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006406:	e021      	b.n	800644c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006412:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800641a:	4b37      	ldr	r3, [pc, #220]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642a:	ed97 6a03 	vldr	s12, [r7, #12]
 800642e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800643a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800643e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800644a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800644c:	4b2a      	ldr	r3, [pc, #168]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800644e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006450:	0a5b      	lsrs	r3, r3, #9
 8006452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006456:	ee07 3a90 	vmov	s15, r3
 800645a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006462:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006466:	edd7 6a07 	vldr	s13, [r7, #28]
 800646a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800646e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006472:	ee17 2a90 	vmov	r2, s15
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800647a:	4b1f      	ldr	r3, [pc, #124]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	0c1b      	lsrs	r3, r3, #16
 8006480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006484:	ee07 3a90 	vmov	s15, r3
 8006488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006490:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006494:	edd7 6a07 	vldr	s13, [r7, #28]
 8006498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800649c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064a0:	ee17 2a90 	vmov	r2, s15
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80064a8:	4b13      	ldr	r3, [pc, #76]	@ (80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ac:	0e1b      	lsrs	r3, r3, #24
 80064ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ce:	ee17 2a90 	vmov	r2, s15
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064d6:	e008      	b.n	80064ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	609a      	str	r2, [r3, #8]
}
 80064ea:	bf00      	nop
 80064ec:	3724      	adds	r7, #36	@ 0x24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	58024400 	.word	0x58024400
 80064fc:	03d09000 	.word	0x03d09000
 8006500:	46000000 	.word	0x46000000
 8006504:	4c742400 	.word	0x4c742400
 8006508:	4a742400 	.word	0x4a742400
 800650c:	4bbebc20 	.word	0x4bbebc20

08006510 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006510:	b480      	push	{r7}
 8006512:	b089      	sub	sp, #36	@ 0x24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006518:	4ba0      	ldr	r3, [pc, #640]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800651a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651c:	f003 0303 	and.w	r3, r3, #3
 8006520:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006522:	4b9e      	ldr	r3, [pc, #632]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006526:	091b      	lsrs	r3, r3, #4
 8006528:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800652c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800652e:	4b9b      	ldr	r3, [pc, #620]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006538:	4b98      	ldr	r3, [pc, #608]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800653a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800653c:	08db      	lsrs	r3, r3, #3
 800653e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	fb02 f303 	mul.w	r3, r2, r3
 8006548:	ee07 3a90 	vmov	s15, r3
 800654c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006550:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 8111 	beq.w	800677e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	2b02      	cmp	r3, #2
 8006560:	f000 8083 	beq.w	800666a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	2b02      	cmp	r3, #2
 8006568:	f200 80a1 	bhi.w	80066ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d056      	beq.n	8006626 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006578:	e099      	b.n	80066ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800657a:	4b88      	ldr	r3, [pc, #544]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b00      	cmp	r3, #0
 8006584:	d02d      	beq.n	80065e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006586:	4b85      	ldr	r3, [pc, #532]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	08db      	lsrs	r3, r3, #3
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	4a83      	ldr	r2, [pc, #524]	@ (80067a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006592:	fa22 f303 	lsr.w	r3, r2, r3
 8006596:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b0:	4b7a      	ldr	r3, [pc, #488]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b8:	ee07 3a90 	vmov	s15, r3
 80065bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80065c4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80067a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80065e0:	e087      	b.n	80066f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	ee07 3a90 	vmov	s15, r3
 80065e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ec:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80065f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f4:	4b69      	ldr	r3, [pc, #420]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fc:	ee07 3a90 	vmov	s15, r3
 8006600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006604:	ed97 6a03 	vldr	s12, [r7, #12]
 8006608:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80067a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800660c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006614:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006620:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006624:	e065      	b.n	80066f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006630:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80067ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006638:	4b58      	ldr	r3, [pc, #352]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800663a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006648:	ed97 6a03 	vldr	s12, [r7, #12]
 800664c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80067a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006650:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006658:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800665c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006664:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006668:	e043      	b.n	80066f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006674:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80067b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667c:	4b47      	ldr	r3, [pc, #284]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800667e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006684:	ee07 3a90 	vmov	s15, r3
 8006688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006690:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80067a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ac:	e021      	b.n	80066f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80066bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c0:	4b36      	ldr	r3, [pc, #216]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80066d4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80067a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80066f2:	4b2a      	ldr	r3, [pc, #168]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f6:	0a5b      	lsrs	r3, r3, #9
 80066f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066fc:	ee07 3a90 	vmov	s15, r3
 8006700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006704:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800670c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006718:	ee17 2a90 	vmov	r2, s15
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006720:	4b1e      	ldr	r3, [pc, #120]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800672a:	ee07 3a90 	vmov	s15, r3
 800672e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006732:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800673a:	edd7 6a07 	vldr	s13, [r7, #28]
 800673e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006746:	ee17 2a90 	vmov	r2, s15
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800674e:	4b13      	ldr	r3, [pc, #76]	@ (800679c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006752:	0e1b      	lsrs	r3, r3, #24
 8006754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006760:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006764:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006768:	edd7 6a07 	vldr	s13, [r7, #28]
 800676c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006774:	ee17 2a90 	vmov	r2, s15
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800677c:	e008      	b.n	8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	609a      	str	r2, [r3, #8]
}
 8006790:	bf00      	nop
 8006792:	3724      	adds	r7, #36	@ 0x24
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	58024400 	.word	0x58024400
 80067a0:	03d09000 	.word	0x03d09000
 80067a4:	46000000 	.word	0x46000000
 80067a8:	4c742400 	.word	0x4c742400
 80067ac:	4a742400 	.word	0x4a742400
 80067b0:	4bbebc20 	.word	0x4bbebc20

080067b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067c2:	4b53      	ldr	r3, [pc, #332]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80067c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d101      	bne.n	80067d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e099      	b.n	8006906 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80067d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a4e      	ldr	r2, [pc, #312]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80067d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067de:	f7fa fe8b 	bl	80014f8 <HAL_GetTick>
 80067e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067e4:	e008      	b.n	80067f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067e6:	f7fa fe87 	bl	80014f8 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e086      	b.n	8006906 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067f8:	4b45      	ldr	r3, [pc, #276]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f0      	bne.n	80067e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006804:	4b42      	ldr	r3, [pc, #264]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006808:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	031b      	lsls	r3, r3, #12
 8006812:	493f      	ldr	r1, [pc, #252]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006814:	4313      	orrs	r3, r2
 8006816:	628b      	str	r3, [r1, #40]	@ 0x28
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	3b01      	subs	r3, #1
 800681e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	3b01      	subs	r3, #1
 8006828:	025b      	lsls	r3, r3, #9
 800682a:	b29b      	uxth	r3, r3
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	3b01      	subs	r3, #1
 8006834:	041b      	lsls	r3, r3, #16
 8006836:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	3b01      	subs	r3, #1
 8006842:	061b      	lsls	r3, r3, #24
 8006844:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006848:	4931      	ldr	r1, [pc, #196]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 800684a:	4313      	orrs	r3, r2
 800684c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800684e:	4b30      	ldr	r3, [pc, #192]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006852:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	492d      	ldr	r1, [pc, #180]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 800685c:	4313      	orrs	r3, r2
 800685e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006860:	4b2b      	ldr	r3, [pc, #172]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	f023 0220 	bic.w	r2, r3, #32
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	4928      	ldr	r1, [pc, #160]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 800686e:	4313      	orrs	r3, r2
 8006870:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006872:	4b27      	ldr	r3, [pc, #156]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	4a26      	ldr	r2, [pc, #152]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006878:	f023 0310 	bic.w	r3, r3, #16
 800687c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800687e:	4b24      	ldr	r3, [pc, #144]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006880:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006882:	4b24      	ldr	r3, [pc, #144]	@ (8006914 <RCCEx_PLL2_Config+0x160>)
 8006884:	4013      	ands	r3, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	69d2      	ldr	r2, [r2, #28]
 800688a:	00d2      	lsls	r2, r2, #3
 800688c:	4920      	ldr	r1, [pc, #128]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 800688e:	4313      	orrs	r3, r2
 8006890:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006892:	4b1f      	ldr	r3, [pc, #124]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	4a1e      	ldr	r2, [pc, #120]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006898:	f043 0310 	orr.w	r3, r3, #16
 800689c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80068a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a8:	4a19      	ldr	r2, [pc, #100]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068b0:	e00f      	b.n	80068d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d106      	bne.n	80068c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80068b8:	4b15      	ldr	r3, [pc, #84]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	4a14      	ldr	r2, [pc, #80]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068c4:	e005      	b.n	80068d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068c6:	4b12      	ldr	r3, [pc, #72]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ca:	4a11      	ldr	r2, [pc, #68]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80068d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068de:	f7fa fe0b 	bl	80014f8 <HAL_GetTick>
 80068e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068e4:	e008      	b.n	80068f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068e6:	f7fa fe07 	bl	80014f8 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e006      	b.n	8006906 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068f8:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0f0      	beq.n	80068e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	58024400 	.word	0x58024400
 8006914:	ffff0007 	.word	0xffff0007

08006918 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006926:	4b53      	ldr	r3, [pc, #332]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b03      	cmp	r3, #3
 8006930:	d101      	bne.n	8006936 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e099      	b.n	8006a6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006936:	4b4f      	ldr	r3, [pc, #316]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a4e      	ldr	r2, [pc, #312]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 800693c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006942:	f7fa fdd9 	bl	80014f8 <HAL_GetTick>
 8006946:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006948:	e008      	b.n	800695c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800694a:	f7fa fdd5 	bl	80014f8 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e086      	b.n	8006a6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800695c:	4b45      	ldr	r3, [pc, #276]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f0      	bne.n	800694a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006968:	4b42      	ldr	r3, [pc, #264]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	051b      	lsls	r3, r3, #20
 8006976:	493f      	ldr	r1, [pc, #252]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006978:	4313      	orrs	r3, r2
 800697a:	628b      	str	r3, [r1, #40]	@ 0x28
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	3b01      	subs	r3, #1
 8006982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	3b01      	subs	r3, #1
 800698c:	025b      	lsls	r3, r3, #9
 800698e:	b29b      	uxth	r3, r3
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	3b01      	subs	r3, #1
 8006998:	041b      	lsls	r3, r3, #16
 800699a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	061b      	lsls	r3, r3, #24
 80069a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069ac:	4931      	ldr	r1, [pc, #196]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80069b2:	4b30      	ldr	r3, [pc, #192]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	492d      	ldr	r1, [pc, #180]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	4928      	ldr	r1, [pc, #160]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069d6:	4b27      	ldr	r3, [pc, #156]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069da:	4a26      	ldr	r2, [pc, #152]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069e2:	4b24      	ldr	r3, [pc, #144]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069e6:	4b24      	ldr	r3, [pc, #144]	@ (8006a78 <RCCEx_PLL3_Config+0x160>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	69d2      	ldr	r2, [r2, #28]
 80069ee:	00d2      	lsls	r2, r2, #3
 80069f0:	4920      	ldr	r1, [pc, #128]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a08:	4b1a      	ldr	r3, [pc, #104]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	4a19      	ldr	r2, [pc, #100]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a14:	e00f      	b.n	8006a36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d106      	bne.n	8006a2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a1c:	4b15      	ldr	r3, [pc, #84]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a20:	4a14      	ldr	r2, [pc, #80]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a28:	e005      	b.n	8006a36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a2a:	4b12      	ldr	r3, [pc, #72]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	4a11      	ldr	r2, [pc, #68]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a36:	4b0f      	ldr	r3, [pc, #60]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a42:	f7fa fd59 	bl	80014f8 <HAL_GetTick>
 8006a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a48:	e008      	b.n	8006a5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a4a:	f7fa fd55 	bl	80014f8 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e006      	b.n	8006a6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a5c:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0f0      	beq.n	8006a4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	58024400 	.word	0x58024400
 8006a78:	ffff0007 	.word	0xffff0007

08006a7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e10f      	b.n	8006cae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a87      	ldr	r2, [pc, #540]	@ (8006cb8 <HAL_SPI_Init+0x23c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d00f      	beq.n	8006abe <HAL_SPI_Init+0x42>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a86      	ldr	r2, [pc, #536]	@ (8006cbc <HAL_SPI_Init+0x240>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00a      	beq.n	8006abe <HAL_SPI_Init+0x42>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a84      	ldr	r2, [pc, #528]	@ (8006cc0 <HAL_SPI_Init+0x244>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d005      	beq.n	8006abe <HAL_SPI_Init+0x42>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	2b0f      	cmp	r3, #15
 8006ab8:	d901      	bls.n	8006abe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e0f7      	b.n	8006cae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f900 	bl	8006cc4 <SPI_GetPacketSize>
 8006ac4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a7b      	ldr	r2, [pc, #492]	@ (8006cb8 <HAL_SPI_Init+0x23c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00c      	beq.n	8006aea <HAL_SPI_Init+0x6e>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a79      	ldr	r2, [pc, #484]	@ (8006cbc <HAL_SPI_Init+0x240>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d007      	beq.n	8006aea <HAL_SPI_Init+0x6e>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a78      	ldr	r2, [pc, #480]	@ (8006cc0 <HAL_SPI_Init+0x244>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d002      	beq.n	8006aea <HAL_SPI_Init+0x6e>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b08      	cmp	r3, #8
 8006ae8:	d811      	bhi.n	8006b0e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006aee:	4a72      	ldr	r2, [pc, #456]	@ (8006cb8 <HAL_SPI_Init+0x23c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d009      	beq.n	8006b08 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a70      	ldr	r2, [pc, #448]	@ (8006cbc <HAL_SPI_Init+0x240>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d004      	beq.n	8006b08 <HAL_SPI_Init+0x8c>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a6f      	ldr	r2, [pc, #444]	@ (8006cc0 <HAL_SPI_Init+0x244>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d104      	bne.n	8006b12 <HAL_SPI_Init+0x96>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b10      	cmp	r3, #16
 8006b0c:	d901      	bls.n	8006b12 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e0cd      	b.n	8006cae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fa f9de 	bl	8000ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006b4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b58:	d119      	bne.n	8006b8e <HAL_SPI_Init+0x112>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b62:	d103      	bne.n	8006b6c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10c      	bne.n	8006b8e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b7c:	d107      	bne.n	8006b8e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00f      	beq.n	8006bba <HAL_SPI_Init+0x13e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b06      	cmp	r3, #6
 8006ba0:	d90b      	bls.n	8006bba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	e007      	b.n	8006bca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006bc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69da      	ldr	r2, [r3, #28]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bdc:	ea42 0103 	orr.w	r1, r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	431a      	orrs	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c2a:	ea42 0103 	orr.w	r1, r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d113      	bne.n	8006c6a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c54:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c68:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0201 	bic.w	r2, r2, #1
 8006c78:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	40013000 	.word	0x40013000
 8006cbc:	40003800 	.word	0x40003800
 8006cc0:	40003c00 	.word	0x40003c00

08006cc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd0:	095b      	lsrs	r3, r3, #5
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	3307      	adds	r3, #7
 8006ce2:	08db      	lsrs	r3, r3, #3
 8006ce4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	fb02 f303 	mul.w	r3, r2, r3
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e049      	b.n	8006da0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d106      	bne.n	8006d26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f841 	bl	8006da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3304      	adds	r3, #4
 8006d36:	4619      	mov	r1, r3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	f000 f9e7 	bl	800710c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d001      	beq.n	8006dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e054      	b.n	8006e7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a26      	ldr	r2, [pc, #152]	@ (8006e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d022      	beq.n	8006e3c <HAL_TIM_Base_Start_IT+0x80>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dfe:	d01d      	beq.n	8006e3c <HAL_TIM_Base_Start_IT+0x80>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a22      	ldr	r2, [pc, #136]	@ (8006e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d018      	beq.n	8006e3c <HAL_TIM_Base_Start_IT+0x80>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a21      	ldr	r2, [pc, #132]	@ (8006e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d013      	beq.n	8006e3c <HAL_TIM_Base_Start_IT+0x80>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a1f      	ldr	r2, [pc, #124]	@ (8006e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00e      	beq.n	8006e3c <HAL_TIM_Base_Start_IT+0x80>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1e      	ldr	r2, [pc, #120]	@ (8006e9c <HAL_TIM_Base_Start_IT+0xe0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d009      	beq.n	8006e3c <HAL_TIM_Base_Start_IT+0x80>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea0 <HAL_TIM_Base_Start_IT+0xe4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d004      	beq.n	8006e3c <HAL_TIM_Base_Start_IT+0x80>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d115      	bne.n	8006e68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689a      	ldr	r2, [r3, #8]
 8006e42:	4b19      	ldr	r3, [pc, #100]	@ (8006ea8 <HAL_TIM_Base_Start_IT+0xec>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b06      	cmp	r3, #6
 8006e4c:	d015      	beq.n	8006e7a <HAL_TIM_Base_Start_IT+0xbe>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e54:	d011      	beq.n	8006e7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0201 	orr.w	r2, r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e66:	e008      	b.n	8006e7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0201 	orr.w	r2, r2, #1
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	e000      	b.n	8006e7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40010000 	.word	0x40010000
 8006e90:	40000400 	.word	0x40000400
 8006e94:	40000800 	.word	0x40000800
 8006e98:	40000c00 	.word	0x40000c00
 8006e9c:	40010400 	.word	0x40010400
 8006ea0:	40001800 	.word	0x40001800
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	00010007 	.word	0x00010007

08006eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d020      	beq.n	8006f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01b      	beq.n	8006f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0202 	mvn.w	r2, #2
 8006ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f8e9 	bl	80070ce <HAL_TIM_IC_CaptureCallback>
 8006efc:	e005      	b.n	8006f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f8db 	bl	80070ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f8ec 	bl	80070e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d020      	beq.n	8006f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01b      	beq.n	8006f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0204 	mvn.w	r2, #4
 8006f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f8c3 	bl	80070ce <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f8b5 	bl	80070ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f8c6 	bl	80070e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 0308 	and.w	r3, r3, #8
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d020      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f003 0308 	and.w	r3, r3, #8
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01b      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0208 	mvn.w	r2, #8
 8006f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f89d 	bl	80070ce <HAL_TIM_IC_CaptureCallback>
 8006f94:	e005      	b.n	8006fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f88f 	bl	80070ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f8a0 	bl	80070e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 0310 	and.w	r3, r3, #16
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d020      	beq.n	8006ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01b      	beq.n	8006ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0210 	mvn.w	r2, #16
 8006fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2208      	movs	r2, #8
 8006fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f877 	bl	80070ce <HAL_TIM_IC_CaptureCallback>
 8006fe0:	e005      	b.n	8006fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f869 	bl	80070ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f87a 	bl	80070e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00c      	beq.n	8007018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0201 	mvn.w	r2, #1
 8007010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7f9 fefa 	bl	8000e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00c      	beq.n	8007046 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007032:	2b00      	cmp	r3, #0
 8007034:	d007      	beq.n	8007046 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800703e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f90d 	bl	8007260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00c      	beq.n	800706a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f905 	bl	8007274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00c      	beq.n	800708e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800707a:	2b00      	cmp	r3, #0
 800707c:	d007      	beq.n	800708e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f834 	bl	80070f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00c      	beq.n	80070b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d007      	beq.n	80070b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f06f 0220 	mvn.w	r2, #32
 80070aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f8cd 	bl	800724c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
	...

0800710c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a43      	ldr	r2, [pc, #268]	@ (800722c <TIM_Base_SetConfig+0x120>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d013      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800712a:	d00f      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a40      	ldr	r2, [pc, #256]	@ (8007230 <TIM_Base_SetConfig+0x124>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00b      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a3f      	ldr	r2, [pc, #252]	@ (8007234 <TIM_Base_SetConfig+0x128>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d007      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a3e      	ldr	r2, [pc, #248]	@ (8007238 <TIM_Base_SetConfig+0x12c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a3d      	ldr	r2, [pc, #244]	@ (800723c <TIM_Base_SetConfig+0x130>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d108      	bne.n	800715e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a32      	ldr	r2, [pc, #200]	@ (800722c <TIM_Base_SetConfig+0x120>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d01f      	beq.n	80071a6 <TIM_Base_SetConfig+0x9a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800716c:	d01b      	beq.n	80071a6 <TIM_Base_SetConfig+0x9a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a2f      	ldr	r2, [pc, #188]	@ (8007230 <TIM_Base_SetConfig+0x124>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d017      	beq.n	80071a6 <TIM_Base_SetConfig+0x9a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a2e      	ldr	r2, [pc, #184]	@ (8007234 <TIM_Base_SetConfig+0x128>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d013      	beq.n	80071a6 <TIM_Base_SetConfig+0x9a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a2d      	ldr	r2, [pc, #180]	@ (8007238 <TIM_Base_SetConfig+0x12c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00f      	beq.n	80071a6 <TIM_Base_SetConfig+0x9a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a2c      	ldr	r2, [pc, #176]	@ (800723c <TIM_Base_SetConfig+0x130>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00b      	beq.n	80071a6 <TIM_Base_SetConfig+0x9a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2b      	ldr	r2, [pc, #172]	@ (8007240 <TIM_Base_SetConfig+0x134>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d007      	beq.n	80071a6 <TIM_Base_SetConfig+0x9a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2a      	ldr	r2, [pc, #168]	@ (8007244 <TIM_Base_SetConfig+0x138>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d003      	beq.n	80071a6 <TIM_Base_SetConfig+0x9a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a29      	ldr	r2, [pc, #164]	@ (8007248 <TIM_Base_SetConfig+0x13c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d108      	bne.n	80071b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a14      	ldr	r2, [pc, #80]	@ (800722c <TIM_Base_SetConfig+0x120>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d00f      	beq.n	80071fe <TIM_Base_SetConfig+0xf2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a16      	ldr	r2, [pc, #88]	@ (800723c <TIM_Base_SetConfig+0x130>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00b      	beq.n	80071fe <TIM_Base_SetConfig+0xf2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a15      	ldr	r2, [pc, #84]	@ (8007240 <TIM_Base_SetConfig+0x134>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d007      	beq.n	80071fe <TIM_Base_SetConfig+0xf2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a14      	ldr	r2, [pc, #80]	@ (8007244 <TIM_Base_SetConfig+0x138>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d003      	beq.n	80071fe <TIM_Base_SetConfig+0xf2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a13      	ldr	r2, [pc, #76]	@ (8007248 <TIM_Base_SetConfig+0x13c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d103      	bne.n	8007206 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	691a      	ldr	r2, [r3, #16]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f043 0204 	orr.w	r2, r3, #4
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	601a      	str	r2, [r3, #0]
}
 800721e:	bf00      	nop
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	40010000 	.word	0x40010000
 8007230:	40000400 	.word	0x40000400
 8007234:	40000800 	.word	0x40000800
 8007238:	40000c00 	.word	0x40000c00
 800723c:	40010400 	.word	0x40010400
 8007240:	40014000 	.word	0x40014000
 8007244:	40014400 	.word	0x40014400
 8007248:	40014800 	.word	0x40014800

0800724c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e042      	b.n	8007320 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d106      	bne.n	80072b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7fa f83d 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2224      	movs	r2, #36	@ 0x24
 80072b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 0201 	bic.w	r2, r2, #1
 80072c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fe24 	bl	8007f20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f8b9 	bl	8007450 <UART_SetConfig>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e01b      	b.n	8007320 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0201 	orr.w	r2, r2, #1
 8007316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fea3 	bl	8008064 <UART_CheckIdleState>
 800731e:	4603      	mov	r3, r0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007328:	b480      	push	{r7}
 800732a:	b091      	sub	sp, #68	@ 0x44
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	4613      	mov	r3, r2
 8007334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733c:	2b20      	cmp	r3, #32
 800733e:	d178      	bne.n	8007432 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <HAL_UART_Transmit_IT+0x24>
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e071      	b.n	8007434 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	88fa      	ldrh	r2, [r7, #6]
 800735a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	88fa      	ldrh	r2, [r7, #6]
 8007362:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2221      	movs	r2, #33	@ 0x21
 8007378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007384:	d12a      	bne.n	80073dc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800738e:	d107      	bne.n	80073a0 <HAL_UART_Transmit_IT+0x78>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d103      	bne.n	80073a0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4a29      	ldr	r2, [pc, #164]	@ (8007440 <HAL_UART_Transmit_IT+0x118>)
 800739c:	679a      	str	r2, [r3, #120]	@ 0x78
 800739e:	e002      	b.n	80073a6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a28      	ldr	r2, [pc, #160]	@ (8007444 <HAL_UART_Transmit_IT+0x11c>)
 80073a4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3308      	adds	r3, #8
 80073ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80073bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3308      	adds	r3, #8
 80073c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073c6:	637a      	str	r2, [r7, #52]	@ 0x34
 80073c8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e5      	bne.n	80073a6 <HAL_UART_Transmit_IT+0x7e>
 80073da:	e028      	b.n	800742e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073e4:	d107      	bne.n	80073f6 <HAL_UART_Transmit_IT+0xce>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4a15      	ldr	r2, [pc, #84]	@ (8007448 <HAL_UART_Transmit_IT+0x120>)
 80073f2:	679a      	str	r2, [r3, #120]	@ 0x78
 80073f4:	e002      	b.n	80073fc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a14      	ldr	r2, [pc, #80]	@ (800744c <HAL_UART_Transmit_IT+0x124>)
 80073fa:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	613b      	str	r3, [r7, #16]
   return(result);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741a:	623b      	str	r3, [r7, #32]
 800741c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	69f9      	ldr	r1, [r7, #28]
 8007420:	6a3a      	ldr	r2, [r7, #32]
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	61bb      	str	r3, [r7, #24]
   return(result);
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e6      	bne.n	80073fc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	e000      	b.n	8007434 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007432:	2302      	movs	r3, #2
  }
}
 8007434:	4618      	mov	r0, r3
 8007436:	3744      	adds	r7, #68	@ 0x44
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	080085bb 	.word	0x080085bb
 8007444:	080084db 	.word	0x080084db
 8007448:	08008419 	.word	0x08008419
 800744c:	08008361 	.word	0x08008361

08007450 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007454:	b092      	sub	sp, #72	@ 0x48
 8007456:	af00      	add	r7, sp, #0
 8007458:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	431a      	orrs	r2, r3
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	431a      	orrs	r2, r3
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	4313      	orrs	r3, r2
 8007476:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4bbe      	ldr	r3, [pc, #760]	@ (8007778 <UART_SetConfig+0x328>)
 8007480:	4013      	ands	r3, r2
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	6812      	ldr	r2, [r2, #0]
 8007486:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007488:	430b      	orrs	r3, r1
 800748a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4ab3      	ldr	r2, [pc, #716]	@ (800777c <UART_SetConfig+0x32c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074b8:	4313      	orrs	r3, r2
 80074ba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	4baf      	ldr	r3, [pc, #700]	@ (8007780 <UART_SetConfig+0x330>)
 80074c4:	4013      	ands	r3, r2
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	6812      	ldr	r2, [r2, #0]
 80074ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074cc:	430b      	orrs	r3, r1
 80074ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d6:	f023 010f 	bic.w	r1, r3, #15
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4aa6      	ldr	r2, [pc, #664]	@ (8007784 <UART_SetConfig+0x334>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d177      	bne.n	80075e0 <UART_SetConfig+0x190>
 80074f0:	4ba5      	ldr	r3, [pc, #660]	@ (8007788 <UART_SetConfig+0x338>)
 80074f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074f8:	2b28      	cmp	r3, #40	@ 0x28
 80074fa:	d86d      	bhi.n	80075d8 <UART_SetConfig+0x188>
 80074fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007504 <UART_SetConfig+0xb4>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	080075a9 	.word	0x080075a9
 8007508:	080075d9 	.word	0x080075d9
 800750c:	080075d9 	.word	0x080075d9
 8007510:	080075d9 	.word	0x080075d9
 8007514:	080075d9 	.word	0x080075d9
 8007518:	080075d9 	.word	0x080075d9
 800751c:	080075d9 	.word	0x080075d9
 8007520:	080075d9 	.word	0x080075d9
 8007524:	080075b1 	.word	0x080075b1
 8007528:	080075d9 	.word	0x080075d9
 800752c:	080075d9 	.word	0x080075d9
 8007530:	080075d9 	.word	0x080075d9
 8007534:	080075d9 	.word	0x080075d9
 8007538:	080075d9 	.word	0x080075d9
 800753c:	080075d9 	.word	0x080075d9
 8007540:	080075d9 	.word	0x080075d9
 8007544:	080075b9 	.word	0x080075b9
 8007548:	080075d9 	.word	0x080075d9
 800754c:	080075d9 	.word	0x080075d9
 8007550:	080075d9 	.word	0x080075d9
 8007554:	080075d9 	.word	0x080075d9
 8007558:	080075d9 	.word	0x080075d9
 800755c:	080075d9 	.word	0x080075d9
 8007560:	080075d9 	.word	0x080075d9
 8007564:	080075c1 	.word	0x080075c1
 8007568:	080075d9 	.word	0x080075d9
 800756c:	080075d9 	.word	0x080075d9
 8007570:	080075d9 	.word	0x080075d9
 8007574:	080075d9 	.word	0x080075d9
 8007578:	080075d9 	.word	0x080075d9
 800757c:	080075d9 	.word	0x080075d9
 8007580:	080075d9 	.word	0x080075d9
 8007584:	080075c9 	.word	0x080075c9
 8007588:	080075d9 	.word	0x080075d9
 800758c:	080075d9 	.word	0x080075d9
 8007590:	080075d9 	.word	0x080075d9
 8007594:	080075d9 	.word	0x080075d9
 8007598:	080075d9 	.word	0x080075d9
 800759c:	080075d9 	.word	0x080075d9
 80075a0:	080075d9 	.word	0x080075d9
 80075a4:	080075d1 	.word	0x080075d1
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e222      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80075b0:	2304      	movs	r3, #4
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e21e      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80075b8:	2308      	movs	r3, #8
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e21a      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80075c0:	2310      	movs	r3, #16
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	e216      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80075c8:	2320      	movs	r3, #32
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ce:	e212      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80075d0:	2340      	movs	r3, #64	@ 0x40
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d6:	e20e      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80075d8:	2380      	movs	r3, #128	@ 0x80
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075de:	e20a      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a69      	ldr	r2, [pc, #420]	@ (800778c <UART_SetConfig+0x33c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d130      	bne.n	800764c <UART_SetConfig+0x1fc>
 80075ea:	4b67      	ldr	r3, [pc, #412]	@ (8007788 <UART_SetConfig+0x338>)
 80075ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ee:	f003 0307 	and.w	r3, r3, #7
 80075f2:	2b05      	cmp	r3, #5
 80075f4:	d826      	bhi.n	8007644 <UART_SetConfig+0x1f4>
 80075f6:	a201      	add	r2, pc, #4	@ (adr r2, 80075fc <UART_SetConfig+0x1ac>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	08007615 	.word	0x08007615
 8007600:	0800761d 	.word	0x0800761d
 8007604:	08007625 	.word	0x08007625
 8007608:	0800762d 	.word	0x0800762d
 800760c:	08007635 	.word	0x08007635
 8007610:	0800763d 	.word	0x0800763d
 8007614:	2300      	movs	r3, #0
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e1ec      	b.n	80079f6 <UART_SetConfig+0x5a6>
 800761c:	2304      	movs	r3, #4
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e1e8      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007624:	2308      	movs	r3, #8
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e1e4      	b.n	80079f6 <UART_SetConfig+0x5a6>
 800762c:	2310      	movs	r3, #16
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007632:	e1e0      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007634:	2320      	movs	r3, #32
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763a:	e1dc      	b.n	80079f6 <UART_SetConfig+0x5a6>
 800763c:	2340      	movs	r3, #64	@ 0x40
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007642:	e1d8      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007644:	2380      	movs	r3, #128	@ 0x80
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764a:	e1d4      	b.n	80079f6 <UART_SetConfig+0x5a6>
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a4f      	ldr	r2, [pc, #316]	@ (8007790 <UART_SetConfig+0x340>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d130      	bne.n	80076b8 <UART_SetConfig+0x268>
 8007656:	4b4c      	ldr	r3, [pc, #304]	@ (8007788 <UART_SetConfig+0x338>)
 8007658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	2b05      	cmp	r3, #5
 8007660:	d826      	bhi.n	80076b0 <UART_SetConfig+0x260>
 8007662:	a201      	add	r2, pc, #4	@ (adr r2, 8007668 <UART_SetConfig+0x218>)
 8007664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007668:	08007681 	.word	0x08007681
 800766c:	08007689 	.word	0x08007689
 8007670:	08007691 	.word	0x08007691
 8007674:	08007699 	.word	0x08007699
 8007678:	080076a1 	.word	0x080076a1
 800767c:	080076a9 	.word	0x080076a9
 8007680:	2300      	movs	r3, #0
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007686:	e1b6      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007688:	2304      	movs	r3, #4
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768e:	e1b2      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007690:	2308      	movs	r3, #8
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007696:	e1ae      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007698:	2310      	movs	r3, #16
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769e:	e1aa      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80076a0:	2320      	movs	r3, #32
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a6:	e1a6      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80076a8:	2340      	movs	r3, #64	@ 0x40
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ae:	e1a2      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80076b0:	2380      	movs	r3, #128	@ 0x80
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b6:	e19e      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a35      	ldr	r2, [pc, #212]	@ (8007794 <UART_SetConfig+0x344>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d130      	bne.n	8007724 <UART_SetConfig+0x2d4>
 80076c2:	4b31      	ldr	r3, [pc, #196]	@ (8007788 <UART_SetConfig+0x338>)
 80076c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c6:	f003 0307 	and.w	r3, r3, #7
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d826      	bhi.n	800771c <UART_SetConfig+0x2cc>
 80076ce:	a201      	add	r2, pc, #4	@ (adr r2, 80076d4 <UART_SetConfig+0x284>)
 80076d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d4:	080076ed 	.word	0x080076ed
 80076d8:	080076f5 	.word	0x080076f5
 80076dc:	080076fd 	.word	0x080076fd
 80076e0:	08007705 	.word	0x08007705
 80076e4:	0800770d 	.word	0x0800770d
 80076e8:	08007715 	.word	0x08007715
 80076ec:	2300      	movs	r3, #0
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f2:	e180      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80076f4:	2304      	movs	r3, #4
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fa:	e17c      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80076fc:	2308      	movs	r3, #8
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e178      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007704:	2310      	movs	r3, #16
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770a:	e174      	b.n	80079f6 <UART_SetConfig+0x5a6>
 800770c:	2320      	movs	r3, #32
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007712:	e170      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007714:	2340      	movs	r3, #64	@ 0x40
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771a:	e16c      	b.n	80079f6 <UART_SetConfig+0x5a6>
 800771c:	2380      	movs	r3, #128	@ 0x80
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007722:	e168      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1b      	ldr	r2, [pc, #108]	@ (8007798 <UART_SetConfig+0x348>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d142      	bne.n	80077b4 <UART_SetConfig+0x364>
 800772e:	4b16      	ldr	r3, [pc, #88]	@ (8007788 <UART_SetConfig+0x338>)
 8007730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	2b05      	cmp	r3, #5
 8007738:	d838      	bhi.n	80077ac <UART_SetConfig+0x35c>
 800773a:	a201      	add	r2, pc, #4	@ (adr r2, 8007740 <UART_SetConfig+0x2f0>)
 800773c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007740:	08007759 	.word	0x08007759
 8007744:	08007761 	.word	0x08007761
 8007748:	08007769 	.word	0x08007769
 800774c:	08007771 	.word	0x08007771
 8007750:	0800779d 	.word	0x0800779d
 8007754:	080077a5 	.word	0x080077a5
 8007758:	2300      	movs	r3, #0
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775e:	e14a      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007760:	2304      	movs	r3, #4
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007766:	e146      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007768:	2308      	movs	r3, #8
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776e:	e142      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007770:	2310      	movs	r3, #16
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007776:	e13e      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007778:	cfff69f3 	.word	0xcfff69f3
 800777c:	58000c00 	.word	0x58000c00
 8007780:	11fff4ff 	.word	0x11fff4ff
 8007784:	40011000 	.word	0x40011000
 8007788:	58024400 	.word	0x58024400
 800778c:	40004400 	.word	0x40004400
 8007790:	40004800 	.word	0x40004800
 8007794:	40004c00 	.word	0x40004c00
 8007798:	40005000 	.word	0x40005000
 800779c:	2320      	movs	r3, #32
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a2:	e128      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80077a4:	2340      	movs	r3, #64	@ 0x40
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077aa:	e124      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80077ac:	2380      	movs	r3, #128	@ 0x80
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b2:	e120      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4acb      	ldr	r2, [pc, #812]	@ (8007ae8 <UART_SetConfig+0x698>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d176      	bne.n	80078ac <UART_SetConfig+0x45c>
 80077be:	4bcb      	ldr	r3, [pc, #812]	@ (8007aec <UART_SetConfig+0x69c>)
 80077c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077c6:	2b28      	cmp	r3, #40	@ 0x28
 80077c8:	d86c      	bhi.n	80078a4 <UART_SetConfig+0x454>
 80077ca:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <UART_SetConfig+0x380>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	08007875 	.word	0x08007875
 80077d4:	080078a5 	.word	0x080078a5
 80077d8:	080078a5 	.word	0x080078a5
 80077dc:	080078a5 	.word	0x080078a5
 80077e0:	080078a5 	.word	0x080078a5
 80077e4:	080078a5 	.word	0x080078a5
 80077e8:	080078a5 	.word	0x080078a5
 80077ec:	080078a5 	.word	0x080078a5
 80077f0:	0800787d 	.word	0x0800787d
 80077f4:	080078a5 	.word	0x080078a5
 80077f8:	080078a5 	.word	0x080078a5
 80077fc:	080078a5 	.word	0x080078a5
 8007800:	080078a5 	.word	0x080078a5
 8007804:	080078a5 	.word	0x080078a5
 8007808:	080078a5 	.word	0x080078a5
 800780c:	080078a5 	.word	0x080078a5
 8007810:	08007885 	.word	0x08007885
 8007814:	080078a5 	.word	0x080078a5
 8007818:	080078a5 	.word	0x080078a5
 800781c:	080078a5 	.word	0x080078a5
 8007820:	080078a5 	.word	0x080078a5
 8007824:	080078a5 	.word	0x080078a5
 8007828:	080078a5 	.word	0x080078a5
 800782c:	080078a5 	.word	0x080078a5
 8007830:	0800788d 	.word	0x0800788d
 8007834:	080078a5 	.word	0x080078a5
 8007838:	080078a5 	.word	0x080078a5
 800783c:	080078a5 	.word	0x080078a5
 8007840:	080078a5 	.word	0x080078a5
 8007844:	080078a5 	.word	0x080078a5
 8007848:	080078a5 	.word	0x080078a5
 800784c:	080078a5 	.word	0x080078a5
 8007850:	08007895 	.word	0x08007895
 8007854:	080078a5 	.word	0x080078a5
 8007858:	080078a5 	.word	0x080078a5
 800785c:	080078a5 	.word	0x080078a5
 8007860:	080078a5 	.word	0x080078a5
 8007864:	080078a5 	.word	0x080078a5
 8007868:	080078a5 	.word	0x080078a5
 800786c:	080078a5 	.word	0x080078a5
 8007870:	0800789d 	.word	0x0800789d
 8007874:	2301      	movs	r3, #1
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e0bc      	b.n	80079f6 <UART_SetConfig+0x5a6>
 800787c:	2304      	movs	r3, #4
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e0b8      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007884:	2308      	movs	r3, #8
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e0b4      	b.n	80079f6 <UART_SetConfig+0x5a6>
 800788c:	2310      	movs	r3, #16
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e0b0      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007894:	2320      	movs	r3, #32
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e0ac      	b.n	80079f6 <UART_SetConfig+0x5a6>
 800789c:	2340      	movs	r3, #64	@ 0x40
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e0a8      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80078a4:	2380      	movs	r3, #128	@ 0x80
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e0a4      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a8f      	ldr	r2, [pc, #572]	@ (8007af0 <UART_SetConfig+0x6a0>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d130      	bne.n	8007918 <UART_SetConfig+0x4c8>
 80078b6:	4b8d      	ldr	r3, [pc, #564]	@ (8007aec <UART_SetConfig+0x69c>)
 80078b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	2b05      	cmp	r3, #5
 80078c0:	d826      	bhi.n	8007910 <UART_SetConfig+0x4c0>
 80078c2:	a201      	add	r2, pc, #4	@ (adr r2, 80078c8 <UART_SetConfig+0x478>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	080078e1 	.word	0x080078e1
 80078cc:	080078e9 	.word	0x080078e9
 80078d0:	080078f1 	.word	0x080078f1
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	08007901 	.word	0x08007901
 80078dc:	08007909 	.word	0x08007909
 80078e0:	2300      	movs	r3, #0
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e6:	e086      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80078e8:	2304      	movs	r3, #4
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e082      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80078f0:	2308      	movs	r3, #8
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e07e      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80078f8:	2310      	movs	r3, #16
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e07a      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007900:	2320      	movs	r3, #32
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e076      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007908:	2340      	movs	r3, #64	@ 0x40
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e072      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007910:	2380      	movs	r3, #128	@ 0x80
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e06e      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a75      	ldr	r2, [pc, #468]	@ (8007af4 <UART_SetConfig+0x6a4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d130      	bne.n	8007984 <UART_SetConfig+0x534>
 8007922:	4b72      	ldr	r3, [pc, #456]	@ (8007aec <UART_SetConfig+0x69c>)
 8007924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007926:	f003 0307 	and.w	r3, r3, #7
 800792a:	2b05      	cmp	r3, #5
 800792c:	d826      	bhi.n	800797c <UART_SetConfig+0x52c>
 800792e:	a201      	add	r2, pc, #4	@ (adr r2, 8007934 <UART_SetConfig+0x4e4>)
 8007930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007934:	0800794d 	.word	0x0800794d
 8007938:	08007955 	.word	0x08007955
 800793c:	0800795d 	.word	0x0800795d
 8007940:	08007965 	.word	0x08007965
 8007944:	0800796d 	.word	0x0800796d
 8007948:	08007975 	.word	0x08007975
 800794c:	2300      	movs	r3, #0
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007952:	e050      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007954:	2304      	movs	r3, #4
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e04c      	b.n	80079f6 <UART_SetConfig+0x5a6>
 800795c:	2308      	movs	r3, #8
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e048      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007964:	2310      	movs	r3, #16
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e044      	b.n	80079f6 <UART_SetConfig+0x5a6>
 800796c:	2320      	movs	r3, #32
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e040      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007974:	2340      	movs	r3, #64	@ 0x40
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e03c      	b.n	80079f6 <UART_SetConfig+0x5a6>
 800797c:	2380      	movs	r3, #128	@ 0x80
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e038      	b.n	80079f6 <UART_SetConfig+0x5a6>
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a5b      	ldr	r2, [pc, #364]	@ (8007af8 <UART_SetConfig+0x6a8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d130      	bne.n	80079f0 <UART_SetConfig+0x5a0>
 800798e:	4b57      	ldr	r3, [pc, #348]	@ (8007aec <UART_SetConfig+0x69c>)
 8007990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	2b05      	cmp	r3, #5
 8007998:	d826      	bhi.n	80079e8 <UART_SetConfig+0x598>
 800799a:	a201      	add	r2, pc, #4	@ (adr r2, 80079a0 <UART_SetConfig+0x550>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079b9 	.word	0x080079b9
 80079a4:	080079c1 	.word	0x080079c1
 80079a8:	080079c9 	.word	0x080079c9
 80079ac:	080079d1 	.word	0x080079d1
 80079b0:	080079d9 	.word	0x080079d9
 80079b4:	080079e1 	.word	0x080079e1
 80079b8:	2302      	movs	r3, #2
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079be:	e01a      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80079c0:	2304      	movs	r3, #4
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c6:	e016      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80079c8:	2308      	movs	r3, #8
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ce:	e012      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80079d0:	2310      	movs	r3, #16
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d6:	e00e      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80079d8:	2320      	movs	r3, #32
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e00a      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80079e0:	2340      	movs	r3, #64	@ 0x40
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e006      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80079e8:	2380      	movs	r3, #128	@ 0x80
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e002      	b.n	80079f6 <UART_SetConfig+0x5a6>
 80079f0:	2380      	movs	r3, #128	@ 0x80
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a3f      	ldr	r2, [pc, #252]	@ (8007af8 <UART_SetConfig+0x6a8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	f040 80f8 	bne.w	8007bf2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	dc46      	bgt.n	8007a98 <UART_SetConfig+0x648>
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	f2c0 8082 	blt.w	8007b14 <UART_SetConfig+0x6c4>
 8007a10:	3b02      	subs	r3, #2
 8007a12:	2b1e      	cmp	r3, #30
 8007a14:	d87e      	bhi.n	8007b14 <UART_SetConfig+0x6c4>
 8007a16:	a201      	add	r2, pc, #4	@ (adr r2, 8007a1c <UART_SetConfig+0x5cc>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a9f 	.word	0x08007a9f
 8007a20:	08007b15 	.word	0x08007b15
 8007a24:	08007aa7 	.word	0x08007aa7
 8007a28:	08007b15 	.word	0x08007b15
 8007a2c:	08007b15 	.word	0x08007b15
 8007a30:	08007b15 	.word	0x08007b15
 8007a34:	08007ab7 	.word	0x08007ab7
 8007a38:	08007b15 	.word	0x08007b15
 8007a3c:	08007b15 	.word	0x08007b15
 8007a40:	08007b15 	.word	0x08007b15
 8007a44:	08007b15 	.word	0x08007b15
 8007a48:	08007b15 	.word	0x08007b15
 8007a4c:	08007b15 	.word	0x08007b15
 8007a50:	08007b15 	.word	0x08007b15
 8007a54:	08007ac7 	.word	0x08007ac7
 8007a58:	08007b15 	.word	0x08007b15
 8007a5c:	08007b15 	.word	0x08007b15
 8007a60:	08007b15 	.word	0x08007b15
 8007a64:	08007b15 	.word	0x08007b15
 8007a68:	08007b15 	.word	0x08007b15
 8007a6c:	08007b15 	.word	0x08007b15
 8007a70:	08007b15 	.word	0x08007b15
 8007a74:	08007b15 	.word	0x08007b15
 8007a78:	08007b15 	.word	0x08007b15
 8007a7c:	08007b15 	.word	0x08007b15
 8007a80:	08007b15 	.word	0x08007b15
 8007a84:	08007b15 	.word	0x08007b15
 8007a88:	08007b15 	.word	0x08007b15
 8007a8c:	08007b15 	.word	0x08007b15
 8007a90:	08007b15 	.word	0x08007b15
 8007a94:	08007b07 	.word	0x08007b07
 8007a98:	2b40      	cmp	r3, #64	@ 0x40
 8007a9a:	d037      	beq.n	8007b0c <UART_SetConfig+0x6bc>
 8007a9c:	e03a      	b.n	8007b14 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a9e:	f7fe fa79 	bl	8005f94 <HAL_RCCEx_GetD3PCLK1Freq>
 8007aa2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007aa4:	e03c      	b.n	8007b20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fa88 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab4:	e034      	b.n	8007b20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ab6:	f107 0318 	add.w	r3, r7, #24
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fe fbd4 	bl	8006268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ac4:	e02c      	b.n	8007b20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ac6:	4b09      	ldr	r3, [pc, #36]	@ (8007aec <UART_SetConfig+0x69c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d016      	beq.n	8007b00 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ad2:	4b06      	ldr	r3, [pc, #24]	@ (8007aec <UART_SetConfig+0x69c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	08db      	lsrs	r3, r3, #3
 8007ad8:	f003 0303 	and.w	r3, r3, #3
 8007adc:	4a07      	ldr	r2, [pc, #28]	@ (8007afc <UART_SetConfig+0x6ac>)
 8007ade:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ae4:	e01c      	b.n	8007b20 <UART_SetConfig+0x6d0>
 8007ae6:	bf00      	nop
 8007ae8:	40011400 	.word	0x40011400
 8007aec:	58024400 	.word	0x58024400
 8007af0:	40007800 	.word	0x40007800
 8007af4:	40007c00 	.word	0x40007c00
 8007af8:	58000c00 	.word	0x58000c00
 8007afc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007b00:	4b9d      	ldr	r3, [pc, #628]	@ (8007d78 <UART_SetConfig+0x928>)
 8007b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b04:	e00c      	b.n	8007b20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b06:	4b9d      	ldr	r3, [pc, #628]	@ (8007d7c <UART_SetConfig+0x92c>)
 8007b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b0a:	e009      	b.n	8007b20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b12:	e005      	b.n	8007b20 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 81de 	beq.w	8007ee4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b2c:	4a94      	ldr	r2, [pc, #592]	@ (8007d80 <UART_SetConfig+0x930>)
 8007b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b32:	461a      	mov	r2, r3
 8007b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b36:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b3a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	4613      	mov	r3, r2
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	4413      	add	r3, r2
 8007b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d305      	bcc.n	8007b58 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d903      	bls.n	8007b60 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b5e:	e1c1      	b.n	8007ee4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b62:	2200      	movs	r2, #0
 8007b64:	60bb      	str	r3, [r7, #8]
 8007b66:	60fa      	str	r2, [r7, #12]
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6c:	4a84      	ldr	r2, [pc, #528]	@ (8007d80 <UART_SetConfig+0x930>)
 8007b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	2200      	movs	r2, #0
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b82:	f7f8 fbfd 	bl	8000380 <__aeabi_uldivmod>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	f04f 0200 	mov.w	r2, #0
 8007b92:	f04f 0300 	mov.w	r3, #0
 8007b96:	020b      	lsls	r3, r1, #8
 8007b98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b9c:	0202      	lsls	r2, r0, #8
 8007b9e:	6979      	ldr	r1, [r7, #20]
 8007ba0:	6849      	ldr	r1, [r1, #4]
 8007ba2:	0849      	lsrs	r1, r1, #1
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	4605      	mov	r5, r0
 8007baa:	eb12 0804 	adds.w	r8, r2, r4
 8007bae:	eb43 0905 	adc.w	r9, r3, r5
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	469a      	mov	sl, r3
 8007bba:	4693      	mov	fp, r2
 8007bbc:	4652      	mov	r2, sl
 8007bbe:	465b      	mov	r3, fp
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	f7f8 fbdc 	bl	8000380 <__aeabi_uldivmod>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4613      	mov	r3, r2
 8007bce:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bd6:	d308      	bcc.n	8007bea <UART_SetConfig+0x79a>
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bde:	d204      	bcs.n	8007bea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007be6:	60da      	str	r2, [r3, #12]
 8007be8:	e17c      	b.n	8007ee4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007bf0:	e178      	b.n	8007ee4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bfa:	f040 80c5 	bne.w	8007d88 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007bfe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	dc48      	bgt.n	8007c98 <UART_SetConfig+0x848>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	db7b      	blt.n	8007d02 <UART_SetConfig+0x8b2>
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	d879      	bhi.n	8007d02 <UART_SetConfig+0x8b2>
 8007c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c14 <UART_SetConfig+0x7c4>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c9f 	.word	0x08007c9f
 8007c18:	08007ca7 	.word	0x08007ca7
 8007c1c:	08007d03 	.word	0x08007d03
 8007c20:	08007d03 	.word	0x08007d03
 8007c24:	08007caf 	.word	0x08007caf
 8007c28:	08007d03 	.word	0x08007d03
 8007c2c:	08007d03 	.word	0x08007d03
 8007c30:	08007d03 	.word	0x08007d03
 8007c34:	08007cbf 	.word	0x08007cbf
 8007c38:	08007d03 	.word	0x08007d03
 8007c3c:	08007d03 	.word	0x08007d03
 8007c40:	08007d03 	.word	0x08007d03
 8007c44:	08007d03 	.word	0x08007d03
 8007c48:	08007d03 	.word	0x08007d03
 8007c4c:	08007d03 	.word	0x08007d03
 8007c50:	08007d03 	.word	0x08007d03
 8007c54:	08007ccf 	.word	0x08007ccf
 8007c58:	08007d03 	.word	0x08007d03
 8007c5c:	08007d03 	.word	0x08007d03
 8007c60:	08007d03 	.word	0x08007d03
 8007c64:	08007d03 	.word	0x08007d03
 8007c68:	08007d03 	.word	0x08007d03
 8007c6c:	08007d03 	.word	0x08007d03
 8007c70:	08007d03 	.word	0x08007d03
 8007c74:	08007d03 	.word	0x08007d03
 8007c78:	08007d03 	.word	0x08007d03
 8007c7c:	08007d03 	.word	0x08007d03
 8007c80:	08007d03 	.word	0x08007d03
 8007c84:	08007d03 	.word	0x08007d03
 8007c88:	08007d03 	.word	0x08007d03
 8007c8c:	08007d03 	.word	0x08007d03
 8007c90:	08007d03 	.word	0x08007d03
 8007c94:	08007cf5 	.word	0x08007cf5
 8007c98:	2b40      	cmp	r3, #64	@ 0x40
 8007c9a:	d02e      	beq.n	8007cfa <UART_SetConfig+0x8aa>
 8007c9c:	e031      	b.n	8007d02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c9e:	f7fc f981 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 8007ca2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ca4:	e033      	b.n	8007d0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ca6:	f7fc f993 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 8007caa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007cac:	e02f      	b.n	8007d0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe f984 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cbc:	e027      	b.n	8007d0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cbe:	f107 0318 	add.w	r3, r7, #24
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fe fad0 	bl	8006268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ccc:	e01f      	b.n	8007d0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cce:	4b2d      	ldr	r3, [pc, #180]	@ (8007d84 <UART_SetConfig+0x934>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d009      	beq.n	8007cee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cda:	4b2a      	ldr	r3, [pc, #168]	@ (8007d84 <UART_SetConfig+0x934>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	08db      	lsrs	r3, r3, #3
 8007ce0:	f003 0303 	and.w	r3, r3, #3
 8007ce4:	4a24      	ldr	r2, [pc, #144]	@ (8007d78 <UART_SetConfig+0x928>)
 8007ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cec:	e00f      	b.n	8007d0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007cee:	4b22      	ldr	r3, [pc, #136]	@ (8007d78 <UART_SetConfig+0x928>)
 8007cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf2:	e00c      	b.n	8007d0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cf4:	4b21      	ldr	r3, [pc, #132]	@ (8007d7c <UART_SetConfig+0x92c>)
 8007cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf8:	e009      	b.n	8007d0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d00:	e005      	b.n	8007d0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 80e7 	beq.w	8007ee4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d1a:	4a19      	ldr	r2, [pc, #100]	@ (8007d80 <UART_SetConfig+0x930>)
 8007d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d20:	461a      	mov	r2, r3
 8007d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d28:	005a      	lsls	r2, r3, #1
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	085b      	lsrs	r3, r3, #1
 8007d30:	441a      	add	r2, r3
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	2b0f      	cmp	r3, #15
 8007d40:	d916      	bls.n	8007d70 <UART_SetConfig+0x920>
 8007d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d48:	d212      	bcs.n	8007d70 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	f023 030f 	bic.w	r3, r3, #15
 8007d52:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	085b      	lsrs	r3, r3, #1
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d62:	4313      	orrs	r3, r2
 8007d64:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d6c:	60da      	str	r2, [r3, #12]
 8007d6e:	e0b9      	b.n	8007ee4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d76:	e0b5      	b.n	8007ee4 <UART_SetConfig+0xa94>
 8007d78:	03d09000 	.word	0x03d09000
 8007d7c:	003d0900 	.word	0x003d0900
 8007d80:	0800ac44 	.word	0x0800ac44
 8007d84:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d8c:	2b20      	cmp	r3, #32
 8007d8e:	dc49      	bgt.n	8007e24 <UART_SetConfig+0x9d4>
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	db7c      	blt.n	8007e8e <UART_SetConfig+0xa3e>
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d87a      	bhi.n	8007e8e <UART_SetConfig+0xa3e>
 8007d98:	a201      	add	r2, pc, #4	@ (adr r2, 8007da0 <UART_SetConfig+0x950>)
 8007d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9e:	bf00      	nop
 8007da0:	08007e2b 	.word	0x08007e2b
 8007da4:	08007e33 	.word	0x08007e33
 8007da8:	08007e8f 	.word	0x08007e8f
 8007dac:	08007e8f 	.word	0x08007e8f
 8007db0:	08007e3b 	.word	0x08007e3b
 8007db4:	08007e8f 	.word	0x08007e8f
 8007db8:	08007e8f 	.word	0x08007e8f
 8007dbc:	08007e8f 	.word	0x08007e8f
 8007dc0:	08007e4b 	.word	0x08007e4b
 8007dc4:	08007e8f 	.word	0x08007e8f
 8007dc8:	08007e8f 	.word	0x08007e8f
 8007dcc:	08007e8f 	.word	0x08007e8f
 8007dd0:	08007e8f 	.word	0x08007e8f
 8007dd4:	08007e8f 	.word	0x08007e8f
 8007dd8:	08007e8f 	.word	0x08007e8f
 8007ddc:	08007e8f 	.word	0x08007e8f
 8007de0:	08007e5b 	.word	0x08007e5b
 8007de4:	08007e8f 	.word	0x08007e8f
 8007de8:	08007e8f 	.word	0x08007e8f
 8007dec:	08007e8f 	.word	0x08007e8f
 8007df0:	08007e8f 	.word	0x08007e8f
 8007df4:	08007e8f 	.word	0x08007e8f
 8007df8:	08007e8f 	.word	0x08007e8f
 8007dfc:	08007e8f 	.word	0x08007e8f
 8007e00:	08007e8f 	.word	0x08007e8f
 8007e04:	08007e8f 	.word	0x08007e8f
 8007e08:	08007e8f 	.word	0x08007e8f
 8007e0c:	08007e8f 	.word	0x08007e8f
 8007e10:	08007e8f 	.word	0x08007e8f
 8007e14:	08007e8f 	.word	0x08007e8f
 8007e18:	08007e8f 	.word	0x08007e8f
 8007e1c:	08007e8f 	.word	0x08007e8f
 8007e20:	08007e81 	.word	0x08007e81
 8007e24:	2b40      	cmp	r3, #64	@ 0x40
 8007e26:	d02e      	beq.n	8007e86 <UART_SetConfig+0xa36>
 8007e28:	e031      	b.n	8007e8e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e2a:	f7fc f8bb 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 8007e2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e30:	e033      	b.n	8007e9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e32:	f7fc f8cd 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 8007e36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e38:	e02f      	b.n	8007e9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe f8be 	bl	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e48:	e027      	b.n	8007e9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e4a:	f107 0318 	add.w	r3, r7, #24
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fe fa0a 	bl	8006268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e58:	e01f      	b.n	8007e9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8007f10 <UART_SetConfig+0xac0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d009      	beq.n	8007e7a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e66:	4b2a      	ldr	r3, [pc, #168]	@ (8007f10 <UART_SetConfig+0xac0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	08db      	lsrs	r3, r3, #3
 8007e6c:	f003 0303 	and.w	r3, r3, #3
 8007e70:	4a28      	ldr	r2, [pc, #160]	@ (8007f14 <UART_SetConfig+0xac4>)
 8007e72:	fa22 f303 	lsr.w	r3, r2, r3
 8007e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e78:	e00f      	b.n	8007e9a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e7a:	4b26      	ldr	r3, [pc, #152]	@ (8007f14 <UART_SetConfig+0xac4>)
 8007e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7e:	e00c      	b.n	8007e9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e80:	4b25      	ldr	r3, [pc, #148]	@ (8007f18 <UART_SetConfig+0xac8>)
 8007e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e84:	e009      	b.n	8007e9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e8c:	e005      	b.n	8007e9a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e98:	bf00      	nop
    }

    if (pclk != 0U)
 8007e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d021      	beq.n	8007ee4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f1c <UART_SetConfig+0xacc>)
 8007ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eae:	fbb3 f2f2 	udiv	r2, r3, r2
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	085b      	lsrs	r3, r3, #1
 8007eb8:	441a      	add	r2, r3
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	2b0f      	cmp	r3, #15
 8007ec8:	d909      	bls.n	8007ede <UART_SetConfig+0xa8e>
 8007eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ed0:	d205      	bcs.n	8007ede <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60da      	str	r2, [r3, #12]
 8007edc:	e002      	b.n	8007ee4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2200      	movs	r2, #0
 8007efe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f00:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3748      	adds	r7, #72	@ 0x48
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f0e:	bf00      	nop
 8007f10:	58024400 	.word	0x58024400
 8007f14:	03d09000 	.word	0x03d09000
 8007f18:	003d0900 	.word	0x003d0900
 8007f1c:	0800ac44 	.word	0x0800ac44

08007f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2c:	f003 0308 	and.w	r3, r3, #8
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00a      	beq.n	8007f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f70:	f003 0302 	and.w	r3, r3, #2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f92:	f003 0304 	and.w	r3, r3, #4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb4:	f003 0310 	and.w	r3, r3, #16
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01a      	beq.n	8008036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800801a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800801e:	d10a      	bne.n	8008036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00a      	beq.n	8008058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	430a      	orrs	r2, r1
 8008056:	605a      	str	r2, [r3, #4]
  }
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b098      	sub	sp, #96	@ 0x60
 8008068:	af02      	add	r7, sp, #8
 800806a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008074:	f7f9 fa40 	bl	80014f8 <HAL_GetTick>
 8008078:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0308 	and.w	r3, r3, #8
 8008084:	2b08      	cmp	r3, #8
 8008086:	d12f      	bne.n	80080e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008090:	2200      	movs	r2, #0
 8008092:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f88e 	bl	80081b8 <UART_WaitOnFlagUntilTimeout>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d022      	beq.n	80080e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80080c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e6      	bne.n	80080a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e063      	b.n	80081b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d149      	bne.n	800818a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080fe:	2200      	movs	r2, #0
 8008100:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f857 	bl	80081b8 <UART_WaitOnFlagUntilTimeout>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d03c      	beq.n	800818a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	623b      	str	r3, [r7, #32]
   return(result);
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008124:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800812e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008130:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800813c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e6      	bne.n	8008110 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3308      	adds	r3, #8
 8008148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	60fb      	str	r3, [r7, #12]
   return(result);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f023 0301 	bic.w	r3, r3, #1
 8008158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3308      	adds	r3, #8
 8008160:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008162:	61fa      	str	r2, [r7, #28]
 8008164:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	69b9      	ldr	r1, [r7, #24]
 8008168:	69fa      	ldr	r2, [r7, #28]
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	617b      	str	r3, [r7, #20]
   return(result);
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e5      	bne.n	8008142 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e012      	b.n	80081b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2220      	movs	r2, #32
 800818e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2220      	movs	r2, #32
 8008196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3758      	adds	r7, #88	@ 0x58
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	4613      	mov	r3, r2
 80081c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081c8:	e04f      	b.n	800826a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081d0:	d04b      	beq.n	800826a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d2:	f7f9 f991 	bl	80014f8 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d302      	bcc.n	80081e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e04e      	b.n	800828a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d037      	beq.n	800826a <UART_WaitOnFlagUntilTimeout+0xb2>
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2b80      	cmp	r3, #128	@ 0x80
 80081fe:	d034      	beq.n	800826a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2b40      	cmp	r3, #64	@ 0x40
 8008204:	d031      	beq.n	800826a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b08      	cmp	r3, #8
 8008212:	d110      	bne.n	8008236 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2208      	movs	r2, #8
 800821a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 f839 	bl	8008294 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2208      	movs	r2, #8
 8008226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e029      	b.n	800828a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008244:	d111      	bne.n	800826a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800824e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 f81f 	bl	8008294 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2220      	movs	r2, #32
 800825a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e00f      	b.n	800828a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69da      	ldr	r2, [r3, #28]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4013      	ands	r3, r2
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	429a      	cmp	r2, r3
 8008278:	bf0c      	ite	eq
 800827a:	2301      	moveq	r3, #1
 800827c:	2300      	movne	r3, #0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	461a      	mov	r2, r3
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	429a      	cmp	r2, r3
 8008286:	d0a0      	beq.n	80081ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008294:	b480      	push	{r7}
 8008296:	b095      	sub	sp, #84	@ 0x54
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80082bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082c2:	e841 2300 	strex	r3, r2, [r1]
 80082c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1e6      	bne.n	800829c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3308      	adds	r3, #8
 80082d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	e853 3f00 	ldrex	r3, [r3]
 80082dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80082de:	69fa      	ldr	r2, [r7, #28]
 80082e0:	4b1e      	ldr	r3, [pc, #120]	@ (800835c <UART_EndRxTransfer+0xc8>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3308      	adds	r3, #8
 80082ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e5      	bne.n	80082ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008306:	2b01      	cmp	r3, #1
 8008308:	d118      	bne.n	800833c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	60bb      	str	r3, [r7, #8]
   return(result);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f023 0310 	bic.w	r3, r3, #16
 800831e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008328:	61bb      	str	r3, [r7, #24]
 800832a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6979      	ldr	r1, [r7, #20]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	613b      	str	r3, [r7, #16]
   return(result);
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e6      	bne.n	800830a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008350:	bf00      	nop
 8008352:	3754      	adds	r7, #84	@ 0x54
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	effffffe 	.word	0xeffffffe

08008360 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008360:	b480      	push	{r7}
 8008362:	b08f      	sub	sp, #60	@ 0x3c
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800836e:	2b21      	cmp	r3, #33	@ 0x21
 8008370:	d14c      	bne.n	800840c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008378:	b29b      	uxth	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d132      	bne.n	80083e4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	61fb      	str	r3, [r7, #28]
   return(result);
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008392:	637b      	str	r3, [r7, #52]	@ 0x34
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800839c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800839e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e6      	bne.n	800837e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	e853 3f00 	ldrex	r3, [r3]
 80083bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ce:	61bb      	str	r3, [r7, #24]
 80083d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	6979      	ldr	r1, [r7, #20]
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	613b      	str	r3, [r7, #16]
   return(result);
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e6      	bne.n	80083b0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80083e2:	e013      	b.n	800840c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083e8:	781a      	ldrb	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083f4:	1c5a      	adds	r2, r3, #1
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008400:	b29b      	uxth	r3, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	b29a      	uxth	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800840c:	bf00      	nop
 800840e:	373c      	adds	r7, #60	@ 0x3c
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008418:	b480      	push	{r7}
 800841a:	b091      	sub	sp, #68	@ 0x44
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008426:	2b21      	cmp	r3, #33	@ 0x21
 8008428:	d151      	bne.n	80084ce <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008430:	b29b      	uxth	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d132      	bne.n	800849c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	623b      	str	r3, [r7, #32]
   return(result);
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800844a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	461a      	mov	r2, r3
 8008452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008454:	633b      	str	r3, [r7, #48]	@ 0x30
 8008456:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800845a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e6      	bne.n	8008436 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	60fb      	str	r3, [r7, #12]
   return(result);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800847c:	637b      	str	r3, [r7, #52]	@ 0x34
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008486:	61fb      	str	r3, [r7, #28]
 8008488:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	69b9      	ldr	r1, [r7, #24]
 800848c:	69fa      	ldr	r2, [r7, #28]
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	617b      	str	r3, [r7, #20]
   return(result);
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e6      	bne.n	8008468 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800849a:	e018      	b.n	80084ce <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80084a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084b0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b6:	1c9a      	adds	r2, r3, #2
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80084ce:	bf00      	nop
 80084d0:	3744      	adds	r7, #68	@ 0x44
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084da:	b480      	push	{r7}
 80084dc:	b091      	sub	sp, #68	@ 0x44
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e8:	2b21      	cmp	r3, #33	@ 0x21
 80084ea:	d160      	bne.n	80085ae <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80084f4:	e057      	b.n	80085a6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d133      	bne.n	800856a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3308      	adds	r3, #8
 8008508:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	623b      	str	r3, [r7, #32]
   return(result);
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008518:	63bb      	str	r3, [r7, #56]	@ 0x38
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3308      	adds	r3, #8
 8008520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008522:	633a      	str	r2, [r7, #48]	@ 0x30
 8008524:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e5      	bne.n	8008502 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	60fb      	str	r3, [r7, #12]
   return(result);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800854a:	637b      	str	r3, [r7, #52]	@ 0x34
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008554:	61fb      	str	r3, [r7, #28]
 8008556:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	69b9      	ldr	r1, [r7, #24]
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	617b      	str	r3, [r7, #20]
   return(result);
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e6      	bne.n	8008536 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008568:	e021      	b.n	80085ae <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008574:	2b00      	cmp	r3, #0
 8008576:	d013      	beq.n	80085a0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800857c:	781a      	ldrb	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008594:	b29b      	uxth	r3, r3
 8008596:	3b01      	subs	r3, #1
 8008598:	b29a      	uxth	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80085a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80085a2:	3b01      	subs	r3, #1
 80085a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80085a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1a4      	bne.n	80084f6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80085ac:	e7ff      	b.n	80085ae <UART_TxISR_8BIT_FIFOEN+0xd4>
 80085ae:	bf00      	nop
 80085b0:	3744      	adds	r7, #68	@ 0x44
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b091      	sub	sp, #68	@ 0x44
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c8:	2b21      	cmp	r3, #33	@ 0x21
 80085ca:	d165      	bne.n	8008698 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80085d4:	e05c      	b.n	8008690 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d133      	bne.n	800864a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80085f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3308      	adds	r3, #8
 8008600:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008602:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008604:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e5      	bne.n	80085e2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	60bb      	str	r3, [r7, #8]
   return(result);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800862a:	633b      	str	r3, [r7, #48]	@ 0x30
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008634:	61bb      	str	r3, [r7, #24]
 8008636:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	6979      	ldr	r1, [r7, #20]
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	613b      	str	r3, [r7, #16]
   return(result);
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e6      	bne.n	8008616 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008648:	e026      	b.n	8008698 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008654:	2b00      	cmp	r3, #0
 8008656:	d018      	beq.n	800868a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800865c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800865e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800866c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008672:	1c9a      	adds	r2, r3, #2
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800867e:	b29b      	uxth	r3, r3
 8008680:	3b01      	subs	r3, #1
 8008682:	b29a      	uxth	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800868a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800868c:	3b01      	subs	r3, #1
 800868e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008690:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008692:	2b00      	cmp	r3, #0
 8008694:	d19f      	bne.n	80085d6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008696:	e7ff      	b.n	8008698 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008698:	bf00      	nop
 800869a:	3744      	adds	r7, #68	@ 0x44
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d101      	bne.n	80086ba <HAL_UARTEx_DisableFifoMode+0x16>
 80086b6:	2302      	movs	r3, #2
 80086b8:	e027      	b.n	800870a <HAL_UARTEx_DisableFifoMode+0x66>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2224      	movs	r2, #36	@ 0x24
 80086c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0201 	bic.w	r2, r2, #1
 80086e0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80086e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008726:	2b01      	cmp	r3, #1
 8008728:	d101      	bne.n	800872e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800872a:	2302      	movs	r3, #2
 800872c:	e02d      	b.n	800878a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2224      	movs	r2, #36	@ 0x24
 800873a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0201 	bic.w	r2, r2, #1
 8008754:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f850 	bl	8008810 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2220      	movs	r2, #32
 800877c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d101      	bne.n	80087aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087a6:	2302      	movs	r3, #2
 80087a8:	e02d      	b.n	8008806 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2224      	movs	r2, #36	@ 0x24
 80087b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 0201 	bic.w	r2, r2, #1
 80087d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f812 	bl	8008810 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800881c:	2b00      	cmp	r3, #0
 800881e:	d108      	bne.n	8008832 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008830:	e031      	b.n	8008896 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008832:	2310      	movs	r3, #16
 8008834:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008836:	2310      	movs	r3, #16
 8008838:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	0e5b      	lsrs	r3, r3, #25
 8008842:	b2db      	uxtb	r3, r3
 8008844:	f003 0307 	and.w	r3, r3, #7
 8008848:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	0f5b      	lsrs	r3, r3, #29
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f003 0307 	and.w	r3, r3, #7
 8008858:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	7b3a      	ldrb	r2, [r7, #12]
 800885e:	4911      	ldr	r1, [pc, #68]	@ (80088a4 <UARTEx_SetNbDataToProcess+0x94>)
 8008860:	5c8a      	ldrb	r2, [r1, r2]
 8008862:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008866:	7b3a      	ldrb	r2, [r7, #12]
 8008868:	490f      	ldr	r1, [pc, #60]	@ (80088a8 <UARTEx_SetNbDataToProcess+0x98>)
 800886a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800886c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008870:	b29a      	uxth	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	7b7a      	ldrb	r2, [r7, #13]
 800887c:	4909      	ldr	r1, [pc, #36]	@ (80088a4 <UARTEx_SetNbDataToProcess+0x94>)
 800887e:	5c8a      	ldrb	r2, [r1, r2]
 8008880:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008884:	7b7a      	ldrb	r2, [r7, #13]
 8008886:	4908      	ldr	r1, [pc, #32]	@ (80088a8 <UARTEx_SetNbDataToProcess+0x98>)
 8008888:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800888a:	fb93 f3f2 	sdiv	r3, r3, r2
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	0800ac5c 	.word	0x0800ac5c
 80088a8:	0800ac64 	.word	0x0800ac64

080088ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80088ac:	b580      	push	{r7, lr}
 80088ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80088b0:	4b05      	ldr	r3, [pc, #20]	@ (80088c8 <SysTick_Handler+0x1c>)
 80088b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80088b4:	f001 f8ca 	bl	8009a4c <xTaskGetSchedulerState>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d001      	beq.n	80088c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80088be:	f000 fca3 	bl	8009208 <xPortSysTickHandler>
  }
}
 80088c2:	bf00      	nop
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	e000e010 	.word	0xe000e010

080088cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088d2:	f3ef 8305 	mrs	r3, IPSR
 80088d6:	603b      	str	r3, [r7, #0]
  return(result);
 80088d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80088de:	f06f 0305 	mvn.w	r3, #5
 80088e2:	607b      	str	r3, [r7, #4]
 80088e4:	e00c      	b.n	8008900 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80088e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008910 <osKernelInitialize+0x44>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d105      	bne.n	80088fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80088ee:	4b08      	ldr	r3, [pc, #32]	@ (8008910 <osKernelInitialize+0x44>)
 80088f0:	2201      	movs	r2, #1
 80088f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	607b      	str	r3, [r7, #4]
 80088f8:	e002      	b.n	8008900 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80088fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008900:	687b      	ldr	r3, [r7, #4]
}
 8008902:	4618      	mov	r0, r3
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	2400027c 	.word	0x2400027c

08008914 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008914:	b580      	push	{r7, lr}
 8008916:	b08e      	sub	sp, #56	@ 0x38
 8008918:	af04      	add	r7, sp, #16
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008920:	2300      	movs	r3, #0
 8008922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008924:	f3ef 8305 	mrs	r3, IPSR
 8008928:	617b      	str	r3, [r7, #20]
  return(result);
 800892a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800892c:	2b00      	cmp	r3, #0
 800892e:	d17e      	bne.n	8008a2e <osThreadNew+0x11a>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d07b      	beq.n	8008a2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008936:	2380      	movs	r3, #128	@ 0x80
 8008938:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800893a:	2318      	movs	r3, #24
 800893c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800893e:	2300      	movs	r3, #0
 8008940:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008946:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d045      	beq.n	80089da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <osThreadNew+0x48>
        name = attr->name;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d008      	beq.n	8008982 <osThreadNew+0x6e>
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	2b38      	cmp	r3, #56	@ 0x38
 8008974:	d805      	bhi.n	8008982 <osThreadNew+0x6e>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <osThreadNew+0x72>
        return (NULL);
 8008982:	2300      	movs	r3, #0
 8008984:	e054      	b.n	8008a30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	089b      	lsrs	r3, r3, #2
 8008994:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00e      	beq.n	80089bc <osThreadNew+0xa8>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	2b5b      	cmp	r3, #91	@ 0x5b
 80089a4:	d90a      	bls.n	80089bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d006      	beq.n	80089bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <osThreadNew+0xa8>
        mem = 1;
 80089b6:	2301      	movs	r3, #1
 80089b8:	61bb      	str	r3, [r7, #24]
 80089ba:	e010      	b.n	80089de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10c      	bne.n	80089de <osThreadNew+0xca>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d108      	bne.n	80089de <osThreadNew+0xca>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d104      	bne.n	80089de <osThreadNew+0xca>
          mem = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	61bb      	str	r3, [r7, #24]
 80089d8:	e001      	b.n	80089de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d110      	bne.n	8008a06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089ec:	9202      	str	r2, [sp, #8]
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	6a3a      	ldr	r2, [r7, #32]
 80089f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 fc26 	bl	800924c <xTaskCreateStatic>
 8008a00:	4603      	mov	r3, r0
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	e013      	b.n	8008a2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d110      	bne.n	8008a2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	f107 0310 	add.w	r3, r7, #16
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 fc74 	bl	800930c <xTaskCreate>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d001      	beq.n	8008a2e <osThreadNew+0x11a>
            hTask = NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a2e:	693b      	ldr	r3, [r7, #16]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3728      	adds	r7, #40	@ 0x28
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a3e:	f3ef 8305 	mrs	r3, IPSR
 8008a42:	603b      	str	r3, [r7, #0]
  return(result);
 8008a44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <osThreadYield+0x1a>
    stat = osErrorISR;
 8008a4a:	f06f 0305 	mvn.w	r3, #5
 8008a4e:	607b      	str	r3, [r7, #4]
 8008a50:	e009      	b.n	8008a66 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8008a56:	4b07      	ldr	r3, [pc, #28]	@ (8008a74 <osThreadYield+0x3c>)
 8008a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8008a66:	687b      	ldr	r3, [r7, #4]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	e000ed04 	.word	0xe000ed04

08008a78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a80:	f3ef 8305 	mrs	r3, IPSR
 8008a84:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <osDelay+0x1c>
    stat = osErrorISR;
 8008a8c:	f06f 0305 	mvn.w	r3, #5
 8008a90:	60fb      	str	r3, [r7, #12]
 8008a92:	e007      	b.n	8008aa4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d002      	beq.n	8008aa4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fd7a 	bl	8009598 <vTaskDelay>
    }
  }

  return (stat);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08a      	sub	sp, #40	@ 0x28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008abc:	f000 fda2 	bl	8009604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ac0:	4b5c      	ldr	r3, [pc, #368]	@ (8008c34 <pvPortMalloc+0x184>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ac8:	f000 f924 	bl	8008d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008acc:	4b5a      	ldr	r3, [pc, #360]	@ (8008c38 <pvPortMalloc+0x188>)
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f040 8095 	bne.w	8008c04 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01e      	beq.n	8008b1e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008ae0:	2208      	movs	r2, #8
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d015      	beq.n	8008b1e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f023 0307 	bic.w	r3, r3, #7
 8008af8:	3308      	adds	r3, #8
 8008afa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00b      	beq.n	8008b1e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	e7fd      	b.n	8008b1a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d06f      	beq.n	8008c04 <pvPortMalloc+0x154>
 8008b24:	4b45      	ldr	r3, [pc, #276]	@ (8008c3c <pvPortMalloc+0x18c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d86a      	bhi.n	8008c04 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b2e:	4b44      	ldr	r3, [pc, #272]	@ (8008c40 <pvPortMalloc+0x190>)
 8008b30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b32:	4b43      	ldr	r3, [pc, #268]	@ (8008c40 <pvPortMalloc+0x190>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b38:	e004      	b.n	8008b44 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d903      	bls.n	8008b56 <pvPortMalloc+0xa6>
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1f1      	bne.n	8008b3a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b56:	4b37      	ldr	r3, [pc, #220]	@ (8008c34 <pvPortMalloc+0x184>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d051      	beq.n	8008c04 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2208      	movs	r2, #8
 8008b66:	4413      	add	r3, r2
 8008b68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	1ad2      	subs	r2, r2, r3
 8008b7a:	2308      	movs	r3, #8
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d920      	bls.n	8008bc4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4413      	add	r3, r2
 8008b88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <pvPortMalloc+0xfc>
	__asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	613b      	str	r3, [r7, #16]
}
 8008ba6:	bf00      	nop
 8008ba8:	bf00      	nop
 8008baa:	e7fd      	b.n	8008ba8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	1ad2      	subs	r2, r2, r3
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bbe:	69b8      	ldr	r0, [r7, #24]
 8008bc0:	f000 f90a 	bl	8008dd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c3c <pvPortMalloc+0x18c>)
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	4a1b      	ldr	r2, [pc, #108]	@ (8008c3c <pvPortMalloc+0x18c>)
 8008bd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8008c3c <pvPortMalloc+0x18c>)
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8008c44 <pvPortMalloc+0x194>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d203      	bcs.n	8008be6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bde:	4b17      	ldr	r3, [pc, #92]	@ (8008c3c <pvPortMalloc+0x18c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a18      	ldr	r2, [pc, #96]	@ (8008c44 <pvPortMalloc+0x194>)
 8008be4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	4b13      	ldr	r3, [pc, #76]	@ (8008c38 <pvPortMalloc+0x188>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008bfa:	4b13      	ldr	r3, [pc, #76]	@ (8008c48 <pvPortMalloc+0x198>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	4a11      	ldr	r2, [pc, #68]	@ (8008c48 <pvPortMalloc+0x198>)
 8008c02:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c04:	f000 fd0c 	bl	8009620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	f003 0307 	and.w	r3, r3, #7
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00b      	beq.n	8008c2a <pvPortMalloc+0x17a>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	60fb      	str	r3, [r7, #12]
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop
 8008c28:	e7fd      	b.n	8008c26 <pvPortMalloc+0x176>
	return pvReturn;
 8008c2a:	69fb      	ldr	r3, [r7, #28]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3728      	adds	r7, #40	@ 0x28
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	24003e88 	.word	0x24003e88
 8008c38:	24003e9c 	.word	0x24003e9c
 8008c3c:	24003e8c 	.word	0x24003e8c
 8008c40:	24003e80 	.word	0x24003e80
 8008c44:	24003e90 	.word	0x24003e90
 8008c48:	24003e94 	.word	0x24003e94

08008c4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d04f      	beq.n	8008cfe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c5e:	2308      	movs	r3, #8
 8008c60:	425b      	negs	r3, r3
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	4413      	add	r3, r2
 8008c66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	4b25      	ldr	r3, [pc, #148]	@ (8008d08 <vPortFree+0xbc>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4013      	ands	r3, r2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10b      	bne.n	8008c92 <vPortFree+0x46>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	60fb      	str	r3, [r7, #12]
}
 8008c8c:	bf00      	nop
 8008c8e:	bf00      	nop
 8008c90:	e7fd      	b.n	8008c8e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00b      	beq.n	8008cb2 <vPortFree+0x66>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	60bb      	str	r3, [r7, #8]
}
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	e7fd      	b.n	8008cae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	4b14      	ldr	r3, [pc, #80]	@ (8008d08 <vPortFree+0xbc>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d01e      	beq.n	8008cfe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d11a      	bne.n	8008cfe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8008d08 <vPortFree+0xbc>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	401a      	ands	r2, r3
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cd8:	f000 fc94 	bl	8009604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8008d0c <vPortFree+0xc0>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	4a09      	ldr	r2, [pc, #36]	@ (8008d0c <vPortFree+0xc0>)
 8008ce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cea:	6938      	ldr	r0, [r7, #16]
 8008cec:	f000 f874 	bl	8008dd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008cf0:	4b07      	ldr	r3, [pc, #28]	@ (8008d10 <vPortFree+0xc4>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	4a06      	ldr	r2, [pc, #24]	@ (8008d10 <vPortFree+0xc4>)
 8008cf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008cfa:	f000 fc91 	bl	8009620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008cfe:	bf00      	nop
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	24003e9c 	.word	0x24003e9c
 8008d0c:	24003e8c 	.word	0x24003e8c
 8008d10:	24003e98 	.word	0x24003e98

08008d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d1a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d20:	4b27      	ldr	r3, [pc, #156]	@ (8008dc0 <prvHeapInit+0xac>)
 8008d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00c      	beq.n	8008d48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3307      	adds	r3, #7
 8008d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f023 0307 	bic.w	r3, r3, #7
 8008d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	4a1f      	ldr	r2, [pc, #124]	@ (8008dc0 <prvHeapInit+0xac>)
 8008d44:	4413      	add	r3, r2
 8008d46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc4 <prvHeapInit+0xb0>)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d52:	4b1c      	ldr	r3, [pc, #112]	@ (8008dc4 <prvHeapInit+0xb0>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d60:	2208      	movs	r2, #8
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	1a9b      	subs	r3, r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0307 	bic.w	r3, r3, #7
 8008d6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4a15      	ldr	r2, [pc, #84]	@ (8008dc8 <prvHeapInit+0xb4>)
 8008d74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d76:	4b14      	ldr	r3, [pc, #80]	@ (8008dc8 <prvHeapInit+0xb4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d7e:	4b12      	ldr	r3, [pc, #72]	@ (8008dc8 <prvHeapInit+0xb4>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	1ad2      	subs	r2, r2, r3
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d94:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc8 <prvHeapInit+0xb4>)
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	4a0a      	ldr	r2, [pc, #40]	@ (8008dcc <prvHeapInit+0xb8>)
 8008da2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	4a09      	ldr	r2, [pc, #36]	@ (8008dd0 <prvHeapInit+0xbc>)
 8008daa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dac:	4b09      	ldr	r3, [pc, #36]	@ (8008dd4 <prvHeapInit+0xc0>)
 8008dae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008db2:	601a      	str	r2, [r3, #0]
}
 8008db4:	bf00      	nop
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	24000280 	.word	0x24000280
 8008dc4:	24003e80 	.word	0x24003e80
 8008dc8:	24003e88 	.word	0x24003e88
 8008dcc:	24003e90 	.word	0x24003e90
 8008dd0:	24003e8c 	.word	0x24003e8c
 8008dd4:	24003e9c 	.word	0x24003e9c

08008dd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008de0:	4b28      	ldr	r3, [pc, #160]	@ (8008e84 <prvInsertBlockIntoFreeList+0xac>)
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	e002      	b.n	8008dec <prvInsertBlockIntoFreeList+0x14>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d8f7      	bhi.n	8008de6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	4413      	add	r3, r2
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d108      	bne.n	8008e1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	441a      	add	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	441a      	add	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d118      	bne.n	8008e60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	4b15      	ldr	r3, [pc, #84]	@ (8008e88 <prvInsertBlockIntoFreeList+0xb0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d00d      	beq.n	8008e56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	441a      	add	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	e008      	b.n	8008e68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e56:	4b0c      	ldr	r3, [pc, #48]	@ (8008e88 <prvInsertBlockIntoFreeList+0xb0>)
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	e003      	b.n	8008e68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d002      	beq.n	8008e76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e76:	bf00      	nop
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	24003e80 	.word	0x24003e80
 8008e88:	24003e88 	.word	0x24003e88

08008e8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f103 0208 	add.w	r2, r3, #8
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f103 0208 	add.w	r2, r3, #8
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f103 0208 	add.w	r2, r3, #8
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008eda:	bf00      	nop
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	1c5a      	adds	r2, r3, #1
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	601a      	str	r2, [r3, #0]
}
 8008f22:	bf00      	nop
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b085      	sub	sp, #20
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f44:	d103      	bne.n	8008f4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	e00c      	b.n	8008f68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3308      	adds	r3, #8
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e002      	b.n	8008f5c <vListInsert+0x2e>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d2f6      	bcs.n	8008f56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	1c5a      	adds	r2, r3, #1
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	601a      	str	r2, [r3, #0]
}
 8008f94:	bf00      	nop
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	6892      	ldr	r2, [r2, #8]
 8008fb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	6852      	ldr	r2, [r2, #4]
 8008fc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d103      	bne.n	8008fd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	1e5a      	subs	r2, r3, #1
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	3b04      	subs	r3, #4
 8009004:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800900c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3b04      	subs	r3, #4
 8009012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f023 0201 	bic.w	r2, r3, #1
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3b04      	subs	r3, #4
 8009022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009024:	4a0c      	ldr	r2, [pc, #48]	@ (8009058 <pxPortInitialiseStack+0x64>)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3b14      	subs	r3, #20
 800902e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	3b04      	subs	r3, #4
 800903a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f06f 0202 	mvn.w	r2, #2
 8009042:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	3b20      	subs	r3, #32
 8009048:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800904a:	68fb      	ldr	r3, [r7, #12]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	0800905d 	.word	0x0800905d

0800905c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009066:	4b13      	ldr	r3, [pc, #76]	@ (80090b4 <prvTaskExitError+0x58>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800906e:	d00b      	beq.n	8009088 <prvTaskExitError+0x2c>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	60fb      	str	r3, [r7, #12]
}
 8009082:	bf00      	nop
 8009084:	bf00      	nop
 8009086:	e7fd      	b.n	8009084 <prvTaskExitError+0x28>
	__asm volatile
 8009088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	60bb      	str	r3, [r7, #8]
}
 800909a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800909c:	bf00      	nop
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d0fc      	beq.n	800909e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	24000010 	.word	0x24000010
	...

080090c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80090c0:	4b07      	ldr	r3, [pc, #28]	@ (80090e0 <pxCurrentTCBConst2>)
 80090c2:	6819      	ldr	r1, [r3, #0]
 80090c4:	6808      	ldr	r0, [r1, #0]
 80090c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ca:	f380 8809 	msr	PSP, r0
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f04f 0000 	mov.w	r0, #0
 80090d6:	f380 8811 	msr	BASEPRI, r0
 80090da:	4770      	bx	lr
 80090dc:	f3af 8000 	nop.w

080090e0 <pxCurrentTCBConst2>:
 80090e0:	24003ea0 	.word	0x24003ea0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop

080090e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	607b      	str	r3, [r7, #4]
}
 8009100:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009102:	4b10      	ldr	r3, [pc, #64]	@ (8009144 <vPortEnterCritical+0x5c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3301      	adds	r3, #1
 8009108:	4a0e      	ldr	r2, [pc, #56]	@ (8009144 <vPortEnterCritical+0x5c>)
 800910a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800910c:	4b0d      	ldr	r3, [pc, #52]	@ (8009144 <vPortEnterCritical+0x5c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d110      	bne.n	8009136 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009114:	4b0c      	ldr	r3, [pc, #48]	@ (8009148 <vPortEnterCritical+0x60>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00b      	beq.n	8009136 <vPortEnterCritical+0x4e>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	603b      	str	r3, [r7, #0]
}
 8009130:	bf00      	nop
 8009132:	bf00      	nop
 8009134:	e7fd      	b.n	8009132 <vPortEnterCritical+0x4a>
	}
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	24000010 	.word	0x24000010
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009152:	4b12      	ldr	r3, [pc, #72]	@ (800919c <vPortExitCritical+0x50>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10b      	bne.n	8009172 <vPortExitCritical+0x26>
	__asm volatile
 800915a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	607b      	str	r3, [r7, #4]
}
 800916c:	bf00      	nop
 800916e:	bf00      	nop
 8009170:	e7fd      	b.n	800916e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009172:	4b0a      	ldr	r3, [pc, #40]	@ (800919c <vPortExitCritical+0x50>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3b01      	subs	r3, #1
 8009178:	4a08      	ldr	r2, [pc, #32]	@ (800919c <vPortExitCritical+0x50>)
 800917a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800917c:	4b07      	ldr	r3, [pc, #28]	@ (800919c <vPortExitCritical+0x50>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d105      	bne.n	8009190 <vPortExitCritical+0x44>
 8009184:	2300      	movs	r3, #0
 8009186:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800918e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	24000010 	.word	0x24000010

080091a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091a0:	f3ef 8009 	mrs	r0, PSP
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	4b15      	ldr	r3, [pc, #84]	@ (8009200 <pxCurrentTCBConst>)
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	f01e 0f10 	tst.w	lr, #16
 80091b0:	bf08      	it	eq
 80091b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ba:	6010      	str	r0, [r2, #0]
 80091bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80091c4:	f380 8811 	msr	BASEPRI, r0
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f000 fb7e 	bl	80098d0 <vTaskSwitchContext>
 80091d4:	f04f 0000 	mov.w	r0, #0
 80091d8:	f380 8811 	msr	BASEPRI, r0
 80091dc:	bc09      	pop	{r0, r3}
 80091de:	6819      	ldr	r1, [r3, #0]
 80091e0:	6808      	ldr	r0, [r1, #0]
 80091e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e6:	f01e 0f10 	tst.w	lr, #16
 80091ea:	bf08      	it	eq
 80091ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091f0:	f380 8809 	msr	PSP, r0
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	f3af 8000 	nop.w

08009200 <pxCurrentTCBConst>:
 8009200:	24003ea0 	.word	0x24003ea0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop

08009208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	607b      	str	r3, [r7, #4]
}
 8009220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009222:	f000 fa9b 	bl	800975c <xTaskIncrementTick>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800922c:	4b06      	ldr	r3, [pc, #24]	@ (8009248 <xPortSysTickHandler+0x40>)
 800922e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	2300      	movs	r3, #0
 8009236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	f383 8811 	msr	BASEPRI, r3
}
 800923e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	e000ed04 	.word	0xe000ed04

0800924c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08e      	sub	sp, #56	@ 0x38
 8009250:	af04      	add	r7, sp, #16
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
 8009258:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800925a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10b      	bne.n	8009278 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	623b      	str	r3, [r7, #32]
}
 8009272:	bf00      	nop
 8009274:	bf00      	nop
 8009276:	e7fd      	b.n	8009274 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10b      	bne.n	8009296 <xTaskCreateStatic+0x4a>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	61fb      	str	r3, [r7, #28]
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	e7fd      	b.n	8009292 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009296:	235c      	movs	r3, #92	@ 0x5c
 8009298:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2b5c      	cmp	r3, #92	@ 0x5c
 800929e:	d00b      	beq.n	80092b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	61bb      	str	r3, [r7, #24]
}
 80092b2:	bf00      	nop
 80092b4:	bf00      	nop
 80092b6:	e7fd      	b.n	80092b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80092b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d01e      	beq.n	80092fe <xTaskCreateStatic+0xb2>
 80092c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d01b      	beq.n	80092fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092d8:	2300      	movs	r3, #0
 80092da:	9303      	str	r3, [sp, #12]
 80092dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092de:	9302      	str	r3, [sp, #8]
 80092e0:	f107 0314 	add.w	r3, r7, #20
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	68b9      	ldr	r1, [r7, #8]
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 f850 	bl	8009396 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80092f8:	f000 f8de 	bl	80094b8 <prvAddNewTaskToReadyList>
 80092fc:	e001      	b.n	8009302 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009302:	697b      	ldr	r3, [r7, #20]
	}
 8009304:	4618      	mov	r0, r3
 8009306:	3728      	adds	r7, #40	@ 0x28
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08c      	sub	sp, #48	@ 0x30
 8009310:	af04      	add	r7, sp, #16
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	4613      	mov	r3, r2
 800931a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800931c:	88fb      	ldrh	r3, [r7, #6]
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4618      	mov	r0, r3
 8009322:	f7ff fbc5 	bl	8008ab0 <pvPortMalloc>
 8009326:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00e      	beq.n	800934c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800932e:	205c      	movs	r0, #92	@ 0x5c
 8009330:	f7ff fbbe 	bl	8008ab0 <pvPortMalloc>
 8009334:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d003      	beq.n	8009344 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	631a      	str	r2, [r3, #48]	@ 0x30
 8009342:	e005      	b.n	8009350 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009344:	6978      	ldr	r0, [r7, #20]
 8009346:	f7ff fc81 	bl	8008c4c <vPortFree>
 800934a:	e001      	b.n	8009350 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800934c:	2300      	movs	r3, #0
 800934e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d017      	beq.n	8009386 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800935e:	88fa      	ldrh	r2, [r7, #6]
 8009360:	2300      	movs	r3, #0
 8009362:	9303      	str	r3, [sp, #12]
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	9302      	str	r3, [sp, #8]
 8009368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 f80e 	bl	8009396 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800937a:	69f8      	ldr	r0, [r7, #28]
 800937c:	f000 f89c 	bl	80094b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009380:	2301      	movs	r3, #1
 8009382:	61bb      	str	r3, [r7, #24]
 8009384:	e002      	b.n	800938c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800938a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800938c:	69bb      	ldr	r3, [r7, #24]
	}
 800938e:	4618      	mov	r0, r3
 8009390:	3720      	adds	r7, #32
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b088      	sub	sp, #32
 800939a:	af00      	add	r7, sp, #0
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	607a      	str	r2, [r7, #4]
 80093a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	461a      	mov	r2, r3
 80093ae:	21a5      	movs	r1, #165	@ 0xa5
 80093b0:	f000 fd5b 	bl	8009e6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80093be:	440b      	add	r3, r1
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	f023 0307 	bic.w	r3, r3, #7
 80093cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	f003 0307 	and.w	r3, r3, #7
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00b      	beq.n	80093f0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	617b      	str	r3, [r7, #20]
}
 80093ea:	bf00      	nop
 80093ec:	bf00      	nop
 80093ee:	e7fd      	b.n	80093ec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01f      	beq.n	8009436 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093f6:	2300      	movs	r3, #0
 80093f8:	61fb      	str	r3, [r7, #28]
 80093fa:	e012      	b.n	8009422 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	4413      	add	r3, r2
 8009402:	7819      	ldrb	r1, [r3, #0]
 8009404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	4413      	add	r3, r2
 800940a:	3334      	adds	r3, #52	@ 0x34
 800940c:	460a      	mov	r2, r1
 800940e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	4413      	add	r3, r2
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d006      	beq.n	800942a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	3301      	adds	r3, #1
 8009420:	61fb      	str	r3, [r7, #28]
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	2b0f      	cmp	r3, #15
 8009426:	d9e9      	bls.n	80093fc <prvInitialiseNewTask+0x66>
 8009428:	e000      	b.n	800942c <prvInitialiseNewTask+0x96>
			{
				break;
 800942a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800942c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009434:	e003      	b.n	800943e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800943e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009440:	2b37      	cmp	r3, #55	@ 0x37
 8009442:	d901      	bls.n	8009448 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009444:	2337      	movs	r3, #55	@ 0x37
 8009446:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800944c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800944e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009450:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009452:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009456:	2200      	movs	r2, #0
 8009458:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800945a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945c:	3304      	adds	r3, #4
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff fd34 	bl	8008ecc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009466:	3318      	adds	r3, #24
 8009468:	4618      	mov	r0, r3
 800946a:	f7ff fd2f 	bl	8008ecc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800946e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009472:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009476:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800947e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009482:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009486:	2200      	movs	r2, #0
 8009488:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800948a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	68f9      	ldr	r1, [r7, #12]
 8009496:	69b8      	ldr	r0, [r7, #24]
 8009498:	f7ff fdac 	bl	8008ff4 <pxPortInitialiseStack>
 800949c:	4602      	mov	r2, r0
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ae:	bf00      	nop
 80094b0:	3720      	adds	r7, #32
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
	...

080094b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094c0:	f7ff fe12 	bl	80090e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094c4:	4b2d      	ldr	r3, [pc, #180]	@ (800957c <prvAddNewTaskToReadyList+0xc4>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3301      	adds	r3, #1
 80094ca:	4a2c      	ldr	r2, [pc, #176]	@ (800957c <prvAddNewTaskToReadyList+0xc4>)
 80094cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094ce:	4b2c      	ldr	r3, [pc, #176]	@ (8009580 <prvAddNewTaskToReadyList+0xc8>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d109      	bne.n	80094ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094d6:	4a2a      	ldr	r2, [pc, #168]	@ (8009580 <prvAddNewTaskToReadyList+0xc8>)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094dc:	4b27      	ldr	r3, [pc, #156]	@ (800957c <prvAddNewTaskToReadyList+0xc4>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d110      	bne.n	8009506 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094e4:	f000 fa52 	bl	800998c <prvInitialiseTaskLists>
 80094e8:	e00d      	b.n	8009506 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094ea:	4b26      	ldr	r3, [pc, #152]	@ (8009584 <prvAddNewTaskToReadyList+0xcc>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d109      	bne.n	8009506 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094f2:	4b23      	ldr	r3, [pc, #140]	@ (8009580 <prvAddNewTaskToReadyList+0xc8>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d802      	bhi.n	8009506 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009500:	4a1f      	ldr	r2, [pc, #124]	@ (8009580 <prvAddNewTaskToReadyList+0xc8>)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009506:	4b20      	ldr	r3, [pc, #128]	@ (8009588 <prvAddNewTaskToReadyList+0xd0>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3301      	adds	r3, #1
 800950c:	4a1e      	ldr	r2, [pc, #120]	@ (8009588 <prvAddNewTaskToReadyList+0xd0>)
 800950e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009510:	4b1d      	ldr	r3, [pc, #116]	@ (8009588 <prvAddNewTaskToReadyList+0xd0>)
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800951c:	4b1b      	ldr	r3, [pc, #108]	@ (800958c <prvAddNewTaskToReadyList+0xd4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d903      	bls.n	800952c <prvAddNewTaskToReadyList+0x74>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009528:	4a18      	ldr	r2, [pc, #96]	@ (800958c <prvAddNewTaskToReadyList+0xd4>)
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009530:	4613      	mov	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4a15      	ldr	r2, [pc, #84]	@ (8009590 <prvAddNewTaskToReadyList+0xd8>)
 800953a:	441a      	add	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3304      	adds	r3, #4
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f7ff fccf 	bl	8008ee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009548:	f7ff fe00 	bl	800914c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800954c:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <prvAddNewTaskToReadyList+0xcc>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00e      	beq.n	8009572 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009554:	4b0a      	ldr	r3, [pc, #40]	@ (8009580 <prvAddNewTaskToReadyList+0xc8>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955e:	429a      	cmp	r2, r3
 8009560:	d207      	bcs.n	8009572 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009562:	4b0c      	ldr	r3, [pc, #48]	@ (8009594 <prvAddNewTaskToReadyList+0xdc>)
 8009564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009572:	bf00      	nop
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	24004370 	.word	0x24004370
 8009580:	24003ea0 	.word	0x24003ea0
 8009584:	2400437c 	.word	0x2400437c
 8009588:	2400438c 	.word	0x2400438c
 800958c:	24004378 	.word	0x24004378
 8009590:	24003ea4 	.word	0x24003ea4
 8009594:	e000ed04 	.word	0xe000ed04

08009598 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d018      	beq.n	80095dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095aa:	4b14      	ldr	r3, [pc, #80]	@ (80095fc <vTaskDelay+0x64>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00b      	beq.n	80095ca <vTaskDelay+0x32>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	60bb      	str	r3, [r7, #8]
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop
 80095c8:	e7fd      	b.n	80095c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80095ca:	f000 f81b 	bl	8009604 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095ce:	2100      	movs	r1, #0
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fa59 	bl	8009a88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095d6:	f000 f823 	bl	8009620 <xTaskResumeAll>
 80095da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d107      	bne.n	80095f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80095e2:	4b07      	ldr	r3, [pc, #28]	@ (8009600 <vTaskDelay+0x68>)
 80095e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095f2:	bf00      	nop
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	24004394 	.word	0x24004394
 8009600:	e000ed04 	.word	0xe000ed04

08009604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009604:	b480      	push	{r7}
 8009606:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009608:	4b04      	ldr	r3, [pc, #16]	@ (800961c <vTaskSuspendAll+0x18>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3301      	adds	r3, #1
 800960e:	4a03      	ldr	r2, [pc, #12]	@ (800961c <vTaskSuspendAll+0x18>)
 8009610:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009612:	bf00      	nop
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	24004394 	.word	0x24004394

08009620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009626:	2300      	movs	r3, #0
 8009628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800962a:	2300      	movs	r3, #0
 800962c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800962e:	4b42      	ldr	r3, [pc, #264]	@ (8009738 <xTaskResumeAll+0x118>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10b      	bne.n	800964e <xTaskResumeAll+0x2e>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	603b      	str	r3, [r7, #0]
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	e7fd      	b.n	800964a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800964e:	f7ff fd4b 	bl	80090e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009652:	4b39      	ldr	r3, [pc, #228]	@ (8009738 <xTaskResumeAll+0x118>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3b01      	subs	r3, #1
 8009658:	4a37      	ldr	r2, [pc, #220]	@ (8009738 <xTaskResumeAll+0x118>)
 800965a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800965c:	4b36      	ldr	r3, [pc, #216]	@ (8009738 <xTaskResumeAll+0x118>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d162      	bne.n	800972a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009664:	4b35      	ldr	r3, [pc, #212]	@ (800973c <xTaskResumeAll+0x11c>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d05e      	beq.n	800972a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800966c:	e02f      	b.n	80096ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800966e:	4b34      	ldr	r3, [pc, #208]	@ (8009740 <xTaskResumeAll+0x120>)
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3318      	adds	r3, #24
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff fc90 	bl	8008fa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3304      	adds	r3, #4
 8009684:	4618      	mov	r0, r3
 8009686:	f7ff fc8b 	bl	8008fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800968e:	4b2d      	ldr	r3, [pc, #180]	@ (8009744 <xTaskResumeAll+0x124>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d903      	bls.n	800969e <xTaskResumeAll+0x7e>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969a:	4a2a      	ldr	r2, [pc, #168]	@ (8009744 <xTaskResumeAll+0x124>)
 800969c:	6013      	str	r3, [r2, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a2:	4613      	mov	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4413      	add	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4a27      	ldr	r2, [pc, #156]	@ (8009748 <xTaskResumeAll+0x128>)
 80096ac:	441a      	add	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3304      	adds	r3, #4
 80096b2:	4619      	mov	r1, r3
 80096b4:	4610      	mov	r0, r2
 80096b6:	f7ff fc16 	bl	8008ee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096be:	4b23      	ldr	r3, [pc, #140]	@ (800974c <xTaskResumeAll+0x12c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d302      	bcc.n	80096ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80096c8:	4b21      	ldr	r3, [pc, #132]	@ (8009750 <xTaskResumeAll+0x130>)
 80096ca:	2201      	movs	r2, #1
 80096cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009740 <xTaskResumeAll+0x120>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1cb      	bne.n	800966e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096dc:	f000 f996 	bl	8009a0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009754 <xTaskResumeAll+0x134>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d010      	beq.n	800970e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096ec:	f000 f836 	bl	800975c <xTaskIncrementTick>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80096f6:	4b16      	ldr	r3, [pc, #88]	@ (8009750 <xTaskResumeAll+0x130>)
 80096f8:	2201      	movs	r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3b01      	subs	r3, #1
 8009700:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1f1      	bne.n	80096ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009708:	4b12      	ldr	r3, [pc, #72]	@ (8009754 <xTaskResumeAll+0x134>)
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800970e:	4b10      	ldr	r3, [pc, #64]	@ (8009750 <xTaskResumeAll+0x130>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d009      	beq.n	800972a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009716:	2301      	movs	r3, #1
 8009718:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800971a:	4b0f      	ldr	r3, [pc, #60]	@ (8009758 <xTaskResumeAll+0x138>)
 800971c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800972a:	f7ff fd0f 	bl	800914c <vPortExitCritical>

	return xAlreadyYielded;
 800972e:	68bb      	ldr	r3, [r7, #8]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	24004394 	.word	0x24004394
 800973c:	24004370 	.word	0x24004370
 8009740:	24004334 	.word	0x24004334
 8009744:	24004378 	.word	0x24004378
 8009748:	24003ea4 	.word	0x24003ea4
 800974c:	24003ea0 	.word	0x24003ea0
 8009750:	24004384 	.word	0x24004384
 8009754:	24004380 	.word	0x24004380
 8009758:	e000ed04 	.word	0xe000ed04

0800975c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009766:	4b4f      	ldr	r3, [pc, #316]	@ (80098a4 <xTaskIncrementTick+0x148>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f040 8090 	bne.w	8009890 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009770:	4b4d      	ldr	r3, [pc, #308]	@ (80098a8 <xTaskIncrementTick+0x14c>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3301      	adds	r3, #1
 8009776:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009778:	4a4b      	ldr	r2, [pc, #300]	@ (80098a8 <xTaskIncrementTick+0x14c>)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d121      	bne.n	80097c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009784:	4b49      	ldr	r3, [pc, #292]	@ (80098ac <xTaskIncrementTick+0x150>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00b      	beq.n	80097a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	603b      	str	r3, [r7, #0]
}
 80097a0:	bf00      	nop
 80097a2:	bf00      	nop
 80097a4:	e7fd      	b.n	80097a2 <xTaskIncrementTick+0x46>
 80097a6:	4b41      	ldr	r3, [pc, #260]	@ (80098ac <xTaskIncrementTick+0x150>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	4b40      	ldr	r3, [pc, #256]	@ (80098b0 <xTaskIncrementTick+0x154>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a3e      	ldr	r2, [pc, #248]	@ (80098ac <xTaskIncrementTick+0x150>)
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	4a3e      	ldr	r2, [pc, #248]	@ (80098b0 <xTaskIncrementTick+0x154>)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6013      	str	r3, [r2, #0]
 80097ba:	4b3e      	ldr	r3, [pc, #248]	@ (80098b4 <xTaskIncrementTick+0x158>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3301      	adds	r3, #1
 80097c0:	4a3c      	ldr	r2, [pc, #240]	@ (80098b4 <xTaskIncrementTick+0x158>)
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	f000 f922 	bl	8009a0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097c8:	4b3b      	ldr	r3, [pc, #236]	@ (80098b8 <xTaskIncrementTick+0x15c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d349      	bcc.n	8009866 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097d2:	4b36      	ldr	r3, [pc, #216]	@ (80098ac <xTaskIncrementTick+0x150>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d104      	bne.n	80097e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097dc:	4b36      	ldr	r3, [pc, #216]	@ (80098b8 <xTaskIncrementTick+0x15c>)
 80097de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097e2:	601a      	str	r2, [r3, #0]
					break;
 80097e4:	e03f      	b.n	8009866 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097e6:	4b31      	ldr	r3, [pc, #196]	@ (80098ac <xTaskIncrementTick+0x150>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d203      	bcs.n	8009806 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097fe:	4a2e      	ldr	r2, [pc, #184]	@ (80098b8 <xTaskIncrementTick+0x15c>)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009804:	e02f      	b.n	8009866 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	3304      	adds	r3, #4
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff fbc8 	bl	8008fa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009814:	2b00      	cmp	r3, #0
 8009816:	d004      	beq.n	8009822 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	3318      	adds	r3, #24
 800981c:	4618      	mov	r0, r3
 800981e:	f7ff fbbf 	bl	8008fa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009826:	4b25      	ldr	r3, [pc, #148]	@ (80098bc <xTaskIncrementTick+0x160>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d903      	bls.n	8009836 <xTaskIncrementTick+0xda>
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009832:	4a22      	ldr	r2, [pc, #136]	@ (80098bc <xTaskIncrementTick+0x160>)
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4a1f      	ldr	r2, [pc, #124]	@ (80098c0 <xTaskIncrementTick+0x164>)
 8009844:	441a      	add	r2, r3
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	3304      	adds	r3, #4
 800984a:	4619      	mov	r1, r3
 800984c:	4610      	mov	r0, r2
 800984e:	f7ff fb4a 	bl	8008ee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009856:	4b1b      	ldr	r3, [pc, #108]	@ (80098c4 <xTaskIncrementTick+0x168>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985c:	429a      	cmp	r2, r3
 800985e:	d3b8      	bcc.n	80097d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009860:	2301      	movs	r3, #1
 8009862:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009864:	e7b5      	b.n	80097d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009866:	4b17      	ldr	r3, [pc, #92]	@ (80098c4 <xTaskIncrementTick+0x168>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986c:	4914      	ldr	r1, [pc, #80]	@ (80098c0 <xTaskIncrementTick+0x164>)
 800986e:	4613      	mov	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	440b      	add	r3, r1
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d901      	bls.n	8009882 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800987e:	2301      	movs	r3, #1
 8009880:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009882:	4b11      	ldr	r3, [pc, #68]	@ (80098c8 <xTaskIncrementTick+0x16c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800988a:	2301      	movs	r3, #1
 800988c:	617b      	str	r3, [r7, #20]
 800988e:	e004      	b.n	800989a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009890:	4b0e      	ldr	r3, [pc, #56]	@ (80098cc <xTaskIncrementTick+0x170>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	3301      	adds	r3, #1
 8009896:	4a0d      	ldr	r2, [pc, #52]	@ (80098cc <xTaskIncrementTick+0x170>)
 8009898:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800989a:	697b      	ldr	r3, [r7, #20]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3718      	adds	r7, #24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	24004394 	.word	0x24004394
 80098a8:	24004374 	.word	0x24004374
 80098ac:	2400432c 	.word	0x2400432c
 80098b0:	24004330 	.word	0x24004330
 80098b4:	24004388 	.word	0x24004388
 80098b8:	24004390 	.word	0x24004390
 80098bc:	24004378 	.word	0x24004378
 80098c0:	24003ea4 	.word	0x24003ea4
 80098c4:	24003ea0 	.word	0x24003ea0
 80098c8:	24004384 	.word	0x24004384
 80098cc:	24004380 	.word	0x24004380

080098d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098d6:	4b28      	ldr	r3, [pc, #160]	@ (8009978 <vTaskSwitchContext+0xa8>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098de:	4b27      	ldr	r3, [pc, #156]	@ (800997c <vTaskSwitchContext+0xac>)
 80098e0:	2201      	movs	r2, #1
 80098e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098e4:	e042      	b.n	800996c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80098e6:	4b25      	ldr	r3, [pc, #148]	@ (800997c <vTaskSwitchContext+0xac>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ec:	4b24      	ldr	r3, [pc, #144]	@ (8009980 <vTaskSwitchContext+0xb0>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	60fb      	str	r3, [r7, #12]
 80098f2:	e011      	b.n	8009918 <vTaskSwitchContext+0x48>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10b      	bne.n	8009912 <vTaskSwitchContext+0x42>
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	607b      	str	r3, [r7, #4]
}
 800990c:	bf00      	nop
 800990e:	bf00      	nop
 8009910:	e7fd      	b.n	800990e <vTaskSwitchContext+0x3e>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3b01      	subs	r3, #1
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	491a      	ldr	r1, [pc, #104]	@ (8009984 <vTaskSwitchContext+0xb4>)
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	4613      	mov	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	440b      	add	r3, r1
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d0e3      	beq.n	80098f4 <vTaskSwitchContext+0x24>
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	4613      	mov	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4a13      	ldr	r2, [pc, #76]	@ (8009984 <vTaskSwitchContext+0xb4>)
 8009938:	4413      	add	r3, r2
 800993a:	60bb      	str	r3, [r7, #8]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	605a      	str	r2, [r3, #4]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	3308      	adds	r3, #8
 800994e:	429a      	cmp	r2, r3
 8009950:	d104      	bne.n	800995c <vTaskSwitchContext+0x8c>
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	605a      	str	r2, [r3, #4]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	4a09      	ldr	r2, [pc, #36]	@ (8009988 <vTaskSwitchContext+0xb8>)
 8009964:	6013      	str	r3, [r2, #0]
 8009966:	4a06      	ldr	r2, [pc, #24]	@ (8009980 <vTaskSwitchContext+0xb0>)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6013      	str	r3, [r2, #0]
}
 800996c:	bf00      	nop
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	24004394 	.word	0x24004394
 800997c:	24004384 	.word	0x24004384
 8009980:	24004378 	.word	0x24004378
 8009984:	24003ea4 	.word	0x24003ea4
 8009988:	24003ea0 	.word	0x24003ea0

0800998c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009992:	2300      	movs	r3, #0
 8009994:	607b      	str	r3, [r7, #4]
 8009996:	e00c      	b.n	80099b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	4613      	mov	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4a12      	ldr	r2, [pc, #72]	@ (80099ec <prvInitialiseTaskLists+0x60>)
 80099a4:	4413      	add	r3, r2
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff fa70 	bl	8008e8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	3301      	adds	r3, #1
 80099b0:	607b      	str	r3, [r7, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b37      	cmp	r3, #55	@ 0x37
 80099b6:	d9ef      	bls.n	8009998 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099b8:	480d      	ldr	r0, [pc, #52]	@ (80099f0 <prvInitialiseTaskLists+0x64>)
 80099ba:	f7ff fa67 	bl	8008e8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099be:	480d      	ldr	r0, [pc, #52]	@ (80099f4 <prvInitialiseTaskLists+0x68>)
 80099c0:	f7ff fa64 	bl	8008e8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099c4:	480c      	ldr	r0, [pc, #48]	@ (80099f8 <prvInitialiseTaskLists+0x6c>)
 80099c6:	f7ff fa61 	bl	8008e8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099ca:	480c      	ldr	r0, [pc, #48]	@ (80099fc <prvInitialiseTaskLists+0x70>)
 80099cc:	f7ff fa5e 	bl	8008e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099d0:	480b      	ldr	r0, [pc, #44]	@ (8009a00 <prvInitialiseTaskLists+0x74>)
 80099d2:	f7ff fa5b 	bl	8008e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80099d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009a04 <prvInitialiseTaskLists+0x78>)
 80099d8:	4a05      	ldr	r2, [pc, #20]	@ (80099f0 <prvInitialiseTaskLists+0x64>)
 80099da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009a08 <prvInitialiseTaskLists+0x7c>)
 80099de:	4a05      	ldr	r2, [pc, #20]	@ (80099f4 <prvInitialiseTaskLists+0x68>)
 80099e0:	601a      	str	r2, [r3, #0]
}
 80099e2:	bf00      	nop
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	24003ea4 	.word	0x24003ea4
 80099f0:	24004304 	.word	0x24004304
 80099f4:	24004318 	.word	0x24004318
 80099f8:	24004334 	.word	0x24004334
 80099fc:	24004348 	.word	0x24004348
 8009a00:	2400435c 	.word	0x2400435c
 8009a04:	2400432c 	.word	0x2400432c
 8009a08:	24004330 	.word	0x24004330

08009a0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a12:	4b0c      	ldr	r3, [pc, #48]	@ (8009a44 <prvResetNextTaskUnblockTime+0x38>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d104      	bne.n	8009a26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a48 <prvResetNextTaskUnblockTime+0x3c>)
 8009a1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a24:	e008      	b.n	8009a38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a26:	4b07      	ldr	r3, [pc, #28]	@ (8009a44 <prvResetNextTaskUnblockTime+0x38>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	4a04      	ldr	r2, [pc, #16]	@ (8009a48 <prvResetNextTaskUnblockTime+0x3c>)
 8009a36:	6013      	str	r3, [r2, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	2400432c 	.word	0x2400432c
 8009a48:	24004390 	.word	0x24004390

08009a4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a52:	4b0b      	ldr	r3, [pc, #44]	@ (8009a80 <xTaskGetSchedulerState+0x34>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d102      	bne.n	8009a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	607b      	str	r3, [r7, #4]
 8009a5e:	e008      	b.n	8009a72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a60:	4b08      	ldr	r3, [pc, #32]	@ (8009a84 <xTaskGetSchedulerState+0x38>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d102      	bne.n	8009a6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a68:	2302      	movs	r3, #2
 8009a6a:	607b      	str	r3, [r7, #4]
 8009a6c:	e001      	b.n	8009a72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a72:	687b      	ldr	r3, [r7, #4]
	}
 8009a74:	4618      	mov	r0, r3
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	2400437c 	.word	0x2400437c
 8009a84:	24004394 	.word	0x24004394

08009a88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a92:	4b21      	ldr	r3, [pc, #132]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a98:	4b20      	ldr	r3, [pc, #128]	@ (8009b1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff fa7e 	bl	8008fa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009aaa:	d10a      	bne.n	8009ac2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d007      	beq.n	8009ac2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8009b1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4819      	ldr	r0, [pc, #100]	@ (8009b20 <prvAddCurrentTaskToDelayedList+0x98>)
 8009abc:	f7ff fa13 	bl	8008ee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ac0:	e026      	b.n	8009b10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009aca:	4b14      	ldr	r3, [pc, #80]	@ (8009b1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d209      	bcs.n	8009aee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ada:	4b12      	ldr	r3, [pc, #72]	@ (8009b24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	4b0f      	ldr	r3, [pc, #60]	@ (8009b1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	f7ff fa21 	bl	8008f2e <vListInsert>
}
 8009aec:	e010      	b.n	8009b10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aee:	4b0e      	ldr	r3, [pc, #56]	@ (8009b28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	4b0a      	ldr	r3, [pc, #40]	@ (8009b1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3304      	adds	r3, #4
 8009af8:	4619      	mov	r1, r3
 8009afa:	4610      	mov	r0, r2
 8009afc:	f7ff fa17 	bl	8008f2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b00:	4b0a      	ldr	r3, [pc, #40]	@ (8009b2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d202      	bcs.n	8009b10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b0a:	4a08      	ldr	r2, [pc, #32]	@ (8009b2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	6013      	str	r3, [r2, #0]
}
 8009b10:	bf00      	nop
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	24004374 	.word	0x24004374
 8009b1c:	24003ea0 	.word	0x24003ea0
 8009b20:	2400435c 	.word	0x2400435c
 8009b24:	24004330 	.word	0x24004330
 8009b28:	2400432c 	.word	0x2400432c
 8009b2c:	24004390 	.word	0x24004390

08009b30 <idle_task>:
#include "task_header.h"

void idle_task(void *argument)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
	while (1){
 8009b38:	bf00      	nop
 8009b3a:	e7fd      	b.n	8009b38 <idle_task+0x8>

08009b3c <batterie_task>:
#include "batteries_task.h"

extern osThreadId_t batterieHandle;

void batterie_task(void *argument)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
	//setup

	int adc_reading = 0;
 8009b44:	2300      	movs	r3, #0
 8009b46:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_IT(&huart3, "Batt\n", 6);
 8009b48:	2206      	movs	r2, #6
 8009b4a:	490b      	ldr	r1, [pc, #44]	@ (8009b78 <batterie_task+0x3c>)
 8009b4c:	480b      	ldr	r0, [pc, #44]	@ (8009b7c <batterie_task+0x40>)
 8009b4e:	f7fd fbeb 	bl	8007328 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		HAL_ADC_Start_IT(&hadc1);
 8009b52:	480b      	ldr	r0, [pc, #44]	@ (8009b80 <batterie_task+0x44>)
 8009b54:	f7f8 f87e 	bl	8001c54 <HAL_ADC_Start_IT>
		osThreadYield();
 8009b58:	f7fe ff6e 	bl	8008a38 <osThreadYield>

		adc_reading = HAL_ADC_GetValue(&hadc1);
 8009b5c:	4808      	ldr	r0, [pc, #32]	@ (8009b80 <batterie_task+0x44>)
 8009b5e:	f7f8 f9b7 	bl	8001ed0 <HAL_ADC_GetValue>
 8009b62:	4603      	mov	r3, r0
 8009b64:	60fb      	str	r3, [r7, #12]

			// Process ADC value (e.g., print or use)
		printf("ADC Value: %lu\r\n", adc_reading);
 8009b66:	68f9      	ldr	r1, [r7, #12]
 8009b68:	4806      	ldr	r0, [pc, #24]	@ (8009b84 <batterie_task+0x48>)
 8009b6a:	f000 f929 	bl	8009dc0 <iprintf>

			// Start next conversion
		osDelay(ADC_SAMPLE_PERIOD_UC);
 8009b6e:	4806      	ldr	r0, [pc, #24]	@ (8009b88 <batterie_task+0x4c>)
 8009b70:	f7fe ff82 	bl	8008a78 <osDelay>
	{
 8009b74:	bf00      	nop
 8009b76:	e7ec      	b.n	8009b52 <batterie_task+0x16>
 8009b78:	0800aaf0 	.word	0x0800aaf0
 8009b7c:	240001e4 	.word	0x240001e4
 8009b80:	2400008c 	.word	0x2400008c
 8009b84:	0800aaf8 	.word	0x0800aaf8
 8009b88:	000927c0 	.word	0x000927c0

08009b8c <cnss_task>:
 */

#include "cnss_task.h"

void cnss_task(void *argument)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit_IT(&huart3, "Gnss\n", 6);
 8009b94:	2206      	movs	r2, #6
 8009b96:	4904      	ldr	r1, [pc, #16]	@ (8009ba8 <cnss_task+0x1c>)
 8009b98:	4804      	ldr	r0, [pc, #16]	@ (8009bac <cnss_task+0x20>)
 8009b9a:	f7fd fbc5 	bl	8007328 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 8009b9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ba2:	f7fe ff69 	bl	8008a78 <osDelay>
 8009ba6:	e7fa      	b.n	8009b9e <cnss_task+0x12>
 8009ba8:	0800ab0c 	.word	0x0800ab0c
 8009bac:	240001e4 	.word	0x240001e4

08009bb0 <imu_task>:
 */

#include "imu_task.h"

void imu_task(void *argument)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
	//setup
	HAL_UART_Transmit_IT(&huart3, "IMU\n", 5);
 8009bb8:	2205      	movs	r2, #5
 8009bba:	4903      	ldr	r1, [pc, #12]	@ (8009bc8 <imu_task+0x18>)
 8009bbc:	4803      	ldr	r0, [pc, #12]	@ (8009bcc <imu_task+0x1c>)
 8009bbe:	f7fd fbb3 	bl	8007328 <HAL_UART_Transmit_IT>

	//imu_spi_write(0x10, 0x40); // CTRL1_XL: ODR_XL = 104 Hz, FS = ±2g
	//imu_spi_write(0x11, 0x4C); // CTRL2_G: ODR_G = 104 Hz, FS = 2000 dps

	//loop
	while(1)
 8009bc2:	bf00      	nop
 8009bc4:	e7fd      	b.n	8009bc2 <imu_task+0x12>
 8009bc6:	bf00      	nop
 8009bc8:	0800ab14 	.word	0x0800ab14
 8009bcc:	240001e4 	.word	0x240001e4

08009bd0 <nb_iot_task>:
 */

#include "nb_iot_task.h"

void nb_iot_task(void *argument)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit_IT(&huart3, "NB-Iot\n", 8);
 8009bd8:	2208      	movs	r2, #8
 8009bda:	4904      	ldr	r1, [pc, #16]	@ (8009bec <nb_iot_task+0x1c>)
 8009bdc:	4804      	ldr	r0, [pc, #16]	@ (8009bf0 <nb_iot_task+0x20>)
 8009bde:	f7fd fba3 	bl	8007328 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 8009be2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009be6:	f7fe ff47 	bl	8008a78 <osDelay>
 8009bea:	e7fa      	b.n	8009be2 <nb_iot_task+0x12>
 8009bec:	0800ab1c 	.word	0x0800ab1c
 8009bf0:	240001e4 	.word	0x240001e4

08009bf4 <sd_card_task>:
 *  Created on: Apr 23, 2025
 *      Author: viny
 */
#include "sd_card_task.h"
void sd_card_task(void *argument)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit_IT(&huart3, "SD-Card\n", 9);
 8009bfc:	2209      	movs	r2, #9
 8009bfe:	4904      	ldr	r1, [pc, #16]	@ (8009c10 <sd_card_task+0x1c>)
 8009c00:	4804      	ldr	r0, [pc, #16]	@ (8009c14 <sd_card_task+0x20>)
 8009c02:	f7fd fb91 	bl	8007328 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		osDelay(DELAY_MAX);
 8009c06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c0a:	f7fe ff35 	bl	8008a78 <osDelay>
 8009c0e:	e7fa      	b.n	8009c06 <sd_card_task+0x12>
 8009c10:	0800ab24 	.word	0x0800ab24
 8009c14:	240001e4 	.word	0x240001e4

08009c18 <temp_task>:
 */

#include "temp_task.h"

void temp_task(void *argument)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
	//setup

	HAL_UART_Transmit_IT(&huart3, "Temp\n", 6);
 8009c20:	2206      	movs	r2, #6
 8009c22:	4904      	ldr	r1, [pc, #16]	@ (8009c34 <temp_task+0x1c>)
 8009c24:	4804      	ldr	r0, [pc, #16]	@ (8009c38 <temp_task+0x20>)
 8009c26:	f7fd fb7f 	bl	8007328 <HAL_UART_Transmit_IT>
	//loop
	while(1)
	{
		//one wire comunication
		osDelay(DELAY_MAX);
 8009c2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c2e:	f7fe ff23 	bl	8008a78 <osDelay>
 8009c32:	e7fa      	b.n	8009c2a <temp_task+0x12>
 8009c34:	0800ab30 	.word	0x0800ab30
 8009c38:	240001e4 	.word	0x240001e4

08009c3c <std>:
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	b510      	push	{r4, lr}
 8009c40:	4604      	mov	r4, r0
 8009c42:	e9c0 3300 	strd	r3, r3, [r0]
 8009c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c4a:	6083      	str	r3, [r0, #8]
 8009c4c:	8181      	strh	r1, [r0, #12]
 8009c4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c50:	81c2      	strh	r2, [r0, #14]
 8009c52:	6183      	str	r3, [r0, #24]
 8009c54:	4619      	mov	r1, r3
 8009c56:	2208      	movs	r2, #8
 8009c58:	305c      	adds	r0, #92	@ 0x5c
 8009c5a:	f000 f906 	bl	8009e6a <memset>
 8009c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c94 <std+0x58>)
 8009c60:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c62:	4b0d      	ldr	r3, [pc, #52]	@ (8009c98 <std+0x5c>)
 8009c64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c66:	4b0d      	ldr	r3, [pc, #52]	@ (8009c9c <std+0x60>)
 8009c68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ca0 <std+0x64>)
 8009c6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ca4 <std+0x68>)
 8009c70:	6224      	str	r4, [r4, #32]
 8009c72:	429c      	cmp	r4, r3
 8009c74:	d006      	beq.n	8009c84 <std+0x48>
 8009c76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c7a:	4294      	cmp	r4, r2
 8009c7c:	d002      	beq.n	8009c84 <std+0x48>
 8009c7e:	33d0      	adds	r3, #208	@ 0xd0
 8009c80:	429c      	cmp	r4, r3
 8009c82:	d105      	bne.n	8009c90 <std+0x54>
 8009c84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c8c:	f000 b966 	b.w	8009f5c <__retarget_lock_init_recursive>
 8009c90:	bd10      	pop	{r4, pc}
 8009c92:	bf00      	nop
 8009c94:	08009de5 	.word	0x08009de5
 8009c98:	08009e07 	.word	0x08009e07
 8009c9c:	08009e3f 	.word	0x08009e3f
 8009ca0:	08009e63 	.word	0x08009e63
 8009ca4:	24004398 	.word	0x24004398

08009ca8 <stdio_exit_handler>:
 8009ca8:	4a02      	ldr	r2, [pc, #8]	@ (8009cb4 <stdio_exit_handler+0xc>)
 8009caa:	4903      	ldr	r1, [pc, #12]	@ (8009cb8 <stdio_exit_handler+0x10>)
 8009cac:	4803      	ldr	r0, [pc, #12]	@ (8009cbc <stdio_exit_handler+0x14>)
 8009cae:	f000 b869 	b.w	8009d84 <_fwalk_sglue>
 8009cb2:	bf00      	nop
 8009cb4:	24000014 	.word	0x24000014
 8009cb8:	0800a7f9 	.word	0x0800a7f9
 8009cbc:	24000024 	.word	0x24000024

08009cc0 <cleanup_stdio>:
 8009cc0:	6841      	ldr	r1, [r0, #4]
 8009cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8009cf4 <cleanup_stdio+0x34>)
 8009cc4:	4299      	cmp	r1, r3
 8009cc6:	b510      	push	{r4, lr}
 8009cc8:	4604      	mov	r4, r0
 8009cca:	d001      	beq.n	8009cd0 <cleanup_stdio+0x10>
 8009ccc:	f000 fd94 	bl	800a7f8 <_fflush_r>
 8009cd0:	68a1      	ldr	r1, [r4, #8]
 8009cd2:	4b09      	ldr	r3, [pc, #36]	@ (8009cf8 <cleanup_stdio+0x38>)
 8009cd4:	4299      	cmp	r1, r3
 8009cd6:	d002      	beq.n	8009cde <cleanup_stdio+0x1e>
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 fd8d 	bl	800a7f8 <_fflush_r>
 8009cde:	68e1      	ldr	r1, [r4, #12]
 8009ce0:	4b06      	ldr	r3, [pc, #24]	@ (8009cfc <cleanup_stdio+0x3c>)
 8009ce2:	4299      	cmp	r1, r3
 8009ce4:	d004      	beq.n	8009cf0 <cleanup_stdio+0x30>
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cec:	f000 bd84 	b.w	800a7f8 <_fflush_r>
 8009cf0:	bd10      	pop	{r4, pc}
 8009cf2:	bf00      	nop
 8009cf4:	24004398 	.word	0x24004398
 8009cf8:	24004400 	.word	0x24004400
 8009cfc:	24004468 	.word	0x24004468

08009d00 <global_stdio_init.part.0>:
 8009d00:	b510      	push	{r4, lr}
 8009d02:	4b0b      	ldr	r3, [pc, #44]	@ (8009d30 <global_stdio_init.part.0+0x30>)
 8009d04:	4c0b      	ldr	r4, [pc, #44]	@ (8009d34 <global_stdio_init.part.0+0x34>)
 8009d06:	4a0c      	ldr	r2, [pc, #48]	@ (8009d38 <global_stdio_init.part.0+0x38>)
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2104      	movs	r1, #4
 8009d10:	f7ff ff94 	bl	8009c3c <std>
 8009d14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d18:	2201      	movs	r2, #1
 8009d1a:	2109      	movs	r1, #9
 8009d1c:	f7ff ff8e 	bl	8009c3c <std>
 8009d20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d24:	2202      	movs	r2, #2
 8009d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d2a:	2112      	movs	r1, #18
 8009d2c:	f7ff bf86 	b.w	8009c3c <std>
 8009d30:	240044d0 	.word	0x240044d0
 8009d34:	24004398 	.word	0x24004398
 8009d38:	08009ca9 	.word	0x08009ca9

08009d3c <__sfp_lock_acquire>:
 8009d3c:	4801      	ldr	r0, [pc, #4]	@ (8009d44 <__sfp_lock_acquire+0x8>)
 8009d3e:	f000 b90e 	b.w	8009f5e <__retarget_lock_acquire_recursive>
 8009d42:	bf00      	nop
 8009d44:	240044d9 	.word	0x240044d9

08009d48 <__sfp_lock_release>:
 8009d48:	4801      	ldr	r0, [pc, #4]	@ (8009d50 <__sfp_lock_release+0x8>)
 8009d4a:	f000 b909 	b.w	8009f60 <__retarget_lock_release_recursive>
 8009d4e:	bf00      	nop
 8009d50:	240044d9 	.word	0x240044d9

08009d54 <__sinit>:
 8009d54:	b510      	push	{r4, lr}
 8009d56:	4604      	mov	r4, r0
 8009d58:	f7ff fff0 	bl	8009d3c <__sfp_lock_acquire>
 8009d5c:	6a23      	ldr	r3, [r4, #32]
 8009d5e:	b11b      	cbz	r3, 8009d68 <__sinit+0x14>
 8009d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d64:	f7ff bff0 	b.w	8009d48 <__sfp_lock_release>
 8009d68:	4b04      	ldr	r3, [pc, #16]	@ (8009d7c <__sinit+0x28>)
 8009d6a:	6223      	str	r3, [r4, #32]
 8009d6c:	4b04      	ldr	r3, [pc, #16]	@ (8009d80 <__sinit+0x2c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1f5      	bne.n	8009d60 <__sinit+0xc>
 8009d74:	f7ff ffc4 	bl	8009d00 <global_stdio_init.part.0>
 8009d78:	e7f2      	b.n	8009d60 <__sinit+0xc>
 8009d7a:	bf00      	nop
 8009d7c:	08009cc1 	.word	0x08009cc1
 8009d80:	240044d0 	.word	0x240044d0

08009d84 <_fwalk_sglue>:
 8009d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d88:	4607      	mov	r7, r0
 8009d8a:	4688      	mov	r8, r1
 8009d8c:	4614      	mov	r4, r2
 8009d8e:	2600      	movs	r6, #0
 8009d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d94:	f1b9 0901 	subs.w	r9, r9, #1
 8009d98:	d505      	bpl.n	8009da6 <_fwalk_sglue+0x22>
 8009d9a:	6824      	ldr	r4, [r4, #0]
 8009d9c:	2c00      	cmp	r4, #0
 8009d9e:	d1f7      	bne.n	8009d90 <_fwalk_sglue+0xc>
 8009da0:	4630      	mov	r0, r6
 8009da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da6:	89ab      	ldrh	r3, [r5, #12]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d907      	bls.n	8009dbc <_fwalk_sglue+0x38>
 8009dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009db0:	3301      	adds	r3, #1
 8009db2:	d003      	beq.n	8009dbc <_fwalk_sglue+0x38>
 8009db4:	4629      	mov	r1, r5
 8009db6:	4638      	mov	r0, r7
 8009db8:	47c0      	blx	r8
 8009dba:	4306      	orrs	r6, r0
 8009dbc:	3568      	adds	r5, #104	@ 0x68
 8009dbe:	e7e9      	b.n	8009d94 <_fwalk_sglue+0x10>

08009dc0 <iprintf>:
 8009dc0:	b40f      	push	{r0, r1, r2, r3}
 8009dc2:	b507      	push	{r0, r1, r2, lr}
 8009dc4:	4906      	ldr	r1, [pc, #24]	@ (8009de0 <iprintf+0x20>)
 8009dc6:	ab04      	add	r3, sp, #16
 8009dc8:	6808      	ldr	r0, [r1, #0]
 8009dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dce:	6881      	ldr	r1, [r0, #8]
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	f000 f9e9 	bl	800a1a8 <_vfiprintf_r>
 8009dd6:	b003      	add	sp, #12
 8009dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ddc:	b004      	add	sp, #16
 8009dde:	4770      	bx	lr
 8009de0:	24000020 	.word	0x24000020

08009de4 <__sread>:
 8009de4:	b510      	push	{r4, lr}
 8009de6:	460c      	mov	r4, r1
 8009de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dec:	f000 f868 	bl	8009ec0 <_read_r>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	bfab      	itete	ge
 8009df4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009df6:	89a3      	ldrhlt	r3, [r4, #12]
 8009df8:	181b      	addge	r3, r3, r0
 8009dfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009dfe:	bfac      	ite	ge
 8009e00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e02:	81a3      	strhlt	r3, [r4, #12]
 8009e04:	bd10      	pop	{r4, pc}

08009e06 <__swrite>:
 8009e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0a:	461f      	mov	r7, r3
 8009e0c:	898b      	ldrh	r3, [r1, #12]
 8009e0e:	05db      	lsls	r3, r3, #23
 8009e10:	4605      	mov	r5, r0
 8009e12:	460c      	mov	r4, r1
 8009e14:	4616      	mov	r6, r2
 8009e16:	d505      	bpl.n	8009e24 <__swrite+0x1e>
 8009e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f000 f83c 	bl	8009e9c <_lseek_r>
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e2e:	81a3      	strh	r3, [r4, #12]
 8009e30:	4632      	mov	r2, r6
 8009e32:	463b      	mov	r3, r7
 8009e34:	4628      	mov	r0, r5
 8009e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3a:	f000 b853 	b.w	8009ee4 <_write_r>

08009e3e <__sseek>:
 8009e3e:	b510      	push	{r4, lr}
 8009e40:	460c      	mov	r4, r1
 8009e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e46:	f000 f829 	bl	8009e9c <_lseek_r>
 8009e4a:	1c43      	adds	r3, r0, #1
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	bf15      	itete	ne
 8009e50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e5a:	81a3      	strheq	r3, [r4, #12]
 8009e5c:	bf18      	it	ne
 8009e5e:	81a3      	strhne	r3, [r4, #12]
 8009e60:	bd10      	pop	{r4, pc}

08009e62 <__sclose>:
 8009e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e66:	f000 b809 	b.w	8009e7c <_close_r>

08009e6a <memset>:
 8009e6a:	4402      	add	r2, r0
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d100      	bne.n	8009e74 <memset+0xa>
 8009e72:	4770      	bx	lr
 8009e74:	f803 1b01 	strb.w	r1, [r3], #1
 8009e78:	e7f9      	b.n	8009e6e <memset+0x4>
	...

08009e7c <_close_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d06      	ldr	r5, [pc, #24]	@ (8009e98 <_close_r+0x1c>)
 8009e80:	2300      	movs	r3, #0
 8009e82:	4604      	mov	r4, r0
 8009e84:	4608      	mov	r0, r1
 8009e86:	602b      	str	r3, [r5, #0]
 8009e88:	f7f7 f999 	bl	80011be <_close>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d102      	bne.n	8009e96 <_close_r+0x1a>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b103      	cbz	r3, 8009e96 <_close_r+0x1a>
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	240044d4 	.word	0x240044d4

08009e9c <_lseek_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d07      	ldr	r5, [pc, #28]	@ (8009ebc <_lseek_r+0x20>)
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	4608      	mov	r0, r1
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	602a      	str	r2, [r5, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f7f7 f9ae 	bl	800120c <_lseek>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	d102      	bne.n	8009eba <_lseek_r+0x1e>
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	b103      	cbz	r3, 8009eba <_lseek_r+0x1e>
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	240044d4 	.word	0x240044d4

08009ec0 <_read_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4d07      	ldr	r5, [pc, #28]	@ (8009ee0 <_read_r+0x20>)
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	4608      	mov	r0, r1
 8009ec8:	4611      	mov	r1, r2
 8009eca:	2200      	movs	r2, #0
 8009ecc:	602a      	str	r2, [r5, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f7f7 f93c 	bl	800114c <_read>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d102      	bne.n	8009ede <_read_r+0x1e>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	b103      	cbz	r3, 8009ede <_read_r+0x1e>
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	bd38      	pop	{r3, r4, r5, pc}
 8009ee0:	240044d4 	.word	0x240044d4

08009ee4 <_write_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4d07      	ldr	r5, [pc, #28]	@ (8009f04 <_write_r+0x20>)
 8009ee8:	4604      	mov	r4, r0
 8009eea:	4608      	mov	r0, r1
 8009eec:	4611      	mov	r1, r2
 8009eee:	2200      	movs	r2, #0
 8009ef0:	602a      	str	r2, [r5, #0]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f7f7 f947 	bl	8001186 <_write>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_write_r+0x1e>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_write_r+0x1e>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	240044d4 	.word	0x240044d4

08009f08 <__errno>:
 8009f08:	4b01      	ldr	r3, [pc, #4]	@ (8009f10 <__errno+0x8>)
 8009f0a:	6818      	ldr	r0, [r3, #0]
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	24000020 	.word	0x24000020

08009f14 <__libc_init_array>:
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	4d0d      	ldr	r5, [pc, #52]	@ (8009f4c <__libc_init_array+0x38>)
 8009f18:	4c0d      	ldr	r4, [pc, #52]	@ (8009f50 <__libc_init_array+0x3c>)
 8009f1a:	1b64      	subs	r4, r4, r5
 8009f1c:	10a4      	asrs	r4, r4, #2
 8009f1e:	2600      	movs	r6, #0
 8009f20:	42a6      	cmp	r6, r4
 8009f22:	d109      	bne.n	8009f38 <__libc_init_array+0x24>
 8009f24:	4d0b      	ldr	r5, [pc, #44]	@ (8009f54 <__libc_init_array+0x40>)
 8009f26:	4c0c      	ldr	r4, [pc, #48]	@ (8009f58 <__libc_init_array+0x44>)
 8009f28:	f000 fdb6 	bl	800aa98 <_init>
 8009f2c:	1b64      	subs	r4, r4, r5
 8009f2e:	10a4      	asrs	r4, r4, #2
 8009f30:	2600      	movs	r6, #0
 8009f32:	42a6      	cmp	r6, r4
 8009f34:	d105      	bne.n	8009f42 <__libc_init_array+0x2e>
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
 8009f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f3c:	4798      	blx	r3
 8009f3e:	3601      	adds	r6, #1
 8009f40:	e7ee      	b.n	8009f20 <__libc_init_array+0xc>
 8009f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f46:	4798      	blx	r3
 8009f48:	3601      	adds	r6, #1
 8009f4a:	e7f2      	b.n	8009f32 <__libc_init_array+0x1e>
 8009f4c:	0800aca8 	.word	0x0800aca8
 8009f50:	0800aca8 	.word	0x0800aca8
 8009f54:	0800aca8 	.word	0x0800aca8
 8009f58:	0800acac 	.word	0x0800acac

08009f5c <__retarget_lock_init_recursive>:
 8009f5c:	4770      	bx	lr

08009f5e <__retarget_lock_acquire_recursive>:
 8009f5e:	4770      	bx	lr

08009f60 <__retarget_lock_release_recursive>:
 8009f60:	4770      	bx	lr
	...

08009f64 <_free_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4605      	mov	r5, r0
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	d041      	beq.n	8009ff0 <_free_r+0x8c>
 8009f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f70:	1f0c      	subs	r4, r1, #4
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	bfb8      	it	lt
 8009f76:	18e4      	addlt	r4, r4, r3
 8009f78:	f000 f8e0 	bl	800a13c <__malloc_lock>
 8009f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ff4 <_free_r+0x90>)
 8009f7e:	6813      	ldr	r3, [r2, #0]
 8009f80:	b933      	cbnz	r3, 8009f90 <_free_r+0x2c>
 8009f82:	6063      	str	r3, [r4, #4]
 8009f84:	6014      	str	r4, [r2, #0]
 8009f86:	4628      	mov	r0, r5
 8009f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f8c:	f000 b8dc 	b.w	800a148 <__malloc_unlock>
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	d908      	bls.n	8009fa6 <_free_r+0x42>
 8009f94:	6820      	ldr	r0, [r4, #0]
 8009f96:	1821      	adds	r1, r4, r0
 8009f98:	428b      	cmp	r3, r1
 8009f9a:	bf01      	itttt	eq
 8009f9c:	6819      	ldreq	r1, [r3, #0]
 8009f9e:	685b      	ldreq	r3, [r3, #4]
 8009fa0:	1809      	addeq	r1, r1, r0
 8009fa2:	6021      	streq	r1, [r4, #0]
 8009fa4:	e7ed      	b.n	8009f82 <_free_r+0x1e>
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	b10b      	cbz	r3, 8009fb0 <_free_r+0x4c>
 8009fac:	42a3      	cmp	r3, r4
 8009fae:	d9fa      	bls.n	8009fa6 <_free_r+0x42>
 8009fb0:	6811      	ldr	r1, [r2, #0]
 8009fb2:	1850      	adds	r0, r2, r1
 8009fb4:	42a0      	cmp	r0, r4
 8009fb6:	d10b      	bne.n	8009fd0 <_free_r+0x6c>
 8009fb8:	6820      	ldr	r0, [r4, #0]
 8009fba:	4401      	add	r1, r0
 8009fbc:	1850      	adds	r0, r2, r1
 8009fbe:	4283      	cmp	r3, r0
 8009fc0:	6011      	str	r1, [r2, #0]
 8009fc2:	d1e0      	bne.n	8009f86 <_free_r+0x22>
 8009fc4:	6818      	ldr	r0, [r3, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	6053      	str	r3, [r2, #4]
 8009fca:	4408      	add	r0, r1
 8009fcc:	6010      	str	r0, [r2, #0]
 8009fce:	e7da      	b.n	8009f86 <_free_r+0x22>
 8009fd0:	d902      	bls.n	8009fd8 <_free_r+0x74>
 8009fd2:	230c      	movs	r3, #12
 8009fd4:	602b      	str	r3, [r5, #0]
 8009fd6:	e7d6      	b.n	8009f86 <_free_r+0x22>
 8009fd8:	6820      	ldr	r0, [r4, #0]
 8009fda:	1821      	adds	r1, r4, r0
 8009fdc:	428b      	cmp	r3, r1
 8009fde:	bf04      	itt	eq
 8009fe0:	6819      	ldreq	r1, [r3, #0]
 8009fe2:	685b      	ldreq	r3, [r3, #4]
 8009fe4:	6063      	str	r3, [r4, #4]
 8009fe6:	bf04      	itt	eq
 8009fe8:	1809      	addeq	r1, r1, r0
 8009fea:	6021      	streq	r1, [r4, #0]
 8009fec:	6054      	str	r4, [r2, #4]
 8009fee:	e7ca      	b.n	8009f86 <_free_r+0x22>
 8009ff0:	bd38      	pop	{r3, r4, r5, pc}
 8009ff2:	bf00      	nop
 8009ff4:	240044e0 	.word	0x240044e0

08009ff8 <sbrk_aligned>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	4e0f      	ldr	r6, [pc, #60]	@ (800a038 <sbrk_aligned+0x40>)
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	6831      	ldr	r1, [r6, #0]
 800a000:	4605      	mov	r5, r0
 800a002:	b911      	cbnz	r1, 800a00a <sbrk_aligned+0x12>
 800a004:	f000 fcb4 	bl	800a970 <_sbrk_r>
 800a008:	6030      	str	r0, [r6, #0]
 800a00a:	4621      	mov	r1, r4
 800a00c:	4628      	mov	r0, r5
 800a00e:	f000 fcaf 	bl	800a970 <_sbrk_r>
 800a012:	1c43      	adds	r3, r0, #1
 800a014:	d103      	bne.n	800a01e <sbrk_aligned+0x26>
 800a016:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a01a:	4620      	mov	r0, r4
 800a01c:	bd70      	pop	{r4, r5, r6, pc}
 800a01e:	1cc4      	adds	r4, r0, #3
 800a020:	f024 0403 	bic.w	r4, r4, #3
 800a024:	42a0      	cmp	r0, r4
 800a026:	d0f8      	beq.n	800a01a <sbrk_aligned+0x22>
 800a028:	1a21      	subs	r1, r4, r0
 800a02a:	4628      	mov	r0, r5
 800a02c:	f000 fca0 	bl	800a970 <_sbrk_r>
 800a030:	3001      	adds	r0, #1
 800a032:	d1f2      	bne.n	800a01a <sbrk_aligned+0x22>
 800a034:	e7ef      	b.n	800a016 <sbrk_aligned+0x1e>
 800a036:	bf00      	nop
 800a038:	240044dc 	.word	0x240044dc

0800a03c <_malloc_r>:
 800a03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a040:	1ccd      	adds	r5, r1, #3
 800a042:	f025 0503 	bic.w	r5, r5, #3
 800a046:	3508      	adds	r5, #8
 800a048:	2d0c      	cmp	r5, #12
 800a04a:	bf38      	it	cc
 800a04c:	250c      	movcc	r5, #12
 800a04e:	2d00      	cmp	r5, #0
 800a050:	4606      	mov	r6, r0
 800a052:	db01      	blt.n	800a058 <_malloc_r+0x1c>
 800a054:	42a9      	cmp	r1, r5
 800a056:	d904      	bls.n	800a062 <_malloc_r+0x26>
 800a058:	230c      	movs	r3, #12
 800a05a:	6033      	str	r3, [r6, #0]
 800a05c:	2000      	movs	r0, #0
 800a05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a062:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a138 <_malloc_r+0xfc>
 800a066:	f000 f869 	bl	800a13c <__malloc_lock>
 800a06a:	f8d8 3000 	ldr.w	r3, [r8]
 800a06e:	461c      	mov	r4, r3
 800a070:	bb44      	cbnz	r4, 800a0c4 <_malloc_r+0x88>
 800a072:	4629      	mov	r1, r5
 800a074:	4630      	mov	r0, r6
 800a076:	f7ff ffbf 	bl	8009ff8 <sbrk_aligned>
 800a07a:	1c43      	adds	r3, r0, #1
 800a07c:	4604      	mov	r4, r0
 800a07e:	d158      	bne.n	800a132 <_malloc_r+0xf6>
 800a080:	f8d8 4000 	ldr.w	r4, [r8]
 800a084:	4627      	mov	r7, r4
 800a086:	2f00      	cmp	r7, #0
 800a088:	d143      	bne.n	800a112 <_malloc_r+0xd6>
 800a08a:	2c00      	cmp	r4, #0
 800a08c:	d04b      	beq.n	800a126 <_malloc_r+0xea>
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	4639      	mov	r1, r7
 800a092:	4630      	mov	r0, r6
 800a094:	eb04 0903 	add.w	r9, r4, r3
 800a098:	f000 fc6a 	bl	800a970 <_sbrk_r>
 800a09c:	4581      	cmp	r9, r0
 800a09e:	d142      	bne.n	800a126 <_malloc_r+0xea>
 800a0a0:	6821      	ldr	r1, [r4, #0]
 800a0a2:	1a6d      	subs	r5, r5, r1
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	f7ff ffa6 	bl	8009ff8 <sbrk_aligned>
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d03a      	beq.n	800a126 <_malloc_r+0xea>
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	442b      	add	r3, r5
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	bb62      	cbnz	r2, 800a118 <_malloc_r+0xdc>
 800a0be:	f8c8 7000 	str.w	r7, [r8]
 800a0c2:	e00f      	b.n	800a0e4 <_malloc_r+0xa8>
 800a0c4:	6822      	ldr	r2, [r4, #0]
 800a0c6:	1b52      	subs	r2, r2, r5
 800a0c8:	d420      	bmi.n	800a10c <_malloc_r+0xd0>
 800a0ca:	2a0b      	cmp	r2, #11
 800a0cc:	d917      	bls.n	800a0fe <_malloc_r+0xc2>
 800a0ce:	1961      	adds	r1, r4, r5
 800a0d0:	42a3      	cmp	r3, r4
 800a0d2:	6025      	str	r5, [r4, #0]
 800a0d4:	bf18      	it	ne
 800a0d6:	6059      	strne	r1, [r3, #4]
 800a0d8:	6863      	ldr	r3, [r4, #4]
 800a0da:	bf08      	it	eq
 800a0dc:	f8c8 1000 	streq.w	r1, [r8]
 800a0e0:	5162      	str	r2, [r4, r5]
 800a0e2:	604b      	str	r3, [r1, #4]
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f000 f82f 	bl	800a148 <__malloc_unlock>
 800a0ea:	f104 000b 	add.w	r0, r4, #11
 800a0ee:	1d23      	adds	r3, r4, #4
 800a0f0:	f020 0007 	bic.w	r0, r0, #7
 800a0f4:	1ac2      	subs	r2, r0, r3
 800a0f6:	bf1c      	itt	ne
 800a0f8:	1a1b      	subne	r3, r3, r0
 800a0fa:	50a3      	strne	r3, [r4, r2]
 800a0fc:	e7af      	b.n	800a05e <_malloc_r+0x22>
 800a0fe:	6862      	ldr	r2, [r4, #4]
 800a100:	42a3      	cmp	r3, r4
 800a102:	bf0c      	ite	eq
 800a104:	f8c8 2000 	streq.w	r2, [r8]
 800a108:	605a      	strne	r2, [r3, #4]
 800a10a:	e7eb      	b.n	800a0e4 <_malloc_r+0xa8>
 800a10c:	4623      	mov	r3, r4
 800a10e:	6864      	ldr	r4, [r4, #4]
 800a110:	e7ae      	b.n	800a070 <_malloc_r+0x34>
 800a112:	463c      	mov	r4, r7
 800a114:	687f      	ldr	r7, [r7, #4]
 800a116:	e7b6      	b.n	800a086 <_malloc_r+0x4a>
 800a118:	461a      	mov	r2, r3
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	42a3      	cmp	r3, r4
 800a11e:	d1fb      	bne.n	800a118 <_malloc_r+0xdc>
 800a120:	2300      	movs	r3, #0
 800a122:	6053      	str	r3, [r2, #4]
 800a124:	e7de      	b.n	800a0e4 <_malloc_r+0xa8>
 800a126:	230c      	movs	r3, #12
 800a128:	6033      	str	r3, [r6, #0]
 800a12a:	4630      	mov	r0, r6
 800a12c:	f000 f80c 	bl	800a148 <__malloc_unlock>
 800a130:	e794      	b.n	800a05c <_malloc_r+0x20>
 800a132:	6005      	str	r5, [r0, #0]
 800a134:	e7d6      	b.n	800a0e4 <_malloc_r+0xa8>
 800a136:	bf00      	nop
 800a138:	240044e0 	.word	0x240044e0

0800a13c <__malloc_lock>:
 800a13c:	4801      	ldr	r0, [pc, #4]	@ (800a144 <__malloc_lock+0x8>)
 800a13e:	f7ff bf0e 	b.w	8009f5e <__retarget_lock_acquire_recursive>
 800a142:	bf00      	nop
 800a144:	240044d8 	.word	0x240044d8

0800a148 <__malloc_unlock>:
 800a148:	4801      	ldr	r0, [pc, #4]	@ (800a150 <__malloc_unlock+0x8>)
 800a14a:	f7ff bf09 	b.w	8009f60 <__retarget_lock_release_recursive>
 800a14e:	bf00      	nop
 800a150:	240044d8 	.word	0x240044d8

0800a154 <__sfputc_r>:
 800a154:	6893      	ldr	r3, [r2, #8]
 800a156:	3b01      	subs	r3, #1
 800a158:	2b00      	cmp	r3, #0
 800a15a:	b410      	push	{r4}
 800a15c:	6093      	str	r3, [r2, #8]
 800a15e:	da08      	bge.n	800a172 <__sfputc_r+0x1e>
 800a160:	6994      	ldr	r4, [r2, #24]
 800a162:	42a3      	cmp	r3, r4
 800a164:	db01      	blt.n	800a16a <__sfputc_r+0x16>
 800a166:	290a      	cmp	r1, #10
 800a168:	d103      	bne.n	800a172 <__sfputc_r+0x1e>
 800a16a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a16e:	f000 bb6b 	b.w	800a848 <__swbuf_r>
 800a172:	6813      	ldr	r3, [r2, #0]
 800a174:	1c58      	adds	r0, r3, #1
 800a176:	6010      	str	r0, [r2, #0]
 800a178:	7019      	strb	r1, [r3, #0]
 800a17a:	4608      	mov	r0, r1
 800a17c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <__sfputs_r>:
 800a182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a184:	4606      	mov	r6, r0
 800a186:	460f      	mov	r7, r1
 800a188:	4614      	mov	r4, r2
 800a18a:	18d5      	adds	r5, r2, r3
 800a18c:	42ac      	cmp	r4, r5
 800a18e:	d101      	bne.n	800a194 <__sfputs_r+0x12>
 800a190:	2000      	movs	r0, #0
 800a192:	e007      	b.n	800a1a4 <__sfputs_r+0x22>
 800a194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a198:	463a      	mov	r2, r7
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7ff ffda 	bl	800a154 <__sfputc_r>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d1f3      	bne.n	800a18c <__sfputs_r+0xa>
 800a1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1a8 <_vfiprintf_r>:
 800a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	b09d      	sub	sp, #116	@ 0x74
 800a1b0:	4614      	mov	r4, r2
 800a1b2:	4698      	mov	r8, r3
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	b118      	cbz	r0, 800a1c0 <_vfiprintf_r+0x18>
 800a1b8:	6a03      	ldr	r3, [r0, #32]
 800a1ba:	b90b      	cbnz	r3, 800a1c0 <_vfiprintf_r+0x18>
 800a1bc:	f7ff fdca 	bl	8009d54 <__sinit>
 800a1c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1c2:	07d9      	lsls	r1, r3, #31
 800a1c4:	d405      	bmi.n	800a1d2 <_vfiprintf_r+0x2a>
 800a1c6:	89ab      	ldrh	r3, [r5, #12]
 800a1c8:	059a      	lsls	r2, r3, #22
 800a1ca:	d402      	bmi.n	800a1d2 <_vfiprintf_r+0x2a>
 800a1cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1ce:	f7ff fec6 	bl	8009f5e <__retarget_lock_acquire_recursive>
 800a1d2:	89ab      	ldrh	r3, [r5, #12]
 800a1d4:	071b      	lsls	r3, r3, #28
 800a1d6:	d501      	bpl.n	800a1dc <_vfiprintf_r+0x34>
 800a1d8:	692b      	ldr	r3, [r5, #16]
 800a1da:	b99b      	cbnz	r3, 800a204 <_vfiprintf_r+0x5c>
 800a1dc:	4629      	mov	r1, r5
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f000 fb70 	bl	800a8c4 <__swsetup_r>
 800a1e4:	b170      	cbz	r0, 800a204 <_vfiprintf_r+0x5c>
 800a1e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1e8:	07dc      	lsls	r4, r3, #31
 800a1ea:	d504      	bpl.n	800a1f6 <_vfiprintf_r+0x4e>
 800a1ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1f0:	b01d      	add	sp, #116	@ 0x74
 800a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f6:	89ab      	ldrh	r3, [r5, #12]
 800a1f8:	0598      	lsls	r0, r3, #22
 800a1fa:	d4f7      	bmi.n	800a1ec <_vfiprintf_r+0x44>
 800a1fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1fe:	f7ff feaf 	bl	8009f60 <__retarget_lock_release_recursive>
 800a202:	e7f3      	b.n	800a1ec <_vfiprintf_r+0x44>
 800a204:	2300      	movs	r3, #0
 800a206:	9309      	str	r3, [sp, #36]	@ 0x24
 800a208:	2320      	movs	r3, #32
 800a20a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a20e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a212:	2330      	movs	r3, #48	@ 0x30
 800a214:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a3c4 <_vfiprintf_r+0x21c>
 800a218:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a21c:	f04f 0901 	mov.w	r9, #1
 800a220:	4623      	mov	r3, r4
 800a222:	469a      	mov	sl, r3
 800a224:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a228:	b10a      	cbz	r2, 800a22e <_vfiprintf_r+0x86>
 800a22a:	2a25      	cmp	r2, #37	@ 0x25
 800a22c:	d1f9      	bne.n	800a222 <_vfiprintf_r+0x7a>
 800a22e:	ebba 0b04 	subs.w	fp, sl, r4
 800a232:	d00b      	beq.n	800a24c <_vfiprintf_r+0xa4>
 800a234:	465b      	mov	r3, fp
 800a236:	4622      	mov	r2, r4
 800a238:	4629      	mov	r1, r5
 800a23a:	4630      	mov	r0, r6
 800a23c:	f7ff ffa1 	bl	800a182 <__sfputs_r>
 800a240:	3001      	adds	r0, #1
 800a242:	f000 80a7 	beq.w	800a394 <_vfiprintf_r+0x1ec>
 800a246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a248:	445a      	add	r2, fp
 800a24a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a24c:	f89a 3000 	ldrb.w	r3, [sl]
 800a250:	2b00      	cmp	r3, #0
 800a252:	f000 809f 	beq.w	800a394 <_vfiprintf_r+0x1ec>
 800a256:	2300      	movs	r3, #0
 800a258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a25c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a260:	f10a 0a01 	add.w	sl, sl, #1
 800a264:	9304      	str	r3, [sp, #16]
 800a266:	9307      	str	r3, [sp, #28]
 800a268:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a26c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a26e:	4654      	mov	r4, sl
 800a270:	2205      	movs	r2, #5
 800a272:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a276:	4853      	ldr	r0, [pc, #332]	@ (800a3c4 <_vfiprintf_r+0x21c>)
 800a278:	f7f6 f832 	bl	80002e0 <memchr>
 800a27c:	9a04      	ldr	r2, [sp, #16]
 800a27e:	b9d8      	cbnz	r0, 800a2b8 <_vfiprintf_r+0x110>
 800a280:	06d1      	lsls	r1, r2, #27
 800a282:	bf44      	itt	mi
 800a284:	2320      	movmi	r3, #32
 800a286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a28a:	0713      	lsls	r3, r2, #28
 800a28c:	bf44      	itt	mi
 800a28e:	232b      	movmi	r3, #43	@ 0x2b
 800a290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a294:	f89a 3000 	ldrb.w	r3, [sl]
 800a298:	2b2a      	cmp	r3, #42	@ 0x2a
 800a29a:	d015      	beq.n	800a2c8 <_vfiprintf_r+0x120>
 800a29c:	9a07      	ldr	r2, [sp, #28]
 800a29e:	4654      	mov	r4, sl
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	f04f 0c0a 	mov.w	ip, #10
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2ac:	3b30      	subs	r3, #48	@ 0x30
 800a2ae:	2b09      	cmp	r3, #9
 800a2b0:	d94b      	bls.n	800a34a <_vfiprintf_r+0x1a2>
 800a2b2:	b1b0      	cbz	r0, 800a2e2 <_vfiprintf_r+0x13a>
 800a2b4:	9207      	str	r2, [sp, #28]
 800a2b6:	e014      	b.n	800a2e2 <_vfiprintf_r+0x13a>
 800a2b8:	eba0 0308 	sub.w	r3, r0, r8
 800a2bc:	fa09 f303 	lsl.w	r3, r9, r3
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	9304      	str	r3, [sp, #16]
 800a2c4:	46a2      	mov	sl, r4
 800a2c6:	e7d2      	b.n	800a26e <_vfiprintf_r+0xc6>
 800a2c8:	9b03      	ldr	r3, [sp, #12]
 800a2ca:	1d19      	adds	r1, r3, #4
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	9103      	str	r1, [sp, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	bfbb      	ittet	lt
 800a2d4:	425b      	neglt	r3, r3
 800a2d6:	f042 0202 	orrlt.w	r2, r2, #2
 800a2da:	9307      	strge	r3, [sp, #28]
 800a2dc:	9307      	strlt	r3, [sp, #28]
 800a2de:	bfb8      	it	lt
 800a2e0:	9204      	strlt	r2, [sp, #16]
 800a2e2:	7823      	ldrb	r3, [r4, #0]
 800a2e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2e6:	d10a      	bne.n	800a2fe <_vfiprintf_r+0x156>
 800a2e8:	7863      	ldrb	r3, [r4, #1]
 800a2ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2ec:	d132      	bne.n	800a354 <_vfiprintf_r+0x1ac>
 800a2ee:	9b03      	ldr	r3, [sp, #12]
 800a2f0:	1d1a      	adds	r2, r3, #4
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	9203      	str	r2, [sp, #12]
 800a2f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2fa:	3402      	adds	r4, #2
 800a2fc:	9305      	str	r3, [sp, #20]
 800a2fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3d4 <_vfiprintf_r+0x22c>
 800a302:	7821      	ldrb	r1, [r4, #0]
 800a304:	2203      	movs	r2, #3
 800a306:	4650      	mov	r0, sl
 800a308:	f7f5 ffea 	bl	80002e0 <memchr>
 800a30c:	b138      	cbz	r0, 800a31e <_vfiprintf_r+0x176>
 800a30e:	9b04      	ldr	r3, [sp, #16]
 800a310:	eba0 000a 	sub.w	r0, r0, sl
 800a314:	2240      	movs	r2, #64	@ 0x40
 800a316:	4082      	lsls	r2, r0
 800a318:	4313      	orrs	r3, r2
 800a31a:	3401      	adds	r4, #1
 800a31c:	9304      	str	r3, [sp, #16]
 800a31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a322:	4829      	ldr	r0, [pc, #164]	@ (800a3c8 <_vfiprintf_r+0x220>)
 800a324:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a328:	2206      	movs	r2, #6
 800a32a:	f7f5 ffd9 	bl	80002e0 <memchr>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d03f      	beq.n	800a3b2 <_vfiprintf_r+0x20a>
 800a332:	4b26      	ldr	r3, [pc, #152]	@ (800a3cc <_vfiprintf_r+0x224>)
 800a334:	bb1b      	cbnz	r3, 800a37e <_vfiprintf_r+0x1d6>
 800a336:	9b03      	ldr	r3, [sp, #12]
 800a338:	3307      	adds	r3, #7
 800a33a:	f023 0307 	bic.w	r3, r3, #7
 800a33e:	3308      	adds	r3, #8
 800a340:	9303      	str	r3, [sp, #12]
 800a342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a344:	443b      	add	r3, r7
 800a346:	9309      	str	r3, [sp, #36]	@ 0x24
 800a348:	e76a      	b.n	800a220 <_vfiprintf_r+0x78>
 800a34a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a34e:	460c      	mov	r4, r1
 800a350:	2001      	movs	r0, #1
 800a352:	e7a8      	b.n	800a2a6 <_vfiprintf_r+0xfe>
 800a354:	2300      	movs	r3, #0
 800a356:	3401      	adds	r4, #1
 800a358:	9305      	str	r3, [sp, #20]
 800a35a:	4619      	mov	r1, r3
 800a35c:	f04f 0c0a 	mov.w	ip, #10
 800a360:	4620      	mov	r0, r4
 800a362:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a366:	3a30      	subs	r2, #48	@ 0x30
 800a368:	2a09      	cmp	r2, #9
 800a36a:	d903      	bls.n	800a374 <_vfiprintf_r+0x1cc>
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d0c6      	beq.n	800a2fe <_vfiprintf_r+0x156>
 800a370:	9105      	str	r1, [sp, #20]
 800a372:	e7c4      	b.n	800a2fe <_vfiprintf_r+0x156>
 800a374:	fb0c 2101 	mla	r1, ip, r1, r2
 800a378:	4604      	mov	r4, r0
 800a37a:	2301      	movs	r3, #1
 800a37c:	e7f0      	b.n	800a360 <_vfiprintf_r+0x1b8>
 800a37e:	ab03      	add	r3, sp, #12
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	462a      	mov	r2, r5
 800a384:	4b12      	ldr	r3, [pc, #72]	@ (800a3d0 <_vfiprintf_r+0x228>)
 800a386:	a904      	add	r1, sp, #16
 800a388:	4630      	mov	r0, r6
 800a38a:	f3af 8000 	nop.w
 800a38e:	4607      	mov	r7, r0
 800a390:	1c78      	adds	r0, r7, #1
 800a392:	d1d6      	bne.n	800a342 <_vfiprintf_r+0x19a>
 800a394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a396:	07d9      	lsls	r1, r3, #31
 800a398:	d405      	bmi.n	800a3a6 <_vfiprintf_r+0x1fe>
 800a39a:	89ab      	ldrh	r3, [r5, #12]
 800a39c:	059a      	lsls	r2, r3, #22
 800a39e:	d402      	bmi.n	800a3a6 <_vfiprintf_r+0x1fe>
 800a3a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3a2:	f7ff fddd 	bl	8009f60 <__retarget_lock_release_recursive>
 800a3a6:	89ab      	ldrh	r3, [r5, #12]
 800a3a8:	065b      	lsls	r3, r3, #25
 800a3aa:	f53f af1f 	bmi.w	800a1ec <_vfiprintf_r+0x44>
 800a3ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3b0:	e71e      	b.n	800a1f0 <_vfiprintf_r+0x48>
 800a3b2:	ab03      	add	r3, sp, #12
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	462a      	mov	r2, r5
 800a3b8:	4b05      	ldr	r3, [pc, #20]	@ (800a3d0 <_vfiprintf_r+0x228>)
 800a3ba:	a904      	add	r1, sp, #16
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f000 f879 	bl	800a4b4 <_printf_i>
 800a3c2:	e7e4      	b.n	800a38e <_vfiprintf_r+0x1e6>
 800a3c4:	0800ac6c 	.word	0x0800ac6c
 800a3c8:	0800ac76 	.word	0x0800ac76
 800a3cc:	00000000 	.word	0x00000000
 800a3d0:	0800a183 	.word	0x0800a183
 800a3d4:	0800ac72 	.word	0x0800ac72

0800a3d8 <_printf_common>:
 800a3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3dc:	4616      	mov	r6, r2
 800a3de:	4698      	mov	r8, r3
 800a3e0:	688a      	ldr	r2, [r1, #8]
 800a3e2:	690b      	ldr	r3, [r1, #16]
 800a3e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	bfb8      	it	lt
 800a3ec:	4613      	movlt	r3, r2
 800a3ee:	6033      	str	r3, [r6, #0]
 800a3f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	b10a      	cbz	r2, 800a3fe <_printf_common+0x26>
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	6033      	str	r3, [r6, #0]
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	0699      	lsls	r1, r3, #26
 800a402:	bf42      	ittt	mi
 800a404:	6833      	ldrmi	r3, [r6, #0]
 800a406:	3302      	addmi	r3, #2
 800a408:	6033      	strmi	r3, [r6, #0]
 800a40a:	6825      	ldr	r5, [r4, #0]
 800a40c:	f015 0506 	ands.w	r5, r5, #6
 800a410:	d106      	bne.n	800a420 <_printf_common+0x48>
 800a412:	f104 0a19 	add.w	sl, r4, #25
 800a416:	68e3      	ldr	r3, [r4, #12]
 800a418:	6832      	ldr	r2, [r6, #0]
 800a41a:	1a9b      	subs	r3, r3, r2
 800a41c:	42ab      	cmp	r3, r5
 800a41e:	dc26      	bgt.n	800a46e <_printf_common+0x96>
 800a420:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a424:	6822      	ldr	r2, [r4, #0]
 800a426:	3b00      	subs	r3, #0
 800a428:	bf18      	it	ne
 800a42a:	2301      	movne	r3, #1
 800a42c:	0692      	lsls	r2, r2, #26
 800a42e:	d42b      	bmi.n	800a488 <_printf_common+0xb0>
 800a430:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a434:	4641      	mov	r1, r8
 800a436:	4638      	mov	r0, r7
 800a438:	47c8      	blx	r9
 800a43a:	3001      	adds	r0, #1
 800a43c:	d01e      	beq.n	800a47c <_printf_common+0xa4>
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	6922      	ldr	r2, [r4, #16]
 800a442:	f003 0306 	and.w	r3, r3, #6
 800a446:	2b04      	cmp	r3, #4
 800a448:	bf02      	ittt	eq
 800a44a:	68e5      	ldreq	r5, [r4, #12]
 800a44c:	6833      	ldreq	r3, [r6, #0]
 800a44e:	1aed      	subeq	r5, r5, r3
 800a450:	68a3      	ldr	r3, [r4, #8]
 800a452:	bf0c      	ite	eq
 800a454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a458:	2500      	movne	r5, #0
 800a45a:	4293      	cmp	r3, r2
 800a45c:	bfc4      	itt	gt
 800a45e:	1a9b      	subgt	r3, r3, r2
 800a460:	18ed      	addgt	r5, r5, r3
 800a462:	2600      	movs	r6, #0
 800a464:	341a      	adds	r4, #26
 800a466:	42b5      	cmp	r5, r6
 800a468:	d11a      	bne.n	800a4a0 <_printf_common+0xc8>
 800a46a:	2000      	movs	r0, #0
 800a46c:	e008      	b.n	800a480 <_printf_common+0xa8>
 800a46e:	2301      	movs	r3, #1
 800a470:	4652      	mov	r2, sl
 800a472:	4641      	mov	r1, r8
 800a474:	4638      	mov	r0, r7
 800a476:	47c8      	blx	r9
 800a478:	3001      	adds	r0, #1
 800a47a:	d103      	bne.n	800a484 <_printf_common+0xac>
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a484:	3501      	adds	r5, #1
 800a486:	e7c6      	b.n	800a416 <_printf_common+0x3e>
 800a488:	18e1      	adds	r1, r4, r3
 800a48a:	1c5a      	adds	r2, r3, #1
 800a48c:	2030      	movs	r0, #48	@ 0x30
 800a48e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a492:	4422      	add	r2, r4
 800a494:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a498:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a49c:	3302      	adds	r3, #2
 800a49e:	e7c7      	b.n	800a430 <_printf_common+0x58>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	4622      	mov	r2, r4
 800a4a4:	4641      	mov	r1, r8
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	47c8      	blx	r9
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	d0e6      	beq.n	800a47c <_printf_common+0xa4>
 800a4ae:	3601      	adds	r6, #1
 800a4b0:	e7d9      	b.n	800a466 <_printf_common+0x8e>
	...

0800a4b4 <_printf_i>:
 800a4b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b8:	7e0f      	ldrb	r7, [r1, #24]
 800a4ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4bc:	2f78      	cmp	r7, #120	@ 0x78
 800a4be:	4691      	mov	r9, r2
 800a4c0:	4680      	mov	r8, r0
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	469a      	mov	sl, r3
 800a4c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4ca:	d807      	bhi.n	800a4dc <_printf_i+0x28>
 800a4cc:	2f62      	cmp	r7, #98	@ 0x62
 800a4ce:	d80a      	bhi.n	800a4e6 <_printf_i+0x32>
 800a4d0:	2f00      	cmp	r7, #0
 800a4d2:	f000 80d1 	beq.w	800a678 <_printf_i+0x1c4>
 800a4d6:	2f58      	cmp	r7, #88	@ 0x58
 800a4d8:	f000 80b8 	beq.w	800a64c <_printf_i+0x198>
 800a4dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4e4:	e03a      	b.n	800a55c <_printf_i+0xa8>
 800a4e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4ea:	2b15      	cmp	r3, #21
 800a4ec:	d8f6      	bhi.n	800a4dc <_printf_i+0x28>
 800a4ee:	a101      	add	r1, pc, #4	@ (adr r1, 800a4f4 <_printf_i+0x40>)
 800a4f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4f4:	0800a54d 	.word	0x0800a54d
 800a4f8:	0800a561 	.word	0x0800a561
 800a4fc:	0800a4dd 	.word	0x0800a4dd
 800a500:	0800a4dd 	.word	0x0800a4dd
 800a504:	0800a4dd 	.word	0x0800a4dd
 800a508:	0800a4dd 	.word	0x0800a4dd
 800a50c:	0800a561 	.word	0x0800a561
 800a510:	0800a4dd 	.word	0x0800a4dd
 800a514:	0800a4dd 	.word	0x0800a4dd
 800a518:	0800a4dd 	.word	0x0800a4dd
 800a51c:	0800a4dd 	.word	0x0800a4dd
 800a520:	0800a65f 	.word	0x0800a65f
 800a524:	0800a58b 	.word	0x0800a58b
 800a528:	0800a619 	.word	0x0800a619
 800a52c:	0800a4dd 	.word	0x0800a4dd
 800a530:	0800a4dd 	.word	0x0800a4dd
 800a534:	0800a681 	.word	0x0800a681
 800a538:	0800a4dd 	.word	0x0800a4dd
 800a53c:	0800a58b 	.word	0x0800a58b
 800a540:	0800a4dd 	.word	0x0800a4dd
 800a544:	0800a4dd 	.word	0x0800a4dd
 800a548:	0800a621 	.word	0x0800a621
 800a54c:	6833      	ldr	r3, [r6, #0]
 800a54e:	1d1a      	adds	r2, r3, #4
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6032      	str	r2, [r6, #0]
 800a554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a558:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a55c:	2301      	movs	r3, #1
 800a55e:	e09c      	b.n	800a69a <_printf_i+0x1e6>
 800a560:	6833      	ldr	r3, [r6, #0]
 800a562:	6820      	ldr	r0, [r4, #0]
 800a564:	1d19      	adds	r1, r3, #4
 800a566:	6031      	str	r1, [r6, #0]
 800a568:	0606      	lsls	r6, r0, #24
 800a56a:	d501      	bpl.n	800a570 <_printf_i+0xbc>
 800a56c:	681d      	ldr	r5, [r3, #0]
 800a56e:	e003      	b.n	800a578 <_printf_i+0xc4>
 800a570:	0645      	lsls	r5, r0, #25
 800a572:	d5fb      	bpl.n	800a56c <_printf_i+0xb8>
 800a574:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a578:	2d00      	cmp	r5, #0
 800a57a:	da03      	bge.n	800a584 <_printf_i+0xd0>
 800a57c:	232d      	movs	r3, #45	@ 0x2d
 800a57e:	426d      	negs	r5, r5
 800a580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a584:	4858      	ldr	r0, [pc, #352]	@ (800a6e8 <_printf_i+0x234>)
 800a586:	230a      	movs	r3, #10
 800a588:	e011      	b.n	800a5ae <_printf_i+0xfa>
 800a58a:	6821      	ldr	r1, [r4, #0]
 800a58c:	6833      	ldr	r3, [r6, #0]
 800a58e:	0608      	lsls	r0, r1, #24
 800a590:	f853 5b04 	ldr.w	r5, [r3], #4
 800a594:	d402      	bmi.n	800a59c <_printf_i+0xe8>
 800a596:	0649      	lsls	r1, r1, #25
 800a598:	bf48      	it	mi
 800a59a:	b2ad      	uxthmi	r5, r5
 800a59c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a59e:	4852      	ldr	r0, [pc, #328]	@ (800a6e8 <_printf_i+0x234>)
 800a5a0:	6033      	str	r3, [r6, #0]
 800a5a2:	bf14      	ite	ne
 800a5a4:	230a      	movne	r3, #10
 800a5a6:	2308      	moveq	r3, #8
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5ae:	6866      	ldr	r6, [r4, #4]
 800a5b0:	60a6      	str	r6, [r4, #8]
 800a5b2:	2e00      	cmp	r6, #0
 800a5b4:	db05      	blt.n	800a5c2 <_printf_i+0x10e>
 800a5b6:	6821      	ldr	r1, [r4, #0]
 800a5b8:	432e      	orrs	r6, r5
 800a5ba:	f021 0104 	bic.w	r1, r1, #4
 800a5be:	6021      	str	r1, [r4, #0]
 800a5c0:	d04b      	beq.n	800a65a <_printf_i+0x1a6>
 800a5c2:	4616      	mov	r6, r2
 800a5c4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5c8:	fb03 5711 	mls	r7, r3, r1, r5
 800a5cc:	5dc7      	ldrb	r7, [r0, r7]
 800a5ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5d2:	462f      	mov	r7, r5
 800a5d4:	42bb      	cmp	r3, r7
 800a5d6:	460d      	mov	r5, r1
 800a5d8:	d9f4      	bls.n	800a5c4 <_printf_i+0x110>
 800a5da:	2b08      	cmp	r3, #8
 800a5dc:	d10b      	bne.n	800a5f6 <_printf_i+0x142>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	07df      	lsls	r7, r3, #31
 800a5e2:	d508      	bpl.n	800a5f6 <_printf_i+0x142>
 800a5e4:	6923      	ldr	r3, [r4, #16]
 800a5e6:	6861      	ldr	r1, [r4, #4]
 800a5e8:	4299      	cmp	r1, r3
 800a5ea:	bfde      	ittt	le
 800a5ec:	2330      	movle	r3, #48	@ 0x30
 800a5ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5f2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a5f6:	1b92      	subs	r2, r2, r6
 800a5f8:	6122      	str	r2, [r4, #16]
 800a5fa:	f8cd a000 	str.w	sl, [sp]
 800a5fe:	464b      	mov	r3, r9
 800a600:	aa03      	add	r2, sp, #12
 800a602:	4621      	mov	r1, r4
 800a604:	4640      	mov	r0, r8
 800a606:	f7ff fee7 	bl	800a3d8 <_printf_common>
 800a60a:	3001      	adds	r0, #1
 800a60c:	d14a      	bne.n	800a6a4 <_printf_i+0x1f0>
 800a60e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a612:	b004      	add	sp, #16
 800a614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	f043 0320 	orr.w	r3, r3, #32
 800a61e:	6023      	str	r3, [r4, #0]
 800a620:	4832      	ldr	r0, [pc, #200]	@ (800a6ec <_printf_i+0x238>)
 800a622:	2778      	movs	r7, #120	@ 0x78
 800a624:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a628:	6823      	ldr	r3, [r4, #0]
 800a62a:	6831      	ldr	r1, [r6, #0]
 800a62c:	061f      	lsls	r7, r3, #24
 800a62e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a632:	d402      	bmi.n	800a63a <_printf_i+0x186>
 800a634:	065f      	lsls	r7, r3, #25
 800a636:	bf48      	it	mi
 800a638:	b2ad      	uxthmi	r5, r5
 800a63a:	6031      	str	r1, [r6, #0]
 800a63c:	07d9      	lsls	r1, r3, #31
 800a63e:	bf44      	itt	mi
 800a640:	f043 0320 	orrmi.w	r3, r3, #32
 800a644:	6023      	strmi	r3, [r4, #0]
 800a646:	b11d      	cbz	r5, 800a650 <_printf_i+0x19c>
 800a648:	2310      	movs	r3, #16
 800a64a:	e7ad      	b.n	800a5a8 <_printf_i+0xf4>
 800a64c:	4826      	ldr	r0, [pc, #152]	@ (800a6e8 <_printf_i+0x234>)
 800a64e:	e7e9      	b.n	800a624 <_printf_i+0x170>
 800a650:	6823      	ldr	r3, [r4, #0]
 800a652:	f023 0320 	bic.w	r3, r3, #32
 800a656:	6023      	str	r3, [r4, #0]
 800a658:	e7f6      	b.n	800a648 <_printf_i+0x194>
 800a65a:	4616      	mov	r6, r2
 800a65c:	e7bd      	b.n	800a5da <_printf_i+0x126>
 800a65e:	6833      	ldr	r3, [r6, #0]
 800a660:	6825      	ldr	r5, [r4, #0]
 800a662:	6961      	ldr	r1, [r4, #20]
 800a664:	1d18      	adds	r0, r3, #4
 800a666:	6030      	str	r0, [r6, #0]
 800a668:	062e      	lsls	r6, r5, #24
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	d501      	bpl.n	800a672 <_printf_i+0x1be>
 800a66e:	6019      	str	r1, [r3, #0]
 800a670:	e002      	b.n	800a678 <_printf_i+0x1c4>
 800a672:	0668      	lsls	r0, r5, #25
 800a674:	d5fb      	bpl.n	800a66e <_printf_i+0x1ba>
 800a676:	8019      	strh	r1, [r3, #0]
 800a678:	2300      	movs	r3, #0
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	4616      	mov	r6, r2
 800a67e:	e7bc      	b.n	800a5fa <_printf_i+0x146>
 800a680:	6833      	ldr	r3, [r6, #0]
 800a682:	1d1a      	adds	r2, r3, #4
 800a684:	6032      	str	r2, [r6, #0]
 800a686:	681e      	ldr	r6, [r3, #0]
 800a688:	6862      	ldr	r2, [r4, #4]
 800a68a:	2100      	movs	r1, #0
 800a68c:	4630      	mov	r0, r6
 800a68e:	f7f5 fe27 	bl	80002e0 <memchr>
 800a692:	b108      	cbz	r0, 800a698 <_printf_i+0x1e4>
 800a694:	1b80      	subs	r0, r0, r6
 800a696:	6060      	str	r0, [r4, #4]
 800a698:	6863      	ldr	r3, [r4, #4]
 800a69a:	6123      	str	r3, [r4, #16]
 800a69c:	2300      	movs	r3, #0
 800a69e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6a2:	e7aa      	b.n	800a5fa <_printf_i+0x146>
 800a6a4:	6923      	ldr	r3, [r4, #16]
 800a6a6:	4632      	mov	r2, r6
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	4640      	mov	r0, r8
 800a6ac:	47d0      	blx	sl
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	d0ad      	beq.n	800a60e <_printf_i+0x15a>
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	079b      	lsls	r3, r3, #30
 800a6b6:	d413      	bmi.n	800a6e0 <_printf_i+0x22c>
 800a6b8:	68e0      	ldr	r0, [r4, #12]
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	4298      	cmp	r0, r3
 800a6be:	bfb8      	it	lt
 800a6c0:	4618      	movlt	r0, r3
 800a6c2:	e7a6      	b.n	800a612 <_printf_i+0x15e>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	4632      	mov	r2, r6
 800a6c8:	4649      	mov	r1, r9
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	47d0      	blx	sl
 800a6ce:	3001      	adds	r0, #1
 800a6d0:	d09d      	beq.n	800a60e <_printf_i+0x15a>
 800a6d2:	3501      	adds	r5, #1
 800a6d4:	68e3      	ldr	r3, [r4, #12]
 800a6d6:	9903      	ldr	r1, [sp, #12]
 800a6d8:	1a5b      	subs	r3, r3, r1
 800a6da:	42ab      	cmp	r3, r5
 800a6dc:	dcf2      	bgt.n	800a6c4 <_printf_i+0x210>
 800a6de:	e7eb      	b.n	800a6b8 <_printf_i+0x204>
 800a6e0:	2500      	movs	r5, #0
 800a6e2:	f104 0619 	add.w	r6, r4, #25
 800a6e6:	e7f5      	b.n	800a6d4 <_printf_i+0x220>
 800a6e8:	0800ac7d 	.word	0x0800ac7d
 800a6ec:	0800ac8e 	.word	0x0800ac8e

0800a6f0 <__sflush_r>:
 800a6f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f8:	0716      	lsls	r6, r2, #28
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	d454      	bmi.n	800a7aa <__sflush_r+0xba>
 800a700:	684b      	ldr	r3, [r1, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	dc02      	bgt.n	800a70c <__sflush_r+0x1c>
 800a706:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a708:	2b00      	cmp	r3, #0
 800a70a:	dd48      	ble.n	800a79e <__sflush_r+0xae>
 800a70c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a70e:	2e00      	cmp	r6, #0
 800a710:	d045      	beq.n	800a79e <__sflush_r+0xae>
 800a712:	2300      	movs	r3, #0
 800a714:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a718:	682f      	ldr	r7, [r5, #0]
 800a71a:	6a21      	ldr	r1, [r4, #32]
 800a71c:	602b      	str	r3, [r5, #0]
 800a71e:	d030      	beq.n	800a782 <__sflush_r+0x92>
 800a720:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	0759      	lsls	r1, r3, #29
 800a726:	d505      	bpl.n	800a734 <__sflush_r+0x44>
 800a728:	6863      	ldr	r3, [r4, #4]
 800a72a:	1ad2      	subs	r2, r2, r3
 800a72c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a72e:	b10b      	cbz	r3, 800a734 <__sflush_r+0x44>
 800a730:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a732:	1ad2      	subs	r2, r2, r3
 800a734:	2300      	movs	r3, #0
 800a736:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a738:	6a21      	ldr	r1, [r4, #32]
 800a73a:	4628      	mov	r0, r5
 800a73c:	47b0      	blx	r6
 800a73e:	1c43      	adds	r3, r0, #1
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	d106      	bne.n	800a752 <__sflush_r+0x62>
 800a744:	6829      	ldr	r1, [r5, #0]
 800a746:	291d      	cmp	r1, #29
 800a748:	d82b      	bhi.n	800a7a2 <__sflush_r+0xb2>
 800a74a:	4a2a      	ldr	r2, [pc, #168]	@ (800a7f4 <__sflush_r+0x104>)
 800a74c:	40ca      	lsrs	r2, r1
 800a74e:	07d6      	lsls	r6, r2, #31
 800a750:	d527      	bpl.n	800a7a2 <__sflush_r+0xb2>
 800a752:	2200      	movs	r2, #0
 800a754:	6062      	str	r2, [r4, #4]
 800a756:	04d9      	lsls	r1, r3, #19
 800a758:	6922      	ldr	r2, [r4, #16]
 800a75a:	6022      	str	r2, [r4, #0]
 800a75c:	d504      	bpl.n	800a768 <__sflush_r+0x78>
 800a75e:	1c42      	adds	r2, r0, #1
 800a760:	d101      	bne.n	800a766 <__sflush_r+0x76>
 800a762:	682b      	ldr	r3, [r5, #0]
 800a764:	b903      	cbnz	r3, 800a768 <__sflush_r+0x78>
 800a766:	6560      	str	r0, [r4, #84]	@ 0x54
 800a768:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a76a:	602f      	str	r7, [r5, #0]
 800a76c:	b1b9      	cbz	r1, 800a79e <__sflush_r+0xae>
 800a76e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a772:	4299      	cmp	r1, r3
 800a774:	d002      	beq.n	800a77c <__sflush_r+0x8c>
 800a776:	4628      	mov	r0, r5
 800a778:	f7ff fbf4 	bl	8009f64 <_free_r>
 800a77c:	2300      	movs	r3, #0
 800a77e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a780:	e00d      	b.n	800a79e <__sflush_r+0xae>
 800a782:	2301      	movs	r3, #1
 800a784:	4628      	mov	r0, r5
 800a786:	47b0      	blx	r6
 800a788:	4602      	mov	r2, r0
 800a78a:	1c50      	adds	r0, r2, #1
 800a78c:	d1c9      	bne.n	800a722 <__sflush_r+0x32>
 800a78e:	682b      	ldr	r3, [r5, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0c6      	beq.n	800a722 <__sflush_r+0x32>
 800a794:	2b1d      	cmp	r3, #29
 800a796:	d001      	beq.n	800a79c <__sflush_r+0xac>
 800a798:	2b16      	cmp	r3, #22
 800a79a:	d11e      	bne.n	800a7da <__sflush_r+0xea>
 800a79c:	602f      	str	r7, [r5, #0]
 800a79e:	2000      	movs	r0, #0
 800a7a0:	e022      	b.n	800a7e8 <__sflush_r+0xf8>
 800a7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7a6:	b21b      	sxth	r3, r3
 800a7a8:	e01b      	b.n	800a7e2 <__sflush_r+0xf2>
 800a7aa:	690f      	ldr	r7, [r1, #16]
 800a7ac:	2f00      	cmp	r7, #0
 800a7ae:	d0f6      	beq.n	800a79e <__sflush_r+0xae>
 800a7b0:	0793      	lsls	r3, r2, #30
 800a7b2:	680e      	ldr	r6, [r1, #0]
 800a7b4:	bf08      	it	eq
 800a7b6:	694b      	ldreq	r3, [r1, #20]
 800a7b8:	600f      	str	r7, [r1, #0]
 800a7ba:	bf18      	it	ne
 800a7bc:	2300      	movne	r3, #0
 800a7be:	eba6 0807 	sub.w	r8, r6, r7
 800a7c2:	608b      	str	r3, [r1, #8]
 800a7c4:	f1b8 0f00 	cmp.w	r8, #0
 800a7c8:	dde9      	ble.n	800a79e <__sflush_r+0xae>
 800a7ca:	6a21      	ldr	r1, [r4, #32]
 800a7cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a7ce:	4643      	mov	r3, r8
 800a7d0:	463a      	mov	r2, r7
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	47b0      	blx	r6
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	dc08      	bgt.n	800a7ec <__sflush_r+0xfc>
 800a7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7e2:	81a3      	strh	r3, [r4, #12]
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ec:	4407      	add	r7, r0
 800a7ee:	eba8 0800 	sub.w	r8, r8, r0
 800a7f2:	e7e7      	b.n	800a7c4 <__sflush_r+0xd4>
 800a7f4:	20400001 	.word	0x20400001

0800a7f8 <_fflush_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	690b      	ldr	r3, [r1, #16]
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	460c      	mov	r4, r1
 800a800:	b913      	cbnz	r3, 800a808 <_fflush_r+0x10>
 800a802:	2500      	movs	r5, #0
 800a804:	4628      	mov	r0, r5
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	b118      	cbz	r0, 800a812 <_fflush_r+0x1a>
 800a80a:	6a03      	ldr	r3, [r0, #32]
 800a80c:	b90b      	cbnz	r3, 800a812 <_fflush_r+0x1a>
 800a80e:	f7ff faa1 	bl	8009d54 <__sinit>
 800a812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0f3      	beq.n	800a802 <_fflush_r+0xa>
 800a81a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a81c:	07d0      	lsls	r0, r2, #31
 800a81e:	d404      	bmi.n	800a82a <_fflush_r+0x32>
 800a820:	0599      	lsls	r1, r3, #22
 800a822:	d402      	bmi.n	800a82a <_fflush_r+0x32>
 800a824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a826:	f7ff fb9a 	bl	8009f5e <__retarget_lock_acquire_recursive>
 800a82a:	4628      	mov	r0, r5
 800a82c:	4621      	mov	r1, r4
 800a82e:	f7ff ff5f 	bl	800a6f0 <__sflush_r>
 800a832:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a834:	07da      	lsls	r2, r3, #31
 800a836:	4605      	mov	r5, r0
 800a838:	d4e4      	bmi.n	800a804 <_fflush_r+0xc>
 800a83a:	89a3      	ldrh	r3, [r4, #12]
 800a83c:	059b      	lsls	r3, r3, #22
 800a83e:	d4e1      	bmi.n	800a804 <_fflush_r+0xc>
 800a840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a842:	f7ff fb8d 	bl	8009f60 <__retarget_lock_release_recursive>
 800a846:	e7dd      	b.n	800a804 <_fflush_r+0xc>

0800a848 <__swbuf_r>:
 800a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84a:	460e      	mov	r6, r1
 800a84c:	4614      	mov	r4, r2
 800a84e:	4605      	mov	r5, r0
 800a850:	b118      	cbz	r0, 800a85a <__swbuf_r+0x12>
 800a852:	6a03      	ldr	r3, [r0, #32]
 800a854:	b90b      	cbnz	r3, 800a85a <__swbuf_r+0x12>
 800a856:	f7ff fa7d 	bl	8009d54 <__sinit>
 800a85a:	69a3      	ldr	r3, [r4, #24]
 800a85c:	60a3      	str	r3, [r4, #8]
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	071a      	lsls	r2, r3, #28
 800a862:	d501      	bpl.n	800a868 <__swbuf_r+0x20>
 800a864:	6923      	ldr	r3, [r4, #16]
 800a866:	b943      	cbnz	r3, 800a87a <__swbuf_r+0x32>
 800a868:	4621      	mov	r1, r4
 800a86a:	4628      	mov	r0, r5
 800a86c:	f000 f82a 	bl	800a8c4 <__swsetup_r>
 800a870:	b118      	cbz	r0, 800a87a <__swbuf_r+0x32>
 800a872:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a876:	4638      	mov	r0, r7
 800a878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a87a:	6823      	ldr	r3, [r4, #0]
 800a87c:	6922      	ldr	r2, [r4, #16]
 800a87e:	1a98      	subs	r0, r3, r2
 800a880:	6963      	ldr	r3, [r4, #20]
 800a882:	b2f6      	uxtb	r6, r6
 800a884:	4283      	cmp	r3, r0
 800a886:	4637      	mov	r7, r6
 800a888:	dc05      	bgt.n	800a896 <__swbuf_r+0x4e>
 800a88a:	4621      	mov	r1, r4
 800a88c:	4628      	mov	r0, r5
 800a88e:	f7ff ffb3 	bl	800a7f8 <_fflush_r>
 800a892:	2800      	cmp	r0, #0
 800a894:	d1ed      	bne.n	800a872 <__swbuf_r+0x2a>
 800a896:	68a3      	ldr	r3, [r4, #8]
 800a898:	3b01      	subs	r3, #1
 800a89a:	60a3      	str	r3, [r4, #8]
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	6022      	str	r2, [r4, #0]
 800a8a2:	701e      	strb	r6, [r3, #0]
 800a8a4:	6962      	ldr	r2, [r4, #20]
 800a8a6:	1c43      	adds	r3, r0, #1
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d004      	beq.n	800a8b6 <__swbuf_r+0x6e>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	07db      	lsls	r3, r3, #31
 800a8b0:	d5e1      	bpl.n	800a876 <__swbuf_r+0x2e>
 800a8b2:	2e0a      	cmp	r6, #10
 800a8b4:	d1df      	bne.n	800a876 <__swbuf_r+0x2e>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f7ff ff9d 	bl	800a7f8 <_fflush_r>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d0d9      	beq.n	800a876 <__swbuf_r+0x2e>
 800a8c2:	e7d6      	b.n	800a872 <__swbuf_r+0x2a>

0800a8c4 <__swsetup_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4b29      	ldr	r3, [pc, #164]	@ (800a96c <__swsetup_r+0xa8>)
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	6818      	ldr	r0, [r3, #0]
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	b118      	cbz	r0, 800a8d8 <__swsetup_r+0x14>
 800a8d0:	6a03      	ldr	r3, [r0, #32]
 800a8d2:	b90b      	cbnz	r3, 800a8d8 <__swsetup_r+0x14>
 800a8d4:	f7ff fa3e 	bl	8009d54 <__sinit>
 800a8d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8dc:	0719      	lsls	r1, r3, #28
 800a8de:	d422      	bmi.n	800a926 <__swsetup_r+0x62>
 800a8e0:	06da      	lsls	r2, r3, #27
 800a8e2:	d407      	bmi.n	800a8f4 <__swsetup_r+0x30>
 800a8e4:	2209      	movs	r2, #9
 800a8e6:	602a      	str	r2, [r5, #0]
 800a8e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ec:	81a3      	strh	r3, [r4, #12]
 800a8ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8f2:	e033      	b.n	800a95c <__swsetup_r+0x98>
 800a8f4:	0758      	lsls	r0, r3, #29
 800a8f6:	d512      	bpl.n	800a91e <__swsetup_r+0x5a>
 800a8f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8fa:	b141      	cbz	r1, 800a90e <__swsetup_r+0x4a>
 800a8fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a900:	4299      	cmp	r1, r3
 800a902:	d002      	beq.n	800a90a <__swsetup_r+0x46>
 800a904:	4628      	mov	r0, r5
 800a906:	f7ff fb2d 	bl	8009f64 <_free_r>
 800a90a:	2300      	movs	r3, #0
 800a90c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	2300      	movs	r3, #0
 800a918:	6063      	str	r3, [r4, #4]
 800a91a:	6923      	ldr	r3, [r4, #16]
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	89a3      	ldrh	r3, [r4, #12]
 800a920:	f043 0308 	orr.w	r3, r3, #8
 800a924:	81a3      	strh	r3, [r4, #12]
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	b94b      	cbnz	r3, 800a93e <__swsetup_r+0x7a>
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a934:	d003      	beq.n	800a93e <__swsetup_r+0x7a>
 800a936:	4621      	mov	r1, r4
 800a938:	4628      	mov	r0, r5
 800a93a:	f000 f84f 	bl	800a9dc <__smakebuf_r>
 800a93e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a942:	f013 0201 	ands.w	r2, r3, #1
 800a946:	d00a      	beq.n	800a95e <__swsetup_r+0x9a>
 800a948:	2200      	movs	r2, #0
 800a94a:	60a2      	str	r2, [r4, #8]
 800a94c:	6962      	ldr	r2, [r4, #20]
 800a94e:	4252      	negs	r2, r2
 800a950:	61a2      	str	r2, [r4, #24]
 800a952:	6922      	ldr	r2, [r4, #16]
 800a954:	b942      	cbnz	r2, 800a968 <__swsetup_r+0xa4>
 800a956:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a95a:	d1c5      	bne.n	800a8e8 <__swsetup_r+0x24>
 800a95c:	bd38      	pop	{r3, r4, r5, pc}
 800a95e:	0799      	lsls	r1, r3, #30
 800a960:	bf58      	it	pl
 800a962:	6962      	ldrpl	r2, [r4, #20]
 800a964:	60a2      	str	r2, [r4, #8]
 800a966:	e7f4      	b.n	800a952 <__swsetup_r+0x8e>
 800a968:	2000      	movs	r0, #0
 800a96a:	e7f7      	b.n	800a95c <__swsetup_r+0x98>
 800a96c:	24000020 	.word	0x24000020

0800a970 <_sbrk_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	4d06      	ldr	r5, [pc, #24]	@ (800a98c <_sbrk_r+0x1c>)
 800a974:	2300      	movs	r3, #0
 800a976:	4604      	mov	r4, r0
 800a978:	4608      	mov	r0, r1
 800a97a:	602b      	str	r3, [r5, #0]
 800a97c:	f7f6 fc54 	bl	8001228 <_sbrk>
 800a980:	1c43      	adds	r3, r0, #1
 800a982:	d102      	bne.n	800a98a <_sbrk_r+0x1a>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	b103      	cbz	r3, 800a98a <_sbrk_r+0x1a>
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	240044d4 	.word	0x240044d4

0800a990 <__swhatbuf_r>:
 800a990:	b570      	push	{r4, r5, r6, lr}
 800a992:	460c      	mov	r4, r1
 800a994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a998:	2900      	cmp	r1, #0
 800a99a:	b096      	sub	sp, #88	@ 0x58
 800a99c:	4615      	mov	r5, r2
 800a99e:	461e      	mov	r6, r3
 800a9a0:	da0d      	bge.n	800a9be <__swhatbuf_r+0x2e>
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9a8:	f04f 0100 	mov.w	r1, #0
 800a9ac:	bf14      	ite	ne
 800a9ae:	2340      	movne	r3, #64	@ 0x40
 800a9b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	6031      	str	r1, [r6, #0]
 800a9b8:	602b      	str	r3, [r5, #0]
 800a9ba:	b016      	add	sp, #88	@ 0x58
 800a9bc:	bd70      	pop	{r4, r5, r6, pc}
 800a9be:	466a      	mov	r2, sp
 800a9c0:	f000 f848 	bl	800aa54 <_fstat_r>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	dbec      	blt.n	800a9a2 <__swhatbuf_r+0x12>
 800a9c8:	9901      	ldr	r1, [sp, #4]
 800a9ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9d2:	4259      	negs	r1, r3
 800a9d4:	4159      	adcs	r1, r3
 800a9d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9da:	e7eb      	b.n	800a9b4 <__swhatbuf_r+0x24>

0800a9dc <__smakebuf_r>:
 800a9dc:	898b      	ldrh	r3, [r1, #12]
 800a9de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9e0:	079d      	lsls	r5, r3, #30
 800a9e2:	4606      	mov	r6, r0
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	d507      	bpl.n	800a9f8 <__smakebuf_r+0x1c>
 800a9e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	6123      	str	r3, [r4, #16]
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	6163      	str	r3, [r4, #20]
 800a9f4:	b003      	add	sp, #12
 800a9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f8:	ab01      	add	r3, sp, #4
 800a9fa:	466a      	mov	r2, sp
 800a9fc:	f7ff ffc8 	bl	800a990 <__swhatbuf_r>
 800aa00:	9f00      	ldr	r7, [sp, #0]
 800aa02:	4605      	mov	r5, r0
 800aa04:	4639      	mov	r1, r7
 800aa06:	4630      	mov	r0, r6
 800aa08:	f7ff fb18 	bl	800a03c <_malloc_r>
 800aa0c:	b948      	cbnz	r0, 800aa22 <__smakebuf_r+0x46>
 800aa0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa12:	059a      	lsls	r2, r3, #22
 800aa14:	d4ee      	bmi.n	800a9f4 <__smakebuf_r+0x18>
 800aa16:	f023 0303 	bic.w	r3, r3, #3
 800aa1a:	f043 0302 	orr.w	r3, r3, #2
 800aa1e:	81a3      	strh	r3, [r4, #12]
 800aa20:	e7e2      	b.n	800a9e8 <__smakebuf_r+0xc>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	6020      	str	r0, [r4, #0]
 800aa26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa2a:	81a3      	strh	r3, [r4, #12]
 800aa2c:	9b01      	ldr	r3, [sp, #4]
 800aa2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa32:	b15b      	cbz	r3, 800aa4c <__smakebuf_r+0x70>
 800aa34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f000 f81d 	bl	800aa78 <_isatty_r>
 800aa3e:	b128      	cbz	r0, 800aa4c <__smakebuf_r+0x70>
 800aa40:	89a3      	ldrh	r3, [r4, #12]
 800aa42:	f023 0303 	bic.w	r3, r3, #3
 800aa46:	f043 0301 	orr.w	r3, r3, #1
 800aa4a:	81a3      	strh	r3, [r4, #12]
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	431d      	orrs	r5, r3
 800aa50:	81a5      	strh	r5, [r4, #12]
 800aa52:	e7cf      	b.n	800a9f4 <__smakebuf_r+0x18>

0800aa54 <_fstat_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	4d07      	ldr	r5, [pc, #28]	@ (800aa74 <_fstat_r+0x20>)
 800aa58:	2300      	movs	r3, #0
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	4608      	mov	r0, r1
 800aa5e:	4611      	mov	r1, r2
 800aa60:	602b      	str	r3, [r5, #0]
 800aa62:	f7f6 fbb8 	bl	80011d6 <_fstat>
 800aa66:	1c43      	adds	r3, r0, #1
 800aa68:	d102      	bne.n	800aa70 <_fstat_r+0x1c>
 800aa6a:	682b      	ldr	r3, [r5, #0]
 800aa6c:	b103      	cbz	r3, 800aa70 <_fstat_r+0x1c>
 800aa6e:	6023      	str	r3, [r4, #0]
 800aa70:	bd38      	pop	{r3, r4, r5, pc}
 800aa72:	bf00      	nop
 800aa74:	240044d4 	.word	0x240044d4

0800aa78 <_isatty_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4d06      	ldr	r5, [pc, #24]	@ (800aa94 <_isatty_r+0x1c>)
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4604      	mov	r4, r0
 800aa80:	4608      	mov	r0, r1
 800aa82:	602b      	str	r3, [r5, #0]
 800aa84:	f7f6 fbb7 	bl	80011f6 <_isatty>
 800aa88:	1c43      	adds	r3, r0, #1
 800aa8a:	d102      	bne.n	800aa92 <_isatty_r+0x1a>
 800aa8c:	682b      	ldr	r3, [r5, #0]
 800aa8e:	b103      	cbz	r3, 800aa92 <_isatty_r+0x1a>
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	bd38      	pop	{r3, r4, r5, pc}
 800aa94:	240044d4 	.word	0x240044d4

0800aa98 <_init>:
 800aa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9a:	bf00      	nop
 800aa9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa9e:	bc08      	pop	{r3}
 800aaa0:	469e      	mov	lr, r3
 800aaa2:	4770      	bx	lr

0800aaa4 <_fini>:
 800aaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa6:	bf00      	nop
 800aaa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaaa:	bc08      	pop	{r3}
 800aaac:	469e      	mov	lr, r3
 800aaae:	4770      	bx	lr
