
geral_test_h755zi-q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008828  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08008ac8  08008ac8  00009ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c4c  08008c4c  0000a014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c4c  08008c4c  00009c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c54  08008c54  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c54  08008c54  00009c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c58  08008c58  00009c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  08008c5c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004af4  24000014  08008c70  0000a014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004b08  08008c70  0000ab08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022993  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000448f  00000000  00000000  0002c9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b10  00000000  00000000  00030e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f7  00000000  00000000  00032978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e123  00000000  00000000  00033e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021330  00000000  00000000  00071f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001960c9  00000000  00000000  000932c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022938b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007264  00000000  00000000  002293d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00230634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008ab0 	.word	0x08008ab0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	08008ab0 	.word	0x08008ab0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000610:	4b49      	ldr	r3, [pc, #292]	@ (8000738 <SystemInit+0x12c>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000616:	4a48      	ldr	r2, [pc, #288]	@ (8000738 <SystemInit+0x12c>)
 8000618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000620:	4b45      	ldr	r3, [pc, #276]	@ (8000738 <SystemInit+0x12c>)
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	4a44      	ldr	r2, [pc, #272]	@ (8000738 <SystemInit+0x12c>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062c:	4b43      	ldr	r3, [pc, #268]	@ (800073c <SystemInit+0x130>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f003 030f 	and.w	r3, r3, #15
 8000634:	2b06      	cmp	r3, #6
 8000636:	d807      	bhi.n	8000648 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000638:	4b40      	ldr	r3, [pc, #256]	@ (800073c <SystemInit+0x130>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f023 030f 	bic.w	r3, r3, #15
 8000640:	4a3e      	ldr	r2, [pc, #248]	@ (800073c <SystemInit+0x130>)
 8000642:	f043 0307 	orr.w	r3, r3, #7
 8000646:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000648:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <SystemInit+0x134>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a3c      	ldr	r2, [pc, #240]	@ (8000740 <SystemInit+0x134>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000654:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <SystemInit+0x134>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800065a:	4b39      	ldr	r3, [pc, #228]	@ (8000740 <SystemInit+0x134>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4938      	ldr	r1, [pc, #224]	@ (8000740 <SystemInit+0x134>)
 8000660:	4b38      	ldr	r3, [pc, #224]	@ (8000744 <SystemInit+0x138>)
 8000662:	4013      	ands	r3, r2
 8000664:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000666:	4b35      	ldr	r3, [pc, #212]	@ (800073c <SystemInit+0x130>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f003 0308 	and.w	r3, r3, #8
 800066e:	2b00      	cmp	r3, #0
 8000670:	d007      	beq.n	8000682 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000672:	4b32      	ldr	r3, [pc, #200]	@ (800073c <SystemInit+0x130>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f023 030f 	bic.w	r3, r3, #15
 800067a:	4a30      	ldr	r2, [pc, #192]	@ (800073c <SystemInit+0x130>)
 800067c:	f043 0307 	orr.w	r3, r3, #7
 8000680:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000682:	4b2f      	ldr	r3, [pc, #188]	@ (8000740 <SystemInit+0x134>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000688:	4b2d      	ldr	r3, [pc, #180]	@ (8000740 <SystemInit+0x134>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800068e:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <SystemInit+0x134>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <SystemInit+0x134>)
 8000696:	4a2c      	ldr	r2, [pc, #176]	@ (8000748 <SystemInit+0x13c>)
 8000698:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <SystemInit+0x134>)
 800069c:	4a2b      	ldr	r2, [pc, #172]	@ (800074c <SystemInit+0x140>)
 800069e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <SystemInit+0x134>)
 80006a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <SystemInit+0x144>)
 80006a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006a6:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <SystemInit+0x134>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <SystemInit+0x134>)
 80006ae:	4a28      	ldr	r2, [pc, #160]	@ (8000750 <SystemInit+0x144>)
 80006b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <SystemInit+0x134>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <SystemInit+0x134>)
 80006ba:	4a25      	ldr	r2, [pc, #148]	@ (8000750 <SystemInit+0x144>)
 80006bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <SystemInit+0x134>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <SystemInit+0x134>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000740 <SystemInit+0x134>)
 80006ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <SystemInit+0x134>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <SystemInit+0x148>)
 80006d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006da:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <SystemInit+0x148>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <SystemInit+0x14c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <SystemInit+0x150>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006ee:	d202      	bcs.n	80006f6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <SystemInit+0x154>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <SystemInit+0x134>)
 80006f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000700:	2b00      	cmp	r3, #0
 8000702:	d113      	bne.n	800072c <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <SystemInit+0x134>)
 8000706:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800070a:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <SystemInit+0x134>)
 800070c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000710:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <SystemInit+0x158>)
 8000716:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800071a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <SystemInit+0x134>)
 800071e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000722:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <SystemInit+0x134>)
 8000724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000728:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	52002000 	.word	0x52002000
 8000740:	58024400 	.word	0x58024400
 8000744:	eaf6ed7f 	.word	0xeaf6ed7f
 8000748:	02020200 	.word	0x02020200
 800074c:	01ff0000 	.word	0x01ff0000
 8000750:	01010280 	.word	0x01010280
 8000754:	580000c0 	.word	0x580000c0
 8000758:	5c001000 	.word	0x5c001000
 800075c:	ffff0000 	.word	0xffff0000
 8000760:	51008108 	.word	0x51008108
 8000764:	52004000 	.word	0x52004000

08000768 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <ExitRun0Mode+0x2c>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <ExitRun0Mode+0x2c>)
 8000772:	f023 0302 	bic.w	r3, r3, #2
 8000776:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000778:	bf00      	nop
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <ExitRun0Mode+0x2c>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	58024800 	.word	0x58024800

08000798 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idle */
  idleHandle = osThreadNew(idle_task, NULL, &idle_attributes);
 800079c:	4a1c      	ldr	r2, [pc, #112]	@ (8000810 <MX_FREERTOS_Init+0x78>)
 800079e:	2100      	movs	r1, #0
 80007a0:	481c      	ldr	r0, [pc, #112]	@ (8000814 <MX_FREERTOS_Init+0x7c>)
 80007a2:	f005 fbf5 	bl	8005f90 <osThreadNew>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000818 <MX_FREERTOS_Init+0x80>)
 80007aa:	6013      	str	r3, [r2, #0]

  /* creation of nb_iot */
  nb_iotHandle = osThreadNew(nb_iot_task, NULL, &nb_iot_attributes);
 80007ac:	4a1b      	ldr	r2, [pc, #108]	@ (800081c <MX_FREERTOS_Init+0x84>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	481b      	ldr	r0, [pc, #108]	@ (8000820 <MX_FREERTOS_Init+0x88>)
 80007b2:	f005 fbed 	bl	8005f90 <osThreadNew>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000824 <MX_FREERTOS_Init+0x8c>)
 80007ba:	6013      	str	r3, [r2, #0]

  /* creation of cnss */
  cnssHandle = osThreadNew(cnss_task, NULL, &cnss_attributes);
 80007bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000828 <MX_FREERTOS_Init+0x90>)
 80007be:	2100      	movs	r1, #0
 80007c0:	481a      	ldr	r0, [pc, #104]	@ (800082c <MX_FREERTOS_Init+0x94>)
 80007c2:	f005 fbe5 	bl	8005f90 <osThreadNew>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a19      	ldr	r2, [pc, #100]	@ (8000830 <MX_FREERTOS_Init+0x98>)
 80007ca:	6013      	str	r3, [r2, #0]

  /* creation of sd_card */
  sd_cardHandle = osThreadNew(sd_card_task, NULL, &sd_card_attributes);
 80007cc:	4a19      	ldr	r2, [pc, #100]	@ (8000834 <MX_FREERTOS_Init+0x9c>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4819      	ldr	r0, [pc, #100]	@ (8000838 <MX_FREERTOS_Init+0xa0>)
 80007d2:	f005 fbdd 	bl	8005f90 <osThreadNew>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a18      	ldr	r2, [pc, #96]	@ (800083c <MX_FREERTOS_Init+0xa4>)
 80007da:	6013      	str	r3, [r2, #0]

  /* creation of temp */
  tempHandle = osThreadNew(temp_task, NULL, &temp_attributes);
 80007dc:	4a18      	ldr	r2, [pc, #96]	@ (8000840 <MX_FREERTOS_Init+0xa8>)
 80007de:	2100      	movs	r1, #0
 80007e0:	4818      	ldr	r0, [pc, #96]	@ (8000844 <MX_FREERTOS_Init+0xac>)
 80007e2:	f005 fbd5 	bl	8005f90 <osThreadNew>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4a17      	ldr	r2, [pc, #92]	@ (8000848 <MX_FREERTOS_Init+0xb0>)
 80007ea:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(imu_task, NULL, &imu_attributes);
 80007ec:	4a17      	ldr	r2, [pc, #92]	@ (800084c <MX_FREERTOS_Init+0xb4>)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4817      	ldr	r0, [pc, #92]	@ (8000850 <MX_FREERTOS_Init+0xb8>)
 80007f2:	f005 fbcd 	bl	8005f90 <osThreadNew>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4a16      	ldr	r2, [pc, #88]	@ (8000854 <MX_FREERTOS_Init+0xbc>)
 80007fa:	6013      	str	r3, [r2, #0]

  /* creation of batterie */
  batterieHandle = osThreadNew(batterie_task, NULL, &batterie_attributes);
 80007fc:	4a16      	ldr	r2, [pc, #88]	@ (8000858 <MX_FREERTOS_Init+0xc0>)
 80007fe:	2100      	movs	r1, #0
 8000800:	4816      	ldr	r0, [pc, #88]	@ (800085c <MX_FREERTOS_Init+0xc4>)
 8000802:	f005 fbc5 	bl	8005f90 <osThreadNew>
 8000806:	4603      	mov	r3, r0
 8000808:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <MX_FREERTOS_Init+0xc8>)
 800080a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	08008b28 	.word	0x08008b28
 8000814:	08000865 	.word	0x08000865
 8000818:	24000030 	.word	0x24000030
 800081c:	08008b4c 	.word	0x08008b4c
 8000820:	08000877 	.word	0x08000877
 8000824:	24000034 	.word	0x24000034
 8000828:	08008b70 	.word	0x08008b70
 800082c:	0800088b 	.word	0x0800088b
 8000830:	24000038 	.word	0x24000038
 8000834:	08008b94 	.word	0x08008b94
 8000838:	0800089f 	.word	0x0800089f
 800083c:	2400003c 	.word	0x2400003c
 8000840:	08008bb8 	.word	0x08008bb8
 8000844:	080008b3 	.word	0x080008b3
 8000848:	24000040 	.word	0x24000040
 800084c:	08008bdc 	.word	0x08008bdc
 8000850:	080008c7 	.word	0x080008c7
 8000854:	24000044 	.word	0x24000044
 8000858:	08008c00 	.word	0x08008c00
 800085c:	080008db 	.word	0x080008db
 8000860:	24000048 	.word	0x24000048

08000864 <idle_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_idle_task */
__weak void idle_task(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN idle_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000870:	f005 fc40 	bl	80060f4 <osDelay>
 8000874:	e7fa      	b.n	800086c <idle_task+0x8>

08000876 <nb_iot_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_nb_iot_task */
__weak void nb_iot_task(void *argument)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN nb_iot_task */
	osThreadYield();
 800087e:	f005 fc19 	bl	80060b4 <osThreadYield>
  /* USER CODE END nb_iot_task */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <cnss_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cnss_task */
__weak void cnss_task(void *argument)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cnss_task */
	osThreadYield();
 8000892:	f005 fc0f 	bl	80060b4 <osThreadYield>
  /* USER CODE END cnss_task */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <sd_card_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sd_card_task */
__weak void sd_card_task(void *argument)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sd_card_task */
	osThreadYield();
 80008a6:	f005 fc05 	bl	80060b4 <osThreadYield>
  /* USER CODE END sd_card_task */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <temp_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temp_task */
__weak void temp_task(void *argument)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temp_task */
	osThreadYield();
 80008ba:	f005 fbfb 	bl	80060b4 <osThreadYield>
  /* USER CODE END temp_task */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <imu_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_imu_task */
__weak void imu_task(void *argument)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN imu_task */
	osThreadYield();
 80008ce:	f005 fbf1 	bl	80060b4 <osThreadYield>
	/* Infinite loop */

  /* USER CODE END imu_task */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <batterie_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_batterie_task */
__weak void batterie_task(void *argument)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN batterie_task */
  osThreadYield();
 80008e2:	f005 fbe7 	bl	80060b4 <osThreadYield>
	/* Infinite loop */

  /* USER CODE END batterie_task */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b51      	ldr	r3, [pc, #324]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090c:	4a4f      	ldr	r2, [pc, #316]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000916:	4b4d      	ldr	r3, [pc, #308]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b49      	ldr	r3, [pc, #292]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092a:	4a48      	ldr	r2, [pc, #288]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000934:	4b45      	ldr	r3, [pc, #276]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b42      	ldr	r3, [pc, #264]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000948:	4a40      	ldr	r2, [pc, #256]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 800094a:	f043 0302 	orr.w	r3, r3, #2
 800094e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000952:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000958:	f003 0302 	and.w	r3, r3, #2
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000960:	4b3a      	ldr	r3, [pc, #232]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a39      	ldr	r2, [pc, #228]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b36      	ldr	r3, [pc, #216]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097e:	4b33      	ldr	r3, [pc, #204]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	4a31      	ldr	r2, [pc, #196]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 8000986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a4c <MX_GPIO_Init+0x15c>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800099c:	2332      	movs	r3, #50	@ 0x32
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ac:	230b      	movs	r3, #11
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4826      	ldr	r0, [pc, #152]	@ (8000a50 <MX_GPIO_Init+0x160>)
 80009b8:	f000 fcee 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80009bc:	2386      	movs	r3, #134	@ 0x86
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009cc:	230b      	movs	r3, #11
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	481f      	ldr	r0, [pc, #124]	@ (8000a54 <MX_GPIO_Init+0x164>)
 80009d8:	f000 fcde 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ee:	230b      	movs	r3, #11
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4817      	ldr	r0, [pc, #92]	@ (8000a58 <MX_GPIO_Init+0x168>)
 80009fa:	f000 fccd 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80009fe:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000a10:	230a      	movs	r3, #10
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480e      	ldr	r0, [pc, #56]	@ (8000a54 <MX_GPIO_Init+0x164>)
 8000a1c:	f000 fcbc 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a20:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a32:	230b      	movs	r3, #11
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <MX_GPIO_Init+0x16c>)
 8000a3e:	f000 fcab 	bl	8001398 <HAL_GPIO_Init>

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	@ 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	58020800 	.word	0x58020800
 8000a54:	58020000 	.word	0x58020000
 8000a58:	58020400 	.word	0x58020400
 8000a5c:	58021800 	.word	0x58021800

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a6a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a6c:	bf00      	nop
 8000a6e:	4b26      	ldr	r3, [pc, #152]	@ (8000b08 <main+0xa8>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d004      	beq.n	8000a84 <main+0x24>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	1e5a      	subs	r2, r3, #1
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	dcf4      	bgt.n	8000a6e <main+0xe>
  if ( timeout < 0 )
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	da01      	bge.n	8000a8e <main+0x2e>
  {
  Error_Handler();
 8000a8a:	f000 f8cd 	bl	8000c28 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8e:	f000 fb3b 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a92:	f000 f83b 	bl	8000b0c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a96:	4b1c      	ldr	r3, [pc, #112]	@ (8000b08 <main+0xa8>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8000b08 <main+0xa8>)
 8000a9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <main+0xa8>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 fe1f 	bl	80016f8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 fe35 	bl	800172c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ac6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ac8:	bf00      	nop
 8000aca:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <main+0xa8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d104      	bne.n	8000ae0 <main+0x80>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	1e5a      	subs	r2, r3, #1
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	dcf4      	bgt.n	8000aca <main+0x6a>
if ( timeout < 0 )
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	da01      	bge.n	8000aea <main+0x8a>
{
Error_Handler();
 8000ae6:	f000 f89f 	bl	8000c28 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aea:	f7ff ff01 	bl	80008f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000aee:	f000 f8a1 	bl	8000c34 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000af2:	f000 fa27 	bl	8000f44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000af6:	f005 fa01 	bl	8005efc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000afa:	f7ff fe4d 	bl	8000798 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000afe:	f005 fa21 	bl	8005f44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b02:	bf00      	nop
 8000b04:	e7fd      	b.n	8000b02 <main+0xa2>
 8000b06:	bf00      	nop
 8000b08:	58024400 	.word	0x58024400

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b09c      	sub	sp, #112	@ 0x70
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	224c      	movs	r2, #76	@ 0x4c
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f007 ff8e 	bl	8008a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2220      	movs	r2, #32
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f007 ff88 	bl	8008a3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b2c:	2004      	movs	r0, #4
 8000b2e:	f000 fe11 	bl	8001754 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b31      	ldr	r3, [pc, #196]	@ (8000bfc <SystemClock_Config+0xf0>)
 8000b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b3a:	4a30      	ldr	r2, [pc, #192]	@ (8000bfc <SystemClock_Config+0xf0>)
 8000b3c:	f023 0301 	bic.w	r3, r3, #1
 8000b40:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b42:	4b2e      	ldr	r3, [pc, #184]	@ (8000bfc <SystemClock_Config+0xf0>)
 8000b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c00 <SystemClock_Config+0xf4>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b54:	4a2a      	ldr	r2, [pc, #168]	@ (8000c00 <SystemClock_Config+0xf4>)
 8000b56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b28      	ldr	r3, [pc, #160]	@ (8000c00 <SystemClock_Config+0xf4>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b68:	bf00      	nop
 8000b6a:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <SystemClock_Config+0xf4>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b76:	d1f8      	bne.n	8000b6a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b80:	2340      	movs	r3, #64	@ 0x40
 8000b82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b84:	2302      	movs	r3, #2
 8000b86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b90:	230a      	movs	r3, #10
 8000b92:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ba0:	230c      	movs	r3, #12
 8000ba2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fe29 	bl	8001808 <HAL_RCC_OscConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bbc:	f000 f834 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc0:	233f      	movs	r3, #63	@ 0x3f
 8000bc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bd4:	2340      	movs	r3, #64	@ 0x40
 8000bd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2101      	movs	r1, #1
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 fa69 	bl	80020bc <HAL_RCC_ClockConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000bf0:	f000 f81a 	bl	8000c28 <Error_Handler>
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	3770      	adds	r7, #112	@ 0x70
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	58000400 	.word	0x58000400
 8000c00:	58024800 	.word	0x58024800

08000c04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d101      	bne.n	8000c1a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c16:	f000 fab3 	bl	8001180 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40010000 	.word	0x40010000

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c38:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c3a:	4a28      	ldr	r2, [pc, #160]	@ (8000cdc <MX_SPI1_Init+0xa8>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c3e:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c40:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c46:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c4c:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c4e:	2203      	movs	r2, #3
 8000c50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c58:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c60:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c78:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c7e:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c84:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_SPI1_Init+0xa4>)
 8000cc4:	f003 fbf4 	bl	80044b0 <HAL_SPI_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000cce:	f7ff ffab 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2400004c 	.word	0x2400004c
 8000cdc:	40013000 	.word	0x40013000

08000ce0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0bc      	sub	sp, #240	@ 0xf0
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf8:	f107 0318 	add.w	r3, r7, #24
 8000cfc:	22c0      	movs	r2, #192	@ 0xc0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f007 fe9b 	bl	8008a3c <memset>
  if(spiHandle->Instance==SPI1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a38      	ldr	r2, [pc, #224]	@ (8000dec <HAL_SPI_MspInit+0x10c>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d168      	bne.n	8000de2 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000d10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fd97 	bl	8002858 <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000d30:	f7ff ff7a 	bl	8000c28 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <HAL_SPI_MspInit+0x110>)
 8000d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000df0 <HAL_SPI_MspInit+0x110>)
 8000d3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d44:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <HAL_SPI_MspInit+0x110>)
 8000d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <HAL_SPI_MspInit+0x110>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d58:	4a25      	ldr	r2, [pc, #148]	@ (8000df0 <HAL_SPI_MspInit+0x110>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d62:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <HAL_SPI_MspInit+0x110>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <HAL_SPI_MspInit+0x110>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d76:	4a1e      	ldr	r2, [pc, #120]	@ (8000df0 <HAL_SPI_MspInit+0x110>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d80:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <HAL_SPI_MspInit+0x110>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d8e:	2360      	movs	r3, #96	@ 0x60
 8000d90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000da6:	2305      	movs	r3, #5
 8000da8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000db0:	4619      	mov	r1, r3
 8000db2:	4810      	ldr	r0, [pc, #64]	@ (8000df4 <HAL_SPI_MspInit+0x114>)
 8000db4:	f000 faf0 	bl	8001398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000db8:	2380      	movs	r3, #128	@ 0x80
 8000dba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <HAL_SPI_MspInit+0x118>)
 8000dde:	f000 fadb 	bl	8001398 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000de2:	bf00      	nop
 8000de4:	37f0      	adds	r7, #240	@ 0xf0
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40013000 	.word	0x40013000
 8000df0:	58024400 	.word	0x58024400
 8000df4:	58020000 	.word	0x58020000
 8000df8:	58020c00 	.word	0x58020c00

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <HAL_MspInit+0x38>)
 8000e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e08:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <HAL_MspInit+0x38>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e12:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <HAL_MspInit+0x38>)
 8000e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	210f      	movs	r1, #15
 8000e24:	f06f 0001 	mvn.w	r0, #1
 8000e28:	f000 fa8e 	bl	8001348 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	58024400 	.word	0x58024400

08000e38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08e      	sub	sp, #56	@ 0x38
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b0f      	cmp	r3, #15
 8000e44:	d842      	bhi.n	8000ecc <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	2019      	movs	r0, #25
 8000e4c:	f000 fa7c 	bl	8001348 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e50:	2019      	movs	r0, #25
 8000e52:	f000 fa93 	bl	800137c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000e56:	4a23      	ldr	r2, [pc, #140]	@ (8000ee4 <HAL_InitTick+0xac>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <HAL_InitTick+0xb0>)
 8000e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e62:	4a21      	ldr	r2, [pc, #132]	@ (8000ee8 <HAL_InitTick+0xb0>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <HAL_InitTick+0xb0>)
 8000e6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e7a:	f107 020c 	add.w	r2, r7, #12
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fca5 	bl	80027d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e8a:	f001 fc8d 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8000e8e:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e92:	4a16      	ldr	r2, [pc, #88]	@ (8000eec <HAL_InitTick+0xb4>)
 8000e94:	fba2 2303 	umull	r2, r3, r2, r3
 8000e98:	0c9b      	lsrs	r3, r3, #18
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <HAL_InitTick+0xb8>)
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <HAL_InitTick+0xbc>)
 8000ea2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_InitTick+0xb8>)
 8000ea6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eaa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eac:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <HAL_InitTick+0xb8>)
 8000eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eb0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <HAL_InitTick+0xb8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <HAL_InitTick+0xb8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ebe:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <HAL_InitTick+0xb8>)
 8000ec0:	f003 fc35 	bl	800472e <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d107      	bne.n	8000eda <HAL_InitTick+0xa2>
 8000eca:	e001      	b.n	8000ed0 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e005      	b.n	8000edc <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ed0:	4807      	ldr	r0, [pc, #28]	@ (8000ef0 <HAL_InitTick+0xb8>)
 8000ed2:	f003 fc8d 	bl	80047f0 <HAL_TIM_Base_Start_IT>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3738      	adds	r7, #56	@ 0x38
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	24000008 	.word	0x24000008
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	431bde83 	.word	0x431bde83
 8000ef0:	240000d4 	.word	0x240000d4
 8000ef4:	40010000 	.word	0x40010000

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <NMI_Handler+0x4>

08000f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <MemManage_Handler+0x4>

08000f10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <TIM1_UP_IRQHandler+0x10>)
 8000f36:	f003 fcd3 	bl	80048e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	240000d4 	.word	0x240000d4

08000f44 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f4a:	4a23      	ldr	r2, [pc, #140]	@ (8000fd8 <MX_USART3_UART_Init+0x94>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f86:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f8c:	4811      	ldr	r0, [pc, #68]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f8e:	f003 fe95 	bl	8004cbc <HAL_UART_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f98:	f7ff fe46 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000fa0:	f004 fe9d 	bl	8005cde <HAL_UARTEx_SetTxFifoThreshold>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000faa:	f7ff fe3d 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4808      	ldr	r0, [pc, #32]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000fb2:	f004 fed2 	bl	8005d5a <HAL_UARTEx_SetRxFifoThreshold>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fbc:	f7ff fe34 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000fc2:	f004 fe53 	bl	8005c6c <HAL_UARTEx_DisableFifoMode>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fcc:	f7ff fe2c 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	24000120 	.word	0x24000120
 8000fd8:	40004800 	.word	0x40004800

08000fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0ba      	sub	sp, #232	@ 0xe8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	22c0      	movs	r2, #192	@ 0xc0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f007 fd1d 	bl	8008a3c <memset>
  if(uartHandle->Instance==USART3)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a27      	ldr	r2, [pc, #156]	@ (80010a4 <HAL_UART_MspInit+0xc8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d146      	bne.n	800109a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800100c:	f04f 0202 	mov.w	r2, #2
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fc18 	bl	8002858 <HAL_RCCEx_PeriphCLKConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800102e:	f7ff fdfb 	bl	8000c28 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_UART_MspInit+0xcc>)
 8001034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001038:	4a1b      	ldr	r2, [pc, #108]	@ (80010a8 <HAL_UART_MspInit+0xcc>)
 800103a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800103e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <HAL_UART_MspInit+0xcc>)
 8001044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001048:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001050:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <HAL_UART_MspInit+0xcc>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	4a14      	ldr	r2, [pc, #80]	@ (80010a8 <HAL_UART_MspInit+0xcc>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_UART_MspInit+0xcc>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800106e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001072:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001088:	2307      	movs	r3, #7
 800108a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	@ (80010ac <HAL_UART_MspInit+0xd0>)
 8001096:	f000 f97f 	bl	8001398 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	37e8      	adds	r7, #232	@ 0xe8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40004800 	.word	0x40004800
 80010a8:	58024400 	.word	0x58024400
 80010ac:	58020c00 	.word	0x58020c00

080010b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80010ec <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80010b4:	f7ff fb58 	bl	8000768 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b8:	f7ff faa8 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	@ (80010f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f007 fcb3 	bl	8008a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff fcbb 	bl	8000a60 <main>
  bx  lr
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010f4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80010f8:	08008c5c 	.word	0x08008c5c
  ldr r2, =_sbss
 80010fc:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001100:	24004b08 	.word	0x24004b08

08001104 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC3_IRQHandler>
	...

08001108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110e:	2003      	movs	r0, #3
 8001110:	f000 f90f 	bl	8001332 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001114:	f001 f988 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 8001118:	4602      	mov	r2, r0
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <HAL_Init+0x68>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	4913      	ldr	r1, [pc, #76]	@ (8001174 <HAL_Init+0x6c>)
 8001126:	5ccb      	ldrb	r3, [r1, r3]
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_Init+0x68>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	4a0e      	ldr	r2, [pc, #56]	@ (8001174 <HAL_Init+0x6c>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	fa22 f303 	lsr.w	r3, r2, r3
 8001148:	4a0b      	ldr	r2, [pc, #44]	@ (8001178 <HAL_Init+0x70>)
 800114a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800114c:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <HAL_Init+0x74>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001152:	200f      	movs	r0, #15
 8001154:	f7ff fe70 	bl	8000e38 <HAL_InitTick>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e002      	b.n	8001168 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001162:	f7ff fe4b 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58024400 	.word	0x58024400
 8001174:	08008b18 	.word	0x08008b18
 8001178:	24000004 	.word	0x24000004
 800117c:	24000000 	.word	0x24000000

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2400000c 	.word	0x2400000c
 80011a4:	240001b4 	.word	0x240001b4

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	240001b4 	.word	0x240001b4

080011c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <HAL_GetREVID+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	0c1b      	lsrs	r3, r3, #16
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	5c001000 	.word	0x5c001000

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <__NVIC_SetPriorityGrouping+0x40>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	4313      	orrs	r3, r2
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <__NVIC_SetPriorityGrouping+0x40>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	05fa0000 	.word	0x05fa0000

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db0b      	blt.n	8001266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	4907      	ldr	r1, [pc, #28]	@ (8001274 <__NVIC_EnableIRQ+0x38>)
 8001256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2001      	movs	r0, #1
 800125e:	fa00 f202 	lsl.w	r2, r0, r2
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	@ (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	@ (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	@ 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	@ 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff4c 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001356:	f7ff ff63 	bl	8001220 <__NVIC_GetPriorityGrouping>
 800135a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ffb3 	bl	80012cc <NVIC_EncodePriority>
 8001366:	4602      	mov	r2, r0
 8001368:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff82 	bl	8001278 <__NVIC_SetPriority>
}
 8001374:	bf00      	nop
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff56 	bl	800123c <__NVIC_EnableIRQ>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	@ 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013a6:	4b89      	ldr	r3, [pc, #548]	@ (80015cc <HAL_GPIO_Init+0x234>)
 80013a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013aa:	e194      	b.n	80016d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 8186 	beq.w	80016d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d005      	beq.n	80013dc <HAL_GPIO_Init+0x44>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d130      	bne.n	800143e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001412:	2201      	movs	r2, #1
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	f003 0201 	and.w	r2, r3, #1
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b03      	cmp	r3, #3
 8001448:	d017      	beq.n	800147a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d123      	bne.n	80014ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	69b9      	ldr	r1, [r7, #24]
 80014ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0203 	and.w	r2, r3, #3
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80e0 	beq.w	80016d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001510:	4b2f      	ldr	r3, [pc, #188]	@ (80015d0 <HAL_GPIO_Init+0x238>)
 8001512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001516:	4a2e      	ldr	r2, [pc, #184]	@ (80015d0 <HAL_GPIO_Init+0x238>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001520:	4b2b      	ldr	r3, [pc, #172]	@ (80015d0 <HAL_GPIO_Init+0x238>)
 8001522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152e:	4a29      	ldr	r2, [pc, #164]	@ (80015d4 <HAL_GPIO_Init+0x23c>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a20      	ldr	r2, [pc, #128]	@ (80015d8 <HAL_GPIO_Init+0x240>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d052      	beq.n	8001600 <HAL_GPIO_Init+0x268>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a1f      	ldr	r2, [pc, #124]	@ (80015dc <HAL_GPIO_Init+0x244>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d031      	beq.n	80015c6 <HAL_GPIO_Init+0x22e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1e      	ldr	r2, [pc, #120]	@ (80015e0 <HAL_GPIO_Init+0x248>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d02b      	beq.n	80015c2 <HAL_GPIO_Init+0x22a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <HAL_GPIO_Init+0x24c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d025      	beq.n	80015be <HAL_GPIO_Init+0x226>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a1c      	ldr	r2, [pc, #112]	@ (80015e8 <HAL_GPIO_Init+0x250>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d01f      	beq.n	80015ba <HAL_GPIO_Init+0x222>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a1b      	ldr	r2, [pc, #108]	@ (80015ec <HAL_GPIO_Init+0x254>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <HAL_GPIO_Init+0x21e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a1a      	ldr	r2, [pc, #104]	@ (80015f0 <HAL_GPIO_Init+0x258>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a19      	ldr	r2, [pc, #100]	@ (80015f4 <HAL_GPIO_Init+0x25c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a18      	ldr	r2, [pc, #96]	@ (80015f8 <HAL_GPIO_Init+0x260>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a17      	ldr	r2, [pc, #92]	@ (80015fc <HAL_GPIO_Init+0x264>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x20e>
 80015a2:	2309      	movs	r3, #9
 80015a4:	e02d      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015a6:	230a      	movs	r3, #10
 80015a8:	e02b      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015aa:	2308      	movs	r3, #8
 80015ac:	e029      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015ae:	2307      	movs	r3, #7
 80015b0:	e027      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015b2:	2306      	movs	r3, #6
 80015b4:	e025      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015b6:	2305      	movs	r3, #5
 80015b8:	e023      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e021      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015be:	2303      	movs	r3, #3
 80015c0:	e01f      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e01d      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e01b      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015ca:	bf00      	nop
 80015cc:	58000080 	.word	0x58000080
 80015d0:	58024400 	.word	0x58024400
 80015d4:	58000400 	.word	0x58000400
 80015d8:	58020000 	.word	0x58020000
 80015dc:	58020400 	.word	0x58020400
 80015e0:	58020800 	.word	0x58020800
 80015e4:	58020c00 	.word	0x58020c00
 80015e8:	58021000 	.word	0x58021000
 80015ec:	58021400 	.word	0x58021400
 80015f0:	58021800 	.word	0x58021800
 80015f4:	58021c00 	.word	0x58021c00
 80015f8:	58022000 	.word	0x58022000
 80015fc:	58022400 	.word	0x58022400
 8001600:	2300      	movs	r3, #0
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	f002 0203 	and.w	r2, r2, #3
 8001608:	0092      	lsls	r2, r2, #2
 800160a:	4093      	lsls	r3, r2
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001612:	4938      	ldr	r1, [pc, #224]	@ (80016f4 <HAL_GPIO_Init+0x35c>)
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001646:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800164e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001674:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	3301      	adds	r3, #1
 80016d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f47f ae63 	bne.w	80013ac <HAL_GPIO_Init+0x14>
  }
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3724      	adds	r7, #36	@ 0x24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	58000400 	.word	0x58000400

080016f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001700:	4a08      	ldr	r2, [pc, #32]	@ (8001724 <HAL_HSEM_FastTake+0x2c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3320      	adds	r3, #32
 8001706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170a:	4a07      	ldr	r2, [pc, #28]	@ (8001728 <HAL_HSEM_FastTake+0x30>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d101      	bne.n	8001714 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	e000      	b.n	8001716 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	58026400 	.word	0x58026400
 8001728:	80000300 	.word	0x80000300

0800172c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001736:	4906      	ldr	r1, [pc, #24]	@ (8001750 <HAL_HSEM_Release+0x24>)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	58026400 	.word	0x58026400

08001754 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800175c:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <HAL_PWREx_ConfigSupply+0xb0>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	2b06      	cmp	r3, #6
 8001766:	d00a      	beq.n	800177e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001768:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <HAL_PWREx_ConfigSupply+0xb0>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e040      	b.n	80017fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e03e      	b.n	80017fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800177e:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <HAL_PWREx_ConfigSupply+0xb0>)
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001786:	491f      	ldr	r1, [pc, #124]	@ (8001804 <HAL_PWREx_ConfigSupply+0xb0>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4313      	orrs	r3, r2
 800178c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800178e:	f7ff fd0b 	bl	80011a8 <HAL_GetTick>
 8001792:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001794:	e009      	b.n	80017aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001796:	f7ff fd07 	bl	80011a8 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017a4:	d901      	bls.n	80017aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e028      	b.n	80017fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017aa:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <HAL_PWREx_ConfigSupply+0xb0>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017b6:	d1ee      	bne.n	8001796 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b1e      	cmp	r3, #30
 80017bc:	d008      	beq.n	80017d0 <HAL_PWREx_ConfigSupply+0x7c>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80017c2:	d005      	beq.n	80017d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b1d      	cmp	r3, #29
 80017c8:	d002      	beq.n	80017d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b2d      	cmp	r3, #45	@ 0x2d
 80017ce:	d114      	bne.n	80017fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80017d0:	f7ff fcea 	bl	80011a8 <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017d6:	e009      	b.n	80017ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017d8:	f7ff fce6 	bl	80011a8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017e6:	d901      	bls.n	80017ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e007      	b.n	80017fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <HAL_PWREx_ConfigSupply+0xb0>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f8:	d1ee      	bne.n	80017d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	58024800 	.word	0x58024800

08001808 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	@ 0x30
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f000 bc48 	b.w	80020ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8088 	beq.w	800193a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182a:	4b99      	ldr	r3, [pc, #612]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001834:	4b96      	ldr	r3, [pc, #600]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800183a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183c:	2b10      	cmp	r3, #16
 800183e:	d007      	beq.n	8001850 <HAL_RCC_OscConfig+0x48>
 8001840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001842:	2b18      	cmp	r3, #24
 8001844:	d111      	bne.n	800186a <HAL_RCC_OscConfig+0x62>
 8001846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d10c      	bne.n	800186a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	4b8f      	ldr	r3, [pc, #572]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d06d      	beq.n	8001938 <HAL_RCC_OscConfig+0x130>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d169      	bne.n	8001938 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	f000 bc21 	b.w	80020ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x7a>
 8001874:	4b86      	ldr	r3, [pc, #536]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a85      	ldr	r2, [pc, #532]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e02e      	b.n	80018e0 <HAL_RCC_OscConfig+0xd8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x9c>
 800188a:	4b81      	ldr	r3, [pc, #516]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a80      	ldr	r2, [pc, #512]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b7e      	ldr	r3, [pc, #504]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 800189c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e01d      	b.n	80018e0 <HAL_RCC_OscConfig+0xd8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0xc0>
 80018ae:	4b78      	ldr	r3, [pc, #480]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a77      	ldr	r2, [pc, #476]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b75      	ldr	r3, [pc, #468]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a74      	ldr	r2, [pc, #464]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xd8>
 80018c8:	4b71      	ldr	r3, [pc, #452]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a70      	ldr	r2, [pc, #448]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a6d      	ldr	r2, [pc, #436]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff fc5e 	bl	80011a8 <HAL_GetTick>
 80018ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff fc5a 	bl	80011a8 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	@ 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e3d4      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001902:	4b63      	ldr	r3, [pc, #396]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0xe8>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fc4a 	bl	80011a8 <HAL_GetTick>
 8001914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fc46 	bl	80011a8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	@ 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e3c0      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800192a:	4b59      	ldr	r3, [pc, #356]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x110>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80ca 	beq.w	8001adc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001948:	4b51      	ldr	r3, [pc, #324]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001950:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001952:	4b4f      	ldr	r3, [pc, #316]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001956:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_RCC_OscConfig+0x166>
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	2b18      	cmp	r3, #24
 8001962:	d156      	bne.n	8001a12 <HAL_RCC_OscConfig+0x20a>
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d151      	bne.n	8001a12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196e:	4b48      	ldr	r3, [pc, #288]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x17e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e392      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001986:	4b42      	ldr	r3, [pc, #264]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0219 	bic.w	r2, r3, #25
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	493f      	ldr	r1, [pc, #252]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fc06 	bl	80011a8 <HAL_GetTick>
 800199c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff fc02 	bl	80011a8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e37c      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b2:	4b37      	ldr	r3, [pc, #220]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	f7ff fbff 	bl	80011c0 <HAL_GetREVID>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d817      	bhi.n	80019fc <HAL_RCC_OscConfig+0x1f4>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b40      	cmp	r3, #64	@ 0x40
 80019d2:	d108      	bne.n	80019e6 <HAL_RCC_OscConfig+0x1de>
 80019d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80019dc:	4a2c      	ldr	r2, [pc, #176]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80019de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e4:	e07a      	b.n	8001adc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	031b      	lsls	r3, r3, #12
 80019f4:	4926      	ldr	r1, [pc, #152]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fa:	e06f      	b.n	8001adc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	4921      	ldr	r1, [pc, #132]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a10:	e064      	b.n	8001adc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d047      	beq.n	8001aaa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 0219 	bic.w	r2, r3, #25
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	491a      	ldr	r1, [pc, #104]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fbbc 	bl	80011a8 <HAL_GetTick>
 8001a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a34:	f7ff fbb8 	bl	80011a8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e332      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	f7ff fbb5 	bl	80011c0 <HAL_GetREVID>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d819      	bhi.n	8001a94 <HAL_RCC_OscConfig+0x28c>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2b40      	cmp	r3, #64	@ 0x40
 8001a66:	d108      	bne.n	8001a7a <HAL_RCC_OscConfig+0x272>
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a70:	4a07      	ldr	r2, [pc, #28]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a76:	6053      	str	r3, [r2, #4]
 8001a78:	e030      	b.n	8001adc <HAL_RCC_OscConfig+0x2d4>
 8001a7a:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	031b      	lsls	r3, r3, #12
 8001a88:	4901      	ldr	r1, [pc, #4]	@ (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
 8001a8e:	e025      	b.n	8001adc <HAL_RCC_OscConfig+0x2d4>
 8001a90:	58024400 	.word	0x58024400
 8001a94:	4b9a      	ldr	r3, [pc, #616]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	4997      	ldr	r1, [pc, #604]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e018      	b.n	8001adc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aaa:	4b95      	ldr	r3, [pc, #596]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a94      	ldr	r2, [pc, #592]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fb77 	bl	80011a8 <HAL_GetTick>
 8001aba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abe:	f7ff fb73 	bl	80011a8 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e2ed      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ad0:	4b8b      	ldr	r3, [pc, #556]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a9 	beq.w	8001c3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aea:	4b85      	ldr	r3, [pc, #532]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001af2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001af4:	4b82      	ldr	r3, [pc, #520]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d007      	beq.n	8001b10 <HAL_RCC_OscConfig+0x308>
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b18      	cmp	r3, #24
 8001b04:	d13a      	bne.n	8001b7c <HAL_RCC_OscConfig+0x374>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d135      	bne.n	8001b7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b10:	4b7b      	ldr	r3, [pc, #492]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_OscConfig+0x320>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	2b80      	cmp	r3, #128	@ 0x80
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e2c1      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b28:	f7ff fb4a 	bl	80011c0 <HAL_GetREVID>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d817      	bhi.n	8001b66 <HAL_RCC_OscConfig+0x35e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d108      	bne.n	8001b50 <HAL_RCC_OscConfig+0x348>
 8001b3e:	4b70      	ldr	r3, [pc, #448]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b46:	4a6e      	ldr	r2, [pc, #440]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b4e:	e075      	b.n	8001c3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b50:	4b6b      	ldr	r3, [pc, #428]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	069b      	lsls	r3, r3, #26
 8001b5e:	4968      	ldr	r1, [pc, #416]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b64:	e06a      	b.n	8001c3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b66:	4b66      	ldr	r3, [pc, #408]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	061b      	lsls	r3, r3, #24
 8001b74:	4962      	ldr	r1, [pc, #392]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b7a:	e05f      	b.n	8001c3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d042      	beq.n	8001c0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b84:	4b5e      	ldr	r3, [pc, #376]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5d      	ldr	r2, [pc, #372]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb0a 	bl	80011a8 <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b98:	f7ff fb06 	bl	80011a8 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e280      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001baa:	4b55      	ldr	r3, [pc, #340]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bb6:	f7ff fb03 	bl	80011c0 <HAL_GetREVID>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d817      	bhi.n	8001bf4 <HAL_RCC_OscConfig+0x3ec>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d108      	bne.n	8001bde <HAL_RCC_OscConfig+0x3d6>
 8001bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001bd4:	4a4a      	ldr	r2, [pc, #296]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001bda:	6053      	str	r3, [r2, #4]
 8001bdc:	e02e      	b.n	8001c3c <HAL_RCC_OscConfig+0x434>
 8001bde:	4b48      	ldr	r3, [pc, #288]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	069b      	lsls	r3, r3, #26
 8001bec:	4944      	ldr	r1, [pc, #272]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
 8001bf2:	e023      	b.n	8001c3c <HAL_RCC_OscConfig+0x434>
 8001bf4:	4b42      	ldr	r3, [pc, #264]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	493f      	ldr	r1, [pc, #252]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
 8001c08:	e018      	b.n	8001c3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff fac7 	bl	80011a8 <HAL_GetTick>
 8001c1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c1e:	f7ff fac3 	bl	80011a8 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e23d      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c30:	4b33      	ldr	r3, [pc, #204]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d036      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d019      	beq.n	8001c84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c50:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c54:	4a2a      	ldr	r2, [pc, #168]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5c:	f7ff faa4 	bl	80011a8 <HAL_GetTick>
 8001c60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7ff faa0 	bl	80011a8 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e21a      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c76:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x45c>
 8001c82:	e018      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c84:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c88:	4a1d      	ldr	r2, [pc, #116]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff fa8a 	bl	80011a8 <HAL_GetTick>
 8001c94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c98:	f7ff fa86 	bl	80011a8 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e200      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d039      	beq.n	8001d36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cca:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a0c      	ldr	r2, [pc, #48]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001cd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cd6:	f7ff fa67 	bl	80011a8 <HAL_GetTick>
 8001cda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cde:	f7ff fa63 	bl	80011a8 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e1dd      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x4d6>
 8001cfc:	e01b      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
 8001cfe:	bf00      	nop
 8001d00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d04:	4b9b      	ldr	r3, [pc, #620]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a9a      	ldr	r2, [pc, #616]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d10:	f7ff fa4a 	bl	80011a8 <HAL_GetTick>
 8001d14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d18:	f7ff fa46 	bl	80011a8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1c0      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d2a:	4b92      	ldr	r3, [pc, #584]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8081 	beq.w	8001e46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d44:	4b8c      	ldr	r3, [pc, #560]	@ (8001f78 <HAL_RCC_OscConfig+0x770>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a8b      	ldr	r2, [pc, #556]	@ (8001f78 <HAL_RCC_OscConfig+0x770>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d50:	f7ff fa2a 	bl	80011a8 <HAL_GetTick>
 8001d54:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d58:	f7ff fa26 	bl	80011a8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	@ 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1a0      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d6a:	4b83      	ldr	r3, [pc, #524]	@ (8001f78 <HAL_RCC_OscConfig+0x770>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d106      	bne.n	8001d8c <HAL_RCC_OscConfig+0x584>
 8001d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d82:	4a7c      	ldr	r2, [pc, #496]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d8a:	e02d      	b.n	8001de8 <HAL_RCC_OscConfig+0x5e0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10c      	bne.n	8001dae <HAL_RCC_OscConfig+0x5a6>
 8001d94:	4b77      	ldr	r3, [pc, #476]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d98:	4a76      	ldr	r2, [pc, #472]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da0:	4b74      	ldr	r3, [pc, #464]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da4:	4a73      	ldr	r2, [pc, #460]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dac:	e01c      	b.n	8001de8 <HAL_RCC_OscConfig+0x5e0>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x5c8>
 8001db6:	4b6f      	ldr	r3, [pc, #444]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dba:	4a6e      	ldr	r2, [pc, #440]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc6:	4a6b      	ldr	r2, [pc, #428]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0x5e0>
 8001dd0:	4b68      	ldr	r3, [pc, #416]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd4:	4a67      	ldr	r2, [pc, #412]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ddc:	4b65      	ldr	r3, [pc, #404]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de0:	4a64      	ldr	r2, [pc, #400]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001de2:	f023 0304 	bic.w	r3, r3, #4
 8001de6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d015      	beq.n	8001e1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7ff f9da 	bl	80011a8 <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7ff f9d6 	bl	80011a8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e14e      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e0e:	4b59      	ldr	r3, [pc, #356]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0ee      	beq.n	8001df8 <HAL_RCC_OscConfig+0x5f0>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f9c4 	bl	80011a8 <HAL_GetTick>
 8001e20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f7ff f9c0 	bl	80011a8 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e138      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ee      	bne.n	8001e24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 812d 	beq.w	80020aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e50:	4b48      	ldr	r3, [pc, #288]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e58:	2b18      	cmp	r3, #24
 8001e5a:	f000 80bd 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	f040 809e 	bne.w	8001fa4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	4b42      	ldr	r3, [pc, #264]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a41      	ldr	r2, [pc, #260]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff f998 	bl	80011a8 <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f994 	bl	80011a8 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e10e      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e8e:	4b39      	ldr	r3, [pc, #228]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9a:	4b36      	ldr	r3, [pc, #216]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e9e:	4b37      	ldr	r3, [pc, #220]	@ (8001f7c <HAL_RCC_OscConfig+0x774>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	430a      	orrs	r2, r1
 8001eae:	4931      	ldr	r1, [pc, #196]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	025b      	lsls	r3, r3, #9
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	041b      	lsls	r3, r3, #16
 8001ed2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001edc:	3b01      	subs	r3, #1
 8001ede:	061b      	lsls	r3, r3, #24
 8001ee0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001ee4:	4923      	ldr	r1, [pc, #140]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001eea:	4b22      	ldr	r3, [pc, #136]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eee:	4a21      	ldr	r2, [pc, #132]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001efa:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <HAL_RCC_OscConfig+0x778>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f02:	00d2      	lsls	r2, r2, #3
 8001f04:	491b      	ldr	r1, [pc, #108]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0e:	f023 020c 	bic.w	r2, r3, #12
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	4917      	ldr	r1, [pc, #92]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f20:	f023 0202 	bic.w	r2, r3, #2
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f28:	4912      	ldr	r1, [pc, #72]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	4a10      	ldr	r2, [pc, #64]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f46:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f56:	4a07      	ldr	r2, [pc, #28]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5e:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6a:	f7ff f91d 	bl	80011a8 <HAL_GetTick>
 8001f6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f70:	e011      	b.n	8001f96 <HAL_RCC_OscConfig+0x78e>
 8001f72:	bf00      	nop
 8001f74:	58024400 	.word	0x58024400
 8001f78:	58024800 	.word	0x58024800
 8001f7c:	fffffc0c 	.word	0xfffffc0c
 8001f80:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff f910 	bl	80011a8 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e08a      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f96:	4b47      	ldr	r3, [pc, #284]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x77c>
 8001fa2:	e082      	b.n	80020aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b43      	ldr	r3, [pc, #268]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a42      	ldr	r2, [pc, #264]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8001faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f8fa 	bl	80011a8 <HAL_GetTick>
 8001fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f8f6 	bl	80011a8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e070      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fca:	4b3a      	ldr	r3, [pc, #232]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x7b0>
 8001fd6:	e068      	b.n	80020aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001fd8:	4b36      	ldr	r3, [pc, #216]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8001fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fdc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fde:	4b35      	ldr	r3, [pc, #212]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d031      	beq.n	8002050 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f003 0203 	and.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d12a      	bne.n	8002050 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d122      	bne.n	8002050 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002014:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d11a      	bne.n	8002050 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	0a5b      	lsrs	r3, r3, #9
 800201e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002026:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002028:	429a      	cmp	r2, r3
 800202a:	d111      	bne.n	8002050 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	0c1b      	lsrs	r3, r3, #16
 8002030:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002038:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d108      	bne.n	8002050 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	0e1b      	lsrs	r3, r3, #24
 8002042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e02b      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002054:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8002056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002058:	08db      	lsrs	r3, r3, #3
 800205a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800205e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	429a      	cmp	r2, r3
 8002068:	d01f      	beq.n	80020aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800206a:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 800206c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206e:	4a11      	ldr	r2, [pc, #68]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002076:	f7ff f897 	bl	80011a8 <HAL_GetTick>
 800207a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800207c:	bf00      	nop
 800207e:	f7ff f893 	bl	80011a8 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	4293      	cmp	r3, r2
 8002088:	d0f9      	beq.n	800207e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800208a:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 800208c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_RCC_OscConfig+0x8b0>)
 8002090:	4013      	ands	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002096:	00d2      	lsls	r2, r2, #3
 8002098:	4906      	ldr	r1, [pc, #24]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 800209a:	4313      	orrs	r3, r2
 800209c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800209e:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3730      	adds	r7, #48	@ 0x30
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	58024400 	.word	0x58024400
 80020b8:	ffff0007 	.word	0xffff0007

080020bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e19c      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b8a      	ldr	r3, [pc, #552]	@ (80022fc <HAL_RCC_ClockConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d910      	bls.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b87      	ldr	r3, [pc, #540]	@ (80022fc <HAL_RCC_ClockConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 020f 	bic.w	r2, r3, #15
 80020e6:	4985      	ldr	r1, [pc, #532]	@ (80022fc <HAL_RCC_ClockConfig+0x240>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b83      	ldr	r3, [pc, #524]	@ (80022fc <HAL_RCC_ClockConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e184      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d010      	beq.n	800212e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	4b7b      	ldr	r3, [pc, #492]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002118:	429a      	cmp	r2, r3
 800211a:	d908      	bls.n	800212e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800211c:	4b78      	ldr	r3, [pc, #480]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	4975      	ldr	r1, [pc, #468]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 800212a:	4313      	orrs	r3, r2
 800212c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d010      	beq.n	800215c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	4b70      	ldr	r3, [pc, #448]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002146:	429a      	cmp	r2, r3
 8002148:	d908      	bls.n	800215c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800214a:	4b6d      	ldr	r3, [pc, #436]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	496a      	ldr	r1, [pc, #424]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 8002158:	4313      	orrs	r3, r2
 800215a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d010      	beq.n	800218a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	4b64      	ldr	r3, [pc, #400]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002174:	429a      	cmp	r2, r3
 8002176:	d908      	bls.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002178:	4b61      	ldr	r3, [pc, #388]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	495e      	ldr	r1, [pc, #376]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 8002186:	4313      	orrs	r3, r2
 8002188:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d010      	beq.n	80021b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	4b59      	ldr	r3, [pc, #356]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d908      	bls.n	80021b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021a6:	4b56      	ldr	r3, [pc, #344]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4953      	ldr	r1, [pc, #332]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d010      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d908      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f023 020f 	bic.w	r2, r3, #15
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4947      	ldr	r1, [pc, #284]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d055      	beq.n	800229e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80021f2:	4b43      	ldr	r3, [pc, #268]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	4940      	ldr	r1, [pc, #256]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 8002200:	4313      	orrs	r3, r2
 8002202:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d107      	bne.n	800221c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800220c:	4b3c      	ldr	r3, [pc, #240]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d121      	bne.n	800225c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0f6      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d107      	bne.n	8002234 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002224:	4b36      	ldr	r3, [pc, #216]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d115      	bne.n	800225c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0ea      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d107      	bne.n	800224c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800223c:	4b30      	ldr	r3, [pc, #192]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0de      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800224c:	4b2c      	ldr	r3, [pc, #176]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0d6      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800225c:	4b28      	ldr	r3, [pc, #160]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f023 0207 	bic.w	r2, r3, #7
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4925      	ldr	r1, [pc, #148]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 800226a:	4313      	orrs	r3, r2
 800226c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226e:	f7fe ff9b 	bl	80011a8 <HAL_GetTick>
 8002272:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002274:	e00a      	b.n	800228c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002276:	f7fe ff97 	bl	80011a8 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0be      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228c:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	429a      	cmp	r2, r3
 800229c:	d1eb      	bne.n	8002276 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d010      	beq.n	80022cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d208      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ba:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f023 020f 	bic.w	r2, r3, #15
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	490e      	ldr	r1, [pc, #56]	@ (8002300 <HAL_RCC_ClockConfig+0x244>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_RCC_ClockConfig+0x240>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d214      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <HAL_RCC_ClockConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 020f 	bic.w	r2, r3, #15
 80022e2:	4906      	ldr	r1, [pc, #24]	@ (80022fc <HAL_RCC_ClockConfig+0x240>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <HAL_RCC_ClockConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e086      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
 80022fc:	52002000 	.word	0x52002000
 8002300:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d010      	beq.n	8002332 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	4b3f      	ldr	r3, [pc, #252]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800231c:	429a      	cmp	r2, r3
 800231e:	d208      	bcs.n	8002332 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002320:	4b3c      	ldr	r3, [pc, #240]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4939      	ldr	r1, [pc, #228]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 800232e:	4313      	orrs	r3, r2
 8002330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d010      	beq.n	8002360 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800234a:	429a      	cmp	r2, r3
 800234c:	d208      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800234e:	4b31      	ldr	r3, [pc, #196]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	492e      	ldr	r1, [pc, #184]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 800235c:	4313      	orrs	r3, r2
 800235e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	d010      	beq.n	800238e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002378:	429a      	cmp	r2, r3
 800237a:	d208      	bcs.n	800238e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800237c:	4b25      	ldr	r3, [pc, #148]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4922      	ldr	r1, [pc, #136]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 800238a:	4313      	orrs	r3, r2
 800238c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d010      	beq.n	80023bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d208      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4917      	ldr	r1, [pc, #92]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023bc:	f000 f834 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	4912      	ldr	r1, [pc, #72]	@ (8002418 <HAL_RCC_ClockConfig+0x35c>)
 80023ce:	5ccb      	ldrb	r3, [r1, r3]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023da:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <HAL_RCC_ClockConfig+0x358>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <HAL_RCC_ClockConfig+0x35c>)
 80023e4:	5cd3      	ldrb	r3, [r2, r3]
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
 80023f0:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <HAL_RCC_ClockConfig+0x360>)
 80023f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <HAL_RCC_ClockConfig+0x364>)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <HAL_RCC_ClockConfig+0x368>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fd1a 	bl	8000e38 <HAL_InitTick>
 8002404:	4603      	mov	r3, r0
 8002406:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	58024400 	.word	0x58024400
 8002418:	08008b18 	.word	0x08008b18
 800241c:	24000004 	.word	0x24000004
 8002420:	24000000 	.word	0x24000000
 8002424:	24000008 	.word	0x24000008

08002428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	@ 0x24
 800242c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242e:	4bb3      	ldr	r3, [pc, #716]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002436:	2b18      	cmp	r3, #24
 8002438:	f200 8155 	bhi.w	80026e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800243c:	a201      	add	r2, pc, #4	@ (adr r2, 8002444 <HAL_RCC_GetSysClockFreq+0x1c>)
 800243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002442:	bf00      	nop
 8002444:	080024a9 	.word	0x080024a9
 8002448:	080026e7 	.word	0x080026e7
 800244c:	080026e7 	.word	0x080026e7
 8002450:	080026e7 	.word	0x080026e7
 8002454:	080026e7 	.word	0x080026e7
 8002458:	080026e7 	.word	0x080026e7
 800245c:	080026e7 	.word	0x080026e7
 8002460:	080026e7 	.word	0x080026e7
 8002464:	080024cf 	.word	0x080024cf
 8002468:	080026e7 	.word	0x080026e7
 800246c:	080026e7 	.word	0x080026e7
 8002470:	080026e7 	.word	0x080026e7
 8002474:	080026e7 	.word	0x080026e7
 8002478:	080026e7 	.word	0x080026e7
 800247c:	080026e7 	.word	0x080026e7
 8002480:	080026e7 	.word	0x080026e7
 8002484:	080024d5 	.word	0x080024d5
 8002488:	080026e7 	.word	0x080026e7
 800248c:	080026e7 	.word	0x080026e7
 8002490:	080026e7 	.word	0x080026e7
 8002494:	080026e7 	.word	0x080026e7
 8002498:	080026e7 	.word	0x080026e7
 800249c:	080026e7 	.word	0x080026e7
 80024a0:	080026e7 	.word	0x080026e7
 80024a4:	080024db 	.word	0x080024db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024a8:	4b94      	ldr	r3, [pc, #592]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d009      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024b4:	4b91      	ldr	r3, [pc, #580]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	08db      	lsrs	r3, r3, #3
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	4a90      	ldr	r2, [pc, #576]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
 80024c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80024c6:	e111      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80024c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024ca:	61bb      	str	r3, [r7, #24]
      break;
 80024cc:	e10e      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80024ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024d0:	61bb      	str	r3, [r7, #24]
      break;
 80024d2:	e10b      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80024d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80024d6:	61bb      	str	r3, [r7, #24]
      break;
 80024d8:	e108      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024da:	4b88      	ldr	r3, [pc, #544]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80024e4:	4b85      	ldr	r3, [pc, #532]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80024f0:	4b82      	ldr	r3, [pc, #520]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80024fa:	4b80      	ldr	r3, [pc, #512]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024fe:	08db      	lsrs	r3, r3, #3
 8002500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002512:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80e1 	beq.w	80026e0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b02      	cmp	r3, #2
 8002522:	f000 8083 	beq.w	800262c <HAL_RCC_GetSysClockFreq+0x204>
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b02      	cmp	r3, #2
 800252a:	f200 80a1 	bhi.w	8002670 <HAL_RCC_GetSysClockFreq+0x248>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x114>
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d056      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800253a:	e099      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800253c:	4b6f      	ldr	r3, [pc, #444]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b00      	cmp	r3, #0
 8002546:	d02d      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002548:	4b6c      	ldr	r3, [pc, #432]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	08db      	lsrs	r3, r3, #3
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	4a6b      	ldr	r2, [pc, #428]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
 8002558:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800256e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002572:	4b62      	ldr	r3, [pc, #392]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002582:	ed97 6a02 	vldr	s12, [r7, #8]
 8002586:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800270c <HAL_RCC_GetSysClockFreq+0x2e4>
 800258a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800258e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80025a2:	e087      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002710 <HAL_RCC_GetSysClockFreq+0x2e8>
 80025b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b6:	4b51      	ldr	r3, [pc, #324]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800270c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025e6:	e065      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002714 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025fa:	4b40      	ldr	r3, [pc, #256]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002602:	ee07 3a90 	vmov	s15, r3
 8002606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800260a:	ed97 6a02 	vldr	s12, [r7, #8]
 800260e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800270c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800261a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800261e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800262a:	e043      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	ee07 3a90 	vmov	s15, r3
 8002632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002636:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002718 <HAL_RCC_GetSysClockFreq+0x2f0>
 800263a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800263e:	4b2f      	ldr	r3, [pc, #188]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800264e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002652:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800270c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800265a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800265e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800266e:	e021      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800267a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002714 <HAL_RCC_GetSysClockFreq+0x2ec>
 800267e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002682:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002692:	ed97 6a02 	vldr	s12, [r7, #8]
 8002696:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800270c <HAL_RCC_GetSysClockFreq+0x2e4>
 800269a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800269e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80026b4:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b8:	0a5b      	lsrs	r3, r3, #9
 80026ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026be:	3301      	adds	r3, #1
 80026c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80026d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d8:	ee17 3a90 	vmov	r3, s15
 80026dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80026de:	e005      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
      break;
 80026e4:	e002      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80026e6:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026e8:	61bb      	str	r3, [r7, #24]
      break;
 80026ea:	bf00      	nop
  }

  return sysclockfreq;
 80026ec:	69bb      	ldr	r3, [r7, #24]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3724      	adds	r7, #36	@ 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	58024400 	.word	0x58024400
 8002700:	03d09000 	.word	0x03d09000
 8002704:	003d0900 	.word	0x003d0900
 8002708:	017d7840 	.word	0x017d7840
 800270c:	46000000 	.word	0x46000000
 8002710:	4c742400 	.word	0x4c742400
 8002714:	4a742400 	.word	0x4a742400
 8002718:	4bbebc20 	.word	0x4bbebc20

0800271c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002722:	f7ff fe81 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b10      	ldr	r3, [pc, #64]	@ (800276c <HAL_RCC_GetHCLKFreq+0x50>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490f      	ldr	r1, [pc, #60]	@ (8002770 <HAL_RCC_GetHCLKFreq+0x54>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	fa22 f303 	lsr.w	r3, r2, r3
 800273e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002740:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <HAL_RCC_GetHCLKFreq+0x50>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	4a09      	ldr	r2, [pc, #36]	@ (8002770 <HAL_RCC_GetHCLKFreq+0x54>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	4a07      	ldr	r2, [pc, #28]	@ (8002774 <HAL_RCC_GetHCLKFreq+0x58>)
 8002758:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800275a:	4a07      	ldr	r2, [pc, #28]	@ (8002778 <HAL_RCC_GetHCLKFreq+0x5c>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <HAL_RCC_GetHCLKFreq+0x58>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	58024400 	.word	0x58024400
 8002770:	08008b18 	.word	0x08008b18
 8002774:	24000004 	.word	0x24000004
 8002778:	24000000 	.word	0x24000000

0800277c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002780:	f7ff ffcc 	bl	800271c <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4904      	ldr	r1, [pc, #16]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	58024400 	.word	0x58024400
 80027a4:	08008b18 	.word	0x08008b18

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80027ac:	f7ff ffb6 	bl	800271c <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4904      	ldr	r1, [pc, #16]	@ (80027d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	58024400 	.word	0x58024400
 80027d0:	08008b18 	.word	0x08008b18

080027d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223f      	movs	r2, #63	@ 0x3f
 80027e2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <HAL_RCC_GetClockConfig+0x7c>)
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f003 0207 	and.w	r2, r3, #7
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80027f0:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <HAL_RCC_GetClockConfig+0x7c>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80027fc:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <HAL_RCC_GetClockConfig+0x7c>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 020f 	and.w	r2, r3, #15
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002808:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <HAL_RCC_GetClockConfig+0x7c>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002814:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <HAL_RCC_GetClockConfig+0x7c>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002820:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <HAL_RCC_GetClockConfig+0x7c>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800282c:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <HAL_RCC_GetClockConfig+0x7c>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002838:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_RCC_GetClockConfig+0x80>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 020f 	and.w	r2, r3, #15
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	601a      	str	r2, [r3, #0]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	58024400 	.word	0x58024400
 8002854:	52002000 	.word	0x52002000

08002858 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800285c:	b0ca      	sub	sp, #296	@ 0x128
 800285e:	af00      	add	r7, sp, #0
 8002860:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002864:	2300      	movs	r3, #0
 8002866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800286a:	2300      	movs	r3, #0
 800286c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800287c:	2500      	movs	r5, #0
 800287e:	ea54 0305 	orrs.w	r3, r4, r5
 8002882:	d049      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800288a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800288e:	d02f      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002890:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002894:	d828      	bhi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002896:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800289a:	d01a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800289c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028a0:	d822      	bhi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80028a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028aa:	d007      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028ac:	e01c      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ae:	4bb8      	ldr	r3, [pc, #736]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	4ab7      	ldr	r2, [pc, #732]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028ba:	e01a      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028c0:	3308      	adds	r3, #8
 80028c2:	2102      	movs	r1, #2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 fc8f 	bl	80041e8 <RCCEx_PLL2_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028d0:	e00f      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80028d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028d6:	3328      	adds	r3, #40	@ 0x28
 80028d8:	2102      	movs	r1, #2
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 fd36 	bl	800434c <RCCEx_PLL3_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028e6:	e004      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028ee:	e000      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80028f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028fa:	4ba5      	ldr	r3, [pc, #660]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002908:	4aa1      	ldr	r2, [pc, #644]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800290a:	430b      	orrs	r3, r1
 800290c:	6513      	str	r3, [r2, #80]	@ 0x50
 800290e:	e003      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002914:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002924:	f04f 0900 	mov.w	r9, #0
 8002928:	ea58 0309 	orrs.w	r3, r8, r9
 800292c:	d047      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800292e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002934:	2b04      	cmp	r3, #4
 8002936:	d82a      	bhi.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002938:	a201      	add	r2, pc, #4	@ (adr r2, 8002940 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002955 	.word	0x08002955
 8002944:	08002963 	.word	0x08002963
 8002948:	08002979 	.word	0x08002979
 800294c:	08002997 	.word	0x08002997
 8002950:	08002997 	.word	0x08002997
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002954:	4b8e      	ldr	r3, [pc, #568]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	4a8d      	ldr	r2, [pc, #564]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800295a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800295e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002960:	e01a      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002966:	3308      	adds	r3, #8
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f001 fc3c 	bl	80041e8 <RCCEx_PLL2_Config>
 8002970:	4603      	mov	r3, r0
 8002972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002976:	e00f      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800297c:	3328      	adds	r3, #40	@ 0x28
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f001 fce3 	bl	800434c <RCCEx_PLL3_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800298c:	e004      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002994:	e000      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a4:	f023 0107 	bic.w	r1, r3, #7
 80029a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ae:	4a78      	ldr	r2, [pc, #480]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80029b4:	e003      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80029be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80029ca:	f04f 0b00 	mov.w	fp, #0
 80029ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80029d2:	d04c      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80029d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029de:	d030      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80029e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e4:	d829      	bhi.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80029e8:	d02d      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80029ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80029ec:	d825      	bhi.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029ee:	2b80      	cmp	r3, #128	@ 0x80
 80029f0:	d018      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029f2:	2b80      	cmp	r3, #128	@ 0x80
 80029f4:	d821      	bhi.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80029fa:	2b40      	cmp	r3, #64	@ 0x40
 80029fc:	d007      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80029fe:	e01c      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a00:	4b63      	ldr	r3, [pc, #396]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a04:	4a62      	ldr	r2, [pc, #392]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a0c:	e01c      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a12:	3308      	adds	r3, #8
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 fbe6 	bl	80041e8 <RCCEx_PLL2_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a22:	e011      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a28:	3328      	adds	r3, #40	@ 0x28
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 fc8d 	bl	800434c <RCCEx_PLL3_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a38:	e006      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a40:	e002      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a42:	bf00      	nop
 8002a44:	e000      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a50:	4b4f      	ldr	r3, [pc, #316]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a54:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a64:	e003      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002a7a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002a84:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	d053      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a9a:	d035      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002aa0:	d82e      	bhi.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002aa2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002aa6:	d031      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002aa8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002aac:	d828      	bhi.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002aae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ab2:	d01a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002ab4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ab8:	d822      	bhi.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002abe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ac2:	d007      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002ac4:	e01c      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ac6:	4b32      	ldr	r3, [pc, #200]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	4a31      	ldr	r2, [pc, #196]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ad2:	e01c      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad8:	3308      	adds	r3, #8
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f001 fb83 	bl	80041e8 <RCCEx_PLL2_Config>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ae8:	e011      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aee:	3328      	adds	r3, #40	@ 0x28
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 fc2a 	bl	800434c <RCCEx_PLL3_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002afe:	e006      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b06:	e002      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b08:	bf00      	nop
 8002b0a:	e000      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b16:	4b1e      	ldr	r3, [pc, #120]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b26:	4a1a      	ldr	r2, [pc, #104]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b2c:	e003      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002b42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002b50:	460b      	mov	r3, r1
 8002b52:	4313      	orrs	r3, r2
 8002b54:	d056      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b62:	d038      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002b64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b68:	d831      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b6e:	d034      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002b70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b74:	d82b      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b7a:	d01d      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002b7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b80:	d825      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d006      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002b86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b8c:	e01f      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b8e:	bf00      	nop
 8002b90:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b94:	4ba2      	ldr	r3, [pc, #648]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	4aa1      	ldr	r2, [pc, #644]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ba0:	e01c      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 fb1c 	bl	80041e8 <RCCEx_PLL2_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002bb6:	e011      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bbc:	3328      	adds	r3, #40	@ 0x28
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 fbc3 	bl	800434c <RCCEx_PLL3_Config>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bcc:	e006      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bd4:	e002      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002be4:	4b8e      	ldr	r3, [pc, #568]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002bf4:	4a8a      	ldr	r2, [pc, #552]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bfa:	e003      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002c10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002c1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4313      	orrs	r3, r2
 8002c22:	d03a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2a:	2b30      	cmp	r3, #48	@ 0x30
 8002c2c:	d01f      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002c2e:	2b30      	cmp	r3, #48	@ 0x30
 8002c30:	d819      	bhi.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d00c      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d815      	bhi.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d019      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002c3e:	2b10      	cmp	r3, #16
 8002c40:	d111      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c42:	4b77      	ldr	r3, [pc, #476]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c46:	4a76      	ldr	r2, [pc, #472]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c4e:	e011      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c54:	3308      	adds	r3, #8
 8002c56:	2102      	movs	r1, #2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 fac5 	bl	80041e8 <RCCEx_PLL2_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c64:	e006      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c6c:	e002      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c6e:	bf00      	nop
 8002c70:	e000      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10a      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c7c:	4b68      	ldr	r3, [pc, #416]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c80:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8a:	4a65      	ldr	r2, [pc, #404]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c90:	e003      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002ca6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002cb0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	d051      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cc4:	d035      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002cc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cca:	d82e      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ccc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cd0:	d031      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002cd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cd6:	d828      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cdc:	d01a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ce2:	d822      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cec:	d007      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002cee:	e01c      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cfc:	e01c      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d02:	3308      	adds	r3, #8
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 fa6e 	bl	80041e8 <RCCEx_PLL2_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d12:	e011      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d18:	3328      	adds	r3, #40	@ 0x28
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f001 fb15 	bl	800434c <RCCEx_PLL3_Config>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d28:	e006      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d30:	e002      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d32:	bf00      	nop
 8002d34:	e000      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d40:	4b37      	ldr	r3, [pc, #220]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d44:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4e:	4a34      	ldr	r2, [pc, #208]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d54:	e003      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002d74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	d056      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d88:	d033      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d8e:	d82c      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d94:	d02f      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002d96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d9a:	d826      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002da0:	d02b      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002da2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002da6:	d820      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002dac:	d012      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002db2:	d81a      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d022      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dbc:	d115      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 fa0e 	bl	80041e8 <RCCEx_PLL2_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dd2:	e015      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd8:	3328      	adds	r3, #40	@ 0x28
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 fab5 	bl	800434c <RCCEx_PLL3_Config>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002de8:	e00a      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002df0:	e006      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002df2:	bf00      	nop
 8002df4:	e004      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002df6:	bf00      	nop
 8002df8:	e002      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dfa:	bf00      	nop
 8002dfc:	e000      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10d      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e08:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e16:	4a02      	ldr	r2, [pc, #8]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e1c:	e006      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e1e:	bf00      	nop
 8002e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002e38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e42:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	d055      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e58:	d033      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e5e:	d82c      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e64:	d02f      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e6a:	d826      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e70:	d02b      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002e72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e76:	d820      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e7c:	d012      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002e7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e82:	d81a      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d022      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002e88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e8c:	d115      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e92:	3308      	adds	r3, #8
 8002e94:	2101      	movs	r1, #1
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f9a6 	bl	80041e8 <RCCEx_PLL2_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ea2:	e015      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea8:	3328      	adds	r3, #40	@ 0x28
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 fa4d 	bl	800434c <RCCEx_PLL3_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ec0:	e006      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ec2:	bf00      	nop
 8002ec4:	e004      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ed8:	4ba3      	ldr	r3, [pc, #652]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002edc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ee8:	4a9f      	ldr	r2, [pc, #636]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eea:	430b      	orrs	r3, r1
 8002eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eee:	e003      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f12:	460b      	mov	r3, r1
 8002f14:	4313      	orrs	r3, r2
 8002f16:	d037      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f22:	d00e      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f28:	d816      	bhi.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d018      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f32:	d111      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f34:	4b8c      	ldr	r3, [pc, #560]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f38:	4a8b      	ldr	r2, [pc, #556]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f40:	e00f      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f46:	3308      	adds	r3, #8
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 f94c 	bl	80041e8 <RCCEx_PLL2_Config>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f56:	e004      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f5e:	e000      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f6e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f78:	4a7b      	ldr	r2, [pc, #492]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f7e:	e003      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002f94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002f9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	d039      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d81c      	bhi.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08002ff5 	.word	0x08002ff5
 8002fbc:	08002fc9 	.word	0x08002fc9
 8002fc0:	08002fd7 	.word	0x08002fd7
 8002fc4:	08002ff5 	.word	0x08002ff5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc8:	4b67      	ldr	r3, [pc, #412]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fcc:	4a66      	ldr	r2, [pc, #408]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002fd4:	e00f      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fda:	3308      	adds	r3, #8
 8002fdc:	2102      	movs	r1, #2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 f902 	bl	80041e8 <RCCEx_PLL2_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002fea:	e004      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10a      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ffe:	4b5a      	ldr	r3, [pc, #360]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003002:	f023 0103 	bic.w	r1, r3, #3
 8003006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800300c:	4a56      	ldr	r2, [pc, #344]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800300e:	430b      	orrs	r3, r1
 8003010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003012:	e003      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800301c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003028:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800302c:	2300      	movs	r3, #0
 800302e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003032:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003036:	460b      	mov	r3, r1
 8003038:	4313      	orrs	r3, r2
 800303a:	f000 809f 	beq.w	800317c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800303e:	4b4b      	ldr	r3, [pc, #300]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a4a      	ldr	r2, [pc, #296]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003048:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800304a:	f7fe f8ad 	bl	80011a8 <HAL_GetTick>
 800304e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003052:	e00b      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003054:	f7fe f8a8 	bl	80011a8 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b64      	cmp	r3, #100	@ 0x64
 8003062:	d903      	bls.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800306a:	e005      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800306c:	4b3f      	ldr	r3, [pc, #252]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ed      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800307c:	2b00      	cmp	r3, #0
 800307e:	d179      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003080:	4b39      	ldr	r3, [pc, #228]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003082:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003088:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800308c:	4053      	eors	r3, r2
 800308e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003092:	2b00      	cmp	r3, #0
 8003094:	d015      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003096:	4b34      	ldr	r3, [pc, #208]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800309e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030a2:	4b31      	ldr	r3, [pc, #196]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a6:	4a30      	ldr	r2, [pc, #192]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80030ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030c0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80030c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ce:	d118      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe f86a 	bl	80011a8 <HAL_GetTick>
 80030d4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030d8:	e00d      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fe f865 	bl	80011a8 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030e4:	1ad2      	subs	r2, r2, r3
 80030e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d903      	bls.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80030f4:	e005      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0eb      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003106:	2b00      	cmp	r3, #0
 8003108:	d129      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800310a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800311a:	d10e      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800311c:	4b12      	ldr	r3, [pc, #72]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003128:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800312c:	091a      	lsrs	r2, r3, #4
 800312e:	4b10      	ldr	r3, [pc, #64]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003130:	4013      	ands	r3, r2
 8003132:	4a0d      	ldr	r2, [pc, #52]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003134:	430b      	orrs	r3, r1
 8003136:	6113      	str	r3, [r2, #16]
 8003138:	e005      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800313a:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003140:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003144:	6113      	str	r3, [r2, #16]
 8003146:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003148:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800314a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800314e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003156:	4a04      	ldr	r2, [pc, #16]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003158:	430b      	orrs	r3, r1
 800315a:	6713      	str	r3, [r2, #112]	@ 0x70
 800315c:	e00e      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800315e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003166:	e009      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003168:	58024400 	.word	0x58024400
 800316c:	58024800 	.word	0x58024800
 8003170:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003178:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800317c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f002 0301 	and.w	r3, r2, #1
 8003188:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003192:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003196:	460b      	mov	r3, r1
 8003198:	4313      	orrs	r3, r2
 800319a:	f000 8089 	beq.w	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031a4:	2b28      	cmp	r3, #40	@ 0x28
 80031a6:	d86b      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80031a8:	a201      	add	r2, pc, #4	@ (adr r2, 80031b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ae:	bf00      	nop
 80031b0:	08003289 	.word	0x08003289
 80031b4:	08003281 	.word	0x08003281
 80031b8:	08003281 	.word	0x08003281
 80031bc:	08003281 	.word	0x08003281
 80031c0:	08003281 	.word	0x08003281
 80031c4:	08003281 	.word	0x08003281
 80031c8:	08003281 	.word	0x08003281
 80031cc:	08003281 	.word	0x08003281
 80031d0:	08003255 	.word	0x08003255
 80031d4:	08003281 	.word	0x08003281
 80031d8:	08003281 	.word	0x08003281
 80031dc:	08003281 	.word	0x08003281
 80031e0:	08003281 	.word	0x08003281
 80031e4:	08003281 	.word	0x08003281
 80031e8:	08003281 	.word	0x08003281
 80031ec:	08003281 	.word	0x08003281
 80031f0:	0800326b 	.word	0x0800326b
 80031f4:	08003281 	.word	0x08003281
 80031f8:	08003281 	.word	0x08003281
 80031fc:	08003281 	.word	0x08003281
 8003200:	08003281 	.word	0x08003281
 8003204:	08003281 	.word	0x08003281
 8003208:	08003281 	.word	0x08003281
 800320c:	08003281 	.word	0x08003281
 8003210:	08003289 	.word	0x08003289
 8003214:	08003281 	.word	0x08003281
 8003218:	08003281 	.word	0x08003281
 800321c:	08003281 	.word	0x08003281
 8003220:	08003281 	.word	0x08003281
 8003224:	08003281 	.word	0x08003281
 8003228:	08003281 	.word	0x08003281
 800322c:	08003281 	.word	0x08003281
 8003230:	08003289 	.word	0x08003289
 8003234:	08003281 	.word	0x08003281
 8003238:	08003281 	.word	0x08003281
 800323c:	08003281 	.word	0x08003281
 8003240:	08003281 	.word	0x08003281
 8003244:	08003281 	.word	0x08003281
 8003248:	08003281 	.word	0x08003281
 800324c:	08003281 	.word	0x08003281
 8003250:	08003289 	.word	0x08003289
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003258:	3308      	adds	r3, #8
 800325a:	2101      	movs	r1, #1
 800325c:	4618      	mov	r0, r3
 800325e:	f000 ffc3 	bl	80041e8 <RCCEx_PLL2_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003268:	e00f      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326e:	3328      	adds	r3, #40	@ 0x28
 8003270:	2101      	movs	r1, #1
 8003272:	4618      	mov	r0, r3
 8003274:	f001 f86a 	bl	800434c <RCCEx_PLL3_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800327e:	e004      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003286:	e000      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800328a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10a      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003292:	4bbf      	ldr	r3, [pc, #764]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003296:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800329a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032a0:	4abb      	ldr	r2, [pc, #748]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032a2:	430b      	orrs	r3, r1
 80032a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80032a6:	e003      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80032b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f002 0302 	and.w	r3, r2, #2
 80032bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80032c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80032ca:	460b      	mov	r3, r1
 80032cc:	4313      	orrs	r3, r2
 80032ce:	d041      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80032d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d824      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80032da:	a201      	add	r2, pc, #4	@ (adr r2, 80032e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80032dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e0:	0800332d 	.word	0x0800332d
 80032e4:	080032f9 	.word	0x080032f9
 80032e8:	0800330f 	.word	0x0800330f
 80032ec:	0800332d 	.word	0x0800332d
 80032f0:	0800332d 	.word	0x0800332d
 80032f4:	0800332d 	.word	0x0800332d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fc:	3308      	adds	r3, #8
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f000 ff71 	bl	80041e8 <RCCEx_PLL2_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800330c:	e00f      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800330e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003312:	3328      	adds	r3, #40	@ 0x28
 8003314:	2101      	movs	r1, #1
 8003316:	4618      	mov	r0, r3
 8003318:	f001 f818 	bl	800434c <RCCEx_PLL3_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003322:	e004      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800332a:	e000      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800332c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800332e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003336:	4b96      	ldr	r3, [pc, #600]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333a:	f023 0107 	bic.w	r1, r3, #7
 800333e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003344:	4a92      	ldr	r2, [pc, #584]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003346:	430b      	orrs	r3, r1
 8003348:	6553      	str	r3, [r2, #84]	@ 0x54
 800334a:	e003      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003350:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335c:	f002 0304 	and.w	r3, r2, #4
 8003360:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800336a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800336e:	460b      	mov	r3, r1
 8003370:	4313      	orrs	r3, r2
 8003372:	d044      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003378:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800337c:	2b05      	cmp	r3, #5
 800337e:	d825      	bhi.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003380:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	080033d5 	.word	0x080033d5
 800338c:	080033a1 	.word	0x080033a1
 8003390:	080033b7 	.word	0x080033b7
 8003394:	080033d5 	.word	0x080033d5
 8003398:	080033d5 	.word	0x080033d5
 800339c:	080033d5 	.word	0x080033d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a4:	3308      	adds	r3, #8
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 ff1d 	bl	80041e8 <RCCEx_PLL2_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80033b4:	e00f      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ba:	3328      	adds	r3, #40	@ 0x28
 80033bc:	2101      	movs	r1, #1
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 ffc4 	bl	800434c <RCCEx_PLL3_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80033ca:	e004      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033d2:	e000      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80033d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033de:	4b6c      	ldr	r3, [pc, #432]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e2:	f023 0107 	bic.w	r1, r3, #7
 80033e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ee:	4a68      	ldr	r2, [pc, #416]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f002 0320 	and.w	r3, r2, #32
 800340a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003418:	460b      	mov	r3, r1
 800341a:	4313      	orrs	r3, r2
 800341c:	d055      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003426:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800342a:	d033      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800342c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003430:	d82c      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003436:	d02f      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343c:	d826      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800343e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003442:	d02b      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003444:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003448:	d820      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800344a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800344e:	d012      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003454:	d81a      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d022      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800345a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800345e:	d115      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003464:	3308      	adds	r3, #8
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f000 febd 	bl	80041e8 <RCCEx_PLL2_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003474:	e015      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	3328      	adds	r3, #40	@ 0x28
 800347c:	2102      	movs	r1, #2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 ff64 	bl	800434c <RCCEx_PLL3_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800348a:	e00a      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003492:	e006      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003494:	bf00      	nop
 8003496:	e004      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003498:	bf00      	nop
 800349a:	e002      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800349c:	bf00      	nop
 800349e:	e000      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80034a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034aa:	4b39      	ldr	r3, [pc, #228]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ba:	4a35      	ldr	r2, [pc, #212]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034bc:	430b      	orrs	r3, r1
 80034be:	6553      	str	r3, [r2, #84]	@ 0x54
 80034c0:	e003      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80034d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80034e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4313      	orrs	r3, r2
 80034e8:	d058      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034f6:	d033      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80034f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034fc:	d82c      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003502:	d02f      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003508:	d826      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800350a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800350e:	d02b      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003510:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003514:	d820      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800351a:	d012      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800351c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003520:	d81a      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d022      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352a:	d115      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800352c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003530:	3308      	adds	r3, #8
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fe57 	bl	80041e8 <RCCEx_PLL2_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003540:	e015      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003546:	3328      	adds	r3, #40	@ 0x28
 8003548:	2102      	movs	r1, #2
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fefe 	bl	800434c <RCCEx_PLL3_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003556:	e00a      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800355e:	e006      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003560:	bf00      	nop
 8003562:	e004      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003564:	bf00      	nop
 8003566:	e002      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800356c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10e      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003576:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003582:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003586:	4a02      	ldr	r2, [pc, #8]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003588:	430b      	orrs	r3, r1
 800358a:	6593      	str	r3, [r2, #88]	@ 0x58
 800358c:	e006      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800358e:	bf00      	nop
 8003590:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003598:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800359c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80035a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035ac:	2300      	movs	r3, #0
 80035ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80035b6:	460b      	mov	r3, r1
 80035b8:	4313      	orrs	r3, r2
 80035ba:	d055      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80035bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80035c8:	d033      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80035ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80035ce:	d82c      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d4:	d02f      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80035d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035da:	d826      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80035e0:	d02b      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80035e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80035e6:	d820      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035ec:	d012      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80035ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035f2:	d81a      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d022      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80035f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035fc:	d115      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003602:	3308      	adds	r3, #8
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fdee 	bl	80041e8 <RCCEx_PLL2_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003612:	e015      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	3328      	adds	r3, #40	@ 0x28
 800361a:	2102      	movs	r1, #2
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fe95 	bl	800434c <RCCEx_PLL3_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003628:	e00a      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003630:	e006      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003632:	bf00      	nop
 8003634:	e004      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003636:	bf00      	nop
 8003638:	e002      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800363e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003648:	4ba1      	ldr	r3, [pc, #644]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003654:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003658:	4a9d      	ldr	r2, [pc, #628]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800365a:	430b      	orrs	r3, r1
 800365c:	6593      	str	r3, [r2, #88]	@ 0x58
 800365e:	e003      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f002 0308 	and.w	r3, r2, #8
 8003674:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003678:	2300      	movs	r3, #0
 800367a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800367e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003682:	460b      	mov	r3, r1
 8003684:	4313      	orrs	r3, r2
 8003686:	d01e      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003694:	d10c      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	3328      	adds	r3, #40	@ 0x28
 800369c:	2102      	movs	r1, #2
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fe54 	bl	800434c <RCCEx_PLL3_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80036b0:	4b87      	ldr	r3, [pc, #540]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c0:	4a83      	ldr	r2, [pc, #524]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036c2:	430b      	orrs	r3, r1
 80036c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ce:	f002 0310 	and.w	r3, r2, #16
 80036d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80036dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80036e0:	460b      	mov	r3, r1
 80036e2:	4313      	orrs	r3, r2
 80036e4:	d01e      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036f2:	d10c      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f8:	3328      	adds	r3, #40	@ 0x28
 80036fa:	2102      	movs	r1, #2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fe25 	bl	800434c <RCCEx_PLL3_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800370e:	4b70      	ldr	r3, [pc, #448]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800371e:	4a6c      	ldr	r2, [pc, #432]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003720:	430b      	orrs	r3, r1
 8003722:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003730:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003734:	2300      	movs	r3, #0
 8003736:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800373a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800373e:	460b      	mov	r3, r1
 8003740:	4313      	orrs	r3, r2
 8003742:	d03e      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003748:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800374c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003750:	d022      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003756:	d81b      	bhi.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003760:	d00b      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003762:	e015      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	3308      	adds	r3, #8
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fd3b 	bl	80041e8 <RCCEx_PLL2_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003778:	e00f      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377e:	3328      	adds	r3, #40	@ 0x28
 8003780:	2102      	movs	r1, #2
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fde2 	bl	800434c <RCCEx_PLL3_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800378e:	e004      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003796:	e000      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10b      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037a2:	4b4b      	ldr	r3, [pc, #300]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037b2:	4a47      	ldr	r2, [pc, #284]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037b4:	430b      	orrs	r3, r1
 80037b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80037b8:	e003      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80037ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037d0:	2300      	movs	r3, #0
 80037d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80037d8:	460b      	mov	r3, r1
 80037da:	4313      	orrs	r3, r2
 80037dc:	d03b      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037ea:	d01f      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80037ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037f0:	d818      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80037f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037f6:	d003      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80037f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037fc:	d007      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80037fe:	e011      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003800:	4b33      	ldr	r3, [pc, #204]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	4a32      	ldr	r2, [pc, #200]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800380c:	e00f      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	3328      	adds	r3, #40	@ 0x28
 8003814:	2101      	movs	r1, #1
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fd98 	bl	800434c <RCCEx_PLL3_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003822:	e004      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800382a:	e000      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800382c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10b      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003836:	4b26      	ldr	r3, [pc, #152]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003846:	4a22      	ldr	r2, [pc, #136]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003848:	430b      	orrs	r3, r1
 800384a:	6553      	str	r3, [r2, #84]	@ 0x54
 800384c:	e003      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003862:	673b      	str	r3, [r7, #112]	@ 0x70
 8003864:	2300      	movs	r3, #0
 8003866:	677b      	str	r3, [r7, #116]	@ 0x74
 8003868:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800386c:	460b      	mov	r3, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	d034      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003880:	d007      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003882:	e011      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003884:	4b12      	ldr	r3, [pc, #72]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	4a11      	ldr	r2, [pc, #68]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800388a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800388e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003890:	e00e      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003896:	3308      	adds	r3, #8
 8003898:	2102      	movs	r1, #2
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fca4 	bl	80041e8 <RCCEx_PLL2_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80038a6:	e003      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10d      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80038b8:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c6:	4a02      	ldr	r2, [pc, #8]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038cc:	e006      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80038ce:	bf00      	nop
 80038d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80038e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038ea:	2300      	movs	r3, #0
 80038ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80038f2:	460b      	mov	r3, r1
 80038f4:	4313      	orrs	r3, r2
 80038f6:	d00c      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fc:	3328      	adds	r3, #40	@ 0x28
 80038fe:	2102      	movs	r1, #2
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fd23 	bl	800434c <RCCEx_PLL3_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800391e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003920:	2300      	movs	r3, #0
 8003922:	667b      	str	r3, [r7, #100]	@ 0x64
 8003924:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003928:	460b      	mov	r3, r1
 800392a:	4313      	orrs	r3, r2
 800392c:	d038      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003936:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800393a:	d018      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800393c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003940:	d811      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003946:	d014      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800394c:	d80b      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d011      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003956:	d106      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003958:	4bc3      	ldr	r3, [pc, #780]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800395a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395c:	4ac2      	ldr	r2, [pc, #776]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800395e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003964:	e008      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800396c:	e004      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003980:	4bb9      	ldr	r3, [pc, #740]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003984:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003990:	4ab5      	ldr	r2, [pc, #724]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003992:	430b      	orrs	r3, r1
 8003994:	6553      	str	r3, [r2, #84]	@ 0x54
 8003996:	e003      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800399c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80039ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039ae:	2300      	movs	r3, #0
 80039b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80039b6:	460b      	mov	r3, r1
 80039b8:	4313      	orrs	r3, r2
 80039ba:	d009      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039bc:	4baa      	ldr	r3, [pc, #680]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ca:	4aa7      	ldr	r2, [pc, #668]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80039d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80039dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80039de:	2300      	movs	r3, #0
 80039e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80039e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80039e6:	460b      	mov	r3, r1
 80039e8:	4313      	orrs	r3, r2
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80039ec:	4b9e      	ldr	r3, [pc, #632]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80039fc:	4a9a      	ldr	r2, [pc, #616]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039fe:	430b      	orrs	r3, r1
 8003a00:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a10:	2300      	movs	r3, #0
 8003a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	d009      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a1e:	4b92      	ldr	r3, [pc, #584]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a22:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a2c:	4a8e      	ldr	r2, [pc, #568]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003a3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a40:	2300      	movs	r3, #0
 8003a42:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a44:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	d00e      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a4e:	4b86      	ldr	r3, [pc, #536]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	4a85      	ldr	r2, [pc, #532]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a54:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a58:	6113      	str	r3, [r2, #16]
 8003a5a:	4b83      	ldr	r3, [pc, #524]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a5c:	6919      	ldr	r1, [r3, #16]
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a66:	4a80      	ldr	r2, [pc, #512]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003a78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a82:	460b      	mov	r3, r1
 8003a84:	4313      	orrs	r3, r2
 8003a86:	d009      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a88:	4b77      	ldr	r3, [pc, #476]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a96:	4a74      	ldr	r2, [pc, #464]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aaa:	2300      	movs	r3, #0
 8003aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac8:	4a67      	ldr	r2, [pc, #412]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aca:	430b      	orrs	r3, r1
 8003acc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ae0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	d011      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aee:	3308      	adds	r3, #8
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fb78 	bl	80041e8 <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	2100      	movs	r1, #0
 8003b18:	6239      	str	r1, [r7, #32]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b20:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003b24:	460b      	mov	r3, r1
 8003b26:	4313      	orrs	r3, r2
 8003b28:	d011      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	3308      	adds	r3, #8
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fb58 	bl	80041e8 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	2100      	movs	r1, #0
 8003b58:	61b9      	str	r1, [r7, #24]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003b64:	460b      	mov	r3, r1
 8003b66:	4313      	orrs	r3, r2
 8003b68:	d011      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	3308      	adds	r3, #8
 8003b70:	2102      	movs	r1, #2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fb38 	bl	80041e8 <RCCEx_PLL2_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	2100      	movs	r1, #0
 8003b98:	6139      	str	r1, [r7, #16]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	d011      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	3328      	adds	r3, #40	@ 0x28
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fbca 	bl	800434c <RCCEx_PLL3_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003be4:	460b      	mov	r3, r1
 8003be6:	4313      	orrs	r3, r2
 8003be8:	d011      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bee:	3328      	adds	r3, #40	@ 0x28
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fbaa 	bl	800434c <RCCEx_PLL3_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	2100      	movs	r1, #0
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	607b      	str	r3, [r7, #4]
 8003c20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c24:	460b      	mov	r3, r1
 8003c26:	4313      	orrs	r3, r2
 8003c28:	d011      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2e:	3328      	adds	r3, #40	@ 0x28
 8003c30:	2102      	movs	r1, #2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fb8a 	bl	800434c <RCCEx_PLL3_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003c4e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e000      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003c62:	46bd      	mov	sp, r7
 8003c64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c68:	58024400 	.word	0x58024400

08003c6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003c70:	f7fe fd54 	bl	800271c <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4904      	ldr	r1, [pc, #16]	@ (8003c94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	58024400 	.word	0x58024400
 8003c94:	08008b18 	.word	0x08008b18

08003c98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	@ 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ca0:	4ba1      	ldr	r3, [pc, #644]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003caa:	4b9f      	ldr	r3, [pc, #636]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cae:	0b1b      	lsrs	r3, r3, #12
 8003cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cb4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003cb6:	4b9c      	ldr	r3, [pc, #624]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003cc2:	4b99      	ldr	r3, [pc, #612]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc6:	08db      	lsrs	r3, r3, #3
 8003cc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8111 	beq.w	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	f000 8083 	beq.w	8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	f200 80a1 	bhi.w	8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d056      	beq.n	8003db0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003d02:	e099      	b.n	8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d04:	4b88      	ldr	r3, [pc, #544]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d02d      	beq.n	8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d10:	4b85      	ldr	r3, [pc, #532]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	08db      	lsrs	r3, r3, #3
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	4a84      	ldr	r2, [pc, #528]	@ (8003f2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	ee07 3a90 	vmov	s15, r3
 8003d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d6a:	e087      	b.n	8003e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dae:	e065      	b.n	8003e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc2:	4b59      	ldr	r3, [pc, #356]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003df2:	e043      	b.n	8003e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e06:	4b48      	ldr	r3, [pc, #288]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e36:	e021      	b.n	8003e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4a:	4b37      	ldr	r3, [pc, #220]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e80:	0a5b      	lsrs	r3, r3, #9
 8003e82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e96:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ea2:	ee17 2a90 	vmov	r2, s15
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eae:	0c1b      	lsrs	r3, r3, #16
 8003eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eb4:	ee07 3a90 	vmov	s15, r3
 8003eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ebc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ec0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ed0:	ee17 2a90 	vmov	r2, s15
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003ed8:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003edc:	0e1b      	lsrs	r3, r3, #24
 8003ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003efe:	ee17 2a90 	vmov	r2, s15
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f06:	e008      	b.n	8003f1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	609a      	str	r2, [r3, #8]
}
 8003f1a:	bf00      	nop
 8003f1c:	3724      	adds	r7, #36	@ 0x24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	58024400 	.word	0x58024400
 8003f2c:	03d09000 	.word	0x03d09000
 8003f30:	46000000 	.word	0x46000000
 8003f34:	4c742400 	.word	0x4c742400
 8003f38:	4a742400 	.word	0x4a742400
 8003f3c:	4bbebc20 	.word	0x4bbebc20

08003f40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b089      	sub	sp, #36	@ 0x24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f48:	4ba1      	ldr	r3, [pc, #644]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003f52:	4b9f      	ldr	r3, [pc, #636]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f56:	0d1b      	lsrs	r3, r3, #20
 8003f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003f5e:	4b9c      	ldr	r3, [pc, #624]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	0a1b      	lsrs	r3, r3, #8
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003f6a:	4b99      	ldr	r3, [pc, #612]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	08db      	lsrs	r3, r3, #3
 8003f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	fb02 f303 	mul.w	r3, r2, r3
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8111 	beq.w	80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	f000 8083 	beq.w	800409c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	f200 80a1 	bhi.w	80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d056      	beq.n	8004058 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003faa:	e099      	b.n	80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fac:	4b88      	ldr	r3, [pc, #544]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d02d      	beq.n	8004014 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fb8:	4b85      	ldr	r3, [pc, #532]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	08db      	lsrs	r3, r3, #3
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	4a84      	ldr	r2, [pc, #528]	@ (80041d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	ee07 3a90 	vmov	s15, r3
 8003fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe2:	4b7b      	ldr	r3, [pc, #492]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ff6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800400a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004012:	e087      	b.n	8004124 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80041dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004026:	4b6a      	ldr	r3, [pc, #424]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004036:	ed97 6a03 	vldr	s12, [r7, #12]
 800403a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800403e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800404a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800404e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004056:	e065      	b.n	8004124 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004062:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406a:	4b59      	ldr	r3, [pc, #356]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407a:	ed97 6a03 	vldr	s12, [r7, #12]
 800407e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800408e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800409a:	e043      	b.n	8004124 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80041e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80040aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ae:	4b48      	ldr	r3, [pc, #288]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040be:	ed97 6a03 	vldr	s12, [r7, #12]
 80040c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040de:	e021      	b.n	8004124 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80041e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f2:	4b37      	ldr	r3, [pc, #220]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004102:	ed97 6a03 	vldr	s12, [r7, #12]
 8004106:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800410a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800410e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004122:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004124:	4b2a      	ldr	r3, [pc, #168]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004128:	0a5b      	lsrs	r3, r3, #9
 800412a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004136:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800413a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800413e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414a:	ee17 2a90 	vmov	r2, s15
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004152:	4b1f      	ldr	r3, [pc, #124]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	0c1b      	lsrs	r3, r3, #16
 8004158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800415c:	ee07 3a90 	vmov	s15, r3
 8004160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004164:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004168:	ee37 7a87 	vadd.f32	s14, s15, s14
 800416c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004178:	ee17 2a90 	vmov	r2, s15
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004180:	4b13      	ldr	r3, [pc, #76]	@ (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	0e1b      	lsrs	r3, r3, #24
 8004186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004192:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004196:	ee37 7a87 	vadd.f32	s14, s15, s14
 800419a:	edd7 6a07 	vldr	s13, [r7, #28]
 800419e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a6:	ee17 2a90 	vmov	r2, s15
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80041ae:	e008      	b.n	80041c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	609a      	str	r2, [r3, #8]
}
 80041c2:	bf00      	nop
 80041c4:	3724      	adds	r7, #36	@ 0x24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	58024400 	.word	0x58024400
 80041d4:	03d09000 	.word	0x03d09000
 80041d8:	46000000 	.word	0x46000000
 80041dc:	4c742400 	.word	0x4c742400
 80041e0:	4a742400 	.word	0x4a742400
 80041e4:	4bbebc20 	.word	0x4bbebc20

080041e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041f6:	4b53      	ldr	r3, [pc, #332]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d101      	bne.n	8004206 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e099      	b.n	800433a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004206:	4b4f      	ldr	r3, [pc, #316]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a4e      	ldr	r2, [pc, #312]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 800420c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004212:	f7fc ffc9 	bl	80011a8 <HAL_GetTick>
 8004216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004218:	e008      	b.n	800422c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800421a:	f7fc ffc5 	bl	80011a8 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e086      	b.n	800433a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800422c:	4b45      	ldr	r3, [pc, #276]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004238:	4b42      	ldr	r3, [pc, #264]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 800423a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	031b      	lsls	r3, r3, #12
 8004246:	493f      	ldr	r1, [pc, #252]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	628b      	str	r3, [r1, #40]	@ 0x28
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	3b01      	subs	r3, #1
 8004252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	3b01      	subs	r3, #1
 800425c:	025b      	lsls	r3, r3, #9
 800425e:	b29b      	uxth	r3, r3
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	3b01      	subs	r3, #1
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	3b01      	subs	r3, #1
 8004276:	061b      	lsls	r3, r3, #24
 8004278:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800427c:	4931      	ldr	r1, [pc, #196]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 800427e:	4313      	orrs	r3, r2
 8004280:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004282:	4b30      	ldr	r3, [pc, #192]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	492d      	ldr	r1, [pc, #180]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004290:	4313      	orrs	r3, r2
 8004292:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004294:	4b2b      	ldr	r3, [pc, #172]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	f023 0220 	bic.w	r2, r3, #32
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	4928      	ldr	r1, [pc, #160]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80042a6:	4b27      	ldr	r3, [pc, #156]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042aa:	4a26      	ldr	r2, [pc, #152]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042ac:	f023 0310 	bic.w	r3, r3, #16
 80042b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80042b2:	4b24      	ldr	r3, [pc, #144]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042b6:	4b24      	ldr	r3, [pc, #144]	@ (8004348 <RCCEx_PLL2_Config+0x160>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	69d2      	ldr	r2, [r2, #28]
 80042be:	00d2      	lsls	r2, r2, #3
 80042c0:	4920      	ldr	r1, [pc, #128]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80042c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042cc:	f043 0310 	orr.w	r3, r3, #16
 80042d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80042d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042e4:	e00f      	b.n	8004306 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d106      	bne.n	80042fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042ec:	4b15      	ldr	r3, [pc, #84]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f0:	4a14      	ldr	r2, [pc, #80]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042f8:	e005      	b.n	8004306 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042fa:	4b12      	ldr	r3, [pc, #72]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fe:	4a11      	ldr	r2, [pc, #68]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004300:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004304:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004306:	4b0f      	ldr	r3, [pc, #60]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a0e      	ldr	r2, [pc, #56]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 800430c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004312:	f7fc ff49 	bl	80011a8 <HAL_GetTick>
 8004316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004318:	e008      	b.n	800432c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800431a:	f7fc ff45 	bl	80011a8 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e006      	b.n	800433a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800432c:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <RCCEx_PLL2_Config+0x15c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004338:	7bfb      	ldrb	r3, [r7, #15]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	58024400 	.word	0x58024400
 8004348:	ffff0007 	.word	0xffff0007

0800434c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800435a:	4b53      	ldr	r3, [pc, #332]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b03      	cmp	r3, #3
 8004364:	d101      	bne.n	800436a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e099      	b.n	800449e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800436a:	4b4f      	ldr	r3, [pc, #316]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a4e      	ldr	r2, [pc, #312]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004376:	f7fc ff17 	bl	80011a8 <HAL_GetTick>
 800437a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800437c:	e008      	b.n	8004390 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800437e:	f7fc ff13 	bl	80011a8 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e086      	b.n	800449e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004390:	4b45      	ldr	r3, [pc, #276]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800439c:	4b42      	ldr	r3, [pc, #264]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	051b      	lsls	r3, r3, #20
 80043aa:	493f      	ldr	r1, [pc, #252]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	3b01      	subs	r3, #1
 80043c0:	025b      	lsls	r3, r3, #9
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	3b01      	subs	r3, #1
 80043da:	061b      	lsls	r3, r3, #24
 80043dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043e0:	4931      	ldr	r1, [pc, #196]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043e6:	4b30      	ldr	r3, [pc, #192]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	492d      	ldr	r1, [pc, #180]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043f8:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	4928      	ldr	r1, [pc, #160]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800440a:	4b27      	ldr	r3, [pc, #156]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	4a26      	ldr	r2, [pc, #152]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004414:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004416:	4b24      	ldr	r3, [pc, #144]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800441a:	4b24      	ldr	r3, [pc, #144]	@ (80044ac <RCCEx_PLL3_Config+0x160>)
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	69d2      	ldr	r2, [r2, #28]
 8004422:	00d2      	lsls	r2, r2, #3
 8004424:	4920      	ldr	r1, [pc, #128]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800442a:	4b1f      	ldr	r3, [pc, #124]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800442c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442e:	4a1e      	ldr	r2, [pc, #120]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004434:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800443c:	4b1a      	ldr	r3, [pc, #104]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800443e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004440:	4a19      	ldr	r2, [pc, #100]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004442:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004446:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004448:	e00f      	b.n	800446a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d106      	bne.n	800445e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004450:	4b15      	ldr	r3, [pc, #84]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	4a14      	ldr	r2, [pc, #80]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004456:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800445a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800445c:	e005      	b.n	800446a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800445e:	4b12      	ldr	r3, [pc, #72]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004462:	4a11      	ldr	r2, [pc, #68]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004464:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004468:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800446a:	4b0f      	ldr	r3, [pc, #60]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a0e      	ldr	r2, [pc, #56]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004476:	f7fc fe97 	bl	80011a8 <HAL_GetTick>
 800447a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800447c:	e008      	b.n	8004490 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800447e:	f7fc fe93 	bl	80011a8 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e006      	b.n	800449e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004490:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	58024400 	.word	0x58024400
 80044ac:	ffff0007 	.word	0xffff0007

080044b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e10f      	b.n	80046e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a87      	ldr	r2, [pc, #540]	@ (80046ec <HAL_SPI_Init+0x23c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00f      	beq.n	80044f2 <HAL_SPI_Init+0x42>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a86      	ldr	r2, [pc, #536]	@ (80046f0 <HAL_SPI_Init+0x240>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00a      	beq.n	80044f2 <HAL_SPI_Init+0x42>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a84      	ldr	r2, [pc, #528]	@ (80046f4 <HAL_SPI_Init+0x244>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d005      	beq.n	80044f2 <HAL_SPI_Init+0x42>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	d901      	bls.n	80044f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e0f7      	b.n	80046e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f900 	bl	80046f8 <SPI_GetPacketSize>
 80044f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a7b      	ldr	r2, [pc, #492]	@ (80046ec <HAL_SPI_Init+0x23c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00c      	beq.n	800451e <HAL_SPI_Init+0x6e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a79      	ldr	r2, [pc, #484]	@ (80046f0 <HAL_SPI_Init+0x240>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <HAL_SPI_Init+0x6e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a78      	ldr	r2, [pc, #480]	@ (80046f4 <HAL_SPI_Init+0x244>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d002      	beq.n	800451e <HAL_SPI_Init+0x6e>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b08      	cmp	r3, #8
 800451c:	d811      	bhi.n	8004542 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004522:	4a72      	ldr	r2, [pc, #456]	@ (80046ec <HAL_SPI_Init+0x23c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d009      	beq.n	800453c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a70      	ldr	r2, [pc, #448]	@ (80046f0 <HAL_SPI_Init+0x240>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <HAL_SPI_Init+0x8c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6f      	ldr	r2, [pc, #444]	@ (80046f4 <HAL_SPI_Init+0x244>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d104      	bne.n	8004546 <HAL_SPI_Init+0x96>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b10      	cmp	r3, #16
 8004540:	d901      	bls.n	8004546 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e0cd      	b.n	80046e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc fbc0 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004582:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800458c:	d119      	bne.n	80045c2 <HAL_SPI_Init+0x112>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004596:	d103      	bne.n	80045a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10c      	bne.n	80045c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80045ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045b0:	d107      	bne.n	80045c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00f      	beq.n	80045ee <HAL_SPI_Init+0x13e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b06      	cmp	r3, #6
 80045d4:	d90b      	bls.n	80045ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	e007      	b.n	80045fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69da      	ldr	r2, [r3, #28]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004606:	431a      	orrs	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004610:	ea42 0103 	orr.w	r1, r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800465e:	ea42 0103 	orr.w	r1, r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d113      	bne.n	800469e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004688:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800469c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40013000 	.word	0x40013000
 80046f0:	40003800 	.word	0x40003800
 80046f4:	40003c00 	.word	0x40003c00

080046f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	3301      	adds	r3, #1
 8004708:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	3301      	adds	r3, #1
 8004710:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	3307      	adds	r3, #7
 8004716:	08db      	lsrs	r3, r3, #3
 8004718:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	fb02 f303 	mul.w	r3, r2, r3
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e049      	b.n	80047d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f841 	bl	80047dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3304      	adds	r3, #4
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f000 f9e7 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e054      	b.n	80048b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a26      	ldr	r2, [pc, #152]	@ (80048c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d022      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004832:	d01d      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a22      	ldr	r2, [pc, #136]	@ (80048c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d018      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a21      	ldr	r2, [pc, #132]	@ (80048c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1f      	ldr	r2, [pc, #124]	@ (80048cc <HAL_TIM_Base_Start_IT+0xdc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1e      	ldr	r2, [pc, #120]	@ (80048d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1c      	ldr	r2, [pc, #112]	@ (80048d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1b      	ldr	r2, [pc, #108]	@ (80048d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d115      	bne.n	800489c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <HAL_TIM_Base_Start_IT+0xec>)
 8004878:	4013      	ands	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b06      	cmp	r3, #6
 8004880:	d015      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0xbe>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004888:	d011      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	e008      	b.n	80048ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e000      	b.n	80048b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40010400 	.word	0x40010400
 80048d4:	40001800 	.word	0x40001800
 80048d8:	40014000 	.word	0x40014000
 80048dc:	00010007 	.word	0x00010007

080048e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d020      	beq.n	8004944 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01b      	beq.n	8004944 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0202 	mvn.w	r2, #2
 8004914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f8e9 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f8db 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f8ec 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d020      	beq.n	8004990 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01b      	beq.n	8004990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0204 	mvn.w	r2, #4
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f8c3 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f8b5 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f8c6 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d020      	beq.n	80049dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01b      	beq.n	80049dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0208 	mvn.w	r2, #8
 80049ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2204      	movs	r2, #4
 80049b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f89d 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f88f 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f8a0 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d020      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0210 	mvn.w	r2, #16
 80049f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2208      	movs	r2, #8
 80049fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f877 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f869 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f87a 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00c      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0201 	mvn.w	r2, #1
 8004a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fc f8dc 	bl	8000c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d104      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00c      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f90d 	bl	8004c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00c      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f905 	bl	8004ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f834 	bl	8004b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f06f 0220 	mvn.w	r2, #32
 8004ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8cd 	bl	8004c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a43      	ldr	r2, [pc, #268]	@ (8004c60 <TIM_Base_SetConfig+0x120>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5e:	d00f      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a40      	ldr	r2, [pc, #256]	@ (8004c64 <TIM_Base_SetConfig+0x124>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c68 <TIM_Base_SetConfig+0x128>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3e      	ldr	r2, [pc, #248]	@ (8004c6c <TIM_Base_SetConfig+0x12c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3d      	ldr	r2, [pc, #244]	@ (8004c70 <TIM_Base_SetConfig+0x130>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d108      	bne.n	8004b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a32      	ldr	r2, [pc, #200]	@ (8004c60 <TIM_Base_SetConfig+0x120>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01f      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba0:	d01b      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8004c64 <TIM_Base_SetConfig+0x124>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d017      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2e      	ldr	r2, [pc, #184]	@ (8004c68 <TIM_Base_SetConfig+0x128>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8004c6c <TIM_Base_SetConfig+0x12c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00f      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2c      	ldr	r2, [pc, #176]	@ (8004c70 <TIM_Base_SetConfig+0x130>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00b      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8004c74 <TIM_Base_SetConfig+0x134>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d007      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004c78 <TIM_Base_SetConfig+0x138>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d003      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a29      	ldr	r2, [pc, #164]	@ (8004c7c <TIM_Base_SetConfig+0x13c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d108      	bne.n	8004bec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a14      	ldr	r2, [pc, #80]	@ (8004c60 <TIM_Base_SetConfig+0x120>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00f      	beq.n	8004c32 <TIM_Base_SetConfig+0xf2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a16      	ldr	r2, [pc, #88]	@ (8004c70 <TIM_Base_SetConfig+0x130>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <TIM_Base_SetConfig+0xf2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a15      	ldr	r2, [pc, #84]	@ (8004c74 <TIM_Base_SetConfig+0x134>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <TIM_Base_SetConfig+0xf2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a14      	ldr	r2, [pc, #80]	@ (8004c78 <TIM_Base_SetConfig+0x138>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_Base_SetConfig+0xf2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a13      	ldr	r2, [pc, #76]	@ (8004c7c <TIM_Base_SetConfig+0x13c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d103      	bne.n	8004c3a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f043 0204 	orr.w	r2, r3, #4
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	601a      	str	r2, [r3, #0]
}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40010400 	.word	0x40010400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40014400 	.word	0x40014400
 8004c7c:	40014800 	.word	0x40014800

08004c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e042      	b.n	8004d54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fc f97b 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2224      	movs	r2, #36	@ 0x24
 8004cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fd90 	bl	800582c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f825 	bl	8004d5c <UART_SetConfig>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e01b      	b.n	8004d54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fe0f 	bl	8005970 <UART_CheckIdleState>
 8004d52:	4603      	mov	r3, r0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d60:	b092      	sub	sp, #72	@ 0x48
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4bbe      	ldr	r3, [pc, #760]	@ (8005084 <UART_SetConfig+0x328>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4ab3      	ldr	r2, [pc, #716]	@ (8005088 <UART_SetConfig+0x32c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	4baf      	ldr	r3, [pc, #700]	@ (800508c <UART_SetConfig+0x330>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	f023 010f 	bic.w	r1, r3, #15
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4aa6      	ldr	r2, [pc, #664]	@ (8005090 <UART_SetConfig+0x334>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d177      	bne.n	8004eec <UART_SetConfig+0x190>
 8004dfc:	4ba5      	ldr	r3, [pc, #660]	@ (8005094 <UART_SetConfig+0x338>)
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e04:	2b28      	cmp	r3, #40	@ 0x28
 8004e06:	d86d      	bhi.n	8004ee4 <UART_SetConfig+0x188>
 8004e08:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <UART_SetConfig+0xb4>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004eb5 	.word	0x08004eb5
 8004e14:	08004ee5 	.word	0x08004ee5
 8004e18:	08004ee5 	.word	0x08004ee5
 8004e1c:	08004ee5 	.word	0x08004ee5
 8004e20:	08004ee5 	.word	0x08004ee5
 8004e24:	08004ee5 	.word	0x08004ee5
 8004e28:	08004ee5 	.word	0x08004ee5
 8004e2c:	08004ee5 	.word	0x08004ee5
 8004e30:	08004ebd 	.word	0x08004ebd
 8004e34:	08004ee5 	.word	0x08004ee5
 8004e38:	08004ee5 	.word	0x08004ee5
 8004e3c:	08004ee5 	.word	0x08004ee5
 8004e40:	08004ee5 	.word	0x08004ee5
 8004e44:	08004ee5 	.word	0x08004ee5
 8004e48:	08004ee5 	.word	0x08004ee5
 8004e4c:	08004ee5 	.word	0x08004ee5
 8004e50:	08004ec5 	.word	0x08004ec5
 8004e54:	08004ee5 	.word	0x08004ee5
 8004e58:	08004ee5 	.word	0x08004ee5
 8004e5c:	08004ee5 	.word	0x08004ee5
 8004e60:	08004ee5 	.word	0x08004ee5
 8004e64:	08004ee5 	.word	0x08004ee5
 8004e68:	08004ee5 	.word	0x08004ee5
 8004e6c:	08004ee5 	.word	0x08004ee5
 8004e70:	08004ecd 	.word	0x08004ecd
 8004e74:	08004ee5 	.word	0x08004ee5
 8004e78:	08004ee5 	.word	0x08004ee5
 8004e7c:	08004ee5 	.word	0x08004ee5
 8004e80:	08004ee5 	.word	0x08004ee5
 8004e84:	08004ee5 	.word	0x08004ee5
 8004e88:	08004ee5 	.word	0x08004ee5
 8004e8c:	08004ee5 	.word	0x08004ee5
 8004e90:	08004ed5 	.word	0x08004ed5
 8004e94:	08004ee5 	.word	0x08004ee5
 8004e98:	08004ee5 	.word	0x08004ee5
 8004e9c:	08004ee5 	.word	0x08004ee5
 8004ea0:	08004ee5 	.word	0x08004ee5
 8004ea4:	08004ee5 	.word	0x08004ee5
 8004ea8:	08004ee5 	.word	0x08004ee5
 8004eac:	08004ee5 	.word	0x08004ee5
 8004eb0:	08004edd 	.word	0x08004edd
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eba:	e222      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ec2:	e21e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eca:	e21a      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ed2:	e216      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ed4:	2320      	movs	r3, #32
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eda:	e212      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004edc:	2340      	movs	r3, #64	@ 0x40
 8004ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ee2:	e20e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004ee4:	2380      	movs	r3, #128	@ 0x80
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eea:	e20a      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a69      	ldr	r2, [pc, #420]	@ (8005098 <UART_SetConfig+0x33c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d130      	bne.n	8004f58 <UART_SetConfig+0x1fc>
 8004ef6:	4b67      	ldr	r3, [pc, #412]	@ (8005094 <UART_SetConfig+0x338>)
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	2b05      	cmp	r3, #5
 8004f00:	d826      	bhi.n	8004f50 <UART_SetConfig+0x1f4>
 8004f02:	a201      	add	r2, pc, #4	@ (adr r2, 8004f08 <UART_SetConfig+0x1ac>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f21 	.word	0x08004f21
 8004f0c:	08004f29 	.word	0x08004f29
 8004f10:	08004f31 	.word	0x08004f31
 8004f14:	08004f39 	.word	0x08004f39
 8004f18:	08004f41 	.word	0x08004f41
 8004f1c:	08004f49 	.word	0x08004f49
 8004f20:	2300      	movs	r3, #0
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f26:	e1ec      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2e:	e1e8      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f30:	2308      	movs	r3, #8
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f36:	e1e4      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f3e:	e1e0      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f40:	2320      	movs	r3, #32
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f46:	e1dc      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f48:	2340      	movs	r3, #64	@ 0x40
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f4e:	e1d8      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f50:	2380      	movs	r3, #128	@ 0x80
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f56:	e1d4      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a4f      	ldr	r2, [pc, #316]	@ (800509c <UART_SetConfig+0x340>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d130      	bne.n	8004fc4 <UART_SetConfig+0x268>
 8004f62:	4b4c      	ldr	r3, [pc, #304]	@ (8005094 <UART_SetConfig+0x338>)
 8004f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	2b05      	cmp	r3, #5
 8004f6c:	d826      	bhi.n	8004fbc <UART_SetConfig+0x260>
 8004f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f74 <UART_SetConfig+0x218>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004f8d 	.word	0x08004f8d
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	08004f9d 	.word	0x08004f9d
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fb5 	.word	0x08004fb5
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f92:	e1b6      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f94:	2304      	movs	r3, #4
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9a:	e1b2      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa2:	e1ae      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004faa:	e1aa      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fac:	2320      	movs	r3, #32
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fb2:	e1a6      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fb4:	2340      	movs	r3, #64	@ 0x40
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fba:	e1a2      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fbc:	2380      	movs	r3, #128	@ 0x80
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fc2:	e19e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a35      	ldr	r2, [pc, #212]	@ (80050a0 <UART_SetConfig+0x344>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d130      	bne.n	8005030 <UART_SetConfig+0x2d4>
 8004fce:	4b31      	ldr	r3, [pc, #196]	@ (8005094 <UART_SetConfig+0x338>)
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b05      	cmp	r3, #5
 8004fd8:	d826      	bhi.n	8005028 <UART_SetConfig+0x2cc>
 8004fda:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe0 <UART_SetConfig+0x284>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08004ff9 	.word	0x08004ff9
 8004fe4:	08005001 	.word	0x08005001
 8004fe8:	08005009 	.word	0x08005009
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffe:	e180      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005000:	2304      	movs	r3, #4
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005006:	e17c      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005008:	2308      	movs	r3, #8
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500e:	e178      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005010:	2310      	movs	r3, #16
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005016:	e174      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005018:	2320      	movs	r3, #32
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800501e:	e170      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005020:	2340      	movs	r3, #64	@ 0x40
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005026:	e16c      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005028:	2380      	movs	r3, #128	@ 0x80
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800502e:	e168      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1b      	ldr	r2, [pc, #108]	@ (80050a4 <UART_SetConfig+0x348>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d142      	bne.n	80050c0 <UART_SetConfig+0x364>
 800503a:	4b16      	ldr	r3, [pc, #88]	@ (8005094 <UART_SetConfig+0x338>)
 800503c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	2b05      	cmp	r3, #5
 8005044:	d838      	bhi.n	80050b8 <UART_SetConfig+0x35c>
 8005046:	a201      	add	r2, pc, #4	@ (adr r2, 800504c <UART_SetConfig+0x2f0>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005065 	.word	0x08005065
 8005050:	0800506d 	.word	0x0800506d
 8005054:	08005075 	.word	0x08005075
 8005058:	0800507d 	.word	0x0800507d
 800505c:	080050a9 	.word	0x080050a9
 8005060:	080050b1 	.word	0x080050b1
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506a:	e14a      	b.n	8005302 <UART_SetConfig+0x5a6>
 800506c:	2304      	movs	r3, #4
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005072:	e146      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005074:	2308      	movs	r3, #8
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507a:	e142      	b.n	8005302 <UART_SetConfig+0x5a6>
 800507c:	2310      	movs	r3, #16
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005082:	e13e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005084:	cfff69f3 	.word	0xcfff69f3
 8005088:	58000c00 	.word	0x58000c00
 800508c:	11fff4ff 	.word	0x11fff4ff
 8005090:	40011000 	.word	0x40011000
 8005094:	58024400 	.word	0x58024400
 8005098:	40004400 	.word	0x40004400
 800509c:	40004800 	.word	0x40004800
 80050a0:	40004c00 	.word	0x40004c00
 80050a4:	40005000 	.word	0x40005000
 80050a8:	2320      	movs	r3, #32
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ae:	e128      	b.n	8005302 <UART_SetConfig+0x5a6>
 80050b0:	2340      	movs	r3, #64	@ 0x40
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b6:	e124      	b.n	8005302 <UART_SetConfig+0x5a6>
 80050b8:	2380      	movs	r3, #128	@ 0x80
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050be:	e120      	b.n	8005302 <UART_SetConfig+0x5a6>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4acb      	ldr	r2, [pc, #812]	@ (80053f4 <UART_SetConfig+0x698>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d176      	bne.n	80051b8 <UART_SetConfig+0x45c>
 80050ca:	4bcb      	ldr	r3, [pc, #812]	@ (80053f8 <UART_SetConfig+0x69c>)
 80050cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050d2:	2b28      	cmp	r3, #40	@ 0x28
 80050d4:	d86c      	bhi.n	80051b0 <UART_SetConfig+0x454>
 80050d6:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <UART_SetConfig+0x380>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	08005181 	.word	0x08005181
 80050e0:	080051b1 	.word	0x080051b1
 80050e4:	080051b1 	.word	0x080051b1
 80050e8:	080051b1 	.word	0x080051b1
 80050ec:	080051b1 	.word	0x080051b1
 80050f0:	080051b1 	.word	0x080051b1
 80050f4:	080051b1 	.word	0x080051b1
 80050f8:	080051b1 	.word	0x080051b1
 80050fc:	08005189 	.word	0x08005189
 8005100:	080051b1 	.word	0x080051b1
 8005104:	080051b1 	.word	0x080051b1
 8005108:	080051b1 	.word	0x080051b1
 800510c:	080051b1 	.word	0x080051b1
 8005110:	080051b1 	.word	0x080051b1
 8005114:	080051b1 	.word	0x080051b1
 8005118:	080051b1 	.word	0x080051b1
 800511c:	08005191 	.word	0x08005191
 8005120:	080051b1 	.word	0x080051b1
 8005124:	080051b1 	.word	0x080051b1
 8005128:	080051b1 	.word	0x080051b1
 800512c:	080051b1 	.word	0x080051b1
 8005130:	080051b1 	.word	0x080051b1
 8005134:	080051b1 	.word	0x080051b1
 8005138:	080051b1 	.word	0x080051b1
 800513c:	08005199 	.word	0x08005199
 8005140:	080051b1 	.word	0x080051b1
 8005144:	080051b1 	.word	0x080051b1
 8005148:	080051b1 	.word	0x080051b1
 800514c:	080051b1 	.word	0x080051b1
 8005150:	080051b1 	.word	0x080051b1
 8005154:	080051b1 	.word	0x080051b1
 8005158:	080051b1 	.word	0x080051b1
 800515c:	080051a1 	.word	0x080051a1
 8005160:	080051b1 	.word	0x080051b1
 8005164:	080051b1 	.word	0x080051b1
 8005168:	080051b1 	.word	0x080051b1
 800516c:	080051b1 	.word	0x080051b1
 8005170:	080051b1 	.word	0x080051b1
 8005174:	080051b1 	.word	0x080051b1
 8005178:	080051b1 	.word	0x080051b1
 800517c:	080051a9 	.word	0x080051a9
 8005180:	2301      	movs	r3, #1
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005186:	e0bc      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005188:	2304      	movs	r3, #4
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800518e:	e0b8      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005190:	2308      	movs	r3, #8
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005196:	e0b4      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519e:	e0b0      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051a0:	2320      	movs	r3, #32
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a6:	e0ac      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051a8:	2340      	movs	r3, #64	@ 0x40
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ae:	e0a8      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051b0:	2380      	movs	r3, #128	@ 0x80
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b6:	e0a4      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a8f      	ldr	r2, [pc, #572]	@ (80053fc <UART_SetConfig+0x6a0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d130      	bne.n	8005224 <UART_SetConfig+0x4c8>
 80051c2:	4b8d      	ldr	r3, [pc, #564]	@ (80053f8 <UART_SetConfig+0x69c>)
 80051c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d826      	bhi.n	800521c <UART_SetConfig+0x4c0>
 80051ce:	a201      	add	r2, pc, #4	@ (adr r2, 80051d4 <UART_SetConfig+0x478>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	080051ed 	.word	0x080051ed
 80051d8:	080051f5 	.word	0x080051f5
 80051dc:	080051fd 	.word	0x080051fd
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051f2:	e086      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051f4:	2304      	movs	r3, #4
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051fa:	e082      	b.n	8005302 <UART_SetConfig+0x5a6>
 80051fc:	2308      	movs	r3, #8
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005202:	e07e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005204:	2310      	movs	r3, #16
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800520a:	e07a      	b.n	8005302 <UART_SetConfig+0x5a6>
 800520c:	2320      	movs	r3, #32
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005212:	e076      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005214:	2340      	movs	r3, #64	@ 0x40
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521a:	e072      	b.n	8005302 <UART_SetConfig+0x5a6>
 800521c:	2380      	movs	r3, #128	@ 0x80
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005222:	e06e      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a75      	ldr	r2, [pc, #468]	@ (8005400 <UART_SetConfig+0x6a4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d130      	bne.n	8005290 <UART_SetConfig+0x534>
 800522e:	4b72      	ldr	r3, [pc, #456]	@ (80053f8 <UART_SetConfig+0x69c>)
 8005230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	2b05      	cmp	r3, #5
 8005238:	d826      	bhi.n	8005288 <UART_SetConfig+0x52c>
 800523a:	a201      	add	r2, pc, #4	@ (adr r2, 8005240 <UART_SetConfig+0x4e4>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005259 	.word	0x08005259
 8005244:	08005261 	.word	0x08005261
 8005248:	08005269 	.word	0x08005269
 800524c:	08005271 	.word	0x08005271
 8005250:	08005279 	.word	0x08005279
 8005254:	08005281 	.word	0x08005281
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525e:	e050      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005266:	e04c      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526e:	e048      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005276:	e044      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005278:	2320      	movs	r3, #32
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800527e:	e040      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005280:	2340      	movs	r3, #64	@ 0x40
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005286:	e03c      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005288:	2380      	movs	r3, #128	@ 0x80
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528e:	e038      	b.n	8005302 <UART_SetConfig+0x5a6>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a5b      	ldr	r2, [pc, #364]	@ (8005404 <UART_SetConfig+0x6a8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d130      	bne.n	80052fc <UART_SetConfig+0x5a0>
 800529a:	4b57      	ldr	r3, [pc, #348]	@ (80053f8 <UART_SetConfig+0x69c>)
 800529c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	d826      	bhi.n	80052f4 <UART_SetConfig+0x598>
 80052a6:	a201      	add	r2, pc, #4	@ (adr r2, 80052ac <UART_SetConfig+0x550>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052c5 	.word	0x080052c5
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	080052d5 	.word	0x080052d5
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052ed 	.word	0x080052ed
 80052c4:	2302      	movs	r3, #2
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ca:	e01a      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052cc:	2304      	movs	r3, #4
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d2:	e016      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052d4:	2308      	movs	r3, #8
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052da:	e012      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052dc:	2310      	movs	r3, #16
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e2:	e00e      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052e4:	2320      	movs	r3, #32
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ea:	e00a      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052ec:	2340      	movs	r3, #64	@ 0x40
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f2:	e006      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052f4:	2380      	movs	r3, #128	@ 0x80
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fa:	e002      	b.n	8005302 <UART_SetConfig+0x5a6>
 80052fc:	2380      	movs	r3, #128	@ 0x80
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a3f      	ldr	r2, [pc, #252]	@ (8005404 <UART_SetConfig+0x6a8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	f040 80f8 	bne.w	80054fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800530e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005312:	2b20      	cmp	r3, #32
 8005314:	dc46      	bgt.n	80053a4 <UART_SetConfig+0x648>
 8005316:	2b02      	cmp	r3, #2
 8005318:	f2c0 8082 	blt.w	8005420 <UART_SetConfig+0x6c4>
 800531c:	3b02      	subs	r3, #2
 800531e:	2b1e      	cmp	r3, #30
 8005320:	d87e      	bhi.n	8005420 <UART_SetConfig+0x6c4>
 8005322:	a201      	add	r2, pc, #4	@ (adr r2, 8005328 <UART_SetConfig+0x5cc>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	080053ab 	.word	0x080053ab
 800532c:	08005421 	.word	0x08005421
 8005330:	080053b3 	.word	0x080053b3
 8005334:	08005421 	.word	0x08005421
 8005338:	08005421 	.word	0x08005421
 800533c:	08005421 	.word	0x08005421
 8005340:	080053c3 	.word	0x080053c3
 8005344:	08005421 	.word	0x08005421
 8005348:	08005421 	.word	0x08005421
 800534c:	08005421 	.word	0x08005421
 8005350:	08005421 	.word	0x08005421
 8005354:	08005421 	.word	0x08005421
 8005358:	08005421 	.word	0x08005421
 800535c:	08005421 	.word	0x08005421
 8005360:	080053d3 	.word	0x080053d3
 8005364:	08005421 	.word	0x08005421
 8005368:	08005421 	.word	0x08005421
 800536c:	08005421 	.word	0x08005421
 8005370:	08005421 	.word	0x08005421
 8005374:	08005421 	.word	0x08005421
 8005378:	08005421 	.word	0x08005421
 800537c:	08005421 	.word	0x08005421
 8005380:	08005421 	.word	0x08005421
 8005384:	08005421 	.word	0x08005421
 8005388:	08005421 	.word	0x08005421
 800538c:	08005421 	.word	0x08005421
 8005390:	08005421 	.word	0x08005421
 8005394:	08005421 	.word	0x08005421
 8005398:	08005421 	.word	0x08005421
 800539c:	08005421 	.word	0x08005421
 80053a0:	08005413 	.word	0x08005413
 80053a4:	2b40      	cmp	r3, #64	@ 0x40
 80053a6:	d037      	beq.n	8005418 <UART_SetConfig+0x6bc>
 80053a8:	e03a      	b.n	8005420 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053aa:	f7fe fc5f 	bl	8003c6c <HAL_RCCEx_GetD3PCLK1Freq>
 80053ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80053b0:	e03c      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe fc6e 	bl	8003c98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053c0:	e034      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053c2:	f107 0318 	add.w	r3, r7, #24
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe fdba 	bl	8003f40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053d0:	e02c      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d2:	4b09      	ldr	r3, [pc, #36]	@ (80053f8 <UART_SetConfig+0x69c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053de:	4b06      	ldr	r3, [pc, #24]	@ (80053f8 <UART_SetConfig+0x69c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	08db      	lsrs	r3, r3, #3
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	4a07      	ldr	r2, [pc, #28]	@ (8005408 <UART_SetConfig+0x6ac>)
 80053ea:	fa22 f303 	lsr.w	r3, r2, r3
 80053ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053f0:	e01c      	b.n	800542c <UART_SetConfig+0x6d0>
 80053f2:	bf00      	nop
 80053f4:	40011400 	.word	0x40011400
 80053f8:	58024400 	.word	0x58024400
 80053fc:	40007800 	.word	0x40007800
 8005400:	40007c00 	.word	0x40007c00
 8005404:	58000c00 	.word	0x58000c00
 8005408:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800540c:	4b9d      	ldr	r3, [pc, #628]	@ (8005684 <UART_SetConfig+0x928>)
 800540e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005410:	e00c      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005412:	4b9d      	ldr	r3, [pc, #628]	@ (8005688 <UART_SetConfig+0x92c>)
 8005414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005416:	e009      	b.n	800542c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005418:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800541c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800541e:	e005      	b.n	800542c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800542a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800542c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 81de 	beq.w	80057f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005438:	4a94      	ldr	r2, [pc, #592]	@ (800568c <UART_SetConfig+0x930>)
 800543a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543e:	461a      	mov	r2, r3
 8005440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005442:	fbb3 f3f2 	udiv	r3, r3, r2
 8005446:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4413      	add	r3, r2
 8005452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005454:	429a      	cmp	r2, r3
 8005456:	d305      	bcc.n	8005464 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800545e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005460:	429a      	cmp	r2, r3
 8005462:	d903      	bls.n	800546c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800546a:	e1c1      	b.n	80057f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800546c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546e:	2200      	movs	r2, #0
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	60fa      	str	r2, [r7, #12]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	4a84      	ldr	r2, [pc, #528]	@ (800568c <UART_SetConfig+0x930>)
 800547a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800547e:	b29b      	uxth	r3, r3
 8005480:	2200      	movs	r2, #0
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	607a      	str	r2, [r7, #4]
 8005486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800548a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800548e:	f7fa ff27 	bl	80002e0 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4610      	mov	r0, r2
 8005498:	4619      	mov	r1, r3
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	f04f 0300 	mov.w	r3, #0
 80054a2:	020b      	lsls	r3, r1, #8
 80054a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054a8:	0202      	lsls	r2, r0, #8
 80054aa:	6979      	ldr	r1, [r7, #20]
 80054ac:	6849      	ldr	r1, [r1, #4]
 80054ae:	0849      	lsrs	r1, r1, #1
 80054b0:	2000      	movs	r0, #0
 80054b2:	460c      	mov	r4, r1
 80054b4:	4605      	mov	r5, r0
 80054b6:	eb12 0804 	adds.w	r8, r2, r4
 80054ba:	eb43 0905 	adc.w	r9, r3, r5
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	469a      	mov	sl, r3
 80054c6:	4693      	mov	fp, r2
 80054c8:	4652      	mov	r2, sl
 80054ca:	465b      	mov	r3, fp
 80054cc:	4640      	mov	r0, r8
 80054ce:	4649      	mov	r1, r9
 80054d0:	f7fa ff06 	bl	80002e0 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4613      	mov	r3, r2
 80054da:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054e2:	d308      	bcc.n	80054f6 <UART_SetConfig+0x79a>
 80054e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ea:	d204      	bcs.n	80054f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054f2:	60da      	str	r2, [r3, #12]
 80054f4:	e17c      	b.n	80057f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80054fc:	e178      	b.n	80057f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005506:	f040 80c5 	bne.w	8005694 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800550a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800550e:	2b20      	cmp	r3, #32
 8005510:	dc48      	bgt.n	80055a4 <UART_SetConfig+0x848>
 8005512:	2b00      	cmp	r3, #0
 8005514:	db7b      	blt.n	800560e <UART_SetConfig+0x8b2>
 8005516:	2b20      	cmp	r3, #32
 8005518:	d879      	bhi.n	800560e <UART_SetConfig+0x8b2>
 800551a:	a201      	add	r2, pc, #4	@ (adr r2, 8005520 <UART_SetConfig+0x7c4>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	080055ab 	.word	0x080055ab
 8005524:	080055b3 	.word	0x080055b3
 8005528:	0800560f 	.word	0x0800560f
 800552c:	0800560f 	.word	0x0800560f
 8005530:	080055bb 	.word	0x080055bb
 8005534:	0800560f 	.word	0x0800560f
 8005538:	0800560f 	.word	0x0800560f
 800553c:	0800560f 	.word	0x0800560f
 8005540:	080055cb 	.word	0x080055cb
 8005544:	0800560f 	.word	0x0800560f
 8005548:	0800560f 	.word	0x0800560f
 800554c:	0800560f 	.word	0x0800560f
 8005550:	0800560f 	.word	0x0800560f
 8005554:	0800560f 	.word	0x0800560f
 8005558:	0800560f 	.word	0x0800560f
 800555c:	0800560f 	.word	0x0800560f
 8005560:	080055db 	.word	0x080055db
 8005564:	0800560f 	.word	0x0800560f
 8005568:	0800560f 	.word	0x0800560f
 800556c:	0800560f 	.word	0x0800560f
 8005570:	0800560f 	.word	0x0800560f
 8005574:	0800560f 	.word	0x0800560f
 8005578:	0800560f 	.word	0x0800560f
 800557c:	0800560f 	.word	0x0800560f
 8005580:	0800560f 	.word	0x0800560f
 8005584:	0800560f 	.word	0x0800560f
 8005588:	0800560f 	.word	0x0800560f
 800558c:	0800560f 	.word	0x0800560f
 8005590:	0800560f 	.word	0x0800560f
 8005594:	0800560f 	.word	0x0800560f
 8005598:	0800560f 	.word	0x0800560f
 800559c:	0800560f 	.word	0x0800560f
 80055a0:	08005601 	.word	0x08005601
 80055a4:	2b40      	cmp	r3, #64	@ 0x40
 80055a6:	d02e      	beq.n	8005606 <UART_SetConfig+0x8aa>
 80055a8:	e031      	b.n	800560e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055aa:	f7fd f8e7 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 80055ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80055b0:	e033      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b2:	f7fd f8f9 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 80055b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80055b8:	e02f      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fb6a 	bl	8003c98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055c8:	e027      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055ca:	f107 0318 	add.w	r3, r7, #24
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fe fcb6 	bl	8003f40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055d8:	e01f      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055da:	4b2d      	ldr	r3, [pc, #180]	@ (8005690 <UART_SetConfig+0x934>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d009      	beq.n	80055fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005690 <UART_SetConfig+0x934>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	08db      	lsrs	r3, r3, #3
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	4a24      	ldr	r2, [pc, #144]	@ (8005684 <UART_SetConfig+0x928>)
 80055f2:	fa22 f303 	lsr.w	r3, r2, r3
 80055f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055f8:	e00f      	b.n	800561a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80055fa:	4b22      	ldr	r3, [pc, #136]	@ (8005684 <UART_SetConfig+0x928>)
 80055fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055fe:	e00c      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005600:	4b21      	ldr	r3, [pc, #132]	@ (8005688 <UART_SetConfig+0x92c>)
 8005602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005604:	e009      	b.n	800561a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800560a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800560c:	e005      	b.n	800561a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800561a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80e7 	beq.w	80057f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005626:	4a19      	ldr	r2, [pc, #100]	@ (800568c <UART_SetConfig+0x930>)
 8005628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800562c:	461a      	mov	r2, r3
 800562e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005630:	fbb3 f3f2 	udiv	r3, r3, r2
 8005634:	005a      	lsls	r2, r3, #1
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	441a      	add	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	2b0f      	cmp	r3, #15
 800564c:	d916      	bls.n	800567c <UART_SetConfig+0x920>
 800564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005654:	d212      	bcs.n	800567c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	b29b      	uxth	r3, r3
 800565a:	f023 030f 	bic.w	r3, r3, #15
 800565e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	b29b      	uxth	r3, r3
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	b29a      	uxth	r2, r3
 800566c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800566e:	4313      	orrs	r3, r2
 8005670:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005678:	60da      	str	r2, [r3, #12]
 800567a:	e0b9      	b.n	80057f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005682:	e0b5      	b.n	80057f0 <UART_SetConfig+0xa94>
 8005684:	03d09000 	.word	0x03d09000
 8005688:	003d0900 	.word	0x003d0900
 800568c:	08008c24 	.word	0x08008c24
 8005690:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005694:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005698:	2b20      	cmp	r3, #32
 800569a:	dc49      	bgt.n	8005730 <UART_SetConfig+0x9d4>
 800569c:	2b00      	cmp	r3, #0
 800569e:	db7c      	blt.n	800579a <UART_SetConfig+0xa3e>
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d87a      	bhi.n	800579a <UART_SetConfig+0xa3e>
 80056a4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <UART_SetConfig+0x950>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	08005737 	.word	0x08005737
 80056b0:	0800573f 	.word	0x0800573f
 80056b4:	0800579b 	.word	0x0800579b
 80056b8:	0800579b 	.word	0x0800579b
 80056bc:	08005747 	.word	0x08005747
 80056c0:	0800579b 	.word	0x0800579b
 80056c4:	0800579b 	.word	0x0800579b
 80056c8:	0800579b 	.word	0x0800579b
 80056cc:	08005757 	.word	0x08005757
 80056d0:	0800579b 	.word	0x0800579b
 80056d4:	0800579b 	.word	0x0800579b
 80056d8:	0800579b 	.word	0x0800579b
 80056dc:	0800579b 	.word	0x0800579b
 80056e0:	0800579b 	.word	0x0800579b
 80056e4:	0800579b 	.word	0x0800579b
 80056e8:	0800579b 	.word	0x0800579b
 80056ec:	08005767 	.word	0x08005767
 80056f0:	0800579b 	.word	0x0800579b
 80056f4:	0800579b 	.word	0x0800579b
 80056f8:	0800579b 	.word	0x0800579b
 80056fc:	0800579b 	.word	0x0800579b
 8005700:	0800579b 	.word	0x0800579b
 8005704:	0800579b 	.word	0x0800579b
 8005708:	0800579b 	.word	0x0800579b
 800570c:	0800579b 	.word	0x0800579b
 8005710:	0800579b 	.word	0x0800579b
 8005714:	0800579b 	.word	0x0800579b
 8005718:	0800579b 	.word	0x0800579b
 800571c:	0800579b 	.word	0x0800579b
 8005720:	0800579b 	.word	0x0800579b
 8005724:	0800579b 	.word	0x0800579b
 8005728:	0800579b 	.word	0x0800579b
 800572c:	0800578d 	.word	0x0800578d
 8005730:	2b40      	cmp	r3, #64	@ 0x40
 8005732:	d02e      	beq.n	8005792 <UART_SetConfig+0xa36>
 8005734:	e031      	b.n	800579a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005736:	f7fd f821 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 800573a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800573c:	e033      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800573e:	f7fd f833 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8005742:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005744:	e02f      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe faa4 	bl	8003c98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005754:	e027      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005756:	f107 0318 	add.w	r3, r7, #24
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe fbf0 	bl	8003f40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005764:	e01f      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005766:	4b2d      	ldr	r3, [pc, #180]	@ (800581c <UART_SetConfig+0xac0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005772:	4b2a      	ldr	r3, [pc, #168]	@ (800581c <UART_SetConfig+0xac0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	08db      	lsrs	r3, r3, #3
 8005778:	f003 0303 	and.w	r3, r3, #3
 800577c:	4a28      	ldr	r2, [pc, #160]	@ (8005820 <UART_SetConfig+0xac4>)
 800577e:	fa22 f303 	lsr.w	r3, r2, r3
 8005782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005784:	e00f      	b.n	80057a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005786:	4b26      	ldr	r3, [pc, #152]	@ (8005820 <UART_SetConfig+0xac4>)
 8005788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800578a:	e00c      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800578c:	4b25      	ldr	r3, [pc, #148]	@ (8005824 <UART_SetConfig+0xac8>)
 800578e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005790:	e009      	b.n	80057a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005798:	e005      	b.n	80057a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80057a4:	bf00      	nop
    }

    if (pclk != 0U)
 80057a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d021      	beq.n	80057f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005828 <UART_SetConfig+0xacc>)
 80057b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057b6:	461a      	mov	r2, r3
 80057b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	441a      	add	r2, r3
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d2:	2b0f      	cmp	r3, #15
 80057d4:	d909      	bls.n	80057ea <UART_SetConfig+0xa8e>
 80057d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057dc:	d205      	bcs.n	80057ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60da      	str	r2, [r3, #12]
 80057e8:	e002      	b.n	80057f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2200      	movs	r2, #0
 8005804:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2200      	movs	r2, #0
 800580a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800580c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005810:	4618      	mov	r0, r3
 8005812:	3748      	adds	r7, #72	@ 0x48
 8005814:	46bd      	mov	sp, r7
 8005816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800581a:	bf00      	nop
 800581c:	58024400 	.word	0x58024400
 8005820:	03d09000 	.word	0x03d09000
 8005824:	003d0900 	.word	0x003d0900
 8005828:	08008c24 	.word	0x08008c24

0800582c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01a      	beq.n	8005942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800592a:	d10a      	bne.n	8005942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	605a      	str	r2, [r3, #4]
  }
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b098      	sub	sp, #96	@ 0x60
 8005974:	af02      	add	r7, sp, #8
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005980:	f7fb fc12 	bl	80011a8 <HAL_GetTick>
 8005984:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b08      	cmp	r3, #8
 8005992:	d12f      	bne.n	80059f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005994:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800599c:	2200      	movs	r2, #0
 800599e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f88e 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d022      	beq.n	80059f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e6      	bne.n	80059ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e063      	b.n	8005abc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d149      	bne.n	8005a96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f857 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d03c      	beq.n	8005a96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	623b      	str	r3, [r7, #32]
   return(result);
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e6      	bne.n	8005a1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3308      	adds	r3, #8
 8005a54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f023 0301 	bic.w	r3, r3, #1
 8005a64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a6e:	61fa      	str	r2, [r7, #28]
 8005a70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	69b9      	ldr	r1, [r7, #24]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e5      	bne.n	8005a4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e012      	b.n	8005abc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3758      	adds	r7, #88	@ 0x58
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad4:	e04f      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005adc:	d04b      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ade:	f7fb fb63 	bl	80011a8 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d302      	bcc.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e04e      	b.n	8005b96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d037      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b80      	cmp	r3, #128	@ 0x80
 8005b0a:	d034      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b40      	cmp	r3, #64	@ 0x40
 8005b10:	d031      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d110      	bne.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2208      	movs	r2, #8
 8005b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f839 	bl	8005ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2208      	movs	r2, #8
 8005b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e029      	b.n	8005b96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b50:	d111      	bne.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f81f 	bl	8005ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e00f      	b.n	8005b96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	bf0c      	ite	eq
 8005b86:	2301      	moveq	r3, #1
 8005b88:	2300      	movne	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d0a0      	beq.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b095      	sub	sp, #84	@ 0x54
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e6      	bne.n	8005ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3308      	adds	r3, #8
 8005be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	4b1e      	ldr	r3, [pc, #120]	@ (8005c68 <UART_EndRxTransfer+0xc8>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e5      	bne.n	8005bda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d118      	bne.n	8005c48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	e853 3f00 	ldrex	r3, [r3]
 8005c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f023 0310 	bic.w	r3, r3, #16
 8005c2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6979      	ldr	r1, [r7, #20]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	613b      	str	r3, [r7, #16]
   return(result);
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e6      	bne.n	8005c16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005c5c:	bf00      	nop
 8005c5e:	3754      	adds	r7, #84	@ 0x54
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	effffffe 	.word	0xeffffffe

08005c6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e027      	b.n	8005cd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2224      	movs	r2, #36	@ 0x24
 8005c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0201 	bic.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005cb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e02d      	b.n	8005d52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2224      	movs	r2, #36	@ 0x24
 8005d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f850 	bl	8005dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e02d      	b.n	8005dce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2224      	movs	r2, #36	@ 0x24
 8005d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0201 	bic.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f812 	bl	8005dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d108      	bne.n	8005dfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005df8:	e031      	b.n	8005e5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dfe:	2310      	movs	r3, #16
 8005e00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	0e5b      	lsrs	r3, r3, #25
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	0f5b      	lsrs	r3, r3, #29
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e22:	7bbb      	ldrb	r3, [r7, #14]
 8005e24:	7b3a      	ldrb	r2, [r7, #12]
 8005e26:	4911      	ldr	r1, [pc, #68]	@ (8005e6c <UARTEx_SetNbDataToProcess+0x94>)
 8005e28:	5c8a      	ldrb	r2, [r1, r2]
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e2e:	7b3a      	ldrb	r2, [r7, #12]
 8005e30:	490f      	ldr	r1, [pc, #60]	@ (8005e70 <UARTEx_SetNbDataToProcess+0x98>)
 8005e32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e34:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	7b7a      	ldrb	r2, [r7, #13]
 8005e44:	4909      	ldr	r1, [pc, #36]	@ (8005e6c <UARTEx_SetNbDataToProcess+0x94>)
 8005e46:	5c8a      	ldrb	r2, [r1, r2]
 8005e48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e4c:	7b7a      	ldrb	r2, [r7, #13]
 8005e4e:	4908      	ldr	r1, [pc, #32]	@ (8005e70 <UARTEx_SetNbDataToProcess+0x98>)
 8005e50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e52:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	08008c3c 	.word	0x08008c3c
 8005e70:	08008c44 	.word	0x08008c44

08005e74 <__NVIC_SetPriority>:
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	6039      	str	r1, [r7, #0]
 8005e7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	db0a      	blt.n	8005e9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	490c      	ldr	r1, [pc, #48]	@ (8005ec0 <__NVIC_SetPriority+0x4c>)
 8005e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e92:	0112      	lsls	r2, r2, #4
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	440b      	add	r3, r1
 8005e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005e9c:	e00a      	b.n	8005eb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	4908      	ldr	r1, [pc, #32]	@ (8005ec4 <__NVIC_SetPriority+0x50>)
 8005ea4:	88fb      	ldrh	r3, [r7, #6]
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	3b04      	subs	r3, #4
 8005eac:	0112      	lsls	r2, r2, #4
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	761a      	strb	r2, [r3, #24]
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	e000e100 	.word	0xe000e100
 8005ec4:	e000ed00 	.word	0xe000ed00

08005ec8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ecc:	4b05      	ldr	r3, [pc, #20]	@ (8005ee4 <SysTick_Handler+0x1c>)
 8005ece:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ed0:	f002 f978 	bl	80081c4 <xTaskGetSchedulerState>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d001      	beq.n	8005ede <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005eda:	f000 fdbd 	bl	8006a58 <xPortSysTickHandler>
  }
}
 8005ede:	bf00      	nop
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	e000e010 	.word	0xe000e010

08005ee8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005eec:	2100      	movs	r1, #0
 8005eee:	f06f 0004 	mvn.w	r0, #4
 8005ef2:	f7ff ffbf 	bl	8005e74 <__NVIC_SetPriority>
#endif
}
 8005ef6:	bf00      	nop
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f02:	f3ef 8305 	mrs	r3, IPSR
 8005f06:	603b      	str	r3, [r7, #0]
  return(result);
 8005f08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f0e:	f06f 0305 	mvn.w	r3, #5
 8005f12:	607b      	str	r3, [r7, #4]
 8005f14:	e00c      	b.n	8005f30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f16:	4b0a      	ldr	r3, [pc, #40]	@ (8005f40 <osKernelInitialize+0x44>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d105      	bne.n	8005f2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f1e:	4b08      	ldr	r3, [pc, #32]	@ (8005f40 <osKernelInitialize+0x44>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	607b      	str	r3, [r7, #4]
 8005f28:	e002      	b.n	8005f30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f30:	687b      	ldr	r3, [r7, #4]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	240001b8 	.word	0x240001b8

08005f44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f4a:	f3ef 8305 	mrs	r3, IPSR
 8005f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8005f50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f56:	f06f 0305 	mvn.w	r3, #5
 8005f5a:	607b      	str	r3, [r7, #4]
 8005f5c:	e010      	b.n	8005f80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <osKernelStart+0x48>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d109      	bne.n	8005f7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f66:	f7ff ffbf 	bl	8005ee8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f6a:	4b08      	ldr	r3, [pc, #32]	@ (8005f8c <osKernelStart+0x48>)
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f70:	f001 fcda 	bl	8007928 <vTaskStartScheduler>
      stat = osOK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	607b      	str	r3, [r7, #4]
 8005f78:	e002      	b.n	8005f80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f80:	687b      	ldr	r3, [r7, #4]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	240001b8 	.word	0x240001b8

08005f90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08e      	sub	sp, #56	@ 0x38
 8005f94:	af04      	add	r7, sp, #16
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fa0:	f3ef 8305 	mrs	r3, IPSR
 8005fa4:	617b      	str	r3, [r7, #20]
  return(result);
 8005fa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d17e      	bne.n	80060aa <osThreadNew+0x11a>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d07b      	beq.n	80060aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005fb2:	2380      	movs	r3, #128	@ 0x80
 8005fb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005fb6:	2318      	movs	r3, #24
 8005fb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005fbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005fc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d045      	beq.n	8006056 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <osThreadNew+0x48>
        name = attr->name;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d008      	beq.n	8005ffe <osThreadNew+0x6e>
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2b38      	cmp	r3, #56	@ 0x38
 8005ff0:	d805      	bhi.n	8005ffe <osThreadNew+0x6e>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <osThreadNew+0x72>
        return (NULL);
 8005ffe:	2300      	movs	r3, #0
 8006000:	e054      	b.n	80060ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	089b      	lsrs	r3, r3, #2
 8006010:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00e      	beq.n	8006038 <osThreadNew+0xa8>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	2b5b      	cmp	r3, #91	@ 0x5b
 8006020:	d90a      	bls.n	8006038 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006026:	2b00      	cmp	r3, #0
 8006028:	d006      	beq.n	8006038 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <osThreadNew+0xa8>
        mem = 1;
 8006032:	2301      	movs	r3, #1
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e010      	b.n	800605a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10c      	bne.n	800605a <osThreadNew+0xca>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d108      	bne.n	800605a <osThreadNew+0xca>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <osThreadNew+0xca>
          mem = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	e001      	b.n	800605a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d110      	bne.n	8006082 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006068:	9202      	str	r2, [sp, #8]
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	6a3a      	ldr	r2, [r7, #32]
 8006074:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f001 fa7a 	bl	8007570 <xTaskCreateStatic>
 800607c:	4603      	mov	r3, r0
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	e013      	b.n	80060aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d110      	bne.n	80060aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	b29a      	uxth	r2, r3
 800608c:	f107 0310 	add.w	r3, r7, #16
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f001 fac8 	bl	8007630 <xTaskCreate>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d001      	beq.n	80060aa <osThreadNew+0x11a>
            hTask = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060aa:	693b      	ldr	r3, [r7, #16]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3728      	adds	r7, #40	@ 0x28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ba:	f3ef 8305 	mrs	r3, IPSR
 80060be:	603b      	str	r3, [r7, #0]
  return(result);
 80060c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <osThreadYield+0x1a>
    stat = osErrorISR;
 80060c6:	f06f 0305 	mvn.w	r3, #5
 80060ca:	607b      	str	r3, [r7, #4]
 80060cc:	e009      	b.n	80060e2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80060d2:	4b07      	ldr	r3, [pc, #28]	@ (80060f0 <osThreadYield+0x3c>)
 80060d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80060e2:	687b      	ldr	r3, [r7, #4]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	e000ed04 	.word	0xe000ed04

080060f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060fc:	f3ef 8305 	mrs	r3, IPSR
 8006100:	60bb      	str	r3, [r7, #8]
  return(result);
 8006102:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <osDelay+0x1c>
    stat = osErrorISR;
 8006108:	f06f 0305 	mvn.w	r3, #5
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e007      	b.n	8006120 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <osDelay+0x2c>
      vTaskDelay(ticks);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fbce 	bl	80078bc <vTaskDelay>
    }
  }

  return (stat);
 8006120:	68fb      	ldr	r3, [r7, #12]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a07      	ldr	r2, [pc, #28]	@ (8006158 <vApplicationGetIdleTaskMemory+0x2c>)
 800613c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	4a06      	ldr	r2, [pc, #24]	@ (800615c <vApplicationGetIdleTaskMemory+0x30>)
 8006142:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2280      	movs	r2, #128	@ 0x80
 8006148:	601a      	str	r2, [r3, #0]
}
 800614a:	bf00      	nop
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	240001bc 	.word	0x240001bc
 800615c:	24000218 	.word	0x24000218

08006160 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4a07      	ldr	r2, [pc, #28]	@ (800618c <vApplicationGetTimerTaskMemory+0x2c>)
 8006170:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	4a06      	ldr	r2, [pc, #24]	@ (8006190 <vApplicationGetTimerTaskMemory+0x30>)
 8006176:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800617e:	601a      	str	r2, [r3, #0]
}
 8006180:	bf00      	nop
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	24000418 	.word	0x24000418
 8006190:	24000474 	.word	0x24000474

08006194 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	@ 0x28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800619c:	2300      	movs	r3, #0
 800619e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061a0:	f001 fc2a 	bl	80079f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061a4:	4b5c      	ldr	r3, [pc, #368]	@ (8006318 <pvPortMalloc+0x184>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061ac:	f000 f924 	bl	80063f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061b0:	4b5a      	ldr	r3, [pc, #360]	@ (800631c <pvPortMalloc+0x188>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f040 8095 	bne.w	80062e8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01e      	beq.n	8006202 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80061c4:	2208      	movs	r2, #8
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4413      	add	r3, r2
 80061ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d015      	beq.n	8006202 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f023 0307 	bic.w	r3, r3, #7
 80061dc:	3308      	adds	r3, #8
 80061de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00b      	beq.n	8006202 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	e7fd      	b.n	80061fe <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d06f      	beq.n	80062e8 <pvPortMalloc+0x154>
 8006208:	4b45      	ldr	r3, [pc, #276]	@ (8006320 <pvPortMalloc+0x18c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	429a      	cmp	r2, r3
 8006210:	d86a      	bhi.n	80062e8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006212:	4b44      	ldr	r3, [pc, #272]	@ (8006324 <pvPortMalloc+0x190>)
 8006214:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006216:	4b43      	ldr	r3, [pc, #268]	@ (8006324 <pvPortMalloc+0x190>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800621c:	e004      	b.n	8006228 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	429a      	cmp	r2, r3
 8006230:	d903      	bls.n	800623a <pvPortMalloc+0xa6>
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f1      	bne.n	800621e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800623a:	4b37      	ldr	r3, [pc, #220]	@ (8006318 <pvPortMalloc+0x184>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006240:	429a      	cmp	r2, r3
 8006242:	d051      	beq.n	80062e8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2208      	movs	r2, #8
 800624a:	4413      	add	r3, r2
 800624c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	1ad2      	subs	r2, r2, r3
 800625e:	2308      	movs	r3, #8
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	429a      	cmp	r2, r3
 8006264:	d920      	bls.n	80062a8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4413      	add	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00b      	beq.n	8006290 <pvPortMalloc+0xfc>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	613b      	str	r3, [r7, #16]
}
 800628a:	bf00      	nop
 800628c:	bf00      	nop
 800628e:	e7fd      	b.n	800628c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	1ad2      	subs	r2, r2, r3
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062a2:	69b8      	ldr	r0, [r7, #24]
 80062a4:	f000 f90a 	bl	80064bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006320 <pvPortMalloc+0x18c>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006320 <pvPortMalloc+0x18c>)
 80062b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006320 <pvPortMalloc+0x18c>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006328 <pvPortMalloc+0x194>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d203      	bcs.n	80062ca <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062c2:	4b17      	ldr	r3, [pc, #92]	@ (8006320 <pvPortMalloc+0x18c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a18      	ldr	r2, [pc, #96]	@ (8006328 <pvPortMalloc+0x194>)
 80062c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	4b13      	ldr	r3, [pc, #76]	@ (800631c <pvPortMalloc+0x188>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062de:	4b13      	ldr	r3, [pc, #76]	@ (800632c <pvPortMalloc+0x198>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	4a11      	ldr	r2, [pc, #68]	@ (800632c <pvPortMalloc+0x198>)
 80062e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062e8:	f001 fb94 	bl	8007a14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <pvPortMalloc+0x17a>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	60fb      	str	r3, [r7, #12]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <pvPortMalloc+0x176>
	return pvReturn;
 800630e:	69fb      	ldr	r3, [r7, #28]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3728      	adds	r7, #40	@ 0x28
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	2400447c 	.word	0x2400447c
 800631c:	24004490 	.word	0x24004490
 8006320:	24004480 	.word	0x24004480
 8006324:	24004474 	.word	0x24004474
 8006328:	24004484 	.word	0x24004484
 800632c:	24004488 	.word	0x24004488

08006330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d04f      	beq.n	80063e2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006342:	2308      	movs	r3, #8
 8006344:	425b      	negs	r3, r3
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4413      	add	r3, r2
 800634a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	4b25      	ldr	r3, [pc, #148]	@ (80063ec <vPortFree+0xbc>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4013      	ands	r3, r2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <vPortFree+0x46>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	60fb      	str	r3, [r7, #12]
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	e7fd      	b.n	8006372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00b      	beq.n	8006396 <vPortFree+0x66>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	60bb      	str	r3, [r7, #8]
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	e7fd      	b.n	8006392 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	4b14      	ldr	r3, [pc, #80]	@ (80063ec <vPortFree+0xbc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4013      	ands	r3, r2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01e      	beq.n	80063e2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d11a      	bne.n	80063e2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	4b0e      	ldr	r3, [pc, #56]	@ (80063ec <vPortFree+0xbc>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	43db      	mvns	r3, r3
 80063b6:	401a      	ands	r2, r3
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063bc:	f001 fb1c 	bl	80079f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	4b0a      	ldr	r3, [pc, #40]	@ (80063f0 <vPortFree+0xc0>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4413      	add	r3, r2
 80063ca:	4a09      	ldr	r2, [pc, #36]	@ (80063f0 <vPortFree+0xc0>)
 80063cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063ce:	6938      	ldr	r0, [r7, #16]
 80063d0:	f000 f874 	bl	80064bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063d4:	4b07      	ldr	r3, [pc, #28]	@ (80063f4 <vPortFree+0xc4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3301      	adds	r3, #1
 80063da:	4a06      	ldr	r2, [pc, #24]	@ (80063f4 <vPortFree+0xc4>)
 80063dc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063de:	f001 fb19 	bl	8007a14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063e2:	bf00      	nop
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	24004490 	.word	0x24004490
 80063f0:	24004480 	.word	0x24004480
 80063f4:	2400448c 	.word	0x2400448c

080063f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063fe:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006402:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006404:	4b27      	ldr	r3, [pc, #156]	@ (80064a4 <prvHeapInit+0xac>)
 8006406:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00c      	beq.n	800642c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3307      	adds	r3, #7
 8006416:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0307 	bic.w	r3, r3, #7
 800641e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	4a1f      	ldr	r2, [pc, #124]	@ (80064a4 <prvHeapInit+0xac>)
 8006428:	4413      	add	r3, r2
 800642a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006430:	4a1d      	ldr	r2, [pc, #116]	@ (80064a8 <prvHeapInit+0xb0>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006436:	4b1c      	ldr	r3, [pc, #112]	@ (80064a8 <prvHeapInit+0xb0>)
 8006438:	2200      	movs	r2, #0
 800643a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	4413      	add	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006444:	2208      	movs	r2, #8
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	1a9b      	subs	r3, r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0307 	bic.w	r3, r3, #7
 8006452:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4a15      	ldr	r2, [pc, #84]	@ (80064ac <prvHeapInit+0xb4>)
 8006458:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800645a:	4b14      	ldr	r3, [pc, #80]	@ (80064ac <prvHeapInit+0xb4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2200      	movs	r2, #0
 8006460:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006462:	4b12      	ldr	r3, [pc, #72]	@ (80064ac <prvHeapInit+0xb4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	1ad2      	subs	r2, r2, r3
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006478:	4b0c      	ldr	r3, [pc, #48]	@ (80064ac <prvHeapInit+0xb4>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	4a0a      	ldr	r2, [pc, #40]	@ (80064b0 <prvHeapInit+0xb8>)
 8006486:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	4a09      	ldr	r2, [pc, #36]	@ (80064b4 <prvHeapInit+0xbc>)
 800648e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006490:	4b09      	ldr	r3, [pc, #36]	@ (80064b8 <prvHeapInit+0xc0>)
 8006492:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006496:	601a      	str	r2, [r3, #0]
}
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	24000874 	.word	0x24000874
 80064a8:	24004474 	.word	0x24004474
 80064ac:	2400447c 	.word	0x2400447c
 80064b0:	24004484 	.word	0x24004484
 80064b4:	24004480 	.word	0x24004480
 80064b8:	24004490 	.word	0x24004490

080064bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064c4:	4b28      	ldr	r3, [pc, #160]	@ (8006568 <prvInsertBlockIntoFreeList+0xac>)
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	e002      	b.n	80064d0 <prvInsertBlockIntoFreeList+0x14>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d8f7      	bhi.n	80064ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	4413      	add	r3, r2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d108      	bne.n	80064fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	441a      	add	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	441a      	add	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d118      	bne.n	8006544 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b15      	ldr	r3, [pc, #84]	@ (800656c <prvInsertBlockIntoFreeList+0xb0>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d00d      	beq.n	800653a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	441a      	add	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	e008      	b.n	800654c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800653a:	4b0c      	ldr	r3, [pc, #48]	@ (800656c <prvInsertBlockIntoFreeList+0xb0>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	e003      	b.n	800654c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	429a      	cmp	r2, r3
 8006552:	d002      	beq.n	800655a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800655a:	bf00      	nop
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	24004474 	.word	0x24004474
 800656c:	2400447c 	.word	0x2400447c

08006570 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f103 0208 	add.w	r2, r3, #8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006588:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f103 0208 	add.w	r2, r3, #8
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f103 0208 	add.w	r2, r3, #8
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]
}
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006612:	b480      	push	{r7}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006628:	d103      	bne.n	8006632 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	e00c      	b.n	800664c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3308      	adds	r3, #8
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e002      	b.n	8006640 <vListInsert+0x2e>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	429a      	cmp	r2, r3
 800664a:	d2f6      	bcs.n	800663a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	601a      	str	r2, [r3, #0]
}
 8006678:	bf00      	nop
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6892      	ldr	r2, [r2, #8]
 800669a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6852      	ldr	r2, [r2, #4]
 80066a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d103      	bne.n	80066b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	1e5a      	subs	r2, r3, #1
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3b04      	subs	r3, #4
 80066e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3b04      	subs	r3, #4
 80066f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f023 0201 	bic.w	r2, r3, #1
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3b04      	subs	r3, #4
 8006706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006708:	4a0c      	ldr	r2, [pc, #48]	@ (800673c <pxPortInitialiseStack+0x64>)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3b14      	subs	r3, #20
 8006712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3b04      	subs	r3, #4
 800671e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f06f 0202 	mvn.w	r2, #2
 8006726:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3b20      	subs	r3, #32
 800672c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800672e:	68fb      	ldr	r3, [r7, #12]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	08006741 	.word	0x08006741

08006740 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800674a:	4b13      	ldr	r3, [pc, #76]	@ (8006798 <prvTaskExitError+0x58>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006752:	d00b      	beq.n	800676c <prvTaskExitError+0x2c>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	60fb      	str	r3, [r7, #12]
}
 8006766:	bf00      	nop
 8006768:	bf00      	nop
 800676a:	e7fd      	b.n	8006768 <prvTaskExitError+0x28>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	60bb      	str	r3, [r7, #8]
}
 800677e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006780:	bf00      	nop
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0fc      	beq.n	8006782 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	24000010 	.word	0x24000010
 800679c:	00000000 	.word	0x00000000

080067a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067a0:	4b07      	ldr	r3, [pc, #28]	@ (80067c0 <pxCurrentTCBConst2>)
 80067a2:	6819      	ldr	r1, [r3, #0]
 80067a4:	6808      	ldr	r0, [r1, #0]
 80067a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067aa:	f380 8809 	msr	PSP, r0
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f04f 0000 	mov.w	r0, #0
 80067b6:	f380 8811 	msr	BASEPRI, r0
 80067ba:	4770      	bx	lr
 80067bc:	f3af 8000 	nop.w

080067c0 <pxCurrentTCBConst2>:
 80067c0:	240044dc 	.word	0x240044dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop

080067c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067c8:	4808      	ldr	r0, [pc, #32]	@ (80067ec <prvPortStartFirstTask+0x24>)
 80067ca:	6800      	ldr	r0, [r0, #0]
 80067cc:	6800      	ldr	r0, [r0, #0]
 80067ce:	f380 8808 	msr	MSP, r0
 80067d2:	f04f 0000 	mov.w	r0, #0
 80067d6:	f380 8814 	msr	CONTROL, r0
 80067da:	b662      	cpsie	i
 80067dc:	b661      	cpsie	f
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	df00      	svc	0
 80067e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067ea:	bf00      	nop
 80067ec:	e000ed08 	.word	0xe000ed08

080067f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067f6:	4b47      	ldr	r3, [pc, #284]	@ (8006914 <xPortStartScheduler+0x124>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a47      	ldr	r2, [pc, #284]	@ (8006918 <xPortStartScheduler+0x128>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d10b      	bne.n	8006818 <xPortStartScheduler+0x28>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	60fb      	str	r3, [r7, #12]
}
 8006812:	bf00      	nop
 8006814:	bf00      	nop
 8006816:	e7fd      	b.n	8006814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006818:	4b3e      	ldr	r3, [pc, #248]	@ (8006914 <xPortStartScheduler+0x124>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a3f      	ldr	r2, [pc, #252]	@ (800691c <xPortStartScheduler+0x12c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d10b      	bne.n	800683a <xPortStartScheduler+0x4a>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	613b      	str	r3, [r7, #16]
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	e7fd      	b.n	8006836 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800683a:	4b39      	ldr	r3, [pc, #228]	@ (8006920 <xPortStartScheduler+0x130>)
 800683c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	22ff      	movs	r2, #255	@ 0xff
 800684a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	b2db      	uxtb	r3, r3
 8006858:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800685c:	b2da      	uxtb	r2, r3
 800685e:	4b31      	ldr	r3, [pc, #196]	@ (8006924 <xPortStartScheduler+0x134>)
 8006860:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006862:	4b31      	ldr	r3, [pc, #196]	@ (8006928 <xPortStartScheduler+0x138>)
 8006864:	2207      	movs	r2, #7
 8006866:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006868:	e009      	b.n	800687e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800686a:	4b2f      	ldr	r3, [pc, #188]	@ (8006928 <xPortStartScheduler+0x138>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3b01      	subs	r3, #1
 8006870:	4a2d      	ldr	r2, [pc, #180]	@ (8006928 <xPortStartScheduler+0x138>)
 8006872:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	b2db      	uxtb	r3, r3
 800687c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006886:	2b80      	cmp	r3, #128	@ 0x80
 8006888:	d0ef      	beq.n	800686a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800688a:	4b27      	ldr	r3, [pc, #156]	@ (8006928 <xPortStartScheduler+0x138>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1c3 0307 	rsb	r3, r3, #7
 8006892:	2b04      	cmp	r3, #4
 8006894:	d00b      	beq.n	80068ae <xPortStartScheduler+0xbe>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	60bb      	str	r3, [r7, #8]
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	e7fd      	b.n	80068aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006928 <xPortStartScheduler+0x138>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006928 <xPortStartScheduler+0x138>)
 80068b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006928 <xPortStartScheduler+0x138>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068c0:	4a19      	ldr	r2, [pc, #100]	@ (8006928 <xPortStartScheduler+0x138>)
 80068c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068cc:	4b17      	ldr	r3, [pc, #92]	@ (800692c <xPortStartScheduler+0x13c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a16      	ldr	r2, [pc, #88]	@ (800692c <xPortStartScheduler+0x13c>)
 80068d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80068d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068d8:	4b14      	ldr	r3, [pc, #80]	@ (800692c <xPortStartScheduler+0x13c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a13      	ldr	r2, [pc, #76]	@ (800692c <xPortStartScheduler+0x13c>)
 80068de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80068e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068e4:	f000 f8da 	bl	8006a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068e8:	4b11      	ldr	r3, [pc, #68]	@ (8006930 <xPortStartScheduler+0x140>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068ee:	f000 f8f9 	bl	8006ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068f2:	4b10      	ldr	r3, [pc, #64]	@ (8006934 <xPortStartScheduler+0x144>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a0f      	ldr	r2, [pc, #60]	@ (8006934 <xPortStartScheduler+0x144>)
 80068f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80068fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068fe:	f7ff ff63 	bl	80067c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006902:	f001 f9ef 	bl	8007ce4 <vTaskSwitchContext>
	prvTaskExitError();
 8006906:	f7ff ff1b 	bl	8006740 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	e000ed00 	.word	0xe000ed00
 8006918:	410fc271 	.word	0x410fc271
 800691c:	410fc270 	.word	0x410fc270
 8006920:	e000e400 	.word	0xe000e400
 8006924:	24004494 	.word	0x24004494
 8006928:	24004498 	.word	0x24004498
 800692c:	e000ed20 	.word	0xe000ed20
 8006930:	24000010 	.word	0x24000010
 8006934:	e000ef34 	.word	0xe000ef34

08006938 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
}
 8006950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006952:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <vPortEnterCritical+0x5c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3301      	adds	r3, #1
 8006958:	4a0e      	ldr	r2, [pc, #56]	@ (8006994 <vPortEnterCritical+0x5c>)
 800695a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800695c:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <vPortEnterCritical+0x5c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d110      	bne.n	8006986 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006964:	4b0c      	ldr	r3, [pc, #48]	@ (8006998 <vPortEnterCritical+0x60>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <vPortEnterCritical+0x4e>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	603b      	str	r3, [r7, #0]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <vPortEnterCritical+0x4a>
	}
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	24000010 	.word	0x24000010
 8006998:	e000ed04 	.word	0xe000ed04

0800699c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069a2:	4b12      	ldr	r3, [pc, #72]	@ (80069ec <vPortExitCritical+0x50>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <vPortExitCritical+0x26>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	607b      	str	r3, [r7, #4]
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069c2:	4b0a      	ldr	r3, [pc, #40]	@ (80069ec <vPortExitCritical+0x50>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	4a08      	ldr	r2, [pc, #32]	@ (80069ec <vPortExitCritical+0x50>)
 80069ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069cc:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <vPortExitCritical+0x50>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <vPortExitCritical+0x44>
 80069d4:	2300      	movs	r3, #0
 80069d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	24000010 	.word	0x24000010

080069f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069f0:	f3ef 8009 	mrs	r0, PSP
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	4b15      	ldr	r3, [pc, #84]	@ (8006a50 <pxCurrentTCBConst>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	f01e 0f10 	tst.w	lr, #16
 8006a00:	bf08      	it	eq
 8006a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	6010      	str	r0, [r2, #0]
 8006a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a14:	f380 8811 	msr	BASEPRI, r0
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f001 f960 	bl	8007ce4 <vTaskSwitchContext>
 8006a24:	f04f 0000 	mov.w	r0, #0
 8006a28:	f380 8811 	msr	BASEPRI, r0
 8006a2c:	bc09      	pop	{r0, r3}
 8006a2e:	6819      	ldr	r1, [r3, #0]
 8006a30:	6808      	ldr	r0, [r1, #0]
 8006a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a36:	f01e 0f10 	tst.w	lr, #16
 8006a3a:	bf08      	it	eq
 8006a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a40:	f380 8809 	msr	PSP, r0
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	f3af 8000 	nop.w

08006a50 <pxCurrentTCBConst>:
 8006a50:	240044dc 	.word	0x240044dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop

08006a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	607b      	str	r3, [r7, #4]
}
 8006a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a72:	f001 f87d 	bl	8007b70 <xTaskIncrementTick>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a7c:	4b06      	ldr	r3, [pc, #24]	@ (8006a98 <xPortSysTickHandler+0x40>)
 8006a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	2300      	movs	r3, #0
 8006a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f383 8811 	msr	BASEPRI, r3
}
 8006a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <vPortSetupTimerInterrupt+0x34>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad4 <vPortSetupTimerInterrupt+0x38>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006aac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <vPortSetupTimerInterrupt+0x3c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8006adc <vPortSetupTimerInterrupt+0x40>)
 8006ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab6:	099b      	lsrs	r3, r3, #6
 8006ab8:	4a09      	ldr	r2, [pc, #36]	@ (8006ae0 <vPortSetupTimerInterrupt+0x44>)
 8006aba:	3b01      	subs	r3, #1
 8006abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006abe:	4b04      	ldr	r3, [pc, #16]	@ (8006ad0 <vPortSetupTimerInterrupt+0x34>)
 8006ac0:	2207      	movs	r2, #7
 8006ac2:	601a      	str	r2, [r3, #0]
}
 8006ac4:	bf00      	nop
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	e000e010 	.word	0xe000e010
 8006ad4:	e000e018 	.word	0xe000e018
 8006ad8:	24000000 	.word	0x24000000
 8006adc:	10624dd3 	.word	0x10624dd3
 8006ae0:	e000e014 	.word	0xe000e014

08006ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006af4 <vPortEnableVFP+0x10>
 8006ae8:	6801      	ldr	r1, [r0, #0]
 8006aea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006aee:	6001      	str	r1, [r0, #0]
 8006af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006af2:	bf00      	nop
 8006af4:	e000ed88 	.word	0xe000ed88

08006af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006afe:	f3ef 8305 	mrs	r3, IPSR
 8006b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b0f      	cmp	r3, #15
 8006b08:	d915      	bls.n	8006b36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b0a:	4a18      	ldr	r2, [pc, #96]	@ (8006b6c <vPortValidateInterruptPriority+0x74>)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b14:	4b16      	ldr	r3, [pc, #88]	@ (8006b70 <vPortValidateInterruptPriority+0x78>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	7afa      	ldrb	r2, [r7, #11]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d20b      	bcs.n	8006b36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	607b      	str	r3, [r7, #4]
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	e7fd      	b.n	8006b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b36:	4b0f      	ldr	r3, [pc, #60]	@ (8006b74 <vPortValidateInterruptPriority+0x7c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b78 <vPortValidateInterruptPriority+0x80>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d90b      	bls.n	8006b5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	603b      	str	r3, [r7, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <vPortValidateInterruptPriority+0x62>
	}
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	e000e3f0 	.word	0xe000e3f0
 8006b70:	24004494 	.word	0x24004494
 8006b74:	e000ed0c 	.word	0xe000ed0c
 8006b78:	24004498 	.word	0x24004498

08006b7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10b      	bne.n	8006ba8 <xQueueGenericReset+0x2c>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	60bb      	str	r3, [r7, #8]
}
 8006ba2:	bf00      	nop
 8006ba4:	bf00      	nop
 8006ba6:	e7fd      	b.n	8006ba4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ba8:	f7ff fec6 	bl	8006938 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb4:	68f9      	ldr	r1, [r7, #12]
 8006bb6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006bb8:	fb01 f303 	mul.w	r3, r1, r3
 8006bbc:	441a      	add	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	68f9      	ldr	r1, [r7, #12]
 8006bdc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	441a      	add	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	22ff      	movs	r2, #255	@ 0xff
 8006bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	22ff      	movs	r2, #255	@ 0xff
 8006bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d114      	bne.n	8006c28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d01a      	beq.n	8006c3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3310      	adds	r3, #16
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 f91a 	bl	8007e44 <xTaskRemoveFromEventList>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d012      	beq.n	8006c3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c16:	4b0d      	ldr	r3, [pc, #52]	@ (8006c4c <xQueueGenericReset+0xd0>)
 8006c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	e009      	b.n	8006c3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3310      	adds	r3, #16
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff fc9f 	bl	8006570 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3324      	adds	r3, #36	@ 0x24
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff fc9a 	bl	8006570 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c3c:	f7ff feae 	bl	800699c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c40:	2301      	movs	r3, #1
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	e000ed04 	.word	0xe000ed04

08006c50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08e      	sub	sp, #56	@ 0x38
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10b      	bne.n	8006c7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c76:	bf00      	nop
 8006c78:	bf00      	nop
 8006c7a:	e7fd      	b.n	8006c78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10b      	bne.n	8006c9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	e7fd      	b.n	8006c96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <xQueueGenericCreateStatic+0x56>
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <xQueueGenericCreateStatic+0x5a>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <xQueueGenericCreateStatic+0x5c>
 8006caa:	2300      	movs	r3, #0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10b      	bne.n	8006cc8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	623b      	str	r3, [r7, #32]
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	e7fd      	b.n	8006cc4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <xQueueGenericCreateStatic+0x84>
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <xQueueGenericCreateStatic+0x88>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e000      	b.n	8006cda <xQueueGenericCreateStatic+0x8a>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10b      	bne.n	8006cf6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	61fb      	str	r3, [r7, #28]
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop
 8006cf4:	e7fd      	b.n	8006cf2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cf6:	2350      	movs	r3, #80	@ 0x50
 8006cf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b50      	cmp	r3, #80	@ 0x50
 8006cfe:	d00b      	beq.n	8006d18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	61bb      	str	r3, [r7, #24]
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	e7fd      	b.n	8006d14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00d      	beq.n	8006d40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	4613      	mov	r3, r2
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 f805 	bl	8006d4a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3730      	adds	r7, #48	@ 0x30
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]
 8006d56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d103      	bne.n	8006d66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	e002      	b.n	8006d6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d78:	2101      	movs	r1, #1
 8006d7a:	69b8      	ldr	r0, [r7, #24]
 8006d7c:	f7ff fefe 	bl	8006b7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	78fa      	ldrb	r2, [r7, #3]
 8006d84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d88:	bf00      	nop
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b08e      	sub	sp, #56	@ 0x38
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10b      	bne.n	8006dc4 <xQueueGenericSend+0x34>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006dbe:	bf00      	nop
 8006dc0:	bf00      	nop
 8006dc2:	e7fd      	b.n	8006dc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d103      	bne.n	8006dd2 <xQueueGenericSend+0x42>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <xQueueGenericSend+0x46>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <xQueueGenericSend+0x48>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10b      	bne.n	8006df4 <xQueueGenericSend+0x64>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
 8006df2:	e7fd      	b.n	8006df0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d103      	bne.n	8006e02 <xQueueGenericSend+0x72>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d101      	bne.n	8006e06 <xQueueGenericSend+0x76>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e000      	b.n	8006e08 <xQueueGenericSend+0x78>
 8006e06:	2300      	movs	r3, #0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10b      	bne.n	8006e24 <xQueueGenericSend+0x94>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	623b      	str	r3, [r7, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	bf00      	nop
 8006e22:	e7fd      	b.n	8006e20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e24:	f001 f9ce 	bl	80081c4 <xTaskGetSchedulerState>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <xQueueGenericSend+0xa4>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <xQueueGenericSend+0xa8>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <xQueueGenericSend+0xaa>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10b      	bne.n	8006e56 <xQueueGenericSend+0xc6>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	61fb      	str	r3, [r7, #28]
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	e7fd      	b.n	8006e52 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e56:	f7ff fd6f 	bl	8006938 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d302      	bcc.n	8006e6c <xQueueGenericSend+0xdc>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d129      	bne.n	8006ec0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e72:	f000 fa0f 	bl	8007294 <prvCopyDataToQueue>
 8006e76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d010      	beq.n	8006ea2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e82:	3324      	adds	r3, #36	@ 0x24
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 ffdd 	bl	8007e44 <xTaskRemoveFromEventList>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d013      	beq.n	8006eb8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e90:	4b3f      	ldr	r3, [pc, #252]	@ (8006f90 <xQueueGenericSend+0x200>)
 8006e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	e00a      	b.n	8006eb8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d007      	beq.n	8006eb8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ea8:	4b39      	ldr	r3, [pc, #228]	@ (8006f90 <xQueueGenericSend+0x200>)
 8006eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006eb8:	f7ff fd70 	bl	800699c <vPortExitCritical>
				return pdPASS;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e063      	b.n	8006f88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ec6:	f7ff fd69 	bl	800699c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e05c      	b.n	8006f88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ed4:	f107 0314 	add.w	r3, r7, #20
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 f817 	bl	8007f0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ee2:	f7ff fd5b 	bl	800699c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ee6:	f000 fd87 	bl	80079f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eea:	f7ff fd25 	bl	8006938 <vPortEnterCritical>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ef4:	b25b      	sxtb	r3, r3
 8006ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006efa:	d103      	bne.n	8006f04 <xQueueGenericSend+0x174>
 8006efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f0a:	b25b      	sxtb	r3, r3
 8006f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f10:	d103      	bne.n	8006f1a <xQueueGenericSend+0x18a>
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f1a:	f7ff fd3f 	bl	800699c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f1e:	1d3a      	adds	r2, r7, #4
 8006f20:	f107 0314 	add.w	r3, r7, #20
 8006f24:	4611      	mov	r1, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f001 f806 	bl	8007f38 <xTaskCheckForTimeOut>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d124      	bne.n	8006f7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f34:	f000 faa6 	bl	8007484 <prvIsQueueFull>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d018      	beq.n	8006f70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	3310      	adds	r3, #16
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4611      	mov	r1, r2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 ff2a 	bl	8007da0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f4e:	f000 fa31 	bl	80073b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f52:	f000 fd5f 	bl	8007a14 <xTaskResumeAll>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f47f af7c 	bne.w	8006e56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f90 <xQueueGenericSend+0x200>)
 8006f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	e772      	b.n	8006e56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f72:	f000 fa1f 	bl	80073b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f76:	f000 fd4d 	bl	8007a14 <xTaskResumeAll>
 8006f7a:	e76c      	b.n	8006e56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f7e:	f000 fa19 	bl	80073b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f82:	f000 fd47 	bl	8007a14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3738      	adds	r7, #56	@ 0x38
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	e000ed04 	.word	0xe000ed04

08006f94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b090      	sub	sp, #64	@ 0x40
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	e7fd      	b.n	8006fc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d103      	bne.n	8006fd2 <xQueueGenericSendFromISR+0x3e>
 8006fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <xQueueGenericSendFromISR+0x42>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <xQueueGenericSendFromISR+0x44>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d103      	bne.n	8007002 <xQueueGenericSendFromISR+0x6e>
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <xQueueGenericSendFromISR+0x72>
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <xQueueGenericSendFromISR+0x74>
 8007006:	2300      	movs	r3, #0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10b      	bne.n	8007024 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	623b      	str	r3, [r7, #32]
}
 800701e:	bf00      	nop
 8007020:	bf00      	nop
 8007022:	e7fd      	b.n	8007020 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007024:	f7ff fd68 	bl	8006af8 <vPortValidateInterruptPriority>
	__asm volatile
 8007028:	f3ef 8211 	mrs	r2, BASEPRI
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	61fa      	str	r2, [r7, #28]
 800703e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007040:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704c:	429a      	cmp	r2, r3
 800704e:	d302      	bcc.n	8007056 <xQueueGenericSendFromISR+0xc2>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2b02      	cmp	r3, #2
 8007054:	d12f      	bne.n	80070b6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007058:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800705c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007064:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	68b9      	ldr	r1, [r7, #8]
 800706a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800706c:	f000 f912 	bl	8007294 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007070:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007078:	d112      	bne.n	80070a0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800707a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	d016      	beq.n	80070b0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007084:	3324      	adds	r3, #36	@ 0x24
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fedc 	bl	8007e44 <xTaskRemoveFromEventList>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00e      	beq.n	80070b0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	e007      	b.n	80070b0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80070a4:	3301      	adds	r3, #1
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	b25a      	sxtb	r2, r3
 80070aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80070b0:	2301      	movs	r3, #1
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80070b4:	e001      	b.n	80070ba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070bc:	617b      	str	r3, [r7, #20]
	__asm volatile
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f383 8811 	msr	BASEPRI, r3
}
 80070c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3740      	adds	r7, #64	@ 0x40
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08c      	sub	sp, #48	@ 0x30
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070dc:	2300      	movs	r3, #0
 80070de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10b      	bne.n	8007102 <xQueueReceive+0x32>
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	623b      	str	r3, [r7, #32]
}
 80070fc:	bf00      	nop
 80070fe:	bf00      	nop
 8007100:	e7fd      	b.n	80070fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d103      	bne.n	8007110 <xQueueReceive+0x40>
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <xQueueReceive+0x44>
 8007110:	2301      	movs	r3, #1
 8007112:	e000      	b.n	8007116 <xQueueReceive+0x46>
 8007114:	2300      	movs	r3, #0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10b      	bne.n	8007132 <xQueueReceive+0x62>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	61fb      	str	r3, [r7, #28]
}
 800712c:	bf00      	nop
 800712e:	bf00      	nop
 8007130:	e7fd      	b.n	800712e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007132:	f001 f847 	bl	80081c4 <xTaskGetSchedulerState>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <xQueueReceive+0x72>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <xQueueReceive+0x76>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <xQueueReceive+0x78>
 8007146:	2300      	movs	r3, #0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10b      	bne.n	8007164 <xQueueReceive+0x94>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	61bb      	str	r3, [r7, #24]
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	e7fd      	b.n	8007160 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007164:	f7ff fbe8 	bl	8006938 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800716e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01f      	beq.n	80071b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007174:	68b9      	ldr	r1, [r7, #8]
 8007176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007178:	f000 f8f6 	bl	8007368 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800717c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717e:	1e5a      	subs	r2, r3, #1
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00f      	beq.n	80071ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800718c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718e:	3310      	adds	r3, #16
 8007190:	4618      	mov	r0, r3
 8007192:	f000 fe57 	bl	8007e44 <xTaskRemoveFromEventList>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800719c:	4b3c      	ldr	r3, [pc, #240]	@ (8007290 <xQueueReceive+0x1c0>)
 800719e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071ac:	f7ff fbf6 	bl	800699c <vPortExitCritical>
				return pdPASS;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e069      	b.n	8007288 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071ba:	f7ff fbef 	bl	800699c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071be:	2300      	movs	r3, #0
 80071c0:	e062      	b.n	8007288 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d106      	bne.n	80071d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071c8:	f107 0310 	add.w	r3, r7, #16
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fe9d 	bl	8007f0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071d2:	2301      	movs	r3, #1
 80071d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071d6:	f7ff fbe1 	bl	800699c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071da:	f000 fc0d 	bl	80079f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071de:	f7ff fbab 	bl	8006938 <vPortEnterCritical>
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071e8:	b25b      	sxtb	r3, r3
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071ee:	d103      	bne.n	80071f8 <xQueueReceive+0x128>
 80071f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071fe:	b25b      	sxtb	r3, r3
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007204:	d103      	bne.n	800720e <xQueueReceive+0x13e>
 8007206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800720e:	f7ff fbc5 	bl	800699c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007212:	1d3a      	adds	r2, r7, #4
 8007214:	f107 0310 	add.w	r3, r7, #16
 8007218:	4611      	mov	r1, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f000 fe8c 	bl	8007f38 <xTaskCheckForTimeOut>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d123      	bne.n	800726e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007228:	f000 f916 	bl	8007458 <prvIsQueueEmpty>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d017      	beq.n	8007262 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007234:	3324      	adds	r3, #36	@ 0x24
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	4611      	mov	r1, r2
 800723a:	4618      	mov	r0, r3
 800723c:	f000 fdb0 	bl	8007da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007240:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007242:	f000 f8b7 	bl	80073b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007246:	f000 fbe5 	bl	8007a14 <xTaskResumeAll>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d189      	bne.n	8007164 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007250:	4b0f      	ldr	r3, [pc, #60]	@ (8007290 <xQueueReceive+0x1c0>)
 8007252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	e780      	b.n	8007164 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007264:	f000 f8a6 	bl	80073b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007268:	f000 fbd4 	bl	8007a14 <xTaskResumeAll>
 800726c:	e77a      	b.n	8007164 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800726e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007270:	f000 f8a0 	bl	80073b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007274:	f000 fbce 	bl	8007a14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007278:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800727a:	f000 f8ed 	bl	8007458 <prvIsQueueEmpty>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	f43f af6f 	beq.w	8007164 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007286:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007288:	4618      	mov	r0, r3
 800728a:	3730      	adds	r7, #48	@ 0x30
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072a0:	2300      	movs	r3, #0
 80072a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10d      	bne.n	80072ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d14d      	bne.n	8007356 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 ff9e 	bl	8008200 <xTaskPriorityDisinherit>
 80072c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	609a      	str	r2, [r3, #8]
 80072cc:	e043      	b.n	8007356 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d119      	bne.n	8007308 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6858      	ldr	r0, [r3, #4]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072dc:	461a      	mov	r2, r3
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	f001 fbd8 	bl	8008a94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ec:	441a      	add	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d32b      	bcc.n	8007356 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	605a      	str	r2, [r3, #4]
 8007306:	e026      	b.n	8007356 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	68d8      	ldr	r0, [r3, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007310:	461a      	mov	r2, r3
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	f001 fbbe 	bl	8008a94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007320:	425b      	negs	r3, r3
 8007322:	441a      	add	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	429a      	cmp	r2, r3
 8007332:	d207      	bcs.n	8007344 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733c:	425b      	negs	r3, r3
 800733e:	441a      	add	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b02      	cmp	r3, #2
 8007348:	d105      	bne.n	8007356 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	3b01      	subs	r3, #1
 8007354:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800735e:	697b      	ldr	r3, [r7, #20]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d018      	beq.n	80073ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007382:	441a      	add	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	429a      	cmp	r2, r3
 8007392:	d303      	bcc.n	800739c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68d9      	ldr	r1, [r3, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a4:	461a      	mov	r2, r3
 80073a6:	6838      	ldr	r0, [r7, #0]
 80073a8:	f001 fb74 	bl	8008a94 <memcpy>
	}
}
 80073ac:	bf00      	nop
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073bc:	f7ff fabc 	bl	8006938 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073c8:	e011      	b.n	80073ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d012      	beq.n	80073f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3324      	adds	r3, #36	@ 0x24
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fd34 	bl	8007e44 <xTaskRemoveFromEventList>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073e2:	f000 fe0d 	bl	8008000 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dce9      	bgt.n	80073ca <prvUnlockQueue+0x16>
 80073f6:	e000      	b.n	80073fa <prvUnlockQueue+0x46>
					break;
 80073f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	22ff      	movs	r2, #255	@ 0xff
 80073fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007402:	f7ff facb 	bl	800699c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007406:	f7ff fa97 	bl	8006938 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007410:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007412:	e011      	b.n	8007438 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d012      	beq.n	8007442 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3310      	adds	r3, #16
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fd0f 	bl	8007e44 <xTaskRemoveFromEventList>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800742c:	f000 fde8 	bl	8008000 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	3b01      	subs	r3, #1
 8007434:	b2db      	uxtb	r3, r3
 8007436:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800743c:	2b00      	cmp	r3, #0
 800743e:	dce9      	bgt.n	8007414 <prvUnlockQueue+0x60>
 8007440:	e000      	b.n	8007444 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007442:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	22ff      	movs	r2, #255	@ 0xff
 8007448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800744c:	f7ff faa6 	bl	800699c <vPortExitCritical>
}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007460:	f7ff fa6a 	bl	8006938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800746c:	2301      	movs	r3, #1
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	e001      	b.n	8007476 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007476:	f7ff fa91 	bl	800699c <vPortExitCritical>

	return xReturn;
 800747a:	68fb      	ldr	r3, [r7, #12]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800748c:	f7ff fa54 	bl	8006938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007498:	429a      	cmp	r2, r3
 800749a:	d102      	bne.n	80074a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800749c:	2301      	movs	r3, #1
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e001      	b.n	80074a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074a6:	f7ff fa79 	bl	800699c <vPortExitCritical>

	return xReturn;
 80074aa:	68fb      	ldr	r3, [r7, #12]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e014      	b.n	80074ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80074c4:	4a0f      	ldr	r2, [pc, #60]	@ (8007504 <vQueueAddToRegistry+0x50>)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10b      	bne.n	80074e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80074d0:	490c      	ldr	r1, [pc, #48]	@ (8007504 <vQueueAddToRegistry+0x50>)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074da:	4a0a      	ldr	r2, [pc, #40]	@ (8007504 <vQueueAddToRegistry+0x50>)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	4413      	add	r3, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074e6:	e006      	b.n	80074f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b07      	cmp	r3, #7
 80074f2:	d9e7      	bls.n	80074c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	2400449c 	.word	0x2400449c

08007508 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007518:	f7ff fa0e 	bl	8006938 <vPortEnterCritical>
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007522:	b25b      	sxtb	r3, r3
 8007524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007528:	d103      	bne.n	8007532 <vQueueWaitForMessageRestricted+0x2a>
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007538:	b25b      	sxtb	r3, r3
 800753a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800753e:	d103      	bne.n	8007548 <vQueueWaitForMessageRestricted+0x40>
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007548:	f7ff fa28 	bl	800699c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	3324      	adds	r3, #36	@ 0x24
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fc45 	bl	8007dec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007562:	6978      	ldr	r0, [r7, #20]
 8007564:	f7ff ff26 	bl	80073b4 <prvUnlockQueue>
	}
 8007568:	bf00      	nop
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08e      	sub	sp, #56	@ 0x38
 8007574:	af04      	add	r7, sp, #16
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800757e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10b      	bne.n	800759c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	623b      	str	r3, [r7, #32]
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	e7fd      	b.n	8007598 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800759c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	61fb      	str	r3, [r7, #28]
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop
 80075b8:	e7fd      	b.n	80075b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075ba:	235c      	movs	r3, #92	@ 0x5c
 80075bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80075c2:	d00b      	beq.n	80075dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	61bb      	str	r3, [r7, #24]
}
 80075d6:	bf00      	nop
 80075d8:	bf00      	nop
 80075da:	e7fd      	b.n	80075d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01e      	beq.n	8007622 <xTaskCreateStatic+0xb2>
 80075e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d01b      	beq.n	8007622 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075fc:	2300      	movs	r3, #0
 80075fe:	9303      	str	r3, [sp, #12]
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	9302      	str	r3, [sp, #8]
 8007604:	f107 0314 	add.w	r3, r7, #20
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f850 	bl	80076ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800761a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800761c:	f000 f8de 	bl	80077dc <prvAddNewTaskToReadyList>
 8007620:	e001      	b.n	8007626 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007622:	2300      	movs	r3, #0
 8007624:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007626:	697b      	ldr	r3, [r7, #20]
	}
 8007628:	4618      	mov	r0, r3
 800762a:	3728      	adds	r7, #40	@ 0x28
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08c      	sub	sp, #48	@ 0x30
 8007634:	af04      	add	r7, sp, #16
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	603b      	str	r3, [r7, #0]
 800763c:	4613      	mov	r3, r2
 800763e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe fda5 	bl	8006194 <pvPortMalloc>
 800764a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00e      	beq.n	8007670 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007652:	205c      	movs	r0, #92	@ 0x5c
 8007654:	f7fe fd9e 	bl	8006194 <pvPortMalloc>
 8007658:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	631a      	str	r2, [r3, #48]	@ 0x30
 8007666:	e005      	b.n	8007674 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007668:	6978      	ldr	r0, [r7, #20]
 800766a:	f7fe fe61 	bl	8006330 <vPortFree>
 800766e:	e001      	b.n	8007674 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007670:	2300      	movs	r3, #0
 8007672:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d017      	beq.n	80076aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007682:	88fa      	ldrh	r2, [r7, #6]
 8007684:	2300      	movs	r3, #0
 8007686:	9303      	str	r3, [sp, #12]
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	9302      	str	r3, [sp, #8]
 800768c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	68b9      	ldr	r1, [r7, #8]
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 f80e 	bl	80076ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800769e:	69f8      	ldr	r0, [r7, #28]
 80076a0:	f000 f89c 	bl	80077dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076a4:	2301      	movs	r3, #1
 80076a6:	61bb      	str	r3, [r7, #24]
 80076a8:	e002      	b.n	80076b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076b0:	69bb      	ldr	r3, [r7, #24]
	}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3720      	adds	r7, #32
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b088      	sub	sp, #32
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	461a      	mov	r2, r3
 80076d2:	21a5      	movs	r1, #165	@ 0xa5
 80076d4:	f001 f9b2 	bl	8008a3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80076e2:	440b      	add	r3, r1
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	f023 0307 	bic.w	r3, r3, #7
 80076f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	f003 0307 	and.w	r3, r3, #7
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00b      	beq.n	8007714 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	617b      	str	r3, [r7, #20]
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	e7fd      	b.n	8007710 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d01f      	beq.n	800775a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800771a:	2300      	movs	r3, #0
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	e012      	b.n	8007746 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	4413      	add	r3, r2
 8007726:	7819      	ldrb	r1, [r3, #0]
 8007728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	4413      	add	r3, r2
 800772e:	3334      	adds	r3, #52	@ 0x34
 8007730:	460a      	mov	r2, r1
 8007732:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	4413      	add	r3, r2
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d006      	beq.n	800774e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	3301      	adds	r3, #1
 8007744:	61fb      	str	r3, [r7, #28]
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	2b0f      	cmp	r3, #15
 800774a:	d9e9      	bls.n	8007720 <prvInitialiseNewTask+0x66>
 800774c:	e000      	b.n	8007750 <prvInitialiseNewTask+0x96>
			{
				break;
 800774e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007758:	e003      	b.n	8007762 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	2b37      	cmp	r3, #55	@ 0x37
 8007766:	d901      	bls.n	800776c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007768:	2337      	movs	r3, #55	@ 0x37
 800776a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800776c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007770:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007776:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777a:	2200      	movs	r2, #0
 800777c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	3304      	adds	r3, #4
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe ff14 	bl	80065b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	3318      	adds	r3, #24
 800778c:	4618      	mov	r0, r3
 800778e:	f7fe ff0f 	bl	80065b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007796:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800779e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	2200      	movs	r2, #0
 80077ac:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	68f9      	ldr	r1, [r7, #12]
 80077ba:	69b8      	ldr	r0, [r7, #24]
 80077bc:	f7fe ff8c 	bl	80066d8 <pxPortInitialiseStack>
 80077c0:	4602      	mov	r2, r0
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077d2:	bf00      	nop
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077e4:	f7ff f8a8 	bl	8006938 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077e8:	4b2d      	ldr	r3, [pc, #180]	@ (80078a0 <prvAddNewTaskToReadyList+0xc4>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3301      	adds	r3, #1
 80077ee:	4a2c      	ldr	r2, [pc, #176]	@ (80078a0 <prvAddNewTaskToReadyList+0xc4>)
 80077f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077f2:	4b2c      	ldr	r3, [pc, #176]	@ (80078a4 <prvAddNewTaskToReadyList+0xc8>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077fa:	4a2a      	ldr	r2, [pc, #168]	@ (80078a4 <prvAddNewTaskToReadyList+0xc8>)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007800:	4b27      	ldr	r3, [pc, #156]	@ (80078a0 <prvAddNewTaskToReadyList+0xc4>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d110      	bne.n	800782a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007808:	f000 fc1e 	bl	8008048 <prvInitialiseTaskLists>
 800780c:	e00d      	b.n	800782a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800780e:	4b26      	ldr	r3, [pc, #152]	@ (80078a8 <prvAddNewTaskToReadyList+0xcc>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d109      	bne.n	800782a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007816:	4b23      	ldr	r3, [pc, #140]	@ (80078a4 <prvAddNewTaskToReadyList+0xc8>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007820:	429a      	cmp	r2, r3
 8007822:	d802      	bhi.n	800782a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007824:	4a1f      	ldr	r2, [pc, #124]	@ (80078a4 <prvAddNewTaskToReadyList+0xc8>)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800782a:	4b20      	ldr	r3, [pc, #128]	@ (80078ac <prvAddNewTaskToReadyList+0xd0>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3301      	adds	r3, #1
 8007830:	4a1e      	ldr	r2, [pc, #120]	@ (80078ac <prvAddNewTaskToReadyList+0xd0>)
 8007832:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007834:	4b1d      	ldr	r3, [pc, #116]	@ (80078ac <prvAddNewTaskToReadyList+0xd0>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007840:	4b1b      	ldr	r3, [pc, #108]	@ (80078b0 <prvAddNewTaskToReadyList+0xd4>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d903      	bls.n	8007850 <prvAddNewTaskToReadyList+0x74>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784c:	4a18      	ldr	r2, [pc, #96]	@ (80078b0 <prvAddNewTaskToReadyList+0xd4>)
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007854:	4613      	mov	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4a15      	ldr	r2, [pc, #84]	@ (80078b4 <prvAddNewTaskToReadyList+0xd8>)
 800785e:	441a      	add	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	3304      	adds	r3, #4
 8007864:	4619      	mov	r1, r3
 8007866:	4610      	mov	r0, r2
 8007868:	f7fe feaf 	bl	80065ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800786c:	f7ff f896 	bl	800699c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007870:	4b0d      	ldr	r3, [pc, #52]	@ (80078a8 <prvAddNewTaskToReadyList+0xcc>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00e      	beq.n	8007896 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007878:	4b0a      	ldr	r3, [pc, #40]	@ (80078a4 <prvAddNewTaskToReadyList+0xc8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007882:	429a      	cmp	r2, r3
 8007884:	d207      	bcs.n	8007896 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007886:	4b0c      	ldr	r3, [pc, #48]	@ (80078b8 <prvAddNewTaskToReadyList+0xdc>)
 8007888:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007896:	bf00      	nop
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	240049b0 	.word	0x240049b0
 80078a4:	240044dc 	.word	0x240044dc
 80078a8:	240049bc 	.word	0x240049bc
 80078ac:	240049cc 	.word	0x240049cc
 80078b0:	240049b8 	.word	0x240049b8
 80078b4:	240044e0 	.word	0x240044e0
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80078c4:	2300      	movs	r3, #0
 80078c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d018      	beq.n	8007900 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078ce:	4b14      	ldr	r3, [pc, #80]	@ (8007920 <vTaskDelay+0x64>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00b      	beq.n	80078ee <vTaskDelay+0x32>
	__asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	60bb      	str	r3, [r7, #8]
}
 80078e8:	bf00      	nop
 80078ea:	bf00      	nop
 80078ec:	e7fd      	b.n	80078ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078ee:	f000 f883 	bl	80079f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078f2:	2100      	movs	r1, #0
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fcf3 	bl	80082e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078fa:	f000 f88b 	bl	8007a14 <xTaskResumeAll>
 80078fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d107      	bne.n	8007916 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007906:	4b07      	ldr	r3, [pc, #28]	@ (8007924 <vTaskDelay+0x68>)
 8007908:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007916:	bf00      	nop
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	240049d8 	.word	0x240049d8
 8007924:	e000ed04 	.word	0xe000ed04

08007928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08a      	sub	sp, #40	@ 0x28
 800792c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007932:	2300      	movs	r3, #0
 8007934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007936:	463a      	mov	r2, r7
 8007938:	1d39      	adds	r1, r7, #4
 800793a:	f107 0308 	add.w	r3, r7, #8
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe fbf4 	bl	800612c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	9202      	str	r2, [sp, #8]
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	2300      	movs	r3, #0
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	2300      	movs	r3, #0
 8007954:	460a      	mov	r2, r1
 8007956:	4922      	ldr	r1, [pc, #136]	@ (80079e0 <vTaskStartScheduler+0xb8>)
 8007958:	4822      	ldr	r0, [pc, #136]	@ (80079e4 <vTaskStartScheduler+0xbc>)
 800795a:	f7ff fe09 	bl	8007570 <xTaskCreateStatic>
 800795e:	4603      	mov	r3, r0
 8007960:	4a21      	ldr	r2, [pc, #132]	@ (80079e8 <vTaskStartScheduler+0xc0>)
 8007962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007964:	4b20      	ldr	r3, [pc, #128]	@ (80079e8 <vTaskStartScheduler+0xc0>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800796c:	2301      	movs	r3, #1
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	e001      	b.n	8007976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d102      	bne.n	8007982 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800797c:	f000 fd04 	bl	8008388 <xTimerCreateTimerTask>
 8007980:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d116      	bne.n	80079b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	613b      	str	r3, [r7, #16]
}
 800799a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800799c:	4b13      	ldr	r3, [pc, #76]	@ (80079ec <vTaskStartScheduler+0xc4>)
 800799e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80079a4:	4b12      	ldr	r3, [pc, #72]	@ (80079f0 <vTaskStartScheduler+0xc8>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80079aa:	4b12      	ldr	r3, [pc, #72]	@ (80079f4 <vTaskStartScheduler+0xcc>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80079b0:	f7fe ff1e 	bl	80067f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80079b4:	e00f      	b.n	80079d6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079bc:	d10b      	bne.n	80079d6 <vTaskStartScheduler+0xae>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	60fb      	str	r3, [r7, #12]
}
 80079d0:	bf00      	nop
 80079d2:	bf00      	nop
 80079d4:	e7fd      	b.n	80079d2 <vTaskStartScheduler+0xaa>
}
 80079d6:	bf00      	nop
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	08008b00 	.word	0x08008b00
 80079e4:	08008019 	.word	0x08008019
 80079e8:	240049d4 	.word	0x240049d4
 80079ec:	240049d0 	.word	0x240049d0
 80079f0:	240049bc 	.word	0x240049bc
 80079f4:	240049b4 	.word	0x240049b4

080079f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079fc:	4b04      	ldr	r3, [pc, #16]	@ (8007a10 <vTaskSuspendAll+0x18>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3301      	adds	r3, #1
 8007a02:	4a03      	ldr	r2, [pc, #12]	@ (8007a10 <vTaskSuspendAll+0x18>)
 8007a04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a06:	bf00      	nop
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	240049d8 	.word	0x240049d8

08007a14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a22:	4b42      	ldr	r3, [pc, #264]	@ (8007b2c <xTaskResumeAll+0x118>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10b      	bne.n	8007a42 <xTaskResumeAll+0x2e>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	603b      	str	r3, [r7, #0]
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	e7fd      	b.n	8007a3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a42:	f7fe ff79 	bl	8006938 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a46:	4b39      	ldr	r3, [pc, #228]	@ (8007b2c <xTaskResumeAll+0x118>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	4a37      	ldr	r2, [pc, #220]	@ (8007b2c <xTaskResumeAll+0x118>)
 8007a4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a50:	4b36      	ldr	r3, [pc, #216]	@ (8007b2c <xTaskResumeAll+0x118>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d162      	bne.n	8007b1e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a58:	4b35      	ldr	r3, [pc, #212]	@ (8007b30 <xTaskResumeAll+0x11c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d05e      	beq.n	8007b1e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a60:	e02f      	b.n	8007ac2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a62:	4b34      	ldr	r3, [pc, #208]	@ (8007b34 <xTaskResumeAll+0x120>)
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3318      	adds	r3, #24
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe fe08 	bl	8006684 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fe fe03 	bl	8006684 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a82:	4b2d      	ldr	r3, [pc, #180]	@ (8007b38 <xTaskResumeAll+0x124>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d903      	bls.n	8007a92 <xTaskResumeAll+0x7e>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8e:	4a2a      	ldr	r2, [pc, #168]	@ (8007b38 <xTaskResumeAll+0x124>)
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4a27      	ldr	r2, [pc, #156]	@ (8007b3c <xTaskResumeAll+0x128>)
 8007aa0:	441a      	add	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f7fe fd8e 	bl	80065ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ab2:	4b23      	ldr	r3, [pc, #140]	@ (8007b40 <xTaskResumeAll+0x12c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d302      	bcc.n	8007ac2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007abc:	4b21      	ldr	r3, [pc, #132]	@ (8007b44 <xTaskResumeAll+0x130>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8007b34 <xTaskResumeAll+0x120>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1cb      	bne.n	8007a62 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ad0:	f000 fb58 	bl	8008184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8007b48 <xTaskResumeAll+0x134>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d010      	beq.n	8007b02 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ae0:	f000 f846 	bl	8007b70 <xTaskIncrementTick>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007aea:	4b16      	ldr	r3, [pc, #88]	@ (8007b44 <xTaskResumeAll+0x130>)
 8007aec:	2201      	movs	r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1f1      	bne.n	8007ae0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007afc:	4b12      	ldr	r3, [pc, #72]	@ (8007b48 <xTaskResumeAll+0x134>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b02:	4b10      	ldr	r3, [pc, #64]	@ (8007b44 <xTaskResumeAll+0x130>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d009      	beq.n	8007b1e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8007b4c <xTaskResumeAll+0x138>)
 8007b10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b1e:	f7fe ff3d 	bl	800699c <vPortExitCritical>

	return xAlreadyYielded;
 8007b22:	68bb      	ldr	r3, [r7, #8]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	240049d8 	.word	0x240049d8
 8007b30:	240049b0 	.word	0x240049b0
 8007b34:	24004970 	.word	0x24004970
 8007b38:	240049b8 	.word	0x240049b8
 8007b3c:	240044e0 	.word	0x240044e0
 8007b40:	240044dc 	.word	0x240044dc
 8007b44:	240049c4 	.word	0x240049c4
 8007b48:	240049c0 	.word	0x240049c0
 8007b4c:	e000ed04 	.word	0xe000ed04

08007b50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b56:	4b05      	ldr	r3, [pc, #20]	@ (8007b6c <xTaskGetTickCount+0x1c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b5c:	687b      	ldr	r3, [r7, #4]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	240049b4 	.word	0x240049b4

08007b70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b7a:	4b4f      	ldr	r3, [pc, #316]	@ (8007cb8 <xTaskIncrementTick+0x148>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f040 8090 	bne.w	8007ca4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b84:	4b4d      	ldr	r3, [pc, #308]	@ (8007cbc <xTaskIncrementTick+0x14c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b8c:	4a4b      	ldr	r2, [pc, #300]	@ (8007cbc <xTaskIncrementTick+0x14c>)
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d121      	bne.n	8007bdc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b98:	4b49      	ldr	r3, [pc, #292]	@ (8007cc0 <xTaskIncrementTick+0x150>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00b      	beq.n	8007bba <xTaskIncrementTick+0x4a>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	603b      	str	r3, [r7, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop
 8007bb8:	e7fd      	b.n	8007bb6 <xTaskIncrementTick+0x46>
 8007bba:	4b41      	ldr	r3, [pc, #260]	@ (8007cc0 <xTaskIncrementTick+0x150>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	4b40      	ldr	r3, [pc, #256]	@ (8007cc4 <xTaskIncrementTick+0x154>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8007cc0 <xTaskIncrementTick+0x150>)
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	4a3e      	ldr	r2, [pc, #248]	@ (8007cc4 <xTaskIncrementTick+0x154>)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	4b3e      	ldr	r3, [pc, #248]	@ (8007cc8 <xTaskIncrementTick+0x158>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	4a3c      	ldr	r2, [pc, #240]	@ (8007cc8 <xTaskIncrementTick+0x158>)
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	f000 fad4 	bl	8008184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8007ccc <xTaskIncrementTick+0x15c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d349      	bcc.n	8007c7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007be6:	4b36      	ldr	r3, [pc, #216]	@ (8007cc0 <xTaskIncrementTick+0x150>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d104      	bne.n	8007bfa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bf0:	4b36      	ldr	r3, [pc, #216]	@ (8007ccc <xTaskIncrementTick+0x15c>)
 8007bf2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bf6:	601a      	str	r2, [r3, #0]
					break;
 8007bf8:	e03f      	b.n	8007c7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bfa:	4b31      	ldr	r3, [pc, #196]	@ (8007cc0 <xTaskIncrementTick+0x150>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d203      	bcs.n	8007c1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c12:	4a2e      	ldr	r2, [pc, #184]	@ (8007ccc <xTaskIncrementTick+0x15c>)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c18:	e02f      	b.n	8007c7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fd30 	bl	8006684 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d004      	beq.n	8007c36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	3318      	adds	r3, #24
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fe fd27 	bl	8006684 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c3a:	4b25      	ldr	r3, [pc, #148]	@ (8007cd0 <xTaskIncrementTick+0x160>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d903      	bls.n	8007c4a <xTaskIncrementTick+0xda>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c46:	4a22      	ldr	r2, [pc, #136]	@ (8007cd0 <xTaskIncrementTick+0x160>)
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4a1f      	ldr	r2, [pc, #124]	@ (8007cd4 <xTaskIncrementTick+0x164>)
 8007c58:	441a      	add	r2, r3
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4610      	mov	r0, r2
 8007c62:	f7fe fcb2 	bl	80065ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007cd8 <xTaskIncrementTick+0x168>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d3b8      	bcc.n	8007be6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007c74:	2301      	movs	r3, #1
 8007c76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c78:	e7b5      	b.n	8007be6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c7a:	4b17      	ldr	r3, [pc, #92]	@ (8007cd8 <xTaskIncrementTick+0x168>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c80:	4914      	ldr	r1, [pc, #80]	@ (8007cd4 <xTaskIncrementTick+0x164>)
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d901      	bls.n	8007c96 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007c92:	2301      	movs	r3, #1
 8007c94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c96:	4b11      	ldr	r3, [pc, #68]	@ (8007cdc <xTaskIncrementTick+0x16c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d007      	beq.n	8007cae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	e004      	b.n	8007cae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ce0 <xTaskIncrementTick+0x170>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	4a0d      	ldr	r2, [pc, #52]	@ (8007ce0 <xTaskIncrementTick+0x170>)
 8007cac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007cae:	697b      	ldr	r3, [r7, #20]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	240049d8 	.word	0x240049d8
 8007cbc:	240049b4 	.word	0x240049b4
 8007cc0:	24004968 	.word	0x24004968
 8007cc4:	2400496c 	.word	0x2400496c
 8007cc8:	240049c8 	.word	0x240049c8
 8007ccc:	240049d0 	.word	0x240049d0
 8007cd0:	240049b8 	.word	0x240049b8
 8007cd4:	240044e0 	.word	0x240044e0
 8007cd8:	240044dc 	.word	0x240044dc
 8007cdc:	240049c4 	.word	0x240049c4
 8007ce0:	240049c0 	.word	0x240049c0

08007ce4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cea:	4b28      	ldr	r3, [pc, #160]	@ (8007d8c <vTaskSwitchContext+0xa8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cf2:	4b27      	ldr	r3, [pc, #156]	@ (8007d90 <vTaskSwitchContext+0xac>)
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cf8:	e042      	b.n	8007d80 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007cfa:	4b25      	ldr	r3, [pc, #148]	@ (8007d90 <vTaskSwitchContext+0xac>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d00:	4b24      	ldr	r3, [pc, #144]	@ (8007d94 <vTaskSwitchContext+0xb0>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	e011      	b.n	8007d2c <vTaskSwitchContext+0x48>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10b      	bne.n	8007d26 <vTaskSwitchContext+0x42>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	607b      	str	r3, [r7, #4]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <vTaskSwitchContext+0x3e>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	491a      	ldr	r1, [pc, #104]	@ (8007d98 <vTaskSwitchContext+0xb4>)
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	440b      	add	r3, r1
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0e3      	beq.n	8007d08 <vTaskSwitchContext+0x24>
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4613      	mov	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4a13      	ldr	r2, [pc, #76]	@ (8007d98 <vTaskSwitchContext+0xb4>)
 8007d4c:	4413      	add	r3, r2
 8007d4e:	60bb      	str	r3, [r7, #8]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	605a      	str	r2, [r3, #4]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	3308      	adds	r3, #8
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d104      	bne.n	8007d70 <vTaskSwitchContext+0x8c>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	605a      	str	r2, [r3, #4]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	4a09      	ldr	r2, [pc, #36]	@ (8007d9c <vTaskSwitchContext+0xb8>)
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	4a06      	ldr	r2, [pc, #24]	@ (8007d94 <vTaskSwitchContext+0xb0>)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6013      	str	r3, [r2, #0]
}
 8007d80:	bf00      	nop
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	240049d8 	.word	0x240049d8
 8007d90:	240049c4 	.word	0x240049c4
 8007d94:	240049b8 	.word	0x240049b8
 8007d98:	240044e0 	.word	0x240044e0
 8007d9c:	240044dc 	.word	0x240044dc

08007da0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10b      	bne.n	8007dc8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60fb      	str	r3, [r7, #12]
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	e7fd      	b.n	8007dc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dc8:	4b07      	ldr	r3, [pc, #28]	@ (8007de8 <vTaskPlaceOnEventList+0x48>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3318      	adds	r3, #24
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7fe fc1e 	bl	8006612 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	6838      	ldr	r0, [r7, #0]
 8007dda:	f000 fa81 	bl	80082e0 <prvAddCurrentTaskToDelayedList>
}
 8007dde:	bf00      	nop
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	240044dc 	.word	0x240044dc

08007dec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10b      	bne.n	8007e16 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	617b      	str	r3, [r7, #20]
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	e7fd      	b.n	8007e12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e16:	4b0a      	ldr	r3, [pc, #40]	@ (8007e40 <vTaskPlaceOnEventListRestricted+0x54>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3318      	adds	r3, #24
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7fe fbd3 	bl	80065ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007e2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	68b8      	ldr	r0, [r7, #8]
 8007e34:	f000 fa54 	bl	80082e0 <prvAddCurrentTaskToDelayedList>
	}
 8007e38:	bf00      	nop
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	240044dc 	.word	0x240044dc

08007e44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10b      	bne.n	8007e72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	60fb      	str	r3, [r7, #12]
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	e7fd      	b.n	8007e6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	3318      	adds	r3, #24
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fc04 	bl	8006684 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef4 <xTaskRemoveFromEventList+0xb0>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d11d      	bne.n	8007ec0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	3304      	adds	r3, #4
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe fbfb 	bl	8006684 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e92:	4b19      	ldr	r3, [pc, #100]	@ (8007ef8 <xTaskRemoveFromEventList+0xb4>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d903      	bls.n	8007ea2 <xTaskRemoveFromEventList+0x5e>
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9e:	4a16      	ldr	r2, [pc, #88]	@ (8007ef8 <xTaskRemoveFromEventList+0xb4>)
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4a13      	ldr	r2, [pc, #76]	@ (8007efc <xTaskRemoveFromEventList+0xb8>)
 8007eb0:	441a      	add	r2, r3
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4610      	mov	r0, r2
 8007eba:	f7fe fb86 	bl	80065ca <vListInsertEnd>
 8007ebe:	e005      	b.n	8007ecc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	3318      	adds	r3, #24
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	480e      	ldr	r0, [pc, #56]	@ (8007f00 <xTaskRemoveFromEventList+0xbc>)
 8007ec8:	f7fe fb7f 	bl	80065ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8007f04 <xTaskRemoveFromEventList+0xc0>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d905      	bls.n	8007ee6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007eda:	2301      	movs	r3, #1
 8007edc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ede:	4b0a      	ldr	r3, [pc, #40]	@ (8007f08 <xTaskRemoveFromEventList+0xc4>)
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	e001      	b.n	8007eea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007eea:	697b      	ldr	r3, [r7, #20]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3718      	adds	r7, #24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	240049d8 	.word	0x240049d8
 8007ef8:	240049b8 	.word	0x240049b8
 8007efc:	240044e0 	.word	0x240044e0
 8007f00:	24004970 	.word	0x24004970
 8007f04:	240044dc 	.word	0x240044dc
 8007f08:	240049c4 	.word	0x240049c4

08007f0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f14:	4b06      	ldr	r3, [pc, #24]	@ (8007f30 <vTaskInternalSetTimeOutState+0x24>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f1c:	4b05      	ldr	r3, [pc, #20]	@ (8007f34 <vTaskInternalSetTimeOutState+0x28>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	605a      	str	r2, [r3, #4]
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	240049c8 	.word	0x240049c8
 8007f34:	240049b4 	.word	0x240049b4

08007f38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b088      	sub	sp, #32
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10b      	bne.n	8007f60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	613b      	str	r3, [r7, #16]
}
 8007f5a:	bf00      	nop
 8007f5c:	bf00      	nop
 8007f5e:	e7fd      	b.n	8007f5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10b      	bne.n	8007f7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	60fb      	str	r3, [r7, #12]
}
 8007f78:	bf00      	nop
 8007f7a:	bf00      	nop
 8007f7c:	e7fd      	b.n	8007f7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007f7e:	f7fe fcdb 	bl	8006938 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f82:	4b1d      	ldr	r3, [pc, #116]	@ (8007ff8 <xTaskCheckForTimeOut+0xc0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f9a:	d102      	bne.n	8007fa2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61fb      	str	r3, [r7, #28]
 8007fa0:	e023      	b.n	8007fea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	4b15      	ldr	r3, [pc, #84]	@ (8007ffc <xTaskCheckForTimeOut+0xc4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d007      	beq.n	8007fbe <xTaskCheckForTimeOut+0x86>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d302      	bcc.n	8007fbe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	61fb      	str	r3, [r7, #28]
 8007fbc:	e015      	b.n	8007fea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d20b      	bcs.n	8007fe0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff ff99 	bl	8007f0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61fb      	str	r3, [r7, #28]
 8007fde:	e004      	b.n	8007fea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fea:	f7fe fcd7 	bl	800699c <vPortExitCritical>

	return xReturn;
 8007fee:	69fb      	ldr	r3, [r7, #28]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3720      	adds	r7, #32
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	240049b4 	.word	0x240049b4
 8007ffc:	240049c8 	.word	0x240049c8

08008000 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008000:	b480      	push	{r7}
 8008002:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008004:	4b03      	ldr	r3, [pc, #12]	@ (8008014 <vTaskMissedYield+0x14>)
 8008006:	2201      	movs	r2, #1
 8008008:	601a      	str	r2, [r3, #0]
}
 800800a:	bf00      	nop
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	240049c4 	.word	0x240049c4

08008018 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008020:	f000 f852 	bl	80080c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008024:	4b06      	ldr	r3, [pc, #24]	@ (8008040 <prvIdleTask+0x28>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d9f9      	bls.n	8008020 <prvIdleTask+0x8>
			{
				taskYIELD();
 800802c:	4b05      	ldr	r3, [pc, #20]	@ (8008044 <prvIdleTask+0x2c>)
 800802e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800803c:	e7f0      	b.n	8008020 <prvIdleTask+0x8>
 800803e:	bf00      	nop
 8008040:	240044e0 	.word	0x240044e0
 8008044:	e000ed04 	.word	0xe000ed04

08008048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800804e:	2300      	movs	r3, #0
 8008050:	607b      	str	r3, [r7, #4]
 8008052:	e00c      	b.n	800806e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	4613      	mov	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4a12      	ldr	r2, [pc, #72]	@ (80080a8 <prvInitialiseTaskLists+0x60>)
 8008060:	4413      	add	r3, r2
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe fa84 	bl	8006570 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3301      	adds	r3, #1
 800806c:	607b      	str	r3, [r7, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b37      	cmp	r3, #55	@ 0x37
 8008072:	d9ef      	bls.n	8008054 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008074:	480d      	ldr	r0, [pc, #52]	@ (80080ac <prvInitialiseTaskLists+0x64>)
 8008076:	f7fe fa7b 	bl	8006570 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800807a:	480d      	ldr	r0, [pc, #52]	@ (80080b0 <prvInitialiseTaskLists+0x68>)
 800807c:	f7fe fa78 	bl	8006570 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008080:	480c      	ldr	r0, [pc, #48]	@ (80080b4 <prvInitialiseTaskLists+0x6c>)
 8008082:	f7fe fa75 	bl	8006570 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008086:	480c      	ldr	r0, [pc, #48]	@ (80080b8 <prvInitialiseTaskLists+0x70>)
 8008088:	f7fe fa72 	bl	8006570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800808c:	480b      	ldr	r0, [pc, #44]	@ (80080bc <prvInitialiseTaskLists+0x74>)
 800808e:	f7fe fa6f 	bl	8006570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008092:	4b0b      	ldr	r3, [pc, #44]	@ (80080c0 <prvInitialiseTaskLists+0x78>)
 8008094:	4a05      	ldr	r2, [pc, #20]	@ (80080ac <prvInitialiseTaskLists+0x64>)
 8008096:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008098:	4b0a      	ldr	r3, [pc, #40]	@ (80080c4 <prvInitialiseTaskLists+0x7c>)
 800809a:	4a05      	ldr	r2, [pc, #20]	@ (80080b0 <prvInitialiseTaskLists+0x68>)
 800809c:	601a      	str	r2, [r3, #0]
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	240044e0 	.word	0x240044e0
 80080ac:	24004940 	.word	0x24004940
 80080b0:	24004954 	.word	0x24004954
 80080b4:	24004970 	.word	0x24004970
 80080b8:	24004984 	.word	0x24004984
 80080bc:	2400499c 	.word	0x2400499c
 80080c0:	24004968 	.word	0x24004968
 80080c4:	2400496c 	.word	0x2400496c

080080c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080ce:	e019      	b.n	8008104 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080d0:	f7fe fc32 	bl	8006938 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d4:	4b10      	ldr	r3, [pc, #64]	@ (8008118 <prvCheckTasksWaitingTermination+0x50>)
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3304      	adds	r3, #4
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fe facf 	bl	8006684 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080e6:	4b0d      	ldr	r3, [pc, #52]	@ (800811c <prvCheckTasksWaitingTermination+0x54>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	4a0b      	ldr	r2, [pc, #44]	@ (800811c <prvCheckTasksWaitingTermination+0x54>)
 80080ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008120 <prvCheckTasksWaitingTermination+0x58>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	4a0a      	ldr	r2, [pc, #40]	@ (8008120 <prvCheckTasksWaitingTermination+0x58>)
 80080f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080fa:	f7fe fc4f 	bl	800699c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f810 	bl	8008124 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008104:	4b06      	ldr	r3, [pc, #24]	@ (8008120 <prvCheckTasksWaitingTermination+0x58>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e1      	bne.n	80080d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800810c:	bf00      	nop
 800810e:	bf00      	nop
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	24004984 	.word	0x24004984
 800811c:	240049b0 	.word	0x240049b0
 8008120:	24004998 	.word	0x24004998

08008124 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008132:	2b00      	cmp	r3, #0
 8008134:	d108      	bne.n	8008148 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe f8f8 	bl	8006330 <vPortFree>
				vPortFree( pxTCB );
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7fe f8f5 	bl	8006330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008146:	e019      	b.n	800817c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800814e:	2b01      	cmp	r3, #1
 8008150:	d103      	bne.n	800815a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7fe f8ec 	bl	8006330 <vPortFree>
	}
 8008158:	e010      	b.n	800817c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008160:	2b02      	cmp	r3, #2
 8008162:	d00b      	beq.n	800817c <prvDeleteTCB+0x58>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	60fb      	str	r3, [r7, #12]
}
 8008176:	bf00      	nop
 8008178:	bf00      	nop
 800817a:	e7fd      	b.n	8008178 <prvDeleteTCB+0x54>
	}
 800817c:	bf00      	nop
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800818a:	4b0c      	ldr	r3, [pc, #48]	@ (80081bc <prvResetNextTaskUnblockTime+0x38>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d104      	bne.n	800819e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008194:	4b0a      	ldr	r3, [pc, #40]	@ (80081c0 <prvResetNextTaskUnblockTime+0x3c>)
 8008196:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800819a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800819c:	e008      	b.n	80081b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800819e:	4b07      	ldr	r3, [pc, #28]	@ (80081bc <prvResetNextTaskUnblockTime+0x38>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	4a04      	ldr	r2, [pc, #16]	@ (80081c0 <prvResetNextTaskUnblockTime+0x3c>)
 80081ae:	6013      	str	r3, [r2, #0]
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	24004968 	.word	0x24004968
 80081c0:	240049d0 	.word	0x240049d0

080081c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081ca:	4b0b      	ldr	r3, [pc, #44]	@ (80081f8 <xTaskGetSchedulerState+0x34>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d102      	bne.n	80081d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081d2:	2301      	movs	r3, #1
 80081d4:	607b      	str	r3, [r7, #4]
 80081d6:	e008      	b.n	80081ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081d8:	4b08      	ldr	r3, [pc, #32]	@ (80081fc <xTaskGetSchedulerState+0x38>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d102      	bne.n	80081e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081e0:	2302      	movs	r3, #2
 80081e2:	607b      	str	r3, [r7, #4]
 80081e4:	e001      	b.n	80081ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081e6:	2300      	movs	r3, #0
 80081e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081ea:	687b      	ldr	r3, [r7, #4]
	}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	240049bc 	.word	0x240049bc
 80081fc:	240049d8 	.word	0x240049d8

08008200 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800820c:	2300      	movs	r3, #0
 800820e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d058      	beq.n	80082c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008216:	4b2f      	ldr	r3, [pc, #188]	@ (80082d4 <xTaskPriorityDisinherit+0xd4>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	429a      	cmp	r2, r3
 800821e:	d00b      	beq.n	8008238 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	60fb      	str	r3, [r7, #12]
}
 8008232:	bf00      	nop
 8008234:	bf00      	nop
 8008236:	e7fd      	b.n	8008234 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10b      	bne.n	8008258 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	60bb      	str	r3, [r7, #8]
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	e7fd      	b.n	8008254 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800825c:	1e5a      	subs	r2, r3, #1
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800826a:	429a      	cmp	r2, r3
 800826c:	d02c      	beq.n	80082c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008272:	2b00      	cmp	r3, #0
 8008274:	d128      	bne.n	80082c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	3304      	adds	r3, #4
 800827a:	4618      	mov	r0, r3
 800827c:	f7fe fa02 	bl	8006684 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800828c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008298:	4b0f      	ldr	r3, [pc, #60]	@ (80082d8 <xTaskPriorityDisinherit+0xd8>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	429a      	cmp	r2, r3
 800829e:	d903      	bls.n	80082a8 <xTaskPriorityDisinherit+0xa8>
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a4:	4a0c      	ldr	r2, [pc, #48]	@ (80082d8 <xTaskPriorityDisinherit+0xd8>)
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4a09      	ldr	r2, [pc, #36]	@ (80082dc <xTaskPriorityDisinherit+0xdc>)
 80082b6:	441a      	add	r2, r3
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f7fe f983 	bl	80065ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082c4:	2301      	movs	r3, #1
 80082c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082c8:	697b      	ldr	r3, [r7, #20]
	}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	240044dc 	.word	0x240044dc
 80082d8:	240049b8 	.word	0x240049b8
 80082dc:	240044e0 	.word	0x240044e0

080082e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082ea:	4b21      	ldr	r3, [pc, #132]	@ (8008370 <prvAddCurrentTaskToDelayedList+0x90>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082f0:	4b20      	ldr	r3, [pc, #128]	@ (8008374 <prvAddCurrentTaskToDelayedList+0x94>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3304      	adds	r3, #4
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe f9c4 	bl	8006684 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008302:	d10a      	bne.n	800831a <prvAddCurrentTaskToDelayedList+0x3a>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d007      	beq.n	800831a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800830a:	4b1a      	ldr	r3, [pc, #104]	@ (8008374 <prvAddCurrentTaskToDelayedList+0x94>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3304      	adds	r3, #4
 8008310:	4619      	mov	r1, r3
 8008312:	4819      	ldr	r0, [pc, #100]	@ (8008378 <prvAddCurrentTaskToDelayedList+0x98>)
 8008314:	f7fe f959 	bl	80065ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008318:	e026      	b.n	8008368 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4413      	add	r3, r2
 8008320:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008322:	4b14      	ldr	r3, [pc, #80]	@ (8008374 <prvAddCurrentTaskToDelayedList+0x94>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	429a      	cmp	r2, r3
 8008330:	d209      	bcs.n	8008346 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008332:	4b12      	ldr	r3, [pc, #72]	@ (800837c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	4b0f      	ldr	r3, [pc, #60]	@ (8008374 <prvAddCurrentTaskToDelayedList+0x94>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3304      	adds	r3, #4
 800833c:	4619      	mov	r1, r3
 800833e:	4610      	mov	r0, r2
 8008340:	f7fe f967 	bl	8006612 <vListInsert>
}
 8008344:	e010      	b.n	8008368 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008346:	4b0e      	ldr	r3, [pc, #56]	@ (8008380 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	4b0a      	ldr	r3, [pc, #40]	@ (8008374 <prvAddCurrentTaskToDelayedList+0x94>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3304      	adds	r3, #4
 8008350:	4619      	mov	r1, r3
 8008352:	4610      	mov	r0, r2
 8008354:	f7fe f95d 	bl	8006612 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008358:	4b0a      	ldr	r3, [pc, #40]	@ (8008384 <prvAddCurrentTaskToDelayedList+0xa4>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	429a      	cmp	r2, r3
 8008360:	d202      	bcs.n	8008368 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008362:	4a08      	ldr	r2, [pc, #32]	@ (8008384 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	6013      	str	r3, [r2, #0]
}
 8008368:	bf00      	nop
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	240049b4 	.word	0x240049b4
 8008374:	240044dc 	.word	0x240044dc
 8008378:	2400499c 	.word	0x2400499c
 800837c:	2400496c 	.word	0x2400496c
 8008380:	24004968 	.word	0x24004968
 8008384:	240049d0 	.word	0x240049d0

08008388 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	@ 0x28
 800838c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008392:	f000 fb13 	bl	80089bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008396:	4b1d      	ldr	r3, [pc, #116]	@ (800840c <xTimerCreateTimerTask+0x84>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d021      	beq.n	80083e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80083a6:	1d3a      	adds	r2, r7, #4
 80083a8:	f107 0108 	add.w	r1, r7, #8
 80083ac:	f107 030c 	add.w	r3, r7, #12
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fd fed5 	bl	8006160 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	9202      	str	r2, [sp, #8]
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	2302      	movs	r3, #2
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	2300      	movs	r3, #0
 80083c6:	460a      	mov	r2, r1
 80083c8:	4911      	ldr	r1, [pc, #68]	@ (8008410 <xTimerCreateTimerTask+0x88>)
 80083ca:	4812      	ldr	r0, [pc, #72]	@ (8008414 <xTimerCreateTimerTask+0x8c>)
 80083cc:	f7ff f8d0 	bl	8007570 <xTaskCreateStatic>
 80083d0:	4603      	mov	r3, r0
 80083d2:	4a11      	ldr	r2, [pc, #68]	@ (8008418 <xTimerCreateTimerTask+0x90>)
 80083d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083d6:	4b10      	ldr	r3, [pc, #64]	@ (8008418 <xTimerCreateTimerTask+0x90>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083de:	2301      	movs	r3, #1
 80083e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10b      	bne.n	8008400 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	613b      	str	r3, [r7, #16]
}
 80083fa:	bf00      	nop
 80083fc:	bf00      	nop
 80083fe:	e7fd      	b.n	80083fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008400:	697b      	ldr	r3, [r7, #20]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	24004a0c 	.word	0x24004a0c
 8008410:	08008b08 	.word	0x08008b08
 8008414:	08008555 	.word	0x08008555
 8008418:	24004a10 	.word	0x24004a10

0800841c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	@ 0x28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800842a:	2300      	movs	r3, #0
 800842c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10b      	bne.n	800844c <xTimerGenericCommand+0x30>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	623b      	str	r3, [r7, #32]
}
 8008446:	bf00      	nop
 8008448:	bf00      	nop
 800844a:	e7fd      	b.n	8008448 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800844c:	4b19      	ldr	r3, [pc, #100]	@ (80084b4 <xTimerGenericCommand+0x98>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d02a      	beq.n	80084aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b05      	cmp	r3, #5
 8008464:	dc18      	bgt.n	8008498 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008466:	f7ff fead 	bl	80081c4 <xTaskGetSchedulerState>
 800846a:	4603      	mov	r3, r0
 800846c:	2b02      	cmp	r3, #2
 800846e:	d109      	bne.n	8008484 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008470:	4b10      	ldr	r3, [pc, #64]	@ (80084b4 <xTimerGenericCommand+0x98>)
 8008472:	6818      	ldr	r0, [r3, #0]
 8008474:	f107 0110 	add.w	r1, r7, #16
 8008478:	2300      	movs	r3, #0
 800847a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800847c:	f7fe fc88 	bl	8006d90 <xQueueGenericSend>
 8008480:	6278      	str	r0, [r7, #36]	@ 0x24
 8008482:	e012      	b.n	80084aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008484:	4b0b      	ldr	r3, [pc, #44]	@ (80084b4 <xTimerGenericCommand+0x98>)
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	f107 0110 	add.w	r1, r7, #16
 800848c:	2300      	movs	r3, #0
 800848e:	2200      	movs	r2, #0
 8008490:	f7fe fc7e 	bl	8006d90 <xQueueGenericSend>
 8008494:	6278      	str	r0, [r7, #36]	@ 0x24
 8008496:	e008      	b.n	80084aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008498:	4b06      	ldr	r3, [pc, #24]	@ (80084b4 <xTimerGenericCommand+0x98>)
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	f107 0110 	add.w	r1, r7, #16
 80084a0:	2300      	movs	r3, #0
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	f7fe fd76 	bl	8006f94 <xQueueGenericSendFromISR>
 80084a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3728      	adds	r7, #40	@ 0x28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	24004a0c 	.word	0x24004a0c

080084b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af02      	add	r7, sp, #8
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084c2:	4b23      	ldr	r3, [pc, #140]	@ (8008550 <prvProcessExpiredTimer+0x98>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	3304      	adds	r3, #4
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe f8d7 	bl	8006684 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d023      	beq.n	800852c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	699a      	ldr	r2, [r3, #24]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	18d1      	adds	r1, r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	6978      	ldr	r0, [r7, #20]
 80084f2:	f000 f8d5 	bl	80086a0 <prvInsertTimerInActiveList>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d020      	beq.n	800853e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084fc:	2300      	movs	r3, #0
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	2300      	movs	r3, #0
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	2100      	movs	r1, #0
 8008506:	6978      	ldr	r0, [r7, #20]
 8008508:	f7ff ff88 	bl	800841c <xTimerGenericCommand>
 800850c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d114      	bne.n	800853e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	60fb      	str	r3, [r7, #12]
}
 8008526:	bf00      	nop
 8008528:	bf00      	nop
 800852a:	e7fd      	b.n	8008528 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008532:	f023 0301 	bic.w	r3, r3, #1
 8008536:	b2da      	uxtb	r2, r3
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	6978      	ldr	r0, [r7, #20]
 8008544:	4798      	blx	r3
}
 8008546:	bf00      	nop
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	24004a04 	.word	0x24004a04

08008554 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800855c:	f107 0308 	add.w	r3, r7, #8
 8008560:	4618      	mov	r0, r3
 8008562:	f000 f859 	bl	8008618 <prvGetNextExpireTime>
 8008566:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	4619      	mov	r1, r3
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f000 f805 	bl	800857c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008572:	f000 f8d7 	bl	8008724 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008576:	bf00      	nop
 8008578:	e7f0      	b.n	800855c <prvTimerTask+0x8>
	...

0800857c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008586:	f7ff fa37 	bl	80079f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800858a:	f107 0308 	add.w	r3, r7, #8
 800858e:	4618      	mov	r0, r3
 8008590:	f000 f866 	bl	8008660 <prvSampleTimeNow>
 8008594:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d130      	bne.n	80085fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <prvProcessTimerOrBlockTask+0x3c>
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d806      	bhi.n	80085b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80085aa:	f7ff fa33 	bl	8007a14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80085ae:	68f9      	ldr	r1, [r7, #12]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7ff ff81 	bl	80084b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80085b6:	e024      	b.n	8008602 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d008      	beq.n	80085d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80085be:	4b13      	ldr	r3, [pc, #76]	@ (800860c <prvProcessTimerOrBlockTask+0x90>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <prvProcessTimerOrBlockTask+0x50>
 80085c8:	2301      	movs	r3, #1
 80085ca:	e000      	b.n	80085ce <prvProcessTimerOrBlockTask+0x52>
 80085cc:	2300      	movs	r3, #0
 80085ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80085d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008610 <prvProcessTimerOrBlockTask+0x94>)
 80085d2:	6818      	ldr	r0, [r3, #0]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	4619      	mov	r1, r3
 80085de:	f7fe ff93 	bl	8007508 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80085e2:	f7ff fa17 	bl	8007a14 <xTaskResumeAll>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085ec:	4b09      	ldr	r3, [pc, #36]	@ (8008614 <prvProcessTimerOrBlockTask+0x98>)
 80085ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	f3bf 8f6f 	isb	sy
}
 80085fc:	e001      	b.n	8008602 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085fe:	f7ff fa09 	bl	8007a14 <xTaskResumeAll>
}
 8008602:	bf00      	nop
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	24004a08 	.word	0x24004a08
 8008610:	24004a0c 	.word	0x24004a0c
 8008614:	e000ed04 	.word	0xe000ed04

08008618 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008620:	4b0e      	ldr	r3, [pc, #56]	@ (800865c <prvGetNextExpireTime+0x44>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <prvGetNextExpireTime+0x16>
 800862a:	2201      	movs	r2, #1
 800862c:	e000      	b.n	8008630 <prvGetNextExpireTime+0x18>
 800862e:	2200      	movs	r2, #0
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d105      	bne.n	8008648 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800863c:	4b07      	ldr	r3, [pc, #28]	@ (800865c <prvGetNextExpireTime+0x44>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60fb      	str	r3, [r7, #12]
 8008646:	e001      	b.n	800864c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008648:	2300      	movs	r3, #0
 800864a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800864c:	68fb      	ldr	r3, [r7, #12]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	24004a04 	.word	0x24004a04

08008660 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008668:	f7ff fa72 	bl	8007b50 <xTaskGetTickCount>
 800866c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800866e:	4b0b      	ldr	r3, [pc, #44]	@ (800869c <prvSampleTimeNow+0x3c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	429a      	cmp	r2, r3
 8008676:	d205      	bcs.n	8008684 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008678:	f000 f93a 	bl	80088f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	e002      	b.n	800868a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800868a:	4a04      	ldr	r2, [pc, #16]	@ (800869c <prvSampleTimeNow+0x3c>)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008690:	68fb      	ldr	r3, [r7, #12]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	24004a14 	.word	0x24004a14

080086a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80086ae:	2300      	movs	r3, #0
 80086b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d812      	bhi.n	80086ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	1ad2      	subs	r2, r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d302      	bcc.n	80086da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80086d4:	2301      	movs	r3, #1
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	e01b      	b.n	8008712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80086da:	4b10      	ldr	r3, [pc, #64]	@ (800871c <prvInsertTimerInActiveList+0x7c>)
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3304      	adds	r3, #4
 80086e2:	4619      	mov	r1, r3
 80086e4:	4610      	mov	r0, r2
 80086e6:	f7fd ff94 	bl	8006612 <vListInsert>
 80086ea:	e012      	b.n	8008712 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d206      	bcs.n	8008702 <prvInsertTimerInActiveList+0x62>
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d302      	bcc.n	8008702 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086fc:	2301      	movs	r3, #1
 80086fe:	617b      	str	r3, [r7, #20]
 8008700:	e007      	b.n	8008712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008702:	4b07      	ldr	r3, [pc, #28]	@ (8008720 <prvInsertTimerInActiveList+0x80>)
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3304      	adds	r3, #4
 800870a:	4619      	mov	r1, r3
 800870c:	4610      	mov	r0, r2
 800870e:	f7fd ff80 	bl	8006612 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008712:	697b      	ldr	r3, [r7, #20]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	24004a08 	.word	0x24004a08
 8008720:	24004a04 	.word	0x24004a04

08008724 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08e      	sub	sp, #56	@ 0x38
 8008728:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800872a:	e0ce      	b.n	80088ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	da19      	bge.n	8008766 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008732:	1d3b      	adds	r3, r7, #4
 8008734:	3304      	adds	r3, #4
 8008736:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10b      	bne.n	8008756 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	61fb      	str	r3, [r7, #28]
}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	e7fd      	b.n	8008752 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800875c:	6850      	ldr	r0, [r2, #4]
 800875e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008760:	6892      	ldr	r2, [r2, #8]
 8008762:	4611      	mov	r1, r2
 8008764:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f2c0 80ae 	blt.w	80088ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800877a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877c:	3304      	adds	r3, #4
 800877e:	4618      	mov	r0, r3
 8008780:	f7fd ff80 	bl	8006684 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008784:	463b      	mov	r3, r7
 8008786:	4618      	mov	r0, r3
 8008788:	f7ff ff6a 	bl	8008660 <prvSampleTimeNow>
 800878c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b09      	cmp	r3, #9
 8008792:	f200 8097 	bhi.w	80088c4 <prvProcessReceivedCommands+0x1a0>
 8008796:	a201      	add	r2, pc, #4	@ (adr r2, 800879c <prvProcessReceivedCommands+0x78>)
 8008798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879c:	080087c5 	.word	0x080087c5
 80087a0:	080087c5 	.word	0x080087c5
 80087a4:	080087c5 	.word	0x080087c5
 80087a8:	0800883b 	.word	0x0800883b
 80087ac:	0800884f 	.word	0x0800884f
 80087b0:	0800889b 	.word	0x0800889b
 80087b4:	080087c5 	.word	0x080087c5
 80087b8:	080087c5 	.word	0x080087c5
 80087bc:	0800883b 	.word	0x0800883b
 80087c0:	0800884f 	.word	0x0800884f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087ca:	f043 0301 	orr.w	r3, r3, #1
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	18d1      	adds	r1, r2, r3
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087e4:	f7ff ff5c 	bl	80086a0 <prvInsertTimerInActiveList>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d06c      	beq.n	80088c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b00      	cmp	r3, #0
 8008802:	d061      	beq.n	80088c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	441a      	add	r2, r3
 800880c:	2300      	movs	r3, #0
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	2300      	movs	r3, #0
 8008812:	2100      	movs	r1, #0
 8008814:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008816:	f7ff fe01 	bl	800841c <xTimerGenericCommand>
 800881a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d152      	bne.n	80088c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	61bb      	str	r3, [r7, #24]
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	e7fd      	b.n	8008836 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800883a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008840:	f023 0301 	bic.w	r3, r3, #1
 8008844:	b2da      	uxtb	r2, r3
 8008846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008848:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800884c:	e03d      	b.n	80088ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800884e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008854:	f043 0301 	orr.w	r3, r3, #1
 8008858:	b2da      	uxtb	r2, r3
 800885a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008864:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10b      	bne.n	8008886 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	617b      	str	r3, [r7, #20]
}
 8008880:	bf00      	nop
 8008882:	bf00      	nop
 8008884:	e7fd      	b.n	8008882 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888c:	18d1      	adds	r1, r2, r3
 800888e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008894:	f7ff ff04 	bl	80086a0 <prvInsertTimerInActiveList>
					break;
 8008898:	e017      	b.n	80088ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800889a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088a0:	f003 0302 	and.w	r3, r3, #2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d103      	bne.n	80088b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80088a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088aa:	f7fd fd41 	bl	8006330 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80088ae:	e00c      	b.n	80088ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088b6:	f023 0301 	bic.w	r3, r3, #1
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80088c2:	e002      	b.n	80088ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80088c4:	bf00      	nop
 80088c6:	e000      	b.n	80088ca <prvProcessReceivedCommands+0x1a6>
					break;
 80088c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088ca:	4b08      	ldr	r3, [pc, #32]	@ (80088ec <prvProcessReceivedCommands+0x1c8>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	1d39      	adds	r1, r7, #4
 80088d0:	2200      	movs	r2, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fe fbfc 	bl	80070d0 <xQueueReceive>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f47f af26 	bne.w	800872c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	3730      	adds	r7, #48	@ 0x30
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	24004a0c 	.word	0x24004a0c

080088f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088f6:	e049      	b.n	800898c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088f8:	4b2e      	ldr	r3, [pc, #184]	@ (80089b4 <prvSwitchTimerLists+0xc4>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008902:	4b2c      	ldr	r3, [pc, #176]	@ (80089b4 <prvSwitchTimerLists+0xc4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3304      	adds	r3, #4
 8008910:	4618      	mov	r0, r3
 8008912:	f7fd feb7 	bl	8006684 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b00      	cmp	r3, #0
 800892a:	d02f      	beq.n	800898c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	4413      	add	r3, r2
 8008934:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	429a      	cmp	r2, r3
 800893c:	d90e      	bls.n	800895c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800894a:	4b1a      	ldr	r3, [pc, #104]	@ (80089b4 <prvSwitchTimerLists+0xc4>)
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3304      	adds	r3, #4
 8008952:	4619      	mov	r1, r3
 8008954:	4610      	mov	r0, r2
 8008956:	f7fd fe5c 	bl	8006612 <vListInsert>
 800895a:	e017      	b.n	800898c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800895c:	2300      	movs	r3, #0
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	2300      	movs	r3, #0
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	2100      	movs	r1, #0
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f7ff fd58 	bl	800841c <xTimerGenericCommand>
 800896c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10b      	bne.n	800898c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	603b      	str	r3, [r7, #0]
}
 8008986:	bf00      	nop
 8008988:	bf00      	nop
 800898a:	e7fd      	b.n	8008988 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800898c:	4b09      	ldr	r3, [pc, #36]	@ (80089b4 <prvSwitchTimerLists+0xc4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1b0      	bne.n	80088f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008996:	4b07      	ldr	r3, [pc, #28]	@ (80089b4 <prvSwitchTimerLists+0xc4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800899c:	4b06      	ldr	r3, [pc, #24]	@ (80089b8 <prvSwitchTimerLists+0xc8>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a04      	ldr	r2, [pc, #16]	@ (80089b4 <prvSwitchTimerLists+0xc4>)
 80089a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80089a4:	4a04      	ldr	r2, [pc, #16]	@ (80089b8 <prvSwitchTimerLists+0xc8>)
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	6013      	str	r3, [r2, #0]
}
 80089aa:	bf00      	nop
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	24004a04 	.word	0x24004a04
 80089b8:	24004a08 	.word	0x24004a08

080089bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80089c2:	f7fd ffb9 	bl	8006938 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80089c6:	4b15      	ldr	r3, [pc, #84]	@ (8008a1c <prvCheckForValidListAndQueue+0x60>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d120      	bne.n	8008a10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80089ce:	4814      	ldr	r0, [pc, #80]	@ (8008a20 <prvCheckForValidListAndQueue+0x64>)
 80089d0:	f7fd fdce 	bl	8006570 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80089d4:	4813      	ldr	r0, [pc, #76]	@ (8008a24 <prvCheckForValidListAndQueue+0x68>)
 80089d6:	f7fd fdcb 	bl	8006570 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80089da:	4b13      	ldr	r3, [pc, #76]	@ (8008a28 <prvCheckForValidListAndQueue+0x6c>)
 80089dc:	4a10      	ldr	r2, [pc, #64]	@ (8008a20 <prvCheckForValidListAndQueue+0x64>)
 80089de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80089e0:	4b12      	ldr	r3, [pc, #72]	@ (8008a2c <prvCheckForValidListAndQueue+0x70>)
 80089e2:	4a10      	ldr	r2, [pc, #64]	@ (8008a24 <prvCheckForValidListAndQueue+0x68>)
 80089e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089e6:	2300      	movs	r3, #0
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	4b11      	ldr	r3, [pc, #68]	@ (8008a30 <prvCheckForValidListAndQueue+0x74>)
 80089ec:	4a11      	ldr	r2, [pc, #68]	@ (8008a34 <prvCheckForValidListAndQueue+0x78>)
 80089ee:	2110      	movs	r1, #16
 80089f0:	200a      	movs	r0, #10
 80089f2:	f7fe f92d 	bl	8006c50 <xQueueGenericCreateStatic>
 80089f6:	4603      	mov	r3, r0
 80089f8:	4a08      	ldr	r2, [pc, #32]	@ (8008a1c <prvCheckForValidListAndQueue+0x60>)
 80089fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <prvCheckForValidListAndQueue+0x60>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a04:	4b05      	ldr	r3, [pc, #20]	@ (8008a1c <prvCheckForValidListAndQueue+0x60>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	490b      	ldr	r1, [pc, #44]	@ (8008a38 <prvCheckForValidListAndQueue+0x7c>)
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fd52 	bl	80074b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a10:	f7fd ffc4 	bl	800699c <vPortExitCritical>
}
 8008a14:	bf00      	nop
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	24004a0c 	.word	0x24004a0c
 8008a20:	240049dc 	.word	0x240049dc
 8008a24:	240049f0 	.word	0x240049f0
 8008a28:	24004a04 	.word	0x24004a04
 8008a2c:	24004a08 	.word	0x24004a08
 8008a30:	24004ab8 	.word	0x24004ab8
 8008a34:	24004a18 	.word	0x24004a18
 8008a38:	08008b10 	.word	0x08008b10

08008a3c <memset>:
 8008a3c:	4402      	add	r2, r0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d100      	bne.n	8008a46 <memset+0xa>
 8008a44:	4770      	bx	lr
 8008a46:	f803 1b01 	strb.w	r1, [r3], #1
 8008a4a:	e7f9      	b.n	8008a40 <memset+0x4>

08008a4c <__libc_init_array>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8008a84 <__libc_init_array+0x38>)
 8008a50:	4c0d      	ldr	r4, [pc, #52]	@ (8008a88 <__libc_init_array+0x3c>)
 8008a52:	1b64      	subs	r4, r4, r5
 8008a54:	10a4      	asrs	r4, r4, #2
 8008a56:	2600      	movs	r6, #0
 8008a58:	42a6      	cmp	r6, r4
 8008a5a:	d109      	bne.n	8008a70 <__libc_init_array+0x24>
 8008a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8008a8c <__libc_init_array+0x40>)
 8008a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8008a90 <__libc_init_array+0x44>)
 8008a60:	f000 f826 	bl	8008ab0 <_init>
 8008a64:	1b64      	subs	r4, r4, r5
 8008a66:	10a4      	asrs	r4, r4, #2
 8008a68:	2600      	movs	r6, #0
 8008a6a:	42a6      	cmp	r6, r4
 8008a6c:	d105      	bne.n	8008a7a <__libc_init_array+0x2e>
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a74:	4798      	blx	r3
 8008a76:	3601      	adds	r6, #1
 8008a78:	e7ee      	b.n	8008a58 <__libc_init_array+0xc>
 8008a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7e:	4798      	blx	r3
 8008a80:	3601      	adds	r6, #1
 8008a82:	e7f2      	b.n	8008a6a <__libc_init_array+0x1e>
 8008a84:	08008c54 	.word	0x08008c54
 8008a88:	08008c54 	.word	0x08008c54
 8008a8c:	08008c54 	.word	0x08008c54
 8008a90:	08008c58 	.word	0x08008c58

08008a94 <memcpy>:
 8008a94:	440a      	add	r2, r1
 8008a96:	4291      	cmp	r1, r2
 8008a98:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008a9c:	d100      	bne.n	8008aa0 <memcpy+0xc>
 8008a9e:	4770      	bx	lr
 8008aa0:	b510      	push	{r4, lr}
 8008aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aaa:	4291      	cmp	r1, r2
 8008aac:	d1f9      	bne.n	8008aa2 <memcpy+0xe>
 8008aae:	bd10      	pop	{r4, pc}

08008ab0 <_init>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	bf00      	nop
 8008ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab6:	bc08      	pop	{r3}
 8008ab8:	469e      	mov	lr, r3
 8008aba:	4770      	bx	lr

08008abc <_fini>:
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	bf00      	nop
 8008ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac2:	bc08      	pop	{r3}
 8008ac4:	469e      	mov	lr, r3
 8008ac6:	4770      	bx	lr
