
test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d0c  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08100fa4  08100fa4  00001fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08100fbc  08100fbc  00001fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08100fc0  08100fc0  00001fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  10000000  08100fc4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b4  10000010  08100fd4  00002010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100000c4  08100fd4  000020c4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bc56  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000016ad  00000000  00000000  0000dc96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000008f8  00000000  00000000  0000f348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000006e5  00000000  00000000  0000fc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000385b6  00000000  00000000  00010325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000a849  00000000  00000000  000488db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00178cfe  00000000  00000000  00053124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001cbe22  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002414  00000000  00000000  001cbe68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006d  00000000  00000000  001ce27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08100f8c 	.word	0x08100f8c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08100f8c 	.word	0x08100f8c

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100308:	b480      	push	{r7}
 810030a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 810030c:	4b09      	ldr	r3, [pc, #36]	@ (8100334 <ExitRun0Mode+0x2c>)
 810030e:	68db      	ldr	r3, [r3, #12]
 8100310:	4a08      	ldr	r2, [pc, #32]	@ (8100334 <ExitRun0Mode+0x2c>)
 8100312:	f023 0302 	bic.w	r3, r3, #2
 8100316:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100318:	bf00      	nop
 810031a:	4b06      	ldr	r3, [pc, #24]	@ (8100334 <ExitRun0Mode+0x2c>)
 810031c:	685b      	ldr	r3, [r3, #4]
 810031e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100322:	2b00      	cmp	r3, #0
 8100324:	d0f9      	beq.n	810031a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100326:	bf00      	nop
 8100328:	bf00      	nop
 810032a:	46bd      	mov	sp, r7
 810032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100330:	4770      	bx	lr
 8100332:	bf00      	nop
 8100334:	58024800 	.word	0x58024800

08100338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100338:	b580      	push	{r7, lr}
 810033a:	b082      	sub	sp, #8
 810033c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810033e:	4b1f      	ldr	r3, [pc, #124]	@ (81003bc <main+0x84>)
 8100340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100344:	4a1d      	ldr	r2, [pc, #116]	@ (81003bc <main+0x84>)
 8100346:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810034a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810034e:	4b1b      	ldr	r3, [pc, #108]	@ (81003bc <main+0x84>)
 8100350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100358:	607b      	str	r3, [r7, #4]
 810035a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810035c:	2001      	movs	r0, #1
 810035e:	f000 fa7b 	bl	8100858 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100362:	f000 fb05 	bl	8100970 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100366:	2201      	movs	r2, #1
 8100368:	2102      	movs	r1, #2
 810036a:	2000      	movs	r0, #0
 810036c:	f000 fa86 	bl	810087c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100370:	4b13      	ldr	r3, [pc, #76]	@ (81003c0 <main+0x88>)
 8100372:	681b      	ldr	r3, [r3, #0]
 8100374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100378:	2b70      	cmp	r3, #112	@ 0x70
 810037a:	d108      	bne.n	810038e <main+0x56>
 810037c:	4b11      	ldr	r3, [pc, #68]	@ (81003c4 <main+0x8c>)
 810037e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100382:	4a10      	ldr	r2, [pc, #64]	@ (81003c4 <main+0x8c>)
 8100384:	f043 0301 	orr.w	r3, r3, #1
 8100388:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810038c:	e007      	b.n	810039e <main+0x66>
 810038e:	4b0d      	ldr	r3, [pc, #52]	@ (81003c4 <main+0x8c>)
 8100390:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100394:	4a0b      	ldr	r2, [pc, #44]	@ (81003c4 <main+0x8c>)
 8100396:	f043 0301 	orr.w	r3, r3, #1
 810039a:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810039e:	f000 f88d 	bl	81004bc <HAL_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart3, "Hallo\n", 6, (unsigned int)-1);
 81003a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 81003a6:	2206      	movs	r2, #6
 81003a8:	4907      	ldr	r1, [pc, #28]	@ (81003c8 <main+0x90>)
 81003aa:	4808      	ldr	r0, [pc, #32]	@ (81003cc <main+0x94>)
 81003ac:	f000 fc68 	bl	8100c80 <HAL_UART_Transmit>
	  HAL_Delay(100);
 81003b0:	2064      	movs	r0, #100	@ 0x64
 81003b2:	f000 f937 	bl	8100624 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, "Hallo\n", 6, (unsigned int)-1);
 81003b6:	bf00      	nop
 81003b8:	e7f3      	b.n	81003a2 <main+0x6a>
 81003ba:	bf00      	nop
 81003bc:	58024400 	.word	0x58024400
 81003c0:	e000ed00 	.word	0xe000ed00
 81003c4:	58026400 	.word	0x58026400
 81003c8:	08100fa4 	.word	0x08100fa4
 81003cc:	1000002c 	.word	0x1000002c

081003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81003d0:	b480      	push	{r7}
 81003d2:	b083      	sub	sp, #12
 81003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81003d6:	4b0a      	ldr	r3, [pc, #40]	@ (8100400 <HAL_MspInit+0x30>)
 81003d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81003dc:	4a08      	ldr	r2, [pc, #32]	@ (8100400 <HAL_MspInit+0x30>)
 81003de:	f043 0302 	orr.w	r3, r3, #2
 81003e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81003e6:	4b06      	ldr	r3, [pc, #24]	@ (8100400 <HAL_MspInit+0x30>)
 81003e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81003ec:	f003 0302 	and.w	r3, r3, #2
 81003f0:	607b      	str	r3, [r7, #4]
 81003f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81003f4:	bf00      	nop
 81003f6:	370c      	adds	r7, #12
 81003f8:	46bd      	mov	sp, r7
 81003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003fe:	4770      	bx	lr
 8100400:	58024400 	.word	0x58024400

08100404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100404:	b480      	push	{r7}
 8100406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100408:	bf00      	nop
 810040a:	e7fd      	b.n	8100408 <NMI_Handler+0x4>

0810040c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810040c:	b480      	push	{r7}
 810040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100410:	bf00      	nop
 8100412:	e7fd      	b.n	8100410 <HardFault_Handler+0x4>

08100414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100414:	b480      	push	{r7}
 8100416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100418:	bf00      	nop
 810041a:	e7fd      	b.n	8100418 <MemManage_Handler+0x4>

0810041c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810041c:	b480      	push	{r7}
 810041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100420:	bf00      	nop
 8100422:	e7fd      	b.n	8100420 <BusFault_Handler+0x4>

08100424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100424:	b480      	push	{r7}
 8100426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100428:	bf00      	nop
 810042a:	e7fd      	b.n	8100428 <UsageFault_Handler+0x4>

0810042c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810042c:	b480      	push	{r7}
 810042e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100430:	bf00      	nop
 8100432:	46bd      	mov	sp, r7
 8100434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100438:	4770      	bx	lr

0810043a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810043a:	b480      	push	{r7}
 810043c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810043e:	bf00      	nop
 8100440:	46bd      	mov	sp, r7
 8100442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100446:	4770      	bx	lr

08100448 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100448:	b480      	push	{r7}
 810044a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810044c:	bf00      	nop
 810044e:	46bd      	mov	sp, r7
 8100450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100454:	4770      	bx	lr

08100456 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100456:	b580      	push	{r7, lr}
 8100458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810045a:	f000 f8c3 	bl	81005e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810045e:	bf00      	nop
 8100460:	bd80      	pop	{r7, pc}
	...

08100464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100464:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81004a0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8100468:	f7ff ff4e 	bl	8100308 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 810046c:	f7ff ff34 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100470:	480c      	ldr	r0, [pc, #48]	@ (81004a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100472:	490d      	ldr	r1, [pc, #52]	@ (81004a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100474:	4a0d      	ldr	r2, [pc, #52]	@ (81004ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100478:	e002      	b.n	8100480 <LoopCopyDataInit>

0810047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810047e:	3304      	adds	r3, #4

08100480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100484:	d3f9      	bcc.n	810047a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100486:	4a0a      	ldr	r2, [pc, #40]	@ (81004b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100488:	4c0a      	ldr	r4, [pc, #40]	@ (81004b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810048c:	e001      	b.n	8100492 <LoopFillZerobss>

0810048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100490:	3204      	adds	r2, #4

08100492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100494:	d3fb      	bcc.n	810048e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100496:	f000 fd55 	bl	8100f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810049a:	f7ff ff4d 	bl	8100338 <main>
  bx  lr
 810049e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81004a0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81004a4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81004a8:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81004ac:	08100fc4 	.word	0x08100fc4
  ldr r2, =_sbss
 81004b0:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81004b4:	100000c4 	.word	0x100000c4

081004b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81004b8:	e7fe      	b.n	81004b8 <ADC3_IRQHandler>
	...

081004bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81004bc:	b580      	push	{r7, lr}
 81004be:	b082      	sub	sp, #8
 81004c0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81004c2:	4b28      	ldr	r3, [pc, #160]	@ (8100564 <HAL_Init+0xa8>)
 81004c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81004c8:	4a26      	ldr	r2, [pc, #152]	@ (8100564 <HAL_Init+0xa8>)
 81004ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81004ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81004d2:	4b24      	ldr	r3, [pc, #144]	@ (8100564 <HAL_Init+0xa8>)
 81004d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81004d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81004dc:	603b      	str	r3, [r7, #0]
 81004de:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81004e0:	4b21      	ldr	r3, [pc, #132]	@ (8100568 <HAL_Init+0xac>)
 81004e2:	681b      	ldr	r3, [r3, #0]
 81004e4:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81004e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81004ec:	4a1e      	ldr	r2, [pc, #120]	@ (8100568 <HAL_Init+0xac>)
 81004ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81004f2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81004f4:	4b1c      	ldr	r3, [pc, #112]	@ (8100568 <HAL_Init+0xac>)
 81004f6:	681b      	ldr	r3, [r3, #0]
 81004f8:	4a1b      	ldr	r2, [pc, #108]	@ (8100568 <HAL_Init+0xac>)
 81004fa:	f043 0301 	orr.w	r3, r3, #1
 81004fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100500:	2003      	movs	r0, #3
 8100502:	f000 f965 	bl	81007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100506:	f000 fa41 	bl	810098c <HAL_RCC_GetSysClockFreq>
 810050a:	4602      	mov	r2, r0
 810050c:	4b15      	ldr	r3, [pc, #84]	@ (8100564 <HAL_Init+0xa8>)
 810050e:	699b      	ldr	r3, [r3, #24]
 8100510:	0a1b      	lsrs	r3, r3, #8
 8100512:	f003 030f 	and.w	r3, r3, #15
 8100516:	4915      	ldr	r1, [pc, #84]	@ (810056c <HAL_Init+0xb0>)
 8100518:	5ccb      	ldrb	r3, [r1, r3]
 810051a:	f003 031f 	and.w	r3, r3, #31
 810051e:	fa22 f303 	lsr.w	r3, r2, r3
 8100522:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100524:	4b0f      	ldr	r3, [pc, #60]	@ (8100564 <HAL_Init+0xa8>)
 8100526:	699b      	ldr	r3, [r3, #24]
 8100528:	f003 030f 	and.w	r3, r3, #15
 810052c:	4a0f      	ldr	r2, [pc, #60]	@ (810056c <HAL_Init+0xb0>)
 810052e:	5cd3      	ldrb	r3, [r2, r3]
 8100530:	f003 031f 	and.w	r3, r3, #31
 8100534:	687a      	ldr	r2, [r7, #4]
 8100536:	fa22 f303 	lsr.w	r3, r2, r3
 810053a:	4a0d      	ldr	r2, [pc, #52]	@ (8100570 <HAL_Init+0xb4>)
 810053c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810053e:	4b0c      	ldr	r3, [pc, #48]	@ (8100570 <HAL_Init+0xb4>)
 8100540:	681b      	ldr	r3, [r3, #0]
 8100542:	4a0c      	ldr	r2, [pc, #48]	@ (8100574 <HAL_Init+0xb8>)
 8100544:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100546:	2000      	movs	r0, #0
 8100548:	f000 f816 	bl	8100578 <HAL_InitTick>
 810054c:	4603      	mov	r3, r0
 810054e:	2b00      	cmp	r3, #0
 8100550:	d001      	beq.n	8100556 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100552:	2301      	movs	r3, #1
 8100554:	e002      	b.n	810055c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100556:	f7ff ff3b 	bl	81003d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810055a:	2300      	movs	r3, #0
}
 810055c:	4618      	mov	r0, r3
 810055e:	3708      	adds	r7, #8
 8100560:	46bd      	mov	sp, r7
 8100562:	bd80      	pop	{r7, pc}
 8100564:	58024400 	.word	0x58024400
 8100568:	40024400 	.word	0x40024400
 810056c:	08100fac 	.word	0x08100fac
 8100570:	10000004 	.word	0x10000004
 8100574:	10000000 	.word	0x10000000

08100578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100578:	b580      	push	{r7, lr}
 810057a:	b082      	sub	sp, #8
 810057c:	af00      	add	r7, sp, #0
 810057e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100580:	4b15      	ldr	r3, [pc, #84]	@ (81005d8 <HAL_InitTick+0x60>)
 8100582:	781b      	ldrb	r3, [r3, #0]
 8100584:	2b00      	cmp	r3, #0
 8100586:	d101      	bne.n	810058c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100588:	2301      	movs	r3, #1
 810058a:	e021      	b.n	81005d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810058c:	4b13      	ldr	r3, [pc, #76]	@ (81005dc <HAL_InitTick+0x64>)
 810058e:	681a      	ldr	r2, [r3, #0]
 8100590:	4b11      	ldr	r3, [pc, #68]	@ (81005d8 <HAL_InitTick+0x60>)
 8100592:	781b      	ldrb	r3, [r3, #0]
 8100594:	4619      	mov	r1, r3
 8100596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810059a:	fbb3 f3f1 	udiv	r3, r3, r1
 810059e:	fbb2 f3f3 	udiv	r3, r2, r3
 81005a2:	4618      	mov	r0, r3
 81005a4:	f000 f939 	bl	810081a <HAL_SYSTICK_Config>
 81005a8:	4603      	mov	r3, r0
 81005aa:	2b00      	cmp	r3, #0
 81005ac:	d001      	beq.n	81005b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81005ae:	2301      	movs	r3, #1
 81005b0:	e00e      	b.n	81005d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81005b2:	687b      	ldr	r3, [r7, #4]
 81005b4:	2b0f      	cmp	r3, #15
 81005b6:	d80a      	bhi.n	81005ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81005b8:	2200      	movs	r2, #0
 81005ba:	6879      	ldr	r1, [r7, #4]
 81005bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81005c0:	f000 f911 	bl	81007e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81005c4:	4a06      	ldr	r2, [pc, #24]	@ (81005e0 <HAL_InitTick+0x68>)
 81005c6:	687b      	ldr	r3, [r7, #4]
 81005c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81005ca:	2300      	movs	r3, #0
 81005cc:	e000      	b.n	81005d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81005ce:	2301      	movs	r3, #1
}
 81005d0:	4618      	mov	r0, r3
 81005d2:	3708      	adds	r7, #8
 81005d4:	46bd      	mov	sp, r7
 81005d6:	bd80      	pop	{r7, pc}
 81005d8:	1000000c 	.word	0x1000000c
 81005dc:	10000000 	.word	0x10000000
 81005e0:	10000008 	.word	0x10000008

081005e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81005e4:	b480      	push	{r7}
 81005e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81005e8:	4b06      	ldr	r3, [pc, #24]	@ (8100604 <HAL_IncTick+0x20>)
 81005ea:	781b      	ldrb	r3, [r3, #0]
 81005ec:	461a      	mov	r2, r3
 81005ee:	4b06      	ldr	r3, [pc, #24]	@ (8100608 <HAL_IncTick+0x24>)
 81005f0:	681b      	ldr	r3, [r3, #0]
 81005f2:	4413      	add	r3, r2
 81005f4:	4a04      	ldr	r2, [pc, #16]	@ (8100608 <HAL_IncTick+0x24>)
 81005f6:	6013      	str	r3, [r2, #0]
}
 81005f8:	bf00      	nop
 81005fa:	46bd      	mov	sp, r7
 81005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop
 8100604:	1000000c 	.word	0x1000000c
 8100608:	100000c0 	.word	0x100000c0

0810060c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810060c:	b480      	push	{r7}
 810060e:	af00      	add	r7, sp, #0
  return uwTick;
 8100610:	4b03      	ldr	r3, [pc, #12]	@ (8100620 <HAL_GetTick+0x14>)
 8100612:	681b      	ldr	r3, [r3, #0]
}
 8100614:	4618      	mov	r0, r3
 8100616:	46bd      	mov	sp, r7
 8100618:	f85d 7b04 	ldr.w	r7, [sp], #4
 810061c:	4770      	bx	lr
 810061e:	bf00      	nop
 8100620:	100000c0 	.word	0x100000c0

08100624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100624:	b580      	push	{r7, lr}
 8100626:	b084      	sub	sp, #16
 8100628:	af00      	add	r7, sp, #0
 810062a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810062c:	f7ff ffee 	bl	810060c <HAL_GetTick>
 8100630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100632:	687b      	ldr	r3, [r7, #4]
 8100634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100636:	68fb      	ldr	r3, [r7, #12]
 8100638:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810063c:	d005      	beq.n	810064a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810063e:	4b0a      	ldr	r3, [pc, #40]	@ (8100668 <HAL_Delay+0x44>)
 8100640:	781b      	ldrb	r3, [r3, #0]
 8100642:	461a      	mov	r2, r3
 8100644:	68fb      	ldr	r3, [r7, #12]
 8100646:	4413      	add	r3, r2
 8100648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810064a:	bf00      	nop
 810064c:	f7ff ffde 	bl	810060c <HAL_GetTick>
 8100650:	4602      	mov	r2, r0
 8100652:	68bb      	ldr	r3, [r7, #8]
 8100654:	1ad3      	subs	r3, r2, r3
 8100656:	68fa      	ldr	r2, [r7, #12]
 8100658:	429a      	cmp	r2, r3
 810065a:	d8f7      	bhi.n	810064c <HAL_Delay+0x28>
  {
  }
}
 810065c:	bf00      	nop
 810065e:	bf00      	nop
 8100660:	3710      	adds	r7, #16
 8100662:	46bd      	mov	sp, r7
 8100664:	bd80      	pop	{r7, pc}
 8100666:	bf00      	nop
 8100668:	1000000c 	.word	0x1000000c

0810066c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810066c:	b480      	push	{r7}
 810066e:	b085      	sub	sp, #20
 8100670:	af00      	add	r7, sp, #0
 8100672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100674:	687b      	ldr	r3, [r7, #4]
 8100676:	f003 0307 	and.w	r3, r3, #7
 810067a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810067c:	4b0c      	ldr	r3, [pc, #48]	@ (81006b0 <__NVIC_SetPriorityGrouping+0x44>)
 810067e:	68db      	ldr	r3, [r3, #12]
 8100680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100682:	68ba      	ldr	r2, [r7, #8]
 8100684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100688:	4013      	ands	r3, r2
 810068a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810068c:	68fb      	ldr	r3, [r7, #12]
 810068e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100690:	68bb      	ldr	r3, [r7, #8]
 8100692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100694:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810069c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810069e:	4a04      	ldr	r2, [pc, #16]	@ (81006b0 <__NVIC_SetPriorityGrouping+0x44>)
 81006a0:	68bb      	ldr	r3, [r7, #8]
 81006a2:	60d3      	str	r3, [r2, #12]
}
 81006a4:	bf00      	nop
 81006a6:	3714      	adds	r7, #20
 81006a8:	46bd      	mov	sp, r7
 81006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ae:	4770      	bx	lr
 81006b0:	e000ed00 	.word	0xe000ed00

081006b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81006b4:	b480      	push	{r7}
 81006b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81006b8:	4b04      	ldr	r3, [pc, #16]	@ (81006cc <__NVIC_GetPriorityGrouping+0x18>)
 81006ba:	68db      	ldr	r3, [r3, #12]
 81006bc:	0a1b      	lsrs	r3, r3, #8
 81006be:	f003 0307 	and.w	r3, r3, #7
}
 81006c2:	4618      	mov	r0, r3
 81006c4:	46bd      	mov	sp, r7
 81006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ca:	4770      	bx	lr
 81006cc:	e000ed00 	.word	0xe000ed00

081006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81006d0:	b480      	push	{r7}
 81006d2:	b083      	sub	sp, #12
 81006d4:	af00      	add	r7, sp, #0
 81006d6:	4603      	mov	r3, r0
 81006d8:	6039      	str	r1, [r7, #0]
 81006da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81006dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81006e0:	2b00      	cmp	r3, #0
 81006e2:	db0a      	blt.n	81006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81006e4:	683b      	ldr	r3, [r7, #0]
 81006e6:	b2da      	uxtb	r2, r3
 81006e8:	490c      	ldr	r1, [pc, #48]	@ (810071c <__NVIC_SetPriority+0x4c>)
 81006ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81006ee:	0112      	lsls	r2, r2, #4
 81006f0:	b2d2      	uxtb	r2, r2
 81006f2:	440b      	add	r3, r1
 81006f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81006f8:	e00a      	b.n	8100710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81006fa:	683b      	ldr	r3, [r7, #0]
 81006fc:	b2da      	uxtb	r2, r3
 81006fe:	4908      	ldr	r1, [pc, #32]	@ (8100720 <__NVIC_SetPriority+0x50>)
 8100700:	88fb      	ldrh	r3, [r7, #6]
 8100702:	f003 030f 	and.w	r3, r3, #15
 8100706:	3b04      	subs	r3, #4
 8100708:	0112      	lsls	r2, r2, #4
 810070a:	b2d2      	uxtb	r2, r2
 810070c:	440b      	add	r3, r1
 810070e:	761a      	strb	r2, [r3, #24]
}
 8100710:	bf00      	nop
 8100712:	370c      	adds	r7, #12
 8100714:	46bd      	mov	sp, r7
 8100716:	f85d 7b04 	ldr.w	r7, [sp], #4
 810071a:	4770      	bx	lr
 810071c:	e000e100 	.word	0xe000e100
 8100720:	e000ed00 	.word	0xe000ed00

08100724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100724:	b480      	push	{r7}
 8100726:	b089      	sub	sp, #36	@ 0x24
 8100728:	af00      	add	r7, sp, #0
 810072a:	60f8      	str	r0, [r7, #12]
 810072c:	60b9      	str	r1, [r7, #8]
 810072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100730:	68fb      	ldr	r3, [r7, #12]
 8100732:	f003 0307 	and.w	r3, r3, #7
 8100736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100738:	69fb      	ldr	r3, [r7, #28]
 810073a:	f1c3 0307 	rsb	r3, r3, #7
 810073e:	2b04      	cmp	r3, #4
 8100740:	bf28      	it	cs
 8100742:	2304      	movcs	r3, #4
 8100744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100746:	69fb      	ldr	r3, [r7, #28]
 8100748:	3304      	adds	r3, #4
 810074a:	2b06      	cmp	r3, #6
 810074c:	d902      	bls.n	8100754 <NVIC_EncodePriority+0x30>
 810074e:	69fb      	ldr	r3, [r7, #28]
 8100750:	3b03      	subs	r3, #3
 8100752:	e000      	b.n	8100756 <NVIC_EncodePriority+0x32>
 8100754:	2300      	movs	r3, #0
 8100756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100758:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810075c:	69bb      	ldr	r3, [r7, #24]
 810075e:	fa02 f303 	lsl.w	r3, r2, r3
 8100762:	43da      	mvns	r2, r3
 8100764:	68bb      	ldr	r3, [r7, #8]
 8100766:	401a      	ands	r2, r3
 8100768:	697b      	ldr	r3, [r7, #20]
 810076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810076c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8100770:	697b      	ldr	r3, [r7, #20]
 8100772:	fa01 f303 	lsl.w	r3, r1, r3
 8100776:	43d9      	mvns	r1, r3
 8100778:	687b      	ldr	r3, [r7, #4]
 810077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810077c:	4313      	orrs	r3, r2
         );
}
 810077e:	4618      	mov	r0, r3
 8100780:	3724      	adds	r7, #36	@ 0x24
 8100782:	46bd      	mov	sp, r7
 8100784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100788:	4770      	bx	lr
	...

0810078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 810078c:	b580      	push	{r7, lr}
 810078e:	b082      	sub	sp, #8
 8100790:	af00      	add	r7, sp, #0
 8100792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100794:	687b      	ldr	r3, [r7, #4]
 8100796:	3b01      	subs	r3, #1
 8100798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810079c:	d301      	bcc.n	81007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810079e:	2301      	movs	r3, #1
 81007a0:	e00f      	b.n	81007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81007a2:	4a0a      	ldr	r2, [pc, #40]	@ (81007cc <SysTick_Config+0x40>)
 81007a4:	687b      	ldr	r3, [r7, #4]
 81007a6:	3b01      	subs	r3, #1
 81007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81007aa:	210f      	movs	r1, #15
 81007ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81007b0:	f7ff ff8e 	bl	81006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81007b4:	4b05      	ldr	r3, [pc, #20]	@ (81007cc <SysTick_Config+0x40>)
 81007b6:	2200      	movs	r2, #0
 81007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81007ba:	4b04      	ldr	r3, [pc, #16]	@ (81007cc <SysTick_Config+0x40>)
 81007bc:	2207      	movs	r2, #7
 81007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81007c0:	2300      	movs	r3, #0
}
 81007c2:	4618      	mov	r0, r3
 81007c4:	3708      	adds	r7, #8
 81007c6:	46bd      	mov	sp, r7
 81007c8:	bd80      	pop	{r7, pc}
 81007ca:	bf00      	nop
 81007cc:	e000e010 	.word	0xe000e010

081007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81007d0:	b580      	push	{r7, lr}
 81007d2:	b082      	sub	sp, #8
 81007d4:	af00      	add	r7, sp, #0
 81007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81007d8:	6878      	ldr	r0, [r7, #4]
 81007da:	f7ff ff47 	bl	810066c <__NVIC_SetPriorityGrouping>
}
 81007de:	bf00      	nop
 81007e0:	3708      	adds	r7, #8
 81007e2:	46bd      	mov	sp, r7
 81007e4:	bd80      	pop	{r7, pc}

081007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81007e6:	b580      	push	{r7, lr}
 81007e8:	b086      	sub	sp, #24
 81007ea:	af00      	add	r7, sp, #0
 81007ec:	4603      	mov	r3, r0
 81007ee:	60b9      	str	r1, [r7, #8]
 81007f0:	607a      	str	r2, [r7, #4]
 81007f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81007f4:	f7ff ff5e 	bl	81006b4 <__NVIC_GetPriorityGrouping>
 81007f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81007fa:	687a      	ldr	r2, [r7, #4]
 81007fc:	68b9      	ldr	r1, [r7, #8]
 81007fe:	6978      	ldr	r0, [r7, #20]
 8100800:	f7ff ff90 	bl	8100724 <NVIC_EncodePriority>
 8100804:	4602      	mov	r2, r0
 8100806:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810080a:	4611      	mov	r1, r2
 810080c:	4618      	mov	r0, r3
 810080e:	f7ff ff5f 	bl	81006d0 <__NVIC_SetPriority>
}
 8100812:	bf00      	nop
 8100814:	3718      	adds	r7, #24
 8100816:	46bd      	mov	sp, r7
 8100818:	bd80      	pop	{r7, pc}

0810081a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810081a:	b580      	push	{r7, lr}
 810081c:	b082      	sub	sp, #8
 810081e:	af00      	add	r7, sp, #0
 8100820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100822:	6878      	ldr	r0, [r7, #4]
 8100824:	f7ff ffb2 	bl	810078c <SysTick_Config>
 8100828:	4603      	mov	r3, r0
}
 810082a:	4618      	mov	r0, r3
 810082c:	3708      	adds	r7, #8
 810082e:	46bd      	mov	sp, r7
 8100830:	bd80      	pop	{r7, pc}
	...

08100834 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100834:	b480      	push	{r7}
 8100836:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100838:	4b06      	ldr	r3, [pc, #24]	@ (8100854 <HAL_GetCurrentCPUID+0x20>)
 810083a:	681b      	ldr	r3, [r3, #0]
 810083c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100840:	2b70      	cmp	r3, #112	@ 0x70
 8100842:	d101      	bne.n	8100848 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8100844:	2303      	movs	r3, #3
 8100846:	e000      	b.n	810084a <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8100848:	2301      	movs	r3, #1
  }
}
 810084a:	4618      	mov	r0, r3
 810084c:	46bd      	mov	sp, r7
 810084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100852:	4770      	bx	lr
 8100854:	e000ed00 	.word	0xe000ed00

08100858 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100858:	b480      	push	{r7}
 810085a:	b083      	sub	sp, #12
 810085c:	af00      	add	r7, sp, #0
 810085e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100860:	4b05      	ldr	r3, [pc, #20]	@ (8100878 <HAL_HSEM_ActivateNotification+0x20>)
 8100862:	681a      	ldr	r2, [r3, #0]
 8100864:	4904      	ldr	r1, [pc, #16]	@ (8100878 <HAL_HSEM_ActivateNotification+0x20>)
 8100866:	687b      	ldr	r3, [r7, #4]
 8100868:	4313      	orrs	r3, r2
 810086a:	600b      	str	r3, [r1, #0]
#endif
}
 810086c:	bf00      	nop
 810086e:	370c      	adds	r7, #12
 8100870:	46bd      	mov	sp, r7
 8100872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100876:	4770      	bx	lr
 8100878:	58026510 	.word	0x58026510

0810087c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810087c:	b580      	push	{r7, lr}
 810087e:	b084      	sub	sp, #16
 8100880:	af00      	add	r7, sp, #0
 8100882:	60f8      	str	r0, [r7, #12]
 8100884:	460b      	mov	r3, r1
 8100886:	607a      	str	r2, [r7, #4]
 8100888:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810088a:	4b37      	ldr	r3, [pc, #220]	@ (8100968 <HAL_PWREx_EnterSTOPMode+0xec>)
 810088c:	681b      	ldr	r3, [r3, #0]
 810088e:	f023 0201 	bic.w	r2, r3, #1
 8100892:	4935      	ldr	r1, [pc, #212]	@ (8100968 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100894:	68fb      	ldr	r3, [r7, #12]
 8100896:	4313      	orrs	r3, r2
 8100898:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810089a:	687b      	ldr	r3, [r7, #4]
 810089c:	2b00      	cmp	r3, #0
 810089e:	d123      	bne.n	81008e8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81008a0:	f7ff ffc8 	bl	8100834 <HAL_GetCurrentCPUID>
 81008a4:	4603      	mov	r3, r0
 81008a6:	2b03      	cmp	r3, #3
 81008a8:	d158      	bne.n	810095c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81008aa:	4b2f      	ldr	r3, [pc, #188]	@ (8100968 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008ac:	691b      	ldr	r3, [r3, #16]
 81008ae:	4a2e      	ldr	r2, [pc, #184]	@ (8100968 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008b0:	f023 0301 	bic.w	r3, r3, #1
 81008b4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81008b6:	4b2d      	ldr	r3, [pc, #180]	@ (810096c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008b8:	691b      	ldr	r3, [r3, #16]
 81008ba:	4a2c      	ldr	r2, [pc, #176]	@ (810096c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008bc:	f043 0304 	orr.w	r3, r3, #4
 81008c0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81008c2:	f3bf 8f4f 	dsb	sy
}
 81008c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81008c8:	f3bf 8f6f 	isb	sy
}
 81008cc:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81008ce:	7afb      	ldrb	r3, [r7, #11]
 81008d0:	2b01      	cmp	r3, #1
 81008d2:	d101      	bne.n	81008d8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81008d4:	bf30      	wfi
 81008d6:	e000      	b.n	81008da <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81008d8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81008da:	4b24      	ldr	r3, [pc, #144]	@ (810096c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008dc:	691b      	ldr	r3, [r3, #16]
 81008de:	4a23      	ldr	r2, [pc, #140]	@ (810096c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008e0:	f023 0304 	bic.w	r3, r3, #4
 81008e4:	6113      	str	r3, [r2, #16]
 81008e6:	e03c      	b.n	8100962 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81008e8:	687b      	ldr	r3, [r7, #4]
 81008ea:	2b01      	cmp	r3, #1
 81008ec:	d123      	bne.n	8100936 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81008ee:	f7ff ffa1 	bl	8100834 <HAL_GetCurrentCPUID>
 81008f2:	4603      	mov	r3, r0
 81008f4:	2b01      	cmp	r3, #1
 81008f6:	d133      	bne.n	8100960 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8100968 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008fa:	695b      	ldr	r3, [r3, #20]
 81008fc:	4a1a      	ldr	r2, [pc, #104]	@ (8100968 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008fe:	f023 0302 	bic.w	r3, r3, #2
 8100902:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100904:	4b19      	ldr	r3, [pc, #100]	@ (810096c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100906:	691b      	ldr	r3, [r3, #16]
 8100908:	4a18      	ldr	r2, [pc, #96]	@ (810096c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810090a:	f043 0304 	orr.w	r3, r3, #4
 810090e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100910:	f3bf 8f4f 	dsb	sy
}
 8100914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100916:	f3bf 8f6f 	isb	sy
}
 810091a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810091c:	7afb      	ldrb	r3, [r7, #11]
 810091e:	2b01      	cmp	r3, #1
 8100920:	d101      	bne.n	8100926 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100922:	bf30      	wfi
 8100924:	e000      	b.n	8100928 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100926:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100928:	4b10      	ldr	r3, [pc, #64]	@ (810096c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810092a:	691b      	ldr	r3, [r3, #16]
 810092c:	4a0f      	ldr	r2, [pc, #60]	@ (810096c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810092e:	f023 0304 	bic.w	r3, r3, #4
 8100932:	6113      	str	r3, [r2, #16]
 8100934:	e015      	b.n	8100962 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100936:	f7ff ff7d 	bl	8100834 <HAL_GetCurrentCPUID>
 810093a:	4603      	mov	r3, r0
 810093c:	2b03      	cmp	r3, #3
 810093e:	d106      	bne.n	810094e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100940:	4b09      	ldr	r3, [pc, #36]	@ (8100968 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100942:	691b      	ldr	r3, [r3, #16]
 8100944:	4a08      	ldr	r2, [pc, #32]	@ (8100968 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100946:	f023 0304 	bic.w	r3, r3, #4
 810094a:	6113      	str	r3, [r2, #16]
 810094c:	e009      	b.n	8100962 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810094e:	4b06      	ldr	r3, [pc, #24]	@ (8100968 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100950:	695b      	ldr	r3, [r3, #20]
 8100952:	4a05      	ldr	r2, [pc, #20]	@ (8100968 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100954:	f023 0304 	bic.w	r3, r3, #4
 8100958:	6153      	str	r3, [r2, #20]
 810095a:	e002      	b.n	8100962 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810095c:	bf00      	nop
 810095e:	e000      	b.n	8100962 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100960:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100962:	3710      	adds	r7, #16
 8100964:	46bd      	mov	sp, r7
 8100966:	bd80      	pop	{r7, pc}
 8100968:	58024800 	.word	0x58024800
 810096c:	e000ed00 	.word	0xe000ed00

08100970 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100970:	b580      	push	{r7, lr}
 8100972:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100974:	f7ff ff5e 	bl	8100834 <HAL_GetCurrentCPUID>
 8100978:	4603      	mov	r3, r0
 810097a:	2b03      	cmp	r3, #3
 810097c:	d101      	bne.n	8100982 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810097e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100980:	e001      	b.n	8100986 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100982:	bf40      	sev
    __WFE ();
 8100984:	bf20      	wfe
}
 8100986:	bf00      	nop
 8100988:	bd80      	pop	{r7, pc}
	...

0810098c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810098c:	b480      	push	{r7}
 810098e:	b089      	sub	sp, #36	@ 0x24
 8100990:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100992:	4bb3      	ldr	r3, [pc, #716]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100994:	691b      	ldr	r3, [r3, #16]
 8100996:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810099a:	2b18      	cmp	r3, #24
 810099c:	f200 8155 	bhi.w	8100c4a <HAL_RCC_GetSysClockFreq+0x2be>
 81009a0:	a201      	add	r2, pc, #4	@ (adr r2, 81009a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81009a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81009a6:	bf00      	nop
 81009a8:	08100a0d 	.word	0x08100a0d
 81009ac:	08100c4b 	.word	0x08100c4b
 81009b0:	08100c4b 	.word	0x08100c4b
 81009b4:	08100c4b 	.word	0x08100c4b
 81009b8:	08100c4b 	.word	0x08100c4b
 81009bc:	08100c4b 	.word	0x08100c4b
 81009c0:	08100c4b 	.word	0x08100c4b
 81009c4:	08100c4b 	.word	0x08100c4b
 81009c8:	08100a33 	.word	0x08100a33
 81009cc:	08100c4b 	.word	0x08100c4b
 81009d0:	08100c4b 	.word	0x08100c4b
 81009d4:	08100c4b 	.word	0x08100c4b
 81009d8:	08100c4b 	.word	0x08100c4b
 81009dc:	08100c4b 	.word	0x08100c4b
 81009e0:	08100c4b 	.word	0x08100c4b
 81009e4:	08100c4b 	.word	0x08100c4b
 81009e8:	08100a39 	.word	0x08100a39
 81009ec:	08100c4b 	.word	0x08100c4b
 81009f0:	08100c4b 	.word	0x08100c4b
 81009f4:	08100c4b 	.word	0x08100c4b
 81009f8:	08100c4b 	.word	0x08100c4b
 81009fc:	08100c4b 	.word	0x08100c4b
 8100a00:	08100c4b 	.word	0x08100c4b
 8100a04:	08100c4b 	.word	0x08100c4b
 8100a08:	08100a3f 	.word	0x08100a3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100a0c:	4b94      	ldr	r3, [pc, #592]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a0e:	681b      	ldr	r3, [r3, #0]
 8100a10:	f003 0320 	and.w	r3, r3, #32
 8100a14:	2b00      	cmp	r3, #0
 8100a16:	d009      	beq.n	8100a2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100a18:	4b91      	ldr	r3, [pc, #580]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a1a:	681b      	ldr	r3, [r3, #0]
 8100a1c:	08db      	lsrs	r3, r3, #3
 8100a1e:	f003 0303 	and.w	r3, r3, #3
 8100a22:	4a90      	ldr	r2, [pc, #576]	@ (8100c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100a24:	fa22 f303 	lsr.w	r3, r2, r3
 8100a28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8100a2a:	e111      	b.n	8100c50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100a2c:	4b8d      	ldr	r3, [pc, #564]	@ (8100c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100a2e:	61bb      	str	r3, [r7, #24]
      break;
 8100a30:	e10e      	b.n	8100c50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8100a32:	4b8d      	ldr	r3, [pc, #564]	@ (8100c68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100a34:	61bb      	str	r3, [r7, #24]
      break;
 8100a36:	e10b      	b.n	8100c50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8100a38:	4b8c      	ldr	r3, [pc, #560]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100a3a:	61bb      	str	r3, [r7, #24]
      break;
 8100a3c:	e108      	b.n	8100c50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100a3e:	4b88      	ldr	r3, [pc, #544]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100a42:	f003 0303 	and.w	r3, r3, #3
 8100a46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100a48:	4b85      	ldr	r3, [pc, #532]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100a4c:	091b      	lsrs	r3, r3, #4
 8100a4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8100a52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100a54:	4b82      	ldr	r3, [pc, #520]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100a58:	f003 0301 	and.w	r3, r3, #1
 8100a5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8100a5e:	4b80      	ldr	r3, [pc, #512]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100a62:	08db      	lsrs	r3, r3, #3
 8100a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100a68:	68fa      	ldr	r2, [r7, #12]
 8100a6a:	fb02 f303 	mul.w	r3, r2, r3
 8100a6e:	ee07 3a90 	vmov	s15, r3
 8100a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100a76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8100a7a:	693b      	ldr	r3, [r7, #16]
 8100a7c:	2b00      	cmp	r3, #0
 8100a7e:	f000 80e1 	beq.w	8100c44 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8100a82:	697b      	ldr	r3, [r7, #20]
 8100a84:	2b02      	cmp	r3, #2
 8100a86:	f000 8083 	beq.w	8100b90 <HAL_RCC_GetSysClockFreq+0x204>
 8100a8a:	697b      	ldr	r3, [r7, #20]
 8100a8c:	2b02      	cmp	r3, #2
 8100a8e:	f200 80a1 	bhi.w	8100bd4 <HAL_RCC_GetSysClockFreq+0x248>
 8100a92:	697b      	ldr	r3, [r7, #20]
 8100a94:	2b00      	cmp	r3, #0
 8100a96:	d003      	beq.n	8100aa0 <HAL_RCC_GetSysClockFreq+0x114>
 8100a98:	697b      	ldr	r3, [r7, #20]
 8100a9a:	2b01      	cmp	r3, #1
 8100a9c:	d056      	beq.n	8100b4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8100a9e:	e099      	b.n	8100bd4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100aa2:	681b      	ldr	r3, [r3, #0]
 8100aa4:	f003 0320 	and.w	r3, r3, #32
 8100aa8:	2b00      	cmp	r3, #0
 8100aaa:	d02d      	beq.n	8100b08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100aac:	4b6c      	ldr	r3, [pc, #432]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100aae:	681b      	ldr	r3, [r3, #0]
 8100ab0:	08db      	lsrs	r3, r3, #3
 8100ab2:	f003 0303 	and.w	r3, r3, #3
 8100ab6:	4a6b      	ldr	r2, [pc, #428]	@ (8100c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8100abc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100abe:	687b      	ldr	r3, [r7, #4]
 8100ac0:	ee07 3a90 	vmov	s15, r3
 8100ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100ac8:	693b      	ldr	r3, [r7, #16]
 8100aca:	ee07 3a90 	vmov	s15, r3
 8100ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100ad6:	4b62      	ldr	r3, [pc, #392]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100ade:	ee07 3a90 	vmov	s15, r3
 8100ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8100aea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8100c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8100b06:	e087      	b.n	8100c18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100b08:	693b      	ldr	r3, [r7, #16]
 8100b0a:	ee07 3a90 	vmov	s15, r3
 8100b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b12:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8100c74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b1a:	4b51      	ldr	r3, [pc, #324]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b22:	ee07 3a90 	vmov	s15, r3
 8100b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b2e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8100c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100b4a:	e065      	b.n	8100c18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100b4c:	693b      	ldr	r3, [r7, #16]
 8100b4e:	ee07 3a90 	vmov	s15, r3
 8100b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b56:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8100c78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b5e:	4b40      	ldr	r3, [pc, #256]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b66:	ee07 3a90 	vmov	s15, r3
 8100b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b72:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8100c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100b8e:	e043      	b.n	8100c18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100b90:	693b      	ldr	r3, [r7, #16]
 8100b92:	ee07 3a90 	vmov	s15, r3
 8100b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b9a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8100c7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8100b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100baa:	ee07 3a90 	vmov	s15, r3
 8100bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8100bb6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8100c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100bce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100bd2:	e021      	b.n	8100c18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100bd4:	693b      	ldr	r3, [r7, #16]
 8100bd6:	ee07 3a90 	vmov	s15, r3
 8100bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100bde:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8100c78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100be6:	4b1e      	ldr	r3, [pc, #120]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100bee:	ee07 3a90 	vmov	s15, r3
 8100bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8100bfa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8100c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100c12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100c16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8100c18:	4b11      	ldr	r3, [pc, #68]	@ (8100c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100c1c:	0a5b      	lsrs	r3, r3, #9
 8100c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8100c22:	3301      	adds	r3, #1
 8100c24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8100c26:	683b      	ldr	r3, [r7, #0]
 8100c28:	ee07 3a90 	vmov	s15, r3
 8100c2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100c30:	edd7 6a07 	vldr	s13, [r7, #28]
 8100c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100c3c:	ee17 3a90 	vmov	r3, s15
 8100c40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8100c42:	e005      	b.n	8100c50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8100c44:	2300      	movs	r3, #0
 8100c46:	61bb      	str	r3, [r7, #24]
      break;
 8100c48:	e002      	b.n	8100c50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8100c4a:	4b07      	ldr	r3, [pc, #28]	@ (8100c68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100c4c:	61bb      	str	r3, [r7, #24]
      break;
 8100c4e:	bf00      	nop
  }

  return sysclockfreq;
 8100c50:	69bb      	ldr	r3, [r7, #24]
}
 8100c52:	4618      	mov	r0, r3
 8100c54:	3724      	adds	r7, #36	@ 0x24
 8100c56:	46bd      	mov	sp, r7
 8100c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c5c:	4770      	bx	lr
 8100c5e:	bf00      	nop
 8100c60:	58024400 	.word	0x58024400
 8100c64:	03d09000 	.word	0x03d09000
 8100c68:	003d0900 	.word	0x003d0900
 8100c6c:	017d7840 	.word	0x017d7840
 8100c70:	46000000 	.word	0x46000000
 8100c74:	4c742400 	.word	0x4c742400
 8100c78:	4a742400 	.word	0x4a742400
 8100c7c:	4bbebc20 	.word	0x4bbebc20

08100c80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8100c80:	b580      	push	{r7, lr}
 8100c82:	b08a      	sub	sp, #40	@ 0x28
 8100c84:	af02      	add	r7, sp, #8
 8100c86:	60f8      	str	r0, [r7, #12]
 8100c88:	60b9      	str	r1, [r7, #8]
 8100c8a:	603b      	str	r3, [r7, #0]
 8100c8c:	4613      	mov	r3, r2
 8100c8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8100c90:	68fb      	ldr	r3, [r7, #12]
 8100c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100c96:	2b20      	cmp	r3, #32
 8100c98:	d17b      	bne.n	8100d92 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8100c9a:	68bb      	ldr	r3, [r7, #8]
 8100c9c:	2b00      	cmp	r3, #0
 8100c9e:	d002      	beq.n	8100ca6 <HAL_UART_Transmit+0x26>
 8100ca0:	88fb      	ldrh	r3, [r7, #6]
 8100ca2:	2b00      	cmp	r3, #0
 8100ca4:	d101      	bne.n	8100caa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8100ca6:	2301      	movs	r3, #1
 8100ca8:	e074      	b.n	8100d94 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8100caa:	68fb      	ldr	r3, [r7, #12]
 8100cac:	2200      	movs	r2, #0
 8100cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8100cb2:	68fb      	ldr	r3, [r7, #12]
 8100cb4:	2221      	movs	r2, #33	@ 0x21
 8100cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8100cba:	f7ff fca7 	bl	810060c <HAL_GetTick>
 8100cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8100cc0:	68fb      	ldr	r3, [r7, #12]
 8100cc2:	88fa      	ldrh	r2, [r7, #6]
 8100cc4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8100cc8:	68fb      	ldr	r3, [r7, #12]
 8100cca:	88fa      	ldrh	r2, [r7, #6]
 8100ccc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8100cd0:	68fb      	ldr	r3, [r7, #12]
 8100cd2:	689b      	ldr	r3, [r3, #8]
 8100cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8100cd8:	d108      	bne.n	8100cec <HAL_UART_Transmit+0x6c>
 8100cda:	68fb      	ldr	r3, [r7, #12]
 8100cdc:	691b      	ldr	r3, [r3, #16]
 8100cde:	2b00      	cmp	r3, #0
 8100ce0:	d104      	bne.n	8100cec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8100ce2:	2300      	movs	r3, #0
 8100ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8100ce6:	68bb      	ldr	r3, [r7, #8]
 8100ce8:	61bb      	str	r3, [r7, #24]
 8100cea:	e003      	b.n	8100cf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8100cec:	68bb      	ldr	r3, [r7, #8]
 8100cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8100cf0:	2300      	movs	r3, #0
 8100cf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8100cf4:	e030      	b.n	8100d58 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8100cf6:	683b      	ldr	r3, [r7, #0]
 8100cf8:	9300      	str	r3, [sp, #0]
 8100cfa:	697b      	ldr	r3, [r7, #20]
 8100cfc:	2200      	movs	r2, #0
 8100cfe:	2180      	movs	r1, #128	@ 0x80
 8100d00:	68f8      	ldr	r0, [r7, #12]
 8100d02:	f000 f84b 	bl	8100d9c <UART_WaitOnFlagUntilTimeout>
 8100d06:	4603      	mov	r3, r0
 8100d08:	2b00      	cmp	r3, #0
 8100d0a:	d005      	beq.n	8100d18 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8100d0c:	68fb      	ldr	r3, [r7, #12]
 8100d0e:	2220      	movs	r2, #32
 8100d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8100d14:	2303      	movs	r3, #3
 8100d16:	e03d      	b.n	8100d94 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8100d18:	69fb      	ldr	r3, [r7, #28]
 8100d1a:	2b00      	cmp	r3, #0
 8100d1c:	d10b      	bne.n	8100d36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8100d1e:	69bb      	ldr	r3, [r7, #24]
 8100d20:	881b      	ldrh	r3, [r3, #0]
 8100d22:	461a      	mov	r2, r3
 8100d24:	68fb      	ldr	r3, [r7, #12]
 8100d26:	681b      	ldr	r3, [r3, #0]
 8100d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8100d2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8100d2e:	69bb      	ldr	r3, [r7, #24]
 8100d30:	3302      	adds	r3, #2
 8100d32:	61bb      	str	r3, [r7, #24]
 8100d34:	e007      	b.n	8100d46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8100d36:	69fb      	ldr	r3, [r7, #28]
 8100d38:	781a      	ldrb	r2, [r3, #0]
 8100d3a:	68fb      	ldr	r3, [r7, #12]
 8100d3c:	681b      	ldr	r3, [r3, #0]
 8100d3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8100d40:	69fb      	ldr	r3, [r7, #28]
 8100d42:	3301      	adds	r3, #1
 8100d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8100d46:	68fb      	ldr	r3, [r7, #12]
 8100d48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8100d4c:	b29b      	uxth	r3, r3
 8100d4e:	3b01      	subs	r3, #1
 8100d50:	b29a      	uxth	r2, r3
 8100d52:	68fb      	ldr	r3, [r7, #12]
 8100d54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8100d58:	68fb      	ldr	r3, [r7, #12]
 8100d5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8100d5e:	b29b      	uxth	r3, r3
 8100d60:	2b00      	cmp	r3, #0
 8100d62:	d1c8      	bne.n	8100cf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8100d64:	683b      	ldr	r3, [r7, #0]
 8100d66:	9300      	str	r3, [sp, #0]
 8100d68:	697b      	ldr	r3, [r7, #20]
 8100d6a:	2200      	movs	r2, #0
 8100d6c:	2140      	movs	r1, #64	@ 0x40
 8100d6e:	68f8      	ldr	r0, [r7, #12]
 8100d70:	f000 f814 	bl	8100d9c <UART_WaitOnFlagUntilTimeout>
 8100d74:	4603      	mov	r3, r0
 8100d76:	2b00      	cmp	r3, #0
 8100d78:	d005      	beq.n	8100d86 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8100d7a:	68fb      	ldr	r3, [r7, #12]
 8100d7c:	2220      	movs	r2, #32
 8100d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8100d82:	2303      	movs	r3, #3
 8100d84:	e006      	b.n	8100d94 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8100d86:	68fb      	ldr	r3, [r7, #12]
 8100d88:	2220      	movs	r2, #32
 8100d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8100d8e:	2300      	movs	r3, #0
 8100d90:	e000      	b.n	8100d94 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8100d92:	2302      	movs	r3, #2
  }
}
 8100d94:	4618      	mov	r0, r3
 8100d96:	3720      	adds	r7, #32
 8100d98:	46bd      	mov	sp, r7
 8100d9a:	bd80      	pop	{r7, pc}

08100d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8100d9c:	b580      	push	{r7, lr}
 8100d9e:	b084      	sub	sp, #16
 8100da0:	af00      	add	r7, sp, #0
 8100da2:	60f8      	str	r0, [r7, #12]
 8100da4:	60b9      	str	r1, [r7, #8]
 8100da6:	603b      	str	r3, [r7, #0]
 8100da8:	4613      	mov	r3, r2
 8100daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8100dac:	e04f      	b.n	8100e4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8100dae:	69bb      	ldr	r3, [r7, #24]
 8100db0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8100db4:	d04b      	beq.n	8100e4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8100db6:	f7ff fc29 	bl	810060c <HAL_GetTick>
 8100dba:	4602      	mov	r2, r0
 8100dbc:	683b      	ldr	r3, [r7, #0]
 8100dbe:	1ad3      	subs	r3, r2, r3
 8100dc0:	69ba      	ldr	r2, [r7, #24]
 8100dc2:	429a      	cmp	r2, r3
 8100dc4:	d302      	bcc.n	8100dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8100dc6:	69bb      	ldr	r3, [r7, #24]
 8100dc8:	2b00      	cmp	r3, #0
 8100dca:	d101      	bne.n	8100dd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8100dcc:	2303      	movs	r3, #3
 8100dce:	e04e      	b.n	8100e6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8100dd0:	68fb      	ldr	r3, [r7, #12]
 8100dd2:	681b      	ldr	r3, [r3, #0]
 8100dd4:	681b      	ldr	r3, [r3, #0]
 8100dd6:	f003 0304 	and.w	r3, r3, #4
 8100dda:	2b00      	cmp	r3, #0
 8100ddc:	d037      	beq.n	8100e4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8100dde:	68bb      	ldr	r3, [r7, #8]
 8100de0:	2b80      	cmp	r3, #128	@ 0x80
 8100de2:	d034      	beq.n	8100e4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8100de4:	68bb      	ldr	r3, [r7, #8]
 8100de6:	2b40      	cmp	r3, #64	@ 0x40
 8100de8:	d031      	beq.n	8100e4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8100dea:	68fb      	ldr	r3, [r7, #12]
 8100dec:	681b      	ldr	r3, [r3, #0]
 8100dee:	69db      	ldr	r3, [r3, #28]
 8100df0:	f003 0308 	and.w	r3, r3, #8
 8100df4:	2b08      	cmp	r3, #8
 8100df6:	d110      	bne.n	8100e1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8100df8:	68fb      	ldr	r3, [r7, #12]
 8100dfa:	681b      	ldr	r3, [r3, #0]
 8100dfc:	2208      	movs	r2, #8
 8100dfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8100e00:	68f8      	ldr	r0, [r7, #12]
 8100e02:	f000 f838 	bl	8100e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8100e06:	68fb      	ldr	r3, [r7, #12]
 8100e08:	2208      	movs	r2, #8
 8100e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8100e0e:	68fb      	ldr	r3, [r7, #12]
 8100e10:	2200      	movs	r2, #0
 8100e12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8100e16:	2301      	movs	r3, #1
 8100e18:	e029      	b.n	8100e6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8100e1a:	68fb      	ldr	r3, [r7, #12]
 8100e1c:	681b      	ldr	r3, [r3, #0]
 8100e1e:	69db      	ldr	r3, [r3, #28]
 8100e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8100e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8100e28:	d111      	bne.n	8100e4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8100e2a:	68fb      	ldr	r3, [r7, #12]
 8100e2c:	681b      	ldr	r3, [r3, #0]
 8100e2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8100e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8100e34:	68f8      	ldr	r0, [r7, #12]
 8100e36:	f000 f81e 	bl	8100e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8100e3a:	68fb      	ldr	r3, [r7, #12]
 8100e3c:	2220      	movs	r2, #32
 8100e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8100e42:	68fb      	ldr	r3, [r7, #12]
 8100e44:	2200      	movs	r2, #0
 8100e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8100e4a:	2303      	movs	r3, #3
 8100e4c:	e00f      	b.n	8100e6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8100e4e:	68fb      	ldr	r3, [r7, #12]
 8100e50:	681b      	ldr	r3, [r3, #0]
 8100e52:	69da      	ldr	r2, [r3, #28]
 8100e54:	68bb      	ldr	r3, [r7, #8]
 8100e56:	4013      	ands	r3, r2
 8100e58:	68ba      	ldr	r2, [r7, #8]
 8100e5a:	429a      	cmp	r2, r3
 8100e5c:	bf0c      	ite	eq
 8100e5e:	2301      	moveq	r3, #1
 8100e60:	2300      	movne	r3, #0
 8100e62:	b2db      	uxtb	r3, r3
 8100e64:	461a      	mov	r2, r3
 8100e66:	79fb      	ldrb	r3, [r7, #7]
 8100e68:	429a      	cmp	r2, r3
 8100e6a:	d0a0      	beq.n	8100dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8100e6c:	2300      	movs	r3, #0
}
 8100e6e:	4618      	mov	r0, r3
 8100e70:	3710      	adds	r7, #16
 8100e72:	46bd      	mov	sp, r7
 8100e74:	bd80      	pop	{r7, pc}

08100e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8100e76:	b480      	push	{r7}
 8100e78:	b095      	sub	sp, #84	@ 0x54
 8100e7a:	af00      	add	r7, sp, #0
 8100e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8100e7e:	687b      	ldr	r3, [r7, #4]
 8100e80:	681b      	ldr	r3, [r3, #0]
 8100e82:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8100e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8100e86:	e853 3f00 	ldrex	r3, [r3]
 8100e8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8100e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8100e8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8100e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8100e94:	687b      	ldr	r3, [r7, #4]
 8100e96:	681b      	ldr	r3, [r3, #0]
 8100e98:	461a      	mov	r2, r3
 8100e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8100e9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8100e9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8100ea0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8100ea2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8100ea4:	e841 2300 	strex	r3, r2, [r1]
 8100ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8100eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8100eac:	2b00      	cmp	r3, #0
 8100eae:	d1e6      	bne.n	8100e7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8100eb0:	687b      	ldr	r3, [r7, #4]
 8100eb2:	681b      	ldr	r3, [r3, #0]
 8100eb4:	3308      	adds	r3, #8
 8100eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8100eb8:	6a3b      	ldr	r3, [r7, #32]
 8100eba:	e853 3f00 	ldrex	r3, [r3]
 8100ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8100ec0:	69fb      	ldr	r3, [r7, #28]
 8100ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8100ec6:	f023 0301 	bic.w	r3, r3, #1
 8100eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8100ecc:	687b      	ldr	r3, [r7, #4]
 8100ece:	681b      	ldr	r3, [r3, #0]
 8100ed0:	3308      	adds	r3, #8
 8100ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8100ed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8100ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8100ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8100eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8100edc:	e841 2300 	strex	r3, r2, [r1]
 8100ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8100ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100ee4:	2b00      	cmp	r3, #0
 8100ee6:	d1e3      	bne.n	8100eb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8100ee8:	687b      	ldr	r3, [r7, #4]
 8100eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8100eec:	2b01      	cmp	r3, #1
 8100eee:	d118      	bne.n	8100f22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8100ef0:	687b      	ldr	r3, [r7, #4]
 8100ef2:	681b      	ldr	r3, [r3, #0]
 8100ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8100ef6:	68fb      	ldr	r3, [r7, #12]
 8100ef8:	e853 3f00 	ldrex	r3, [r3]
 8100efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8100efe:	68bb      	ldr	r3, [r7, #8]
 8100f00:	f023 0310 	bic.w	r3, r3, #16
 8100f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8100f06:	687b      	ldr	r3, [r7, #4]
 8100f08:	681b      	ldr	r3, [r3, #0]
 8100f0a:	461a      	mov	r2, r3
 8100f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8100f0e:	61bb      	str	r3, [r7, #24]
 8100f10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8100f12:	6979      	ldr	r1, [r7, #20]
 8100f14:	69ba      	ldr	r2, [r7, #24]
 8100f16:	e841 2300 	strex	r3, r2, [r1]
 8100f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8100f1c:	693b      	ldr	r3, [r7, #16]
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	d1e6      	bne.n	8100ef0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8100f22:	687b      	ldr	r3, [r7, #4]
 8100f24:	2220      	movs	r2, #32
 8100f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	2200      	movs	r2, #0
 8100f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8100f30:	687b      	ldr	r3, [r7, #4]
 8100f32:	2200      	movs	r2, #0
 8100f34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8100f36:	bf00      	nop
 8100f38:	3754      	adds	r7, #84	@ 0x54
 8100f3a:	46bd      	mov	sp, r7
 8100f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f40:	4770      	bx	lr
	...

08100f44 <__libc_init_array>:
 8100f44:	b570      	push	{r4, r5, r6, lr}
 8100f46:	4d0d      	ldr	r5, [pc, #52]	@ (8100f7c <__libc_init_array+0x38>)
 8100f48:	4c0d      	ldr	r4, [pc, #52]	@ (8100f80 <__libc_init_array+0x3c>)
 8100f4a:	1b64      	subs	r4, r4, r5
 8100f4c:	10a4      	asrs	r4, r4, #2
 8100f4e:	2600      	movs	r6, #0
 8100f50:	42a6      	cmp	r6, r4
 8100f52:	d109      	bne.n	8100f68 <__libc_init_array+0x24>
 8100f54:	4d0b      	ldr	r5, [pc, #44]	@ (8100f84 <__libc_init_array+0x40>)
 8100f56:	4c0c      	ldr	r4, [pc, #48]	@ (8100f88 <__libc_init_array+0x44>)
 8100f58:	f000 f818 	bl	8100f8c <_init>
 8100f5c:	1b64      	subs	r4, r4, r5
 8100f5e:	10a4      	asrs	r4, r4, #2
 8100f60:	2600      	movs	r6, #0
 8100f62:	42a6      	cmp	r6, r4
 8100f64:	d105      	bne.n	8100f72 <__libc_init_array+0x2e>
 8100f66:	bd70      	pop	{r4, r5, r6, pc}
 8100f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8100f6c:	4798      	blx	r3
 8100f6e:	3601      	adds	r6, #1
 8100f70:	e7ee      	b.n	8100f50 <__libc_init_array+0xc>
 8100f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8100f76:	4798      	blx	r3
 8100f78:	3601      	adds	r6, #1
 8100f7a:	e7f2      	b.n	8100f62 <__libc_init_array+0x1e>
 8100f7c:	08100fbc 	.word	0x08100fbc
 8100f80:	08100fbc 	.word	0x08100fbc
 8100f84:	08100fbc 	.word	0x08100fbc
 8100f88:	08100fc0 	.word	0x08100fc0

08100f8c <_init>:
 8100f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100f8e:	bf00      	nop
 8100f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100f92:	bc08      	pop	{r3}
 8100f94:	469e      	mov	lr, r3
 8100f96:	4770      	bx	lr

08100f98 <_fini>:
 8100f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100f9a:	bf00      	nop
 8100f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100f9e:	bc08      	pop	{r3}
 8100fa0:	469e      	mov	lr, r3
 8100fa2:	4770      	bx	lr
