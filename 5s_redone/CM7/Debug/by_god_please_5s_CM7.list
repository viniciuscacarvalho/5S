
by_god_please_5s_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c614  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800c8b4  0800c8b4  0000d8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9a0  0800c9a0  0000e06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c9a0  0800c9a0  0000d9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9a8  0800c9a8  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9a8  0800c9a8  0000d9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c9ac  0800c9ac  0000d9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  24000000  0800c9b0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032f8  24000070  0800ca1c  0000e070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24003368  0800ca1c  0000e368  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c40a  00000000  00000000  0000e09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c9  00000000  00000000  0002a4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0002dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd8  00000000  00000000  0002f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f3a7  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e739  00000000  00000000  0006f58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00199a8b  00000000  00000000  0008dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00227753  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f34  00000000  00000000  00227798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0022d6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c89c 	.word	0x0800c89c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800c89c 	.word	0x0800c89c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	@ 0x28
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800085c:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <MX_ADC1_Init+0xec>)
 800085e:	4a32      	ldr	r2, [pc, #200]	@ (8000928 <MX_ADC1_Init+0xf0>)
 8000860:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000864:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000868:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800086a:	4b2e      	ldr	r3, [pc, #184]	@ (8000924 <MX_ADC1_Init+0xec>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000870:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000878:	2204      	movs	r2, #4
 800087a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800087c:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <MX_ADC1_Init+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000882:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000884:	2200      	movs	r2, #0
 8000886:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000888:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <MX_ADC1_Init+0xec>)
 800088a:	2201      	movs	r2, #1
 800088c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000890:	2200      	movs	r2, #0
 8000892:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <MX_ADC1_Init+0xec>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089a:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <MX_ADC1_Init+0xec>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008a0:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008bc:	2201      	movs	r2, #1
 80008be:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c0:	4818      	ldr	r0, [pc, #96]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008c2:	f000 ff9b 	bl	80017fc <HAL_ADC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008cc:	f000 fa78 	bl	8000dc0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4812      	ldr	r0, [pc, #72]	@ (8000924 <MX_ADC1_Init+0xec>)
 80008dc:	f001 fd52 	bl	8002384 <HAL_ADCEx_MultiModeConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008e6:	f000 fa6b 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_ADC1_Init+0xf4>)
 80008ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ee:	2306      	movs	r3, #6
 80008f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80008fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008fc:	2304      	movs	r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_ADC1_Init+0xec>)
 800090e:	f001 f917 	bl	8001b40 <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000918:	f000 fa52 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	@ 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2400008c 	.word	0x2400008c
 8000928:	40022000 	.word	0x40022000
 800092c:	43210000 	.word	0x43210000

08000930 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0ba      	sub	sp, #232	@ 0xe8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	22c0      	movs	r2, #192	@ 0xc0
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f00b f86b 	bl	800ba2c <memset>
  if(adcHandle->Instance==ADC1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a08 <HAL_ADC_MspInit+0xd8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d14f      	bne.n	8000a00 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000960:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000970:	230a      	movs	r3, #10
 8000972:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000980:	23c0      	movs	r3, #192	@ 0xc0
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000984:	2320      	movs	r3, #32
 8000986:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	4618      	mov	r0, r3
 8000998:	f006 fa2e 	bl	8006df8 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80009a2:	f000 fa0d 	bl	8000dc0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009ac:	4a17      	ldr	r2, [pc, #92]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009ae:	f043 0320 	orr.w	r3, r3, #32
 80009b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ca:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <HAL_ADC_MspInit+0xe0>)
 80009fc:	f002 fc22 	bl	8003244 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a00:	bf00      	nop
 8000a02:	37e8      	adds	r7, #232	@ 0xe8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40022000 	.word	0x40022000
 8000a0c:	58024400 	.word	0x58024400
 8000a10:	58020000 	.word	0x58020000

08000a14 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b28      	ldr	r3, [pc, #160]	@ (8000acc <MX_GPIO_Init+0xb8>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a30:	4a26      	ldr	r2, [pc, #152]	@ (8000acc <MX_GPIO_Init+0xb8>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3a:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <MX_GPIO_Init+0xb8>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a48:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <MX_GPIO_Init+0xb8>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000acc <MX_GPIO_Init+0xb8>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a58:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <MX_GPIO_Init+0xb8>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <MX_GPIO_Init+0xb8>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	4a17      	ldr	r2, [pc, #92]	@ (8000acc <MX_GPIO_Init+0xb8>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <MX_GPIO_Init+0xb8>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_GPIO_Init+0xb8>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	4a10      	ldr	r2, [pc, #64]	@ (8000acc <MX_GPIO_Init+0xb8>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a94:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <MX_GPIO_Init+0xb8>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000aa2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ab4:	230a      	movs	r3, #10
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000ac0:	f002 fbc0 	bl	8003244 <HAL_GPIO_Init>

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	@ 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	58024400 	.word	0x58024400
 8000ad0:	58020000 	.word	0x58020000

08000ad4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <MX_I2C1_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <MX_I2C1_Init+0x7c>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000af6:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b0e:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b10:	f002 fd76 	bl	8003600 <HAL_I2C_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b1a:	f000 f951 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b22:	f005 f891 	bl	8005c48 <HAL_I2CEx_ConfigAnalogFilter>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f000 f948 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b34:	f005 f8d3 	bl	8005cde <HAL_I2CEx_ConfigDigitalFilter>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f000 f93f 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	240000f0 	.word	0x240000f0
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	00707cbb 	.word	0x00707cbb

08000b54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0ba      	sub	sp, #232	@ 0xe8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	22c0      	movs	r2, #192	@ 0xc0
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00a ff59 	bl	800ba2c <memset>
  if(i2cHandle->Instance==I2C1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8000c2c <HAL_I2C_MspInit+0xd8>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d14e      	bne.n	8000c22 <HAL_I2C_MspInit+0xce>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b84:	f04f 0208 	mov.w	r2, #8
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f006 f92c 	bl	8006df8 <HAL_RCCEx_PeriphCLKConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000ba6:	f000 f90b 	bl	8000dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <HAL_I2C_MspInit+0xdc>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c30 <HAL_I2C_MspInit+0xdc>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bba:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <HAL_I2C_MspInit+0xdc>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bc8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd0:	2312      	movs	r3, #18
 8000bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be2:	2304      	movs	r3, #4
 8000be4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4811      	ldr	r0, [pc, #68]	@ (8000c34 <HAL_I2C_MspInit+0xe0>)
 8000bf0:	f002 fb28 	bl	8003244 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <HAL_I2C_MspInit+0xdc>)
 8000bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <HAL_I2C_MspInit+0xdc>)
 8000bfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c04:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_I2C_MspInit+0xdc>)
 8000c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	201f      	movs	r0, #31
 8000c18:	f001 fd6d 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c1c:	201f      	movs	r0, #31
 8000c1e:	f001 fd84 	bl	800272a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c22:	bf00      	nop
 8000c24:	37e8      	adds	r7, #232	@ 0xe8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	58024400 	.word	0x58024400
 8000c34:	58020400 	.word	0x58020400

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c42:	607b      	str	r3, [r7, #4]
  //}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f000 fb7e 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f83c 	bl	8000cc4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <main+0x88>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c52:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc0 <main+0x88>)
 8000c54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <main+0x88>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f002 fc9a 	bl	80035a4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c70:	2100      	movs	r1, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	f002 fcb0 	bl	80035d8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c7c:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c7e:	bf00      	nop
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <main+0x88>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d104      	bne.n	8000c96 <main+0x5e>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	1e5a      	subs	r2, r3, #1
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	dcf4      	bgt.n	8000c80 <main+0x48>
if ( timeout < 0 )
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	da01      	bge.n	8000ca0 <main+0x68>
{
Error_Handler();
 8000c9c:	f000 f890 	bl	8000dc0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f7ff feb8 	bl	8000a14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ca4:	f7ff fdc8 	bl	8000838 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ca8:	f7ff ff14 	bl	8000ad4 <MX_I2C1_Init>
  //MX_SDMMC1_SD_Init();
  MX_USART1_UART_Init();
 8000cac:	f000 f9a6 	bl	8000ffc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000cb0:	f000 f9f0 	bl	8001094 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  manager_init();
 8000cb4:	f00a fb82 	bl	800b3bc <manager_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  manager_update();
 8000cb8:	f00a fb88 	bl	800b3cc <manager_update>
 8000cbc:	e7fc      	b.n	8000cb8 <main+0x80>
 8000cbe:	bf00      	nop
 8000cc0:	58024400 	.word	0x58024400

08000cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b09c      	sub	sp, #112	@ 0x70
 8000cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	224c      	movs	r2, #76	@ 0x4c
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f00a feaa 	bl	800ba2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2220      	movs	r2, #32
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f00a fea4 	bl	800ba2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f005 f847 	bl	8005d78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b32      	ldr	r3, [pc, #200]	@ (8000db8 <SystemClock_Config+0xf4>)
 8000cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cf2:	4a31      	ldr	r2, [pc, #196]	@ (8000db8 <SystemClock_Config+0xf4>)
 8000cf4:	f023 0301 	bic.w	r3, r3, #1
 8000cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000db8 <SystemClock_Config+0xf4>)
 8000cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <SystemClock_Config+0xf8>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000dbc <SystemClock_Config+0xf8>)
 8000d0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b29      	ldr	r3, [pc, #164]	@ (8000dbc <SystemClock_Config+0xf8>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d20:	bf00      	nop
 8000d22:	4b26      	ldr	r3, [pc, #152]	@ (8000dbc <SystemClock_Config+0xf8>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d2e:	d1f8      	bne.n	8000d22 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d30:	2302      	movs	r3, #2
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d38:	2340      	movs	r3, #64	@ 0x40
 8000d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d40:	2300      	movs	r3, #0
 8000d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d44:	2304      	movs	r3, #4
 8000d46:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d48:	230a      	movs	r3, #10
 8000d4a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d58:	230c      	movs	r3, #12
 8000d5a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f005 f85f 	bl	8005e2c <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d74:	f000 f824 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	233f      	movs	r3, #63	@ 0x3f
 8000d7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d8c:	2340      	movs	r3, #64	@ 0x40
 8000d8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f005 fc9e 	bl	80066e0 <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000daa:	f000 f809 	bl	8000dc0 <Error_Handler>
  }
}
 8000dae:	bf00      	nop
 8000db0:	3770      	adds	r7, #112	@ 0x70
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	58000400 	.word	0x58000400
 8000dbc:	58024800 	.word	0x58024800

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_MspInit+0x30>)
 8000dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd8:	4a08      	ldr	r2, [pc, #32]	@ (8000dfc <HAL_MspInit+0x30>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000de2:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_MspInit+0x30>)
 8000de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	58024400 	.word	0x58024400

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extended_tick++;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <SysTick_Handler+0x20>)
 8000e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5e:	1c50      	adds	r0, r2, #1
 8000e60:	f143 0100 	adc.w	r1, r3, #0
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <SysTick_Handler+0x20>)
 8000e66:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6a:	f000 fadd 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	24000148 	.word	0x24000148

08000e78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <I2C1_EV_IRQHandler+0x10>)
 8000e7e:	f002 ff05 	bl	8003c8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	240000f0 	.word	0x240000f0

08000e8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <USART1_IRQHandler+0x10>)
 8000e92:	f008 fd8d 	bl	80099b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	24000154 	.word	0x24000154

08000ea0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <USART3_IRQHandler+0x10>)
 8000ea6:	f008 fd83 	bl	80099b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	240001e8 	.word	0x240001e8

08000eb4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e00a      	b.n	8000edc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ec6:	f3af 8000 	nop.w
 8000eca:	4601      	mov	r1, r0
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	b2ca      	uxtb	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf0      	blt.n	8000ec6 <_read+0x12>
  }

  return len;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	e009      	b.n	8000f14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	60ba      	str	r2, [r7, #8]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf1      	blt.n	8000f00 <_write+0x12>
  }
  return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_close>:

int _close(int file)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <_isatty>:

int _isatty(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	@ (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f00a fd82 	bl	800bac8 <__errno>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	24080000 	.word	0x24080000
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	24000150 	.word	0x24000150
 8000ff8:	24003368 	.word	0x24003368

08000ffc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <MX_USART1_UART_Init+0x90>)
 8001002:	4a23      	ldr	r2, [pc, #140]	@ (8001090 <MX_USART1_UART_Init+0x94>)
 8001004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <MX_USART1_UART_Init+0x90>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MX_USART1_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <MX_USART1_UART_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_USART1_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_USART1_UART_Init+0x90>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_USART1_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_USART1_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_USART1_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_USART1_UART_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_USART1_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001044:	4811      	ldr	r0, [pc, #68]	@ (800108c <MX_USART1_UART_Init+0x90>)
 8001046:	f008 fbd5 	bl	80097f4 <HAL_UART_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001050:	f7ff feb6 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	480d      	ldr	r0, [pc, #52]	@ (800108c <MX_USART1_UART_Init+0x90>)
 8001058:	f00a f8bc 	bl	800b1d4 <HAL_UARTEx_SetTxFifoThreshold>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001062:	f7ff fead 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4808      	ldr	r0, [pc, #32]	@ (800108c <MX_USART1_UART_Init+0x90>)
 800106a:	f00a f8f1 	bl	800b250 <HAL_UARTEx_SetRxFifoThreshold>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001074:	f7ff fea4 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_USART1_UART_Init+0x90>)
 800107a:	f00a f872 	bl	800b162 <HAL_UARTEx_DisableFifoMode>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001084:	f7ff fe9c 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	24000154 	.word	0x24000154
 8001090:	40011000 	.word	0x40011000

08001094 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001098:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 800109a:	4a23      	ldr	r2, [pc, #140]	@ (8001128 <MX_USART3_UART_Init+0x94>)
 800109c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800109e:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010dc:	4811      	ldr	r0, [pc, #68]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010de:	f008 fb89 	bl	80097f4 <HAL_UART_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010e8:	f7ff fe6a 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	480d      	ldr	r0, [pc, #52]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010f0:	f00a f870 	bl	800b1d4 <HAL_UARTEx_SetTxFifoThreshold>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010fa:	f7ff fe61 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4808      	ldr	r0, [pc, #32]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 8001102:	f00a f8a5 	bl	800b250 <HAL_UARTEx_SetRxFifoThreshold>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800110c:	f7ff fe58 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 8001112:	f00a f826 	bl	800b162 <HAL_UARTEx_DisableFifoMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800111c:	f7ff fe50 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	240001e8 	.word	0x240001e8
 8001128:	40004800 	.word	0x40004800

0800112c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b0bc      	sub	sp, #240	@ 0xf0
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	22c0      	movs	r2, #192	@ 0xc0
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f00a fc6d 	bl	800ba2c <memset>
  if(uartHandle->Instance==USART1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a60      	ldr	r2, [pc, #384]	@ (80012d8 <HAL_UART_MspInit+0x1ac>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d164      	bne.n	8001226 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800115c:	f04f 0201 	mov.w	r2, #1
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	4618      	mov	r0, r3
 8001174:	f005 fe40 	bl	8006df8 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800117e:	f7ff fe1f 	bl	8000dc0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001182:	4b56      	ldr	r3, [pc, #344]	@ (80012dc <HAL_UART_MspInit+0x1b0>)
 8001184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001188:	4a54      	ldr	r2, [pc, #336]	@ (80012dc <HAL_UART_MspInit+0x1b0>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001192:	4b52      	ldr	r3, [pc, #328]	@ (80012dc <HAL_UART_MspInit+0x1b0>)
 8001194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b4e      	ldr	r3, [pc, #312]	@ (80012dc <HAL_UART_MspInit+0x1b0>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a6:	4a4d      	ldr	r2, [pc, #308]	@ (80012dc <HAL_UART_MspInit+0x1b0>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b0:	4b4a      	ldr	r3, [pc, #296]	@ (80012dc <HAL_UART_MspInit+0x1b0>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80011d8:	2304      	movs	r3, #4
 80011da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011e2:	4619      	mov	r1, r3
 80011e4:	483e      	ldr	r0, [pc, #248]	@ (80012e0 <HAL_UART_MspInit+0x1b4>)
 80011e6:	f002 f82d 	bl	8003244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011ea:	2340      	movs	r3, #64	@ 0x40
 80011ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001202:	2307      	movs	r3, #7
 8001204:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800120c:	4619      	mov	r1, r3
 800120e:	4834      	ldr	r0, [pc, #208]	@ (80012e0 <HAL_UART_MspInit+0x1b4>)
 8001210:	f002 f818 	bl	8003244 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	2025      	movs	r0, #37	@ 0x25
 800121a:	f001 fa6c 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800121e:	2025      	movs	r0, #37	@ 0x25
 8001220:	f001 fa83 	bl	800272a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001224:	e053      	b.n	80012ce <HAL_UART_MspInit+0x1a2>
  else if(uartHandle->Instance==USART3)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a2e      	ldr	r2, [pc, #184]	@ (80012e4 <HAL_UART_MspInit+0x1b8>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d14e      	bne.n	80012ce <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001230:	f04f 0202 	mov.w	r2, #2
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f005 fdd6 	bl	8006df8 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8001252:	f7ff fdb5 	bl	8000dc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001256:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <HAL_UART_MspInit+0x1b0>)
 8001258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800125c:	4a1f      	ldr	r2, [pc, #124]	@ (80012dc <HAL_UART_MspInit+0x1b0>)
 800125e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001262:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001266:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <HAL_UART_MspInit+0x1b0>)
 8001268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800126c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <HAL_UART_MspInit+0x1b0>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127a:	4a18      	ldr	r2, [pc, #96]	@ (80012dc <HAL_UART_MspInit+0x1b0>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_UART_MspInit+0x1b0>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001292:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012ac:	2307      	movs	r3, #7
 80012ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012b6:	4619      	mov	r1, r3
 80012b8:	480b      	ldr	r0, [pc, #44]	@ (80012e8 <HAL_UART_MspInit+0x1bc>)
 80012ba:	f001 ffc3 	bl	8003244 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2027      	movs	r0, #39	@ 0x27
 80012c4:	f001 fa17 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012c8:	2027      	movs	r0, #39	@ 0x27
 80012ca:	f001 fa2e 	bl	800272a <HAL_NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	37f0      	adds	r7, #240	@ 0xf0
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40011000 	.word	0x40011000
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020400 	.word	0x58020400
 80012e4:	40004800 	.word	0x40004800
 80012e8:	58020c00 	.word	0x58020c00

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001328 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80012f0:	f7ff fa8a 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012f4:	f7ff f9da 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012fa:	490d      	ldr	r1, [pc, #52]	@ (8001330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001310:	4c0a      	ldr	r4, [pc, #40]	@ (800133c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131e:	f00a fbd9 	bl	800bad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff fc89 	bl	8000c38 <main>
  bx  lr
 8001326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800132c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001330:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001334:	0800c9b0 	.word	0x0800c9b0
  ldr r2, =_sbss
 8001338:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 800133c:	24003368 	.word	0x24003368

08001340 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC3_IRQHandler>
	...

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134a:	2003      	movs	r0, #3
 800134c:	f001 f9c8 	bl	80026e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001350:	f005 fb7c 	bl	8006a4c <HAL_RCC_GetSysClockFreq>
 8001354:	4602      	mov	r2, r0
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_Init+0x68>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	4913      	ldr	r1, [pc, #76]	@ (80013b0 <HAL_Init+0x6c>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_Init+0x68>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	4a0e      	ldr	r2, [pc, #56]	@ (80013b0 <HAL_Init+0x6c>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	4a0b      	ldr	r2, [pc, #44]	@ (80013b4 <HAL_Init+0x70>)
 8001386:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001388:	4a0b      	ldr	r2, [pc, #44]	@ (80013b8 <HAL_Init+0x74>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f814 	bl	80013bc <HAL_InitTick>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e002      	b.n	80013a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800139e:	f7ff fd15 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	58024400 	.word	0x58024400
 80013b0:	0800c934 	.word	0x0800c934
 80013b4:	24000004 	.word	0x24000004
 80013b8:	24000000 	.word	0x24000000

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_InitTick+0x60>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e021      	b.n	8001414 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013d0:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <HAL_InitTick+0x64>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_InitTick+0x60>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 f9ad 	bl	8002746 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001404:	f001 f977 	bl	80026f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	@ (8001424 <HAL_InitTick+0x68>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2400000c 	.word	0x2400000c
 8001420:	24000000 	.word	0x24000000
 8001424:	24000008 	.word	0x24000008

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	2400000c 	.word	0x2400000c
 800144c:	2400027c 	.word	0x2400027c

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	2400027c 	.word	0x2400027c

08001468 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <HAL_GetREVID+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	0c1b      	lsrs	r3, r3, #16
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	5c001000 	.word	0x5c001000

08001480 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	609a      	str	r2, [r3, #8]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	609a      	str	r2, [r3, #8]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <LL_ADC_SetChannelPreselection+0x24>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	0e9b      	lsrs	r3, r3, #26
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	2201      	movs	r2, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	e015      	b.n	8001538 <LL_ADC_SetChannelPreselection+0x50>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	fa93 f3a3 	rbit	r3, r3
 8001516:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001522:	2320      	movs	r3, #32
 8001524:	e003      	b.n	800152e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fab3 f383 	clz	r3, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	2201      	movs	r2, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	69d2      	ldr	r2, [r2, #28]
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001542:	bf00      	nop
 8001544:	371c      	adds	r7, #28
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800154e:	b480      	push	{r7}
 8001550:	b087      	sub	sp, #28
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3360      	adds	r3, #96	@ 0x60
 8001560:	461a      	mov	r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	430b      	orrs	r3, r1
 800157c:	431a      	orrs	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001582:	bf00      	nop
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	431a      	orrs	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	611a      	str	r2, [r3, #16]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3360      	adds	r3, #96	@ 0x60
 80015d0:	461a      	mov	r2, r3
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	601a      	str	r2, [r3, #0]
  }
}
 80015ea:	bf00      	nop
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b087      	sub	sp, #28
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3330      	adds	r3, #48	@ 0x30
 8001606:	461a      	mov	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	4413      	add	r3, r2
 8001614:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	211f      	movs	r1, #31
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	401a      	ands	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	0e9b      	lsrs	r3, r3, #26
 800162e:	f003 011f 	and.w	r1, r3, #31
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	431a      	orrs	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001642:	bf00      	nop
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800164e:	b480      	push	{r7}
 8001650:	b087      	sub	sp, #28
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3314      	adds	r3, #20
 800165e:	461a      	mov	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	0e5b      	lsrs	r3, r3, #25
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	4413      	add	r3, r2
 800166c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	0d1b      	lsrs	r3, r3, #20
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	2107      	movs	r1, #7
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	0d1b      	lsrs	r3, r3, #20
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	431a      	orrs	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0318 	and.w	r3, r3, #24
 80016c6:	4908      	ldr	r1, [pc, #32]	@ (80016e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016c8:	40d9      	lsrs	r1, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	400b      	ands	r3, r1
 80016ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016d2:	431a      	orrs	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	000fffff 	.word	0x000fffff

080016ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <LL_ADC_DisableDeepPowerDown+0x20>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6093      	str	r3, [r2, #8]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	5fffffc0 	.word	0x5fffffc0

08001710 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001724:	d101      	bne.n	800172a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	4b05      	ldr	r3, [pc, #20]	@ (800175c <LL_ADC_EnableInternalRegulator+0x24>)
 8001746:	4013      	ands	r3, r2
 8001748:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	6fffffc0 	.word	0x6fffffc0

08001760 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001774:	d101      	bne.n	800177a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <LL_ADC_IsEnabled+0x18>
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <LL_ADC_IsEnabled+0x1a>
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d101      	bne.n	80017c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d101      	bne.n	80017ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b089      	sub	sp, #36	@ 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e18f      	b.n	8001b36 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001820:	2b00      	cmp	r3, #0
 8001822:	d109      	bne.n	8001838 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff f883 	bl	8000930 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff67 	bl	8001710 <LL_ADC_IsDeepPowerDownEnabled>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff4d 	bl	80016ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff82 	bl	8001760 <LL_ADC_IsInternalRegulatorEnabled>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d114      	bne.n	800188c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff66 	bl	8001738 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800186c:	4b87      	ldr	r3, [pc, #540]	@ (8001a8c <HAL_ADC_Init+0x290>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	099b      	lsrs	r3, r3, #6
 8001872:	4a87      	ldr	r2, [pc, #540]	@ (8001a90 <HAL_ADC_Init+0x294>)
 8001874:	fba2 2303 	umull	r2, r3, r2, r3
 8001878:	099b      	lsrs	r3, r3, #6
 800187a:	3301      	adds	r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800187e:	e002      	b.n	8001886 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	3b01      	subs	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f9      	bne.n	8001880 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff65 	bl	8001760 <LL_ADC_IsInternalRegulatorEnabled>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10d      	bne.n	80018b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a0:	f043 0210 	orr.w	r2, r3, #16
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff76 	bl	80017ae <LL_ADC_REG_IsConversionOngoing>
 80018c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f040 8129 	bne.w	8001b24 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f040 8125 	bne.w	8001b24 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018de:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018e2:	f043 0202 	orr.w	r2, r3, #2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff4a 	bl	8001788 <LL_ADC_IsEnabled>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d136      	bne.n	8001968 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a65      	ldr	r2, [pc, #404]	@ (8001a94 <HAL_ADC_Init+0x298>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d004      	beq.n	800190e <HAL_ADC_Init+0x112>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a63      	ldr	r2, [pc, #396]	@ (8001a98 <HAL_ADC_Init+0x29c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d10e      	bne.n	800192c <HAL_ADC_Init+0x130>
 800190e:	4861      	ldr	r0, [pc, #388]	@ (8001a94 <HAL_ADC_Init+0x298>)
 8001910:	f7ff ff3a 	bl	8001788 <LL_ADC_IsEnabled>
 8001914:	4604      	mov	r4, r0
 8001916:	4860      	ldr	r0, [pc, #384]	@ (8001a98 <HAL_ADC_Init+0x29c>)
 8001918:	f7ff ff36 	bl	8001788 <LL_ADC_IsEnabled>
 800191c:	4603      	mov	r3, r0
 800191e:	4323      	orrs	r3, r4
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	e008      	b.n	800193e <HAL_ADC_Init+0x142>
 800192c:	485b      	ldr	r0, [pc, #364]	@ (8001a9c <HAL_ADC_Init+0x2a0>)
 800192e:	f7ff ff2b 	bl	8001788 <LL_ADC_IsEnabled>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d012      	beq.n	8001968 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a53      	ldr	r2, [pc, #332]	@ (8001a94 <HAL_ADC_Init+0x298>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d004      	beq.n	8001956 <HAL_ADC_Init+0x15a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a51      	ldr	r2, [pc, #324]	@ (8001a98 <HAL_ADC_Init+0x29c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_ADC_Init+0x15e>
 8001956:	4a52      	ldr	r2, [pc, #328]	@ (8001aa0 <HAL_ADC_Init+0x2a4>)
 8001958:	e000      	b.n	800195c <HAL_ADC_Init+0x160>
 800195a:	4a52      	ldr	r2, [pc, #328]	@ (8001aa4 <HAL_ADC_Init+0x2a8>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4619      	mov	r1, r3
 8001962:	4610      	mov	r0, r2
 8001964:	f7ff fd8c 	bl	8001480 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001968:	f7ff fd7e 	bl	8001468 <HAL_GetREVID>
 800196c:	4603      	mov	r3, r0
 800196e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001972:	4293      	cmp	r3, r2
 8001974:	d914      	bls.n	80019a0 <HAL_ADC_Init+0x1a4>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b10      	cmp	r3, #16
 800197c:	d110      	bne.n	80019a0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7d5b      	ldrb	r3, [r3, #21]
 8001982:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001988:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800198e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7f1b      	ldrb	r3, [r3, #28]
 8001994:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001996:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001998:	f043 030c 	orr.w	r3, r3, #12
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	e00d      	b.n	80019bc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7d5b      	ldrb	r3, [r3, #21]
 80019a4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019aa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80019b0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7f1b      	ldrb	r3, [r3, #28]
 80019b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7f1b      	ldrb	r3, [r3, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d106      	bne.n	80019d2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	045b      	lsls	r3, r3, #17
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019de:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <HAL_ADC_Init+0x2ac>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	69b9      	ldr	r1, [r7, #24]
 80019fe:	430b      	orrs	r3, r1
 8001a00:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fed1 	bl	80017ae <LL_ADC_REG_IsConversionOngoing>
 8001a0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fede 	bl	80017d4 <LL_ADC_INJ_IsConversionOngoing>
 8001a18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d15f      	bne.n	8001ae0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d15c      	bne.n	8001ae0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7d1b      	ldrb	r3, [r3, #20]
 8001a2a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <HAL_ADC_Init+0x2b0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	430b      	orrs	r3, r1
 8001a46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d130      	bne.n	8001ab4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <HAL_ADC_Init+0x2b4>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a66:	3a01      	subs	r2, #1
 8001a68:	0411      	lsls	r1, r2, #16
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a74:	4311      	orrs	r1, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	611a      	str	r2, [r3, #16]
 8001a88:	e01c      	b.n	8001ac4 <HAL_ADC_Init+0x2c8>
 8001a8a:	bf00      	nop
 8001a8c:	24000000 	.word	0x24000000
 8001a90:	053e2d63 	.word	0x053e2d63
 8001a94:	40022000 	.word	0x40022000
 8001a98:	40022100 	.word	0x40022100
 8001a9c:	58026000 	.word	0x58026000
 8001aa0:	40022300 	.word	0x40022300
 8001aa4:	58026300 	.word	0x58026300
 8001aa8:	fff0c003 	.word	0xfff0c003
 8001aac:	ffffbffc 	.word	0xffffbffc
 8001ab0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fb20 	bl	8002120 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d10c      	bne.n	8001b02 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f023 010f 	bic.w	r1, r3, #15
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	1e5a      	subs	r2, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b00:	e007      	b.n	8001b12 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 020f 	bic.w	r2, r2, #15
 8001b10:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b16:	f023 0303 	bic.w	r3, r3, #3
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b22:	e007      	b.n	8001b34 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b28:	f043 0210 	orr.w	r2, r3, #16
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	@ 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}
 8001b3e:	bf00      	nop

08001b40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b08d      	sub	sp, #52	@ 0x34
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4a65      	ldr	r2, [pc, #404]	@ (8001cf0 <HAL_ADC_ConfigChannel+0x1b0>)
 8001b5a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x2a>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e2c7      	b.n	80020fa <HAL_ADC_ConfigChannel+0x5ba>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fe19 	bl	80017ae <LL_ADC_REG_IsConversionOngoing>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 82ac 	bne.w	80020dc <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db2c      	blt.n	8001be6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d108      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x6a>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	e016      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x98>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	613b      	str	r3, [r7, #16]
  return result;
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	69d1      	ldr	r1, [r2, #28]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	430b      	orrs	r3, r1
 8001be4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6859      	ldr	r1, [r3, #4]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f7ff fcff 	bl	80015f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fdd6 	bl	80017ae <LL_ADC_REG_IsConversionOngoing>
 8001c02:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fde3 	bl	80017d4 <LL_ADC_INJ_IsConversionOngoing>
 8001c0e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 80b8 	bne.w	8001d88 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 80b4 	bne.w	8001d88 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6819      	ldr	r1, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f7ff fd0e 	bl	800164e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c32:	4b30      	ldr	r3, [pc, #192]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x1b4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001c3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c3e:	d10b      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x118>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	e01d      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x154>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10b      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x13e>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	e00a      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x154>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d02c      	beq.n	8001cf8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6919      	ldr	r1, [r3, #16]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f7ff fc4f 	bl	800154e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6919      	ldr	r1, [r3, #16]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	7e5b      	ldrb	r3, [r3, #25]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d102      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x186>
 8001cc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001cc4:	e000      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x188>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f7ff fc79 	bl	80015c0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6919      	ldr	r1, [r3, #16]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	7e1b      	ldrb	r3, [r3, #24]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d102      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x1a4>
 8001cde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x1a6>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f7ff fc51 	bl	800158e <LL_ADC_SetDataRightShift>
 8001cec:	e04c      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x248>
 8001cee:	bf00      	nop
 8001cf0:	47ff0000 	.word	0x47ff0000
 8001cf4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	069b      	lsls	r3, r3, #26
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d107      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d1a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	069b      	lsls	r3, r3, #26
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d107      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d3e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	069b      	lsls	r3, r3, #26
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d107      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d62:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	069b      	lsls	r3, r3, #26
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d107      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d86:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fcfb 	bl	8001788 <LL_ADC_IsEnabled>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f040 81aa 	bne.w	80020ee <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6819      	ldr	r1, [r3, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	461a      	mov	r2, r3
 8001da8:	f7ff fc7c 	bl	80016a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4a87      	ldr	r2, [pc, #540]	@ (8001fd0 <HAL_ADC_ConfigChannel+0x490>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	f040 809a 	bne.w	8001eec <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4984      	ldr	r1, [pc, #528]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x494>)
 8001dc2:	428b      	cmp	r3, r1
 8001dc4:	d147      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x316>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4983      	ldr	r1, [pc, #524]	@ (8001fd8 <HAL_ADC_ConfigChannel+0x498>)
 8001dcc:	428b      	cmp	r3, r1
 8001dce:	d040      	beq.n	8001e52 <HAL_ADC_ConfigChannel+0x312>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4981      	ldr	r1, [pc, #516]	@ (8001fdc <HAL_ADC_ConfigChannel+0x49c>)
 8001dd6:	428b      	cmp	r3, r1
 8001dd8:	d039      	beq.n	8001e4e <HAL_ADC_ConfigChannel+0x30e>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4980      	ldr	r1, [pc, #512]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x4a0>)
 8001de0:	428b      	cmp	r3, r1
 8001de2:	d032      	beq.n	8001e4a <HAL_ADC_ConfigChannel+0x30a>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	497e      	ldr	r1, [pc, #504]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x4a4>)
 8001dea:	428b      	cmp	r3, r1
 8001dec:	d02b      	beq.n	8001e46 <HAL_ADC_ConfigChannel+0x306>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	497d      	ldr	r1, [pc, #500]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x4a8>)
 8001df4:	428b      	cmp	r3, r1
 8001df6:	d024      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x302>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	497b      	ldr	r1, [pc, #492]	@ (8001fec <HAL_ADC_ConfigChannel+0x4ac>)
 8001dfe:	428b      	cmp	r3, r1
 8001e00:	d01d      	beq.n	8001e3e <HAL_ADC_ConfigChannel+0x2fe>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	497a      	ldr	r1, [pc, #488]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x4b0>)
 8001e08:	428b      	cmp	r3, r1
 8001e0a:	d016      	beq.n	8001e3a <HAL_ADC_ConfigChannel+0x2fa>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4978      	ldr	r1, [pc, #480]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x4b4>)
 8001e12:	428b      	cmp	r3, r1
 8001e14:	d00f      	beq.n	8001e36 <HAL_ADC_ConfigChannel+0x2f6>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4977      	ldr	r1, [pc, #476]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x4b8>)
 8001e1c:	428b      	cmp	r3, r1
 8001e1e:	d008      	beq.n	8001e32 <HAL_ADC_ConfigChannel+0x2f2>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4975      	ldr	r1, [pc, #468]	@ (8001ffc <HAL_ADC_ConfigChannel+0x4bc>)
 8001e26:	428b      	cmp	r3, r1
 8001e28:	d101      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x2ee>
 8001e2a:	4b75      	ldr	r3, [pc, #468]	@ (8002000 <HAL_ADC_ConfigChannel+0x4c0>)
 8001e2c:	e05a      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e058      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e32:	4b74      	ldr	r3, [pc, #464]	@ (8002004 <HAL_ADC_ConfigChannel+0x4c4>)
 8001e34:	e056      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e36:	4b74      	ldr	r3, [pc, #464]	@ (8002008 <HAL_ADC_ConfigChannel+0x4c8>)
 8001e38:	e054      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e3a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x4b4>)
 8001e3c:	e052      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e3e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x4b0>)
 8001e40:	e050      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e42:	4b72      	ldr	r3, [pc, #456]	@ (800200c <HAL_ADC_ConfigChannel+0x4cc>)
 8001e44:	e04e      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e46:	4b72      	ldr	r3, [pc, #456]	@ (8002010 <HAL_ADC_ConfigChannel+0x4d0>)
 8001e48:	e04c      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e4a:	4b72      	ldr	r3, [pc, #456]	@ (8002014 <HAL_ADC_ConfigChannel+0x4d4>)
 8001e4c:	e04a      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e4e:	4b72      	ldr	r3, [pc, #456]	@ (8002018 <HAL_ADC_ConfigChannel+0x4d8>)
 8001e50:	e048      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e046      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4970      	ldr	r1, [pc, #448]	@ (800201c <HAL_ADC_ConfigChannel+0x4dc>)
 8001e5c:	428b      	cmp	r3, r1
 8001e5e:	d140      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x3a2>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	495c      	ldr	r1, [pc, #368]	@ (8001fd8 <HAL_ADC_ConfigChannel+0x498>)
 8001e66:	428b      	cmp	r3, r1
 8001e68:	d039      	beq.n	8001ede <HAL_ADC_ConfigChannel+0x39e>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	495b      	ldr	r1, [pc, #364]	@ (8001fdc <HAL_ADC_ConfigChannel+0x49c>)
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d032      	beq.n	8001eda <HAL_ADC_ConfigChannel+0x39a>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4959      	ldr	r1, [pc, #356]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x4a0>)
 8001e7a:	428b      	cmp	r3, r1
 8001e7c:	d02b      	beq.n	8001ed6 <HAL_ADC_ConfigChannel+0x396>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4958      	ldr	r1, [pc, #352]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x4a4>)
 8001e84:	428b      	cmp	r3, r1
 8001e86:	d024      	beq.n	8001ed2 <HAL_ADC_ConfigChannel+0x392>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4956      	ldr	r1, [pc, #344]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x4a8>)
 8001e8e:	428b      	cmp	r3, r1
 8001e90:	d01d      	beq.n	8001ece <HAL_ADC_ConfigChannel+0x38e>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4955      	ldr	r1, [pc, #340]	@ (8001fec <HAL_ADC_ConfigChannel+0x4ac>)
 8001e98:	428b      	cmp	r3, r1
 8001e9a:	d016      	beq.n	8001eca <HAL_ADC_ConfigChannel+0x38a>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4953      	ldr	r1, [pc, #332]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x4b0>)
 8001ea2:	428b      	cmp	r3, r1
 8001ea4:	d00f      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0x386>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4952      	ldr	r1, [pc, #328]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x4b4>)
 8001eac:	428b      	cmp	r3, r1
 8001eae:	d008      	beq.n	8001ec2 <HAL_ADC_ConfigChannel+0x382>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4951      	ldr	r1, [pc, #324]	@ (8001ffc <HAL_ADC_ConfigChannel+0x4bc>)
 8001eb6:	428b      	cmp	r3, r1
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x37e>
 8001eba:	4b51      	ldr	r3, [pc, #324]	@ (8002000 <HAL_ADC_ConfigChannel+0x4c0>)
 8001ebc:	e012      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e010      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001ec2:	4b51      	ldr	r3, [pc, #324]	@ (8002008 <HAL_ADC_ConfigChannel+0x4c8>)
 8001ec4:	e00e      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x4b4>)
 8001ec8:	e00c      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001eca:	4b49      	ldr	r3, [pc, #292]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x4b0>)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001ece:	4b4f      	ldr	r3, [pc, #316]	@ (800200c <HAL_ADC_ConfigChannel+0x4cc>)
 8001ed0:	e008      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001ed2:	4b4f      	ldr	r3, [pc, #316]	@ (8002010 <HAL_ADC_ConfigChannel+0x4d0>)
 8001ed4:	e006      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8002014 <HAL_ADC_ConfigChannel+0x4d4>)
 8001ed8:	e004      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001eda:	4b4f      	ldr	r3, [pc, #316]	@ (8002018 <HAL_ADC_ConfigChannel+0x4d8>)
 8001edc:	e002      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3a4>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f7ff fafe 	bl	80014e8 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f280 80fc 	bge.w	80020ee <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a36      	ldr	r2, [pc, #216]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x494>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d004      	beq.n	8001f0a <HAL_ADC_ConfigChannel+0x3ca>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a45      	ldr	r2, [pc, #276]	@ (800201c <HAL_ADC_ConfigChannel+0x4dc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x3ce>
 8001f0a:	4b45      	ldr	r3, [pc, #276]	@ (8002020 <HAL_ADC_ConfigChannel+0x4e0>)
 8001f0c:	e000      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x3d0>
 8001f0e:	4b45      	ldr	r3, [pc, #276]	@ (8002024 <HAL_ADC_ConfigChannel+0x4e4>)
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fadb 	bl	80014cc <LL_ADC_GetCommonPathInternalCh>
 8001f16:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x494>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d004      	beq.n	8001f2c <HAL_ADC_ConfigChannel+0x3ec>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a3d      	ldr	r2, [pc, #244]	@ (800201c <HAL_ADC_ConfigChannel+0x4dc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d10e      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x40a>
 8001f2c:	4829      	ldr	r0, [pc, #164]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x494>)
 8001f2e:	f7ff fc2b 	bl	8001788 <LL_ADC_IsEnabled>
 8001f32:	4604      	mov	r4, r0
 8001f34:	4839      	ldr	r0, [pc, #228]	@ (800201c <HAL_ADC_ConfigChannel+0x4dc>)
 8001f36:	f7ff fc27 	bl	8001788 <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4323      	orrs	r3, r4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bf0c      	ite	eq
 8001f42:	2301      	moveq	r3, #1
 8001f44:	2300      	movne	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	e008      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x41c>
 8001f4a:	4837      	ldr	r0, [pc, #220]	@ (8002028 <HAL_ADC_ConfigChannel+0x4e8>)
 8001f4c:	f7ff fc1c 	bl	8001788 <LL_ADC_IsEnabled>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf0c      	ite	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	2300      	movne	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80b3 	beq.w	80020c8 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a31      	ldr	r2, [pc, #196]	@ (800202c <HAL_ADC_ConfigChannel+0x4ec>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d165      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x4f8>
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d160      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002028 <HAL_ADC_ConfigChannel+0x4e8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	f040 80b6 	bne.w	80020ee <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a13      	ldr	r2, [pc, #76]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x494>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d004      	beq.n	8001f96 <HAL_ADC_ConfigChannel+0x456>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a22      	ldr	r2, [pc, #136]	@ (800201c <HAL_ADC_ConfigChannel+0x4dc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x45a>
 8001f96:	4a22      	ldr	r2, [pc, #136]	@ (8002020 <HAL_ADC_ConfigChannel+0x4e0>)
 8001f98:	e000      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x45c>
 8001f9a:	4a22      	ldr	r2, [pc, #136]	@ (8002024 <HAL_ADC_ConfigChannel+0x4e4>)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	f7ff fa7e 	bl	80014a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001faa:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <HAL_ADC_ConfigChannel+0x4f0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	4a20      	ldr	r2, [pc, #128]	@ (8002034 <HAL_ADC_ConfigChannel+0x4f4>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	099b      	lsrs	r3, r3, #6
 8001fb8:	3301      	adds	r3, #1
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8001fbe:	e002      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f9      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fcc:	e08f      	b.n	80020ee <HAL_ADC_ConfigChannel+0x5ae>
 8001fce:	bf00      	nop
 8001fd0:	47ff0000 	.word	0x47ff0000
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	04300002 	.word	0x04300002
 8001fdc:	08600004 	.word	0x08600004
 8001fe0:	0c900008 	.word	0x0c900008
 8001fe4:	10c00010 	.word	0x10c00010
 8001fe8:	14f00020 	.word	0x14f00020
 8001fec:	2a000400 	.word	0x2a000400
 8001ff0:	2e300800 	.word	0x2e300800
 8001ff4:	32601000 	.word	0x32601000
 8001ff8:	43210000 	.word	0x43210000
 8001ffc:	4b840000 	.word	0x4b840000
 8002000:	4fb80000 	.word	0x4fb80000
 8002004:	47520000 	.word	0x47520000
 8002008:	36902000 	.word	0x36902000
 800200c:	25b00200 	.word	0x25b00200
 8002010:	21800100 	.word	0x21800100
 8002014:	1d500080 	.word	0x1d500080
 8002018:	19200040 	.word	0x19200040
 800201c:	40022100 	.word	0x40022100
 8002020:	40022300 	.word	0x40022300
 8002024:	58026300 	.word	0x58026300
 8002028:	58026000 	.word	0x58026000
 800202c:	cb840000 	.word	0xcb840000
 8002030:	24000000 	.word	0x24000000
 8002034:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a31      	ldr	r2, [pc, #196]	@ (8002104 <HAL_ADC_ConfigChannel+0x5c4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d11e      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x540>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d119      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a2d      	ldr	r2, [pc, #180]	@ (8002108 <HAL_ADC_ConfigChannel+0x5c8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d14b      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a2c      	ldr	r2, [pc, #176]	@ (800210c <HAL_ADC_ConfigChannel+0x5cc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d004      	beq.n	800206a <HAL_ADC_ConfigChannel+0x52a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a2a      	ldr	r2, [pc, #168]	@ (8002110 <HAL_ADC_ConfigChannel+0x5d0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_ADC_ConfigChannel+0x52e>
 800206a:	4a2a      	ldr	r2, [pc, #168]	@ (8002114 <HAL_ADC_ConfigChannel+0x5d4>)
 800206c:	e000      	b.n	8002070 <HAL_ADC_ConfigChannel+0x530>
 800206e:	4a2a      	ldr	r2, [pc, #168]	@ (8002118 <HAL_ADC_ConfigChannel+0x5d8>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002076:	4619      	mov	r1, r3
 8002078:	4610      	mov	r0, r2
 800207a:	f7ff fa14 	bl	80014a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800207e:	e036      	b.n	80020ee <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a25      	ldr	r2, [pc, #148]	@ (800211c <HAL_ADC_ConfigChannel+0x5dc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d131      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x5ae>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d12c      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1b      	ldr	r2, [pc, #108]	@ (8002108 <HAL_ADC_ConfigChannel+0x5c8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d127      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1a      	ldr	r2, [pc, #104]	@ (800210c <HAL_ADC_ConfigChannel+0x5cc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d004      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0x572>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a18      	ldr	r2, [pc, #96]	@ (8002110 <HAL_ADC_ConfigChannel+0x5d0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x576>
 80020b2:	4a18      	ldr	r2, [pc, #96]	@ (8002114 <HAL_ADC_ConfigChannel+0x5d4>)
 80020b4:	e000      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x578>
 80020b6:	4a18      	ldr	r2, [pc, #96]	@ (8002118 <HAL_ADC_ConfigChannel+0x5d8>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f7ff f9f0 	bl	80014a6 <LL_ADC_SetCommonPathInternalCh>
 80020c6:	e012      	b.n	80020ee <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020cc:	f043 0220 	orr.w	r2, r3, #32
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80020da:	e008      	b.n	80020ee <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e0:	f043 0220 	orr.w	r2, r3, #32
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80020f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3734      	adds	r7, #52	@ 0x34
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd90      	pop	{r4, r7, pc}
 8002102:	bf00      	nop
 8002104:	c7520000 	.word	0xc7520000
 8002108:	58026000 	.word	0x58026000
 800210c:	40022000 	.word	0x40022000
 8002110:	40022100 	.word	0x40022100
 8002114:	40022300 	.word	0x40022300
 8002118:	58026300 	.word	0x58026300
 800211c:	cfb80000 	.word	0xcfb80000

08002120 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a7a      	ldr	r2, [pc, #488]	@ (8002318 <ADC_ConfigureBoostMode+0x1f8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d004      	beq.n	800213c <ADC_ConfigureBoostMode+0x1c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a79      	ldr	r2, [pc, #484]	@ (800231c <ADC_ConfigureBoostMode+0x1fc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d109      	bne.n	8002150 <ADC_ConfigureBoostMode+0x30>
 800213c:	4b78      	ldr	r3, [pc, #480]	@ (8002320 <ADC_ConfigureBoostMode+0x200>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e008      	b.n	8002162 <ADC_ConfigureBoostMode+0x42>
 8002150:	4b74      	ldr	r3, [pc, #464]	@ (8002324 <ADC_ConfigureBoostMode+0x204>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d01c      	beq.n	80021a0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002166:	f004 fdeb 	bl	8006d40 <HAL_RCC_GetHCLKFreq>
 800216a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002174:	d010      	beq.n	8002198 <ADC_ConfigureBoostMode+0x78>
 8002176:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800217a:	d873      	bhi.n	8002264 <ADC_ConfigureBoostMode+0x144>
 800217c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002180:	d002      	beq.n	8002188 <ADC_ConfigureBoostMode+0x68>
 8002182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002186:	d16d      	bne.n	8002264 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	0c1b      	lsrs	r3, r3, #16
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	60fb      	str	r3, [r7, #12]
        break;
 8002196:	e068      	b.n	800226a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	60fb      	str	r3, [r7, #12]
        break;
 800219e:	e064      	b.n	800226a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80021a0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80021a4:	f04f 0100 	mov.w	r1, #0
 80021a8:	f006 f830 	bl	800820c <HAL_RCCEx_GetPeriphCLKFreq>
 80021ac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80021b6:	d051      	beq.n	800225c <ADC_ConfigureBoostMode+0x13c>
 80021b8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80021bc:	d854      	bhi.n	8002268 <ADC_ConfigureBoostMode+0x148>
 80021be:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80021c2:	d047      	beq.n	8002254 <ADC_ConfigureBoostMode+0x134>
 80021c4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80021c8:	d84e      	bhi.n	8002268 <ADC_ConfigureBoostMode+0x148>
 80021ca:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80021ce:	d03d      	beq.n	800224c <ADC_ConfigureBoostMode+0x12c>
 80021d0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80021d4:	d848      	bhi.n	8002268 <ADC_ConfigureBoostMode+0x148>
 80021d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021da:	d033      	beq.n	8002244 <ADC_ConfigureBoostMode+0x124>
 80021dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021e0:	d842      	bhi.n	8002268 <ADC_ConfigureBoostMode+0x148>
 80021e2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80021e6:	d029      	beq.n	800223c <ADC_ConfigureBoostMode+0x11c>
 80021e8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80021ec:	d83c      	bhi.n	8002268 <ADC_ConfigureBoostMode+0x148>
 80021ee:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80021f2:	d01a      	beq.n	800222a <ADC_ConfigureBoostMode+0x10a>
 80021f4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80021f8:	d836      	bhi.n	8002268 <ADC_ConfigureBoostMode+0x148>
 80021fa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80021fe:	d014      	beq.n	800222a <ADC_ConfigureBoostMode+0x10a>
 8002200:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002204:	d830      	bhi.n	8002268 <ADC_ConfigureBoostMode+0x148>
 8002206:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800220a:	d00e      	beq.n	800222a <ADC_ConfigureBoostMode+0x10a>
 800220c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002210:	d82a      	bhi.n	8002268 <ADC_ConfigureBoostMode+0x148>
 8002212:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002216:	d008      	beq.n	800222a <ADC_ConfigureBoostMode+0x10a>
 8002218:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800221c:	d824      	bhi.n	8002268 <ADC_ConfigureBoostMode+0x148>
 800221e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002222:	d002      	beq.n	800222a <ADC_ConfigureBoostMode+0x10a>
 8002224:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002228:	d11e      	bne.n	8002268 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	0c9b      	lsrs	r3, r3, #18
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
 8002238:	60fb      	str	r3, [r7, #12]
        break;
 800223a:	e016      	b.n	800226a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	60fb      	str	r3, [r7, #12]
        break;
 8002242:	e012      	b.n	800226a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	60fb      	str	r3, [r7, #12]
        break;
 800224a:	e00e      	b.n	800226a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	099b      	lsrs	r3, r3, #6
 8002250:	60fb      	str	r3, [r7, #12]
        break;
 8002252:	e00a      	b.n	800226a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	09db      	lsrs	r3, r3, #7
 8002258:	60fb      	str	r3, [r7, #12]
        break;
 800225a:	e006      	b.n	800226a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	60fb      	str	r3, [r7, #12]
        break;
 8002262:	e002      	b.n	800226a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002264:	bf00      	nop
 8002266:	e000      	b.n	800226a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002268:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800226a:	f7ff f8fd 	bl	8001468 <HAL_GetREVID>
 800226e:	4603      	mov	r3, r0
 8002270:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002274:	4293      	cmp	r3, r2
 8002276:	d815      	bhi.n	80022a4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a2b      	ldr	r2, [pc, #172]	@ (8002328 <ADC_ConfigureBoostMode+0x208>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d908      	bls.n	8002292 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800228e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002290:	e03e      	b.n	8002310 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022a0:	609a      	str	r2, [r3, #8]
}
 80022a2:	e035      	b.n	8002310 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4a1f      	ldr	r2, [pc, #124]	@ (800232c <ADC_ConfigureBoostMode+0x20c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d808      	bhi.n	80022c4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80022c0:	609a      	str	r2, [r3, #8]
}
 80022c2:	e025      	b.n	8002310 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002330 <ADC_ConfigureBoostMode+0x210>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d80a      	bhi.n	80022e2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022de:	609a      	str	r2, [r3, #8]
}
 80022e0:	e016      	b.n	8002310 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4a13      	ldr	r2, [pc, #76]	@ (8002334 <ADC_ConfigureBoostMode+0x214>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d80a      	bhi.n	8002300 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022fc:	609a      	str	r2, [r3, #8]
}
 80022fe:	e007      	b.n	8002310 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800230e:	609a      	str	r2, [r3, #8]
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40022000 	.word	0x40022000
 800231c:	40022100 	.word	0x40022100
 8002320:	40022300 	.word	0x40022300
 8002324:	58026300 	.word	0x58026300
 8002328:	01312d00 	.word	0x01312d00
 800232c:	005f5e10 	.word	0x005f5e10
 8002330:	00bebc20 	.word	0x00bebc20
 8002334:	017d7840 	.word	0x017d7840

08002338 <LL_ADC_IsEnabled>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <LL_ADC_IsEnabled+0x18>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <LL_ADC_IsEnabled+0x1a>
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_ADC_REG_IsConversionOngoing>:
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b04      	cmp	r3, #4
 8002370:	d101      	bne.n	8002376 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b09f      	sub	sp, #124	@ 0x7c
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800239e:	2302      	movs	r3, #2
 80023a0:	e0be      	b.n	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d102      	bne.n	80023c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023bc:	4b5b      	ldr	r3, [pc, #364]	@ (800252c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	e001      	b.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d0:	f043 0220 	orr.w	r2, r3, #32
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e09d      	b.n	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff ffb9 	bl	800235e <LL_ADC_REG_IsConversionOngoing>
 80023ec:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ffb3 	bl	800235e <LL_ADC_REG_IsConversionOngoing>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d17f      	bne.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002400:	2b00      	cmp	r3, #0
 8002402:	d17c      	bne.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a47      	ldr	r2, [pc, #284]	@ (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d004      	beq.n	8002418 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a46      	ldr	r2, [pc, #280]	@ (800252c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002418:	4b45      	ldr	r3, [pc, #276]	@ (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800241a:	e000      	b.n	800241e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800241c:	4b45      	ldr	r3, [pc, #276]	@ (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800241e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d039      	beq.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	431a      	orrs	r2, r3
 8002436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002438:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a3a      	ldr	r2, [pc, #232]	@ (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d004      	beq.n	800244e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a38      	ldr	r2, [pc, #224]	@ (800252c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10e      	bne.n	800246c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800244e:	4836      	ldr	r0, [pc, #216]	@ (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002450:	f7ff ff72 	bl	8002338 <LL_ADC_IsEnabled>
 8002454:	4604      	mov	r4, r0
 8002456:	4835      	ldr	r0, [pc, #212]	@ (800252c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002458:	f7ff ff6e 	bl	8002338 <LL_ADC_IsEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	4323      	orrs	r3, r4
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e008      	b.n	800247e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800246c:	4832      	ldr	r0, [pc, #200]	@ (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800246e:	f7ff ff63 	bl	8002338 <LL_ADC_IsEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d047      	beq.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002488:	4013      	ands	r3, r2
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	6811      	ldr	r1, [r2, #0]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	6892      	ldr	r2, [r2, #8]
 8002492:	430a      	orrs	r2, r1
 8002494:	431a      	orrs	r2, r3
 8002496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002498:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800249a:	e03a      	b.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800249c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d004      	beq.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1d      	ldr	r2, [pc, #116]	@ (800252c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d10e      	bne.n	80024da <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80024bc:	481a      	ldr	r0, [pc, #104]	@ (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80024be:	f7ff ff3b 	bl	8002338 <LL_ADC_IsEnabled>
 80024c2:	4604      	mov	r4, r0
 80024c4:	4819      	ldr	r0, [pc, #100]	@ (800252c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80024c6:	f7ff ff37 	bl	8002338 <LL_ADC_IsEnabled>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4323      	orrs	r3, r4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	e008      	b.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80024da:	4817      	ldr	r0, [pc, #92]	@ (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80024dc:	f7ff ff2c 	bl	8002338 <LL_ADC_IsEnabled>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf0c      	ite	eq
 80024e6:	2301      	moveq	r3, #1
 80024e8:	2300      	movne	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d010      	beq.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	4b11      	ldr	r3, [pc, #68]	@ (800253c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80024fa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024fc:	e009      	b.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002502:	f043 0220 	orr.w	r2, r3, #32
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002510:	e000      	b.n	8002514 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002512:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800251c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002520:	4618      	mov	r0, r3
 8002522:	377c      	adds	r7, #124	@ 0x7c
 8002524:	46bd      	mov	sp, r7
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	40022000 	.word	0x40022000
 800252c:	40022100 	.word	0x40022100
 8002530:	40022300 	.word	0x40022300
 8002534:	58026300 	.word	0x58026300
 8002538:	58026000 	.word	0x58026000
 800253c:	fffff0e0 	.word	0xfffff0e0

08002540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <__NVIC_SetPriorityGrouping+0x40>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002568:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 800256a:	4313      	orrs	r3, r2
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <__NVIC_SetPriorityGrouping+0x40>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00
 8002584:	05fa0000 	.word	0x05fa0000

08002588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800258c:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <__NVIC_GetPriorityGrouping+0x18>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0307 	and.w	r3, r3, #7
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db0b      	blt.n	80025ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	4907      	ldr	r1, [pc, #28]	@ (80025dc <__NVIC_EnableIRQ+0x38>)
 80025be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2001      	movs	r0, #1
 80025c6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000e100 	.word	0xe000e100

080025e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db0a      	blt.n	800260a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	490c      	ldr	r1, [pc, #48]	@ (800262c <__NVIC_SetPriority+0x4c>)
 80025fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025fe:	0112      	lsls	r2, r2, #4
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	440b      	add	r3, r1
 8002604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002608:	e00a      	b.n	8002620 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4908      	ldr	r1, [pc, #32]	@ (8002630 <__NVIC_SetPriority+0x50>)
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3b04      	subs	r3, #4
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	440b      	add	r3, r1
 800261e:	761a      	strb	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	@ 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f1c3 0307 	rsb	r3, r3, #7
 800264e:	2b04      	cmp	r3, #4
 8002650:	bf28      	it	cs
 8002652:	2304      	movcs	r3, #4
 8002654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3304      	adds	r3, #4
 800265a:	2b06      	cmp	r3, #6
 800265c:	d902      	bls.n	8002664 <NVIC_EncodePriority+0x30>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3b03      	subs	r3, #3
 8002662:	e000      	b.n	8002666 <NVIC_EncodePriority+0x32>
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	401a      	ands	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800267c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43d9      	mvns	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	4313      	orrs	r3, r2
         );
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	@ 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026ac:	d301      	bcc.n	80026b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00f      	b.n	80026d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b2:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <SysTick_Config+0x40>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ba:	210f      	movs	r1, #15
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026c0:	f7ff ff8e 	bl	80025e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <SysTick_Config+0x40>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ca:	4b04      	ldr	r3, [pc, #16]	@ (80026dc <SysTick_Config+0x40>)
 80026cc:	2207      	movs	r2, #7
 80026ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	e000e010 	.word	0xe000e010

080026e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ff29 	bl	8002540 <__NVIC_SetPriorityGrouping>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002704:	f7ff ff40 	bl	8002588 <__NVIC_GetPriorityGrouping>
 8002708:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	6978      	ldr	r0, [r7, #20]
 8002710:	f7ff ff90 	bl	8002634 <NVIC_EncodePriority>
 8002714:	4602      	mov	r2, r0
 8002716:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff5f 	bl	80025e0 <__NVIC_SetPriority>
}
 8002722:	bf00      	nop
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff33 	bl	80025a4 <__NVIC_EnableIRQ>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ffa4 	bl	800269c <SysTick_Config>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002768:	f7fe fe72 	bl	8001450 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e2dc      	b.n	8002d32 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d008      	beq.n	8002796 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2280      	movs	r2, #128	@ 0x80
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e2cd      	b.n	8002d32 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a76      	ldr	r2, [pc, #472]	@ (8002974 <HAL_DMA_Abort+0x214>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d04a      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a74      	ldr	r2, [pc, #464]	@ (8002978 <HAL_DMA_Abort+0x218>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d045      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a73      	ldr	r2, [pc, #460]	@ (800297c <HAL_DMA_Abort+0x21c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d040      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a71      	ldr	r2, [pc, #452]	@ (8002980 <HAL_DMA_Abort+0x220>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d03b      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a70      	ldr	r2, [pc, #448]	@ (8002984 <HAL_DMA_Abort+0x224>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d036      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002988 <HAL_DMA_Abort+0x228>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d031      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a6d      	ldr	r2, [pc, #436]	@ (800298c <HAL_DMA_Abort+0x22c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d02c      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002990 <HAL_DMA_Abort+0x230>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d027      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6a      	ldr	r2, [pc, #424]	@ (8002994 <HAL_DMA_Abort+0x234>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d022      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a68      	ldr	r2, [pc, #416]	@ (8002998 <HAL_DMA_Abort+0x238>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01d      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a67      	ldr	r2, [pc, #412]	@ (800299c <HAL_DMA_Abort+0x23c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d018      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a65      	ldr	r2, [pc, #404]	@ (80029a0 <HAL_DMA_Abort+0x240>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a64      	ldr	r2, [pc, #400]	@ (80029a4 <HAL_DMA_Abort+0x244>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00e      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a62      	ldr	r2, [pc, #392]	@ (80029a8 <HAL_DMA_Abort+0x248>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a61      	ldr	r2, [pc, #388]	@ (80029ac <HAL_DMA_Abort+0x24c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_DMA_Abort+0xd6>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a5f      	ldr	r2, [pc, #380]	@ (80029b0 <HAL_DMA_Abort+0x250>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d101      	bne.n	800283a <HAL_DMA_Abort+0xda>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_DMA_Abort+0xdc>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 021e 	bic.w	r2, r2, #30
 800284e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800285e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	e00a      	b.n	800287e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 020e 	bic.w	r2, r2, #14
 8002876:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a3c      	ldr	r2, [pc, #240]	@ (8002974 <HAL_DMA_Abort+0x214>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d072      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a3a      	ldr	r2, [pc, #232]	@ (8002978 <HAL_DMA_Abort+0x218>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d06d      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a39      	ldr	r2, [pc, #228]	@ (800297c <HAL_DMA_Abort+0x21c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d068      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a37      	ldr	r2, [pc, #220]	@ (8002980 <HAL_DMA_Abort+0x220>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d063      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a36      	ldr	r2, [pc, #216]	@ (8002984 <HAL_DMA_Abort+0x224>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d05e      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a34      	ldr	r2, [pc, #208]	@ (8002988 <HAL_DMA_Abort+0x228>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d059      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a33      	ldr	r2, [pc, #204]	@ (800298c <HAL_DMA_Abort+0x22c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d054      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a31      	ldr	r2, [pc, #196]	@ (8002990 <HAL_DMA_Abort+0x230>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d04f      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a30      	ldr	r2, [pc, #192]	@ (8002994 <HAL_DMA_Abort+0x234>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d04a      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002998 <HAL_DMA_Abort+0x238>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d045      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a2d      	ldr	r2, [pc, #180]	@ (800299c <HAL_DMA_Abort+0x23c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d040      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a2b      	ldr	r2, [pc, #172]	@ (80029a0 <HAL_DMA_Abort+0x240>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d03b      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a2a      	ldr	r2, [pc, #168]	@ (80029a4 <HAL_DMA_Abort+0x244>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d036      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a28      	ldr	r2, [pc, #160]	@ (80029a8 <HAL_DMA_Abort+0x248>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d031      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a27      	ldr	r2, [pc, #156]	@ (80029ac <HAL_DMA_Abort+0x24c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d02c      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a25      	ldr	r2, [pc, #148]	@ (80029b0 <HAL_DMA_Abort+0x250>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d027      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a24      	ldr	r2, [pc, #144]	@ (80029b4 <HAL_DMA_Abort+0x254>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d022      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a22      	ldr	r2, [pc, #136]	@ (80029b8 <HAL_DMA_Abort+0x258>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d01d      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a21      	ldr	r2, [pc, #132]	@ (80029bc <HAL_DMA_Abort+0x25c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d018      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1f      	ldr	r2, [pc, #124]	@ (80029c0 <HAL_DMA_Abort+0x260>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1e      	ldr	r2, [pc, #120]	@ (80029c4 <HAL_DMA_Abort+0x264>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00e      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1c      	ldr	r2, [pc, #112]	@ (80029c8 <HAL_DMA_Abort+0x268>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d009      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1b      	ldr	r2, [pc, #108]	@ (80029cc <HAL_DMA_Abort+0x26c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d004      	beq.n	800296e <HAL_DMA_Abort+0x20e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a19      	ldr	r2, [pc, #100]	@ (80029d0 <HAL_DMA_Abort+0x270>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d132      	bne.n	80029d4 <HAL_DMA_Abort+0x274>
 800296e:	2301      	movs	r3, #1
 8002970:	e031      	b.n	80029d6 <HAL_DMA_Abort+0x276>
 8002972:	bf00      	nop
 8002974:	40020010 	.word	0x40020010
 8002978:	40020028 	.word	0x40020028
 800297c:	40020040 	.word	0x40020040
 8002980:	40020058 	.word	0x40020058
 8002984:	40020070 	.word	0x40020070
 8002988:	40020088 	.word	0x40020088
 800298c:	400200a0 	.word	0x400200a0
 8002990:	400200b8 	.word	0x400200b8
 8002994:	40020410 	.word	0x40020410
 8002998:	40020428 	.word	0x40020428
 800299c:	40020440 	.word	0x40020440
 80029a0:	40020458 	.word	0x40020458
 80029a4:	40020470 	.word	0x40020470
 80029a8:	40020488 	.word	0x40020488
 80029ac:	400204a0 	.word	0x400204a0
 80029b0:	400204b8 	.word	0x400204b8
 80029b4:	58025408 	.word	0x58025408
 80029b8:	5802541c 	.word	0x5802541c
 80029bc:	58025430 	.word	0x58025430
 80029c0:	58025444 	.word	0x58025444
 80029c4:	58025458 	.word	0x58025458
 80029c8:	5802546c 	.word	0x5802546c
 80029cc:	58025480 	.word	0x58025480
 80029d0:	58025494 	.word	0x58025494
 80029d4:	2300      	movs	r3, #0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a6d      	ldr	r2, [pc, #436]	@ (8002ba4 <HAL_DMA_Abort+0x444>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d04a      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a6b      	ldr	r2, [pc, #428]	@ (8002ba8 <HAL_DMA_Abort+0x448>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d045      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a6a      	ldr	r2, [pc, #424]	@ (8002bac <HAL_DMA_Abort+0x44c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d040      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a68      	ldr	r2, [pc, #416]	@ (8002bb0 <HAL_DMA_Abort+0x450>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d03b      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a67      	ldr	r2, [pc, #412]	@ (8002bb4 <HAL_DMA_Abort+0x454>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d036      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a65      	ldr	r2, [pc, #404]	@ (8002bb8 <HAL_DMA_Abort+0x458>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d031      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a64      	ldr	r2, [pc, #400]	@ (8002bbc <HAL_DMA_Abort+0x45c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d02c      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a62      	ldr	r2, [pc, #392]	@ (8002bc0 <HAL_DMA_Abort+0x460>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d027      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a61      	ldr	r2, [pc, #388]	@ (8002bc4 <HAL_DMA_Abort+0x464>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d022      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a5f      	ldr	r2, [pc, #380]	@ (8002bc8 <HAL_DMA_Abort+0x468>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01d      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a5e      	ldr	r2, [pc, #376]	@ (8002bcc <HAL_DMA_Abort+0x46c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d018      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd0 <HAL_DMA_Abort+0x470>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd4 <HAL_DMA_Abort+0x474>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00e      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a59      	ldr	r2, [pc, #356]	@ (8002bd8 <HAL_DMA_Abort+0x478>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a58      	ldr	r2, [pc, #352]	@ (8002bdc <HAL_DMA_Abort+0x47c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_DMA_Abort+0x32a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a56      	ldr	r2, [pc, #344]	@ (8002be0 <HAL_DMA_Abort+0x480>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d108      	bne.n	8002a9c <HAL_DMA_Abort+0x33c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e007      	b.n	8002aac <HAL_DMA_Abort+0x34c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002aac:	e013      	b.n	8002ad6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aae:	f7fe fccf 	bl	8001450 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d90c      	bls.n	8002ad6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e12d      	b.n	8002d32 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e5      	bne.n	8002aae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8002ba4 <HAL_DMA_Abort+0x444>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d04a      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2d      	ldr	r2, [pc, #180]	@ (8002ba8 <HAL_DMA_Abort+0x448>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d045      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2c      	ldr	r2, [pc, #176]	@ (8002bac <HAL_DMA_Abort+0x44c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d040      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb0 <HAL_DMA_Abort+0x450>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d03b      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a29      	ldr	r2, [pc, #164]	@ (8002bb4 <HAL_DMA_Abort+0x454>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d036      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a27      	ldr	r2, [pc, #156]	@ (8002bb8 <HAL_DMA_Abort+0x458>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d031      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a26      	ldr	r2, [pc, #152]	@ (8002bbc <HAL_DMA_Abort+0x45c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d02c      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a24      	ldr	r2, [pc, #144]	@ (8002bc0 <HAL_DMA_Abort+0x460>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d027      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a23      	ldr	r2, [pc, #140]	@ (8002bc4 <HAL_DMA_Abort+0x464>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a21      	ldr	r2, [pc, #132]	@ (8002bc8 <HAL_DMA_Abort+0x468>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01d      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a20      	ldr	r2, [pc, #128]	@ (8002bcc <HAL_DMA_Abort+0x46c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d018      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd0 <HAL_DMA_Abort+0x470>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd4 <HAL_DMA_Abort+0x474>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00e      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd8 <HAL_DMA_Abort+0x478>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1a      	ldr	r2, [pc, #104]	@ (8002bdc <HAL_DMA_Abort+0x47c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_DMA_Abort+0x422>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a18      	ldr	r2, [pc, #96]	@ (8002be0 <HAL_DMA_Abort+0x480>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_DMA_Abort+0x426>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_DMA_Abort+0x428>
 8002b86:	2300      	movs	r3, #0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02b      	beq.n	8002be4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b90:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	223f      	movs	r2, #63	@ 0x3f
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	e02a      	b.n	8002bfa <HAL_DMA_Abort+0x49a>
 8002ba4:	40020010 	.word	0x40020010
 8002ba8:	40020028 	.word	0x40020028
 8002bac:	40020040 	.word	0x40020040
 8002bb0:	40020058 	.word	0x40020058
 8002bb4:	40020070 	.word	0x40020070
 8002bb8:	40020088 	.word	0x40020088
 8002bbc:	400200a0 	.word	0x400200a0
 8002bc0:	400200b8 	.word	0x400200b8
 8002bc4:	40020410 	.word	0x40020410
 8002bc8:	40020428 	.word	0x40020428
 8002bcc:	40020440 	.word	0x40020440
 8002bd0:	40020458 	.word	0x40020458
 8002bd4:	40020470 	.word	0x40020470
 8002bd8:	40020488 	.word	0x40020488
 8002bdc:	400204a0 	.word	0x400204a0
 8002be0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a4f      	ldr	r2, [pc, #316]	@ (8002d3c <HAL_DMA_Abort+0x5dc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d072      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a4d      	ldr	r2, [pc, #308]	@ (8002d40 <HAL_DMA_Abort+0x5e0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d06d      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a4c      	ldr	r2, [pc, #304]	@ (8002d44 <HAL_DMA_Abort+0x5e4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d068      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002d48 <HAL_DMA_Abort+0x5e8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d063      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a49      	ldr	r2, [pc, #292]	@ (8002d4c <HAL_DMA_Abort+0x5ec>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d05e      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a47      	ldr	r2, [pc, #284]	@ (8002d50 <HAL_DMA_Abort+0x5f0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d059      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a46      	ldr	r2, [pc, #280]	@ (8002d54 <HAL_DMA_Abort+0x5f4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d054      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a44      	ldr	r2, [pc, #272]	@ (8002d58 <HAL_DMA_Abort+0x5f8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d04f      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a43      	ldr	r2, [pc, #268]	@ (8002d5c <HAL_DMA_Abort+0x5fc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d04a      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a41      	ldr	r2, [pc, #260]	@ (8002d60 <HAL_DMA_Abort+0x600>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d045      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a40      	ldr	r2, [pc, #256]	@ (8002d64 <HAL_DMA_Abort+0x604>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d040      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a3e      	ldr	r2, [pc, #248]	@ (8002d68 <HAL_DMA_Abort+0x608>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d03b      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a3d      	ldr	r2, [pc, #244]	@ (8002d6c <HAL_DMA_Abort+0x60c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d036      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a3b      	ldr	r2, [pc, #236]	@ (8002d70 <HAL_DMA_Abort+0x610>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d031      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a3a      	ldr	r2, [pc, #232]	@ (8002d74 <HAL_DMA_Abort+0x614>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d02c      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a38      	ldr	r2, [pc, #224]	@ (8002d78 <HAL_DMA_Abort+0x618>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d027      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a37      	ldr	r2, [pc, #220]	@ (8002d7c <HAL_DMA_Abort+0x61c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d022      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a35      	ldr	r2, [pc, #212]	@ (8002d80 <HAL_DMA_Abort+0x620>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01d      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a34      	ldr	r2, [pc, #208]	@ (8002d84 <HAL_DMA_Abort+0x624>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d018      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a32      	ldr	r2, [pc, #200]	@ (8002d88 <HAL_DMA_Abort+0x628>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a31      	ldr	r2, [pc, #196]	@ (8002d8c <HAL_DMA_Abort+0x62c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00e      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d90 <HAL_DMA_Abort+0x630>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d009      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2e      	ldr	r2, [pc, #184]	@ (8002d94 <HAL_DMA_Abort+0x634>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d004      	beq.n	8002cea <HAL_DMA_Abort+0x58a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d98 <HAL_DMA_Abort+0x638>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_DMA_Abort+0x58e>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_DMA_Abort+0x590>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d015      	beq.n	8002d20 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cfc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00c      	beq.n	8002d20 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d14:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d1e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40020010 	.word	0x40020010
 8002d40:	40020028 	.word	0x40020028
 8002d44:	40020040 	.word	0x40020040
 8002d48:	40020058 	.word	0x40020058
 8002d4c:	40020070 	.word	0x40020070
 8002d50:	40020088 	.word	0x40020088
 8002d54:	400200a0 	.word	0x400200a0
 8002d58:	400200b8 	.word	0x400200b8
 8002d5c:	40020410 	.word	0x40020410
 8002d60:	40020428 	.word	0x40020428
 8002d64:	40020440 	.word	0x40020440
 8002d68:	40020458 	.word	0x40020458
 8002d6c:	40020470 	.word	0x40020470
 8002d70:	40020488 	.word	0x40020488
 8002d74:	400204a0 	.word	0x400204a0
 8002d78:	400204b8 	.word	0x400204b8
 8002d7c:	58025408 	.word	0x58025408
 8002d80:	5802541c 	.word	0x5802541c
 8002d84:	58025430 	.word	0x58025430
 8002d88:	58025444 	.word	0x58025444
 8002d8c:	58025458 	.word	0x58025458
 8002d90:	5802546c 	.word	0x5802546c
 8002d94:	58025480 	.word	0x58025480
 8002d98:	58025494 	.word	0x58025494

08002d9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e237      	b.n	800321e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d004      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2280      	movs	r2, #128	@ 0x80
 8002dbe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e22c      	b.n	800321e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a5c      	ldr	r2, [pc, #368]	@ (8002f3c <HAL_DMA_Abort_IT+0x1a0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d04a      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f40 <HAL_DMA_Abort_IT+0x1a4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d045      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a59      	ldr	r2, [pc, #356]	@ (8002f44 <HAL_DMA_Abort_IT+0x1a8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d040      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a58      	ldr	r2, [pc, #352]	@ (8002f48 <HAL_DMA_Abort_IT+0x1ac>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d03b      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a56      	ldr	r2, [pc, #344]	@ (8002f4c <HAL_DMA_Abort_IT+0x1b0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d036      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a55      	ldr	r2, [pc, #340]	@ (8002f50 <HAL_DMA_Abort_IT+0x1b4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d031      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a53      	ldr	r2, [pc, #332]	@ (8002f54 <HAL_DMA_Abort_IT+0x1b8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02c      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a52      	ldr	r2, [pc, #328]	@ (8002f58 <HAL_DMA_Abort_IT+0x1bc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d027      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a50      	ldr	r2, [pc, #320]	@ (8002f5c <HAL_DMA_Abort_IT+0x1c0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d022      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a4f      	ldr	r2, [pc, #316]	@ (8002f60 <HAL_DMA_Abort_IT+0x1c4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d01d      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f64 <HAL_DMA_Abort_IT+0x1c8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d018      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a4c      	ldr	r2, [pc, #304]	@ (8002f68 <HAL_DMA_Abort_IT+0x1cc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a4a      	ldr	r2, [pc, #296]	@ (8002f6c <HAL_DMA_Abort_IT+0x1d0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00e      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a49      	ldr	r2, [pc, #292]	@ (8002f70 <HAL_DMA_Abort_IT+0x1d4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a47      	ldr	r2, [pc, #284]	@ (8002f74 <HAL_DMA_Abort_IT+0x1d8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xc8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a46      	ldr	r2, [pc, #280]	@ (8002f78 <HAL_DMA_Abort_IT+0x1dc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <HAL_DMA_Abort_IT+0xcc>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_DMA_Abort_IT+0xce>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8086 	beq.w	8002f7c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2204      	movs	r2, #4
 8002e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f3c <HAL_DMA_Abort_IT+0x1a0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d04a      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2e      	ldr	r2, [pc, #184]	@ (8002f40 <HAL_DMA_Abort_IT+0x1a4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d045      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2c      	ldr	r2, [pc, #176]	@ (8002f44 <HAL_DMA_Abort_IT+0x1a8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d040      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f48 <HAL_DMA_Abort_IT+0x1ac>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d03b      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a29      	ldr	r2, [pc, #164]	@ (8002f4c <HAL_DMA_Abort_IT+0x1b0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d036      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a28      	ldr	r2, [pc, #160]	@ (8002f50 <HAL_DMA_Abort_IT+0x1b4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d031      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a26      	ldr	r2, [pc, #152]	@ (8002f54 <HAL_DMA_Abort_IT+0x1b8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d02c      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a25      	ldr	r2, [pc, #148]	@ (8002f58 <HAL_DMA_Abort_IT+0x1bc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d027      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a23      	ldr	r2, [pc, #140]	@ (8002f5c <HAL_DMA_Abort_IT+0x1c0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d022      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a22      	ldr	r2, [pc, #136]	@ (8002f60 <HAL_DMA_Abort_IT+0x1c4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d01d      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a20      	ldr	r2, [pc, #128]	@ (8002f64 <HAL_DMA_Abort_IT+0x1c8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d018      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1f      	ldr	r2, [pc, #124]	@ (8002f68 <HAL_DMA_Abort_IT+0x1cc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d013      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f6c <HAL_DMA_Abort_IT+0x1d0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00e      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1c      	ldr	r2, [pc, #112]	@ (8002f70 <HAL_DMA_Abort_IT+0x1d4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1a      	ldr	r2, [pc, #104]	@ (8002f74 <HAL_DMA_Abort_IT+0x1d8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x17c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a19      	ldr	r2, [pc, #100]	@ (8002f78 <HAL_DMA_Abort_IT+0x1dc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d108      	bne.n	8002f2a <HAL_DMA_Abort_IT+0x18e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e178      	b.n	800321c <HAL_DMA_Abort_IT+0x480>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e16f      	b.n	800321c <HAL_DMA_Abort_IT+0x480>
 8002f3c:	40020010 	.word	0x40020010
 8002f40:	40020028 	.word	0x40020028
 8002f44:	40020040 	.word	0x40020040
 8002f48:	40020058 	.word	0x40020058
 8002f4c:	40020070 	.word	0x40020070
 8002f50:	40020088 	.word	0x40020088
 8002f54:	400200a0 	.word	0x400200a0
 8002f58:	400200b8 	.word	0x400200b8
 8002f5c:	40020410 	.word	0x40020410
 8002f60:	40020428 	.word	0x40020428
 8002f64:	40020440 	.word	0x40020440
 8002f68:	40020458 	.word	0x40020458
 8002f6c:	40020470 	.word	0x40020470
 8002f70:	40020488 	.word	0x40020488
 8002f74:	400204a0 	.word	0x400204a0
 8002f78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 020e 	bic.w	r2, r2, #14
 8002f8a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a6c      	ldr	r2, [pc, #432]	@ (8003144 <HAL_DMA_Abort_IT+0x3a8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d04a      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a6b      	ldr	r2, [pc, #428]	@ (8003148 <HAL_DMA_Abort_IT+0x3ac>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d045      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a69      	ldr	r2, [pc, #420]	@ (800314c <HAL_DMA_Abort_IT+0x3b0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d040      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a68      	ldr	r2, [pc, #416]	@ (8003150 <HAL_DMA_Abort_IT+0x3b4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d03b      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a66      	ldr	r2, [pc, #408]	@ (8003154 <HAL_DMA_Abort_IT+0x3b8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d036      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a65      	ldr	r2, [pc, #404]	@ (8003158 <HAL_DMA_Abort_IT+0x3bc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d031      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a63      	ldr	r2, [pc, #396]	@ (800315c <HAL_DMA_Abort_IT+0x3c0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d02c      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a62      	ldr	r2, [pc, #392]	@ (8003160 <HAL_DMA_Abort_IT+0x3c4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d027      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a60      	ldr	r2, [pc, #384]	@ (8003164 <HAL_DMA_Abort_IT+0x3c8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d022      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a5f      	ldr	r2, [pc, #380]	@ (8003168 <HAL_DMA_Abort_IT+0x3cc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d01d      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5d      	ldr	r2, [pc, #372]	@ (800316c <HAL_DMA_Abort_IT+0x3d0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d018      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a5c      	ldr	r2, [pc, #368]	@ (8003170 <HAL_DMA_Abort_IT+0x3d4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a5a      	ldr	r2, [pc, #360]	@ (8003174 <HAL_DMA_Abort_IT+0x3d8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00e      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a59      	ldr	r2, [pc, #356]	@ (8003178 <HAL_DMA_Abort_IT+0x3dc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d009      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a57      	ldr	r2, [pc, #348]	@ (800317c <HAL_DMA_Abort_IT+0x3e0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d004      	beq.n	800302c <HAL_DMA_Abort_IT+0x290>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a56      	ldr	r2, [pc, #344]	@ (8003180 <HAL_DMA_Abort_IT+0x3e4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d108      	bne.n	800303e <HAL_DMA_Abort_IT+0x2a2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e007      	b.n	800304e <HAL_DMA_Abort_IT+0x2b2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a3c      	ldr	r2, [pc, #240]	@ (8003144 <HAL_DMA_Abort_IT+0x3a8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d072      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a3a      	ldr	r2, [pc, #232]	@ (8003148 <HAL_DMA_Abort_IT+0x3ac>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d06d      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a39      	ldr	r2, [pc, #228]	@ (800314c <HAL_DMA_Abort_IT+0x3b0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d068      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a37      	ldr	r2, [pc, #220]	@ (8003150 <HAL_DMA_Abort_IT+0x3b4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d063      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a36      	ldr	r2, [pc, #216]	@ (8003154 <HAL_DMA_Abort_IT+0x3b8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d05e      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a34      	ldr	r2, [pc, #208]	@ (8003158 <HAL_DMA_Abort_IT+0x3bc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d059      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a33      	ldr	r2, [pc, #204]	@ (800315c <HAL_DMA_Abort_IT+0x3c0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d054      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a31      	ldr	r2, [pc, #196]	@ (8003160 <HAL_DMA_Abort_IT+0x3c4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d04f      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a30      	ldr	r2, [pc, #192]	@ (8003164 <HAL_DMA_Abort_IT+0x3c8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d04a      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003168 <HAL_DMA_Abort_IT+0x3cc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d045      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a2d      	ldr	r2, [pc, #180]	@ (800316c <HAL_DMA_Abort_IT+0x3d0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d040      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003170 <HAL_DMA_Abort_IT+0x3d4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d03b      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003174 <HAL_DMA_Abort_IT+0x3d8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d036      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a28      	ldr	r2, [pc, #160]	@ (8003178 <HAL_DMA_Abort_IT+0x3dc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d031      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a27      	ldr	r2, [pc, #156]	@ (800317c <HAL_DMA_Abort_IT+0x3e0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d02c      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a25      	ldr	r2, [pc, #148]	@ (8003180 <HAL_DMA_Abort_IT+0x3e4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d027      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a24      	ldr	r2, [pc, #144]	@ (8003184 <HAL_DMA_Abort_IT+0x3e8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d022      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a22      	ldr	r2, [pc, #136]	@ (8003188 <HAL_DMA_Abort_IT+0x3ec>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01d      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a21      	ldr	r2, [pc, #132]	@ (800318c <HAL_DMA_Abort_IT+0x3f0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d018      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1f      	ldr	r2, [pc, #124]	@ (8003190 <HAL_DMA_Abort_IT+0x3f4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1e      	ldr	r2, [pc, #120]	@ (8003194 <HAL_DMA_Abort_IT+0x3f8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00e      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1c      	ldr	r2, [pc, #112]	@ (8003198 <HAL_DMA_Abort_IT+0x3fc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d009      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1b      	ldr	r2, [pc, #108]	@ (800319c <HAL_DMA_Abort_IT+0x400>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d004      	beq.n	800313e <HAL_DMA_Abort_IT+0x3a2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a19      	ldr	r2, [pc, #100]	@ (80031a0 <HAL_DMA_Abort_IT+0x404>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d132      	bne.n	80031a4 <HAL_DMA_Abort_IT+0x408>
 800313e:	2301      	movs	r3, #1
 8003140:	e031      	b.n	80031a6 <HAL_DMA_Abort_IT+0x40a>
 8003142:	bf00      	nop
 8003144:	40020010 	.word	0x40020010
 8003148:	40020028 	.word	0x40020028
 800314c:	40020040 	.word	0x40020040
 8003150:	40020058 	.word	0x40020058
 8003154:	40020070 	.word	0x40020070
 8003158:	40020088 	.word	0x40020088
 800315c:	400200a0 	.word	0x400200a0
 8003160:	400200b8 	.word	0x400200b8
 8003164:	40020410 	.word	0x40020410
 8003168:	40020428 	.word	0x40020428
 800316c:	40020440 	.word	0x40020440
 8003170:	40020458 	.word	0x40020458
 8003174:	40020470 	.word	0x40020470
 8003178:	40020488 	.word	0x40020488
 800317c:	400204a0 	.word	0x400204a0
 8003180:	400204b8 	.word	0x400204b8
 8003184:	58025408 	.word	0x58025408
 8003188:	5802541c 	.word	0x5802541c
 800318c:	58025430 	.word	0x58025430
 8003190:	58025444 	.word	0x58025444
 8003194:	58025458 	.word	0x58025458
 8003198:	5802546c 	.word	0x5802546c
 800319c:	58025480 	.word	0x58025480
 80031a0:	58025494 	.word	0x58025494
 80031a4:	2300      	movs	r3, #0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d028      	beq.n	80031fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2201      	movs	r2, #1
 80031ca:	409a      	lsls	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00c      	beq.n	80031fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop

08003228 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003236:	b2db      	uxtb	r3, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	@ 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003252:	4b89      	ldr	r3, [pc, #548]	@ (8003478 <HAL_GPIO_Init+0x234>)
 8003254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003256:	e194      	b.n	8003582 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2101      	movs	r1, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8186 	beq.w	800357c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d005      	beq.n	8003288 <HAL_GPIO_Init+0x44>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d130      	bne.n	80032ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	2203      	movs	r2, #3
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032be:	2201      	movs	r2, #1
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	f003 0201 	and.w	r2, r3, #1
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d017      	beq.n	8003326 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	2203      	movs	r2, #3
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d123      	bne.n	800337a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	08da      	lsrs	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3208      	adds	r2, #8
 800333a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	220f      	movs	r2, #15
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	08da      	lsrs	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3208      	adds	r2, #8
 8003374:	69b9      	ldr	r1, [r7, #24]
 8003376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	2203      	movs	r2, #3
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0203 	and.w	r2, r3, #3
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80e0 	beq.w	800357c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033bc:	4b2f      	ldr	r3, [pc, #188]	@ (800347c <HAL_GPIO_Init+0x238>)
 80033be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033c2:	4a2e      	ldr	r2, [pc, #184]	@ (800347c <HAL_GPIO_Init+0x238>)
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80033cc:	4b2b      	ldr	r3, [pc, #172]	@ (800347c <HAL_GPIO_Init+0x238>)
 80033ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033da:	4a29      	ldr	r2, [pc, #164]	@ (8003480 <HAL_GPIO_Init+0x23c>)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	3302      	adds	r3, #2
 80033e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	220f      	movs	r2, #15
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a20      	ldr	r2, [pc, #128]	@ (8003484 <HAL_GPIO_Init+0x240>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d052      	beq.n	80034ac <HAL_GPIO_Init+0x268>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1f      	ldr	r2, [pc, #124]	@ (8003488 <HAL_GPIO_Init+0x244>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d031      	beq.n	8003472 <HAL_GPIO_Init+0x22e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1e      	ldr	r2, [pc, #120]	@ (800348c <HAL_GPIO_Init+0x248>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d02b      	beq.n	800346e <HAL_GPIO_Init+0x22a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1d      	ldr	r2, [pc, #116]	@ (8003490 <HAL_GPIO_Init+0x24c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d025      	beq.n	800346a <HAL_GPIO_Init+0x226>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1c      	ldr	r2, [pc, #112]	@ (8003494 <HAL_GPIO_Init+0x250>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01f      	beq.n	8003466 <HAL_GPIO_Init+0x222>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1b      	ldr	r2, [pc, #108]	@ (8003498 <HAL_GPIO_Init+0x254>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d019      	beq.n	8003462 <HAL_GPIO_Init+0x21e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1a      	ldr	r2, [pc, #104]	@ (800349c <HAL_GPIO_Init+0x258>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_GPIO_Init+0x21a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a19      	ldr	r2, [pc, #100]	@ (80034a0 <HAL_GPIO_Init+0x25c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00d      	beq.n	800345a <HAL_GPIO_Init+0x216>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a18      	ldr	r2, [pc, #96]	@ (80034a4 <HAL_GPIO_Init+0x260>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d007      	beq.n	8003456 <HAL_GPIO_Init+0x212>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a17      	ldr	r2, [pc, #92]	@ (80034a8 <HAL_GPIO_Init+0x264>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_GPIO_Init+0x20e>
 800344e:	2309      	movs	r3, #9
 8003450:	e02d      	b.n	80034ae <HAL_GPIO_Init+0x26a>
 8003452:	230a      	movs	r3, #10
 8003454:	e02b      	b.n	80034ae <HAL_GPIO_Init+0x26a>
 8003456:	2308      	movs	r3, #8
 8003458:	e029      	b.n	80034ae <HAL_GPIO_Init+0x26a>
 800345a:	2307      	movs	r3, #7
 800345c:	e027      	b.n	80034ae <HAL_GPIO_Init+0x26a>
 800345e:	2306      	movs	r3, #6
 8003460:	e025      	b.n	80034ae <HAL_GPIO_Init+0x26a>
 8003462:	2305      	movs	r3, #5
 8003464:	e023      	b.n	80034ae <HAL_GPIO_Init+0x26a>
 8003466:	2304      	movs	r3, #4
 8003468:	e021      	b.n	80034ae <HAL_GPIO_Init+0x26a>
 800346a:	2303      	movs	r3, #3
 800346c:	e01f      	b.n	80034ae <HAL_GPIO_Init+0x26a>
 800346e:	2302      	movs	r3, #2
 8003470:	e01d      	b.n	80034ae <HAL_GPIO_Init+0x26a>
 8003472:	2301      	movs	r3, #1
 8003474:	e01b      	b.n	80034ae <HAL_GPIO_Init+0x26a>
 8003476:	bf00      	nop
 8003478:	58000080 	.word	0x58000080
 800347c:	58024400 	.word	0x58024400
 8003480:	58000400 	.word	0x58000400
 8003484:	58020000 	.word	0x58020000
 8003488:	58020400 	.word	0x58020400
 800348c:	58020800 	.word	0x58020800
 8003490:	58020c00 	.word	0x58020c00
 8003494:	58021000 	.word	0x58021000
 8003498:	58021400 	.word	0x58021400
 800349c:	58021800 	.word	0x58021800
 80034a0:	58021c00 	.word	0x58021c00
 80034a4:	58022000 	.word	0x58022000
 80034a8:	58022400 	.word	0x58022400
 80034ac:	2300      	movs	r3, #0
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	f002 0203 	and.w	r2, r2, #3
 80034b4:	0092      	lsls	r2, r2, #2
 80034b6:	4093      	lsls	r3, r2
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034be:	4938      	ldr	r1, [pc, #224]	@ (80035a0 <HAL_GPIO_Init+0x35c>)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	3302      	adds	r3, #2
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003520:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3301      	adds	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	f47f ae63 	bne.w	8003258 <HAL_GPIO_Init+0x14>
  }
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	3724      	adds	r7, #36	@ 0x24
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	58000400 	.word	0x58000400

080035a4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80035ac:	4a08      	ldr	r2, [pc, #32]	@ (80035d0 <HAL_HSEM_FastTake+0x2c>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3320      	adds	r3, #32
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	4a07      	ldr	r2, [pc, #28]	@ (80035d4 <HAL_HSEM_FastTake+0x30>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	58026400 	.word	0x58026400
 80035d4:	80000300 	.word	0x80000300

080035d8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80035e2:	4906      	ldr	r1, [pc, #24]	@ (80035fc <HAL_HSEM_Release+0x24>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	58026400 	.word	0x58026400

08003600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e08b      	b.n	800372a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fd fa94 	bl	8000b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2224      	movs	r2, #36	@ 0x24
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003650:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003660:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d107      	bne.n	800367a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	e006      	b.n	8003688 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003686:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d108      	bne.n	80036a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	e007      	b.n	80036b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003734 <HAL_I2C_Init+0x134>)
 80036be:	430b      	orrs	r3, r1
 80036c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69d9      	ldr	r1, [r3, #28]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1a      	ldr	r2, [r3, #32]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	02008000 	.word	0x02008000

08003738 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	4608      	mov	r0, r1
 8003742:	4611      	mov	r1, r2
 8003744:	461a      	mov	r2, r3
 8003746:	4603      	mov	r3, r0
 8003748:	817b      	strh	r3, [r7, #10]
 800374a:	460b      	mov	r3, r1
 800374c:	813b      	strh	r3, [r7, #8]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b20      	cmp	r3, #32
 800375c:	f040 80fd 	bne.w	800395a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_I2C_Mem_Read+0x34>
 8003766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003772:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0f1      	b.n	800395c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_I2C_Mem_Read+0x4e>
 8003782:	2302      	movs	r3, #2
 8003784:	e0ea      	b.n	800395c <HAL_I2C_Mem_Read+0x224>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800378e:	f7fd fe5f 	bl	8001450 <HAL_GetTick>
 8003792:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2319      	movs	r3, #25
 800379a:	2201      	movs	r2, #1
 800379c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f001 ff7a 	bl	800569a <I2C_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0d5      	b.n	800395c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2222      	movs	r2, #34	@ 0x22
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2240      	movs	r2, #64	@ 0x40
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a3a      	ldr	r2, [r7, #32]
 80037ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037d8:	88f8      	ldrh	r0, [r7, #6]
 80037da:	893a      	ldrh	r2, [r7, #8]
 80037dc:	8979      	ldrh	r1, [r7, #10]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4603      	mov	r3, r0
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f001 f90f 	bl	8004a0c <I2C_RequestMemoryRead>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0ad      	b.n	800395c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2bff      	cmp	r3, #255	@ 0xff
 8003808:	d90e      	bls.n	8003828 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	22ff      	movs	r2, #255	@ 0xff
 800380e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003814:	b2da      	uxtb	r2, r3
 8003816:	8979      	ldrh	r1, [r7, #10]
 8003818:	4b52      	ldr	r3, [pc, #328]	@ (8003964 <HAL_I2C_Mem_Read+0x22c>)
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f002 f8fd 	bl	8005a20 <I2C_TransferConfig>
 8003826:	e00f      	b.n	8003848 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003836:	b2da      	uxtb	r2, r3
 8003838:	8979      	ldrh	r1, [r7, #10]
 800383a:	4b4a      	ldr	r3, [pc, #296]	@ (8003964 <HAL_I2C_Mem_Read+0x22c>)
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f002 f8ec 	bl	8005a20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384e:	2200      	movs	r2, #0
 8003850:	2104      	movs	r1, #4
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f001 ff21 	bl	800569a <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e07c      	b.n	800395c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d034      	beq.n	8003908 <HAL_I2C_Mem_Read+0x1d0>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d130      	bne.n	8003908 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ac:	2200      	movs	r2, #0
 80038ae:	2180      	movs	r1, #128	@ 0x80
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f001 fef2 	bl	800569a <I2C_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e04d      	b.n	800395c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2bff      	cmp	r3, #255	@ 0xff
 80038c8:	d90e      	bls.n	80038e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	22ff      	movs	r2, #255	@ 0xff
 80038ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	8979      	ldrh	r1, [r7, #10]
 80038d8:	2300      	movs	r3, #0
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f002 f89d 	bl	8005a20 <I2C_TransferConfig>
 80038e6:	e00f      	b.n	8003908 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	8979      	ldrh	r1, [r7, #10]
 80038fa:	2300      	movs	r3, #0
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f002 f88c 	bl	8005a20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d19a      	bne.n	8003848 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f001 ff5f 	bl	80057da <I2C_WaitOnSTOPFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e01a      	b.n	800395c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2220      	movs	r2, #32
 800392c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <HAL_I2C_Mem_Read+0x230>)
 800393a:	400b      	ands	r3, r1
 800393c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	80002400 	.word	0x80002400
 8003968:	fe00e800 	.word	0xfe00e800

0800396c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	4608      	mov	r0, r1
 8003976:	4611      	mov	r1, r2
 8003978:	461a      	mov	r2, r3
 800397a:	4603      	mov	r3, r0
 800397c:	817b      	strh	r3, [r7, #10]
 800397e:	460b      	mov	r3, r1
 8003980:	813b      	strh	r3, [r7, #8]
 8003982:	4613      	mov	r3, r2
 8003984:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b20      	cmp	r3, #32
 8003990:	d16a      	bne.n	8003a68 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_I2C_Mem_Write_IT+0x32>
 8003998:	8bbb      	ldrh	r3, [r7, #28]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d105      	bne.n	80039aa <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039a4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e05f      	b.n	8003a6a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039b8:	d101      	bne.n	80039be <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 80039ba:	2302      	movs	r3, #2
 80039bc:	e055      	b.n	8003a6a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_I2C_Mem_Write_IT+0x60>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e04e      	b.n	8003a6a <HAL_I2C_Mem_Write_IT+0xfe>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2221      	movs	r2, #33	@ 0x21
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2240      	movs	r2, #64	@ 0x40
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8bba      	ldrh	r2, [r7, #28]
 80039fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003a74 <HAL_I2C_Mem_Write_IT+0x108>)
 8003a00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a1c      	ldr	r2, [pc, #112]	@ (8003a78 <HAL_I2C_Mem_Write_IT+0x10c>)
 8003a06:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8003a08:	897a      	ldrh	r2, [r7, #10]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d109      	bne.n	8003a28 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a14:	893b      	ldrh	r3, [r7, #8]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a24:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a26:	e00b      	b.n	8003a40 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a28:	893b      	ldrh	r3, [r7, #8]
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003a36:	893b      	ldrh	r3, [r7, #8]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	8979      	ldrh	r1, [r7, #10]
 8003a46:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <HAL_I2C_Mem_Write_IT+0x110>)
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f001 ffe6 	bl	8005a20 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f002 f810 	bl	8005a84 <I2C_Enable_IRQ>

    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	ffff0000 	.word	0xffff0000
 8003a78:	08003d91 	.word	0x08003d91
 8003a7c:	80002000 	.word	0x80002000

08003a80 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	@ 0x28
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	f040 80e9 	bne.w	8003c78 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab4:	d101      	bne.n	8003aba <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e0df      	b.n	8003c7a <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_I2C_IsDeviceReady+0x48>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e0d8      	b.n	8003c7a <HAL_I2C_IsDeviceReady+0x1fa>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2224      	movs	r2, #36	@ 0x24
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d105      	bne.n	8003af2 <HAL_I2C_IsDeviceReady+0x72>
 8003ae6:	897b      	ldrh	r3, [r7, #10]
 8003ae8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003aec:	4b65      	ldr	r3, [pc, #404]	@ (8003c84 <HAL_I2C_IsDeviceReady+0x204>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	e004      	b.n	8003afc <HAL_I2C_IsDeviceReady+0x7c>
 8003af2:	897b      	ldrh	r3, [r7, #10]
 8003af4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003af8:	4b63      	ldr	r3, [pc, #396]	@ (8003c88 <HAL_I2C_IsDeviceReady+0x208>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003b02:	f7fd fca5 	bl	8001450 <HAL_GetTick>
 8003b06:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003b34:	e034      	b.n	8003ba0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b3c:	d01a      	beq.n	8003b74 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fd fc87 	bl	8001450 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <HAL_I2C_IsDeviceReady+0xd4>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10f      	bne.n	8003b74 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b60:	f043 0220 	orr.w	r2, r3, #32
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e082      	b.n	8003c7a <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	bf0c      	ite	eq
 8003b82:	2301      	moveq	r3, #1
 8003b84:	2300      	movne	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003ba0:	7fbb      	ldrb	r3, [r7, #30]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <HAL_I2C_IsDeviceReady+0x12c>
 8003ba6:	7f7b      	ldrb	r3, [r7, #29]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0c4      	beq.n	8003b36 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d027      	beq.n	8003c0a <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2120      	movs	r1, #32
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f001 fd68 	bl	800569a <I2C_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00e      	beq.n	8003bee <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d107      	bne.n	8003be8 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003be6:	e026      	b.n	8003c36 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e023      	b.n	8003c36 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e037      	b.n	8003c7a <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2210      	movs	r2, #16
 8003c10:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2120      	movs	r1, #32
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f001 fd3c 	bl	800569a <I2C_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e003      	b.n	8003c36 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2220      	movs	r2, #32
 8003c34:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d904      	bls.n	8003c4e <HAL_I2C_IsDeviceReady+0x1ce>
 8003c44:	7ffb      	ldrb	r3, [r7, #31]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	f63f af43 	bhi.w	8003ade <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	02002000 	.word	0x02002000
 8003c88:	02002800 	.word	0x02002800

08003c8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	68f9      	ldr	r1, [r7, #12]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
  }
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003d9c:	4b93      	ldr	r3, [pc, #588]	@ (8003fec <I2C_Mem_ISR_IT+0x25c>)
 8003d9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <I2C_Mem_ISR_IT+0x22>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e118      	b.n	8003fe4 <I2C_Mem_ISR_IT+0x254>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d013      	beq.n	8003dee <I2C_Mem_ISR_IT+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <I2C_Mem_ISR_IT+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2210      	movs	r2, #16
 8003dd8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f043 0204 	orr.w	r2, r3, #4
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f001 fc15 	bl	8005616 <I2C_Flush_TXDR>
 8003dec:	e0e5      	b.n	8003fba <I2C_Mem_ISR_IT+0x22a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	089b      	lsrs	r3, r3, #2
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d023      	beq.n	8003e42 <I2C_Mem_ISR_IT+0xb2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01d      	beq.n	8003e42 <I2C_Mem_ISR_IT+0xb2>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f023 0304 	bic.w	r3, r3, #4
 8003e0c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e40:	e0bb      	b.n	8003fba <I2C_Mem_ISR_IT+0x22a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d02d      	beq.n	8003eaa <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d027      	beq.n	8003eaa <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e62:	d118      	bne.n	8003e96 <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003e94:	e091      	b.n	8003fba <I2C_Mem_ISR_IT+0x22a>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ea6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003ea8:	e087      	b.n	8003fba <I2C_Mem_ISR_IT+0x22a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	09db      	lsrs	r3, r3, #7
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d03d      	beq.n	8003f32 <I2C_Mem_ISR_IT+0x1a2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	099b      	lsrs	r3, r3, #6
 8003eba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d037      	beq.n	8003f32 <I2C_Mem_ISR_IT+0x1a2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d02c      	beq.n	8003f26 <I2C_Mem_ISR_IT+0x196>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d128      	bne.n	8003f26 <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2bff      	cmp	r3, #255	@ 0xff
 8003edc:	d910      	bls.n	8003f00 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	22ff      	movs	r2, #255	@ 0xff
 8003ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee8:	b299      	uxth	r1, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f001 fd91 	bl	8005a20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003efe:	e017      	b.n	8003f30 <I2C_Mem_ISR_IT+0x1a0>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0e:	b299      	uxth	r1, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	2300      	movs	r3, #0
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f001 fd7e 	bl	8005a20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f24:	e004      	b.n	8003f30 <I2C_Mem_ISR_IT+0x1a0>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f26:	2140      	movs	r1, #64	@ 0x40
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f001 fa5d 	bl	80053e8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f2e:	e044      	b.n	8003fba <I2C_Mem_ISR_IT+0x22a>
 8003f30:	e043      	b.n	8003fba <I2C_Mem_ISR_IT+0x22a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d03d      	beq.n	8003fba <I2C_Mem_ISR_IT+0x22a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	099b      	lsrs	r3, r3, #6
 8003f42:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d037      	beq.n	8003fba <I2C_Mem_ISR_IT+0x22a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f001 fe1d 	bl	8005b8c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f52:	2102      	movs	r1, #2
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f001 fd95 	bl	8005a84 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b22      	cmp	r3, #34	@ 0x22
 8003f64:	d101      	bne.n	8003f6a <I2C_Mem_ISR_IT+0x1da>
    {
      direction = I2C_GENERATE_START_READ;
 8003f66:	4b22      	ldr	r3, [pc, #136]	@ (8003ff0 <I2C_Mem_ISR_IT+0x260>)
 8003f68:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2bff      	cmp	r3, #255	@ 0xff
 8003f72:	d910      	bls.n	8003f96 <I2C_Mem_ISR_IT+0x206>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	22ff      	movs	r2, #255	@ 0xff
 8003f78:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	b299      	uxth	r1, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f001 fd46 	bl	8005a20 <I2C_TransferConfig>
 8003f94:	e011      	b.n	8003fba <I2C_Mem_ISR_IT+0x22a>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa4:	b299      	uxth	r1, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f001 fd33 	bl	8005a20 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <I2C_Mem_ISR_IT+0x24a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <I2C_Mem_ISR_IT+0x24a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003fd2:	6939      	ldr	r1, [r7, #16]
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fe8d 	bl	8004cf4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	80002000 	.word	0x80002000
 8003ff0:	80002400 	.word	0x80002400

08003ff4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <I2C_Slave_ISR_IT+0x24>
 8004014:	2302      	movs	r3, #2
 8004016:	e0ed      	b.n	80041f4 <I2C_Slave_ISR_IT+0x200>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004034:	2b00      	cmp	r3, #0
 8004036:	d004      	beq.n	8004042 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004038:	6939      	ldr	r1, [r7, #16]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 ff24 	bl	8004e88 <I2C_ITSlaveCplt>
 8004040:	e0d3      	b.n	80041ea <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d04d      	beq.n	80040ea <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004056:	2b00      	cmp	r3, #0
 8004058:	d047      	beq.n	80040ea <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d128      	bne.n	80040b6 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b28      	cmp	r3, #40	@ 0x28
 800406e:	d108      	bne.n	8004082 <I2C_Slave_ISR_IT+0x8e>
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004076:	d104      	bne.n	8004082 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004078:	6939      	ldr	r1, [r7, #16]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f001 f95e 	bl	800533c <I2C_ITListenCplt>
 8004080:	e032      	b.n	80040e8 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b29      	cmp	r3, #41	@ 0x29
 800408c:	d10e      	bne.n	80040ac <I2C_Slave_ISR_IT+0xb8>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004094:	d00a      	beq.n	80040ac <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2210      	movs	r2, #16
 800409c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f001 fab9 	bl	8005616 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fdc6 	bl	8004c36 <I2C_ITSlaveSeqCplt>
 80040aa:	e01d      	b.n	80040e8 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2210      	movs	r2, #16
 80040b2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80040b4:	e096      	b.n	80041e4 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2210      	movs	r2, #16
 80040bc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	f043 0204 	orr.w	r2, r3, #4
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d004      	beq.n	80040da <I2C_Slave_ISR_IT+0xe6>
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040d6:	f040 8085 	bne.w	80041e4 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	4619      	mov	r1, r3
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f001 f981 	bl	80053e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80040e6:	e07d      	b.n	80041e4 <I2C_Slave_ISR_IT+0x1f0>
 80040e8:	e07c      	b.n	80041e4 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d030      	beq.n	8004158 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	089b      	lsrs	r3, r3, #2
 80040fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d02a      	beq.n	8004158 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d018      	beq.n	800413e <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d14f      	bne.n	80041e8 <I2C_Slave_ISR_IT+0x1f4>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800414e:	d04b      	beq.n	80041e8 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fd70 	bl	8004c36 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004156:	e047      	b.n	80041e8 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	08db      	lsrs	r3, r3, #3
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	08db      	lsrs	r3, r3, #3
 8004168:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004170:	6939      	ldr	r1, [r7, #16]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fc9e 	bl	8004ab4 <I2C_ITAddrCplt>
 8004178:	e037      	b.n	80041ea <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d031      	beq.n	80041ea <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	085b      	lsrs	r3, r3, #1
 800418a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800418e:	2b00      	cmp	r3, #0
 8004190:	d02b      	beq.n	80041ea <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d018      	beq.n	80041ce <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	@ 0x28
 80041cc:	e00d      	b.n	80041ea <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041d4:	d002      	beq.n	80041dc <I2C_Slave_ISR_IT+0x1e8>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fd2a 	bl	8004c36 <I2C_ITSlaveSeqCplt>
 80041e2:	e002      	b.n	80041ea <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80041e4:	bf00      	nop
 80041e6:	e000      	b.n	80041ea <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80041e8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <I2C_Master_ISR_DMA+0x1a>
 8004212:	2302      	movs	r3, #2
 8004214:	e0e1      	b.n	80043da <I2C_Master_ISR_DMA+0x1de>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d017      	beq.n	800425a <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004232:	2b00      	cmp	r3, #0
 8004234:	d011      	beq.n	800425a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2210      	movs	r2, #16
 800423c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	f043 0204 	orr.w	r2, r3, #4
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800424a:	2120      	movs	r1, #32
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f001 fc19 	bl	8005a84 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f001 f9df 	bl	8005616 <I2C_Flush_TXDR>
 8004258:	e0ba      	b.n	80043d0 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	09db      	lsrs	r3, r3, #7
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d072      	beq.n	800434c <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800426e:	2b00      	cmp	r3, #0
 8004270:	d06c      	beq.n	800434c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004280:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d04e      	beq.n	800432a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004298:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2bff      	cmp	r3, #255	@ 0xff
 80042a2:	d906      	bls.n	80042b2 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	22ff      	movs	r2, #255	@ 0xff
 80042a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80042aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	e010      	b.n	80042d4 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042c4:	d003      	beq.n	80042ce <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e002      	b.n	80042d4 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80042ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042d2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	8a79      	ldrh	r1, [r7, #18]
 80042dc:	2300      	movs	r3, #0
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f001 fb9c 	bl	8005a20 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b22      	cmp	r3, #34	@ 0x22
 8004304:	d108      	bne.n	8004318 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004314:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004316:	e05b      	b.n	80043d0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004326:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004328:	e052      	b.n	80043d0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004334:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004338:	d003      	beq.n	8004342 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fc3e 	bl	8004bbc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004340:	e046      	b.n	80043d0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004342:	2140      	movs	r1, #64	@ 0x40
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f001 f84f 	bl	80053e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800434a:	e041      	b.n	80043d0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	099b      	lsrs	r3, r3, #6
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d029      	beq.n	80043ac <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004360:	2b00      	cmp	r3, #0
 8004362:	d023      	beq.n	80043ac <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d119      	bne.n	80043a2 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004378:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800437c:	d027      	beq.n	80043ce <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004386:	d108      	bne.n	800439a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004396:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004398:	e019      	b.n	80043ce <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fc0e 	bl	8004bbc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80043a0:	e015      	b.n	80043ce <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80043a2:	2140      	movs	r1, #64	@ 0x40
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f001 f81f 	bl	80053e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80043aa:	e010      	b.n	80043ce <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00b      	beq.n	80043d0 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 fc94 	bl	8004cf4 <I2C_ITMasterCplt>
 80043cc:	e000      	b.n	80043d0 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80043ce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80043f0:	4b92      	ldr	r3, [pc, #584]	@ (800463c <I2C_Mem_ISR_DMA+0x258>)
 80043f2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <I2C_Mem_ISR_DMA+0x1e>
 80043fe:	2302      	movs	r3, #2
 8004400:	e118      	b.n	8004634 <I2C_Mem_ISR_DMA+0x250>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d017      	beq.n	8004446 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800441e:	2b00      	cmp	r3, #0
 8004420:	d011      	beq.n	8004446 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2210      	movs	r2, #16
 8004428:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442e:	f043 0204 	orr.w	r2, r3, #4
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004436:	2120      	movs	r1, #32
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f001 fb23 	bl	8005a84 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f001 f8e9 	bl	8005616 <I2C_Flush_TXDR>
 8004444:	e0f1      	b.n	800462a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00f      	beq.n	8004472 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004466:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800446e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004470:	e0db      	b.n	800462a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	09db      	lsrs	r3, r3, #7
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d060      	beq.n	8004540 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	099b      	lsrs	r3, r3, #6
 8004482:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004486:	2b00      	cmp	r3, #0
 8004488:	d05a      	beq.n	8004540 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800448a:	2101      	movs	r1, #1
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f001 fb7d 	bl	8005b8c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004492:	2110      	movs	r1, #16
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f001 faf5 	bl	8005a84 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d048      	beq.n	8004536 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2bff      	cmp	r3, #255	@ 0xff
 80044ac:	d910      	bls.n	80044d0 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	22ff      	movs	r2, #255	@ 0xff
 80044b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b8:	b299      	uxth	r1, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	2300      	movs	r3, #0
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f001 faa9 	bl	8005a20 <I2C_TransferConfig>
 80044ce:	e011      	b.n	80044f4 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044de:	b299      	uxth	r1, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	2300      	movs	r3, #0
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f001 fa96 	bl	8005a20 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b22      	cmp	r3, #34	@ 0x22
 8004510:	d108      	bne.n	8004524 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004520:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004522:	e082      	b.n	800462a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004532:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004534:	e079      	b.n	800462a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004536:	2140      	movs	r1, #64	@ 0x40
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 ff55 	bl	80053e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800453e:	e074      	b.n	800462a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d05e      	beq.n	800460a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004554:	2b00      	cmp	r3, #0
 8004556:	d058      	beq.n	800460a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004558:	2101      	movs	r1, #1
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f001 fb16 	bl	8005b8c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004560:	2110      	movs	r1, #16
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f001 fa8e 	bl	8005a84 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b22      	cmp	r3, #34	@ 0x22
 8004572:	d101      	bne.n	8004578 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8004574:	4b32      	ldr	r3, [pc, #200]	@ (8004640 <I2C_Mem_ISR_DMA+0x25c>)
 8004576:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	2bff      	cmp	r3, #255	@ 0xff
 8004580:	d910      	bls.n	80045a4 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	22ff      	movs	r2, #255	@ 0xff
 8004586:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458c:	b299      	uxth	r1, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004592:	b2da      	uxtb	r2, r3
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f001 fa3f 	bl	8005a20 <I2C_TransferConfig>
 80045a2:	e011      	b.n	80045c8 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045b2:	b299      	uxth	r1, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f001 fa2c 	bl	8005a20 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b22      	cmp	r3, #34	@ 0x22
 80045e4:	d108      	bne.n	80045f8 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045f4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045f6:	e018      	b.n	800462a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004606:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004608:	e00f      	b.n	800462a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fb65 	bl	8004cf4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	80002000 	.word	0x80002000
 8004640:	80002400 	.word	0x80002400

08004644 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <I2C_Slave_ISR_DMA+0x24>
 8004664:	2302      	movs	r3, #2
 8004666:	e1cc      	b.n	8004a02 <I2C_Slave_ISR_DMA+0x3be>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fbfc 	bl	8004e88 <I2C_ITSlaveCplt>
 8004690:	e1b2      	b.n	80049f8 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 819c 	beq.w	80049d8 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8195 	beq.w	80049d8 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	0b9b      	lsrs	r3, r3, #14
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0bdb      	lsrs	r3, r3, #15
 80046be:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8181 	beq.w	80049ca <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d07c      	beq.n	80047ca <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	0bdb      	lsrs	r3, r3, #15
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d076      	beq.n	80047ca <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a75      	ldr	r2, [pc, #468]	@ (80048b8 <I2C_Slave_ISR_DMA+0x274>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d059      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a73      	ldr	r2, [pc, #460]	@ (80048bc <I2C_Slave_ISR_DMA+0x278>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d053      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a71      	ldr	r2, [pc, #452]	@ (80048c0 <I2C_Slave_ISR_DMA+0x27c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d04d      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a6f      	ldr	r2, [pc, #444]	@ (80048c4 <I2C_Slave_ISR_DMA+0x280>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d047      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a6d      	ldr	r2, [pc, #436]	@ (80048c8 <I2C_Slave_ISR_DMA+0x284>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d041      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a6b      	ldr	r2, [pc, #428]	@ (80048cc <I2C_Slave_ISR_DMA+0x288>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d03b      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a69      	ldr	r2, [pc, #420]	@ (80048d0 <I2C_Slave_ISR_DMA+0x28c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d035      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a67      	ldr	r2, [pc, #412]	@ (80048d4 <I2C_Slave_ISR_DMA+0x290>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d02f      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a65      	ldr	r2, [pc, #404]	@ (80048d8 <I2C_Slave_ISR_DMA+0x294>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d029      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a63      	ldr	r2, [pc, #396]	@ (80048dc <I2C_Slave_ISR_DMA+0x298>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d023      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a61      	ldr	r2, [pc, #388]	@ (80048e0 <I2C_Slave_ISR_DMA+0x29c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d01d      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a5f      	ldr	r2, [pc, #380]	@ (80048e4 <I2C_Slave_ISR_DMA+0x2a0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d017      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a5d      	ldr	r2, [pc, #372]	@ (80048e8 <I2C_Slave_ISR_DMA+0x2a4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d011      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a5b      	ldr	r2, [pc, #364]	@ (80048ec <I2C_Slave_ISR_DMA+0x2a8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00b      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a59      	ldr	r2, [pc, #356]	@ (80048f0 <I2C_Slave_ISR_DMA+0x2ac>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d005      	beq.n	800479c <I2C_Slave_ISR_DMA+0x158>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a57      	ldr	r2, [pc, #348]	@ (80048f4 <I2C_Slave_ISR_DMA+0x2b0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d109      	bne.n	80047b0 <I2C_Slave_ISR_DMA+0x16c>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf0c      	ite	eq
 80047a8:	2301      	moveq	r3, #1
 80047aa:	2300      	movne	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e008      	b.n	80047c2 <I2C_Slave_ISR_DMA+0x17e>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 80047c6:	2301      	movs	r3, #1
 80047c8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 809f 	beq.w	8004912 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0b9b      	lsrs	r3, r3, #14
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8098 	beq.w	8004912 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a33      	ldr	r2, [pc, #204]	@ (80048b8 <I2C_Slave_ISR_DMA+0x274>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d059      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a31      	ldr	r2, [pc, #196]	@ (80048bc <I2C_Slave_ISR_DMA+0x278>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d053      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a2f      	ldr	r2, [pc, #188]	@ (80048c0 <I2C_Slave_ISR_DMA+0x27c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d04d      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a2d      	ldr	r2, [pc, #180]	@ (80048c4 <I2C_Slave_ISR_DMA+0x280>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d047      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a2b      	ldr	r2, [pc, #172]	@ (80048c8 <I2C_Slave_ISR_DMA+0x284>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d041      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a29      	ldr	r2, [pc, #164]	@ (80048cc <I2C_Slave_ISR_DMA+0x288>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d03b      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a27      	ldr	r2, [pc, #156]	@ (80048d0 <I2C_Slave_ISR_DMA+0x28c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d035      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a25      	ldr	r2, [pc, #148]	@ (80048d4 <I2C_Slave_ISR_DMA+0x290>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d02f      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a23      	ldr	r2, [pc, #140]	@ (80048d8 <I2C_Slave_ISR_DMA+0x294>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d029      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a21      	ldr	r2, [pc, #132]	@ (80048dc <I2C_Slave_ISR_DMA+0x298>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d023      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1f      	ldr	r2, [pc, #124]	@ (80048e0 <I2C_Slave_ISR_DMA+0x29c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d01d      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1d      	ldr	r2, [pc, #116]	@ (80048e4 <I2C_Slave_ISR_DMA+0x2a0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d017      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <I2C_Slave_ISR_DMA+0x2a4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d011      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a19      	ldr	r2, [pc, #100]	@ (80048ec <I2C_Slave_ISR_DMA+0x2a8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00b      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a17      	ldr	r2, [pc, #92]	@ (80048f0 <I2C_Slave_ISR_DMA+0x2ac>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d005      	beq.n	80048a2 <I2C_Slave_ISR_DMA+0x25e>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <I2C_Slave_ISR_DMA+0x2b0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d12a      	bne.n	80048f8 <I2C_Slave_ISR_DMA+0x2b4>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bf0c      	ite	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	2300      	movne	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	e029      	b.n	800490a <I2C_Slave_ISR_DMA+0x2c6>
 80048b6:	bf00      	nop
 80048b8:	40020010 	.word	0x40020010
 80048bc:	40020028 	.word	0x40020028
 80048c0:	40020040 	.word	0x40020040
 80048c4:	40020058 	.word	0x40020058
 80048c8:	40020070 	.word	0x40020070
 80048cc:	40020088 	.word	0x40020088
 80048d0:	400200a0 	.word	0x400200a0
 80048d4:	400200b8 	.word	0x400200b8
 80048d8:	40020410 	.word	0x40020410
 80048dc:	40020428 	.word	0x40020428
 80048e0:	40020440 	.word	0x40020440
 80048e4:	40020458 	.word	0x40020458
 80048e8:	40020470 	.word	0x40020470
 80048ec:	40020488 	.word	0x40020488
 80048f0:	400204a0 	.word	0x400204a0
 80048f4:	400204b8 	.word	0x400204b8
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800490e:	2301      	movs	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d128      	bne.n	800496a <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b28      	cmp	r3, #40	@ 0x28
 8004922:	d108      	bne.n	8004936 <I2C_Slave_ISR_DMA+0x2f2>
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800492a:	d104      	bne.n	8004936 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fd04 	bl	800533c <I2C_ITListenCplt>
 8004934:	e048      	b.n	80049c8 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b29      	cmp	r3, #41	@ 0x29
 8004940:	d10e      	bne.n	8004960 <I2C_Slave_ISR_DMA+0x31c>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004948:	d00a      	beq.n	8004960 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2210      	movs	r2, #16
 8004950:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 fe5f 	bl	8005616 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f96c 	bl	8004c36 <I2C_ITSlaveSeqCplt>
 800495e:	e033      	b.n	80049c8 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2210      	movs	r2, #16
 8004966:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004968:	e034      	b.n	80049d4 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2210      	movs	r2, #16
 8004970:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004976:	f043 0204 	orr.w	r2, r3, #4
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004984:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <I2C_Slave_ISR_DMA+0x350>
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004992:	d11f      	bne.n	80049d4 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004994:	7dfb      	ldrb	r3, [r7, #23]
 8004996:	2b21      	cmp	r3, #33	@ 0x21
 8004998:	d002      	beq.n	80049a0 <I2C_Slave_ISR_DMA+0x35c>
 800499a:	7dfb      	ldrb	r3, [r7, #23]
 800499c:	2b29      	cmp	r3, #41	@ 0x29
 800499e:	d103      	bne.n	80049a8 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2221      	movs	r2, #33	@ 0x21
 80049a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80049a6:	e008      	b.n	80049ba <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
 80049aa:	2b22      	cmp	r3, #34	@ 0x22
 80049ac:	d002      	beq.n	80049b4 <I2C_Slave_ISR_DMA+0x370>
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80049b2:	d102      	bne.n	80049ba <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2222      	movs	r2, #34	@ 0x22
 80049b8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049be:	4619      	mov	r1, r3
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fd11 	bl	80053e8 <I2C_ITError>
      if (treatdmanack == 1U)
 80049c6:	e005      	b.n	80049d4 <I2C_Slave_ISR_DMA+0x390>
 80049c8:	e004      	b.n	80049d4 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2210      	movs	r2, #16
 80049d0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80049d2:	e011      	b.n	80049f8 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 80049d4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80049d6:	e00f      	b.n	80049f8 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	08db      	lsrs	r3, r3, #3
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d009      	beq.n	80049f8 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	08db      	lsrs	r3, r3, #3
 80049e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f85e 	bl	8004ab4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop

08004a0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	4608      	mov	r0, r1
 8004a16:	4611      	mov	r1, r2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	817b      	strh	r3, [r7, #10]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	813b      	strh	r3, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	8979      	ldrh	r1, [r7, #10]
 8004a2c:	4b20      	ldr	r3, [pc, #128]	@ (8004ab0 <I2C_RequestMemoryRead+0xa4>)
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	2300      	movs	r3, #0
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fff4 	bl	8005a20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	69b9      	ldr	r1, [r7, #24]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fe85 	bl	800574c <I2C_WaitOnTXISFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e02c      	b.n	8004aa6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a4c:	88fb      	ldrh	r3, [r7, #6]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d105      	bne.n	8004a5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a52:	893b      	ldrh	r3, [r7, #8]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a5c:	e015      	b.n	8004a8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a5e:	893b      	ldrh	r3, [r7, #8]
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	69b9      	ldr	r1, [r7, #24]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fe6b 	bl	800574c <I2C_WaitOnTXISFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e012      	b.n	8004aa6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a80:	893b      	ldrh	r3, [r7, #8]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2200      	movs	r2, #0
 8004a92:	2140      	movs	r1, #64	@ 0x40
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 fe00 	bl	800569a <I2C_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	80002000 	.word	0x80002000

08004ab4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004aca:	2b28      	cmp	r3, #40	@ 0x28
 8004acc:	d16a      	bne.n	8004ba4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	0c1b      	lsrs	r3, r3, #16
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004aec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004afa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004b08:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d138      	bne.n	8004b84 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004b12:	897b      	ldrh	r3, [r7, #10]
 8004b14:	09db      	lsrs	r3, r3, #7
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	89bb      	ldrh	r3, [r7, #12]
 8004b1a:	4053      	eors	r3, r2
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f003 0306 	and.w	r3, r3, #6
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11c      	bne.n	8004b60 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004b26:	897b      	ldrh	r3, [r7, #10]
 8004b28:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d13b      	bne.n	8004bb4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2208      	movs	r2, #8
 8004b48:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b52:	89ba      	ldrh	r2, [r7, #12]
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	4619      	mov	r1, r3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff f8d9 	bl	8003d10 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b5e:	e029      	b.n	8004bb4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004b60:	893b      	ldrh	r3, [r7, #8]
 8004b62:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f001 f80f 	bl	8005b8c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b76:	89ba      	ldrh	r2, [r7, #12]
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff f8c7 	bl	8003d10 <HAL_I2C_AddrCallback>
}
 8004b82:	e017      	b.n	8004bb4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 ffff 	bl	8005b8c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b96:	89ba      	ldrh	r2, [r7, #12]
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff f8b7 	bl	8003d10 <HAL_I2C_AddrCallback>
}
 8004ba2:	e007      	b.n	8004bb4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004bb4:	bf00      	nop
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b21      	cmp	r3, #33	@ 0x21
 8004bd6:	d115      	bne.n	8004c04 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2211      	movs	r2, #17
 8004be4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004bec:	2101      	movs	r1, #1
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 ffcc 	bl	8005b8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff f85f 	bl	8003cc0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c02:	e014      	b.n	8004c2e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2212      	movs	r2, #18
 8004c10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c18:	2102      	movs	r1, #2
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 ffb6 	bl	8005b8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff f853 	bl	8003cd4 <HAL_I2C_MasterRxCpltCallback>
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	0b9b      	lsrs	r3, r3, #14
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	e00d      	b.n	8004c88 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	0bdb      	lsrs	r3, r3, #15
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c86:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b29      	cmp	r3, #41	@ 0x29
 8004c92:	d112      	bne.n	8004cba <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2228      	movs	r2, #40	@ 0x28
 8004c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2221      	movs	r2, #33	@ 0x21
 8004ca0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 ff71 	bl	8005b8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff f818 	bl	8003ce8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004cb8:	e017      	b.n	8004cea <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cc4:	d111      	bne.n	8004cea <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2228      	movs	r2, #40	@ 0x28
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2222      	movs	r2, #34	@ 0x22
 8004cd2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 ff58 	bl	8005b8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff f809 	bl	8003cfc <HAL_I2C_SlaveRxCpltCallback>
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2220      	movs	r2, #32
 8004d08:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b21      	cmp	r3, #33	@ 0x21
 8004d14:	d107      	bne.n	8004d26 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d16:	2101      	movs	r1, #1
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 ff37 	bl	8005b8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2211      	movs	r2, #17
 8004d22:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d24:	e00c      	b.n	8004d40 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b22      	cmp	r3, #34	@ 0x22
 8004d30:	d106      	bne.n	8004d40 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d32:	2102      	movs	r1, #2
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 ff29 	bl	8005b8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2212      	movs	r2, #18
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b4d      	ldr	r3, [pc, #308]	@ (8004e80 <I2C_ITMasterCplt+0x18c>)
 8004d4c:	400b      	ands	r3, r1
 8004d4e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a4a      	ldr	r2, [pc, #296]	@ (8004e84 <I2C_ITMasterCplt+0x190>)
 8004d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	091b      	lsrs	r3, r3, #4
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d009      	beq.n	8004d7c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d74:	f043 0204 	orr.w	r2, r3, #4
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b60      	cmp	r3, #96	@ 0x60
 8004d86:	d10b      	bne.n	8004da0 <I2C_ITMasterCplt+0xac>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	089b      	lsrs	r3, r3, #2
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fc38 	bl	8005616 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004daa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b60      	cmp	r3, #96	@ 0x60
 8004db6:	d002      	beq.n	8004dbe <I2C_ITMasterCplt+0xca>
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d006      	beq.n	8004dcc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fb0f 	bl	80053e8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dca:	e054      	b.n	8004e76 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b21      	cmp	r3, #33	@ 0x21
 8004dd6:	d124      	bne.n	8004e22 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b40      	cmp	r3, #64	@ 0x40
 8004df0:	d10b      	bne.n	8004e0a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fe ff9c 	bl	8003d40 <HAL_I2C_MemTxCpltCallback>
}
 8004e08:	e035      	b.n	8004e76 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fe ff50 	bl	8003cc0 <HAL_I2C_MasterTxCpltCallback>
}
 8004e20:	e029      	b.n	8004e76 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b22      	cmp	r3, #34	@ 0x22
 8004e2c:	d123      	bne.n	8004e76 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b40      	cmp	r3, #64	@ 0x40
 8004e46:	d10b      	bne.n	8004e60 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fe ff7b 	bl	8003d54 <HAL_I2C_MemRxCpltCallback>
}
 8004e5e:	e00a      	b.n	8004e76 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7fe ff2f 	bl	8003cd4 <HAL_I2C_MasterRxCpltCallback>
}
 8004e76:	bf00      	nop
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	fe00e800 	.word	0xfe00e800
 8004e84:	ffff0000 	.word	0xffff0000

08004e88 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eaa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004eb4:	7afb      	ldrb	r3, [r7, #11]
 8004eb6:	2b21      	cmp	r3, #33	@ 0x21
 8004eb8:	d002      	beq.n	8004ec0 <I2C_ITSlaveCplt+0x38>
 8004eba:	7afb      	ldrb	r3, [r7, #11]
 8004ebc:	2b29      	cmp	r3, #41	@ 0x29
 8004ebe:	d108      	bne.n	8004ed2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004ec0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fe61 	bl	8005b8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2221      	movs	r2, #33	@ 0x21
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ed0:	e019      	b.n	8004f06 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ed2:	7afb      	ldrb	r3, [r7, #11]
 8004ed4:	2b22      	cmp	r3, #34	@ 0x22
 8004ed6:	d002      	beq.n	8004ede <I2C_ITSlaveCplt+0x56>
 8004ed8:	7afb      	ldrb	r3, [r7, #11]
 8004eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004edc:	d108      	bne.n	8004ef0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004ede:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fe52 	bl	8005b8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2222      	movs	r2, #34	@ 0x22
 8004eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8004eee:	e00a      	b.n	8004f06 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004ef0:	7afb      	ldrb	r3, [r7, #11]
 8004ef2:	2b28      	cmp	r3, #40	@ 0x28
 8004ef4:	d107      	bne.n	8004f06 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004ef6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fe46 	bl	8005b8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f14:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6859      	ldr	r1, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b80      	ldr	r3, [pc, #512]	@ (8005124 <I2C_ITSlaveCplt+0x29c>)
 8004f22:	400b      	ands	r3, r1
 8004f24:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fb75 	bl	8005616 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	0b9b      	lsrs	r3, r3, #14
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d07a      	beq.n	800502e <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f46:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8112 	beq.w	8005176 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a73      	ldr	r2, [pc, #460]	@ (8005128 <I2C_ITSlaveCplt+0x2a0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d059      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a71      	ldr	r2, [pc, #452]	@ (800512c <I2C_ITSlaveCplt+0x2a4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d053      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a6f      	ldr	r2, [pc, #444]	@ (8005130 <I2C_ITSlaveCplt+0x2a8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d04d      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a6d      	ldr	r2, [pc, #436]	@ (8005134 <I2C_ITSlaveCplt+0x2ac>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d047      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a6b      	ldr	r2, [pc, #428]	@ (8005138 <I2C_ITSlaveCplt+0x2b0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d041      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a69      	ldr	r2, [pc, #420]	@ (800513c <I2C_ITSlaveCplt+0x2b4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d03b      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a67      	ldr	r2, [pc, #412]	@ (8005140 <I2C_ITSlaveCplt+0x2b8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d035      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a65      	ldr	r2, [pc, #404]	@ (8005144 <I2C_ITSlaveCplt+0x2bc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d02f      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a63      	ldr	r2, [pc, #396]	@ (8005148 <I2C_ITSlaveCplt+0x2c0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d029      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a61      	ldr	r2, [pc, #388]	@ (800514c <I2C_ITSlaveCplt+0x2c4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d023      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a5f      	ldr	r2, [pc, #380]	@ (8005150 <I2C_ITSlaveCplt+0x2c8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d01d      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a5d      	ldr	r2, [pc, #372]	@ (8005154 <I2C_ITSlaveCplt+0x2cc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d017      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5b      	ldr	r2, [pc, #364]	@ (8005158 <I2C_ITSlaveCplt+0x2d0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d011      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a59      	ldr	r2, [pc, #356]	@ (800515c <I2C_ITSlaveCplt+0x2d4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00b      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a57      	ldr	r2, [pc, #348]	@ (8005160 <I2C_ITSlaveCplt+0x2d8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d005      	beq.n	8005012 <I2C_ITSlaveCplt+0x18a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a55      	ldr	r2, [pc, #340]	@ (8005164 <I2C_ITSlaveCplt+0x2dc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d105      	bne.n	800501e <I2C_ITSlaveCplt+0x196>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	b29b      	uxth	r3, r3
 800501c:	e004      	b.n	8005028 <I2C_ITSlaveCplt+0x1a0>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	b29b      	uxth	r3, r3
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800502c:	e0a3      	b.n	8005176 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	0bdb      	lsrs	r3, r3, #15
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 809d 	beq.w	8005176 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800504a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8090 	beq.w	8005176 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a32      	ldr	r2, [pc, #200]	@ (8005128 <I2C_ITSlaveCplt+0x2a0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d059      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a30      	ldr	r2, [pc, #192]	@ (800512c <I2C_ITSlaveCplt+0x2a4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d053      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a2e      	ldr	r2, [pc, #184]	@ (8005130 <I2C_ITSlaveCplt+0x2a8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d04d      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a2c      	ldr	r2, [pc, #176]	@ (8005134 <I2C_ITSlaveCplt+0x2ac>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d047      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2a      	ldr	r2, [pc, #168]	@ (8005138 <I2C_ITSlaveCplt+0x2b0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d041      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a28      	ldr	r2, [pc, #160]	@ (800513c <I2C_ITSlaveCplt+0x2b4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d03b      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a26      	ldr	r2, [pc, #152]	@ (8005140 <I2C_ITSlaveCplt+0x2b8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d035      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a24      	ldr	r2, [pc, #144]	@ (8005144 <I2C_ITSlaveCplt+0x2bc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d02f      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a22      	ldr	r2, [pc, #136]	@ (8005148 <I2C_ITSlaveCplt+0x2c0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d029      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a20      	ldr	r2, [pc, #128]	@ (800514c <I2C_ITSlaveCplt+0x2c4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d023      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005150 <I2C_ITSlaveCplt+0x2c8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d01d      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005154 <I2C_ITSlaveCplt+0x2cc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d017      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005158 <I2C_ITSlaveCplt+0x2d0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d011      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a18      	ldr	r2, [pc, #96]	@ (800515c <I2C_ITSlaveCplt+0x2d4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00b      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a16      	ldr	r2, [pc, #88]	@ (8005160 <I2C_ITSlaveCplt+0x2d8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d005      	beq.n	8005116 <I2C_ITSlaveCplt+0x28e>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a14      	ldr	r2, [pc, #80]	@ (8005164 <I2C_ITSlaveCplt+0x2dc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d128      	bne.n	8005168 <I2C_ITSlaveCplt+0x2e0>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	b29b      	uxth	r3, r3
 8005120:	e027      	b.n	8005172 <I2C_ITSlaveCplt+0x2ea>
 8005122:	bf00      	nop
 8005124:	fe00e800 	.word	0xfe00e800
 8005128:	40020010 	.word	0x40020010
 800512c:	40020028 	.word	0x40020028
 8005130:	40020040 	.word	0x40020040
 8005134:	40020058 	.word	0x40020058
 8005138:	40020070 	.word	0x40020070
 800513c:	40020088 	.word	0x40020088
 8005140:	400200a0 	.word	0x400200a0
 8005144:	400200b8 	.word	0x400200b8
 8005148:	40020410 	.word	0x40020410
 800514c:	40020428 	.word	0x40020428
 8005150:	40020440 	.word	0x40020440
 8005154:	40020458 	.word	0x40020458
 8005158:	40020470 	.word	0x40020470
 800515c:	40020488 	.word	0x40020488
 8005160:	400204a0 	.word	0x400204a0
 8005164:	400204b8 	.word	0x400204b8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	b29b      	uxth	r3, r3
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	089b      	lsrs	r3, r3, #2
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d020      	beq.n	80051c4 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 0304 	bic.w	r3, r3, #4
 8005188:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00c      	beq.n	80051c4 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d2:	f043 0204 	orr.w	r2, r3, #4
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d04a      	beq.n	800527c <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	091b      	lsrs	r3, r3, #4
 80051ea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d044      	beq.n	800527c <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d128      	bne.n	800524e <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b28      	cmp	r3, #40	@ 0x28
 8005206:	d108      	bne.n	800521a <I2C_ITSlaveCplt+0x392>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800520e:	d104      	bne.n	800521a <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005210:	6979      	ldr	r1, [r7, #20]
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f892 	bl	800533c <I2C_ITListenCplt>
 8005218:	e030      	b.n	800527c <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b29      	cmp	r3, #41	@ 0x29
 8005224:	d10e      	bne.n	8005244 <I2C_ITSlaveCplt+0x3bc>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800522c:	d00a      	beq.n	8005244 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2210      	movs	r2, #16
 8005234:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f9ed 	bl	8005616 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff fcfa 	bl	8004c36 <I2C_ITSlaveSeqCplt>
 8005242:	e01b      	b.n	800527c <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2210      	movs	r2, #16
 800524a:	61da      	str	r2, [r3, #28]
 800524c:	e016      	b.n	800527c <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2210      	movs	r2, #16
 8005254:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525a:	f043 0204 	orr.w	r2, r3, #4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <I2C_ITSlaveCplt+0x3e8>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800526e:	d105      	bne.n	800527c <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8b6 	bl	80053e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528e:	2b00      	cmp	r3, #0
 8005290:	d010      	beq.n	80052b4 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f8a5 	bl	80053e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b28      	cmp	r3, #40	@ 0x28
 80052a8:	d141      	bne.n	800532e <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80052aa:	6979      	ldr	r1, [r7, #20]
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f845 	bl	800533c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052b2:	e03c      	b.n	800532e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80052bc:	d014      	beq.n	80052e8 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff fcb9 	bl	8004c36 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005338 <I2C_ITSlaveCplt+0x4b0>)
 80052c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7fe fd23 	bl	8003d2c <HAL_I2C_ListenCpltCallback>
}
 80052e6:	e022      	b.n	800532e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b22      	cmp	r3, #34	@ 0x22
 80052f2:	d10e      	bne.n	8005312 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fe fcf6 	bl	8003cfc <HAL_I2C_SlaveRxCpltCallback>
}
 8005310:	e00d      	b.n	800532e <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7fe fcdd 	bl	8003ce8 <HAL_I2C_SlaveTxCpltCallback>
}
 800532e:	bf00      	nop
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	ffff0000 	.word	0xffff0000

0800533c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a26      	ldr	r2, [pc, #152]	@ (80053e4 <I2C_ITListenCplt+0xa8>)
 800534a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	089b      	lsrs	r3, r3, #2
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d022      	beq.n	80053ba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b2:	f043 0204 	orr.w	r2, r3, #4
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80053ba:	f248 0103 	movw	r1, #32771	@ 0x8003
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fbe4 	bl	8005b8c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2210      	movs	r2, #16
 80053ca:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7fe fca9 	bl	8003d2c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	ffff0000 	.word	0xffff0000

080053e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a6d      	ldr	r2, [pc, #436]	@ (80055bc <I2C_ITError+0x1d4>)
 8005406:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	2b28      	cmp	r3, #40	@ 0x28
 800541e:	d005      	beq.n	800542c <I2C_ITError+0x44>
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b29      	cmp	r3, #41	@ 0x29
 8005424:	d002      	beq.n	800542c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	2b2a      	cmp	r3, #42	@ 0x2a
 800542a:	d10b      	bne.n	8005444 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800542c:	2103      	movs	r1, #3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fbac 	bl	8005b8c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2228      	movs	r2, #40	@ 0x28
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a60      	ldr	r2, [pc, #384]	@ (80055c0 <I2C_ITError+0x1d8>)
 8005440:	635a      	str	r2, [r3, #52]	@ 0x34
 8005442:	e030      	b.n	80054a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005444:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fb9f 	bl	8005b8c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f8e1 	bl	8005616 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b60      	cmp	r3, #96	@ 0x60
 800545e:	d01f      	beq.n	80054a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b20      	cmp	r3, #32
 8005474:	d114      	bne.n	80054a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b10      	cmp	r3, #16
 8005482:	d109      	bne.n	8005498 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2210      	movs	r2, #16
 800548a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005490:	f043 0204 	orr.w	r2, r3, #4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2220      	movs	r2, #32
 800549e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d039      	beq.n	8005528 <I2C_ITError+0x140>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b11      	cmp	r3, #17
 80054b8:	d002      	beq.n	80054c0 <I2C_ITError+0xd8>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b21      	cmp	r3, #33	@ 0x21
 80054be:	d133      	bne.n	8005528 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054ce:	d107      	bne.n	80054e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80054de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fd fe9f 	bl	8003228 <HAL_DMA_GetState>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d017      	beq.n	8005520 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f4:	4a33      	ldr	r2, [pc, #204]	@ (80055c4 <I2C_ITError+0x1dc>)
 80054f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005504:	4618      	mov	r0, r3
 8005506:	f7fd fc49 	bl	8002d9c <HAL_DMA_Abort_IT>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d04d      	beq.n	80055ac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800551a:	4610      	mov	r0, r2
 800551c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800551e:	e045      	b.n	80055ac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f851 	bl	80055c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005526:	e041      	b.n	80055ac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d039      	beq.n	80055a4 <I2C_ITError+0x1bc>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b12      	cmp	r3, #18
 8005534:	d002      	beq.n	800553c <I2C_ITError+0x154>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b22      	cmp	r3, #34	@ 0x22
 800553a:	d133      	bne.n	80055a4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554a:	d107      	bne.n	800555c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800555a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005560:	4618      	mov	r0, r3
 8005562:	f7fd fe61 	bl	8003228 <HAL_DMA_GetState>
 8005566:	4603      	mov	r3, r0
 8005568:	2b01      	cmp	r3, #1
 800556a:	d017      	beq.n	800559c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005570:	4a14      	ldr	r2, [pc, #80]	@ (80055c4 <I2C_ITError+0x1dc>)
 8005572:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005580:	4618      	mov	r0, r3
 8005582:	f7fd fc0b 	bl	8002d9c <HAL_DMA_Abort_IT>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d011      	beq.n	80055b0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005596:	4610      	mov	r0, r2
 8005598:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800559a:	e009      	b.n	80055b0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f813 	bl	80055c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055a2:	e005      	b.n	80055b0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f80f 	bl	80055c8 <I2C_TreatErrorCallback>
  }
}
 80055aa:	e002      	b.n	80055b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055ac:	bf00      	nop
 80055ae:	e000      	b.n	80055b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055b0:	bf00      	nop
}
 80055b2:	bf00      	nop
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	ffff0000 	.word	0xffff0000
 80055c0:	08003ff5 	.word	0x08003ff5
 80055c4:	0800565f 	.word	0x0800565f

080055c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b60      	cmp	r3, #96	@ 0x60
 80055da:	d10e      	bne.n	80055fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fe fbc2 	bl	8003d7c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055f8:	e009      	b.n	800560e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fe fbad 	bl	8003d68 <HAL_I2C_ErrorCallback>
}
 800560e:	bf00      	nop
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b02      	cmp	r3, #2
 800562a:	d103      	bne.n	8005634 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2200      	movs	r2, #0
 8005632:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b01      	cmp	r3, #1
 8005640:	d007      	beq.n	8005652 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699a      	ldr	r2, [r3, #24]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	619a      	str	r2, [r3, #24]
  }
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005678:	2200      	movs	r2, #0
 800567a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005688:	2200      	movs	r2, #0
 800568a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7ff ff9b 	bl	80055c8 <I2C_TreatErrorCallback>
}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	603b      	str	r3, [r7, #0]
 80056a6:	4613      	mov	r3, r2
 80056a8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056aa:	e03b      	b.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f8d5 	bl	8005860 <I2C_IsErrorOccurred>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e041      	b.n	8005744 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056c6:	d02d      	beq.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c8:	f7fb fec2 	bl	8001450 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <I2C_WaitOnFlagUntilTimeout+0x44>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d122      	bne.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	bf0c      	ite	eq
 80056ee:	2301      	moveq	r3, #1
 80056f0:	2300      	movne	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d113      	bne.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005700:	f043 0220 	orr.w	r2, r3, #32
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e00f      	b.n	8005744 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4013      	ands	r3, r2
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	429a      	cmp	r2, r3
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	429a      	cmp	r2, r3
 8005740:	d0b4      	beq.n	80056ac <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005758:	e033      	b.n	80057c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f87e 	bl	8005860 <I2C_IsErrorOccurred>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e031      	b.n	80057d2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005774:	d025      	beq.n	80057c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005776:	f7fb fe6b 	bl	8001450 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	429a      	cmp	r2, r3
 8005784:	d302      	bcc.n	800578c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d11a      	bne.n	80057c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b02      	cmp	r3, #2
 8005798:	d013      	beq.n	80057c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	f043 0220 	orr.w	r2, r3, #32
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e007      	b.n	80057d2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d1c4      	bne.n	800575a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057e6:	e02f      	b.n	8005848 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f837 	bl	8005860 <I2C_IsErrorOccurred>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e02d      	b.n	8005858 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fc:	f7fb fe28 	bl	8001450 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d11a      	bne.n	8005848 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b20      	cmp	r3, #32
 800581e:	d013      	beq.n	8005848 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e007      	b.n	8005858 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b20      	cmp	r3, #32
 8005854:	d1c8      	bne.n	80057e8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	@ 0x28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b00      	cmp	r3, #0
 800588a:	d068      	beq.n	800595e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2210      	movs	r2, #16
 8005892:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005894:	e049      	b.n	800592a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800589c:	d045      	beq.n	800592a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800589e:	f7fb fdd7 	bl	8001450 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d302      	bcc.n	80058b4 <I2C_IsErrorOccurred+0x54>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d13a      	bne.n	800592a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058d6:	d121      	bne.n	800591c <I2C_IsErrorOccurred+0xbc>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058de:	d01d      	beq.n	800591c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80058e0:	7cfb      	ldrb	r3, [r7, #19]
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d01a      	beq.n	800591c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80058f6:	f7fb fdab 	bl	8001450 <HAL_GetTick>
 80058fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058fc:	e00e      	b.n	800591c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80058fe:	f7fb fda7 	bl	8001450 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b19      	cmp	r3, #25
 800590a:	d907      	bls.n	800591c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	f043 0320 	orr.w	r3, r3, #32
 8005912:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800591a:	e006      	b.n	800592a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b20      	cmp	r3, #32
 8005928:	d1e9      	bne.n	80058fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b20      	cmp	r3, #32
 8005936:	d003      	beq.n	8005940 <I2C_IsErrorOccurred+0xe0>
 8005938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0aa      	beq.n	8005896 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2220      	movs	r2, #32
 800594e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	f043 0304 	orr.w	r3, r3, #4
 8005956:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005980:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	f043 0308 	orr.w	r3, r3, #8
 8005998:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00b      	beq.n	80059cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	f043 0302 	orr.w	r3, r3, #2
 80059ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80059cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01c      	beq.n	8005a0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f7ff fe1e 	bl	8005616 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6859      	ldr	r1, [r3, #4]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b0d      	ldr	r3, [pc, #52]	@ (8005a1c <I2C_IsErrorOccurred+0x1bc>)
 80059e6:	400b      	ands	r3, r1
 80059e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3728      	adds	r7, #40	@ 0x28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	fe00e800 	.word	0xfe00e800

08005a20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	817b      	strh	r3, [r7, #10]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a32:	897b      	ldrh	r3, [r7, #10]
 8005a34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a38:	7a7b      	ldrb	r3, [r7, #9]
 8005a3a:	041b      	lsls	r3, r3, #16
 8005a3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a40:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a4e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	0d5b      	lsrs	r3, r3, #21
 8005a5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005a5e:	4b08      	ldr	r3, [pc, #32]	@ (8005a80 <I2C_TransferConfig+0x60>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	43db      	mvns	r3, r3
 8005a64:	ea02 0103 	and.w	r1, r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	03ff63ff 	.word	0x03ff63ff

08005a84 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a98:	4a39      	ldr	r2, [pc, #228]	@ (8005b80 <I2C_Enable_IRQ+0xfc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d032      	beq.n	8005b04 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005aa2:	4a38      	ldr	r2, [pc, #224]	@ (8005b84 <I2C_Enable_IRQ+0x100>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d02d      	beq.n	8005b04 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005aac:	4a36      	ldr	r2, [pc, #216]	@ (8005b88 <I2C_Enable_IRQ+0x104>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d028      	beq.n	8005b04 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ab2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	da03      	bge.n	8005ac2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005ac0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005ac2:	887b      	ldrh	r3, [r7, #2]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005ad2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ad4:	887b      	ldrh	r3, [r7, #2]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005ae4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005ae6:	887b      	ldrh	r3, [r7, #2]
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d103      	bne.n	8005af4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005af2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005af4:	887b      	ldrh	r3, [r7, #2]
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d133      	bne.n	8005b62 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f043 0320 	orr.w	r3, r3, #32
 8005b00:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b02:	e02e      	b.n	8005b62 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005b04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	da03      	bge.n	8005b14 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005b12:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005b14:	887b      	ldrh	r3, [r7, #2]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005b24:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005b26:	887b      	ldrh	r3, [r7, #2]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005b36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005b38:	887b      	ldrh	r3, [r7, #2]
 8005b3a:	2b10      	cmp	r3, #16
 8005b3c:	d103      	bne.n	8005b46 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005b44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b46:	887b      	ldrh	r3, [r7, #2]
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d103      	bne.n	8005b54 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005b54:	887b      	ldrh	r3, [r7, #2]
 8005b56:	2b40      	cmp	r3, #64	@ 0x40
 8005b58:	d103      	bne.n	8005b62 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b60:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6819      	ldr	r1, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	601a      	str	r2, [r3, #0]
}
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	080041fd 	.word	0x080041fd
 8005b84:	08004645 	.word	0x08004645
 8005b88:	080043e5 	.word	0x080043e5

08005b8c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005b9c:	887b      	ldrh	r3, [r7, #2]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00f      	beq.n	8005bc6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005bac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005bba:	2b28      	cmp	r3, #40	@ 0x28
 8005bbc:	d003      	beq.n	8005bc6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005bc4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005bc6:	887b      	ldrh	r3, [r7, #2]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00f      	beq.n	8005bf0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005bd6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005be4:	2b28      	cmp	r3, #40	@ 0x28
 8005be6:	d003      	beq.n	8005bf0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005bee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005bf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	da03      	bge.n	8005c00 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005bfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005c00:	887b      	ldrh	r3, [r7, #2]
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d103      	bne.n	8005c0e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005c0c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005c0e:	887b      	ldrh	r3, [r7, #2]
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d103      	bne.n	8005c1c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f043 0320 	orr.w	r3, r3, #32
 8005c1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005c1c:	887b      	ldrh	r3, [r7, #2]
 8005c1e:	2b40      	cmp	r3, #64	@ 0x40
 8005c20:	d103      	bne.n	8005c2a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c28:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	43da      	mvns	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	400a      	ands	r2, r1
 8005c3a:	601a      	str	r2, [r3, #0]
}
 8005c3c:	bf00      	nop
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d138      	bne.n	8005cd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e032      	b.n	8005cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2224      	movs	r2, #36	@ 0x24
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6819      	ldr	r1, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e000      	b.n	8005cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005cd0:	2302      	movs	r3, #2
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d139      	bne.n	8005d68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e033      	b.n	8005d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2224      	movs	r2, #36	@ 0x24
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0201 	bic.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	021b      	lsls	r3, r3, #8
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	e000      	b.n	8005d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d68:	2302      	movs	r3, #2
  }
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005d80:	4b29      	ldr	r3, [pc, #164]	@ (8005e28 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	2b06      	cmp	r3, #6
 8005d8a:	d00a      	beq.n	8005da2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d8c:	4b26      	ldr	r3, [pc, #152]	@ (8005e28 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d001      	beq.n	8005d9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e040      	b.n	8005e20 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e03e      	b.n	8005e20 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005da2:	4b21      	ldr	r3, [pc, #132]	@ (8005e28 <HAL_PWREx_ConfigSupply+0xb0>)
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005daa:	491f      	ldr	r1, [pc, #124]	@ (8005e28 <HAL_PWREx_ConfigSupply+0xb0>)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005db2:	f7fb fb4d 	bl	8001450 <HAL_GetTick>
 8005db6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005db8:	e009      	b.n	8005dce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dba:	f7fb fb49 	bl	8001450 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dc8:	d901      	bls.n	8005dce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e028      	b.n	8005e20 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dce:	4b16      	ldr	r3, [pc, #88]	@ (8005e28 <HAL_PWREx_ConfigSupply+0xb0>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dda:	d1ee      	bne.n	8005dba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b1e      	cmp	r3, #30
 8005de0:	d008      	beq.n	8005df4 <HAL_PWREx_ConfigSupply+0x7c>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005de6:	d005      	beq.n	8005df4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b1d      	cmp	r3, #29
 8005dec:	d002      	beq.n	8005df4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b2d      	cmp	r3, #45	@ 0x2d
 8005df2:	d114      	bne.n	8005e1e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005df4:	f7fb fb2c 	bl	8001450 <HAL_GetTick>
 8005df8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005dfa:	e009      	b.n	8005e10 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dfc:	f7fb fb28 	bl	8001450 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e0a:	d901      	bls.n	8005e10 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e007      	b.n	8005e20 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005e10:	4b05      	ldr	r3, [pc, #20]	@ (8005e28 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e1c:	d1ee      	bne.n	8005dfc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	58024800 	.word	0x58024800

08005e2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08c      	sub	sp, #48	@ 0x30
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d102      	bne.n	8005e40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f000 bc48 	b.w	80066d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 8088 	beq.w	8005f5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e4e:	4b99      	ldr	r3, [pc, #612]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e58:	4b96      	ldr	r3, [pc, #600]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e60:	2b10      	cmp	r3, #16
 8005e62:	d007      	beq.n	8005e74 <HAL_RCC_OscConfig+0x48>
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e66:	2b18      	cmp	r3, #24
 8005e68:	d111      	bne.n	8005e8e <HAL_RCC_OscConfig+0x62>
 8005e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d10c      	bne.n	8005e8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e74:	4b8f      	ldr	r3, [pc, #572]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d06d      	beq.n	8005f5c <HAL_RCC_OscConfig+0x130>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d169      	bne.n	8005f5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f000 bc21 	b.w	80066d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e96:	d106      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x7a>
 8005e98:	4b86      	ldr	r3, [pc, #536]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a85      	ldr	r2, [pc, #532]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	e02e      	b.n	8005f04 <HAL_RCC_OscConfig+0xd8>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x9c>
 8005eae:	4b81      	ldr	r3, [pc, #516]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a80      	ldr	r2, [pc, #512]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b7e      	ldr	r3, [pc, #504]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a7d      	ldr	r2, [pc, #500]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ec0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e01d      	b.n	8005f04 <HAL_RCC_OscConfig+0xd8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ed0:	d10c      	bne.n	8005eec <HAL_RCC_OscConfig+0xc0>
 8005ed2:	4b78      	ldr	r3, [pc, #480]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a77      	ldr	r2, [pc, #476]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	4b75      	ldr	r3, [pc, #468]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a74      	ldr	r2, [pc, #464]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	e00b      	b.n	8005f04 <HAL_RCC_OscConfig+0xd8>
 8005eec:	4b71      	ldr	r3, [pc, #452]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a70      	ldr	r2, [pc, #448]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	4b6e      	ldr	r3, [pc, #440]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a6d      	ldr	r2, [pc, #436]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d013      	beq.n	8005f34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0c:	f7fb faa0 	bl	8001450 <HAL_GetTick>
 8005f10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f14:	f7fb fa9c 	bl	8001450 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b64      	cmp	r3, #100	@ 0x64
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e3d4      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f26:	4b63      	ldr	r3, [pc, #396]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0f0      	beq.n	8005f14 <HAL_RCC_OscConfig+0xe8>
 8005f32:	e014      	b.n	8005f5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f34:	f7fb fa8c 	bl	8001450 <HAL_GetTick>
 8005f38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f3c:	f7fb fa88 	bl	8001450 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b64      	cmp	r3, #100	@ 0x64
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e3c0      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f4e:	4b59      	ldr	r3, [pc, #356]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f0      	bne.n	8005f3c <HAL_RCC_OscConfig+0x110>
 8005f5a:	e000      	b.n	8005f5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 80ca 	beq.w	8006100 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f6c:	4b51      	ldr	r3, [pc, #324]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f76:	4b4f      	ldr	r3, [pc, #316]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <HAL_RCC_OscConfig+0x166>
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	2b18      	cmp	r3, #24
 8005f86:	d156      	bne.n	8006036 <HAL_RCC_OscConfig+0x20a>
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d151      	bne.n	8006036 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f92:	4b48      	ldr	r3, [pc, #288]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <HAL_RCC_OscConfig+0x17e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e392      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005faa:	4b42      	ldr	r3, [pc, #264]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 0219 	bic.w	r2, r3, #25
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	493f      	ldr	r1, [pc, #252]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbc:	f7fb fa48 	bl	8001450 <HAL_GetTick>
 8005fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc4:	f7fb fa44 	bl	8001450 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e37c      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fd6:	4b37      	ldr	r3, [pc, #220]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f0      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe2:	f7fb fa41 	bl	8001468 <HAL_GetREVID>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d817      	bhi.n	8006020 <HAL_RCC_OscConfig+0x1f4>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b40      	cmp	r3, #64	@ 0x40
 8005ff6:	d108      	bne.n	800600a <HAL_RCC_OscConfig+0x1de>
 8005ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006000:	4a2c      	ldr	r2, [pc, #176]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006006:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006008:	e07a      	b.n	8006100 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800600a:	4b2a      	ldr	r3, [pc, #168]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	031b      	lsls	r3, r3, #12
 8006018:	4926      	ldr	r1, [pc, #152]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 800601a:	4313      	orrs	r3, r2
 800601c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800601e:	e06f      	b.n	8006100 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006020:	4b24      	ldr	r3, [pc, #144]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	061b      	lsls	r3, r3, #24
 800602e:	4921      	ldr	r1, [pc, #132]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006030:	4313      	orrs	r3, r2
 8006032:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006034:	e064      	b.n	8006100 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d047      	beq.n	80060ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800603e:	4b1d      	ldr	r3, [pc, #116]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f023 0219 	bic.w	r2, r3, #25
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	491a      	ldr	r1, [pc, #104]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 800604c:	4313      	orrs	r3, r2
 800604e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006050:	f7fb f9fe 	bl	8001450 <HAL_GetTick>
 8006054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006058:	f7fb f9fa 	bl	8001450 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e332      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800606a:	4b12      	ldr	r3, [pc, #72]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f0      	beq.n	8006058 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006076:	f7fb f9f7 	bl	8001468 <HAL_GetREVID>
 800607a:	4603      	mov	r3, r0
 800607c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006080:	4293      	cmp	r3, r2
 8006082:	d819      	bhi.n	80060b8 <HAL_RCC_OscConfig+0x28c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b40      	cmp	r3, #64	@ 0x40
 800608a:	d108      	bne.n	800609e <HAL_RCC_OscConfig+0x272>
 800608c:	4b09      	ldr	r3, [pc, #36]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006094:	4a07      	ldr	r2, [pc, #28]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800609a:	6053      	str	r3, [r2, #4]
 800609c:	e030      	b.n	8006100 <HAL_RCC_OscConfig+0x2d4>
 800609e:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	031b      	lsls	r3, r3, #12
 80060ac:	4901      	ldr	r1, [pc, #4]	@ (80060b4 <HAL_RCC_OscConfig+0x288>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	604b      	str	r3, [r1, #4]
 80060b2:	e025      	b.n	8006100 <HAL_RCC_OscConfig+0x2d4>
 80060b4:	58024400 	.word	0x58024400
 80060b8:	4b9a      	ldr	r3, [pc, #616]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	061b      	lsls	r3, r3, #24
 80060c6:	4997      	ldr	r1, [pc, #604]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	604b      	str	r3, [r1, #4]
 80060cc:	e018      	b.n	8006100 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ce:	4b95      	ldr	r3, [pc, #596]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a94      	ldr	r2, [pc, #592]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060da:	f7fb f9b9 	bl	8001450 <HAL_GetTick>
 80060de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060e2:	f7fb f9b5 	bl	8001450 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e2ed      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060f4:	4b8b      	ldr	r3, [pc, #556]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f0      	bne.n	80060e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80a9 	beq.w	8006260 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800610e:	4b85      	ldr	r3, [pc, #532]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006116:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006118:	4b82      	ldr	r3, [pc, #520]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 800611a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	2b08      	cmp	r3, #8
 8006122:	d007      	beq.n	8006134 <HAL_RCC_OscConfig+0x308>
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b18      	cmp	r3, #24
 8006128:	d13a      	bne.n	80061a0 <HAL_RCC_OscConfig+0x374>
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f003 0303 	and.w	r3, r3, #3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d135      	bne.n	80061a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006134:	4b7b      	ldr	r3, [pc, #492]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <HAL_RCC_OscConfig+0x320>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	2b80      	cmp	r3, #128	@ 0x80
 8006146:	d001      	beq.n	800614c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e2c1      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800614c:	f7fb f98c 	bl	8001468 <HAL_GetREVID>
 8006150:	4603      	mov	r3, r0
 8006152:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006156:	4293      	cmp	r3, r2
 8006158:	d817      	bhi.n	800618a <HAL_RCC_OscConfig+0x35e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	2b20      	cmp	r3, #32
 8006160:	d108      	bne.n	8006174 <HAL_RCC_OscConfig+0x348>
 8006162:	4b70      	ldr	r3, [pc, #448]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800616a:	4a6e      	ldr	r2, [pc, #440]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 800616c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006170:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006172:	e075      	b.n	8006260 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006174:	4b6b      	ldr	r3, [pc, #428]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	069b      	lsls	r3, r3, #26
 8006182:	4968      	ldr	r1, [pc, #416]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006184:	4313      	orrs	r3, r2
 8006186:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006188:	e06a      	b.n	8006260 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800618a:	4b66      	ldr	r3, [pc, #408]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	061b      	lsls	r3, r3, #24
 8006198:	4962      	ldr	r1, [pc, #392]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 800619a:	4313      	orrs	r3, r2
 800619c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800619e:	e05f      	b.n	8006260 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d042      	beq.n	800622e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061a8:	4b5e      	ldr	r3, [pc, #376]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a5d      	ldr	r2, [pc, #372]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80061ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b4:	f7fb f94c 	bl	8001450 <HAL_GetTick>
 80061b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061bc:	f7fb f948 	bl	8001450 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e280      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061ce:	4b55      	ldr	r3, [pc, #340]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0f0      	beq.n	80061bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061da:	f7fb f945 	bl	8001468 <HAL_GetREVID>
 80061de:	4603      	mov	r3, r0
 80061e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d817      	bhi.n	8006218 <HAL_RCC_OscConfig+0x3ec>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d108      	bne.n	8006202 <HAL_RCC_OscConfig+0x3d6>
 80061f0:	4b4c      	ldr	r3, [pc, #304]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80061f8:	4a4a      	ldr	r2, [pc, #296]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80061fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061fe:	6053      	str	r3, [r2, #4]
 8006200:	e02e      	b.n	8006260 <HAL_RCC_OscConfig+0x434>
 8006202:	4b48      	ldr	r3, [pc, #288]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	069b      	lsls	r3, r3, #26
 8006210:	4944      	ldr	r1, [pc, #272]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006212:	4313      	orrs	r3, r2
 8006214:	604b      	str	r3, [r1, #4]
 8006216:	e023      	b.n	8006260 <HAL_RCC_OscConfig+0x434>
 8006218:	4b42      	ldr	r3, [pc, #264]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	061b      	lsls	r3, r3, #24
 8006226:	493f      	ldr	r1, [pc, #252]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006228:	4313      	orrs	r3, r2
 800622a:	60cb      	str	r3, [r1, #12]
 800622c:	e018      	b.n	8006260 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800622e:	4b3d      	ldr	r3, [pc, #244]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a3c      	ldr	r2, [pc, #240]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006234:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623a:	f7fb f909 	bl	8001450 <HAL_GetTick>
 800623e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006240:	e008      	b.n	8006254 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006242:	f7fb f905 	bl	8001450 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e23d      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006254:	4b33      	ldr	r3, [pc, #204]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f0      	bne.n	8006242 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d036      	beq.n	80062da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d019      	beq.n	80062a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006274:	4b2b      	ldr	r3, [pc, #172]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006278:	4a2a      	ldr	r2, [pc, #168]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006280:	f7fb f8e6 	bl	8001450 <HAL_GetTick>
 8006284:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006288:	f7fb f8e2 	bl	8001450 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e21a      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800629a:	4b22      	ldr	r3, [pc, #136]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 800629c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0f0      	beq.n	8006288 <HAL_RCC_OscConfig+0x45c>
 80062a6:	e018      	b.n	80062da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80062aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80062ae:	f023 0301 	bic.w	r3, r3, #1
 80062b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b4:	f7fb f8cc 	bl	8001450 <HAL_GetTick>
 80062b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062bc:	f7fb f8c8 	bl	8001450 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e200      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062ce:	4b15      	ldr	r3, [pc, #84]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80062d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f0      	bne.n	80062bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d039      	beq.n	800635a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d01c      	beq.n	8006328 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 80062f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062fa:	f7fb f8a9 	bl	8001450 <HAL_GetTick>
 80062fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006302:	f7fb f8a5 	bl	8001450 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e1dd      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006314:	4b03      	ldr	r3, [pc, #12]	@ (8006324 <HAL_RCC_OscConfig+0x4f8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <HAL_RCC_OscConfig+0x4d6>
 8006320:	e01b      	b.n	800635a <HAL_RCC_OscConfig+0x52e>
 8006322:	bf00      	nop
 8006324:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006328:	4b9b      	ldr	r3, [pc, #620]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a9a      	ldr	r2, [pc, #616]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 800632e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006332:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006334:	f7fb f88c 	bl	8001450 <HAL_GetTick>
 8006338:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800633c:	f7fb f888 	bl	8001450 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e1c0      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800634e:	4b92      	ldr	r3, [pc, #584]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f0      	bne.n	800633c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 8081 	beq.w	800646a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006368:	4b8c      	ldr	r3, [pc, #560]	@ (800659c <HAL_RCC_OscConfig+0x770>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a8b      	ldr	r2, [pc, #556]	@ (800659c <HAL_RCC_OscConfig+0x770>)
 800636e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006372:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006374:	f7fb f86c 	bl	8001450 <HAL_GetTick>
 8006378:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800637c:	f7fb f868 	bl	8001450 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b64      	cmp	r3, #100	@ 0x64
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e1a0      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800638e:	4b83      	ldr	r3, [pc, #524]	@ (800659c <HAL_RCC_OscConfig+0x770>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0f0      	beq.n	800637c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d106      	bne.n	80063b0 <HAL_RCC_OscConfig+0x584>
 80063a2:	4b7d      	ldr	r3, [pc, #500]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ae:	e02d      	b.n	800640c <HAL_RCC_OscConfig+0x5e0>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10c      	bne.n	80063d2 <HAL_RCC_OscConfig+0x5a6>
 80063b8:	4b77      	ldr	r3, [pc, #476]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80063ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063bc:	4a76      	ldr	r2, [pc, #472]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80063be:	f023 0301 	bic.w	r3, r3, #1
 80063c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80063c4:	4b74      	ldr	r3, [pc, #464]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80063c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c8:	4a73      	ldr	r2, [pc, #460]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80063ca:	f023 0304 	bic.w	r3, r3, #4
 80063ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80063d0:	e01c      	b.n	800640c <HAL_RCC_OscConfig+0x5e0>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b05      	cmp	r3, #5
 80063d8:	d10c      	bne.n	80063f4 <HAL_RCC_OscConfig+0x5c8>
 80063da:	4b6f      	ldr	r3, [pc, #444]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063de:	4a6e      	ldr	r2, [pc, #440]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80063e0:	f043 0304 	orr.w	r3, r3, #4
 80063e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063e6:	4b6c      	ldr	r3, [pc, #432]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80063e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ea:	4a6b      	ldr	r2, [pc, #428]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f2:	e00b      	b.n	800640c <HAL_RCC_OscConfig+0x5e0>
 80063f4:	4b68      	ldr	r3, [pc, #416]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80063f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f8:	4a67      	ldr	r2, [pc, #412]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80063fa:	f023 0301 	bic.w	r3, r3, #1
 80063fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006400:	4b65      	ldr	r3, [pc, #404]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006404:	4a64      	ldr	r2, [pc, #400]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006406:	f023 0304 	bic.w	r3, r3, #4
 800640a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d015      	beq.n	8006440 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006414:	f7fb f81c 	bl	8001450 <HAL_GetTick>
 8006418:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800641a:	e00a      	b.n	8006432 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800641c:	f7fb f818 	bl	8001450 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e14e      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006432:	4b59      	ldr	r3, [pc, #356]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0ee      	beq.n	800641c <HAL_RCC_OscConfig+0x5f0>
 800643e:	e014      	b.n	800646a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006440:	f7fb f806 	bl	8001450 <HAL_GetTick>
 8006444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006446:	e00a      	b.n	800645e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006448:	f7fb f802 	bl	8001450 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006456:	4293      	cmp	r3, r2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e138      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800645e:	4b4e      	ldr	r3, [pc, #312]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1ee      	bne.n	8006448 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 812d 	beq.w	80066ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006474:	4b48      	ldr	r3, [pc, #288]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800647c:	2b18      	cmp	r3, #24
 800647e:	f000 80bd 	beq.w	80065fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006486:	2b02      	cmp	r3, #2
 8006488:	f040 809e 	bne.w	80065c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648c:	4b42      	ldr	r3, [pc, #264]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a41      	ldr	r2, [pc, #260]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006498:	f7fa ffda 	bl	8001450 <HAL_GetTick>
 800649c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a0:	f7fa ffd6 	bl	8001450 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e10e      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064b2:	4b39      	ldr	r3, [pc, #228]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1f0      	bne.n	80064a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064be:	4b36      	ldr	r3, [pc, #216]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80064c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064c2:	4b37      	ldr	r3, [pc, #220]	@ (80065a0 <HAL_RCC_OscConfig+0x774>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064ce:	0112      	lsls	r2, r2, #4
 80064d0:	430a      	orrs	r2, r1
 80064d2:	4931      	ldr	r1, [pc, #196]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064dc:	3b01      	subs	r3, #1
 80064de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e6:	3b01      	subs	r3, #1
 80064e8:	025b      	lsls	r3, r3, #9
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f2:	3b01      	subs	r3, #1
 80064f4:	041b      	lsls	r3, r3, #16
 80064f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006500:	3b01      	subs	r3, #1
 8006502:	061b      	lsls	r3, r3, #24
 8006504:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006508:	4923      	ldr	r1, [pc, #140]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 800650a:	4313      	orrs	r3, r2
 800650c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800650e:	4b22      	ldr	r3, [pc, #136]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006512:	4a21      	ldr	r2, [pc, #132]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006514:	f023 0301 	bic.w	r3, r3, #1
 8006518:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800651a:	4b1f      	ldr	r3, [pc, #124]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 800651c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800651e:	4b21      	ldr	r3, [pc, #132]	@ (80065a4 <HAL_RCC_OscConfig+0x778>)
 8006520:	4013      	ands	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006526:	00d2      	lsls	r2, r2, #3
 8006528:	491b      	ldr	r1, [pc, #108]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 800652a:	4313      	orrs	r3, r2
 800652c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800652e:	4b1a      	ldr	r3, [pc, #104]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006532:	f023 020c 	bic.w	r2, r3, #12
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653a:	4917      	ldr	r1, [pc, #92]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 800653c:	4313      	orrs	r3, r2
 800653e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006540:	4b15      	ldr	r3, [pc, #84]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006544:	f023 0202 	bic.w	r2, r3, #2
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654c:	4912      	ldr	r1, [pc, #72]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 800654e:	4313      	orrs	r3, r2
 8006550:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006552:	4b11      	ldr	r3, [pc, #68]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006556:	4a10      	ldr	r2, [pc, #64]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800655c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655e:	4b0e      	ldr	r3, [pc, #56]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	4a0d      	ldr	r2, [pc, #52]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006568:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800656a:	4b0b      	ldr	r3, [pc, #44]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 800656c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656e:	4a0a      	ldr	r2, [pc, #40]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006574:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006576:	4b08      	ldr	r3, [pc, #32]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	4a07      	ldr	r2, [pc, #28]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 800657c:	f043 0301 	orr.w	r3, r3, #1
 8006580:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006582:	4b05      	ldr	r3, [pc, #20]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a04      	ldr	r2, [pc, #16]	@ (8006598 <HAL_RCC_OscConfig+0x76c>)
 8006588:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800658c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658e:	f7fa ff5f 	bl	8001450 <HAL_GetTick>
 8006592:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006594:	e011      	b.n	80065ba <HAL_RCC_OscConfig+0x78e>
 8006596:	bf00      	nop
 8006598:	58024400 	.word	0x58024400
 800659c:	58024800 	.word	0x58024800
 80065a0:	fffffc0c 	.word	0xfffffc0c
 80065a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a8:	f7fa ff52 	bl	8001450 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e08a      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065ba:	4b47      	ldr	r3, [pc, #284]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f0      	beq.n	80065a8 <HAL_RCC_OscConfig+0x77c>
 80065c6:	e082      	b.n	80066ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c8:	4b43      	ldr	r3, [pc, #268]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a42      	ldr	r2, [pc, #264]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 80065ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d4:	f7fa ff3c 	bl	8001450 <HAL_GetTick>
 80065d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065dc:	f7fa ff38 	bl	8001450 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e070      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065ee:	4b3a      	ldr	r3, [pc, #232]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1f0      	bne.n	80065dc <HAL_RCC_OscConfig+0x7b0>
 80065fa:	e068      	b.n	80066ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065fc:	4b36      	ldr	r3, [pc, #216]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006602:	4b35      	ldr	r3, [pc, #212]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 8006604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006606:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660c:	2b01      	cmp	r3, #1
 800660e:	d031      	beq.n	8006674 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f003 0203 	and.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800661a:	429a      	cmp	r2, r3
 800661c:	d12a      	bne.n	8006674 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	091b      	lsrs	r3, r3, #4
 8006622:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800662a:	429a      	cmp	r2, r3
 800662c:	d122      	bne.n	8006674 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006638:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800663a:	429a      	cmp	r2, r3
 800663c:	d11a      	bne.n	8006674 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	0a5b      	lsrs	r3, r3, #9
 8006642:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800664a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800664c:	429a      	cmp	r2, r3
 800664e:	d111      	bne.n	8006674 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	0c1b      	lsrs	r3, r3, #16
 8006654:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800665c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800665e:	429a      	cmp	r2, r3
 8006660:	d108      	bne.n	8006674 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	0e1b      	lsrs	r3, r3, #24
 8006666:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800666e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006670:	429a      	cmp	r2, r3
 8006672:	d001      	beq.n	8006678 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e02b      	b.n	80066d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006678:	4b17      	ldr	r3, [pc, #92]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 800667a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800667c:	08db      	lsrs	r3, r3, #3
 800667e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006682:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	429a      	cmp	r2, r3
 800668c:	d01f      	beq.n	80066ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800668e:	4b12      	ldr	r3, [pc, #72]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 8006690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006692:	4a11      	ldr	r2, [pc, #68]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 8006694:	f023 0301 	bic.w	r3, r3, #1
 8006698:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800669a:	f7fa fed9 	bl	8001450 <HAL_GetTick>
 800669e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80066a0:	bf00      	nop
 80066a2:	f7fa fed5 	bl	8001450 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d0f9      	beq.n	80066a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066ae:	4b0a      	ldr	r3, [pc, #40]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 80066b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066b2:	4b0a      	ldr	r3, [pc, #40]	@ (80066dc <HAL_RCC_OscConfig+0x8b0>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066ba:	00d2      	lsls	r2, r2, #3
 80066bc:	4906      	ldr	r1, [pc, #24]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80066c2:	4b05      	ldr	r3, [pc, #20]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 80066c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c6:	4a04      	ldr	r2, [pc, #16]	@ (80066d8 <HAL_RCC_OscConfig+0x8ac>)
 80066c8:	f043 0301 	orr.w	r3, r3, #1
 80066cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3730      	adds	r7, #48	@ 0x30
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	58024400 	.word	0x58024400
 80066dc:	ffff0007 	.word	0xffff0007

080066e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e19c      	b.n	8006a2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066f4:	4b8a      	ldr	r3, [pc, #552]	@ (8006920 <HAL_RCC_ClockConfig+0x240>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d910      	bls.n	8006724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006702:	4b87      	ldr	r3, [pc, #540]	@ (8006920 <HAL_RCC_ClockConfig+0x240>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f023 020f 	bic.w	r2, r3, #15
 800670a:	4985      	ldr	r1, [pc, #532]	@ (8006920 <HAL_RCC_ClockConfig+0x240>)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	4313      	orrs	r3, r2
 8006710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006712:	4b83      	ldr	r3, [pc, #524]	@ (8006920 <HAL_RCC_ClockConfig+0x240>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d001      	beq.n	8006724 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e184      	b.n	8006a2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d010      	beq.n	8006752 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	4b7b      	ldr	r3, [pc, #492]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800673c:	429a      	cmp	r2, r3
 800673e:	d908      	bls.n	8006752 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006740:	4b78      	ldr	r3, [pc, #480]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	4975      	ldr	r1, [pc, #468]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 800674e:	4313      	orrs	r3, r2
 8006750:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	2b00      	cmp	r3, #0
 800675c:	d010      	beq.n	8006780 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695a      	ldr	r2, [r3, #20]
 8006762:	4b70      	ldr	r3, [pc, #448]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800676a:	429a      	cmp	r2, r3
 800676c:	d908      	bls.n	8006780 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800676e:	4b6d      	ldr	r3, [pc, #436]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	496a      	ldr	r1, [pc, #424]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 800677c:	4313      	orrs	r3, r2
 800677e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	d010      	beq.n	80067ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699a      	ldr	r2, [r3, #24]
 8006790:	4b64      	ldr	r3, [pc, #400]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006798:	429a      	cmp	r2, r3
 800679a:	d908      	bls.n	80067ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800679c:	4b61      	ldr	r3, [pc, #388]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	495e      	ldr	r1, [pc, #376]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d010      	beq.n	80067dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	4b59      	ldr	r3, [pc, #356]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d908      	bls.n	80067dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067ca:	4b56      	ldr	r3, [pc, #344]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	4953      	ldr	r1, [pc, #332]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d010      	beq.n	800680a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d908      	bls.n	800680a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f8:	4b4a      	ldr	r3, [pc, #296]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f023 020f 	bic.w	r2, r3, #15
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	4947      	ldr	r1, [pc, #284]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 8006806:	4313      	orrs	r3, r2
 8006808:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d055      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006816:	4b43      	ldr	r3, [pc, #268]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	4940      	ldr	r1, [pc, #256]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 8006824:	4313      	orrs	r3, r2
 8006826:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b02      	cmp	r3, #2
 800682e:	d107      	bne.n	8006840 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006830:	4b3c      	ldr	r3, [pc, #240]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d121      	bne.n	8006880 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e0f6      	b.n	8006a2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	2b03      	cmp	r3, #3
 8006846:	d107      	bne.n	8006858 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006848:	4b36      	ldr	r3, [pc, #216]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d115      	bne.n	8006880 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e0ea      	b.n	8006a2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d107      	bne.n	8006870 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006860:	4b30      	ldr	r3, [pc, #192]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d109      	bne.n	8006880 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e0de      	b.n	8006a2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006870:	4b2c      	ldr	r3, [pc, #176]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e0d6      	b.n	8006a2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006880:	4b28      	ldr	r3, [pc, #160]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f023 0207 	bic.w	r2, r3, #7
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	4925      	ldr	r1, [pc, #148]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 800688e:	4313      	orrs	r3, r2
 8006890:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006892:	f7fa fddd 	bl	8001450 <HAL_GetTick>
 8006896:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006898:	e00a      	b.n	80068b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800689a:	f7fa fdd9 	bl	8001450 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e0be      	b.n	8006a2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	429a      	cmp	r2, r3
 80068c0:	d1eb      	bne.n	800689a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d010      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	4b14      	ldr	r3, [pc, #80]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	429a      	cmp	r2, r3
 80068dc:	d208      	bcs.n	80068f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068de:	4b11      	ldr	r3, [pc, #68]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	f023 020f 	bic.w	r2, r3, #15
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	490e      	ldr	r1, [pc, #56]	@ (8006924 <HAL_RCC_ClockConfig+0x244>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006920 <HAL_RCC_ClockConfig+0x240>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 030f 	and.w	r3, r3, #15
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d214      	bcs.n	8006928 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068fe:	4b08      	ldr	r3, [pc, #32]	@ (8006920 <HAL_RCC_ClockConfig+0x240>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f023 020f 	bic.w	r2, r3, #15
 8006906:	4906      	ldr	r1, [pc, #24]	@ (8006920 <HAL_RCC_ClockConfig+0x240>)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	4313      	orrs	r3, r2
 800690c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800690e:	4b04      	ldr	r3, [pc, #16]	@ (8006920 <HAL_RCC_ClockConfig+0x240>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d005      	beq.n	8006928 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e086      	b.n	8006a2e <HAL_RCC_ClockConfig+0x34e>
 8006920:	52002000 	.word	0x52002000
 8006924:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d010      	beq.n	8006956 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691a      	ldr	r2, [r3, #16]
 8006938:	4b3f      	ldr	r3, [pc, #252]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006940:	429a      	cmp	r2, r3
 8006942:	d208      	bcs.n	8006956 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006944:	4b3c      	ldr	r3, [pc, #240]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	4939      	ldr	r1, [pc, #228]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 8006952:	4313      	orrs	r3, r2
 8006954:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b00      	cmp	r3, #0
 8006960:	d010      	beq.n	8006984 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	695a      	ldr	r2, [r3, #20]
 8006966:	4b34      	ldr	r3, [pc, #208]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800696e:	429a      	cmp	r2, r3
 8006970:	d208      	bcs.n	8006984 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006972:	4b31      	ldr	r3, [pc, #196]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	492e      	ldr	r1, [pc, #184]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 8006980:	4313      	orrs	r3, r2
 8006982:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b00      	cmp	r3, #0
 800698e:	d010      	beq.n	80069b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699a      	ldr	r2, [r3, #24]
 8006994:	4b28      	ldr	r3, [pc, #160]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800699c:	429a      	cmp	r2, r3
 800699e:	d208      	bcs.n	80069b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069a0:	4b25      	ldr	r3, [pc, #148]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	4922      	ldr	r1, [pc, #136]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d010      	beq.n	80069e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69da      	ldr	r2, [r3, #28]
 80069c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d208      	bcs.n	80069e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	4917      	ldr	r1, [pc, #92]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069e0:	f000 f834 	bl	8006a4c <HAL_RCC_GetSysClockFreq>
 80069e4:	4602      	mov	r2, r0
 80069e6:	4b14      	ldr	r3, [pc, #80]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	0a1b      	lsrs	r3, r3, #8
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	4912      	ldr	r1, [pc, #72]	@ (8006a3c <HAL_RCC_ClockConfig+0x35c>)
 80069f2:	5ccb      	ldrb	r3, [r1, r3]
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	fa22 f303 	lsr.w	r3, r2, r3
 80069fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006a38 <HAL_RCC_ClockConfig+0x358>)
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	4a0d      	ldr	r2, [pc, #52]	@ (8006a3c <HAL_RCC_ClockConfig+0x35c>)
 8006a08:	5cd3      	ldrb	r3, [r2, r3]
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	fa22 f303 	lsr.w	r3, r2, r3
 8006a14:	4a0a      	ldr	r2, [pc, #40]	@ (8006a40 <HAL_RCC_ClockConfig+0x360>)
 8006a16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a18:	4a0a      	ldr	r2, [pc, #40]	@ (8006a44 <HAL_RCC_ClockConfig+0x364>)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a48 <HAL_RCC_ClockConfig+0x368>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fa fcca 	bl	80013bc <HAL_InitTick>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	58024400 	.word	0x58024400
 8006a3c:	0800c934 	.word	0x0800c934
 8006a40:	24000004 	.word	0x24000004
 8006a44:	24000000 	.word	0x24000000
 8006a48:	24000008 	.word	0x24000008

08006a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b089      	sub	sp, #36	@ 0x24
 8006a50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a52:	4bb3      	ldr	r3, [pc, #716]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a5a:	2b18      	cmp	r3, #24
 8006a5c:	f200 8155 	bhi.w	8006d0a <HAL_RCC_GetSysClockFreq+0x2be>
 8006a60:	a201      	add	r2, pc, #4	@ (adr r2, 8006a68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006acd 	.word	0x08006acd
 8006a6c:	08006d0b 	.word	0x08006d0b
 8006a70:	08006d0b 	.word	0x08006d0b
 8006a74:	08006d0b 	.word	0x08006d0b
 8006a78:	08006d0b 	.word	0x08006d0b
 8006a7c:	08006d0b 	.word	0x08006d0b
 8006a80:	08006d0b 	.word	0x08006d0b
 8006a84:	08006d0b 	.word	0x08006d0b
 8006a88:	08006af3 	.word	0x08006af3
 8006a8c:	08006d0b 	.word	0x08006d0b
 8006a90:	08006d0b 	.word	0x08006d0b
 8006a94:	08006d0b 	.word	0x08006d0b
 8006a98:	08006d0b 	.word	0x08006d0b
 8006a9c:	08006d0b 	.word	0x08006d0b
 8006aa0:	08006d0b 	.word	0x08006d0b
 8006aa4:	08006d0b 	.word	0x08006d0b
 8006aa8:	08006af9 	.word	0x08006af9
 8006aac:	08006d0b 	.word	0x08006d0b
 8006ab0:	08006d0b 	.word	0x08006d0b
 8006ab4:	08006d0b 	.word	0x08006d0b
 8006ab8:	08006d0b 	.word	0x08006d0b
 8006abc:	08006d0b 	.word	0x08006d0b
 8006ac0:	08006d0b 	.word	0x08006d0b
 8006ac4:	08006d0b 	.word	0x08006d0b
 8006ac8:	08006aff 	.word	0x08006aff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006acc:	4b94      	ldr	r3, [pc, #592]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d009      	beq.n	8006aec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ad8:	4b91      	ldr	r3, [pc, #580]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	08db      	lsrs	r3, r3, #3
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	4a90      	ldr	r2, [pc, #576]	@ (8006d24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006aea:	e111      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006aec:	4b8d      	ldr	r3, [pc, #564]	@ (8006d24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006aee:	61bb      	str	r3, [r7, #24]
      break;
 8006af0:	e10e      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006af2:	4b8d      	ldr	r3, [pc, #564]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006af4:	61bb      	str	r3, [r7, #24]
      break;
 8006af6:	e10b      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006af8:	4b8c      	ldr	r3, [pc, #560]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006afa:	61bb      	str	r3, [r7, #24]
      break;
 8006afc:	e108      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006afe:	4b88      	ldr	r3, [pc, #544]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b08:	4b85      	ldr	r3, [pc, #532]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0c:	091b      	lsrs	r3, r3, #4
 8006b0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b12:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b14:	4b82      	ldr	r3, [pc, #520]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b1e:	4b80      	ldr	r3, [pc, #512]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b22:	08db      	lsrs	r3, r3, #3
 8006b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	fb02 f303 	mul.w	r3, r2, r3
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80e1 	beq.w	8006d04 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	f000 8083 	beq.w	8006c50 <HAL_RCC_GetSysClockFreq+0x204>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	f200 80a1 	bhi.w	8006c94 <HAL_RCC_GetSysClockFreq+0x248>
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_RCC_GetSysClockFreq+0x114>
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d056      	beq.n	8006c0c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b5e:	e099      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b60:	4b6f      	ldr	r3, [pc, #444]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d02d      	beq.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	08db      	lsrs	r3, r3, #3
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	4a6b      	ldr	r2, [pc, #428]	@ (8006d24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b78:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b96:	4b62      	ldr	r3, [pc, #392]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006baa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006d30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006bc6:	e087      	b.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006d34 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bda:	4b51      	ldr	r3, [pc, #324]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bea:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006d30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c0a:	e065      	b.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006d38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1e:	4b40      	ldr	r3, [pc, #256]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c32:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006d30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c4e:	e043      	b.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006d3c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c62:	4b2f      	ldr	r3, [pc, #188]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c72:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c76:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006d30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c92:	e021      	b.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006d38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006d30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cd6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006cd8:	4b11      	ldr	r3, [pc, #68]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cdc:	0a5b      	lsrs	r3, r3, #9
 8006cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	ee07 3a90 	vmov	s15, r3
 8006cec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cfc:	ee17 3a90 	vmov	r3, s15
 8006d00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006d02:	e005      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61bb      	str	r3, [r7, #24]
      break;
 8006d08:	e002      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d0a:	4b07      	ldr	r3, [pc, #28]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d0c:	61bb      	str	r3, [r7, #24]
      break;
 8006d0e:	bf00      	nop
  }

  return sysclockfreq;
 8006d10:	69bb      	ldr	r3, [r7, #24]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3724      	adds	r7, #36	@ 0x24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	58024400 	.word	0x58024400
 8006d24:	03d09000 	.word	0x03d09000
 8006d28:	003d0900 	.word	0x003d0900
 8006d2c:	017d7840 	.word	0x017d7840
 8006d30:	46000000 	.word	0x46000000
 8006d34:	4c742400 	.word	0x4c742400
 8006d38:	4a742400 	.word	0x4a742400
 8006d3c:	4bbebc20 	.word	0x4bbebc20

08006d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d46:	f7ff fe81 	bl	8006a4c <HAL_RCC_GetSysClockFreq>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	4b10      	ldr	r3, [pc, #64]	@ (8006d90 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	0a1b      	lsrs	r3, r3, #8
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	490f      	ldr	r1, [pc, #60]	@ (8006d94 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d58:	5ccb      	ldrb	r3, [r1, r3]
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d64:	4b0a      	ldr	r3, [pc, #40]	@ (8006d90 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	4a09      	ldr	r2, [pc, #36]	@ (8006d94 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d6e:	5cd3      	ldrb	r3, [r2, r3]
 8006d70:	f003 031f 	and.w	r3, r3, #31
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	fa22 f303 	lsr.w	r3, r2, r3
 8006d7a:	4a07      	ldr	r2, [pc, #28]	@ (8006d98 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d7e:	4a07      	ldr	r2, [pc, #28]	@ (8006d9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d84:	4b04      	ldr	r3, [pc, #16]	@ (8006d98 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d86:	681b      	ldr	r3, [r3, #0]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	58024400 	.word	0x58024400
 8006d94:	0800c934 	.word	0x0800c934
 8006d98:	24000004 	.word	0x24000004
 8006d9c:	24000000 	.word	0x24000000

08006da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006da4:	f7ff ffcc 	bl	8006d40 <HAL_RCC_GetHCLKFreq>
 8006da8:	4602      	mov	r2, r0
 8006daa:	4b06      	ldr	r3, [pc, #24]	@ (8006dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	091b      	lsrs	r3, r3, #4
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	4904      	ldr	r1, [pc, #16]	@ (8006dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006db6:	5ccb      	ldrb	r3, [r1, r3]
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	58024400 	.word	0x58024400
 8006dc8:	0800c934 	.word	0x0800c934

08006dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006dd0:	f7ff ffb6 	bl	8006d40 <HAL_RCC_GetHCLKFreq>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	4b06      	ldr	r3, [pc, #24]	@ (8006df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	0a1b      	lsrs	r3, r3, #8
 8006ddc:	f003 0307 	and.w	r3, r3, #7
 8006de0:	4904      	ldr	r1, [pc, #16]	@ (8006df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006de2:	5ccb      	ldrb	r3, [r1, r3]
 8006de4:	f003 031f 	and.w	r3, r3, #31
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	58024400 	.word	0x58024400
 8006df4:	0800c934 	.word	0x0800c934

08006df8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dfc:	b0ca      	sub	sp, #296	@ 0x128
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e04:	2300      	movs	r3, #0
 8006e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006e1c:	2500      	movs	r5, #0
 8006e1e:	ea54 0305 	orrs.w	r3, r4, r5
 8006e22:	d049      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e2e:	d02f      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e34:	d828      	bhi.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e3a:	d01a      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e40:	d822      	bhi.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e4a:	d007      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e4c:	e01c      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e4e:	4bb8      	ldr	r3, [pc, #736]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e52:	4ab7      	ldr	r2, [pc, #732]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e5a:	e01a      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e60:	3308      	adds	r3, #8
 8006e62:	2102      	movs	r1, #2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f002 fb61 	bl	800952c <RCCEx_PLL2_Config>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e70:	e00f      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e76:	3328      	adds	r3, #40	@ 0x28
 8006e78:	2102      	movs	r1, #2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f002 fc08 	bl	8009690 <RCCEx_PLL3_Config>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e86:	e004      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e8e:	e000      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e9a:	4ba5      	ldr	r3, [pc, #660]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ea8:	4aa1      	ldr	r2, [pc, #644]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	6513      	str	r3, [r2, #80]	@ 0x50
 8006eae:	e003      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006ec4:	f04f 0900 	mov.w	r9, #0
 8006ec8:	ea58 0309 	orrs.w	r3, r8, r9
 8006ecc:	d047      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d82a      	bhi.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006ef5 	.word	0x08006ef5
 8006ee4:	08006f03 	.word	0x08006f03
 8006ee8:	08006f19 	.word	0x08006f19
 8006eec:	08006f37 	.word	0x08006f37
 8006ef0:	08006f37 	.word	0x08006f37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef4:	4b8e      	ldr	r3, [pc, #568]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef8:	4a8d      	ldr	r2, [pc, #564]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f00:	e01a      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f06:	3308      	adds	r3, #8
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f002 fb0e 	bl	800952c <RCCEx_PLL2_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f16:	e00f      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1c:	3328      	adds	r3, #40	@ 0x28
 8006f1e:	2100      	movs	r1, #0
 8006f20:	4618      	mov	r0, r3
 8006f22:	f002 fbb5 	bl	8009690 <RCCEx_PLL3_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f2c:	e004      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f34:	e000      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f40:	4b7b      	ldr	r3, [pc, #492]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f44:	f023 0107 	bic.w	r1, r3, #7
 8006f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f4e:	4a78      	ldr	r2, [pc, #480]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f50:	430b      	orrs	r3, r1
 8006f52:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f54:	e003      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006f6a:	f04f 0b00 	mov.w	fp, #0
 8006f6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006f72:	d04c      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f7e:	d030      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f84:	d829      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f86:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f88:	d02d      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006f8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f8c:	d825      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f8e:	2b80      	cmp	r3, #128	@ 0x80
 8006f90:	d018      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006f92:	2b80      	cmp	r3, #128	@ 0x80
 8006f94:	d821      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006f9a:	2b40      	cmp	r3, #64	@ 0x40
 8006f9c:	d007      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006f9e:	e01c      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fa0:	4b63      	ldr	r3, [pc, #396]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa4:	4a62      	ldr	r2, [pc, #392]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fac:	e01c      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f002 fab8 	bl	800952c <RCCEx_PLL2_Config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fc2:	e011      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc8:	3328      	adds	r3, #40	@ 0x28
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f002 fb5f 	bl	8009690 <RCCEx_PLL3_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fd8:	e006      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fe0:	e002      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fe2:	bf00      	nop
 8006fe4:	e000      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10a      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ff0:	4b4f      	ldr	r3, [pc, #316]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ff4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ffe:	4a4c      	ldr	r2, [pc, #304]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007000:	430b      	orrs	r3, r1
 8007002:	6513      	str	r3, [r2, #80]	@ 0x50
 8007004:	e003      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800700a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800700e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800701a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800701e:	2300      	movs	r3, #0
 8007020:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007024:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007028:	460b      	mov	r3, r1
 800702a:	4313      	orrs	r3, r2
 800702c:	d053      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800702e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007032:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007036:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800703a:	d035      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800703c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007040:	d82e      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007042:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007046:	d031      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007048:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800704c:	d828      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800704e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007052:	d01a      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007054:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007058:	d822      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800705e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007062:	d007      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007064:	e01c      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007066:	4b32      	ldr	r3, [pc, #200]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706a:	4a31      	ldr	r2, [pc, #196]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800706c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007070:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007072:	e01c      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007078:	3308      	adds	r3, #8
 800707a:	2100      	movs	r1, #0
 800707c:	4618      	mov	r0, r3
 800707e:	f002 fa55 	bl	800952c <RCCEx_PLL2_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007088:	e011      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800708a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708e:	3328      	adds	r3, #40	@ 0x28
 8007090:	2100      	movs	r1, #0
 8007092:	4618      	mov	r0, r3
 8007094:	f002 fafc 	bl	8009690 <RCCEx_PLL3_Config>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800709e:	e006      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070a6:	e002      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80070a8:	bf00      	nop
 80070aa:	e000      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80070ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10b      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80070b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ba:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80070be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80070cc:	e003      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070de:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80070e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80070e6:	2300      	movs	r3, #0
 80070e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80070ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80070f0:	460b      	mov	r3, r1
 80070f2:	4313      	orrs	r3, r2
 80070f4:	d056      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007102:	d038      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007104:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007108:	d831      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800710a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800710e:	d034      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007110:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007114:	d82b      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007116:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800711a:	d01d      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800711c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007120:	d825      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d006      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007126:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800712a:	d00a      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800712c:	e01f      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800712e:	bf00      	nop
 8007130:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007134:	4ba2      	ldr	r3, [pc, #648]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007138:	4aa1      	ldr	r2, [pc, #644]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800713a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800713e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007140:	e01c      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007146:	3308      	adds	r3, #8
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f002 f9ee 	bl	800952c <RCCEx_PLL2_Config>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007156:	e011      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715c:	3328      	adds	r3, #40	@ 0x28
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f002 fa95 	bl	8009690 <RCCEx_PLL3_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800716c:	e006      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007174:	e002      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007176:	bf00      	nop
 8007178:	e000      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800717a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800717c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10b      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007184:	4b8e      	ldr	r3, [pc, #568]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007188:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007190:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007194:	4a8a      	ldr	r2, [pc, #552]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007196:	430b      	orrs	r3, r1
 8007198:	6593      	str	r3, [r2, #88]	@ 0x58
 800719a:	e003      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80071b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071b4:	2300      	movs	r3, #0
 80071b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80071be:	460b      	mov	r3, r1
 80071c0:	4313      	orrs	r3, r2
 80071c2:	d03a      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80071c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ca:	2b30      	cmp	r3, #48	@ 0x30
 80071cc:	d01f      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80071ce:	2b30      	cmp	r3, #48	@ 0x30
 80071d0:	d819      	bhi.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d00c      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d815      	bhi.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d019      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80071de:	2b10      	cmp	r3, #16
 80071e0:	d111      	bne.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e2:	4b77      	ldr	r3, [pc, #476]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e6:	4a76      	ldr	r2, [pc, #472]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071ee:	e011      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f4:	3308      	adds	r3, #8
 80071f6:	2102      	movs	r1, #2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f002 f997 	bl	800952c <RCCEx_PLL2_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007204:	e006      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800720c:	e002      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800720e:	bf00      	nop
 8007210:	e000      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800721c:	4b68      	ldr	r3, [pc, #416]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800721e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007220:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722a:	4a65      	ldr	r2, [pc, #404]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800722c:	430b      	orrs	r3, r1
 800722e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007230:	e003      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007236:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800723a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007246:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800724a:	2300      	movs	r3, #0
 800724c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007250:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007254:	460b      	mov	r3, r1
 8007256:	4313      	orrs	r3, r2
 8007258:	d051      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800725a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007260:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007264:	d035      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007266:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800726a:	d82e      	bhi.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800726c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007270:	d031      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007272:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007276:	d828      	bhi.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800727c:	d01a      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800727e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007282:	d822      	bhi.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800728c:	d007      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800728e:	e01c      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007290:	4b4b      	ldr	r3, [pc, #300]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007294:	4a4a      	ldr	r2, [pc, #296]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800729a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800729c:	e01c      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a2:	3308      	adds	r3, #8
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f002 f940 	bl	800952c <RCCEx_PLL2_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072b2:	e011      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b8:	3328      	adds	r3, #40	@ 0x28
 80072ba:	2100      	movs	r1, #0
 80072bc:	4618      	mov	r0, r3
 80072be:	f002 f9e7 	bl	8009690 <RCCEx_PLL3_Config>
 80072c2:	4603      	mov	r3, r0
 80072c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072c8:	e006      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072d0:	e002      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072d2:	bf00      	nop
 80072d4:	e000      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072e0:	4b37      	ldr	r3, [pc, #220]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80072e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072ee:	4a34      	ldr	r2, [pc, #208]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072f0:	430b      	orrs	r3, r1
 80072f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80072f4:	e003      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800730a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800730e:	2300      	movs	r3, #0
 8007310:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007314:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007318:	460b      	mov	r3, r1
 800731a:	4313      	orrs	r3, r2
 800731c:	d056      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800731e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007328:	d033      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800732a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800732e:	d82c      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007330:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007334:	d02f      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007336:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800733a:	d826      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800733c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007340:	d02b      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007342:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007346:	d820      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800734c:	d012      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800734e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007352:	d81a      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007354:	2b00      	cmp	r3, #0
 8007356:	d022      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800735c:	d115      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007362:	3308      	adds	r3, #8
 8007364:	2101      	movs	r1, #1
 8007366:	4618      	mov	r0, r3
 8007368:	f002 f8e0 	bl	800952c <RCCEx_PLL2_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007372:	e015      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007378:	3328      	adds	r3, #40	@ 0x28
 800737a:	2101      	movs	r1, #1
 800737c:	4618      	mov	r0, r3
 800737e:	f002 f987 	bl	8009690 <RCCEx_PLL3_Config>
 8007382:	4603      	mov	r3, r0
 8007384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007388:	e00a      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007390:	e006      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007392:	bf00      	nop
 8007394:	e004      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007396:	bf00      	nop
 8007398:	e002      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800739a:	bf00      	nop
 800739c:	e000      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800739e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10d      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80073a8:	4b05      	ldr	r3, [pc, #20]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80073b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073b6:	4a02      	ldr	r2, [pc, #8]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073b8:	430b      	orrs	r3, r1
 80073ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80073bc:	e006      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80073be:	bf00      	nop
 80073c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80073d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073dc:	2300      	movs	r3, #0
 80073de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073e2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4313      	orrs	r3, r2
 80073ea:	d055      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073f8:	d033      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80073fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073fe:	d82c      	bhi.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007404:	d02f      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800740a:	d826      	bhi.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800740c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007410:	d02b      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007412:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007416:	d820      	bhi.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800741c:	d012      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800741e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007422:	d81a      	bhi.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007424:	2b00      	cmp	r3, #0
 8007426:	d022      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007428:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800742c:	d115      	bne.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	3308      	adds	r3, #8
 8007434:	2101      	movs	r1, #1
 8007436:	4618      	mov	r0, r3
 8007438:	f002 f878 	bl	800952c <RCCEx_PLL2_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007442:	e015      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007448:	3328      	adds	r3, #40	@ 0x28
 800744a:	2101      	movs	r1, #1
 800744c:	4618      	mov	r0, r3
 800744e:	f002 f91f 	bl	8009690 <RCCEx_PLL3_Config>
 8007452:	4603      	mov	r3, r0
 8007454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007458:	e00a      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007460:	e006      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007462:	bf00      	nop
 8007464:	e004      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007466:	bf00      	nop
 8007468:	e002      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800746a:	bf00      	nop
 800746c:	e000      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800746e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10b      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007478:	4ba3      	ldr	r3, [pc, #652]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800747a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800747c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007484:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007488:	4a9f      	ldr	r2, [pc, #636]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800748a:	430b      	orrs	r3, r1
 800748c:	6593      	str	r3, [r2, #88]	@ 0x58
 800748e:	e003      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80074a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074a8:	2300      	movs	r3, #0
 80074aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80074ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074b2:	460b      	mov	r3, r1
 80074b4:	4313      	orrs	r3, r2
 80074b6:	d037      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80074b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074c2:	d00e      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80074c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074c8:	d816      	bhi.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d018      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80074ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074d2:	d111      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d4:	4b8c      	ldr	r3, [pc, #560]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d8:	4a8b      	ldr	r2, [pc, #556]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074e0:	e00f      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e6:	3308      	adds	r3, #8
 80074e8:	2101      	movs	r1, #1
 80074ea:	4618      	mov	r0, r3
 80074ec:	f002 f81e 	bl	800952c <RCCEx_PLL2_Config>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074f6:	e004      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074fe:	e000      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800750a:	4b7f      	ldr	r3, [pc, #508]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800750c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800750e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007518:	4a7b      	ldr	r2, [pc, #492]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800751a:	430b      	orrs	r3, r1
 800751c:	6513      	str	r3, [r2, #80]	@ 0x50
 800751e:	e003      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007538:	2300      	movs	r3, #0
 800753a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800753e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007542:	460b      	mov	r3, r1
 8007544:	4313      	orrs	r3, r2
 8007546:	d039      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800754c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800754e:	2b03      	cmp	r3, #3
 8007550:	d81c      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007552:	a201      	add	r2, pc, #4	@ (adr r2, 8007558 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	08007595 	.word	0x08007595
 800755c:	08007569 	.word	0x08007569
 8007560:	08007577 	.word	0x08007577
 8007564:	08007595 	.word	0x08007595
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007568:	4b67      	ldr	r3, [pc, #412]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	4a66      	ldr	r2, [pc, #408]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800756e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007574:	e00f      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757a:	3308      	adds	r3, #8
 800757c:	2102      	movs	r1, #2
 800757e:	4618      	mov	r0, r3
 8007580:	f001 ffd4 	bl	800952c <RCCEx_PLL2_Config>
 8007584:	4603      	mov	r3, r0
 8007586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800758a:	e004      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007592:	e000      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800759e:	4b5a      	ldr	r3, [pc, #360]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075a2:	f023 0103 	bic.w	r1, r3, #3
 80075a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ac:	4a56      	ldr	r2, [pc, #344]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075ae:	430b      	orrs	r3, r1
 80075b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075b2:	e003      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80075c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075cc:	2300      	movs	r3, #0
 80075ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80075d6:	460b      	mov	r3, r1
 80075d8:	4313      	orrs	r3, r2
 80075da:	f000 809f 	beq.w	800771c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075de:	4b4b      	ldr	r3, [pc, #300]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a4a      	ldr	r2, [pc, #296]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075ea:	f7f9 ff31 	bl	8001450 <HAL_GetTick>
 80075ee:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075f2:	e00b      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075f4:	f7f9 ff2c 	bl	8001450 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b64      	cmp	r3, #100	@ 0x64
 8007602:	d903      	bls.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800760a:	e005      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800760c:	4b3f      	ldr	r3, [pc, #252]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0ed      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800761c:	2b00      	cmp	r3, #0
 800761e:	d179      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007620:	4b39      	ldr	r3, [pc, #228]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007622:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007628:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800762c:	4053      	eors	r3, r2
 800762e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007632:	2b00      	cmp	r3, #0
 8007634:	d015      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007636:	4b34      	ldr	r3, [pc, #208]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800763e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007642:	4b31      	ldr	r3, [pc, #196]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007646:	4a30      	ldr	r2, [pc, #192]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800764c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800764e:	4b2e      	ldr	r3, [pc, #184]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007652:	4a2d      	ldr	r2, [pc, #180]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007654:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007658:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800765a:	4a2b      	ldr	r2, [pc, #172]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800765c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007660:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007666:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800766a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800766e:	d118      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007670:	f7f9 feee 	bl	8001450 <HAL_GetTick>
 8007674:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007678:	e00d      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800767a:	f7f9 fee9 	bl	8001450 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007684:	1ad2      	subs	r2, r2, r3
 8007686:	f241 3388 	movw	r3, #5000	@ 0x1388
 800768a:	429a      	cmp	r2, r3
 800768c:	d903      	bls.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007694:	e005      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007696:	4b1c      	ldr	r3, [pc, #112]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0eb      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80076a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d129      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076ba:	d10e      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80076bc:	4b12      	ldr	r3, [pc, #72]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80076c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076cc:	091a      	lsrs	r2, r3, #4
 80076ce:	4b10      	ldr	r3, [pc, #64]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	4a0d      	ldr	r2, [pc, #52]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6113      	str	r3, [r2, #16]
 80076d8:	e005      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80076da:	4b0b      	ldr	r3, [pc, #44]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	4a0a      	ldr	r2, [pc, #40]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076e4:	6113      	str	r3, [r2, #16]
 80076e6:	4b08      	ldr	r3, [pc, #32]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80076ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076f6:	4a04      	ldr	r2, [pc, #16]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076f8:	430b      	orrs	r3, r1
 80076fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80076fc:	e00e      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007706:	e009      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007708:	58024400 	.word	0x58024400
 800770c:	58024800 	.word	0x58024800
 8007710:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	f002 0301 	and.w	r3, r2, #1
 8007728:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800772c:	2300      	movs	r3, #0
 800772e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007732:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007736:	460b      	mov	r3, r1
 8007738:	4313      	orrs	r3, r2
 800773a:	f000 8089 	beq.w	8007850 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800773e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007744:	2b28      	cmp	r3, #40	@ 0x28
 8007746:	d86b      	bhi.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007748:	a201      	add	r2, pc, #4	@ (adr r2, 8007750 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800774a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774e:	bf00      	nop
 8007750:	08007829 	.word	0x08007829
 8007754:	08007821 	.word	0x08007821
 8007758:	08007821 	.word	0x08007821
 800775c:	08007821 	.word	0x08007821
 8007760:	08007821 	.word	0x08007821
 8007764:	08007821 	.word	0x08007821
 8007768:	08007821 	.word	0x08007821
 800776c:	08007821 	.word	0x08007821
 8007770:	080077f5 	.word	0x080077f5
 8007774:	08007821 	.word	0x08007821
 8007778:	08007821 	.word	0x08007821
 800777c:	08007821 	.word	0x08007821
 8007780:	08007821 	.word	0x08007821
 8007784:	08007821 	.word	0x08007821
 8007788:	08007821 	.word	0x08007821
 800778c:	08007821 	.word	0x08007821
 8007790:	0800780b 	.word	0x0800780b
 8007794:	08007821 	.word	0x08007821
 8007798:	08007821 	.word	0x08007821
 800779c:	08007821 	.word	0x08007821
 80077a0:	08007821 	.word	0x08007821
 80077a4:	08007821 	.word	0x08007821
 80077a8:	08007821 	.word	0x08007821
 80077ac:	08007821 	.word	0x08007821
 80077b0:	08007829 	.word	0x08007829
 80077b4:	08007821 	.word	0x08007821
 80077b8:	08007821 	.word	0x08007821
 80077bc:	08007821 	.word	0x08007821
 80077c0:	08007821 	.word	0x08007821
 80077c4:	08007821 	.word	0x08007821
 80077c8:	08007821 	.word	0x08007821
 80077cc:	08007821 	.word	0x08007821
 80077d0:	08007829 	.word	0x08007829
 80077d4:	08007821 	.word	0x08007821
 80077d8:	08007821 	.word	0x08007821
 80077dc:	08007821 	.word	0x08007821
 80077e0:	08007821 	.word	0x08007821
 80077e4:	08007821 	.word	0x08007821
 80077e8:	08007821 	.word	0x08007821
 80077ec:	08007821 	.word	0x08007821
 80077f0:	08007829 	.word	0x08007829
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f8:	3308      	adds	r3, #8
 80077fa:	2101      	movs	r1, #1
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fe95 	bl	800952c <RCCEx_PLL2_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007808:	e00f      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800780a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780e:	3328      	adds	r3, #40	@ 0x28
 8007810:	2101      	movs	r1, #1
 8007812:	4618      	mov	r0, r3
 8007814:	f001 ff3c 	bl	8009690 <RCCEx_PLL3_Config>
 8007818:	4603      	mov	r3, r0
 800781a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800781e:	e004      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007826:	e000      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800782a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007832:	4bbf      	ldr	r3, [pc, #764]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007836:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800783a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007840:	4abb      	ldr	r2, [pc, #748]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007842:	430b      	orrs	r3, r1
 8007844:	6553      	str	r3, [r2, #84]	@ 0x54
 8007846:	e003      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800784c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f002 0302 	and.w	r3, r2, #2
 800785c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007860:	2300      	movs	r3, #0
 8007862:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007866:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800786a:	460b      	mov	r3, r1
 800786c:	4313      	orrs	r3, r2
 800786e:	d041      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007874:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007876:	2b05      	cmp	r3, #5
 8007878:	d824      	bhi.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800787a:	a201      	add	r2, pc, #4	@ (adr r2, 8007880 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	080078cd 	.word	0x080078cd
 8007884:	08007899 	.word	0x08007899
 8007888:	080078af 	.word	0x080078af
 800788c:	080078cd 	.word	0x080078cd
 8007890:	080078cd 	.word	0x080078cd
 8007894:	080078cd 	.word	0x080078cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789c:	3308      	adds	r3, #8
 800789e:	2101      	movs	r1, #1
 80078a0:	4618      	mov	r0, r3
 80078a2:	f001 fe43 	bl	800952c <RCCEx_PLL2_Config>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078ac:	e00f      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b2:	3328      	adds	r3, #40	@ 0x28
 80078b4:	2101      	movs	r1, #1
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 feea 	bl	8009690 <RCCEx_PLL3_Config>
 80078bc:	4603      	mov	r3, r0
 80078be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078c2:	e004      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078ca:	e000      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80078cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078d6:	4b96      	ldr	r3, [pc, #600]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078da:	f023 0107 	bic.w	r1, r3, #7
 80078de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078e4:	4a92      	ldr	r2, [pc, #584]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078e6:	430b      	orrs	r3, r1
 80078e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80078ea:	e003      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f002 0304 	and.w	r3, r2, #4
 8007900:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007904:	2300      	movs	r3, #0
 8007906:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800790a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800790e:	460b      	mov	r3, r1
 8007910:	4313      	orrs	r3, r2
 8007912:	d044      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800791c:	2b05      	cmp	r3, #5
 800791e:	d825      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007920:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	08007975 	.word	0x08007975
 800792c:	08007941 	.word	0x08007941
 8007930:	08007957 	.word	0x08007957
 8007934:	08007975 	.word	0x08007975
 8007938:	08007975 	.word	0x08007975
 800793c:	08007975 	.word	0x08007975
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007944:	3308      	adds	r3, #8
 8007946:	2101      	movs	r1, #1
 8007948:	4618      	mov	r0, r3
 800794a:	f001 fdef 	bl	800952c <RCCEx_PLL2_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007954:	e00f      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795a:	3328      	adds	r3, #40	@ 0x28
 800795c:	2101      	movs	r1, #1
 800795e:	4618      	mov	r0, r3
 8007960:	f001 fe96 	bl	8009690 <RCCEx_PLL3_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800796a:	e004      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007972:	e000      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10b      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800797e:	4b6c      	ldr	r3, [pc, #432]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007982:	f023 0107 	bic.w	r1, r3, #7
 8007986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800798e:	4a68      	ldr	r2, [pc, #416]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007990:	430b      	orrs	r3, r1
 8007992:	6593      	str	r3, [r2, #88]	@ 0x58
 8007994:	e003      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800799a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800799e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f002 0320 	and.w	r3, r2, #32
 80079aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079ae:	2300      	movs	r3, #0
 80079b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079b8:	460b      	mov	r3, r1
 80079ba:	4313      	orrs	r3, r2
 80079bc:	d055      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079ca:	d033      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80079cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079d0:	d82c      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d6:	d02f      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80079d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079dc:	d826      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079e2:	d02b      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80079e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079e8:	d820      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ee:	d012      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80079f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f4:	d81a      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d022      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80079fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079fe:	d115      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a04:	3308      	adds	r3, #8
 8007a06:	2100      	movs	r1, #0
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f001 fd8f 	bl	800952c <RCCEx_PLL2_Config>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a14:	e015      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1a:	3328      	adds	r3, #40	@ 0x28
 8007a1c:	2102      	movs	r1, #2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f001 fe36 	bl	8009690 <RCCEx_PLL3_Config>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a2a:	e00a      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a32:	e006      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a34:	bf00      	nop
 8007a36:	e004      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a38:	bf00      	nop
 8007a3a:	e002      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a3c:	bf00      	nop
 8007a3e:	e000      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10b      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a4a:	4b39      	ldr	r3, [pc, #228]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a5a:	4a35      	ldr	r2, [pc, #212]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a60:	e003      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4313      	orrs	r3, r2
 8007a88:	d058      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a92:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a96:	d033      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007a98:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a9c:	d82c      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa2:	d02f      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa8:	d826      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007aaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007aae:	d02b      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007ab0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ab4:	d820      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aba:	d012      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007abc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ac0:	d81a      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d022      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aca:	d115      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f001 fd29 	bl	800952c <RCCEx_PLL2_Config>
 8007ada:	4603      	mov	r3, r0
 8007adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ae0:	e015      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae6:	3328      	adds	r3, #40	@ 0x28
 8007ae8:	2102      	movs	r1, #2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f001 fdd0 	bl	8009690 <RCCEx_PLL3_Config>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007af6:	e00a      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007afe:	e006      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b00:	bf00      	nop
 8007b02:	e004      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b04:	bf00      	nop
 8007b06:	e002      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b08:	bf00      	nop
 8007b0a:	e000      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10e      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b16:	4b06      	ldr	r3, [pc, #24]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b1a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b26:	4a02      	ldr	r2, [pc, #8]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b2c:	e006      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007b2e:	bf00      	nop
 8007b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b52:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007b56:	460b      	mov	r3, r1
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	d055      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b64:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b68:	d033      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007b6a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b6e:	d82c      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b74:	d02f      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b7a:	d826      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b7c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b80:	d02b      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007b82:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b86:	d820      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b8c:	d012      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007b8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b92:	d81a      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d022      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b9c:	d115      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 fcc0 	bl	800952c <RCCEx_PLL2_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bb2:	e015      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb8:	3328      	adds	r3, #40	@ 0x28
 8007bba:	2102      	movs	r1, #2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 fd67 	bl	8009690 <RCCEx_PLL3_Config>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bc8:	e00a      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bd0:	e006      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bd2:	bf00      	nop
 8007bd4:	e004      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bd6:	bf00      	nop
 8007bd8:	e002      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bda:	bf00      	nop
 8007bdc:	e000      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10b      	bne.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007be8:	4ba1      	ldr	r3, [pc, #644]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bf8:	4a9d      	ldr	r2, [pc, #628]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bfe:	e003      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f002 0308 	and.w	r3, r2, #8
 8007c14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007c22:	460b      	mov	r3, r1
 8007c24:	4313      	orrs	r3, r2
 8007c26:	d01e      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c34:	d10c      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3a:	3328      	adds	r3, #40	@ 0x28
 8007c3c:	2102      	movs	r1, #2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f001 fd26 	bl	8009690 <RCCEx_PLL3_Config>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c50:	4b87      	ldr	r3, [pc, #540]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c54:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c60:	4a83      	ldr	r2, [pc, #524]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c62:	430b      	orrs	r3, r1
 8007c64:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f002 0310 	and.w	r3, r2, #16
 8007c72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c76:	2300      	movs	r3, #0
 8007c78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c7c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007c80:	460b      	mov	r3, r1
 8007c82:	4313      	orrs	r3, r2
 8007c84:	d01e      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c92:	d10c      	bne.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c98:	3328      	adds	r3, #40	@ 0x28
 8007c9a:	2102      	movs	r1, #2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 fcf7 	bl	8009690 <RCCEx_PLL3_Config>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cae:	4b70      	ldr	r3, [pc, #448]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cbe:	4a6c      	ldr	r2, [pc, #432]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007cd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cda:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	d03e      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cf0:	d022      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007cf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cf6:	d81b      	bhi.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d00:	d00b      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007d02:	e015      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d08:	3308      	adds	r3, #8
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f001 fc0d 	bl	800952c <RCCEx_PLL2_Config>
 8007d12:	4603      	mov	r3, r0
 8007d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d18:	e00f      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1e:	3328      	adds	r3, #40	@ 0x28
 8007d20:	2102      	movs	r1, #2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 fcb4 	bl	8009690 <RCCEx_PLL3_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d2e:	e004      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d36:	e000      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10b      	bne.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d42:	4b4b      	ldr	r3, [pc, #300]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d52:	4a47      	ldr	r2, [pc, #284]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d54:	430b      	orrs	r3, r1
 8007d56:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d58:	e003      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007d6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d70:	2300      	movs	r3, #0
 8007d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	d03b      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d8a:	d01f      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007d8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d90:	d818      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d96:	d003      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007d98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d9c:	d007      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007d9e:	e011      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007da0:	4b33      	ldr	r3, [pc, #204]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da4:	4a32      	ldr	r2, [pc, #200]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007daa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007dac:	e00f      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db2:	3328      	adds	r3, #40	@ 0x28
 8007db4:	2101      	movs	r1, #1
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 fc6a 	bl	8009690 <RCCEx_PLL3_Config>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007dc2:	e004      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dca:	e000      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10b      	bne.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dd6:	4b26      	ldr	r3, [pc, #152]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de6:	4a22      	ldr	r2, [pc, #136]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007de8:	430b      	orrs	r3, r1
 8007dea:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dec:	e003      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007df2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007e02:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e04:	2300      	movs	r3, #0
 8007e06:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e08:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	d034      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e20:	d007      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007e22:	e011      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e24:	4b12      	ldr	r3, [pc, #72]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e28:	4a11      	ldr	r2, [pc, #68]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e30:	e00e      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e36:	3308      	adds	r3, #8
 8007e38:	2102      	movs	r1, #2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f001 fb76 	bl	800952c <RCCEx_PLL2_Config>
 8007e40:	4603      	mov	r3, r0
 8007e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e46:	e003      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10d      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e58:	4b05      	ldr	r3, [pc, #20]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e66:	4a02      	ldr	r2, [pc, #8]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e6c:	e006      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007e6e:	bf00      	nop
 8007e70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007e88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e8e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007e92:	460b      	mov	r3, r1
 8007e94:	4313      	orrs	r3, r2
 8007e96:	d00c      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9c:	3328      	adds	r3, #40	@ 0x28
 8007e9e:	2102      	movs	r1, #2
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f001 fbf5 	bl	8009690 <RCCEx_PLL3_Config>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007ebe:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ec4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	d038      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eda:	d018      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ee0:	d811      	bhi.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ee6:	d014      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eec:	d80b      	bhi.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d011      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ef6:	d106      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef8:	4bc3      	ldr	r3, [pc, #780]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007efc:	4ac2      	ldr	r2, [pc, #776]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007f04:	e008      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f0c:	e004      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f0e:	bf00      	nop
 8007f10:	e002      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f12:	bf00      	nop
 8007f14:	e000      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10b      	bne.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f20:	4bb9      	ldr	r3, [pc, #740]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f30:	4ab5      	ldr	r2, [pc, #724]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f32:	430b      	orrs	r3, r1
 8007f34:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f36:	e003      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007f4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f4e:	2300      	movs	r3, #0
 8007f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007f56:	460b      	mov	r3, r1
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	d009      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f5c:	4baa      	ldr	r3, [pc, #680]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f6a:	4aa7      	ldr	r2, [pc, #668]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f6c:	430b      	orrs	r3, r1
 8007f6e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007f7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f7e:	2300      	movs	r3, #0
 8007f80:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007f86:	460b      	mov	r3, r1
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	d00a      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f8c:	4b9e      	ldr	r3, [pc, #632]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007f9c:	4a9a      	ldr	r2, [pc, #616]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f9e:	430b      	orrs	r3, r1
 8007fa0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fb4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	d009      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007fbe:	4b92      	ldr	r3, [pc, #584]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fcc:	4a8e      	ldr	r2, [pc, #568]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fce:	430b      	orrs	r3, r1
 8007fd0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007fde:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fe4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4313      	orrs	r3, r2
 8007fec:	d00e      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fee:	4b86      	ldr	r3, [pc, #536]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	4a85      	ldr	r2, [pc, #532]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ff4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ff8:	6113      	str	r3, [r2, #16]
 8007ffa:	4b83      	ldr	r3, [pc, #524]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ffc:	6919      	ldr	r1, [r3, #16]
 8007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008002:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008006:	4a80      	ldr	r2, [pc, #512]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008008:	430b      	orrs	r3, r1
 800800a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008018:	63bb      	str	r3, [r7, #56]	@ 0x38
 800801a:	2300      	movs	r3, #0
 800801c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800801e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008022:	460b      	mov	r3, r1
 8008024:	4313      	orrs	r3, r2
 8008026:	d009      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008028:	4b77      	ldr	r3, [pc, #476]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800802a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800802c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008036:	4a74      	ldr	r2, [pc, #464]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008038:	430b      	orrs	r3, r1
 800803a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800803c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008048:	633b      	str	r3, [r7, #48]	@ 0x30
 800804a:	2300      	movs	r3, #0
 800804c:	637b      	str	r3, [r7, #52]	@ 0x34
 800804e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008052:	460b      	mov	r3, r1
 8008054:	4313      	orrs	r3, r2
 8008056:	d00a      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008058:	4b6b      	ldr	r3, [pc, #428]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800805a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800805c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008068:	4a67      	ldr	r2, [pc, #412]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800806a:	430b      	orrs	r3, r1
 800806c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	2100      	movs	r1, #0
 8008078:	62b9      	str	r1, [r7, #40]	@ 0x28
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008080:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008084:	460b      	mov	r3, r1
 8008086:	4313      	orrs	r3, r2
 8008088:	d011      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808e:	3308      	adds	r3, #8
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fa4a 	bl	800952c <RCCEx_PLL2_Config>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800809e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80080ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b6:	2100      	movs	r1, #0
 80080b8:	6239      	str	r1, [r7, #32]
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080c4:	460b      	mov	r3, r1
 80080c6:	4313      	orrs	r3, r2
 80080c8:	d011      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ce:	3308      	adds	r3, #8
 80080d0:	2101      	movs	r1, #1
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 fa2a 	bl	800952c <RCCEx_PLL2_Config>
 80080d8:	4603      	mov	r3, r0
 80080da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	2100      	movs	r1, #0
 80080f8:	61b9      	str	r1, [r7, #24]
 80080fa:	f003 0304 	and.w	r3, r3, #4
 80080fe:	61fb      	str	r3, [r7, #28]
 8008100:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008104:	460b      	mov	r3, r1
 8008106:	4313      	orrs	r3, r2
 8008108:	d011      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800810a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810e:	3308      	adds	r3, #8
 8008110:	2102      	movs	r1, #2
 8008112:	4618      	mov	r0, r3
 8008114:	f001 fa0a 	bl	800952c <RCCEx_PLL2_Config>
 8008118:	4603      	mov	r3, r0
 800811a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800811e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800812a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800812e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	2100      	movs	r1, #0
 8008138:	6139      	str	r1, [r7, #16]
 800813a:	f003 0308 	and.w	r3, r3, #8
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008144:	460b      	mov	r3, r1
 8008146:	4313      	orrs	r3, r2
 8008148:	d011      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800814a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814e:	3328      	adds	r3, #40	@ 0x28
 8008150:	2100      	movs	r1, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f001 fa9c 	bl	8009690 <RCCEx_PLL3_Config>
 8008158:	4603      	mov	r3, r0
 800815a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800815e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800816a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800816e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	2100      	movs	r1, #0
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	f003 0310 	and.w	r3, r3, #16
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008184:	460b      	mov	r3, r1
 8008186:	4313      	orrs	r3, r2
 8008188:	d011      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818e:	3328      	adds	r3, #40	@ 0x28
 8008190:	2101      	movs	r1, #1
 8008192:	4618      	mov	r0, r3
 8008194:	f001 fa7c 	bl	8009690 <RCCEx_PLL3_Config>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800819e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80081ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	2100      	movs	r1, #0
 80081b8:	6039      	str	r1, [r7, #0]
 80081ba:	f003 0320 	and.w	r3, r3, #32
 80081be:	607b      	str	r3, [r7, #4]
 80081c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081c4:	460b      	mov	r3, r1
 80081c6:	4313      	orrs	r3, r2
 80081c8:	d011      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ce:	3328      	adds	r3, #40	@ 0x28
 80081d0:	2102      	movs	r1, #2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 fa5c 	bl	8009690 <RCCEx_PLL3_Config>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80081ee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	e000      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008202:	46bd      	mov	sp, r7
 8008204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008208:	58024400 	.word	0x58024400

0800820c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b090      	sub	sp, #64	@ 0x40
 8008210:	af00      	add	r7, sp, #0
 8008212:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800821a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800821e:	430b      	orrs	r3, r1
 8008220:	f040 8094 	bne.w	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008224:	4b9e      	ldr	r3, [pc, #632]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008228:	f003 0307 	and.w	r3, r3, #7
 800822c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800822e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008230:	2b04      	cmp	r3, #4
 8008232:	f200 8087 	bhi.w	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008236:	a201      	add	r2, pc, #4	@ (adr r2, 800823c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	08008251 	.word	0x08008251
 8008240:	08008279 	.word	0x08008279
 8008244:	080082a1 	.word	0x080082a1
 8008248:	0800833d 	.word	0x0800833d
 800824c:	080082c9 	.word	0x080082c9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008250:	4b93      	ldr	r3, [pc, #588]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008258:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800825c:	d108      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800825e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008262:	4618      	mov	r0, r3
 8008264:	f001 f810 	bl	8009288 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800826c:	f000 bd45 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008274:	f000 bd41 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008278:	4b89      	ldr	r3, [pc, #548]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008280:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008284:	d108      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008286:	f107 0318 	add.w	r3, r7, #24
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fd54 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008294:	f000 bd31 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800829c:	f000 bd2d 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082a0:	4b7f      	ldr	r3, [pc, #508]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082ac:	d108      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ae:	f107 030c 	add.w	r3, r7, #12
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fe94 	bl	8008fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082bc:	f000 bd1d 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c4:	f000 bd19 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082c8:	4b75      	ldr	r3, [pc, #468]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082d0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082d2:	4b73      	ldr	r3, [pc, #460]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0304 	and.w	r3, r3, #4
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d10c      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80082de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d109      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082e4:	4b6e      	ldr	r3, [pc, #440]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	08db      	lsrs	r3, r3, #3
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	4a6d      	ldr	r2, [pc, #436]	@ (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082f0:	fa22 f303 	lsr.w	r3, r2, r3
 80082f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082f6:	e01f      	b.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082f8:	4b69      	ldr	r3, [pc, #420]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008304:	d106      	bne.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008308:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800830c:	d102      	bne.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800830e:	4b66      	ldr	r3, [pc, #408]	@ (80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008312:	e011      	b.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008314:	4b62      	ldr	r3, [pc, #392]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800831c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008320:	d106      	bne.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008328:	d102      	bne.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800832a:	4b60      	ldr	r3, [pc, #384]	@ (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800832c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800832e:	e003      	b.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008334:	f000 bce1 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008338:	f000 bcdf 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800833c:	4b5c      	ldr	r3, [pc, #368]	@ (80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800833e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008340:	f000 bcdb 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008344:	2300      	movs	r3, #0
 8008346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008348:	f000 bcd7 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800834c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008350:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008354:	430b      	orrs	r3, r1
 8008356:	f040 80ad 	bne.w	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800835a:	4b51      	ldr	r3, [pc, #324]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800835c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800835e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008362:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800836a:	d056      	beq.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008372:	f200 8090 	bhi.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	2bc0      	cmp	r3, #192	@ 0xc0
 800837a:	f000 8088 	beq.w	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800837e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008380:	2bc0      	cmp	r3, #192	@ 0xc0
 8008382:	f200 8088 	bhi.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	2b80      	cmp	r3, #128	@ 0x80
 800838a:	d032      	beq.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800838c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838e:	2b80      	cmp	r3, #128	@ 0x80
 8008390:	f200 8081 	bhi.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800839a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839c:	2b40      	cmp	r3, #64	@ 0x40
 800839e:	d014      	beq.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80083a0:	e079      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083a2:	4b3f      	ldr	r3, [pc, #252]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083ae:	d108      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 ff67 	bl	8009288 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083be:	f000 bc9c 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c6:	f000 bc98 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083ca:	4b35      	ldr	r3, [pc, #212]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083d6:	d108      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d8:	f107 0318 	add.w	r3, r7, #24
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fcab 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e6:	f000 bc88 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ee:	f000 bc84 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083f2:	4b2b      	ldr	r3, [pc, #172]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083fe:	d108      	bne.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008400:	f107 030c 	add.w	r3, r7, #12
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fdeb 	bl	8008fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800840e:	f000 bc74 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008416:	f000 bc70 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800841a:	4b21      	ldr	r3, [pc, #132]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800841c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800841e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008422:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008424:	4b1e      	ldr	r3, [pc, #120]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b04      	cmp	r3, #4
 800842e:	d10c      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008432:	2b00      	cmp	r3, #0
 8008434:	d109      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008436:	4b1a      	ldr	r3, [pc, #104]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	08db      	lsrs	r3, r3, #3
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	4a18      	ldr	r2, [pc, #96]	@ (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008442:	fa22 f303 	lsr.w	r3, r2, r3
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008448:	e01f      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800844a:	4b15      	ldr	r3, [pc, #84]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008456:	d106      	bne.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800845e:	d102      	bne.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008460:	4b11      	ldr	r3, [pc, #68]	@ (80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008464:	e011      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008466:	4b0e      	ldr	r3, [pc, #56]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800846e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008472:	d106      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800847a:	d102      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800847c:	4b0b      	ldr	r3, [pc, #44]	@ (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800847e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008480:	e003      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008486:	f000 bc38 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800848a:	f000 bc36 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800848e:	4b08      	ldr	r3, [pc, #32]	@ (80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008492:	f000 bc32 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800849a:	f000 bc2e 	b.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800849e:	bf00      	nop
 80084a0:	58024400 	.word	0x58024400
 80084a4:	03d09000 	.word	0x03d09000
 80084a8:	003d0900 	.word	0x003d0900
 80084ac:	017d7840 	.word	0x017d7840
 80084b0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80084b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80084bc:	430b      	orrs	r3, r1
 80084be:	f040 809c 	bne.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80084c2:	4b9e      	ldr	r3, [pc, #632]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084c6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80084ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084d2:	d054      	beq.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80084d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084da:	f200 808b 	bhi.w	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084e4:	f000 8083 	beq.w	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80084e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084ee:	f200 8081 	bhi.w	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084f8:	d02f      	beq.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80084fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008500:	d878      	bhi.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	2b00      	cmp	r3, #0
 8008506:	d004      	beq.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800850e:	d012      	beq.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008510:	e070      	b.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008512:	4b8a      	ldr	r3, [pc, #552]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800851a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800851e:	d107      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008524:	4618      	mov	r0, r3
 8008526:	f000 feaf 	bl	8009288 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800852a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800852e:	e3e4      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008530:	2300      	movs	r3, #0
 8008532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008534:	e3e1      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008536:	4b81      	ldr	r3, [pc, #516]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800853e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008542:	d107      	bne.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008544:	f107 0318 	add.w	r3, r7, #24
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fbf5 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008552:	e3d2      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008558:	e3cf      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800855a:	4b78      	ldr	r3, [pc, #480]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008566:	d107      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008568:	f107 030c 	add.w	r3, r7, #12
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fd37 	bl	8008fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008576:	e3c0      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800857c:	e3bd      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800857e:	4b6f      	ldr	r3, [pc, #444]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008582:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008586:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008588:	4b6c      	ldr	r3, [pc, #432]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b04      	cmp	r3, #4
 8008592:	d10c      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008596:	2b00      	cmp	r3, #0
 8008598:	d109      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800859a:	4b68      	ldr	r3, [pc, #416]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	08db      	lsrs	r3, r3, #3
 80085a0:	f003 0303 	and.w	r3, r3, #3
 80085a4:	4a66      	ldr	r2, [pc, #408]	@ (8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80085a6:	fa22 f303 	lsr.w	r3, r2, r3
 80085aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ac:	e01e      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085ae:	4b63      	ldr	r3, [pc, #396]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ba:	d106      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80085bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085c2:	d102      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085c4:	4b5f      	ldr	r3, [pc, #380]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80085c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c8:	e010      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085ca:	4b5c      	ldr	r3, [pc, #368]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085d6:	d106      	bne.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80085d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085de:	d102      	bne.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085e0:	4b59      	ldr	r3, [pc, #356]	@ (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80085e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085e4:	e002      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085ea:	e386      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085ec:	e385      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085ee:	4b57      	ldr	r3, [pc, #348]	@ (800874c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f2:	e382      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f8:	e37f      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80085fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085fe:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008602:	430b      	orrs	r3, r1
 8008604:	f040 80a7 	bne.w	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008608:	4b4c      	ldr	r3, [pc, #304]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800860a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800860c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008610:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008618:	d055      	beq.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008620:	f200 8096 	bhi.w	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800862a:	f000 8084 	beq.w	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800862e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008630:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008634:	f200 808c 	bhi.w	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800863e:	d030      	beq.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008642:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008646:	f200 8083 	bhi.w	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	2b00      	cmp	r3, #0
 800864e:	d004      	beq.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008652:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008656:	d012      	beq.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008658:	e07a      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800865a:	4b38      	ldr	r3, [pc, #224]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008662:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008666:	d107      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800866c:	4618      	mov	r0, r3
 800866e:	f000 fe0b 	bl	8009288 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008676:	e340      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800867c:	e33d      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800867e:	4b2f      	ldr	r3, [pc, #188]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008686:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800868a:	d107      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800868c:	f107 0318 	add.w	r3, r7, #24
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fb51 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800869a:	e32e      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086a0:	e32b      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086a2:	4b26      	ldr	r3, [pc, #152]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086ae:	d107      	bne.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086b0:	f107 030c 	add.w	r3, r7, #12
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fc93 	bl	8008fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086be:	e31c      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c4:	e319      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086c6:	4b1d      	ldr	r3, [pc, #116]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086d0:	4b1a      	ldr	r3, [pc, #104]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b04      	cmp	r3, #4
 80086da:	d10c      	bne.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80086dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086e2:	4b16      	ldr	r3, [pc, #88]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	08db      	lsrs	r3, r3, #3
 80086e8:	f003 0303 	and.w	r3, r3, #3
 80086ec:	4a14      	ldr	r2, [pc, #80]	@ (8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80086ee:	fa22 f303 	lsr.w	r3, r2, r3
 80086f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086f4:	e01e      	b.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086f6:	4b11      	ldr	r3, [pc, #68]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008702:	d106      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800870a:	d102      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800870c:	4b0d      	ldr	r3, [pc, #52]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008710:	e010      	b.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008712:	4b0a      	ldr	r3, [pc, #40]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800871a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800871e:	d106      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008726:	d102      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008728:	4b07      	ldr	r3, [pc, #28]	@ (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800872a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800872c:	e002      	b.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008732:	e2e2      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008734:	e2e1      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008736:	4b05      	ldr	r3, [pc, #20]	@ (800874c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800873a:	e2de      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800873c:	58024400 	.word	0x58024400
 8008740:	03d09000 	.word	0x03d09000
 8008744:	003d0900 	.word	0x003d0900
 8008748:	017d7840 	.word	0x017d7840
 800874c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008754:	e2d1      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800875a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800875e:	430b      	orrs	r3, r1
 8008760:	f040 809c 	bne.w	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008764:	4b93      	ldr	r3, [pc, #588]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008768:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800876c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800876e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008770:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008774:	d054      	beq.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008778:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800877c:	f200 808b 	bhi.w	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008782:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008786:	f000 8083 	beq.w	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800878a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008790:	f200 8081 	bhi.w	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800879a:	d02f      	beq.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087a2:	d878      	bhi.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80087a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d004      	beq.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80087aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087b0:	d012      	beq.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80087b2:	e070      	b.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087b4:	4b7f      	ldr	r3, [pc, #508]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087c0:	d107      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 fd5e 	bl	8009288 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d0:	e293      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d6:	e290      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087d8:	4b76      	ldr	r3, [pc, #472]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087e4:	d107      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087e6:	f107 0318 	add.w	r3, r7, #24
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 faa4 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f4:	e281      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087fa:	e27e      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087fc:	4b6d      	ldr	r3, [pc, #436]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008808:	d107      	bne.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800880a:	f107 030c 	add.w	r3, r7, #12
 800880e:	4618      	mov	r0, r3
 8008810:	f000 fbe6 	bl	8008fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008818:	e26f      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800881e:	e26c      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008820:	4b64      	ldr	r3, [pc, #400]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008824:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008828:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800882a:	4b62      	ldr	r3, [pc, #392]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0304 	and.w	r3, r3, #4
 8008832:	2b04      	cmp	r3, #4
 8008834:	d10c      	bne.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008838:	2b00      	cmp	r3, #0
 800883a:	d109      	bne.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800883c:	4b5d      	ldr	r3, [pc, #372]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	08db      	lsrs	r3, r3, #3
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	4a5c      	ldr	r2, [pc, #368]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008848:	fa22 f303 	lsr.w	r3, r2, r3
 800884c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800884e:	e01e      	b.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008850:	4b58      	ldr	r3, [pc, #352]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800885c:	d106      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800885e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008864:	d102      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008866:	4b55      	ldr	r3, [pc, #340]	@ (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008868:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800886a:	e010      	b.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800886c:	4b51      	ldr	r3, [pc, #324]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008878:	d106      	bne.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800887a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800887c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008880:	d102      	bne.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008882:	4b4f      	ldr	r3, [pc, #316]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008884:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008886:	e002      	b.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800888c:	e235      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800888e:	e234      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008890:	4b4c      	ldr	r3, [pc, #304]	@ (80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008894:	e231      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800889a:	e22e      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800889c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80088a4:	430b      	orrs	r3, r1
 80088a6:	f040 808f 	bne.w	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80088aa:	4b42      	ldr	r3, [pc, #264]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ae:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80088b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80088b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088ba:	d06b      	beq.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80088bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088c2:	d874      	bhi.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088ca:	d056      	beq.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80088cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088d2:	d86c      	bhi.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088da:	d03b      	beq.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80088dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088e2:	d864      	bhi.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088ea:	d021      	beq.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088f2:	d85c      	bhi.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d004      	beq.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80088fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008900:	d004      	beq.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008902:	e054      	b.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008904:	f7fe fa4c 	bl	8006da0 <HAL_RCC_GetPCLK1Freq>
 8008908:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800890a:	e1f6      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800890c:	4b29      	ldr	r3, [pc, #164]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008914:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008918:	d107      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800891a:	f107 0318 	add.w	r3, r7, #24
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fa0a 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008928:	e1e7      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800892e:	e1e4      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008930:	4b20      	ldr	r3, [pc, #128]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800893c:	d107      	bne.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800893e:	f107 030c 	add.w	r3, r7, #12
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fb4c 	bl	8008fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800894c:	e1d5      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008952:	e1d2      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008954:	4b17      	ldr	r3, [pc, #92]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b04      	cmp	r3, #4
 800895e:	d109      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008960:	4b14      	ldr	r3, [pc, #80]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	08db      	lsrs	r3, r3, #3
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	4a13      	ldr	r2, [pc, #76]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800896c:	fa22 f303 	lsr.w	r3, r2, r3
 8008970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008972:	e1c2      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008978:	e1bf      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800897a:	4b0e      	ldr	r3, [pc, #56]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008986:	d102      	bne.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008988:	4b0c      	ldr	r3, [pc, #48]	@ (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800898a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800898c:	e1b5      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800898e:	2300      	movs	r3, #0
 8008990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008992:	e1b2      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008994:	4b07      	ldr	r3, [pc, #28]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800899c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089a0:	d102      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80089a2:	4b07      	ldr	r3, [pc, #28]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80089a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089a6:	e1a8      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ac:	e1a5      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80089ae:	2300      	movs	r3, #0
 80089b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089b2:	e1a2      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089b4:	58024400 	.word	0x58024400
 80089b8:	03d09000 	.word	0x03d09000
 80089bc:	003d0900 	.word	0x003d0900
 80089c0:	017d7840 	.word	0x017d7840
 80089c4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80089c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089cc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80089d0:	430b      	orrs	r3, r1
 80089d2:	d173      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80089d4:	4b9c      	ldr	r3, [pc, #624]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80089dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089e4:	d02f      	beq.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80089e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089ec:	d863      	bhi.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80089ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d004      	beq.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80089f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089fa:	d012      	beq.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80089fc:	e05b      	b.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089fe:	4b92      	ldr	r3, [pc, #584]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a0a:	d107      	bne.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a0c:	f107 0318 	add.w	r3, r7, #24
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 f991 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a1a:	e16e      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a20:	e16b      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a22:	4b89      	ldr	r3, [pc, #548]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a2e:	d107      	bne.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a30:	f107 030c 	add.w	r3, r7, #12
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 fad3 	bl	8008fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a3e:	e15c      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a44:	e159      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a46:	4b80      	ldr	r3, [pc, #512]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a50:	4b7d      	ldr	r3, [pc, #500]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0304 	and.w	r3, r3, #4
 8008a58:	2b04      	cmp	r3, #4
 8008a5a:	d10c      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d109      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a62:	4b79      	ldr	r3, [pc, #484]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	08db      	lsrs	r3, r3, #3
 8008a68:	f003 0303 	and.w	r3, r3, #3
 8008a6c:	4a77      	ldr	r2, [pc, #476]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a74:	e01e      	b.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a76:	4b74      	ldr	r3, [pc, #464]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a82:	d106      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a8a:	d102      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a8c:	4b70      	ldr	r3, [pc, #448]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a90:	e010      	b.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a92:	4b6d      	ldr	r3, [pc, #436]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a9e:	d106      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aa6:	d102      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aac:	e002      	b.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ab2:	e122      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ab4:	e121      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aba:	e11e      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008ac4:	430b      	orrs	r3, r1
 8008ac6:	d133      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008ac8:	4b5f      	ldr	r3, [pc, #380]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ad0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d004      	beq.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ade:	d012      	beq.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008ae0:	e023      	b.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ae2:	4b59      	ldr	r3, [pc, #356]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008aee:	d107      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fbc7 	bl	8009288 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008afe:	e0fc      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b04:	e0f9      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b06:	4b50      	ldr	r3, [pc, #320]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b12:	d107      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b14:	f107 0318 	add.w	r3, r7, #24
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 f90d 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b22:	e0ea      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b28:	e0e7      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b2e:	e0e4      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b34:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	f040 808d 	bne.w	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008b3e:	4b42      	ldr	r3, [pc, #264]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b42:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008b46:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b4e:	d06b      	beq.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b56:	d874      	bhi.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b5e:	d056      	beq.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b66:	d86c      	bhi.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b6e:	d03b      	beq.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b76:	d864      	bhi.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b7e:	d021      	beq.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b86:	d85c      	bhi.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b94:	d004      	beq.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008b96:	e054      	b.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b98:	f000 f8b8 	bl	8008d0c <HAL_RCCEx_GetD3PCLK1Freq>
 8008b9c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b9e:	e0ac      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ba0:	4b29      	ldr	r3, [pc, #164]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ba8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bac:	d107      	bne.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bae:	f107 0318 	add.w	r3, r7, #24
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 f8c0 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bbc:	e09d      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bc2:	e09a      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bc4:	4b20      	ldr	r3, [pc, #128]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bd0:	d107      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bd2:	f107 030c 	add.w	r3, r7, #12
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 fa02 	bl	8008fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be0:	e08b      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be6:	e088      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008be8:	4b17      	ldr	r3, [pc, #92]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	d109      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bf4:	4b14      	ldr	r3, [pc, #80]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	08db      	lsrs	r3, r3, #3
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	4a13      	ldr	r2, [pc, #76]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008c00:	fa22 f303 	lsr.w	r3, r2, r3
 8008c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c06:	e078      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0c:	e075      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c1a:	d102      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c20:	e06b      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c26:	e068      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c28:	4b07      	ldr	r3, [pc, #28]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c34:	d102      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008c36:	4b07      	ldr	r3, [pc, #28]	@ (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c3a:	e05e      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c40:	e05b      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c46:	e058      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	03d09000 	.word	0x03d09000
 8008c50:	003d0900 	.word	0x003d0900
 8008c54:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c5c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008c60:	430b      	orrs	r3, r1
 8008c62:	d148      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008c64:	4b27      	ldr	r3, [pc, #156]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c6c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c74:	d02a      	beq.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c7c:	d838      	bhi.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d004      	beq.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c8a:	d00d      	beq.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008c8c:	e030      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c9a:	d102      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ca0:	e02b      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca6:	e028      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ca8:	4b16      	ldr	r3, [pc, #88]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cb4:	d107      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 fae4 	bl	8009288 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cc4:	e019      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cca:	e016      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cd8:	d107      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cda:	f107 0318 	add.w	r3, r7, #24
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f82a 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ce8:	e007      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cee:	e004      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf4:	e001      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3740      	adds	r7, #64	@ 0x40
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	58024400 	.word	0x58024400
 8008d08:	017d7840 	.word	0x017d7840

08008d0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008d10:	f7fe f816 	bl	8006d40 <HAL_RCC_GetHCLKFreq>
 8008d14:	4602      	mov	r2, r0
 8008d16:	4b06      	ldr	r3, [pc, #24]	@ (8008d30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	091b      	lsrs	r3, r3, #4
 8008d1c:	f003 0307 	and.w	r3, r3, #7
 8008d20:	4904      	ldr	r1, [pc, #16]	@ (8008d34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008d22:	5ccb      	ldrb	r3, [r1, r3]
 8008d24:	f003 031f 	and.w	r3, r3, #31
 8008d28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	58024400 	.word	0x58024400
 8008d34:	0800c934 	.word	0x0800c934

08008d38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b089      	sub	sp, #36	@ 0x24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d40:	4ba1      	ldr	r3, [pc, #644]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d44:	f003 0303 	and.w	r3, r3, #3
 8008d48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008d4a:	4b9f      	ldr	r3, [pc, #636]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d4e:	0b1b      	lsrs	r3, r3, #12
 8008d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d56:	4b9c      	ldr	r3, [pc, #624]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5a:	091b      	lsrs	r3, r3, #4
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008d62:	4b99      	ldr	r3, [pc, #612]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d66:	08db      	lsrs	r3, r3, #3
 8008d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	fb02 f303 	mul.w	r3, r2, r3
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 8111 	beq.w	8008fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	f000 8083 	beq.w	8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	f200 80a1 	bhi.w	8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d056      	beq.n	8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008da2:	e099      	b.n	8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008da4:	4b88      	ldr	r3, [pc, #544]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d02d      	beq.n	8008e0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008db0:	4b85      	ldr	r3, [pc, #532]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	08db      	lsrs	r3, r3, #3
 8008db6:	f003 0303 	and.w	r3, r3, #3
 8008dba:	4a84      	ldr	r2, [pc, #528]	@ (8008fcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	ee07 3a90 	vmov	s15, r3
 8008dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	ee07 3a90 	vmov	s15, r3
 8008dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dda:	4b7b      	ldr	r3, [pc, #492]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e0a:	e087      	b.n	8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e4e:	e065      	b.n	8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e62:	4b59      	ldr	r3, [pc, #356]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e92:	e043      	b.n	8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea6:	4b48      	ldr	r3, [pc, #288]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eae:	ee07 3a90 	vmov	s15, r3
 8008eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ed6:	e021      	b.n	8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eea:	4b37      	ldr	r3, [pc, #220]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef2:	ee07 3a90 	vmov	s15, r3
 8008ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008efe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f20:	0a5b      	lsrs	r3, r3, #9
 8008f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f26:	ee07 3a90 	vmov	s15, r3
 8008f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f42:	ee17 2a90 	vmov	r2, s15
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4e:	0c1b      	lsrs	r3, r3, #16
 8008f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f54:	ee07 3a90 	vmov	s15, r3
 8008f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f70:	ee17 2a90 	vmov	r2, s15
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008f78:	4b13      	ldr	r3, [pc, #76]	@ (8008fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f7c:	0e1b      	lsrs	r3, r3, #24
 8008f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f82:	ee07 3a90 	vmov	s15, r3
 8008f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f9e:	ee17 2a90 	vmov	r2, s15
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008fa6:	e008      	b.n	8008fba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	609a      	str	r2, [r3, #8]
}
 8008fba:	bf00      	nop
 8008fbc:	3724      	adds	r7, #36	@ 0x24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	58024400 	.word	0x58024400
 8008fcc:	03d09000 	.word	0x03d09000
 8008fd0:	46000000 	.word	0x46000000
 8008fd4:	4c742400 	.word	0x4c742400
 8008fd8:	4a742400 	.word	0x4a742400
 8008fdc:	4bbebc20 	.word	0x4bbebc20

08008fe0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b089      	sub	sp, #36	@ 0x24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fe8:	4ba1      	ldr	r3, [pc, #644]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fec:	f003 0303 	and.w	r3, r3, #3
 8008ff0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008ff2:	4b9f      	ldr	r3, [pc, #636]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff6:	0d1b      	lsrs	r3, r3, #20
 8008ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ffc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ffe:	4b9c      	ldr	r3, [pc, #624]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009002:	0a1b      	lsrs	r3, r3, #8
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800900a:	4b99      	ldr	r3, [pc, #612]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800900c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800900e:	08db      	lsrs	r3, r3, #3
 8009010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	fb02 f303 	mul.w	r3, r2, r3
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009022:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 8111 	beq.w	8009250 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	2b02      	cmp	r3, #2
 8009032:	f000 8083 	beq.w	800913c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	2b02      	cmp	r3, #2
 800903a:	f200 80a1 	bhi.w	8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d003      	beq.n	800904c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d056      	beq.n	80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800904a:	e099      	b.n	8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800904c:	4b88      	ldr	r3, [pc, #544]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0320 	and.w	r3, r3, #32
 8009054:	2b00      	cmp	r3, #0
 8009056:	d02d      	beq.n	80090b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009058:	4b85      	ldr	r3, [pc, #532]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	08db      	lsrs	r3, r3, #3
 800905e:	f003 0303 	and.w	r3, r3, #3
 8009062:	4a84      	ldr	r2, [pc, #528]	@ (8009274 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009064:	fa22 f303 	lsr.w	r3, r2, r3
 8009068:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	ee07 3a90 	vmov	s15, r3
 8009070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009082:	4b7b      	ldr	r3, [pc, #492]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009092:	ed97 6a03 	vldr	s12, [r7, #12]
 8009096:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800909a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80090b2:	e087      	b.n	80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800927c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80090c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c6:	4b6a      	ldr	r3, [pc, #424]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090f6:	e065      	b.n	80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009102:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910a:	4b59      	ldr	r3, [pc, #356]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800910c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800910e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911a:	ed97 6a03 	vldr	s12, [r7, #12]
 800911e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800912e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800913a:	e043      	b.n	80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009146:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800914a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914e:	4b48      	ldr	r3, [pc, #288]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009162:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800917e:	e021      	b.n	80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800918e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009192:	4b37      	ldr	r3, [pc, #220]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80091c4:	4b2a      	ldr	r3, [pc, #168]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c8:	0a5b      	lsrs	r3, r3, #9
 80091ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ce:	ee07 3a90 	vmov	s15, r3
 80091d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091de:	edd7 6a07 	vldr	s13, [r7, #28]
 80091e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ea:	ee17 2a90 	vmov	r2, s15
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80091f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f6:	0c1b      	lsrs	r3, r3, #16
 80091f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091fc:	ee07 3a90 	vmov	s15, r3
 8009200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009204:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800920c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009218:	ee17 2a90 	vmov	r2, s15
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009220:	4b13      	ldr	r3, [pc, #76]	@ (8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009224:	0e1b      	lsrs	r3, r3, #24
 8009226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800922a:	ee07 3a90 	vmov	s15, r3
 800922e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800923a:	edd7 6a07 	vldr	s13, [r7, #28]
 800923e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009246:	ee17 2a90 	vmov	r2, s15
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800924e:	e008      	b.n	8009262 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	609a      	str	r2, [r3, #8]
}
 8009262:	bf00      	nop
 8009264:	3724      	adds	r7, #36	@ 0x24
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	58024400 	.word	0x58024400
 8009274:	03d09000 	.word	0x03d09000
 8009278:	46000000 	.word	0x46000000
 800927c:	4c742400 	.word	0x4c742400
 8009280:	4a742400 	.word	0x4a742400
 8009284:	4bbebc20 	.word	0x4bbebc20

08009288 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009288:	b480      	push	{r7}
 800928a:	b089      	sub	sp, #36	@ 0x24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009290:	4ba0      	ldr	r3, [pc, #640]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009294:	f003 0303 	and.w	r3, r3, #3
 8009298:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800929a:	4b9e      	ldr	r3, [pc, #632]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800929c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929e:	091b      	lsrs	r3, r3, #4
 80092a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092a4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80092a6:	4b9b      	ldr	r3, [pc, #620]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80092b0:	4b98      	ldr	r3, [pc, #608]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092b4:	08db      	lsrs	r3, r3, #3
 80092b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	fb02 f303 	mul.w	r3, r2, r3
 80092c0:	ee07 3a90 	vmov	s15, r3
 80092c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 8111 	beq.w	80094f6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	f000 8083 	beq.w	80093e2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	f200 80a1 	bhi.w	8009426 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d056      	beq.n	800939e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80092f0:	e099      	b.n	8009426 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092f2:	4b88      	ldr	r3, [pc, #544]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0320 	and.w	r3, r3, #32
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d02d      	beq.n	800935a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092fe:	4b85      	ldr	r3, [pc, #532]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	08db      	lsrs	r3, r3, #3
 8009304:	f003 0303 	and.w	r3, r3, #3
 8009308:	4a83      	ldr	r2, [pc, #524]	@ (8009518 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800930a:	fa22 f303 	lsr.w	r3, r2, r3
 800930e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	ee07 3a90 	vmov	s15, r3
 8009316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	ee07 3a90 	vmov	s15, r3
 8009320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009328:	4b7a      	ldr	r3, [pc, #488]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800932a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800932c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009330:	ee07 3a90 	vmov	s15, r3
 8009334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009338:	ed97 6a03 	vldr	s12, [r7, #12]
 800933c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800951c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009340:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009348:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800934c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009354:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009358:	e087      	b.n	800946a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	ee07 3a90 	vmov	s15, r3
 8009360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009364:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009520 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800936c:	4b69      	ldr	r3, [pc, #420]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800936e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009374:	ee07 3a90 	vmov	s15, r3
 8009378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800937c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009380:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800951c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009384:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800938c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009390:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009398:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800939c:	e065      	b.n	800946a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009524 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80093ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b0:	4b58      	ldr	r3, [pc, #352]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b8:	ee07 3a90 	vmov	s15, r3
 80093bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800951c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093e0:	e043      	b.n	800946a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	ee07 3a90 	vmov	s15, r3
 80093e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ec:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009528 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80093f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f4:	4b47      	ldr	r3, [pc, #284]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009404:	ed97 6a03 	vldr	s12, [r7, #12]
 8009408:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800951c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800940c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009414:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009420:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009424:	e021      	b.n	800946a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009430:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009520 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009438:	4b36      	ldr	r3, [pc, #216]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800943a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800943c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009440:	ee07 3a90 	vmov	s15, r3
 8009444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009448:	ed97 6a03 	vldr	s12, [r7, #12]
 800944c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800951c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009450:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009454:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009458:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800945c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009464:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009468:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800946a:	4b2a      	ldr	r3, [pc, #168]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800946c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800946e:	0a5b      	lsrs	r3, r3, #9
 8009470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009474:	ee07 3a90 	vmov	s15, r3
 8009478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009480:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009484:	edd7 6a07 	vldr	s13, [r7, #28]
 8009488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800948c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009490:	ee17 2a90 	vmov	r2, s15
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009498:	4b1e      	ldr	r3, [pc, #120]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800949a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800949c:	0c1b      	lsrs	r3, r3, #16
 800949e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094be:	ee17 2a90 	vmov	r2, s15
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80094c6:	4b13      	ldr	r3, [pc, #76]	@ (8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ca:	0e1b      	lsrs	r3, r3, #24
 80094cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094d0:	ee07 3a90 	vmov	s15, r3
 80094d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ec:	ee17 2a90 	vmov	r2, s15
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80094f4:	e008      	b.n	8009508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	609a      	str	r2, [r3, #8]
}
 8009508:	bf00      	nop
 800950a:	3724      	adds	r7, #36	@ 0x24
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	58024400 	.word	0x58024400
 8009518:	03d09000 	.word	0x03d09000
 800951c:	46000000 	.word	0x46000000
 8009520:	4c742400 	.word	0x4c742400
 8009524:	4a742400 	.word	0x4a742400
 8009528:	4bbebc20 	.word	0x4bbebc20

0800952c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800953a:	4b53      	ldr	r3, [pc, #332]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 800953c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953e:	f003 0303 	and.w	r3, r3, #3
 8009542:	2b03      	cmp	r3, #3
 8009544:	d101      	bne.n	800954a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e099      	b.n	800967e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800954a:	4b4f      	ldr	r3, [pc, #316]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a4e      	ldr	r2, [pc, #312]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 8009550:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009556:	f7f7 ff7b 	bl	8001450 <HAL_GetTick>
 800955a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800955c:	e008      	b.n	8009570 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800955e:	f7f7 ff77 	bl	8001450 <HAL_GetTick>
 8009562:	4602      	mov	r2, r0
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	2b02      	cmp	r3, #2
 800956a:	d901      	bls.n	8009570 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e086      	b.n	800967e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009570:	4b45      	ldr	r3, [pc, #276]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1f0      	bne.n	800955e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800957c:	4b42      	ldr	r3, [pc, #264]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 800957e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009580:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	031b      	lsls	r3, r3, #12
 800958a:	493f      	ldr	r1, [pc, #252]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 800958c:	4313      	orrs	r3, r2
 800958e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	3b01      	subs	r3, #1
 8009596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	3b01      	subs	r3, #1
 80095a0:	025b      	lsls	r3, r3, #9
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	431a      	orrs	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	041b      	lsls	r3, r3, #16
 80095ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095b2:	431a      	orrs	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	061b      	lsls	r3, r3, #24
 80095bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80095c0:	4931      	ldr	r1, [pc, #196]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80095c6:	4b30      	ldr	r3, [pc, #192]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 80095c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	492d      	ldr	r1, [pc, #180]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80095d8:	4b2b      	ldr	r3, [pc, #172]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 80095da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095dc:	f023 0220 	bic.w	r2, r3, #32
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	4928      	ldr	r1, [pc, #160]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 80095e6:	4313      	orrs	r3, r2
 80095e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095ea:	4b27      	ldr	r3, [pc, #156]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 80095ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ee:	4a26      	ldr	r2, [pc, #152]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 80095f0:	f023 0310 	bic.w	r3, r3, #16
 80095f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095f6:	4b24      	ldr	r3, [pc, #144]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 80095f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095fa:	4b24      	ldr	r3, [pc, #144]	@ (800968c <RCCEx_PLL2_Config+0x160>)
 80095fc:	4013      	ands	r3, r2
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	69d2      	ldr	r2, [r2, #28]
 8009602:	00d2      	lsls	r2, r2, #3
 8009604:	4920      	ldr	r1, [pc, #128]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 8009606:	4313      	orrs	r3, r2
 8009608:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800960a:	4b1f      	ldr	r3, [pc, #124]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 800960c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960e:	4a1e      	ldr	r2, [pc, #120]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 8009610:	f043 0310 	orr.w	r3, r3, #16
 8009614:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d106      	bne.n	800962a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800961c:	4b1a      	ldr	r3, [pc, #104]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 800961e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009620:	4a19      	ldr	r2, [pc, #100]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 8009622:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009626:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009628:	e00f      	b.n	800964a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d106      	bne.n	800963e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009630:	4b15      	ldr	r3, [pc, #84]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 8009632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009634:	4a14      	ldr	r2, [pc, #80]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 8009636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800963a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800963c:	e005      	b.n	800964a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800963e:	4b12      	ldr	r3, [pc, #72]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 8009640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009642:	4a11      	ldr	r2, [pc, #68]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 8009644:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009648:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800964a:	4b0f      	ldr	r3, [pc, #60]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a0e      	ldr	r2, [pc, #56]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 8009650:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009656:	f7f7 fefb 	bl	8001450 <HAL_GetTick>
 800965a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800965c:	e008      	b.n	8009670 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800965e:	f7f7 fef7 	bl	8001450 <HAL_GetTick>
 8009662:	4602      	mov	r2, r0
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	2b02      	cmp	r3, #2
 800966a:	d901      	bls.n	8009670 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	e006      	b.n	800967e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009670:	4b05      	ldr	r3, [pc, #20]	@ (8009688 <RCCEx_PLL2_Config+0x15c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d0f0      	beq.n	800965e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800967c:	7bfb      	ldrb	r3, [r7, #15]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	58024400 	.word	0x58024400
 800968c:	ffff0007 	.word	0xffff0007

08009690 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800969e:	4b53      	ldr	r3, [pc, #332]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 80096a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a2:	f003 0303 	and.w	r3, r3, #3
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d101      	bne.n	80096ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e099      	b.n	80097e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80096ae:	4b4f      	ldr	r3, [pc, #316]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a4e      	ldr	r2, [pc, #312]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 80096b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096ba:	f7f7 fec9 	bl	8001450 <HAL_GetTick>
 80096be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096c0:	e008      	b.n	80096d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096c2:	f7f7 fec5 	bl	8001450 <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d901      	bls.n	80096d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e086      	b.n	80097e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096d4:	4b45      	ldr	r3, [pc, #276]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1f0      	bne.n	80096c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80096e0:	4b42      	ldr	r3, [pc, #264]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 80096e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	051b      	lsls	r3, r3, #20
 80096ee:	493f      	ldr	r1, [pc, #252]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	3b01      	subs	r3, #1
 8009704:	025b      	lsls	r3, r3, #9
 8009706:	b29b      	uxth	r3, r3
 8009708:	431a      	orrs	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	3b01      	subs	r3, #1
 8009710:	041b      	lsls	r3, r3, #16
 8009712:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009716:	431a      	orrs	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	3b01      	subs	r3, #1
 800971e:	061b      	lsls	r3, r3, #24
 8009720:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009724:	4931      	ldr	r1, [pc, #196]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 8009726:	4313      	orrs	r3, r2
 8009728:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800972a:	4b30      	ldr	r3, [pc, #192]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 800972c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800972e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	492d      	ldr	r1, [pc, #180]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 8009738:	4313      	orrs	r3, r2
 800973a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800973c:	4b2b      	ldr	r3, [pc, #172]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 800973e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009740:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	4928      	ldr	r1, [pc, #160]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 800974a:	4313      	orrs	r3, r2
 800974c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800974e:	4b27      	ldr	r3, [pc, #156]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 8009750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009752:	4a26      	ldr	r2, [pc, #152]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 8009754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009758:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800975a:	4b24      	ldr	r3, [pc, #144]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 800975c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800975e:	4b24      	ldr	r3, [pc, #144]	@ (80097f0 <RCCEx_PLL3_Config+0x160>)
 8009760:	4013      	ands	r3, r2
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	69d2      	ldr	r2, [r2, #28]
 8009766:	00d2      	lsls	r2, r2, #3
 8009768:	4920      	ldr	r1, [pc, #128]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 800976a:	4313      	orrs	r3, r2
 800976c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800976e:	4b1f      	ldr	r3, [pc, #124]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 8009770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009772:	4a1e      	ldr	r2, [pc, #120]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 8009774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009778:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d106      	bne.n	800978e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009780:	4b1a      	ldr	r3, [pc, #104]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 8009782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009784:	4a19      	ldr	r2, [pc, #100]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 8009786:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800978a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800978c:	e00f      	b.n	80097ae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d106      	bne.n	80097a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009794:	4b15      	ldr	r3, [pc, #84]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 8009796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009798:	4a14      	ldr	r2, [pc, #80]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 800979a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800979e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097a0:	e005      	b.n	80097ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80097a2:	4b12      	ldr	r3, [pc, #72]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 80097a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a6:	4a11      	ldr	r2, [pc, #68]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 80097a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80097ae:	4b0f      	ldr	r3, [pc, #60]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a0e      	ldr	r2, [pc, #56]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 80097b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097ba:	f7f7 fe49 	bl	8001450 <HAL_GetTick>
 80097be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097c0:	e008      	b.n	80097d4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80097c2:	f7f7 fe45 	bl	8001450 <HAL_GetTick>
 80097c6:	4602      	mov	r2, r0
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d901      	bls.n	80097d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e006      	b.n	80097e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097d4:	4b05      	ldr	r3, [pc, #20]	@ (80097ec <RCCEx_PLL3_Config+0x15c>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d0f0      	beq.n	80097c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	58024400 	.word	0x58024400
 80097f0:	ffff0007 	.word	0xffff0007

080097f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d101      	bne.n	8009806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e042      	b.n	800988c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800980c:	2b00      	cmp	r3, #0
 800980e:	d106      	bne.n	800981e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7f7 fc87 	bl	800112c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2224      	movs	r2, #36	@ 0x24
 8009822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 0201 	bic.w	r2, r2, #1
 8009834:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 fa14 	bl	800ac6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fca9 	bl	800a19c <UART_SetConfig>
 800984a:	4603      	mov	r3, r0
 800984c:	2b01      	cmp	r3, #1
 800984e:	d101      	bne.n	8009854 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e01b      	b.n	800988c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689a      	ldr	r2, [r3, #8]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f042 0201 	orr.w	r2, r2, #1
 8009882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f001 fa93 	bl	800adb0 <UART_CheckIdleState>
 800988a:	4603      	mov	r3, r0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08a      	sub	sp, #40	@ 0x28
 8009898:	af02      	add	r7, sp, #8
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	4613      	mov	r3, r2
 80098a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098aa:	2b20      	cmp	r3, #32
 80098ac:	d17b      	bne.n	80099a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d002      	beq.n	80098ba <HAL_UART_Transmit+0x26>
 80098b4:	88fb      	ldrh	r3, [r7, #6]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e074      	b.n	80099a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2221      	movs	r2, #33	@ 0x21
 80098ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098ce:	f7f7 fdbf 	bl	8001450 <HAL_GetTick>
 80098d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	88fa      	ldrh	r2, [r7, #6]
 80098d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	88fa      	ldrh	r2, [r7, #6]
 80098e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ec:	d108      	bne.n	8009900 <HAL_UART_Transmit+0x6c>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d104      	bne.n	8009900 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80098f6:	2300      	movs	r3, #0
 80098f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	61bb      	str	r3, [r7, #24]
 80098fe:	e003      	b.n	8009908 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009904:	2300      	movs	r3, #0
 8009906:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009908:	e030      	b.n	800996c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2200      	movs	r2, #0
 8009912:	2180      	movs	r1, #128	@ 0x80
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f001 faf5 	bl	800af04 <UART_WaitOnFlagUntilTimeout>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d005      	beq.n	800992c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2220      	movs	r2, #32
 8009924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e03d      	b.n	80099a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10b      	bne.n	800994a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009940:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	3302      	adds	r3, #2
 8009946:	61bb      	str	r3, [r7, #24]
 8009948:	e007      	b.n	800995a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	781a      	ldrb	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	3301      	adds	r3, #1
 8009958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009960:	b29b      	uxth	r3, r3
 8009962:	3b01      	subs	r3, #1
 8009964:	b29a      	uxth	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009972:	b29b      	uxth	r3, r3
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1c8      	bne.n	800990a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2200      	movs	r2, #0
 8009980:	2140      	movs	r1, #64	@ 0x40
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f001 fabe 	bl	800af04 <UART_WaitOnFlagUntilTimeout>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d005      	beq.n	800999a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2220      	movs	r2, #32
 8009992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e006      	b.n	80099a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2220      	movs	r2, #32
 800999e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	e000      	b.n	80099a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80099a6:	2302      	movs	r3, #2
  }
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3720      	adds	r7, #32
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b0ba      	sub	sp, #232	@ 0xe8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80099d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80099da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80099de:	4013      	ands	r3, r2
 80099e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80099e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d11b      	bne.n	8009a24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099f0:	f003 0320 	and.w	r3, r3, #32
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d015      	beq.n	8009a24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099fc:	f003 0320 	and.w	r3, r3, #32
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d105      	bne.n	8009a10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d009      	beq.n	8009a24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 8393 	beq.w	800a140 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	4798      	blx	r3
      }
      return;
 8009a22:	e38d      	b.n	800a140 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 8123 	beq.w	8009c74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009a32:	4b8d      	ldr	r3, [pc, #564]	@ (8009c68 <HAL_UART_IRQHandler+0x2b8>)
 8009a34:	4013      	ands	r3, r2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d106      	bne.n	8009a48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009a3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8009c6c <HAL_UART_IRQHandler+0x2bc>)
 8009a40:	4013      	ands	r3, r2
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 8116 	beq.w	8009c74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d011      	beq.n	8009a78 <HAL_UART_IRQHandler+0xc8>
 8009a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00b      	beq.n	8009a78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2201      	movs	r2, #1
 8009a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a6e:	f043 0201 	orr.w	r2, r3, #1
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a7c:	f003 0302 	and.w	r3, r3, #2
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d011      	beq.n	8009aa8 <HAL_UART_IRQHandler+0xf8>
 8009a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00b      	beq.n	8009aa8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2202      	movs	r2, #2
 8009a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a9e:	f043 0204 	orr.w	r2, r3, #4
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d011      	beq.n	8009ad8 <HAL_UART_IRQHandler+0x128>
 8009ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00b      	beq.n	8009ad8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2204      	movs	r2, #4
 8009ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ace:	f043 0202 	orr.w	r2, r3, #2
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009adc:	f003 0308 	and.w	r3, r3, #8
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d017      	beq.n	8009b14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ae8:	f003 0320 	and.w	r3, r3, #32
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d105      	bne.n	8009afc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009af0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009af4:	4b5c      	ldr	r3, [pc, #368]	@ (8009c68 <HAL_UART_IRQHandler+0x2b8>)
 8009af6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00b      	beq.n	8009b14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2208      	movs	r2, #8
 8009b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b0a:	f043 0208 	orr.w	r2, r3, #8
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d012      	beq.n	8009b46 <HAL_UART_IRQHandler+0x196>
 8009b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00c      	beq.n	8009b46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b3c:	f043 0220 	orr.w	r2, r3, #32
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f000 82f9 	beq.w	800a144 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d013      	beq.n	8009b86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b62:	f003 0320 	and.w	r3, r3, #32
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d105      	bne.n	8009b76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d007      	beq.n	8009b86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b9a:	2b40      	cmp	r3, #64	@ 0x40
 8009b9c:	d005      	beq.n	8009baa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009ba2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d054      	beq.n	8009c54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f001 fa18 	bl	800afe0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bba:	2b40      	cmp	r3, #64	@ 0x40
 8009bbc:	d146      	bne.n	8009c4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bcc:	e853 3f00 	ldrex	r3, [r3]
 8009bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3308      	adds	r3, #8
 8009be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009bea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009bee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1d9      	bne.n	8009bbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d017      	beq.n	8009c44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c1a:	4a15      	ldr	r2, [pc, #84]	@ (8009c70 <HAL_UART_IRQHandler+0x2c0>)
 8009c1c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7f9 f8b9 	bl	8002d9c <HAL_DMA_Abort_IT>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d019      	beq.n	8009c64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009c3e:	4610      	mov	r0, r2
 8009c40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c42:	e00f      	b.n	8009c64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fa93 	bl	800a170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c4a:	e00b      	b.n	8009c64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fa8f 	bl	800a170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c52:	e007      	b.n	8009c64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fa8b 	bl	800a170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009c62:	e26f      	b.n	800a144 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c64:	bf00      	nop
    return;
 8009c66:	e26d      	b.n	800a144 <HAL_UART_IRQHandler+0x794>
 8009c68:	10000001 	.word	0x10000001
 8009c6c:	04000120 	.word	0x04000120
 8009c70:	0800b0ad 	.word	0x0800b0ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	f040 8203 	bne.w	800a084 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c82:	f003 0310 	and.w	r3, r3, #16
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 81fc 	beq.w	800a084 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c90:	f003 0310 	and.w	r3, r3, #16
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 81f5 	beq.w	800a084 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2210      	movs	r2, #16
 8009ca0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cac:	2b40      	cmp	r3, #64	@ 0x40
 8009cae:	f040 816d 	bne.w	8009f8c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4aa4      	ldr	r2, [pc, #656]	@ (8009f4c <HAL_UART_IRQHandler+0x59c>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d068      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4aa1      	ldr	r2, [pc, #644]	@ (8009f50 <HAL_UART_IRQHandler+0x5a0>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d061      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a9f      	ldr	r2, [pc, #636]	@ (8009f54 <HAL_UART_IRQHandler+0x5a4>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d05a      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a9c      	ldr	r2, [pc, #624]	@ (8009f58 <HAL_UART_IRQHandler+0x5a8>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d053      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a9a      	ldr	r2, [pc, #616]	@ (8009f5c <HAL_UART_IRQHandler+0x5ac>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d04c      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a97      	ldr	r2, [pc, #604]	@ (8009f60 <HAL_UART_IRQHandler+0x5b0>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d045      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a95      	ldr	r2, [pc, #596]	@ (8009f64 <HAL_UART_IRQHandler+0x5b4>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d03e      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a92      	ldr	r2, [pc, #584]	@ (8009f68 <HAL_UART_IRQHandler+0x5b8>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d037      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a90      	ldr	r2, [pc, #576]	@ (8009f6c <HAL_UART_IRQHandler+0x5bc>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d030      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a8d      	ldr	r2, [pc, #564]	@ (8009f70 <HAL_UART_IRQHandler+0x5c0>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d029      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a8b      	ldr	r2, [pc, #556]	@ (8009f74 <HAL_UART_IRQHandler+0x5c4>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d022      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a88      	ldr	r2, [pc, #544]	@ (8009f78 <HAL_UART_IRQHandler+0x5c8>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d01b      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a86      	ldr	r2, [pc, #536]	@ (8009f7c <HAL_UART_IRQHandler+0x5cc>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d014      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a83      	ldr	r2, [pc, #524]	@ (8009f80 <HAL_UART_IRQHandler+0x5d0>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d00d      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a81      	ldr	r2, [pc, #516]	@ (8009f84 <HAL_UART_IRQHandler+0x5d4>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d006      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3e2>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a7e      	ldr	r2, [pc, #504]	@ (8009f88 <HAL_UART_IRQHandler+0x5d8>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d106      	bne.n	8009da0 <HAL_UART_IRQHandler+0x3f0>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	e005      	b.n	8009dac <HAL_UART_IRQHandler+0x3fc>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009db0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 80ad 	beq.w	8009f14 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009dc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	f080 80a5 	bcs.w	8009f14 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009dd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dda:	69db      	ldr	r3, [r3, #28]
 8009ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009de0:	f000 8087 	beq.w	8009ef2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009df0:	e853 3f00 	ldrex	r3, [r3]
 8009df4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e12:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1da      	bne.n	8009de4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3308      	adds	r3, #8
 8009e34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e38:	e853 3f00 	ldrex	r3, [r3]
 8009e3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e40:	f023 0301 	bic.w	r3, r3, #1
 8009e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1e1      	bne.n	8009e2e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3308      	adds	r3, #8
 8009e70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e74:	e853 3f00 	ldrex	r3, [r3]
 8009e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	3308      	adds	r3, #8
 8009e8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e96:	e841 2300 	strex	r3, r2, [r1]
 8009e9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e3      	bne.n	8009e6a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eb8:	e853 3f00 	ldrex	r3, [r3]
 8009ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ec0:	f023 0310 	bic.w	r3, r3, #16
 8009ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ed2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ed4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ed8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1e4      	bne.n	8009eb0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7f8 fc37 	bl	8002760 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f939 	bl	800a184 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009f12:	e119      	b.n	800a148 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	f040 8112 	bne.w	800a148 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f30:	f040 810a 	bne.w	800a148 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2202      	movs	r2, #2
 8009f38:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f91e 	bl	800a184 <HAL_UARTEx_RxEventCallback>
      return;
 8009f48:	e0fe      	b.n	800a148 <HAL_UART_IRQHandler+0x798>
 8009f4a:	bf00      	nop
 8009f4c:	40020010 	.word	0x40020010
 8009f50:	40020028 	.word	0x40020028
 8009f54:	40020040 	.word	0x40020040
 8009f58:	40020058 	.word	0x40020058
 8009f5c:	40020070 	.word	0x40020070
 8009f60:	40020088 	.word	0x40020088
 8009f64:	400200a0 	.word	0x400200a0
 8009f68:	400200b8 	.word	0x400200b8
 8009f6c:	40020410 	.word	0x40020410
 8009f70:	40020428 	.word	0x40020428
 8009f74:	40020440 	.word	0x40020440
 8009f78:	40020458 	.word	0x40020458
 8009f7c:	40020470 	.word	0x40020470
 8009f80:	40020488 	.word	0x40020488
 8009f84:	400204a0 	.word	0x400204a0
 8009f88:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 80cf 	beq.w	800a14c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009fae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 80ca 	beq.w	800a14c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc0:	e853 3f00 	ldrex	r3, [r3]
 8009fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fdc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fe2:	e841 2300 	strex	r3, r2, [r1]
 8009fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1e4      	bne.n	8009fb8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3308      	adds	r3, #8
 8009ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ffe:	6a3a      	ldr	r2, [r7, #32]
 800a000:	4b55      	ldr	r3, [pc, #340]	@ (800a158 <HAL_UART_IRQHandler+0x7a8>)
 800a002:	4013      	ands	r3, r2
 800a004:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3308      	adds	r3, #8
 800a00e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a012:	633a      	str	r2, [r7, #48]	@ 0x30
 800a014:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e3      	bne.n	8009fee <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2220      	movs	r2, #32
 800a02a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	e853 3f00 	ldrex	r3, [r3]
 800a046:	60fb      	str	r3, [r7, #12]
   return(result);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0310 	bic.w	r3, r3, #16
 800a04e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a05c:	61fb      	str	r3, [r7, #28]
 800a05e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	69b9      	ldr	r1, [r7, #24]
 800a062:	69fa      	ldr	r2, [r7, #28]
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	617b      	str	r3, [r7, #20]
   return(result);
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e4      	bne.n	800a03a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2202      	movs	r2, #2
 800a074:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a076:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f881 	bl	800a184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a082:	e063      	b.n	800a14c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00e      	beq.n	800a0ae <HAL_UART_IRQHandler+0x6fe>
 800a090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d008      	beq.n	800a0ae <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a0a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f001 f83d 	bl	800b126 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0ac:	e051      	b.n	800a152 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d014      	beq.n	800a0e4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a0ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d105      	bne.n	800a0d2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a0c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d008      	beq.n	800a0e4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d03a      	beq.n	800a150 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	4798      	blx	r3
    }
    return;
 800a0e2:	e035      	b.n	800a150 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d009      	beq.n	800a104 <HAL_UART_IRQHandler+0x754>
 800a0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 ffe7 	bl	800b0d0 <UART_EndTransmit_IT>
    return;
 800a102:	e026      	b.n	800a152 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a108:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d009      	beq.n	800a124 <HAL_UART_IRQHandler+0x774>
 800a110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a114:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d003      	beq.n	800a124 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 f816 	bl	800b14e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a122:	e016      	b.n	800a152 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d010      	beq.n	800a152 <HAL_UART_IRQHandler+0x7a2>
 800a130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a134:	2b00      	cmp	r3, #0
 800a136:	da0c      	bge.n	800a152 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fffe 	bl	800b13a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a13e:	e008      	b.n	800a152 <HAL_UART_IRQHandler+0x7a2>
      return;
 800a140:	bf00      	nop
 800a142:	e006      	b.n	800a152 <HAL_UART_IRQHandler+0x7a2>
    return;
 800a144:	bf00      	nop
 800a146:	e004      	b.n	800a152 <HAL_UART_IRQHandler+0x7a2>
      return;
 800a148:	bf00      	nop
 800a14a:	e002      	b.n	800a152 <HAL_UART_IRQHandler+0x7a2>
      return;
 800a14c:	bf00      	nop
 800a14e:	e000      	b.n	800a152 <HAL_UART_IRQHandler+0x7a2>
    return;
 800a150:	bf00      	nop
  }
}
 800a152:	37e8      	adds	r7, #232	@ 0xe8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	effffffe 	.word	0xeffffffe

0800a15c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a19c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1a0:	b092      	sub	sp, #72	@ 0x48
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	431a      	orrs	r2, r3
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	69db      	ldr	r3, [r3, #28]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	4bbe      	ldr	r3, [pc, #760]	@ (800a4c4 <UART_SetConfig+0x328>)
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	697a      	ldr	r2, [r7, #20]
 800a1d0:	6812      	ldr	r2, [r2, #0]
 800a1d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a1d4:	430b      	orrs	r3, r1
 800a1d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	68da      	ldr	r2, [r3, #12]
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	430a      	orrs	r2, r1
 800a1ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	699b      	ldr	r3, [r3, #24]
 800a1f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4ab3      	ldr	r2, [pc, #716]	@ (800a4c8 <UART_SetConfig+0x32c>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d004      	beq.n	800a208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a204:	4313      	orrs	r3, r2
 800a206:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	689a      	ldr	r2, [r3, #8]
 800a20e:	4baf      	ldr	r3, [pc, #700]	@ (800a4cc <UART_SetConfig+0x330>)
 800a210:	4013      	ands	r3, r2
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	6812      	ldr	r2, [r2, #0]
 800a216:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a218:	430b      	orrs	r3, r1
 800a21a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a222:	f023 010f 	bic.w	r1, r3, #15
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4aa6      	ldr	r2, [pc, #664]	@ (800a4d0 <UART_SetConfig+0x334>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d177      	bne.n	800a32c <UART_SetConfig+0x190>
 800a23c:	4ba5      	ldr	r3, [pc, #660]	@ (800a4d4 <UART_SetConfig+0x338>)
 800a23e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a244:	2b28      	cmp	r3, #40	@ 0x28
 800a246:	d86d      	bhi.n	800a324 <UART_SetConfig+0x188>
 800a248:	a201      	add	r2, pc, #4	@ (adr r2, 800a250 <UART_SetConfig+0xb4>)
 800a24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24e:	bf00      	nop
 800a250:	0800a2f5 	.word	0x0800a2f5
 800a254:	0800a325 	.word	0x0800a325
 800a258:	0800a325 	.word	0x0800a325
 800a25c:	0800a325 	.word	0x0800a325
 800a260:	0800a325 	.word	0x0800a325
 800a264:	0800a325 	.word	0x0800a325
 800a268:	0800a325 	.word	0x0800a325
 800a26c:	0800a325 	.word	0x0800a325
 800a270:	0800a2fd 	.word	0x0800a2fd
 800a274:	0800a325 	.word	0x0800a325
 800a278:	0800a325 	.word	0x0800a325
 800a27c:	0800a325 	.word	0x0800a325
 800a280:	0800a325 	.word	0x0800a325
 800a284:	0800a325 	.word	0x0800a325
 800a288:	0800a325 	.word	0x0800a325
 800a28c:	0800a325 	.word	0x0800a325
 800a290:	0800a305 	.word	0x0800a305
 800a294:	0800a325 	.word	0x0800a325
 800a298:	0800a325 	.word	0x0800a325
 800a29c:	0800a325 	.word	0x0800a325
 800a2a0:	0800a325 	.word	0x0800a325
 800a2a4:	0800a325 	.word	0x0800a325
 800a2a8:	0800a325 	.word	0x0800a325
 800a2ac:	0800a325 	.word	0x0800a325
 800a2b0:	0800a30d 	.word	0x0800a30d
 800a2b4:	0800a325 	.word	0x0800a325
 800a2b8:	0800a325 	.word	0x0800a325
 800a2bc:	0800a325 	.word	0x0800a325
 800a2c0:	0800a325 	.word	0x0800a325
 800a2c4:	0800a325 	.word	0x0800a325
 800a2c8:	0800a325 	.word	0x0800a325
 800a2cc:	0800a325 	.word	0x0800a325
 800a2d0:	0800a315 	.word	0x0800a315
 800a2d4:	0800a325 	.word	0x0800a325
 800a2d8:	0800a325 	.word	0x0800a325
 800a2dc:	0800a325 	.word	0x0800a325
 800a2e0:	0800a325 	.word	0x0800a325
 800a2e4:	0800a325 	.word	0x0800a325
 800a2e8:	0800a325 	.word	0x0800a325
 800a2ec:	0800a325 	.word	0x0800a325
 800a2f0:	0800a31d 	.word	0x0800a31d
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2fa:	e222      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a2fc:	2304      	movs	r3, #4
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a302:	e21e      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a304:	2308      	movs	r3, #8
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30a:	e21a      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a30c:	2310      	movs	r3, #16
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a312:	e216      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a314:	2320      	movs	r3, #32
 800a316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a31a:	e212      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a31c:	2340      	movs	r3, #64	@ 0x40
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a322:	e20e      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a324:	2380      	movs	r3, #128	@ 0x80
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32a:	e20a      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a69      	ldr	r2, [pc, #420]	@ (800a4d8 <UART_SetConfig+0x33c>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d130      	bne.n	800a398 <UART_SetConfig+0x1fc>
 800a336:	4b67      	ldr	r3, [pc, #412]	@ (800a4d4 <UART_SetConfig+0x338>)
 800a338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a33a:	f003 0307 	and.w	r3, r3, #7
 800a33e:	2b05      	cmp	r3, #5
 800a340:	d826      	bhi.n	800a390 <UART_SetConfig+0x1f4>
 800a342:	a201      	add	r2, pc, #4	@ (adr r2, 800a348 <UART_SetConfig+0x1ac>)
 800a344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a348:	0800a361 	.word	0x0800a361
 800a34c:	0800a369 	.word	0x0800a369
 800a350:	0800a371 	.word	0x0800a371
 800a354:	0800a379 	.word	0x0800a379
 800a358:	0800a381 	.word	0x0800a381
 800a35c:	0800a389 	.word	0x0800a389
 800a360:	2300      	movs	r3, #0
 800a362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a366:	e1ec      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a368:	2304      	movs	r3, #4
 800a36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36e:	e1e8      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a370:	2308      	movs	r3, #8
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a376:	e1e4      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a378:	2310      	movs	r3, #16
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37e:	e1e0      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a380:	2320      	movs	r3, #32
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a386:	e1dc      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a388:	2340      	movs	r3, #64	@ 0x40
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38e:	e1d8      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a390:	2380      	movs	r3, #128	@ 0x80
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a396:	e1d4      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a4f      	ldr	r2, [pc, #316]	@ (800a4dc <UART_SetConfig+0x340>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d130      	bne.n	800a404 <UART_SetConfig+0x268>
 800a3a2:	4b4c      	ldr	r3, [pc, #304]	@ (800a4d4 <UART_SetConfig+0x338>)
 800a3a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	2b05      	cmp	r3, #5
 800a3ac:	d826      	bhi.n	800a3fc <UART_SetConfig+0x260>
 800a3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a3b4 <UART_SetConfig+0x218>)
 800a3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b4:	0800a3cd 	.word	0x0800a3cd
 800a3b8:	0800a3d5 	.word	0x0800a3d5
 800a3bc:	0800a3dd 	.word	0x0800a3dd
 800a3c0:	0800a3e5 	.word	0x0800a3e5
 800a3c4:	0800a3ed 	.word	0x0800a3ed
 800a3c8:	0800a3f5 	.word	0x0800a3f5
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d2:	e1b6      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a3d4:	2304      	movs	r3, #4
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3da:	e1b2      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a3dc:	2308      	movs	r3, #8
 800a3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e2:	e1ae      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a3e4:	2310      	movs	r3, #16
 800a3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ea:	e1aa      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a3ec:	2320      	movs	r3, #32
 800a3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f2:	e1a6      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a3f4:	2340      	movs	r3, #64	@ 0x40
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fa:	e1a2      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a3fc:	2380      	movs	r3, #128	@ 0x80
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a402:	e19e      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a35      	ldr	r2, [pc, #212]	@ (800a4e0 <UART_SetConfig+0x344>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d130      	bne.n	800a470 <UART_SetConfig+0x2d4>
 800a40e:	4b31      	ldr	r3, [pc, #196]	@ (800a4d4 <UART_SetConfig+0x338>)
 800a410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a412:	f003 0307 	and.w	r3, r3, #7
 800a416:	2b05      	cmp	r3, #5
 800a418:	d826      	bhi.n	800a468 <UART_SetConfig+0x2cc>
 800a41a:	a201      	add	r2, pc, #4	@ (adr r2, 800a420 <UART_SetConfig+0x284>)
 800a41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a420:	0800a439 	.word	0x0800a439
 800a424:	0800a441 	.word	0x0800a441
 800a428:	0800a449 	.word	0x0800a449
 800a42c:	0800a451 	.word	0x0800a451
 800a430:	0800a459 	.word	0x0800a459
 800a434:	0800a461 	.word	0x0800a461
 800a438:	2300      	movs	r3, #0
 800a43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43e:	e180      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a440:	2304      	movs	r3, #4
 800a442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a446:	e17c      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a448:	2308      	movs	r3, #8
 800a44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44e:	e178      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a450:	2310      	movs	r3, #16
 800a452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a456:	e174      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a458:	2320      	movs	r3, #32
 800a45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45e:	e170      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a460:	2340      	movs	r3, #64	@ 0x40
 800a462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a466:	e16c      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a468:	2380      	movs	r3, #128	@ 0x80
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46e:	e168      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a1b      	ldr	r2, [pc, #108]	@ (800a4e4 <UART_SetConfig+0x348>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d142      	bne.n	800a500 <UART_SetConfig+0x364>
 800a47a:	4b16      	ldr	r3, [pc, #88]	@ (800a4d4 <UART_SetConfig+0x338>)
 800a47c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a47e:	f003 0307 	and.w	r3, r3, #7
 800a482:	2b05      	cmp	r3, #5
 800a484:	d838      	bhi.n	800a4f8 <UART_SetConfig+0x35c>
 800a486:	a201      	add	r2, pc, #4	@ (adr r2, 800a48c <UART_SetConfig+0x2f0>)
 800a488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48c:	0800a4a5 	.word	0x0800a4a5
 800a490:	0800a4ad 	.word	0x0800a4ad
 800a494:	0800a4b5 	.word	0x0800a4b5
 800a498:	0800a4bd 	.word	0x0800a4bd
 800a49c:	0800a4e9 	.word	0x0800a4e9
 800a4a0:	0800a4f1 	.word	0x0800a4f1
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4aa:	e14a      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a4ac:	2304      	movs	r3, #4
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b2:	e146      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a4b4:	2308      	movs	r3, #8
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ba:	e142      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a4bc:	2310      	movs	r3, #16
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c2:	e13e      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a4c4:	cfff69f3 	.word	0xcfff69f3
 800a4c8:	58000c00 	.word	0x58000c00
 800a4cc:	11fff4ff 	.word	0x11fff4ff
 800a4d0:	40011000 	.word	0x40011000
 800a4d4:	58024400 	.word	0x58024400
 800a4d8:	40004400 	.word	0x40004400
 800a4dc:	40004800 	.word	0x40004800
 800a4e0:	40004c00 	.word	0x40004c00
 800a4e4:	40005000 	.word	0x40005000
 800a4e8:	2320      	movs	r3, #32
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ee:	e128      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a4f0:	2340      	movs	r3, #64	@ 0x40
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f6:	e124      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a4f8:	2380      	movs	r3, #128	@ 0x80
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fe:	e120      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4acb      	ldr	r2, [pc, #812]	@ (800a834 <UART_SetConfig+0x698>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d176      	bne.n	800a5f8 <UART_SetConfig+0x45c>
 800a50a:	4bcb      	ldr	r3, [pc, #812]	@ (800a838 <UART_SetConfig+0x69c>)
 800a50c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a50e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a512:	2b28      	cmp	r3, #40	@ 0x28
 800a514:	d86c      	bhi.n	800a5f0 <UART_SetConfig+0x454>
 800a516:	a201      	add	r2, pc, #4	@ (adr r2, 800a51c <UART_SetConfig+0x380>)
 800a518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51c:	0800a5c1 	.word	0x0800a5c1
 800a520:	0800a5f1 	.word	0x0800a5f1
 800a524:	0800a5f1 	.word	0x0800a5f1
 800a528:	0800a5f1 	.word	0x0800a5f1
 800a52c:	0800a5f1 	.word	0x0800a5f1
 800a530:	0800a5f1 	.word	0x0800a5f1
 800a534:	0800a5f1 	.word	0x0800a5f1
 800a538:	0800a5f1 	.word	0x0800a5f1
 800a53c:	0800a5c9 	.word	0x0800a5c9
 800a540:	0800a5f1 	.word	0x0800a5f1
 800a544:	0800a5f1 	.word	0x0800a5f1
 800a548:	0800a5f1 	.word	0x0800a5f1
 800a54c:	0800a5f1 	.word	0x0800a5f1
 800a550:	0800a5f1 	.word	0x0800a5f1
 800a554:	0800a5f1 	.word	0x0800a5f1
 800a558:	0800a5f1 	.word	0x0800a5f1
 800a55c:	0800a5d1 	.word	0x0800a5d1
 800a560:	0800a5f1 	.word	0x0800a5f1
 800a564:	0800a5f1 	.word	0x0800a5f1
 800a568:	0800a5f1 	.word	0x0800a5f1
 800a56c:	0800a5f1 	.word	0x0800a5f1
 800a570:	0800a5f1 	.word	0x0800a5f1
 800a574:	0800a5f1 	.word	0x0800a5f1
 800a578:	0800a5f1 	.word	0x0800a5f1
 800a57c:	0800a5d9 	.word	0x0800a5d9
 800a580:	0800a5f1 	.word	0x0800a5f1
 800a584:	0800a5f1 	.word	0x0800a5f1
 800a588:	0800a5f1 	.word	0x0800a5f1
 800a58c:	0800a5f1 	.word	0x0800a5f1
 800a590:	0800a5f1 	.word	0x0800a5f1
 800a594:	0800a5f1 	.word	0x0800a5f1
 800a598:	0800a5f1 	.word	0x0800a5f1
 800a59c:	0800a5e1 	.word	0x0800a5e1
 800a5a0:	0800a5f1 	.word	0x0800a5f1
 800a5a4:	0800a5f1 	.word	0x0800a5f1
 800a5a8:	0800a5f1 	.word	0x0800a5f1
 800a5ac:	0800a5f1 	.word	0x0800a5f1
 800a5b0:	0800a5f1 	.word	0x0800a5f1
 800a5b4:	0800a5f1 	.word	0x0800a5f1
 800a5b8:	0800a5f1 	.word	0x0800a5f1
 800a5bc:	0800a5e9 	.word	0x0800a5e9
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c6:	e0bc      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ce:	e0b8      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d6:	e0b4      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5de:	e0b0      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a5e0:	2320      	movs	r3, #32
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e6:	e0ac      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a5e8:	2340      	movs	r3, #64	@ 0x40
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ee:	e0a8      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a5f0:	2380      	movs	r3, #128	@ 0x80
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f6:	e0a4      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a8f      	ldr	r2, [pc, #572]	@ (800a83c <UART_SetConfig+0x6a0>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d130      	bne.n	800a664 <UART_SetConfig+0x4c8>
 800a602:	4b8d      	ldr	r3, [pc, #564]	@ (800a838 <UART_SetConfig+0x69c>)
 800a604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a606:	f003 0307 	and.w	r3, r3, #7
 800a60a:	2b05      	cmp	r3, #5
 800a60c:	d826      	bhi.n	800a65c <UART_SetConfig+0x4c0>
 800a60e:	a201      	add	r2, pc, #4	@ (adr r2, 800a614 <UART_SetConfig+0x478>)
 800a610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a614:	0800a62d 	.word	0x0800a62d
 800a618:	0800a635 	.word	0x0800a635
 800a61c:	0800a63d 	.word	0x0800a63d
 800a620:	0800a645 	.word	0x0800a645
 800a624:	0800a64d 	.word	0x0800a64d
 800a628:	0800a655 	.word	0x0800a655
 800a62c:	2300      	movs	r3, #0
 800a62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a632:	e086      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a634:	2304      	movs	r3, #4
 800a636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63a:	e082      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a63c:	2308      	movs	r3, #8
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a642:	e07e      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a644:	2310      	movs	r3, #16
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64a:	e07a      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a64c:	2320      	movs	r3, #32
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a652:	e076      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a654:	2340      	movs	r3, #64	@ 0x40
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65a:	e072      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a65c:	2380      	movs	r3, #128	@ 0x80
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e06e      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a75      	ldr	r2, [pc, #468]	@ (800a840 <UART_SetConfig+0x6a4>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d130      	bne.n	800a6d0 <UART_SetConfig+0x534>
 800a66e:	4b72      	ldr	r3, [pc, #456]	@ (800a838 <UART_SetConfig+0x69c>)
 800a670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a672:	f003 0307 	and.w	r3, r3, #7
 800a676:	2b05      	cmp	r3, #5
 800a678:	d826      	bhi.n	800a6c8 <UART_SetConfig+0x52c>
 800a67a:	a201      	add	r2, pc, #4	@ (adr r2, 800a680 <UART_SetConfig+0x4e4>)
 800a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a680:	0800a699 	.word	0x0800a699
 800a684:	0800a6a1 	.word	0x0800a6a1
 800a688:	0800a6a9 	.word	0x0800a6a9
 800a68c:	0800a6b1 	.word	0x0800a6b1
 800a690:	0800a6b9 	.word	0x0800a6b9
 800a694:	0800a6c1 	.word	0x0800a6c1
 800a698:	2300      	movs	r3, #0
 800a69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69e:	e050      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a6a0:	2304      	movs	r3, #4
 800a6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a6:	e04c      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a6a8:	2308      	movs	r3, #8
 800a6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ae:	e048      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a6b0:	2310      	movs	r3, #16
 800a6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b6:	e044      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a6b8:	2320      	movs	r3, #32
 800a6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6be:	e040      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a6c0:	2340      	movs	r3, #64	@ 0x40
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c6:	e03c      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a6c8:	2380      	movs	r3, #128	@ 0x80
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ce:	e038      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a5b      	ldr	r2, [pc, #364]	@ (800a844 <UART_SetConfig+0x6a8>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d130      	bne.n	800a73c <UART_SetConfig+0x5a0>
 800a6da:	4b57      	ldr	r3, [pc, #348]	@ (800a838 <UART_SetConfig+0x69c>)
 800a6dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6de:	f003 0307 	and.w	r3, r3, #7
 800a6e2:	2b05      	cmp	r3, #5
 800a6e4:	d826      	bhi.n	800a734 <UART_SetConfig+0x598>
 800a6e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6ec <UART_SetConfig+0x550>)
 800a6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ec:	0800a705 	.word	0x0800a705
 800a6f0:	0800a70d 	.word	0x0800a70d
 800a6f4:	0800a715 	.word	0x0800a715
 800a6f8:	0800a71d 	.word	0x0800a71d
 800a6fc:	0800a725 	.word	0x0800a725
 800a700:	0800a72d 	.word	0x0800a72d
 800a704:	2302      	movs	r3, #2
 800a706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70a:	e01a      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a70c:	2304      	movs	r3, #4
 800a70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a712:	e016      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a714:	2308      	movs	r3, #8
 800a716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71a:	e012      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a71c:	2310      	movs	r3, #16
 800a71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a722:	e00e      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a724:	2320      	movs	r3, #32
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a72a:	e00a      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a72c:	2340      	movs	r3, #64	@ 0x40
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a732:	e006      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a734:	2380      	movs	r3, #128	@ 0x80
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73a:	e002      	b.n	800a742 <UART_SetConfig+0x5a6>
 800a73c:	2380      	movs	r3, #128	@ 0x80
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a3f      	ldr	r2, [pc, #252]	@ (800a844 <UART_SetConfig+0x6a8>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	f040 80f8 	bne.w	800a93e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a74e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a752:	2b20      	cmp	r3, #32
 800a754:	dc46      	bgt.n	800a7e4 <UART_SetConfig+0x648>
 800a756:	2b02      	cmp	r3, #2
 800a758:	f2c0 8082 	blt.w	800a860 <UART_SetConfig+0x6c4>
 800a75c:	3b02      	subs	r3, #2
 800a75e:	2b1e      	cmp	r3, #30
 800a760:	d87e      	bhi.n	800a860 <UART_SetConfig+0x6c4>
 800a762:	a201      	add	r2, pc, #4	@ (adr r2, 800a768 <UART_SetConfig+0x5cc>)
 800a764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a768:	0800a7eb 	.word	0x0800a7eb
 800a76c:	0800a861 	.word	0x0800a861
 800a770:	0800a7f3 	.word	0x0800a7f3
 800a774:	0800a861 	.word	0x0800a861
 800a778:	0800a861 	.word	0x0800a861
 800a77c:	0800a861 	.word	0x0800a861
 800a780:	0800a803 	.word	0x0800a803
 800a784:	0800a861 	.word	0x0800a861
 800a788:	0800a861 	.word	0x0800a861
 800a78c:	0800a861 	.word	0x0800a861
 800a790:	0800a861 	.word	0x0800a861
 800a794:	0800a861 	.word	0x0800a861
 800a798:	0800a861 	.word	0x0800a861
 800a79c:	0800a861 	.word	0x0800a861
 800a7a0:	0800a813 	.word	0x0800a813
 800a7a4:	0800a861 	.word	0x0800a861
 800a7a8:	0800a861 	.word	0x0800a861
 800a7ac:	0800a861 	.word	0x0800a861
 800a7b0:	0800a861 	.word	0x0800a861
 800a7b4:	0800a861 	.word	0x0800a861
 800a7b8:	0800a861 	.word	0x0800a861
 800a7bc:	0800a861 	.word	0x0800a861
 800a7c0:	0800a861 	.word	0x0800a861
 800a7c4:	0800a861 	.word	0x0800a861
 800a7c8:	0800a861 	.word	0x0800a861
 800a7cc:	0800a861 	.word	0x0800a861
 800a7d0:	0800a861 	.word	0x0800a861
 800a7d4:	0800a861 	.word	0x0800a861
 800a7d8:	0800a861 	.word	0x0800a861
 800a7dc:	0800a861 	.word	0x0800a861
 800a7e0:	0800a853 	.word	0x0800a853
 800a7e4:	2b40      	cmp	r3, #64	@ 0x40
 800a7e6:	d037      	beq.n	800a858 <UART_SetConfig+0x6bc>
 800a7e8:	e03a      	b.n	800a860 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a7ea:	f7fe fa8f 	bl	8008d0c <HAL_RCCEx_GetD3PCLK1Freq>
 800a7ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7f0:	e03c      	b.n	800a86c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fe fa9e 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a800:	e034      	b.n	800a86c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a802:	f107 0318 	add.w	r3, r7, #24
 800a806:	4618      	mov	r0, r3
 800a808:	f7fe fbea 	bl	8008fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a810:	e02c      	b.n	800a86c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a812:	4b09      	ldr	r3, [pc, #36]	@ (800a838 <UART_SetConfig+0x69c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0320 	and.w	r3, r3, #32
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d016      	beq.n	800a84c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a81e:	4b06      	ldr	r3, [pc, #24]	@ (800a838 <UART_SetConfig+0x69c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	08db      	lsrs	r3, r3, #3
 800a824:	f003 0303 	and.w	r3, r3, #3
 800a828:	4a07      	ldr	r2, [pc, #28]	@ (800a848 <UART_SetConfig+0x6ac>)
 800a82a:	fa22 f303 	lsr.w	r3, r2, r3
 800a82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a830:	e01c      	b.n	800a86c <UART_SetConfig+0x6d0>
 800a832:	bf00      	nop
 800a834:	40011400 	.word	0x40011400
 800a838:	58024400 	.word	0x58024400
 800a83c:	40007800 	.word	0x40007800
 800a840:	40007c00 	.word	0x40007c00
 800a844:	58000c00 	.word	0x58000c00
 800a848:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a84c:	4b9d      	ldr	r3, [pc, #628]	@ (800aac4 <UART_SetConfig+0x928>)
 800a84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a850:	e00c      	b.n	800a86c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a852:	4b9d      	ldr	r3, [pc, #628]	@ (800aac8 <UART_SetConfig+0x92c>)
 800a854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a856:	e009      	b.n	800a86c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a858:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a85e:	e005      	b.n	800a86c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a860:	2300      	movs	r3, #0
 800a862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a86a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a86c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 81de 	beq.w	800ac30 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a878:	4a94      	ldr	r2, [pc, #592]	@ (800aacc <UART_SetConfig+0x930>)
 800a87a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a87e:	461a      	mov	r2, r3
 800a880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a882:	fbb3 f3f2 	udiv	r3, r3, r2
 800a886:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	4613      	mov	r3, r2
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	4413      	add	r3, r2
 800a892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a894:	429a      	cmp	r2, r3
 800a896:	d305      	bcc.n	800a8a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a89e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d903      	bls.n	800a8ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a8aa:	e1c1      	b.n	800ac30 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	60bb      	str	r3, [r7, #8]
 800a8b2:	60fa      	str	r2, [r7, #12]
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b8:	4a84      	ldr	r2, [pc, #528]	@ (800aacc <UART_SetConfig+0x930>)
 800a8ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	607a      	str	r2, [r7, #4]
 800a8c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8ce:	f7f5 fd57 	bl	8000380 <__aeabi_uldivmod>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	4610      	mov	r0, r2
 800a8d8:	4619      	mov	r1, r3
 800a8da:	f04f 0200 	mov.w	r2, #0
 800a8de:	f04f 0300 	mov.w	r3, #0
 800a8e2:	020b      	lsls	r3, r1, #8
 800a8e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8e8:	0202      	lsls	r2, r0, #8
 800a8ea:	6979      	ldr	r1, [r7, #20]
 800a8ec:	6849      	ldr	r1, [r1, #4]
 800a8ee:	0849      	lsrs	r1, r1, #1
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	eb12 0804 	adds.w	r8, r2, r4
 800a8fa:	eb43 0905 	adc.w	r9, r3, r5
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	469a      	mov	sl, r3
 800a906:	4693      	mov	fp, r2
 800a908:	4652      	mov	r2, sl
 800a90a:	465b      	mov	r3, fp
 800a90c:	4640      	mov	r0, r8
 800a90e:	4649      	mov	r1, r9
 800a910:	f7f5 fd36 	bl	8000380 <__aeabi_uldivmod>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	4613      	mov	r3, r2
 800a91a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a922:	d308      	bcc.n	800a936 <UART_SetConfig+0x79a>
 800a924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a92a:	d204      	bcs.n	800a936 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a932:	60da      	str	r2, [r3, #12]
 800a934:	e17c      	b.n	800ac30 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a93c:	e178      	b.n	800ac30 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a946:	f040 80c5 	bne.w	800aad4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a94a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a94e:	2b20      	cmp	r3, #32
 800a950:	dc48      	bgt.n	800a9e4 <UART_SetConfig+0x848>
 800a952:	2b00      	cmp	r3, #0
 800a954:	db7b      	blt.n	800aa4e <UART_SetConfig+0x8b2>
 800a956:	2b20      	cmp	r3, #32
 800a958:	d879      	bhi.n	800aa4e <UART_SetConfig+0x8b2>
 800a95a:	a201      	add	r2, pc, #4	@ (adr r2, 800a960 <UART_SetConfig+0x7c4>)
 800a95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a960:	0800a9eb 	.word	0x0800a9eb
 800a964:	0800a9f3 	.word	0x0800a9f3
 800a968:	0800aa4f 	.word	0x0800aa4f
 800a96c:	0800aa4f 	.word	0x0800aa4f
 800a970:	0800a9fb 	.word	0x0800a9fb
 800a974:	0800aa4f 	.word	0x0800aa4f
 800a978:	0800aa4f 	.word	0x0800aa4f
 800a97c:	0800aa4f 	.word	0x0800aa4f
 800a980:	0800aa0b 	.word	0x0800aa0b
 800a984:	0800aa4f 	.word	0x0800aa4f
 800a988:	0800aa4f 	.word	0x0800aa4f
 800a98c:	0800aa4f 	.word	0x0800aa4f
 800a990:	0800aa4f 	.word	0x0800aa4f
 800a994:	0800aa4f 	.word	0x0800aa4f
 800a998:	0800aa4f 	.word	0x0800aa4f
 800a99c:	0800aa4f 	.word	0x0800aa4f
 800a9a0:	0800aa1b 	.word	0x0800aa1b
 800a9a4:	0800aa4f 	.word	0x0800aa4f
 800a9a8:	0800aa4f 	.word	0x0800aa4f
 800a9ac:	0800aa4f 	.word	0x0800aa4f
 800a9b0:	0800aa4f 	.word	0x0800aa4f
 800a9b4:	0800aa4f 	.word	0x0800aa4f
 800a9b8:	0800aa4f 	.word	0x0800aa4f
 800a9bc:	0800aa4f 	.word	0x0800aa4f
 800a9c0:	0800aa4f 	.word	0x0800aa4f
 800a9c4:	0800aa4f 	.word	0x0800aa4f
 800a9c8:	0800aa4f 	.word	0x0800aa4f
 800a9cc:	0800aa4f 	.word	0x0800aa4f
 800a9d0:	0800aa4f 	.word	0x0800aa4f
 800a9d4:	0800aa4f 	.word	0x0800aa4f
 800a9d8:	0800aa4f 	.word	0x0800aa4f
 800a9dc:	0800aa4f 	.word	0x0800aa4f
 800a9e0:	0800aa41 	.word	0x0800aa41
 800a9e4:	2b40      	cmp	r3, #64	@ 0x40
 800a9e6:	d02e      	beq.n	800aa46 <UART_SetConfig+0x8aa>
 800a9e8:	e031      	b.n	800aa4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9ea:	f7fc f9d9 	bl	8006da0 <HAL_RCC_GetPCLK1Freq>
 800a9ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9f0:	e033      	b.n	800aa5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9f2:	f7fc f9eb 	bl	8006dcc <HAL_RCC_GetPCLK2Freq>
 800a9f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9f8:	e02f      	b.n	800aa5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe f99a 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa08:	e027      	b.n	800aa5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa0a:	f107 0318 	add.w	r3, r7, #24
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe fae6 	bl	8008fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa18:	e01f      	b.n	800aa5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa1a:	4b2d      	ldr	r3, [pc, #180]	@ (800aad0 <UART_SetConfig+0x934>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 0320 	and.w	r3, r3, #32
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d009      	beq.n	800aa3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa26:	4b2a      	ldr	r3, [pc, #168]	@ (800aad0 <UART_SetConfig+0x934>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	08db      	lsrs	r3, r3, #3
 800aa2c:	f003 0303 	and.w	r3, r3, #3
 800aa30:	4a24      	ldr	r2, [pc, #144]	@ (800aac4 <UART_SetConfig+0x928>)
 800aa32:	fa22 f303 	lsr.w	r3, r2, r3
 800aa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa38:	e00f      	b.n	800aa5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aa3a:	4b22      	ldr	r3, [pc, #136]	@ (800aac4 <UART_SetConfig+0x928>)
 800aa3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa3e:	e00c      	b.n	800aa5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa40:	4b21      	ldr	r3, [pc, #132]	@ (800aac8 <UART_SetConfig+0x92c>)
 800aa42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa44:	e009      	b.n	800aa5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa4c:	e005      	b.n	800aa5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aa58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 80e7 	beq.w	800ac30 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa66:	4a19      	ldr	r2, [pc, #100]	@ (800aacc <UART_SetConfig+0x930>)
 800aa68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa70:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa74:	005a      	lsls	r2, r3, #1
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	085b      	lsrs	r3, r3, #1
 800aa7c:	441a      	add	r2, r3
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8a:	2b0f      	cmp	r3, #15
 800aa8c:	d916      	bls.n	800aabc <UART_SetConfig+0x920>
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa94:	d212      	bcs.n	800aabc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	f023 030f 	bic.w	r3, r3, #15
 800aa9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa2:	085b      	lsrs	r3, r3, #1
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	f003 0307 	and.w	r3, r3, #7
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aaae:	4313      	orrs	r3, r2
 800aab0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800aab8:	60da      	str	r2, [r3, #12]
 800aaba:	e0b9      	b.n	800ac30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aac2:	e0b5      	b.n	800ac30 <UART_SetConfig+0xa94>
 800aac4:	03d09000 	.word	0x03d09000
 800aac8:	003d0900 	.word	0x003d0900
 800aacc:	0800c944 	.word	0x0800c944
 800aad0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800aad4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aad8:	2b20      	cmp	r3, #32
 800aada:	dc49      	bgt.n	800ab70 <UART_SetConfig+0x9d4>
 800aadc:	2b00      	cmp	r3, #0
 800aade:	db7c      	blt.n	800abda <UART_SetConfig+0xa3e>
 800aae0:	2b20      	cmp	r3, #32
 800aae2:	d87a      	bhi.n	800abda <UART_SetConfig+0xa3e>
 800aae4:	a201      	add	r2, pc, #4	@ (adr r2, 800aaec <UART_SetConfig+0x950>)
 800aae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaea:	bf00      	nop
 800aaec:	0800ab77 	.word	0x0800ab77
 800aaf0:	0800ab7f 	.word	0x0800ab7f
 800aaf4:	0800abdb 	.word	0x0800abdb
 800aaf8:	0800abdb 	.word	0x0800abdb
 800aafc:	0800ab87 	.word	0x0800ab87
 800ab00:	0800abdb 	.word	0x0800abdb
 800ab04:	0800abdb 	.word	0x0800abdb
 800ab08:	0800abdb 	.word	0x0800abdb
 800ab0c:	0800ab97 	.word	0x0800ab97
 800ab10:	0800abdb 	.word	0x0800abdb
 800ab14:	0800abdb 	.word	0x0800abdb
 800ab18:	0800abdb 	.word	0x0800abdb
 800ab1c:	0800abdb 	.word	0x0800abdb
 800ab20:	0800abdb 	.word	0x0800abdb
 800ab24:	0800abdb 	.word	0x0800abdb
 800ab28:	0800abdb 	.word	0x0800abdb
 800ab2c:	0800aba7 	.word	0x0800aba7
 800ab30:	0800abdb 	.word	0x0800abdb
 800ab34:	0800abdb 	.word	0x0800abdb
 800ab38:	0800abdb 	.word	0x0800abdb
 800ab3c:	0800abdb 	.word	0x0800abdb
 800ab40:	0800abdb 	.word	0x0800abdb
 800ab44:	0800abdb 	.word	0x0800abdb
 800ab48:	0800abdb 	.word	0x0800abdb
 800ab4c:	0800abdb 	.word	0x0800abdb
 800ab50:	0800abdb 	.word	0x0800abdb
 800ab54:	0800abdb 	.word	0x0800abdb
 800ab58:	0800abdb 	.word	0x0800abdb
 800ab5c:	0800abdb 	.word	0x0800abdb
 800ab60:	0800abdb 	.word	0x0800abdb
 800ab64:	0800abdb 	.word	0x0800abdb
 800ab68:	0800abdb 	.word	0x0800abdb
 800ab6c:	0800abcd 	.word	0x0800abcd
 800ab70:	2b40      	cmp	r3, #64	@ 0x40
 800ab72:	d02e      	beq.n	800abd2 <UART_SetConfig+0xa36>
 800ab74:	e031      	b.n	800abda <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab76:	f7fc f913 	bl	8006da0 <HAL_RCC_GetPCLK1Freq>
 800ab7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab7c:	e033      	b.n	800abe6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab7e:	f7fc f925 	bl	8006dcc <HAL_RCC_GetPCLK2Freq>
 800ab82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab84:	e02f      	b.n	800abe6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fe f8d4 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab94:	e027      	b.n	800abe6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab96:	f107 0318 	add.w	r3, r7, #24
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe fa20 	bl	8008fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba4:	e01f      	b.n	800abe6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aba6:	4b2d      	ldr	r3, [pc, #180]	@ (800ac5c <UART_SetConfig+0xac0>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0320 	and.w	r3, r3, #32
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d009      	beq.n	800abc6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abb2:	4b2a      	ldr	r3, [pc, #168]	@ (800ac5c <UART_SetConfig+0xac0>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	08db      	lsrs	r3, r3, #3
 800abb8:	f003 0303 	and.w	r3, r3, #3
 800abbc:	4a28      	ldr	r2, [pc, #160]	@ (800ac60 <UART_SetConfig+0xac4>)
 800abbe:	fa22 f303 	lsr.w	r3, r2, r3
 800abc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abc4:	e00f      	b.n	800abe6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800abc6:	4b26      	ldr	r3, [pc, #152]	@ (800ac60 <UART_SetConfig+0xac4>)
 800abc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abca:	e00c      	b.n	800abe6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abcc:	4b25      	ldr	r3, [pc, #148]	@ (800ac64 <UART_SetConfig+0xac8>)
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd0:	e009      	b.n	800abe6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd8:	e005      	b.n	800abe6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800abda:	2300      	movs	r3, #0
 800abdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800abe4:	bf00      	nop
    }

    if (pclk != 0U)
 800abe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d021      	beq.n	800ac30 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ac68 <UART_SetConfig+0xacc>)
 800abf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abf6:	461a      	mov	r2, r3
 800abf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abfa:	fbb3 f2f2 	udiv	r2, r3, r2
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	085b      	lsrs	r3, r3, #1
 800ac04:	441a      	add	r2, r3
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac12:	2b0f      	cmp	r3, #15
 800ac14:	d909      	bls.n	800ac2a <UART_SetConfig+0xa8e>
 800ac16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac1c:	d205      	bcs.n	800ac2a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	60da      	str	r2, [r3, #12]
 800ac28:	e002      	b.n	800ac30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	2200      	movs	r2, #0
 800ac44:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ac4c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3748      	adds	r7, #72	@ 0x48
 800ac54:	46bd      	mov	sp, r7
 800ac56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac5a:	bf00      	nop
 800ac5c:	58024400 	.word	0x58024400
 800ac60:	03d09000 	.word	0x03d09000
 800ac64:	003d0900 	.word	0x003d0900
 800ac68:	0800c944 	.word	0x0800c944

0800ac6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac78:	f003 0308 	and.w	r3, r3, #8
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00a      	beq.n	800ac96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	430a      	orrs	r2, r1
 800ac94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00a      	beq.n	800acb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	430a      	orrs	r2, r1
 800acb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acbc:	f003 0302 	and.w	r3, r3, #2
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00a      	beq.n	800acda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	430a      	orrs	r2, r1
 800acd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acde:	f003 0304 	and.w	r3, r3, #4
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00a      	beq.n	800acfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	430a      	orrs	r2, r1
 800acfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad00:	f003 0310 	and.w	r3, r3, #16
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00a      	beq.n	800ad1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	430a      	orrs	r2, r1
 800ad1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad22:	f003 0320 	and.w	r3, r3, #32
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00a      	beq.n	800ad40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d01a      	beq.n	800ad82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	430a      	orrs	r2, r1
 800ad60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad6a:	d10a      	bne.n	800ad82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00a      	beq.n	800ada4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	430a      	orrs	r2, r1
 800ada2:	605a      	str	r2, [r3, #4]
  }
}
 800ada4:	bf00      	nop
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b098      	sub	sp, #96	@ 0x60
 800adb4:	af02      	add	r7, sp, #8
 800adb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800adc0:	f7f6 fb46 	bl	8001450 <HAL_GetTick>
 800adc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 0308 	and.w	r3, r3, #8
 800add0:	2b08      	cmp	r3, #8
 800add2:	d12f      	bne.n	800ae34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800add4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800addc:	2200      	movs	r2, #0
 800adde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f88e 	bl	800af04 <UART_WaitOnFlagUntilTimeout>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d022      	beq.n	800ae34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf6:	e853 3f00 	ldrex	r3, [r3]
 800adfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800adfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae02:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae14:	e841 2300 	strex	r3, r2, [r1]
 800ae18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1e6      	bne.n	800adee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2220      	movs	r2, #32
 800ae24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae30:	2303      	movs	r3, #3
 800ae32:	e063      	b.n	800aefc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 0304 	and.w	r3, r3, #4
 800ae3e:	2b04      	cmp	r3, #4
 800ae40:	d149      	bne.n	800aed6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 f857 	bl	800af04 <UART_WaitOnFlagUntilTimeout>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d03c      	beq.n	800aed6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae64:	e853 3f00 	ldrex	r3, [r3]
 800ae68:	623b      	str	r3, [r7, #32]
   return(result);
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	461a      	mov	r2, r3
 800ae78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae7a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae82:	e841 2300 	strex	r3, r2, [r1]
 800ae86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1e6      	bne.n	800ae5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3308      	adds	r3, #8
 800ae94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f023 0301 	bic.w	r3, r3, #1
 800aea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3308      	adds	r3, #8
 800aeac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aeae:	61fa      	str	r2, [r7, #28]
 800aeb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb2:	69b9      	ldr	r1, [r7, #24]
 800aeb4:	69fa      	ldr	r2, [r7, #28]
 800aeb6:	e841 2300 	strex	r3, r2, [r1]
 800aeba:	617b      	str	r3, [r7, #20]
   return(result);
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1e5      	bne.n	800ae8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2220      	movs	r2, #32
 800aec6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aed2:	2303      	movs	r3, #3
 800aed4:	e012      	b.n	800aefc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2220      	movs	r2, #32
 800aeda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2220      	movs	r2, #32
 800aee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3758      	adds	r7, #88	@ 0x58
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	603b      	str	r3, [r7, #0]
 800af10:	4613      	mov	r3, r2
 800af12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af14:	e04f      	b.n	800afb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af1c:	d04b      	beq.n	800afb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af1e:	f7f6 fa97 	bl	8001450 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	69ba      	ldr	r2, [r7, #24]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d302      	bcc.n	800af34 <UART_WaitOnFlagUntilTimeout+0x30>
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d101      	bne.n	800af38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af34:	2303      	movs	r3, #3
 800af36:	e04e      	b.n	800afd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0304 	and.w	r3, r3, #4
 800af42:	2b00      	cmp	r3, #0
 800af44:	d037      	beq.n	800afb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	2b80      	cmp	r3, #128	@ 0x80
 800af4a:	d034      	beq.n	800afb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2b40      	cmp	r3, #64	@ 0x40
 800af50:	d031      	beq.n	800afb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	69db      	ldr	r3, [r3, #28]
 800af58:	f003 0308 	and.w	r3, r3, #8
 800af5c:	2b08      	cmp	r3, #8
 800af5e:	d110      	bne.n	800af82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2208      	movs	r2, #8
 800af66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f000 f839 	bl	800afe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2208      	movs	r2, #8
 800af72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	e029      	b.n	800afd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	69db      	ldr	r3, [r3, #28]
 800af88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af90:	d111      	bne.n	800afb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f000 f81f 	bl	800afe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2220      	movs	r2, #32
 800afa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e00f      	b.n	800afd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	69da      	ldr	r2, [r3, #28]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	4013      	ands	r3, r2
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	bf0c      	ite	eq
 800afc6:	2301      	moveq	r3, #1
 800afc8:	2300      	movne	r3, #0
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	461a      	mov	r2, r3
 800afce:	79fb      	ldrb	r3, [r7, #7]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d0a0      	beq.n	800af16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
	...

0800afe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b095      	sub	sp, #84	@ 0x54
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aff0:	e853 3f00 	ldrex	r3, [r3]
 800aff4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800affc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	461a      	mov	r2, r3
 800b004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b006:	643b      	str	r3, [r7, #64]	@ 0x40
 800b008:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b00c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b00e:	e841 2300 	strex	r3, r2, [r1]
 800b012:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1e6      	bne.n	800afe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	3308      	adds	r3, #8
 800b020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b022:	6a3b      	ldr	r3, [r7, #32]
 800b024:	e853 3f00 	ldrex	r3, [r3]
 800b028:	61fb      	str	r3, [r7, #28]
   return(result);
 800b02a:	69fa      	ldr	r2, [r7, #28]
 800b02c:	4b1e      	ldr	r3, [pc, #120]	@ (800b0a8 <UART_EndRxTransfer+0xc8>)
 800b02e:	4013      	ands	r3, r2
 800b030:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	3308      	adds	r3, #8
 800b038:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b03a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b03c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b042:	e841 2300 	strex	r3, r2, [r1]
 800b046:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1e5      	bne.n	800b01a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b052:	2b01      	cmp	r3, #1
 800b054:	d118      	bne.n	800b088 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	e853 3f00 	ldrex	r3, [r3]
 800b062:	60bb      	str	r3, [r7, #8]
   return(result);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	f023 0310 	bic.w	r3, r3, #16
 800b06a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	461a      	mov	r2, r3
 800b072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b074:	61bb      	str	r3, [r7, #24]
 800b076:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b078:	6979      	ldr	r1, [r7, #20]
 800b07a:	69ba      	ldr	r2, [r7, #24]
 800b07c:	e841 2300 	strex	r3, r2, [r1]
 800b080:	613b      	str	r3, [r7, #16]
   return(result);
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1e6      	bne.n	800b056 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2220      	movs	r2, #32
 800b08c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b09c:	bf00      	nop
 800b09e:	3754      	adds	r7, #84	@ 0x54
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	effffffe 	.word	0xeffffffe

0800b0ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f7ff f854 	bl	800a170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0c8:	bf00      	nop
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	e853 3f00 	ldrex	r3, [r3]
 800b0e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0ec:	61fb      	str	r3, [r7, #28]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	61bb      	str	r3, [r7, #24]
 800b0f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fa:	6979      	ldr	r1, [r7, #20]
 800b0fc:	69ba      	ldr	r2, [r7, #24]
 800b0fe:	e841 2300 	strex	r3, r2, [r1]
 800b102:	613b      	str	r3, [r7, #16]
   return(result);
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1e6      	bne.n	800b0d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2220      	movs	r2, #32
 800b10e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7ff f81f 	bl	800a15c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b11e:	bf00      	nop
 800b120:	3720      	adds	r7, #32
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b12e:	bf00      	nop
 800b130:	370c      	adds	r7, #12
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr

0800b13a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b13a:	b480      	push	{r7}
 800b13c:	b083      	sub	sp, #12
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b142:	bf00      	nop
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b14e:	b480      	push	{r7}
 800b150:	b083      	sub	sp, #12
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b156:	bf00      	nop
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b162:	b480      	push	{r7}
 800b164:	b085      	sub	sp, #20
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b170:	2b01      	cmp	r3, #1
 800b172:	d101      	bne.n	800b178 <HAL_UARTEx_DisableFifoMode+0x16>
 800b174:	2302      	movs	r3, #2
 800b176:	e027      	b.n	800b1c8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2224      	movs	r2, #36	@ 0x24
 800b184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f022 0201 	bic.w	r2, r2, #1
 800b19e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b1a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2220      	movs	r2, #32
 800b1ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d101      	bne.n	800b1ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	e02d      	b.n	800b248 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2224      	movs	r2, #36	@ 0x24
 800b1f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f022 0201 	bic.w	r2, r2, #1
 800b212:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	430a      	orrs	r2, r1
 800b226:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f84f 	bl	800b2cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2220      	movs	r2, #32
 800b23a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b260:	2b01      	cmp	r3, #1
 800b262:	d101      	bne.n	800b268 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b264:	2302      	movs	r3, #2
 800b266:	e02d      	b.n	800b2c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2224      	movs	r2, #36	@ 0x24
 800b274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f022 0201 	bic.w	r2, r2, #1
 800b28e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f811 	bl	800b2cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d108      	bne.n	800b2ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b2ec:	e031      	b.n	800b352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b2ee:	2310      	movs	r3, #16
 800b2f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b2f2:	2310      	movs	r3, #16
 800b2f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	0e5b      	lsrs	r3, r3, #25
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	f003 0307 	and.w	r3, r3, #7
 800b304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	0f5b      	lsrs	r3, r3, #29
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	f003 0307 	and.w	r3, r3, #7
 800b314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	7b3a      	ldrb	r2, [r7, #12]
 800b31a:	4911      	ldr	r1, [pc, #68]	@ (800b360 <UARTEx_SetNbDataToProcess+0x94>)
 800b31c:	5c8a      	ldrb	r2, [r1, r2]
 800b31e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b322:	7b3a      	ldrb	r2, [r7, #12]
 800b324:	490f      	ldr	r1, [pc, #60]	@ (800b364 <UARTEx_SetNbDataToProcess+0x98>)
 800b326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b328:	fb93 f3f2 	sdiv	r3, r3, r2
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	7b7a      	ldrb	r2, [r7, #13]
 800b338:	4909      	ldr	r1, [pc, #36]	@ (800b360 <UARTEx_SetNbDataToProcess+0x94>)
 800b33a:	5c8a      	ldrb	r2, [r1, r2]
 800b33c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b340:	7b7a      	ldrb	r2, [r7, #13]
 800b342:	4908      	ldr	r1, [pc, #32]	@ (800b364 <UARTEx_SetNbDataToProcess+0x98>)
 800b344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b346:	fb93 f3f2 	sdiv	r3, r3, r2
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b352:	bf00      	nop
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	0800c95c 	.word	0x0800c95c
 800b364:	0800c964 	.word	0x0800c964

0800b368 <init_package_data>:
package_data_t package_data[2];
char package_data_index = 0;


void init_package_data(void)
{
 800b368:	b480      	push	{r7}
 800b36a:	af00      	add	r7, sp, #0
	package_data[0].packege_number = 0;
 800b36c:	4b08      	ldr	r3, [pc, #32]	@ (800b390 <init_package_data+0x28>)
 800b36e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b372:	2200      	movs	r2, #0
 800b374:	f8a3 27ac 	strh.w	r2, [r3, #1964]	@ 0x7ac
	package_data[1].packege_number = 0;
 800b378:	4b05      	ldr	r3, [pc, #20]	@ (800b390 <init_package_data+0x28>)
 800b37a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b37e:	2200      	movs	r2, #0
 800b380:	f8a3 2f5c 	strh.w	r2, [r3, #3932]	@ 0xf5c
}
 800b384:	bf00      	nop
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	24000280 	.word	0x24000280

0800b394 <write_package_data>:

package_data_t* write_package_data()
{
 800b394:	b480      	push	{r7}
 800b396:	af00      	add	r7, sp, #0
    return &package_data[package_data_index];
 800b398:	4b06      	ldr	r3, [pc, #24]	@ (800b3b4 <write_package_data+0x20>)
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	461a      	mov	r2, r3
 800b39e:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 800b3a2:	fb02 f303 	mul.w	r3, r2, r3
 800b3a6:	4a04      	ldr	r2, [pc, #16]	@ (800b3b8 <write_package_data+0x24>)
 800b3a8:	4413      	add	r3, r2
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	240031e0 	.word	0x240031e0
 800b3b8:	24000280 	.word	0x24000280

0800b3bc <manager_init>:
uint64_t prev_imu_timer = 0;
uint64_t prev_temperature_timer = 0;
uint64_t prev_send_timer = 0;

void manager_init(void)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	af00      	add	r7, sp, #0
	//Memory
	init_package_data();
 800b3c0:	f7ff ffd2 	bl	800b368 <init_package_data>
	//Temperature
	//temperature_init();
	//CNSS
	//cnss_init();
	//IMU
	imu_init();
 800b3c4:	f000 f828 	bl	800b418 <imu_init>
	//NB_IoT
	//nb_iot_init();
	//SD_CARD
	//sd_card_init();

}
 800b3c8:	bf00      	nop
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <manager_update>:
void manager_update(void)
{
 800b3cc:	b5b0      	push	{r4, r5, r7, lr}
 800b3ce:	af00      	add	r7, sp, #0
	current_time = extended_tick;
 800b3d0:	490e      	ldr	r1, [pc, #56]	@ (800b40c <manager_update+0x40>)
 800b3d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3d6:	4c0e      	ldr	r4, [pc, #56]	@ (800b410 <manager_update+0x44>)
 800b3d8:	e9c4 0100 	strd	r0, r1, [r4]

	if (current_time - prev_imu_timer >= IMU_SAMPLE_PERIOD_UC)
 800b3dc:	490c      	ldr	r1, [pc, #48]	@ (800b410 <manager_update+0x44>)
 800b3de:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b3e2:	490c      	ldr	r1, [pc, #48]	@ (800b414 <manager_update+0x48>)
 800b3e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3e8:	1a22      	subs	r2, r4, r0
 800b3ea:	eb65 0301 	sbc.w	r3, r5, r1
 800b3ee:	f5b2 7f16 	cmp.w	r2, #600	@ 0x258
 800b3f2:	f173 0300 	sbcs.w	r3, r3, #0
 800b3f6:	d307      	bcc.n	800b408 <manager_update+0x3c>
	{
		//IMU
		imu_update(); //not tested
 800b3f8:	f000 f89c 	bl	800b534 <imu_update>
		prev_imu_timer = current_time;
 800b3fc:	4b04      	ldr	r3, [pc, #16]	@ (800b410 <manager_update+0x44>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	4904      	ldr	r1, [pc, #16]	@ (800b414 <manager_update+0x48>)
 800b404:	e9c1 2300 	strd	r2, r3, [r1]
		update_package_data();
		sd_card_update();
		prev_send_timer = current_time;
	}
	*/
}
 800b408:	bf00      	nop
 800b40a:	bdb0      	pop	{r4, r5, r7, pc}
 800b40c:	24000148 	.word	0x24000148
 800b410:	240031e8 	.word	0x240031e8
 800b414:	240031f0 	.word	0x240031f0

0800b418 <imu_init>:
unsigned int sample_count = 0;

char imu_msg_buffer[32];

void imu_init (void)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af04      	add	r7, sp, #16
	///*
	uint8_t found = 0;
 800b41e:	2300      	movs	r3, #0
 800b420:	71fb      	strb	r3, [r7, #7]
	printf("Scanning I2C bus...\n");
 800b422:	483c      	ldr	r0, [pc, #240]	@ (800b514 <imu_init+0xfc>)
 800b424:	f000 fa00 	bl	800b828 <puts>
	for (uint8_t addr = 0x08; addr <= 0x77; addr++)
 800b428:	2308      	movs	r3, #8
 800b42a:	71bb      	strb	r3, [r7, #6]
 800b42c:	e01f      	b.n	800b46e <imu_init+0x56>
	{
		HAL_I2C_IsDeviceReady(IMU_I2C, addr << 1, 3, 10);
 800b42e:	79bb      	ldrb	r3, [r7, #6]
 800b430:	b29b      	uxth	r3, r3
 800b432:	005b      	lsls	r3, r3, #1
 800b434:	b299      	uxth	r1, r3
 800b436:	230a      	movs	r3, #10
 800b438:	2203      	movs	r2, #3
 800b43a:	4837      	ldr	r0, [pc, #220]	@ (800b518 <imu_init+0x100>)
 800b43c:	f7f8 fb20 	bl	8003a80 <HAL_I2C_IsDeviceReady>
		if (HAL_I2C_IsDeviceReady(IMU_I2C, addr << 1, 3, 10) == HAL_OK)
 800b440:	79bb      	ldrb	r3, [r7, #6]
 800b442:	b29b      	uxth	r3, r3
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	b299      	uxth	r1, r3
 800b448:	230a      	movs	r3, #10
 800b44a:	2203      	movs	r2, #3
 800b44c:	4832      	ldr	r0, [pc, #200]	@ (800b518 <imu_init+0x100>)
 800b44e:	f7f8 fb17 	bl	8003a80 <HAL_I2C_IsDeviceReady>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d107      	bne.n	800b468 <imu_init+0x50>
		{
			printf("Device found at 0x%02X\n", addr);
 800b458:	79bb      	ldrb	r3, [r7, #6]
 800b45a:	4619      	mov	r1, r3
 800b45c:	482f      	ldr	r0, [pc, #188]	@ (800b51c <imu_init+0x104>)
 800b45e:	f000 f97b 	bl	800b758 <iprintf>
			found++;
 800b462:	79fb      	ldrb	r3, [r7, #7]
 800b464:	3301      	adds	r3, #1
 800b466:	71fb      	strb	r3, [r7, #7]
	for (uint8_t addr = 0x08; addr <= 0x77; addr++)
 800b468:	79bb      	ldrb	r3, [r7, #6]
 800b46a:	3301      	adds	r3, #1
 800b46c:	71bb      	strb	r3, [r7, #6]
 800b46e:	79bb      	ldrb	r3, [r7, #6]
 800b470:	2b77      	cmp	r3, #119	@ 0x77
 800b472:	d9dc      	bls.n	800b42e <imu_init+0x16>
		}
	}
	if (!found) printf("No devices found.\n");
 800b474:	79fb      	ldrb	r3, [r7, #7]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d102      	bne.n	800b480 <imu_init+0x68>
 800b47a:	4829      	ldr	r0, [pc, #164]	@ (800b520 <imu_init+0x108>)
 800b47c:	f000 f9d4 	bl	800b828 <puts>
	//*/

	///*
	uint8_t whoami = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(IMU_I2C, ITG3205_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &whoami, 1, 100);
 800b484:	2364      	movs	r3, #100	@ 0x64
 800b486:	9302      	str	r3, [sp, #8]
 800b488:	2301      	movs	r3, #1
 800b48a:	9301      	str	r3, [sp, #4]
 800b48c:	1d7b      	adds	r3, r7, #5
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	2301      	movs	r3, #1
 800b492:	2200      	movs	r2, #0
 800b494:	21d0      	movs	r1, #208	@ 0xd0
 800b496:	4820      	ldr	r0, [pc, #128]	@ (800b518 <imu_init+0x100>)
 800b498:	f7f8 f94e 	bl	8003738 <HAL_I2C_Mem_Read>
	sprintf(imu_msg_buffer, "\r\nWHO_AM_I: 0x%02X\r\n", whoami);
 800b49c:	797b      	ldrb	r3, [r7, #5]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	4920      	ldr	r1, [pc, #128]	@ (800b524 <imu_init+0x10c>)
 800b4a2:	4821      	ldr	r0, [pc, #132]	@ (800b528 <imu_init+0x110>)
 800b4a4:	f000 f9c8 	bl	800b838 <siprintf>
	HAL_UART_Transmit(DEBUG_UART, imu_msg_buffer, 20, -1);
 800b4a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b4ac:	2214      	movs	r2, #20
 800b4ae:	491e      	ldr	r1, [pc, #120]	@ (800b528 <imu_init+0x110>)
 800b4b0:	481e      	ldr	r0, [pc, #120]	@ (800b52c <imu_init+0x114>)
 800b4b2:	f7fe f9ef 	bl	8009894 <HAL_UART_Transmit>
	// ADXL345: set measurement mode
	//buf[0] = 0x2D; buf[1] = 0x08;
	//HAL_I2C_Master_Transmit(hi2c, ADXL345_ADDR, buf, 2, 100);

	// Set Sample Rate Divider
	uint8_t val = 0x07;
 800b4b6:	2307      	movs	r3, #7
 800b4b8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write_IT(IMU_I2C, ITG3205_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, &val, 1);
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	9301      	str	r3, [sp, #4]
 800b4be:	1d3b      	adds	r3, r7, #4
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	2215      	movs	r2, #21
 800b4c6:	21d0      	movs	r1, #208	@ 0xd0
 800b4c8:	4813      	ldr	r0, [pc, #76]	@ (800b518 <imu_init+0x100>)
 800b4ca:	f7f8 fa4f 	bl	800396c <HAL_I2C_Mem_Write_IT>

	// Set DLPF and full scale
	val = 0x1B;
 800b4ce:	231b      	movs	r3, #27
 800b4d0:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write_IT(IMU_I2C, ITG3205_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, &val, 1);
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	1d3b      	adds	r3, r7, #4
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	2301      	movs	r3, #1
 800b4dc:	2216      	movs	r2, #22
 800b4de:	21d0      	movs	r1, #208	@ 0xd0
 800b4e0:	480d      	ldr	r0, [pc, #52]	@ (800b518 <imu_init+0x100>)
 800b4e2:	f7f8 fa43 	bl	800396c <HAL_I2C_Mem_Write_IT>

	// Power management
	val = 0x03;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write_IT(IMU_I2C, ITG3205_ADDR, 0x3E, I2C_MEMADD_SIZE_8BIT, &val, 1);
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	1d3b      	adds	r3, r7, #4
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	223e      	movs	r2, #62	@ 0x3e
 800b4f6:	21d0      	movs	r1, #208	@ 0xd0
 800b4f8:	4807      	ldr	r0, [pc, #28]	@ (800b518 <imu_init+0x100>)
 800b4fa:	f7f8 fa37 	bl	800396c <HAL_I2C_Mem_Write_IT>

	HAL_UART_Transmit(DEBUG_UART, IMU_INIT_MSG , sizeof IMU_INIT_MSG , -1);
 800b4fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b502:	220e      	movs	r2, #14
 800b504:	490a      	ldr	r1, [pc, #40]	@ (800b530 <imu_init+0x118>)
 800b506:	4809      	ldr	r0, [pc, #36]	@ (800b52c <imu_init+0x114>)
 800b508:	f7fe f9c4 	bl	8009894 <HAL_UART_Transmit>
	// HMC5883L: configure for continuous measurement
	//buf[0]=0x02; buf[1]=0x00; HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDR, buf, 2, 100);
	//buf[0]=0x00; buf[1]=0x70; HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDR, buf, 2, 100);
	//buf[0]=0x01; buf[1]=0xA0; HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDR, buf, 2, 100);

}
 800b50c:	bf00      	nop
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	0800c8b4 	.word	0x0800c8b4
 800b518:	240000f0 	.word	0x240000f0
 800b51c:	0800c8c8 	.word	0x0800c8c8
 800b520:	0800c8e0 	.word	0x0800c8e0
 800b524:	0800c8f4 	.word	0x0800c8f4
 800b528:	240031fc 	.word	0x240031fc
 800b52c:	240001e8 	.word	0x240001e8
 800b530:	0800c90c 	.word	0x0800c90c

0800b534 <imu_update>:

void imu_update (void)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af04      	add	r7, sp, #16

    if (sample_count < IMU_NUMBER_OF_SAMPLES)
 800b53a:	4b21      	ldr	r3, [pc, #132]	@ (800b5c0 <imu_update+0x8c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800b542:	4293      	cmp	r3, r2
 800b544:	d835      	bhi.n	800b5b2 <imu_update+0x7e>
    {
        uint8_t buf[2];
        HAL_I2C_Mem_Read(IMU_I2C, ITG3205_ADDR, 0x21, 1, buf, 2, 100); // ZOUT_H, ZOUT_L
 800b546:	2364      	movs	r3, #100	@ 0x64
 800b548:	9302      	str	r3, [sp, #8]
 800b54a:	2302      	movs	r3, #2
 800b54c:	9301      	str	r3, [sp, #4]
 800b54e:	463b      	mov	r3, r7
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	2301      	movs	r3, #1
 800b554:	2221      	movs	r2, #33	@ 0x21
 800b556:	21d0      	movs	r1, #208	@ 0xd0
 800b558:	481a      	ldr	r0, [pc, #104]	@ (800b5c4 <imu_update+0x90>)
 800b55a:	f7f8 f8ed 	bl	8003738 <HAL_I2C_Mem_Read>


        package_data_t* imu_data = write_package_data();
 800b55e:	f7ff ff19 	bl	800b394 <write_package_data>
 800b562:	6078      	str	r0, [r7, #4]
    	imu_data->imu[sample_count] = (int16_t)(buf[0] << 8 | buf[1]);
 800b564:	783b      	ldrb	r3, [r7, #0]
 800b566:	b21b      	sxth	r3, r3
 800b568:	021b      	lsls	r3, r3, #8
 800b56a:	b219      	sxth	r1, r3
 800b56c:	787b      	ldrb	r3, [r7, #1]
 800b56e:	b21b      	sxth	r3, r3
 800b570:	4a13      	ldr	r2, [pc, #76]	@ (800b5c0 <imu_update+0x8c>)
 800b572:	6812      	ldr	r2, [r2, #0]
 800b574:	430b      	orrs	r3, r1
 800b576:	b219      	sxth	r1, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3218      	adds	r2, #24
 800b57c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    	//Debug
        sprintf(imu_msg_buffer, "\r\nZ: %02X %02X = %d\r\n", buf[0], buf[1], imu_data->imu[sample_count]);
 800b580:	783b      	ldrb	r3, [r7, #0]
 800b582:	4619      	mov	r1, r3
 800b584:	787b      	ldrb	r3, [r7, #1]
 800b586:	4618      	mov	r0, r3
 800b588:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c0 <imu_update+0x8c>)
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	3218      	adds	r2, #24
 800b590:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	4603      	mov	r3, r0
 800b598:	460a      	mov	r2, r1
 800b59a:	490b      	ldr	r1, [pc, #44]	@ (800b5c8 <imu_update+0x94>)
 800b59c:	480b      	ldr	r0, [pc, #44]	@ (800b5cc <imu_update+0x98>)
 800b59e:	f000 f94b 	bl	800b838 <siprintf>
        HAL_UART_Transmit(DEBUG_UART, imu_msg_buffer, 32, -1);
 800b5a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b5a6:	2220      	movs	r2, #32
 800b5a8:	4908      	ldr	r1, [pc, #32]	@ (800b5cc <imu_update+0x98>)
 800b5aa:	4809      	ldr	r0, [pc, #36]	@ (800b5d0 <imu_update+0x9c>)
 800b5ac:	f7fe f972 	bl	8009894 <HAL_UART_Transmit>

    }
    else
    	sample_count = 0;
}
 800b5b0:	e002      	b.n	800b5b8 <imu_update+0x84>
    	sample_count = 0;
 800b5b2:	4b03      	ldr	r3, [pc, #12]	@ (800b5c0 <imu_update+0x8c>)
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	601a      	str	r2, [r3, #0]
}
 800b5b8:	bf00      	nop
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	240031f8 	.word	0x240031f8
 800b5c4:	240000f0 	.word	0x240000f0
 800b5c8:	0800c91c 	.word	0x0800c91c
 800b5cc:	240031fc 	.word	0x240031fc
 800b5d0:	240001e8 	.word	0x240001e8

0800b5d4 <std>:
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	b510      	push	{r4, lr}
 800b5d8:	4604      	mov	r4, r0
 800b5da:	e9c0 3300 	strd	r3, r3, [r0]
 800b5de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5e2:	6083      	str	r3, [r0, #8]
 800b5e4:	8181      	strh	r1, [r0, #12]
 800b5e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b5e8:	81c2      	strh	r2, [r0, #14]
 800b5ea:	6183      	str	r3, [r0, #24]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	2208      	movs	r2, #8
 800b5f0:	305c      	adds	r0, #92	@ 0x5c
 800b5f2:	f000 fa1b 	bl	800ba2c <memset>
 800b5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b62c <std+0x58>)
 800b5f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b5fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b630 <std+0x5c>)
 800b5fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b5fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b634 <std+0x60>)
 800b600:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b602:	4b0d      	ldr	r3, [pc, #52]	@ (800b638 <std+0x64>)
 800b604:	6323      	str	r3, [r4, #48]	@ 0x30
 800b606:	4b0d      	ldr	r3, [pc, #52]	@ (800b63c <std+0x68>)
 800b608:	6224      	str	r4, [r4, #32]
 800b60a:	429c      	cmp	r4, r3
 800b60c:	d006      	beq.n	800b61c <std+0x48>
 800b60e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b612:	4294      	cmp	r4, r2
 800b614:	d002      	beq.n	800b61c <std+0x48>
 800b616:	33d0      	adds	r3, #208	@ 0xd0
 800b618:	429c      	cmp	r4, r3
 800b61a:	d105      	bne.n	800b628 <std+0x54>
 800b61c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b624:	f000 ba7a 	b.w	800bb1c <__retarget_lock_init_recursive>
 800b628:	bd10      	pop	{r4, pc}
 800b62a:	bf00      	nop
 800b62c:	0800b87d 	.word	0x0800b87d
 800b630:	0800b89f 	.word	0x0800b89f
 800b634:	0800b8d7 	.word	0x0800b8d7
 800b638:	0800b8fb 	.word	0x0800b8fb
 800b63c:	2400321c 	.word	0x2400321c

0800b640 <stdio_exit_handler>:
 800b640:	4a02      	ldr	r2, [pc, #8]	@ (800b64c <stdio_exit_handler+0xc>)
 800b642:	4903      	ldr	r1, [pc, #12]	@ (800b650 <stdio_exit_handler+0x10>)
 800b644:	4803      	ldr	r0, [pc, #12]	@ (800b654 <stdio_exit_handler+0x14>)
 800b646:	f000 b869 	b.w	800b71c <_fwalk_sglue>
 800b64a:	bf00      	nop
 800b64c:	24000010 	.word	0x24000010
 800b650:	0800c669 	.word	0x0800c669
 800b654:	24000020 	.word	0x24000020

0800b658 <cleanup_stdio>:
 800b658:	6841      	ldr	r1, [r0, #4]
 800b65a:	4b0c      	ldr	r3, [pc, #48]	@ (800b68c <cleanup_stdio+0x34>)
 800b65c:	4299      	cmp	r1, r3
 800b65e:	b510      	push	{r4, lr}
 800b660:	4604      	mov	r4, r0
 800b662:	d001      	beq.n	800b668 <cleanup_stdio+0x10>
 800b664:	f001 f800 	bl	800c668 <_fflush_r>
 800b668:	68a1      	ldr	r1, [r4, #8]
 800b66a:	4b09      	ldr	r3, [pc, #36]	@ (800b690 <cleanup_stdio+0x38>)
 800b66c:	4299      	cmp	r1, r3
 800b66e:	d002      	beq.n	800b676 <cleanup_stdio+0x1e>
 800b670:	4620      	mov	r0, r4
 800b672:	f000 fff9 	bl	800c668 <_fflush_r>
 800b676:	68e1      	ldr	r1, [r4, #12]
 800b678:	4b06      	ldr	r3, [pc, #24]	@ (800b694 <cleanup_stdio+0x3c>)
 800b67a:	4299      	cmp	r1, r3
 800b67c:	d004      	beq.n	800b688 <cleanup_stdio+0x30>
 800b67e:	4620      	mov	r0, r4
 800b680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b684:	f000 bff0 	b.w	800c668 <_fflush_r>
 800b688:	bd10      	pop	{r4, pc}
 800b68a:	bf00      	nop
 800b68c:	2400321c 	.word	0x2400321c
 800b690:	24003284 	.word	0x24003284
 800b694:	240032ec 	.word	0x240032ec

0800b698 <global_stdio_init.part.0>:
 800b698:	b510      	push	{r4, lr}
 800b69a:	4b0b      	ldr	r3, [pc, #44]	@ (800b6c8 <global_stdio_init.part.0+0x30>)
 800b69c:	4c0b      	ldr	r4, [pc, #44]	@ (800b6cc <global_stdio_init.part.0+0x34>)
 800b69e:	4a0c      	ldr	r2, [pc, #48]	@ (800b6d0 <global_stdio_init.part.0+0x38>)
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2104      	movs	r1, #4
 800b6a8:	f7ff ff94 	bl	800b5d4 <std>
 800b6ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	2109      	movs	r1, #9
 800b6b4:	f7ff ff8e 	bl	800b5d4 <std>
 800b6b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b6bc:	2202      	movs	r2, #2
 800b6be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6c2:	2112      	movs	r1, #18
 800b6c4:	f7ff bf86 	b.w	800b5d4 <std>
 800b6c8:	24003354 	.word	0x24003354
 800b6cc:	2400321c 	.word	0x2400321c
 800b6d0:	0800b641 	.word	0x0800b641

0800b6d4 <__sfp_lock_acquire>:
 800b6d4:	4801      	ldr	r0, [pc, #4]	@ (800b6dc <__sfp_lock_acquire+0x8>)
 800b6d6:	f000 ba22 	b.w	800bb1e <__retarget_lock_acquire_recursive>
 800b6da:	bf00      	nop
 800b6dc:	2400335d 	.word	0x2400335d

0800b6e0 <__sfp_lock_release>:
 800b6e0:	4801      	ldr	r0, [pc, #4]	@ (800b6e8 <__sfp_lock_release+0x8>)
 800b6e2:	f000 ba1d 	b.w	800bb20 <__retarget_lock_release_recursive>
 800b6e6:	bf00      	nop
 800b6e8:	2400335d 	.word	0x2400335d

0800b6ec <__sinit>:
 800b6ec:	b510      	push	{r4, lr}
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	f7ff fff0 	bl	800b6d4 <__sfp_lock_acquire>
 800b6f4:	6a23      	ldr	r3, [r4, #32]
 800b6f6:	b11b      	cbz	r3, 800b700 <__sinit+0x14>
 800b6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6fc:	f7ff bff0 	b.w	800b6e0 <__sfp_lock_release>
 800b700:	4b04      	ldr	r3, [pc, #16]	@ (800b714 <__sinit+0x28>)
 800b702:	6223      	str	r3, [r4, #32]
 800b704:	4b04      	ldr	r3, [pc, #16]	@ (800b718 <__sinit+0x2c>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1f5      	bne.n	800b6f8 <__sinit+0xc>
 800b70c:	f7ff ffc4 	bl	800b698 <global_stdio_init.part.0>
 800b710:	e7f2      	b.n	800b6f8 <__sinit+0xc>
 800b712:	bf00      	nop
 800b714:	0800b659 	.word	0x0800b659
 800b718:	24003354 	.word	0x24003354

0800b71c <_fwalk_sglue>:
 800b71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b720:	4607      	mov	r7, r0
 800b722:	4688      	mov	r8, r1
 800b724:	4614      	mov	r4, r2
 800b726:	2600      	movs	r6, #0
 800b728:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b72c:	f1b9 0901 	subs.w	r9, r9, #1
 800b730:	d505      	bpl.n	800b73e <_fwalk_sglue+0x22>
 800b732:	6824      	ldr	r4, [r4, #0]
 800b734:	2c00      	cmp	r4, #0
 800b736:	d1f7      	bne.n	800b728 <_fwalk_sglue+0xc>
 800b738:	4630      	mov	r0, r6
 800b73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b73e:	89ab      	ldrh	r3, [r5, #12]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d907      	bls.n	800b754 <_fwalk_sglue+0x38>
 800b744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b748:	3301      	adds	r3, #1
 800b74a:	d003      	beq.n	800b754 <_fwalk_sglue+0x38>
 800b74c:	4629      	mov	r1, r5
 800b74e:	4638      	mov	r0, r7
 800b750:	47c0      	blx	r8
 800b752:	4306      	orrs	r6, r0
 800b754:	3568      	adds	r5, #104	@ 0x68
 800b756:	e7e9      	b.n	800b72c <_fwalk_sglue+0x10>

0800b758 <iprintf>:
 800b758:	b40f      	push	{r0, r1, r2, r3}
 800b75a:	b507      	push	{r0, r1, r2, lr}
 800b75c:	4906      	ldr	r1, [pc, #24]	@ (800b778 <iprintf+0x20>)
 800b75e:	ab04      	add	r3, sp, #16
 800b760:	6808      	ldr	r0, [r1, #0]
 800b762:	f853 2b04 	ldr.w	r2, [r3], #4
 800b766:	6881      	ldr	r1, [r0, #8]
 800b768:	9301      	str	r3, [sp, #4]
 800b76a:	f000 fc55 	bl	800c018 <_vfiprintf_r>
 800b76e:	b003      	add	sp, #12
 800b770:	f85d eb04 	ldr.w	lr, [sp], #4
 800b774:	b004      	add	sp, #16
 800b776:	4770      	bx	lr
 800b778:	2400001c 	.word	0x2400001c

0800b77c <_puts_r>:
 800b77c:	6a03      	ldr	r3, [r0, #32]
 800b77e:	b570      	push	{r4, r5, r6, lr}
 800b780:	6884      	ldr	r4, [r0, #8]
 800b782:	4605      	mov	r5, r0
 800b784:	460e      	mov	r6, r1
 800b786:	b90b      	cbnz	r3, 800b78c <_puts_r+0x10>
 800b788:	f7ff ffb0 	bl	800b6ec <__sinit>
 800b78c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b78e:	07db      	lsls	r3, r3, #31
 800b790:	d405      	bmi.n	800b79e <_puts_r+0x22>
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	0598      	lsls	r0, r3, #22
 800b796:	d402      	bmi.n	800b79e <_puts_r+0x22>
 800b798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b79a:	f000 f9c0 	bl	800bb1e <__retarget_lock_acquire_recursive>
 800b79e:	89a3      	ldrh	r3, [r4, #12]
 800b7a0:	0719      	lsls	r1, r3, #28
 800b7a2:	d502      	bpl.n	800b7aa <_puts_r+0x2e>
 800b7a4:	6923      	ldr	r3, [r4, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d135      	bne.n	800b816 <_puts_r+0x9a>
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f000 f8e7 	bl	800b980 <__swsetup_r>
 800b7b2:	b380      	cbz	r0, 800b816 <_puts_r+0x9a>
 800b7b4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b7b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7ba:	07da      	lsls	r2, r3, #31
 800b7bc:	d405      	bmi.n	800b7ca <_puts_r+0x4e>
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	059b      	lsls	r3, r3, #22
 800b7c2:	d402      	bmi.n	800b7ca <_puts_r+0x4e>
 800b7c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7c6:	f000 f9ab 	bl	800bb20 <__retarget_lock_release_recursive>
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	bd70      	pop	{r4, r5, r6, pc}
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	da04      	bge.n	800b7dc <_puts_r+0x60>
 800b7d2:	69a2      	ldr	r2, [r4, #24]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	dc17      	bgt.n	800b808 <_puts_r+0x8c>
 800b7d8:	290a      	cmp	r1, #10
 800b7da:	d015      	beq.n	800b808 <_puts_r+0x8c>
 800b7dc:	6823      	ldr	r3, [r4, #0]
 800b7de:	1c5a      	adds	r2, r3, #1
 800b7e0:	6022      	str	r2, [r4, #0]
 800b7e2:	7019      	strb	r1, [r3, #0]
 800b7e4:	68a3      	ldr	r3, [r4, #8]
 800b7e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	60a3      	str	r3, [r4, #8]
 800b7ee:	2900      	cmp	r1, #0
 800b7f0:	d1ed      	bne.n	800b7ce <_puts_r+0x52>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	da11      	bge.n	800b81a <_puts_r+0x9e>
 800b7f6:	4622      	mov	r2, r4
 800b7f8:	210a      	movs	r1, #10
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	f000 f881 	bl	800b902 <__swbuf_r>
 800b800:	3001      	adds	r0, #1
 800b802:	d0d7      	beq.n	800b7b4 <_puts_r+0x38>
 800b804:	250a      	movs	r5, #10
 800b806:	e7d7      	b.n	800b7b8 <_puts_r+0x3c>
 800b808:	4622      	mov	r2, r4
 800b80a:	4628      	mov	r0, r5
 800b80c:	f000 f879 	bl	800b902 <__swbuf_r>
 800b810:	3001      	adds	r0, #1
 800b812:	d1e7      	bne.n	800b7e4 <_puts_r+0x68>
 800b814:	e7ce      	b.n	800b7b4 <_puts_r+0x38>
 800b816:	3e01      	subs	r6, #1
 800b818:	e7e4      	b.n	800b7e4 <_puts_r+0x68>
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	1c5a      	adds	r2, r3, #1
 800b81e:	6022      	str	r2, [r4, #0]
 800b820:	220a      	movs	r2, #10
 800b822:	701a      	strb	r2, [r3, #0]
 800b824:	e7ee      	b.n	800b804 <_puts_r+0x88>
	...

0800b828 <puts>:
 800b828:	4b02      	ldr	r3, [pc, #8]	@ (800b834 <puts+0xc>)
 800b82a:	4601      	mov	r1, r0
 800b82c:	6818      	ldr	r0, [r3, #0]
 800b82e:	f7ff bfa5 	b.w	800b77c <_puts_r>
 800b832:	bf00      	nop
 800b834:	2400001c 	.word	0x2400001c

0800b838 <siprintf>:
 800b838:	b40e      	push	{r1, r2, r3}
 800b83a:	b510      	push	{r4, lr}
 800b83c:	b09d      	sub	sp, #116	@ 0x74
 800b83e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b840:	9002      	str	r0, [sp, #8]
 800b842:	9006      	str	r0, [sp, #24]
 800b844:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b848:	480a      	ldr	r0, [pc, #40]	@ (800b874 <siprintf+0x3c>)
 800b84a:	9107      	str	r1, [sp, #28]
 800b84c:	9104      	str	r1, [sp, #16]
 800b84e:	490a      	ldr	r1, [pc, #40]	@ (800b878 <siprintf+0x40>)
 800b850:	f853 2b04 	ldr.w	r2, [r3], #4
 800b854:	9105      	str	r1, [sp, #20]
 800b856:	2400      	movs	r4, #0
 800b858:	a902      	add	r1, sp, #8
 800b85a:	6800      	ldr	r0, [r0, #0]
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b860:	f000 fab4 	bl	800bdcc <_svfiprintf_r>
 800b864:	9b02      	ldr	r3, [sp, #8]
 800b866:	701c      	strb	r4, [r3, #0]
 800b868:	b01d      	add	sp, #116	@ 0x74
 800b86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b86e:	b003      	add	sp, #12
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	2400001c 	.word	0x2400001c
 800b878:	ffff0208 	.word	0xffff0208

0800b87c <__sread>:
 800b87c:	b510      	push	{r4, lr}
 800b87e:	460c      	mov	r4, r1
 800b880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b884:	f000 f8fc 	bl	800ba80 <_read_r>
 800b888:	2800      	cmp	r0, #0
 800b88a:	bfab      	itete	ge
 800b88c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b88e:	89a3      	ldrhlt	r3, [r4, #12]
 800b890:	181b      	addge	r3, r3, r0
 800b892:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b896:	bfac      	ite	ge
 800b898:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b89a:	81a3      	strhlt	r3, [r4, #12]
 800b89c:	bd10      	pop	{r4, pc}

0800b89e <__swrite>:
 800b89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a2:	461f      	mov	r7, r3
 800b8a4:	898b      	ldrh	r3, [r1, #12]
 800b8a6:	05db      	lsls	r3, r3, #23
 800b8a8:	4605      	mov	r5, r0
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	4616      	mov	r6, r2
 800b8ae:	d505      	bpl.n	800b8bc <__swrite+0x1e>
 800b8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f000 f8d0 	bl	800ba5c <_lseek_r>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	4632      	mov	r2, r6
 800b8ca:	463b      	mov	r3, r7
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d2:	f000 b8e7 	b.w	800baa4 <_write_r>

0800b8d6 <__sseek>:
 800b8d6:	b510      	push	{r4, lr}
 800b8d8:	460c      	mov	r4, r1
 800b8da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8de:	f000 f8bd 	bl	800ba5c <_lseek_r>
 800b8e2:	1c43      	adds	r3, r0, #1
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	bf15      	itete	ne
 800b8e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b8ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b8ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b8f2:	81a3      	strheq	r3, [r4, #12]
 800b8f4:	bf18      	it	ne
 800b8f6:	81a3      	strhne	r3, [r4, #12]
 800b8f8:	bd10      	pop	{r4, pc}

0800b8fa <__sclose>:
 800b8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8fe:	f000 b89d 	b.w	800ba3c <_close_r>

0800b902 <__swbuf_r>:
 800b902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b904:	460e      	mov	r6, r1
 800b906:	4614      	mov	r4, r2
 800b908:	4605      	mov	r5, r0
 800b90a:	b118      	cbz	r0, 800b914 <__swbuf_r+0x12>
 800b90c:	6a03      	ldr	r3, [r0, #32]
 800b90e:	b90b      	cbnz	r3, 800b914 <__swbuf_r+0x12>
 800b910:	f7ff feec 	bl	800b6ec <__sinit>
 800b914:	69a3      	ldr	r3, [r4, #24]
 800b916:	60a3      	str	r3, [r4, #8]
 800b918:	89a3      	ldrh	r3, [r4, #12]
 800b91a:	071a      	lsls	r2, r3, #28
 800b91c:	d501      	bpl.n	800b922 <__swbuf_r+0x20>
 800b91e:	6923      	ldr	r3, [r4, #16]
 800b920:	b943      	cbnz	r3, 800b934 <__swbuf_r+0x32>
 800b922:	4621      	mov	r1, r4
 800b924:	4628      	mov	r0, r5
 800b926:	f000 f82b 	bl	800b980 <__swsetup_r>
 800b92a:	b118      	cbz	r0, 800b934 <__swbuf_r+0x32>
 800b92c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b930:	4638      	mov	r0, r7
 800b932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b934:	6823      	ldr	r3, [r4, #0]
 800b936:	6922      	ldr	r2, [r4, #16]
 800b938:	1a98      	subs	r0, r3, r2
 800b93a:	6963      	ldr	r3, [r4, #20]
 800b93c:	b2f6      	uxtb	r6, r6
 800b93e:	4283      	cmp	r3, r0
 800b940:	4637      	mov	r7, r6
 800b942:	dc05      	bgt.n	800b950 <__swbuf_r+0x4e>
 800b944:	4621      	mov	r1, r4
 800b946:	4628      	mov	r0, r5
 800b948:	f000 fe8e 	bl	800c668 <_fflush_r>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d1ed      	bne.n	800b92c <__swbuf_r+0x2a>
 800b950:	68a3      	ldr	r3, [r4, #8]
 800b952:	3b01      	subs	r3, #1
 800b954:	60a3      	str	r3, [r4, #8]
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	1c5a      	adds	r2, r3, #1
 800b95a:	6022      	str	r2, [r4, #0]
 800b95c:	701e      	strb	r6, [r3, #0]
 800b95e:	6962      	ldr	r2, [r4, #20]
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	429a      	cmp	r2, r3
 800b964:	d004      	beq.n	800b970 <__swbuf_r+0x6e>
 800b966:	89a3      	ldrh	r3, [r4, #12]
 800b968:	07db      	lsls	r3, r3, #31
 800b96a:	d5e1      	bpl.n	800b930 <__swbuf_r+0x2e>
 800b96c:	2e0a      	cmp	r6, #10
 800b96e:	d1df      	bne.n	800b930 <__swbuf_r+0x2e>
 800b970:	4621      	mov	r1, r4
 800b972:	4628      	mov	r0, r5
 800b974:	f000 fe78 	bl	800c668 <_fflush_r>
 800b978:	2800      	cmp	r0, #0
 800b97a:	d0d9      	beq.n	800b930 <__swbuf_r+0x2e>
 800b97c:	e7d6      	b.n	800b92c <__swbuf_r+0x2a>
	...

0800b980 <__swsetup_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4b29      	ldr	r3, [pc, #164]	@ (800ba28 <__swsetup_r+0xa8>)
 800b984:	4605      	mov	r5, r0
 800b986:	6818      	ldr	r0, [r3, #0]
 800b988:	460c      	mov	r4, r1
 800b98a:	b118      	cbz	r0, 800b994 <__swsetup_r+0x14>
 800b98c:	6a03      	ldr	r3, [r0, #32]
 800b98e:	b90b      	cbnz	r3, 800b994 <__swsetup_r+0x14>
 800b990:	f7ff feac 	bl	800b6ec <__sinit>
 800b994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b998:	0719      	lsls	r1, r3, #28
 800b99a:	d422      	bmi.n	800b9e2 <__swsetup_r+0x62>
 800b99c:	06da      	lsls	r2, r3, #27
 800b99e:	d407      	bmi.n	800b9b0 <__swsetup_r+0x30>
 800b9a0:	2209      	movs	r2, #9
 800b9a2:	602a      	str	r2, [r5, #0]
 800b9a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9a8:	81a3      	strh	r3, [r4, #12]
 800b9aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9ae:	e033      	b.n	800ba18 <__swsetup_r+0x98>
 800b9b0:	0758      	lsls	r0, r3, #29
 800b9b2:	d512      	bpl.n	800b9da <__swsetup_r+0x5a>
 800b9b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9b6:	b141      	cbz	r1, 800b9ca <__swsetup_r+0x4a>
 800b9b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9bc:	4299      	cmp	r1, r3
 800b9be:	d002      	beq.n	800b9c6 <__swsetup_r+0x46>
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	f000 f8af 	bl	800bb24 <_free_r>
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9ca:	89a3      	ldrh	r3, [r4, #12]
 800b9cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9d0:	81a3      	strh	r3, [r4, #12]
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	6063      	str	r3, [r4, #4]
 800b9d6:	6923      	ldr	r3, [r4, #16]
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	89a3      	ldrh	r3, [r4, #12]
 800b9dc:	f043 0308 	orr.w	r3, r3, #8
 800b9e0:	81a3      	strh	r3, [r4, #12]
 800b9e2:	6923      	ldr	r3, [r4, #16]
 800b9e4:	b94b      	cbnz	r3, 800b9fa <__swsetup_r+0x7a>
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b9ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9f0:	d003      	beq.n	800b9fa <__swsetup_r+0x7a>
 800b9f2:	4621      	mov	r1, r4
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	f000 fe85 	bl	800c704 <__smakebuf_r>
 800b9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9fe:	f013 0201 	ands.w	r2, r3, #1
 800ba02:	d00a      	beq.n	800ba1a <__swsetup_r+0x9a>
 800ba04:	2200      	movs	r2, #0
 800ba06:	60a2      	str	r2, [r4, #8]
 800ba08:	6962      	ldr	r2, [r4, #20]
 800ba0a:	4252      	negs	r2, r2
 800ba0c:	61a2      	str	r2, [r4, #24]
 800ba0e:	6922      	ldr	r2, [r4, #16]
 800ba10:	b942      	cbnz	r2, 800ba24 <__swsetup_r+0xa4>
 800ba12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba16:	d1c5      	bne.n	800b9a4 <__swsetup_r+0x24>
 800ba18:	bd38      	pop	{r3, r4, r5, pc}
 800ba1a:	0799      	lsls	r1, r3, #30
 800ba1c:	bf58      	it	pl
 800ba1e:	6962      	ldrpl	r2, [r4, #20]
 800ba20:	60a2      	str	r2, [r4, #8]
 800ba22:	e7f4      	b.n	800ba0e <__swsetup_r+0x8e>
 800ba24:	2000      	movs	r0, #0
 800ba26:	e7f7      	b.n	800ba18 <__swsetup_r+0x98>
 800ba28:	2400001c 	.word	0x2400001c

0800ba2c <memset>:
 800ba2c:	4402      	add	r2, r0
 800ba2e:	4603      	mov	r3, r0
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d100      	bne.n	800ba36 <memset+0xa>
 800ba34:	4770      	bx	lr
 800ba36:	f803 1b01 	strb.w	r1, [r3], #1
 800ba3a:	e7f9      	b.n	800ba30 <memset+0x4>

0800ba3c <_close_r>:
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	4d06      	ldr	r5, [pc, #24]	@ (800ba58 <_close_r+0x1c>)
 800ba40:	2300      	movs	r3, #0
 800ba42:	4604      	mov	r4, r0
 800ba44:	4608      	mov	r0, r1
 800ba46:	602b      	str	r3, [r5, #0]
 800ba48:	f7f5 fa6d 	bl	8000f26 <_close>
 800ba4c:	1c43      	adds	r3, r0, #1
 800ba4e:	d102      	bne.n	800ba56 <_close_r+0x1a>
 800ba50:	682b      	ldr	r3, [r5, #0]
 800ba52:	b103      	cbz	r3, 800ba56 <_close_r+0x1a>
 800ba54:	6023      	str	r3, [r4, #0]
 800ba56:	bd38      	pop	{r3, r4, r5, pc}
 800ba58:	24003358 	.word	0x24003358

0800ba5c <_lseek_r>:
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	4d07      	ldr	r5, [pc, #28]	@ (800ba7c <_lseek_r+0x20>)
 800ba60:	4604      	mov	r4, r0
 800ba62:	4608      	mov	r0, r1
 800ba64:	4611      	mov	r1, r2
 800ba66:	2200      	movs	r2, #0
 800ba68:	602a      	str	r2, [r5, #0]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	f7f5 fa82 	bl	8000f74 <_lseek>
 800ba70:	1c43      	adds	r3, r0, #1
 800ba72:	d102      	bne.n	800ba7a <_lseek_r+0x1e>
 800ba74:	682b      	ldr	r3, [r5, #0]
 800ba76:	b103      	cbz	r3, 800ba7a <_lseek_r+0x1e>
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	bd38      	pop	{r3, r4, r5, pc}
 800ba7c:	24003358 	.word	0x24003358

0800ba80 <_read_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	4d07      	ldr	r5, [pc, #28]	@ (800baa0 <_read_r+0x20>)
 800ba84:	4604      	mov	r4, r0
 800ba86:	4608      	mov	r0, r1
 800ba88:	4611      	mov	r1, r2
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	602a      	str	r2, [r5, #0]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	f7f5 fa10 	bl	8000eb4 <_read>
 800ba94:	1c43      	adds	r3, r0, #1
 800ba96:	d102      	bne.n	800ba9e <_read_r+0x1e>
 800ba98:	682b      	ldr	r3, [r5, #0]
 800ba9a:	b103      	cbz	r3, 800ba9e <_read_r+0x1e>
 800ba9c:	6023      	str	r3, [r4, #0]
 800ba9e:	bd38      	pop	{r3, r4, r5, pc}
 800baa0:	24003358 	.word	0x24003358

0800baa4 <_write_r>:
 800baa4:	b538      	push	{r3, r4, r5, lr}
 800baa6:	4d07      	ldr	r5, [pc, #28]	@ (800bac4 <_write_r+0x20>)
 800baa8:	4604      	mov	r4, r0
 800baaa:	4608      	mov	r0, r1
 800baac:	4611      	mov	r1, r2
 800baae:	2200      	movs	r2, #0
 800bab0:	602a      	str	r2, [r5, #0]
 800bab2:	461a      	mov	r2, r3
 800bab4:	f7f5 fa1b 	bl	8000eee <_write>
 800bab8:	1c43      	adds	r3, r0, #1
 800baba:	d102      	bne.n	800bac2 <_write_r+0x1e>
 800babc:	682b      	ldr	r3, [r5, #0]
 800babe:	b103      	cbz	r3, 800bac2 <_write_r+0x1e>
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	24003358 	.word	0x24003358

0800bac8 <__errno>:
 800bac8:	4b01      	ldr	r3, [pc, #4]	@ (800bad0 <__errno+0x8>)
 800baca:	6818      	ldr	r0, [r3, #0]
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop
 800bad0:	2400001c 	.word	0x2400001c

0800bad4 <__libc_init_array>:
 800bad4:	b570      	push	{r4, r5, r6, lr}
 800bad6:	4d0d      	ldr	r5, [pc, #52]	@ (800bb0c <__libc_init_array+0x38>)
 800bad8:	4c0d      	ldr	r4, [pc, #52]	@ (800bb10 <__libc_init_array+0x3c>)
 800bada:	1b64      	subs	r4, r4, r5
 800badc:	10a4      	asrs	r4, r4, #2
 800bade:	2600      	movs	r6, #0
 800bae0:	42a6      	cmp	r6, r4
 800bae2:	d109      	bne.n	800baf8 <__libc_init_array+0x24>
 800bae4:	4d0b      	ldr	r5, [pc, #44]	@ (800bb14 <__libc_init_array+0x40>)
 800bae6:	4c0c      	ldr	r4, [pc, #48]	@ (800bb18 <__libc_init_array+0x44>)
 800bae8:	f000 fed8 	bl	800c89c <_init>
 800baec:	1b64      	subs	r4, r4, r5
 800baee:	10a4      	asrs	r4, r4, #2
 800baf0:	2600      	movs	r6, #0
 800baf2:	42a6      	cmp	r6, r4
 800baf4:	d105      	bne.n	800bb02 <__libc_init_array+0x2e>
 800baf6:	bd70      	pop	{r4, r5, r6, pc}
 800baf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bafc:	4798      	blx	r3
 800bafe:	3601      	adds	r6, #1
 800bb00:	e7ee      	b.n	800bae0 <__libc_init_array+0xc>
 800bb02:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb06:	4798      	blx	r3
 800bb08:	3601      	adds	r6, #1
 800bb0a:	e7f2      	b.n	800baf2 <__libc_init_array+0x1e>
 800bb0c:	0800c9a8 	.word	0x0800c9a8
 800bb10:	0800c9a8 	.word	0x0800c9a8
 800bb14:	0800c9a8 	.word	0x0800c9a8
 800bb18:	0800c9ac 	.word	0x0800c9ac

0800bb1c <__retarget_lock_init_recursive>:
 800bb1c:	4770      	bx	lr

0800bb1e <__retarget_lock_acquire_recursive>:
 800bb1e:	4770      	bx	lr

0800bb20 <__retarget_lock_release_recursive>:
 800bb20:	4770      	bx	lr
	...

0800bb24 <_free_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	4605      	mov	r5, r0
 800bb28:	2900      	cmp	r1, #0
 800bb2a:	d041      	beq.n	800bbb0 <_free_r+0x8c>
 800bb2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb30:	1f0c      	subs	r4, r1, #4
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bfb8      	it	lt
 800bb36:	18e4      	addlt	r4, r4, r3
 800bb38:	f000 f8e0 	bl	800bcfc <__malloc_lock>
 800bb3c:	4a1d      	ldr	r2, [pc, #116]	@ (800bbb4 <_free_r+0x90>)
 800bb3e:	6813      	ldr	r3, [r2, #0]
 800bb40:	b933      	cbnz	r3, 800bb50 <_free_r+0x2c>
 800bb42:	6063      	str	r3, [r4, #4]
 800bb44:	6014      	str	r4, [r2, #0]
 800bb46:	4628      	mov	r0, r5
 800bb48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb4c:	f000 b8dc 	b.w	800bd08 <__malloc_unlock>
 800bb50:	42a3      	cmp	r3, r4
 800bb52:	d908      	bls.n	800bb66 <_free_r+0x42>
 800bb54:	6820      	ldr	r0, [r4, #0]
 800bb56:	1821      	adds	r1, r4, r0
 800bb58:	428b      	cmp	r3, r1
 800bb5a:	bf01      	itttt	eq
 800bb5c:	6819      	ldreq	r1, [r3, #0]
 800bb5e:	685b      	ldreq	r3, [r3, #4]
 800bb60:	1809      	addeq	r1, r1, r0
 800bb62:	6021      	streq	r1, [r4, #0]
 800bb64:	e7ed      	b.n	800bb42 <_free_r+0x1e>
 800bb66:	461a      	mov	r2, r3
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	b10b      	cbz	r3, 800bb70 <_free_r+0x4c>
 800bb6c:	42a3      	cmp	r3, r4
 800bb6e:	d9fa      	bls.n	800bb66 <_free_r+0x42>
 800bb70:	6811      	ldr	r1, [r2, #0]
 800bb72:	1850      	adds	r0, r2, r1
 800bb74:	42a0      	cmp	r0, r4
 800bb76:	d10b      	bne.n	800bb90 <_free_r+0x6c>
 800bb78:	6820      	ldr	r0, [r4, #0]
 800bb7a:	4401      	add	r1, r0
 800bb7c:	1850      	adds	r0, r2, r1
 800bb7e:	4283      	cmp	r3, r0
 800bb80:	6011      	str	r1, [r2, #0]
 800bb82:	d1e0      	bne.n	800bb46 <_free_r+0x22>
 800bb84:	6818      	ldr	r0, [r3, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	6053      	str	r3, [r2, #4]
 800bb8a:	4408      	add	r0, r1
 800bb8c:	6010      	str	r0, [r2, #0]
 800bb8e:	e7da      	b.n	800bb46 <_free_r+0x22>
 800bb90:	d902      	bls.n	800bb98 <_free_r+0x74>
 800bb92:	230c      	movs	r3, #12
 800bb94:	602b      	str	r3, [r5, #0]
 800bb96:	e7d6      	b.n	800bb46 <_free_r+0x22>
 800bb98:	6820      	ldr	r0, [r4, #0]
 800bb9a:	1821      	adds	r1, r4, r0
 800bb9c:	428b      	cmp	r3, r1
 800bb9e:	bf04      	itt	eq
 800bba0:	6819      	ldreq	r1, [r3, #0]
 800bba2:	685b      	ldreq	r3, [r3, #4]
 800bba4:	6063      	str	r3, [r4, #4]
 800bba6:	bf04      	itt	eq
 800bba8:	1809      	addeq	r1, r1, r0
 800bbaa:	6021      	streq	r1, [r4, #0]
 800bbac:	6054      	str	r4, [r2, #4]
 800bbae:	e7ca      	b.n	800bb46 <_free_r+0x22>
 800bbb0:	bd38      	pop	{r3, r4, r5, pc}
 800bbb2:	bf00      	nop
 800bbb4:	24003364 	.word	0x24003364

0800bbb8 <sbrk_aligned>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	4e0f      	ldr	r6, [pc, #60]	@ (800bbf8 <sbrk_aligned+0x40>)
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	6831      	ldr	r1, [r6, #0]
 800bbc0:	4605      	mov	r5, r0
 800bbc2:	b911      	cbnz	r1, 800bbca <sbrk_aligned+0x12>
 800bbc4:	f000 fe16 	bl	800c7f4 <_sbrk_r>
 800bbc8:	6030      	str	r0, [r6, #0]
 800bbca:	4621      	mov	r1, r4
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f000 fe11 	bl	800c7f4 <_sbrk_r>
 800bbd2:	1c43      	adds	r3, r0, #1
 800bbd4:	d103      	bne.n	800bbde <sbrk_aligned+0x26>
 800bbd6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bbda:	4620      	mov	r0, r4
 800bbdc:	bd70      	pop	{r4, r5, r6, pc}
 800bbde:	1cc4      	adds	r4, r0, #3
 800bbe0:	f024 0403 	bic.w	r4, r4, #3
 800bbe4:	42a0      	cmp	r0, r4
 800bbe6:	d0f8      	beq.n	800bbda <sbrk_aligned+0x22>
 800bbe8:	1a21      	subs	r1, r4, r0
 800bbea:	4628      	mov	r0, r5
 800bbec:	f000 fe02 	bl	800c7f4 <_sbrk_r>
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	d1f2      	bne.n	800bbda <sbrk_aligned+0x22>
 800bbf4:	e7ef      	b.n	800bbd6 <sbrk_aligned+0x1e>
 800bbf6:	bf00      	nop
 800bbf8:	24003360 	.word	0x24003360

0800bbfc <_malloc_r>:
 800bbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc00:	1ccd      	adds	r5, r1, #3
 800bc02:	f025 0503 	bic.w	r5, r5, #3
 800bc06:	3508      	adds	r5, #8
 800bc08:	2d0c      	cmp	r5, #12
 800bc0a:	bf38      	it	cc
 800bc0c:	250c      	movcc	r5, #12
 800bc0e:	2d00      	cmp	r5, #0
 800bc10:	4606      	mov	r6, r0
 800bc12:	db01      	blt.n	800bc18 <_malloc_r+0x1c>
 800bc14:	42a9      	cmp	r1, r5
 800bc16:	d904      	bls.n	800bc22 <_malloc_r+0x26>
 800bc18:	230c      	movs	r3, #12
 800bc1a:	6033      	str	r3, [r6, #0]
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bcf8 <_malloc_r+0xfc>
 800bc26:	f000 f869 	bl	800bcfc <__malloc_lock>
 800bc2a:	f8d8 3000 	ldr.w	r3, [r8]
 800bc2e:	461c      	mov	r4, r3
 800bc30:	bb44      	cbnz	r4, 800bc84 <_malloc_r+0x88>
 800bc32:	4629      	mov	r1, r5
 800bc34:	4630      	mov	r0, r6
 800bc36:	f7ff ffbf 	bl	800bbb8 <sbrk_aligned>
 800bc3a:	1c43      	adds	r3, r0, #1
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	d158      	bne.n	800bcf2 <_malloc_r+0xf6>
 800bc40:	f8d8 4000 	ldr.w	r4, [r8]
 800bc44:	4627      	mov	r7, r4
 800bc46:	2f00      	cmp	r7, #0
 800bc48:	d143      	bne.n	800bcd2 <_malloc_r+0xd6>
 800bc4a:	2c00      	cmp	r4, #0
 800bc4c:	d04b      	beq.n	800bce6 <_malloc_r+0xea>
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	4639      	mov	r1, r7
 800bc52:	4630      	mov	r0, r6
 800bc54:	eb04 0903 	add.w	r9, r4, r3
 800bc58:	f000 fdcc 	bl	800c7f4 <_sbrk_r>
 800bc5c:	4581      	cmp	r9, r0
 800bc5e:	d142      	bne.n	800bce6 <_malloc_r+0xea>
 800bc60:	6821      	ldr	r1, [r4, #0]
 800bc62:	1a6d      	subs	r5, r5, r1
 800bc64:	4629      	mov	r1, r5
 800bc66:	4630      	mov	r0, r6
 800bc68:	f7ff ffa6 	bl	800bbb8 <sbrk_aligned>
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	d03a      	beq.n	800bce6 <_malloc_r+0xea>
 800bc70:	6823      	ldr	r3, [r4, #0]
 800bc72:	442b      	add	r3, r5
 800bc74:	6023      	str	r3, [r4, #0]
 800bc76:	f8d8 3000 	ldr.w	r3, [r8]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	bb62      	cbnz	r2, 800bcd8 <_malloc_r+0xdc>
 800bc7e:	f8c8 7000 	str.w	r7, [r8]
 800bc82:	e00f      	b.n	800bca4 <_malloc_r+0xa8>
 800bc84:	6822      	ldr	r2, [r4, #0]
 800bc86:	1b52      	subs	r2, r2, r5
 800bc88:	d420      	bmi.n	800bccc <_malloc_r+0xd0>
 800bc8a:	2a0b      	cmp	r2, #11
 800bc8c:	d917      	bls.n	800bcbe <_malloc_r+0xc2>
 800bc8e:	1961      	adds	r1, r4, r5
 800bc90:	42a3      	cmp	r3, r4
 800bc92:	6025      	str	r5, [r4, #0]
 800bc94:	bf18      	it	ne
 800bc96:	6059      	strne	r1, [r3, #4]
 800bc98:	6863      	ldr	r3, [r4, #4]
 800bc9a:	bf08      	it	eq
 800bc9c:	f8c8 1000 	streq.w	r1, [r8]
 800bca0:	5162      	str	r2, [r4, r5]
 800bca2:	604b      	str	r3, [r1, #4]
 800bca4:	4630      	mov	r0, r6
 800bca6:	f000 f82f 	bl	800bd08 <__malloc_unlock>
 800bcaa:	f104 000b 	add.w	r0, r4, #11
 800bcae:	1d23      	adds	r3, r4, #4
 800bcb0:	f020 0007 	bic.w	r0, r0, #7
 800bcb4:	1ac2      	subs	r2, r0, r3
 800bcb6:	bf1c      	itt	ne
 800bcb8:	1a1b      	subne	r3, r3, r0
 800bcba:	50a3      	strne	r3, [r4, r2]
 800bcbc:	e7af      	b.n	800bc1e <_malloc_r+0x22>
 800bcbe:	6862      	ldr	r2, [r4, #4]
 800bcc0:	42a3      	cmp	r3, r4
 800bcc2:	bf0c      	ite	eq
 800bcc4:	f8c8 2000 	streq.w	r2, [r8]
 800bcc8:	605a      	strne	r2, [r3, #4]
 800bcca:	e7eb      	b.n	800bca4 <_malloc_r+0xa8>
 800bccc:	4623      	mov	r3, r4
 800bcce:	6864      	ldr	r4, [r4, #4]
 800bcd0:	e7ae      	b.n	800bc30 <_malloc_r+0x34>
 800bcd2:	463c      	mov	r4, r7
 800bcd4:	687f      	ldr	r7, [r7, #4]
 800bcd6:	e7b6      	b.n	800bc46 <_malloc_r+0x4a>
 800bcd8:	461a      	mov	r2, r3
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	42a3      	cmp	r3, r4
 800bcde:	d1fb      	bne.n	800bcd8 <_malloc_r+0xdc>
 800bce0:	2300      	movs	r3, #0
 800bce2:	6053      	str	r3, [r2, #4]
 800bce4:	e7de      	b.n	800bca4 <_malloc_r+0xa8>
 800bce6:	230c      	movs	r3, #12
 800bce8:	6033      	str	r3, [r6, #0]
 800bcea:	4630      	mov	r0, r6
 800bcec:	f000 f80c 	bl	800bd08 <__malloc_unlock>
 800bcf0:	e794      	b.n	800bc1c <_malloc_r+0x20>
 800bcf2:	6005      	str	r5, [r0, #0]
 800bcf4:	e7d6      	b.n	800bca4 <_malloc_r+0xa8>
 800bcf6:	bf00      	nop
 800bcf8:	24003364 	.word	0x24003364

0800bcfc <__malloc_lock>:
 800bcfc:	4801      	ldr	r0, [pc, #4]	@ (800bd04 <__malloc_lock+0x8>)
 800bcfe:	f7ff bf0e 	b.w	800bb1e <__retarget_lock_acquire_recursive>
 800bd02:	bf00      	nop
 800bd04:	2400335c 	.word	0x2400335c

0800bd08 <__malloc_unlock>:
 800bd08:	4801      	ldr	r0, [pc, #4]	@ (800bd10 <__malloc_unlock+0x8>)
 800bd0a:	f7ff bf09 	b.w	800bb20 <__retarget_lock_release_recursive>
 800bd0e:	bf00      	nop
 800bd10:	2400335c 	.word	0x2400335c

0800bd14 <__ssputs_r>:
 800bd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd18:	688e      	ldr	r6, [r1, #8]
 800bd1a:	461f      	mov	r7, r3
 800bd1c:	42be      	cmp	r6, r7
 800bd1e:	680b      	ldr	r3, [r1, #0]
 800bd20:	4682      	mov	sl, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	4690      	mov	r8, r2
 800bd26:	d82d      	bhi.n	800bd84 <__ssputs_r+0x70>
 800bd28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bd30:	d026      	beq.n	800bd80 <__ssputs_r+0x6c>
 800bd32:	6965      	ldr	r5, [r4, #20]
 800bd34:	6909      	ldr	r1, [r1, #16]
 800bd36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd3a:	eba3 0901 	sub.w	r9, r3, r1
 800bd3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd42:	1c7b      	adds	r3, r7, #1
 800bd44:	444b      	add	r3, r9
 800bd46:	106d      	asrs	r5, r5, #1
 800bd48:	429d      	cmp	r5, r3
 800bd4a:	bf38      	it	cc
 800bd4c:	461d      	movcc	r5, r3
 800bd4e:	0553      	lsls	r3, r2, #21
 800bd50:	d527      	bpl.n	800bda2 <__ssputs_r+0x8e>
 800bd52:	4629      	mov	r1, r5
 800bd54:	f7ff ff52 	bl	800bbfc <_malloc_r>
 800bd58:	4606      	mov	r6, r0
 800bd5a:	b360      	cbz	r0, 800bdb6 <__ssputs_r+0xa2>
 800bd5c:	6921      	ldr	r1, [r4, #16]
 800bd5e:	464a      	mov	r2, r9
 800bd60:	f000 fd58 	bl	800c814 <memcpy>
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bd6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd6e:	81a3      	strh	r3, [r4, #12]
 800bd70:	6126      	str	r6, [r4, #16]
 800bd72:	6165      	str	r5, [r4, #20]
 800bd74:	444e      	add	r6, r9
 800bd76:	eba5 0509 	sub.w	r5, r5, r9
 800bd7a:	6026      	str	r6, [r4, #0]
 800bd7c:	60a5      	str	r5, [r4, #8]
 800bd7e:	463e      	mov	r6, r7
 800bd80:	42be      	cmp	r6, r7
 800bd82:	d900      	bls.n	800bd86 <__ssputs_r+0x72>
 800bd84:	463e      	mov	r6, r7
 800bd86:	6820      	ldr	r0, [r4, #0]
 800bd88:	4632      	mov	r2, r6
 800bd8a:	4641      	mov	r1, r8
 800bd8c:	f000 fcf6 	bl	800c77c <memmove>
 800bd90:	68a3      	ldr	r3, [r4, #8]
 800bd92:	1b9b      	subs	r3, r3, r6
 800bd94:	60a3      	str	r3, [r4, #8]
 800bd96:	6823      	ldr	r3, [r4, #0]
 800bd98:	4433      	add	r3, r6
 800bd9a:	6023      	str	r3, [r4, #0]
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda2:	462a      	mov	r2, r5
 800bda4:	f000 fd44 	bl	800c830 <_realloc_r>
 800bda8:	4606      	mov	r6, r0
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d1e0      	bne.n	800bd70 <__ssputs_r+0x5c>
 800bdae:	6921      	ldr	r1, [r4, #16]
 800bdb0:	4650      	mov	r0, sl
 800bdb2:	f7ff feb7 	bl	800bb24 <_free_r>
 800bdb6:	230c      	movs	r3, #12
 800bdb8:	f8ca 3000 	str.w	r3, [sl]
 800bdbc:	89a3      	ldrh	r3, [r4, #12]
 800bdbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdc2:	81a3      	strh	r3, [r4, #12]
 800bdc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdc8:	e7e9      	b.n	800bd9e <__ssputs_r+0x8a>
	...

0800bdcc <_svfiprintf_r>:
 800bdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd0:	4698      	mov	r8, r3
 800bdd2:	898b      	ldrh	r3, [r1, #12]
 800bdd4:	061b      	lsls	r3, r3, #24
 800bdd6:	b09d      	sub	sp, #116	@ 0x74
 800bdd8:	4607      	mov	r7, r0
 800bdda:	460d      	mov	r5, r1
 800bddc:	4614      	mov	r4, r2
 800bdde:	d510      	bpl.n	800be02 <_svfiprintf_r+0x36>
 800bde0:	690b      	ldr	r3, [r1, #16]
 800bde2:	b973      	cbnz	r3, 800be02 <_svfiprintf_r+0x36>
 800bde4:	2140      	movs	r1, #64	@ 0x40
 800bde6:	f7ff ff09 	bl	800bbfc <_malloc_r>
 800bdea:	6028      	str	r0, [r5, #0]
 800bdec:	6128      	str	r0, [r5, #16]
 800bdee:	b930      	cbnz	r0, 800bdfe <_svfiprintf_r+0x32>
 800bdf0:	230c      	movs	r3, #12
 800bdf2:	603b      	str	r3, [r7, #0]
 800bdf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdf8:	b01d      	add	sp, #116	@ 0x74
 800bdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfe:	2340      	movs	r3, #64	@ 0x40
 800be00:	616b      	str	r3, [r5, #20]
 800be02:	2300      	movs	r3, #0
 800be04:	9309      	str	r3, [sp, #36]	@ 0x24
 800be06:	2320      	movs	r3, #32
 800be08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be10:	2330      	movs	r3, #48	@ 0x30
 800be12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bfb0 <_svfiprintf_r+0x1e4>
 800be16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be1a:	f04f 0901 	mov.w	r9, #1
 800be1e:	4623      	mov	r3, r4
 800be20:	469a      	mov	sl, r3
 800be22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be26:	b10a      	cbz	r2, 800be2c <_svfiprintf_r+0x60>
 800be28:	2a25      	cmp	r2, #37	@ 0x25
 800be2a:	d1f9      	bne.n	800be20 <_svfiprintf_r+0x54>
 800be2c:	ebba 0b04 	subs.w	fp, sl, r4
 800be30:	d00b      	beq.n	800be4a <_svfiprintf_r+0x7e>
 800be32:	465b      	mov	r3, fp
 800be34:	4622      	mov	r2, r4
 800be36:	4629      	mov	r1, r5
 800be38:	4638      	mov	r0, r7
 800be3a:	f7ff ff6b 	bl	800bd14 <__ssputs_r>
 800be3e:	3001      	adds	r0, #1
 800be40:	f000 80a7 	beq.w	800bf92 <_svfiprintf_r+0x1c6>
 800be44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be46:	445a      	add	r2, fp
 800be48:	9209      	str	r2, [sp, #36]	@ 0x24
 800be4a:	f89a 3000 	ldrb.w	r3, [sl]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 809f 	beq.w	800bf92 <_svfiprintf_r+0x1c6>
 800be54:	2300      	movs	r3, #0
 800be56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be5e:	f10a 0a01 	add.w	sl, sl, #1
 800be62:	9304      	str	r3, [sp, #16]
 800be64:	9307      	str	r3, [sp, #28]
 800be66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800be6c:	4654      	mov	r4, sl
 800be6e:	2205      	movs	r2, #5
 800be70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be74:	484e      	ldr	r0, [pc, #312]	@ (800bfb0 <_svfiprintf_r+0x1e4>)
 800be76:	f7f4 fa33 	bl	80002e0 <memchr>
 800be7a:	9a04      	ldr	r2, [sp, #16]
 800be7c:	b9d8      	cbnz	r0, 800beb6 <_svfiprintf_r+0xea>
 800be7e:	06d0      	lsls	r0, r2, #27
 800be80:	bf44      	itt	mi
 800be82:	2320      	movmi	r3, #32
 800be84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be88:	0711      	lsls	r1, r2, #28
 800be8a:	bf44      	itt	mi
 800be8c:	232b      	movmi	r3, #43	@ 0x2b
 800be8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be92:	f89a 3000 	ldrb.w	r3, [sl]
 800be96:	2b2a      	cmp	r3, #42	@ 0x2a
 800be98:	d015      	beq.n	800bec6 <_svfiprintf_r+0xfa>
 800be9a:	9a07      	ldr	r2, [sp, #28]
 800be9c:	4654      	mov	r4, sl
 800be9e:	2000      	movs	r0, #0
 800bea0:	f04f 0c0a 	mov.w	ip, #10
 800bea4:	4621      	mov	r1, r4
 800bea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800beaa:	3b30      	subs	r3, #48	@ 0x30
 800beac:	2b09      	cmp	r3, #9
 800beae:	d94b      	bls.n	800bf48 <_svfiprintf_r+0x17c>
 800beb0:	b1b0      	cbz	r0, 800bee0 <_svfiprintf_r+0x114>
 800beb2:	9207      	str	r2, [sp, #28]
 800beb4:	e014      	b.n	800bee0 <_svfiprintf_r+0x114>
 800beb6:	eba0 0308 	sub.w	r3, r0, r8
 800beba:	fa09 f303 	lsl.w	r3, r9, r3
 800bebe:	4313      	orrs	r3, r2
 800bec0:	9304      	str	r3, [sp, #16]
 800bec2:	46a2      	mov	sl, r4
 800bec4:	e7d2      	b.n	800be6c <_svfiprintf_r+0xa0>
 800bec6:	9b03      	ldr	r3, [sp, #12]
 800bec8:	1d19      	adds	r1, r3, #4
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	9103      	str	r1, [sp, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	bfbb      	ittet	lt
 800bed2:	425b      	neglt	r3, r3
 800bed4:	f042 0202 	orrlt.w	r2, r2, #2
 800bed8:	9307      	strge	r3, [sp, #28]
 800beda:	9307      	strlt	r3, [sp, #28]
 800bedc:	bfb8      	it	lt
 800bede:	9204      	strlt	r2, [sp, #16]
 800bee0:	7823      	ldrb	r3, [r4, #0]
 800bee2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bee4:	d10a      	bne.n	800befc <_svfiprintf_r+0x130>
 800bee6:	7863      	ldrb	r3, [r4, #1]
 800bee8:	2b2a      	cmp	r3, #42	@ 0x2a
 800beea:	d132      	bne.n	800bf52 <_svfiprintf_r+0x186>
 800beec:	9b03      	ldr	r3, [sp, #12]
 800beee:	1d1a      	adds	r2, r3, #4
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	9203      	str	r2, [sp, #12]
 800bef4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bef8:	3402      	adds	r4, #2
 800befa:	9305      	str	r3, [sp, #20]
 800befc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bfc0 <_svfiprintf_r+0x1f4>
 800bf00:	7821      	ldrb	r1, [r4, #0]
 800bf02:	2203      	movs	r2, #3
 800bf04:	4650      	mov	r0, sl
 800bf06:	f7f4 f9eb 	bl	80002e0 <memchr>
 800bf0a:	b138      	cbz	r0, 800bf1c <_svfiprintf_r+0x150>
 800bf0c:	9b04      	ldr	r3, [sp, #16]
 800bf0e:	eba0 000a 	sub.w	r0, r0, sl
 800bf12:	2240      	movs	r2, #64	@ 0x40
 800bf14:	4082      	lsls	r2, r0
 800bf16:	4313      	orrs	r3, r2
 800bf18:	3401      	adds	r4, #1
 800bf1a:	9304      	str	r3, [sp, #16]
 800bf1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf20:	4824      	ldr	r0, [pc, #144]	@ (800bfb4 <_svfiprintf_r+0x1e8>)
 800bf22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf26:	2206      	movs	r2, #6
 800bf28:	f7f4 f9da 	bl	80002e0 <memchr>
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	d036      	beq.n	800bf9e <_svfiprintf_r+0x1d2>
 800bf30:	4b21      	ldr	r3, [pc, #132]	@ (800bfb8 <_svfiprintf_r+0x1ec>)
 800bf32:	bb1b      	cbnz	r3, 800bf7c <_svfiprintf_r+0x1b0>
 800bf34:	9b03      	ldr	r3, [sp, #12]
 800bf36:	3307      	adds	r3, #7
 800bf38:	f023 0307 	bic.w	r3, r3, #7
 800bf3c:	3308      	adds	r3, #8
 800bf3e:	9303      	str	r3, [sp, #12]
 800bf40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf42:	4433      	add	r3, r6
 800bf44:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf46:	e76a      	b.n	800be1e <_svfiprintf_r+0x52>
 800bf48:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	2001      	movs	r0, #1
 800bf50:	e7a8      	b.n	800bea4 <_svfiprintf_r+0xd8>
 800bf52:	2300      	movs	r3, #0
 800bf54:	3401      	adds	r4, #1
 800bf56:	9305      	str	r3, [sp, #20]
 800bf58:	4619      	mov	r1, r3
 800bf5a:	f04f 0c0a 	mov.w	ip, #10
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf64:	3a30      	subs	r2, #48	@ 0x30
 800bf66:	2a09      	cmp	r2, #9
 800bf68:	d903      	bls.n	800bf72 <_svfiprintf_r+0x1a6>
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d0c6      	beq.n	800befc <_svfiprintf_r+0x130>
 800bf6e:	9105      	str	r1, [sp, #20]
 800bf70:	e7c4      	b.n	800befc <_svfiprintf_r+0x130>
 800bf72:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf76:	4604      	mov	r4, r0
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e7f0      	b.n	800bf5e <_svfiprintf_r+0x192>
 800bf7c:	ab03      	add	r3, sp, #12
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	462a      	mov	r2, r5
 800bf82:	4b0e      	ldr	r3, [pc, #56]	@ (800bfbc <_svfiprintf_r+0x1f0>)
 800bf84:	a904      	add	r1, sp, #16
 800bf86:	4638      	mov	r0, r7
 800bf88:	f3af 8000 	nop.w
 800bf8c:	1c42      	adds	r2, r0, #1
 800bf8e:	4606      	mov	r6, r0
 800bf90:	d1d6      	bne.n	800bf40 <_svfiprintf_r+0x174>
 800bf92:	89ab      	ldrh	r3, [r5, #12]
 800bf94:	065b      	lsls	r3, r3, #25
 800bf96:	f53f af2d 	bmi.w	800bdf4 <_svfiprintf_r+0x28>
 800bf9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf9c:	e72c      	b.n	800bdf8 <_svfiprintf_r+0x2c>
 800bf9e:	ab03      	add	r3, sp, #12
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	462a      	mov	r2, r5
 800bfa4:	4b05      	ldr	r3, [pc, #20]	@ (800bfbc <_svfiprintf_r+0x1f0>)
 800bfa6:	a904      	add	r1, sp, #16
 800bfa8:	4638      	mov	r0, r7
 800bfaa:	f000 f9bb 	bl	800c324 <_printf_i>
 800bfae:	e7ed      	b.n	800bf8c <_svfiprintf_r+0x1c0>
 800bfb0:	0800c96c 	.word	0x0800c96c
 800bfb4:	0800c976 	.word	0x0800c976
 800bfb8:	00000000 	.word	0x00000000
 800bfbc:	0800bd15 	.word	0x0800bd15
 800bfc0:	0800c972 	.word	0x0800c972

0800bfc4 <__sfputc_r>:
 800bfc4:	6893      	ldr	r3, [r2, #8]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	b410      	push	{r4}
 800bfcc:	6093      	str	r3, [r2, #8]
 800bfce:	da08      	bge.n	800bfe2 <__sfputc_r+0x1e>
 800bfd0:	6994      	ldr	r4, [r2, #24]
 800bfd2:	42a3      	cmp	r3, r4
 800bfd4:	db01      	blt.n	800bfda <__sfputc_r+0x16>
 800bfd6:	290a      	cmp	r1, #10
 800bfd8:	d103      	bne.n	800bfe2 <__sfputc_r+0x1e>
 800bfda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfde:	f7ff bc90 	b.w	800b902 <__swbuf_r>
 800bfe2:	6813      	ldr	r3, [r2, #0]
 800bfe4:	1c58      	adds	r0, r3, #1
 800bfe6:	6010      	str	r0, [r2, #0]
 800bfe8:	7019      	strb	r1, [r3, #0]
 800bfea:	4608      	mov	r0, r1
 800bfec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bff0:	4770      	bx	lr

0800bff2 <__sfputs_r>:
 800bff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff4:	4606      	mov	r6, r0
 800bff6:	460f      	mov	r7, r1
 800bff8:	4614      	mov	r4, r2
 800bffa:	18d5      	adds	r5, r2, r3
 800bffc:	42ac      	cmp	r4, r5
 800bffe:	d101      	bne.n	800c004 <__sfputs_r+0x12>
 800c000:	2000      	movs	r0, #0
 800c002:	e007      	b.n	800c014 <__sfputs_r+0x22>
 800c004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c008:	463a      	mov	r2, r7
 800c00a:	4630      	mov	r0, r6
 800c00c:	f7ff ffda 	bl	800bfc4 <__sfputc_r>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d1f3      	bne.n	800bffc <__sfputs_r+0xa>
 800c014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c018 <_vfiprintf_r>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	460d      	mov	r5, r1
 800c01e:	b09d      	sub	sp, #116	@ 0x74
 800c020:	4614      	mov	r4, r2
 800c022:	4698      	mov	r8, r3
 800c024:	4606      	mov	r6, r0
 800c026:	b118      	cbz	r0, 800c030 <_vfiprintf_r+0x18>
 800c028:	6a03      	ldr	r3, [r0, #32]
 800c02a:	b90b      	cbnz	r3, 800c030 <_vfiprintf_r+0x18>
 800c02c:	f7ff fb5e 	bl	800b6ec <__sinit>
 800c030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c032:	07d9      	lsls	r1, r3, #31
 800c034:	d405      	bmi.n	800c042 <_vfiprintf_r+0x2a>
 800c036:	89ab      	ldrh	r3, [r5, #12]
 800c038:	059a      	lsls	r2, r3, #22
 800c03a:	d402      	bmi.n	800c042 <_vfiprintf_r+0x2a>
 800c03c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c03e:	f7ff fd6e 	bl	800bb1e <__retarget_lock_acquire_recursive>
 800c042:	89ab      	ldrh	r3, [r5, #12]
 800c044:	071b      	lsls	r3, r3, #28
 800c046:	d501      	bpl.n	800c04c <_vfiprintf_r+0x34>
 800c048:	692b      	ldr	r3, [r5, #16]
 800c04a:	b99b      	cbnz	r3, 800c074 <_vfiprintf_r+0x5c>
 800c04c:	4629      	mov	r1, r5
 800c04e:	4630      	mov	r0, r6
 800c050:	f7ff fc96 	bl	800b980 <__swsetup_r>
 800c054:	b170      	cbz	r0, 800c074 <_vfiprintf_r+0x5c>
 800c056:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c058:	07dc      	lsls	r4, r3, #31
 800c05a:	d504      	bpl.n	800c066 <_vfiprintf_r+0x4e>
 800c05c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c060:	b01d      	add	sp, #116	@ 0x74
 800c062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c066:	89ab      	ldrh	r3, [r5, #12]
 800c068:	0598      	lsls	r0, r3, #22
 800c06a:	d4f7      	bmi.n	800c05c <_vfiprintf_r+0x44>
 800c06c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c06e:	f7ff fd57 	bl	800bb20 <__retarget_lock_release_recursive>
 800c072:	e7f3      	b.n	800c05c <_vfiprintf_r+0x44>
 800c074:	2300      	movs	r3, #0
 800c076:	9309      	str	r3, [sp, #36]	@ 0x24
 800c078:	2320      	movs	r3, #32
 800c07a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c07e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c082:	2330      	movs	r3, #48	@ 0x30
 800c084:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c234 <_vfiprintf_r+0x21c>
 800c088:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c08c:	f04f 0901 	mov.w	r9, #1
 800c090:	4623      	mov	r3, r4
 800c092:	469a      	mov	sl, r3
 800c094:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c098:	b10a      	cbz	r2, 800c09e <_vfiprintf_r+0x86>
 800c09a:	2a25      	cmp	r2, #37	@ 0x25
 800c09c:	d1f9      	bne.n	800c092 <_vfiprintf_r+0x7a>
 800c09e:	ebba 0b04 	subs.w	fp, sl, r4
 800c0a2:	d00b      	beq.n	800c0bc <_vfiprintf_r+0xa4>
 800c0a4:	465b      	mov	r3, fp
 800c0a6:	4622      	mov	r2, r4
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f7ff ffa1 	bl	800bff2 <__sfputs_r>
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	f000 80a7 	beq.w	800c204 <_vfiprintf_r+0x1ec>
 800c0b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0b8:	445a      	add	r2, fp
 800c0ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 809f 	beq.w	800c204 <_vfiprintf_r+0x1ec>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c0cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0d0:	f10a 0a01 	add.w	sl, sl, #1
 800c0d4:	9304      	str	r3, [sp, #16]
 800c0d6:	9307      	str	r3, [sp, #28]
 800c0d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0de:	4654      	mov	r4, sl
 800c0e0:	2205      	movs	r2, #5
 800c0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0e6:	4853      	ldr	r0, [pc, #332]	@ (800c234 <_vfiprintf_r+0x21c>)
 800c0e8:	f7f4 f8fa 	bl	80002e0 <memchr>
 800c0ec:	9a04      	ldr	r2, [sp, #16]
 800c0ee:	b9d8      	cbnz	r0, 800c128 <_vfiprintf_r+0x110>
 800c0f0:	06d1      	lsls	r1, r2, #27
 800c0f2:	bf44      	itt	mi
 800c0f4:	2320      	movmi	r3, #32
 800c0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0fa:	0713      	lsls	r3, r2, #28
 800c0fc:	bf44      	itt	mi
 800c0fe:	232b      	movmi	r3, #43	@ 0x2b
 800c100:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c104:	f89a 3000 	ldrb.w	r3, [sl]
 800c108:	2b2a      	cmp	r3, #42	@ 0x2a
 800c10a:	d015      	beq.n	800c138 <_vfiprintf_r+0x120>
 800c10c:	9a07      	ldr	r2, [sp, #28]
 800c10e:	4654      	mov	r4, sl
 800c110:	2000      	movs	r0, #0
 800c112:	f04f 0c0a 	mov.w	ip, #10
 800c116:	4621      	mov	r1, r4
 800c118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c11c:	3b30      	subs	r3, #48	@ 0x30
 800c11e:	2b09      	cmp	r3, #9
 800c120:	d94b      	bls.n	800c1ba <_vfiprintf_r+0x1a2>
 800c122:	b1b0      	cbz	r0, 800c152 <_vfiprintf_r+0x13a>
 800c124:	9207      	str	r2, [sp, #28]
 800c126:	e014      	b.n	800c152 <_vfiprintf_r+0x13a>
 800c128:	eba0 0308 	sub.w	r3, r0, r8
 800c12c:	fa09 f303 	lsl.w	r3, r9, r3
 800c130:	4313      	orrs	r3, r2
 800c132:	9304      	str	r3, [sp, #16]
 800c134:	46a2      	mov	sl, r4
 800c136:	e7d2      	b.n	800c0de <_vfiprintf_r+0xc6>
 800c138:	9b03      	ldr	r3, [sp, #12]
 800c13a:	1d19      	adds	r1, r3, #4
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	9103      	str	r1, [sp, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	bfbb      	ittet	lt
 800c144:	425b      	neglt	r3, r3
 800c146:	f042 0202 	orrlt.w	r2, r2, #2
 800c14a:	9307      	strge	r3, [sp, #28]
 800c14c:	9307      	strlt	r3, [sp, #28]
 800c14e:	bfb8      	it	lt
 800c150:	9204      	strlt	r2, [sp, #16]
 800c152:	7823      	ldrb	r3, [r4, #0]
 800c154:	2b2e      	cmp	r3, #46	@ 0x2e
 800c156:	d10a      	bne.n	800c16e <_vfiprintf_r+0x156>
 800c158:	7863      	ldrb	r3, [r4, #1]
 800c15a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c15c:	d132      	bne.n	800c1c4 <_vfiprintf_r+0x1ac>
 800c15e:	9b03      	ldr	r3, [sp, #12]
 800c160:	1d1a      	adds	r2, r3, #4
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	9203      	str	r2, [sp, #12]
 800c166:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c16a:	3402      	adds	r4, #2
 800c16c:	9305      	str	r3, [sp, #20]
 800c16e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c244 <_vfiprintf_r+0x22c>
 800c172:	7821      	ldrb	r1, [r4, #0]
 800c174:	2203      	movs	r2, #3
 800c176:	4650      	mov	r0, sl
 800c178:	f7f4 f8b2 	bl	80002e0 <memchr>
 800c17c:	b138      	cbz	r0, 800c18e <_vfiprintf_r+0x176>
 800c17e:	9b04      	ldr	r3, [sp, #16]
 800c180:	eba0 000a 	sub.w	r0, r0, sl
 800c184:	2240      	movs	r2, #64	@ 0x40
 800c186:	4082      	lsls	r2, r0
 800c188:	4313      	orrs	r3, r2
 800c18a:	3401      	adds	r4, #1
 800c18c:	9304      	str	r3, [sp, #16]
 800c18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c192:	4829      	ldr	r0, [pc, #164]	@ (800c238 <_vfiprintf_r+0x220>)
 800c194:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c198:	2206      	movs	r2, #6
 800c19a:	f7f4 f8a1 	bl	80002e0 <memchr>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d03f      	beq.n	800c222 <_vfiprintf_r+0x20a>
 800c1a2:	4b26      	ldr	r3, [pc, #152]	@ (800c23c <_vfiprintf_r+0x224>)
 800c1a4:	bb1b      	cbnz	r3, 800c1ee <_vfiprintf_r+0x1d6>
 800c1a6:	9b03      	ldr	r3, [sp, #12]
 800c1a8:	3307      	adds	r3, #7
 800c1aa:	f023 0307 	bic.w	r3, r3, #7
 800c1ae:	3308      	adds	r3, #8
 800c1b0:	9303      	str	r3, [sp, #12]
 800c1b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1b4:	443b      	add	r3, r7
 800c1b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1b8:	e76a      	b.n	800c090 <_vfiprintf_r+0x78>
 800c1ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1be:	460c      	mov	r4, r1
 800c1c0:	2001      	movs	r0, #1
 800c1c2:	e7a8      	b.n	800c116 <_vfiprintf_r+0xfe>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	3401      	adds	r4, #1
 800c1c8:	9305      	str	r3, [sp, #20]
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	f04f 0c0a 	mov.w	ip, #10
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1d6:	3a30      	subs	r2, #48	@ 0x30
 800c1d8:	2a09      	cmp	r2, #9
 800c1da:	d903      	bls.n	800c1e4 <_vfiprintf_r+0x1cc>
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d0c6      	beq.n	800c16e <_vfiprintf_r+0x156>
 800c1e0:	9105      	str	r1, [sp, #20]
 800c1e2:	e7c4      	b.n	800c16e <_vfiprintf_r+0x156>
 800c1e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e7f0      	b.n	800c1d0 <_vfiprintf_r+0x1b8>
 800c1ee:	ab03      	add	r3, sp, #12
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	462a      	mov	r2, r5
 800c1f4:	4b12      	ldr	r3, [pc, #72]	@ (800c240 <_vfiprintf_r+0x228>)
 800c1f6:	a904      	add	r1, sp, #16
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	f3af 8000 	nop.w
 800c1fe:	4607      	mov	r7, r0
 800c200:	1c78      	adds	r0, r7, #1
 800c202:	d1d6      	bne.n	800c1b2 <_vfiprintf_r+0x19a>
 800c204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c206:	07d9      	lsls	r1, r3, #31
 800c208:	d405      	bmi.n	800c216 <_vfiprintf_r+0x1fe>
 800c20a:	89ab      	ldrh	r3, [r5, #12]
 800c20c:	059a      	lsls	r2, r3, #22
 800c20e:	d402      	bmi.n	800c216 <_vfiprintf_r+0x1fe>
 800c210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c212:	f7ff fc85 	bl	800bb20 <__retarget_lock_release_recursive>
 800c216:	89ab      	ldrh	r3, [r5, #12]
 800c218:	065b      	lsls	r3, r3, #25
 800c21a:	f53f af1f 	bmi.w	800c05c <_vfiprintf_r+0x44>
 800c21e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c220:	e71e      	b.n	800c060 <_vfiprintf_r+0x48>
 800c222:	ab03      	add	r3, sp, #12
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	462a      	mov	r2, r5
 800c228:	4b05      	ldr	r3, [pc, #20]	@ (800c240 <_vfiprintf_r+0x228>)
 800c22a:	a904      	add	r1, sp, #16
 800c22c:	4630      	mov	r0, r6
 800c22e:	f000 f879 	bl	800c324 <_printf_i>
 800c232:	e7e4      	b.n	800c1fe <_vfiprintf_r+0x1e6>
 800c234:	0800c96c 	.word	0x0800c96c
 800c238:	0800c976 	.word	0x0800c976
 800c23c:	00000000 	.word	0x00000000
 800c240:	0800bff3 	.word	0x0800bff3
 800c244:	0800c972 	.word	0x0800c972

0800c248 <_printf_common>:
 800c248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c24c:	4616      	mov	r6, r2
 800c24e:	4698      	mov	r8, r3
 800c250:	688a      	ldr	r2, [r1, #8]
 800c252:	690b      	ldr	r3, [r1, #16]
 800c254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c258:	4293      	cmp	r3, r2
 800c25a:	bfb8      	it	lt
 800c25c:	4613      	movlt	r3, r2
 800c25e:	6033      	str	r3, [r6, #0]
 800c260:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c264:	4607      	mov	r7, r0
 800c266:	460c      	mov	r4, r1
 800c268:	b10a      	cbz	r2, 800c26e <_printf_common+0x26>
 800c26a:	3301      	adds	r3, #1
 800c26c:	6033      	str	r3, [r6, #0]
 800c26e:	6823      	ldr	r3, [r4, #0]
 800c270:	0699      	lsls	r1, r3, #26
 800c272:	bf42      	ittt	mi
 800c274:	6833      	ldrmi	r3, [r6, #0]
 800c276:	3302      	addmi	r3, #2
 800c278:	6033      	strmi	r3, [r6, #0]
 800c27a:	6825      	ldr	r5, [r4, #0]
 800c27c:	f015 0506 	ands.w	r5, r5, #6
 800c280:	d106      	bne.n	800c290 <_printf_common+0x48>
 800c282:	f104 0a19 	add.w	sl, r4, #25
 800c286:	68e3      	ldr	r3, [r4, #12]
 800c288:	6832      	ldr	r2, [r6, #0]
 800c28a:	1a9b      	subs	r3, r3, r2
 800c28c:	42ab      	cmp	r3, r5
 800c28e:	dc26      	bgt.n	800c2de <_printf_common+0x96>
 800c290:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c294:	6822      	ldr	r2, [r4, #0]
 800c296:	3b00      	subs	r3, #0
 800c298:	bf18      	it	ne
 800c29a:	2301      	movne	r3, #1
 800c29c:	0692      	lsls	r2, r2, #26
 800c29e:	d42b      	bmi.n	800c2f8 <_printf_common+0xb0>
 800c2a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c2a4:	4641      	mov	r1, r8
 800c2a6:	4638      	mov	r0, r7
 800c2a8:	47c8      	blx	r9
 800c2aa:	3001      	adds	r0, #1
 800c2ac:	d01e      	beq.n	800c2ec <_printf_common+0xa4>
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	6922      	ldr	r2, [r4, #16]
 800c2b2:	f003 0306 	and.w	r3, r3, #6
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	bf02      	ittt	eq
 800c2ba:	68e5      	ldreq	r5, [r4, #12]
 800c2bc:	6833      	ldreq	r3, [r6, #0]
 800c2be:	1aed      	subeq	r5, r5, r3
 800c2c0:	68a3      	ldr	r3, [r4, #8]
 800c2c2:	bf0c      	ite	eq
 800c2c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2c8:	2500      	movne	r5, #0
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	bfc4      	itt	gt
 800c2ce:	1a9b      	subgt	r3, r3, r2
 800c2d0:	18ed      	addgt	r5, r5, r3
 800c2d2:	2600      	movs	r6, #0
 800c2d4:	341a      	adds	r4, #26
 800c2d6:	42b5      	cmp	r5, r6
 800c2d8:	d11a      	bne.n	800c310 <_printf_common+0xc8>
 800c2da:	2000      	movs	r0, #0
 800c2dc:	e008      	b.n	800c2f0 <_printf_common+0xa8>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	4652      	mov	r2, sl
 800c2e2:	4641      	mov	r1, r8
 800c2e4:	4638      	mov	r0, r7
 800c2e6:	47c8      	blx	r9
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	d103      	bne.n	800c2f4 <_printf_common+0xac>
 800c2ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2f4:	3501      	adds	r5, #1
 800c2f6:	e7c6      	b.n	800c286 <_printf_common+0x3e>
 800c2f8:	18e1      	adds	r1, r4, r3
 800c2fa:	1c5a      	adds	r2, r3, #1
 800c2fc:	2030      	movs	r0, #48	@ 0x30
 800c2fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c302:	4422      	add	r2, r4
 800c304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c308:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c30c:	3302      	adds	r3, #2
 800c30e:	e7c7      	b.n	800c2a0 <_printf_common+0x58>
 800c310:	2301      	movs	r3, #1
 800c312:	4622      	mov	r2, r4
 800c314:	4641      	mov	r1, r8
 800c316:	4638      	mov	r0, r7
 800c318:	47c8      	blx	r9
 800c31a:	3001      	adds	r0, #1
 800c31c:	d0e6      	beq.n	800c2ec <_printf_common+0xa4>
 800c31e:	3601      	adds	r6, #1
 800c320:	e7d9      	b.n	800c2d6 <_printf_common+0x8e>
	...

0800c324 <_printf_i>:
 800c324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c328:	7e0f      	ldrb	r7, [r1, #24]
 800c32a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c32c:	2f78      	cmp	r7, #120	@ 0x78
 800c32e:	4691      	mov	r9, r2
 800c330:	4680      	mov	r8, r0
 800c332:	460c      	mov	r4, r1
 800c334:	469a      	mov	sl, r3
 800c336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c33a:	d807      	bhi.n	800c34c <_printf_i+0x28>
 800c33c:	2f62      	cmp	r7, #98	@ 0x62
 800c33e:	d80a      	bhi.n	800c356 <_printf_i+0x32>
 800c340:	2f00      	cmp	r7, #0
 800c342:	f000 80d1 	beq.w	800c4e8 <_printf_i+0x1c4>
 800c346:	2f58      	cmp	r7, #88	@ 0x58
 800c348:	f000 80b8 	beq.w	800c4bc <_printf_i+0x198>
 800c34c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c354:	e03a      	b.n	800c3cc <_printf_i+0xa8>
 800c356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c35a:	2b15      	cmp	r3, #21
 800c35c:	d8f6      	bhi.n	800c34c <_printf_i+0x28>
 800c35e:	a101      	add	r1, pc, #4	@ (adr r1, 800c364 <_printf_i+0x40>)
 800c360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c364:	0800c3bd 	.word	0x0800c3bd
 800c368:	0800c3d1 	.word	0x0800c3d1
 800c36c:	0800c34d 	.word	0x0800c34d
 800c370:	0800c34d 	.word	0x0800c34d
 800c374:	0800c34d 	.word	0x0800c34d
 800c378:	0800c34d 	.word	0x0800c34d
 800c37c:	0800c3d1 	.word	0x0800c3d1
 800c380:	0800c34d 	.word	0x0800c34d
 800c384:	0800c34d 	.word	0x0800c34d
 800c388:	0800c34d 	.word	0x0800c34d
 800c38c:	0800c34d 	.word	0x0800c34d
 800c390:	0800c4cf 	.word	0x0800c4cf
 800c394:	0800c3fb 	.word	0x0800c3fb
 800c398:	0800c489 	.word	0x0800c489
 800c39c:	0800c34d 	.word	0x0800c34d
 800c3a0:	0800c34d 	.word	0x0800c34d
 800c3a4:	0800c4f1 	.word	0x0800c4f1
 800c3a8:	0800c34d 	.word	0x0800c34d
 800c3ac:	0800c3fb 	.word	0x0800c3fb
 800c3b0:	0800c34d 	.word	0x0800c34d
 800c3b4:	0800c34d 	.word	0x0800c34d
 800c3b8:	0800c491 	.word	0x0800c491
 800c3bc:	6833      	ldr	r3, [r6, #0]
 800c3be:	1d1a      	adds	r2, r3, #4
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	6032      	str	r2, [r6, #0]
 800c3c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e09c      	b.n	800c50a <_printf_i+0x1e6>
 800c3d0:	6833      	ldr	r3, [r6, #0]
 800c3d2:	6820      	ldr	r0, [r4, #0]
 800c3d4:	1d19      	adds	r1, r3, #4
 800c3d6:	6031      	str	r1, [r6, #0]
 800c3d8:	0606      	lsls	r6, r0, #24
 800c3da:	d501      	bpl.n	800c3e0 <_printf_i+0xbc>
 800c3dc:	681d      	ldr	r5, [r3, #0]
 800c3de:	e003      	b.n	800c3e8 <_printf_i+0xc4>
 800c3e0:	0645      	lsls	r5, r0, #25
 800c3e2:	d5fb      	bpl.n	800c3dc <_printf_i+0xb8>
 800c3e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c3e8:	2d00      	cmp	r5, #0
 800c3ea:	da03      	bge.n	800c3f4 <_printf_i+0xd0>
 800c3ec:	232d      	movs	r3, #45	@ 0x2d
 800c3ee:	426d      	negs	r5, r5
 800c3f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3f4:	4858      	ldr	r0, [pc, #352]	@ (800c558 <_printf_i+0x234>)
 800c3f6:	230a      	movs	r3, #10
 800c3f8:	e011      	b.n	800c41e <_printf_i+0xfa>
 800c3fa:	6821      	ldr	r1, [r4, #0]
 800c3fc:	6833      	ldr	r3, [r6, #0]
 800c3fe:	0608      	lsls	r0, r1, #24
 800c400:	f853 5b04 	ldr.w	r5, [r3], #4
 800c404:	d402      	bmi.n	800c40c <_printf_i+0xe8>
 800c406:	0649      	lsls	r1, r1, #25
 800c408:	bf48      	it	mi
 800c40a:	b2ad      	uxthmi	r5, r5
 800c40c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c40e:	4852      	ldr	r0, [pc, #328]	@ (800c558 <_printf_i+0x234>)
 800c410:	6033      	str	r3, [r6, #0]
 800c412:	bf14      	ite	ne
 800c414:	230a      	movne	r3, #10
 800c416:	2308      	moveq	r3, #8
 800c418:	2100      	movs	r1, #0
 800c41a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c41e:	6866      	ldr	r6, [r4, #4]
 800c420:	60a6      	str	r6, [r4, #8]
 800c422:	2e00      	cmp	r6, #0
 800c424:	db05      	blt.n	800c432 <_printf_i+0x10e>
 800c426:	6821      	ldr	r1, [r4, #0]
 800c428:	432e      	orrs	r6, r5
 800c42a:	f021 0104 	bic.w	r1, r1, #4
 800c42e:	6021      	str	r1, [r4, #0]
 800c430:	d04b      	beq.n	800c4ca <_printf_i+0x1a6>
 800c432:	4616      	mov	r6, r2
 800c434:	fbb5 f1f3 	udiv	r1, r5, r3
 800c438:	fb03 5711 	mls	r7, r3, r1, r5
 800c43c:	5dc7      	ldrb	r7, [r0, r7]
 800c43e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c442:	462f      	mov	r7, r5
 800c444:	42bb      	cmp	r3, r7
 800c446:	460d      	mov	r5, r1
 800c448:	d9f4      	bls.n	800c434 <_printf_i+0x110>
 800c44a:	2b08      	cmp	r3, #8
 800c44c:	d10b      	bne.n	800c466 <_printf_i+0x142>
 800c44e:	6823      	ldr	r3, [r4, #0]
 800c450:	07df      	lsls	r7, r3, #31
 800c452:	d508      	bpl.n	800c466 <_printf_i+0x142>
 800c454:	6923      	ldr	r3, [r4, #16]
 800c456:	6861      	ldr	r1, [r4, #4]
 800c458:	4299      	cmp	r1, r3
 800c45a:	bfde      	ittt	le
 800c45c:	2330      	movle	r3, #48	@ 0x30
 800c45e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c462:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c466:	1b92      	subs	r2, r2, r6
 800c468:	6122      	str	r2, [r4, #16]
 800c46a:	f8cd a000 	str.w	sl, [sp]
 800c46e:	464b      	mov	r3, r9
 800c470:	aa03      	add	r2, sp, #12
 800c472:	4621      	mov	r1, r4
 800c474:	4640      	mov	r0, r8
 800c476:	f7ff fee7 	bl	800c248 <_printf_common>
 800c47a:	3001      	adds	r0, #1
 800c47c:	d14a      	bne.n	800c514 <_printf_i+0x1f0>
 800c47e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c482:	b004      	add	sp, #16
 800c484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c488:	6823      	ldr	r3, [r4, #0]
 800c48a:	f043 0320 	orr.w	r3, r3, #32
 800c48e:	6023      	str	r3, [r4, #0]
 800c490:	4832      	ldr	r0, [pc, #200]	@ (800c55c <_printf_i+0x238>)
 800c492:	2778      	movs	r7, #120	@ 0x78
 800c494:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c498:	6823      	ldr	r3, [r4, #0]
 800c49a:	6831      	ldr	r1, [r6, #0]
 800c49c:	061f      	lsls	r7, r3, #24
 800c49e:	f851 5b04 	ldr.w	r5, [r1], #4
 800c4a2:	d402      	bmi.n	800c4aa <_printf_i+0x186>
 800c4a4:	065f      	lsls	r7, r3, #25
 800c4a6:	bf48      	it	mi
 800c4a8:	b2ad      	uxthmi	r5, r5
 800c4aa:	6031      	str	r1, [r6, #0]
 800c4ac:	07d9      	lsls	r1, r3, #31
 800c4ae:	bf44      	itt	mi
 800c4b0:	f043 0320 	orrmi.w	r3, r3, #32
 800c4b4:	6023      	strmi	r3, [r4, #0]
 800c4b6:	b11d      	cbz	r5, 800c4c0 <_printf_i+0x19c>
 800c4b8:	2310      	movs	r3, #16
 800c4ba:	e7ad      	b.n	800c418 <_printf_i+0xf4>
 800c4bc:	4826      	ldr	r0, [pc, #152]	@ (800c558 <_printf_i+0x234>)
 800c4be:	e7e9      	b.n	800c494 <_printf_i+0x170>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	f023 0320 	bic.w	r3, r3, #32
 800c4c6:	6023      	str	r3, [r4, #0]
 800c4c8:	e7f6      	b.n	800c4b8 <_printf_i+0x194>
 800c4ca:	4616      	mov	r6, r2
 800c4cc:	e7bd      	b.n	800c44a <_printf_i+0x126>
 800c4ce:	6833      	ldr	r3, [r6, #0]
 800c4d0:	6825      	ldr	r5, [r4, #0]
 800c4d2:	6961      	ldr	r1, [r4, #20]
 800c4d4:	1d18      	adds	r0, r3, #4
 800c4d6:	6030      	str	r0, [r6, #0]
 800c4d8:	062e      	lsls	r6, r5, #24
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	d501      	bpl.n	800c4e2 <_printf_i+0x1be>
 800c4de:	6019      	str	r1, [r3, #0]
 800c4e0:	e002      	b.n	800c4e8 <_printf_i+0x1c4>
 800c4e2:	0668      	lsls	r0, r5, #25
 800c4e4:	d5fb      	bpl.n	800c4de <_printf_i+0x1ba>
 800c4e6:	8019      	strh	r1, [r3, #0]
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	6123      	str	r3, [r4, #16]
 800c4ec:	4616      	mov	r6, r2
 800c4ee:	e7bc      	b.n	800c46a <_printf_i+0x146>
 800c4f0:	6833      	ldr	r3, [r6, #0]
 800c4f2:	1d1a      	adds	r2, r3, #4
 800c4f4:	6032      	str	r2, [r6, #0]
 800c4f6:	681e      	ldr	r6, [r3, #0]
 800c4f8:	6862      	ldr	r2, [r4, #4]
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	f7f3 feef 	bl	80002e0 <memchr>
 800c502:	b108      	cbz	r0, 800c508 <_printf_i+0x1e4>
 800c504:	1b80      	subs	r0, r0, r6
 800c506:	6060      	str	r0, [r4, #4]
 800c508:	6863      	ldr	r3, [r4, #4]
 800c50a:	6123      	str	r3, [r4, #16]
 800c50c:	2300      	movs	r3, #0
 800c50e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c512:	e7aa      	b.n	800c46a <_printf_i+0x146>
 800c514:	6923      	ldr	r3, [r4, #16]
 800c516:	4632      	mov	r2, r6
 800c518:	4649      	mov	r1, r9
 800c51a:	4640      	mov	r0, r8
 800c51c:	47d0      	blx	sl
 800c51e:	3001      	adds	r0, #1
 800c520:	d0ad      	beq.n	800c47e <_printf_i+0x15a>
 800c522:	6823      	ldr	r3, [r4, #0]
 800c524:	079b      	lsls	r3, r3, #30
 800c526:	d413      	bmi.n	800c550 <_printf_i+0x22c>
 800c528:	68e0      	ldr	r0, [r4, #12]
 800c52a:	9b03      	ldr	r3, [sp, #12]
 800c52c:	4298      	cmp	r0, r3
 800c52e:	bfb8      	it	lt
 800c530:	4618      	movlt	r0, r3
 800c532:	e7a6      	b.n	800c482 <_printf_i+0x15e>
 800c534:	2301      	movs	r3, #1
 800c536:	4632      	mov	r2, r6
 800c538:	4649      	mov	r1, r9
 800c53a:	4640      	mov	r0, r8
 800c53c:	47d0      	blx	sl
 800c53e:	3001      	adds	r0, #1
 800c540:	d09d      	beq.n	800c47e <_printf_i+0x15a>
 800c542:	3501      	adds	r5, #1
 800c544:	68e3      	ldr	r3, [r4, #12]
 800c546:	9903      	ldr	r1, [sp, #12]
 800c548:	1a5b      	subs	r3, r3, r1
 800c54a:	42ab      	cmp	r3, r5
 800c54c:	dcf2      	bgt.n	800c534 <_printf_i+0x210>
 800c54e:	e7eb      	b.n	800c528 <_printf_i+0x204>
 800c550:	2500      	movs	r5, #0
 800c552:	f104 0619 	add.w	r6, r4, #25
 800c556:	e7f5      	b.n	800c544 <_printf_i+0x220>
 800c558:	0800c97d 	.word	0x0800c97d
 800c55c:	0800c98e 	.word	0x0800c98e

0800c560 <__sflush_r>:
 800c560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c568:	0716      	lsls	r6, r2, #28
 800c56a:	4605      	mov	r5, r0
 800c56c:	460c      	mov	r4, r1
 800c56e:	d454      	bmi.n	800c61a <__sflush_r+0xba>
 800c570:	684b      	ldr	r3, [r1, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	dc02      	bgt.n	800c57c <__sflush_r+0x1c>
 800c576:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c578:	2b00      	cmp	r3, #0
 800c57a:	dd48      	ble.n	800c60e <__sflush_r+0xae>
 800c57c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c57e:	2e00      	cmp	r6, #0
 800c580:	d045      	beq.n	800c60e <__sflush_r+0xae>
 800c582:	2300      	movs	r3, #0
 800c584:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c588:	682f      	ldr	r7, [r5, #0]
 800c58a:	6a21      	ldr	r1, [r4, #32]
 800c58c:	602b      	str	r3, [r5, #0]
 800c58e:	d030      	beq.n	800c5f2 <__sflush_r+0x92>
 800c590:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c592:	89a3      	ldrh	r3, [r4, #12]
 800c594:	0759      	lsls	r1, r3, #29
 800c596:	d505      	bpl.n	800c5a4 <__sflush_r+0x44>
 800c598:	6863      	ldr	r3, [r4, #4]
 800c59a:	1ad2      	subs	r2, r2, r3
 800c59c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c59e:	b10b      	cbz	r3, 800c5a4 <__sflush_r+0x44>
 800c5a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c5a2:	1ad2      	subs	r2, r2, r3
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c5a8:	6a21      	ldr	r1, [r4, #32]
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	47b0      	blx	r6
 800c5ae:	1c43      	adds	r3, r0, #1
 800c5b0:	89a3      	ldrh	r3, [r4, #12]
 800c5b2:	d106      	bne.n	800c5c2 <__sflush_r+0x62>
 800c5b4:	6829      	ldr	r1, [r5, #0]
 800c5b6:	291d      	cmp	r1, #29
 800c5b8:	d82b      	bhi.n	800c612 <__sflush_r+0xb2>
 800c5ba:	4a2a      	ldr	r2, [pc, #168]	@ (800c664 <__sflush_r+0x104>)
 800c5bc:	40ca      	lsrs	r2, r1
 800c5be:	07d6      	lsls	r6, r2, #31
 800c5c0:	d527      	bpl.n	800c612 <__sflush_r+0xb2>
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	6062      	str	r2, [r4, #4]
 800c5c6:	04d9      	lsls	r1, r3, #19
 800c5c8:	6922      	ldr	r2, [r4, #16]
 800c5ca:	6022      	str	r2, [r4, #0]
 800c5cc:	d504      	bpl.n	800c5d8 <__sflush_r+0x78>
 800c5ce:	1c42      	adds	r2, r0, #1
 800c5d0:	d101      	bne.n	800c5d6 <__sflush_r+0x76>
 800c5d2:	682b      	ldr	r3, [r5, #0]
 800c5d4:	b903      	cbnz	r3, 800c5d8 <__sflush_r+0x78>
 800c5d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c5d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5da:	602f      	str	r7, [r5, #0]
 800c5dc:	b1b9      	cbz	r1, 800c60e <__sflush_r+0xae>
 800c5de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5e2:	4299      	cmp	r1, r3
 800c5e4:	d002      	beq.n	800c5ec <__sflush_r+0x8c>
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	f7ff fa9c 	bl	800bb24 <_free_r>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5f0:	e00d      	b.n	800c60e <__sflush_r+0xae>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	47b0      	blx	r6
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	1c50      	adds	r0, r2, #1
 800c5fc:	d1c9      	bne.n	800c592 <__sflush_r+0x32>
 800c5fe:	682b      	ldr	r3, [r5, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d0c6      	beq.n	800c592 <__sflush_r+0x32>
 800c604:	2b1d      	cmp	r3, #29
 800c606:	d001      	beq.n	800c60c <__sflush_r+0xac>
 800c608:	2b16      	cmp	r3, #22
 800c60a:	d11e      	bne.n	800c64a <__sflush_r+0xea>
 800c60c:	602f      	str	r7, [r5, #0]
 800c60e:	2000      	movs	r0, #0
 800c610:	e022      	b.n	800c658 <__sflush_r+0xf8>
 800c612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c616:	b21b      	sxth	r3, r3
 800c618:	e01b      	b.n	800c652 <__sflush_r+0xf2>
 800c61a:	690f      	ldr	r7, [r1, #16]
 800c61c:	2f00      	cmp	r7, #0
 800c61e:	d0f6      	beq.n	800c60e <__sflush_r+0xae>
 800c620:	0793      	lsls	r3, r2, #30
 800c622:	680e      	ldr	r6, [r1, #0]
 800c624:	bf08      	it	eq
 800c626:	694b      	ldreq	r3, [r1, #20]
 800c628:	600f      	str	r7, [r1, #0]
 800c62a:	bf18      	it	ne
 800c62c:	2300      	movne	r3, #0
 800c62e:	eba6 0807 	sub.w	r8, r6, r7
 800c632:	608b      	str	r3, [r1, #8]
 800c634:	f1b8 0f00 	cmp.w	r8, #0
 800c638:	dde9      	ble.n	800c60e <__sflush_r+0xae>
 800c63a:	6a21      	ldr	r1, [r4, #32]
 800c63c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c63e:	4643      	mov	r3, r8
 800c640:	463a      	mov	r2, r7
 800c642:	4628      	mov	r0, r5
 800c644:	47b0      	blx	r6
 800c646:	2800      	cmp	r0, #0
 800c648:	dc08      	bgt.n	800c65c <__sflush_r+0xfc>
 800c64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c652:	81a3      	strh	r3, [r4, #12]
 800c654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c65c:	4407      	add	r7, r0
 800c65e:	eba8 0800 	sub.w	r8, r8, r0
 800c662:	e7e7      	b.n	800c634 <__sflush_r+0xd4>
 800c664:	20400001 	.word	0x20400001

0800c668 <_fflush_r>:
 800c668:	b538      	push	{r3, r4, r5, lr}
 800c66a:	690b      	ldr	r3, [r1, #16]
 800c66c:	4605      	mov	r5, r0
 800c66e:	460c      	mov	r4, r1
 800c670:	b913      	cbnz	r3, 800c678 <_fflush_r+0x10>
 800c672:	2500      	movs	r5, #0
 800c674:	4628      	mov	r0, r5
 800c676:	bd38      	pop	{r3, r4, r5, pc}
 800c678:	b118      	cbz	r0, 800c682 <_fflush_r+0x1a>
 800c67a:	6a03      	ldr	r3, [r0, #32]
 800c67c:	b90b      	cbnz	r3, 800c682 <_fflush_r+0x1a>
 800c67e:	f7ff f835 	bl	800b6ec <__sinit>
 800c682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d0f3      	beq.n	800c672 <_fflush_r+0xa>
 800c68a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c68c:	07d0      	lsls	r0, r2, #31
 800c68e:	d404      	bmi.n	800c69a <_fflush_r+0x32>
 800c690:	0599      	lsls	r1, r3, #22
 800c692:	d402      	bmi.n	800c69a <_fflush_r+0x32>
 800c694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c696:	f7ff fa42 	bl	800bb1e <__retarget_lock_acquire_recursive>
 800c69a:	4628      	mov	r0, r5
 800c69c:	4621      	mov	r1, r4
 800c69e:	f7ff ff5f 	bl	800c560 <__sflush_r>
 800c6a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6a4:	07da      	lsls	r2, r3, #31
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	d4e4      	bmi.n	800c674 <_fflush_r+0xc>
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	059b      	lsls	r3, r3, #22
 800c6ae:	d4e1      	bmi.n	800c674 <_fflush_r+0xc>
 800c6b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6b2:	f7ff fa35 	bl	800bb20 <__retarget_lock_release_recursive>
 800c6b6:	e7dd      	b.n	800c674 <_fflush_r+0xc>

0800c6b8 <__swhatbuf_r>:
 800c6b8:	b570      	push	{r4, r5, r6, lr}
 800c6ba:	460c      	mov	r4, r1
 800c6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c0:	2900      	cmp	r1, #0
 800c6c2:	b096      	sub	sp, #88	@ 0x58
 800c6c4:	4615      	mov	r5, r2
 800c6c6:	461e      	mov	r6, r3
 800c6c8:	da0d      	bge.n	800c6e6 <__swhatbuf_r+0x2e>
 800c6ca:	89a3      	ldrh	r3, [r4, #12]
 800c6cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c6d0:	f04f 0100 	mov.w	r1, #0
 800c6d4:	bf14      	ite	ne
 800c6d6:	2340      	movne	r3, #64	@ 0x40
 800c6d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c6dc:	2000      	movs	r0, #0
 800c6de:	6031      	str	r1, [r6, #0]
 800c6e0:	602b      	str	r3, [r5, #0]
 800c6e2:	b016      	add	sp, #88	@ 0x58
 800c6e4:	bd70      	pop	{r4, r5, r6, pc}
 800c6e6:	466a      	mov	r2, sp
 800c6e8:	f000 f862 	bl	800c7b0 <_fstat_r>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	dbec      	blt.n	800c6ca <__swhatbuf_r+0x12>
 800c6f0:	9901      	ldr	r1, [sp, #4]
 800c6f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c6f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c6fa:	4259      	negs	r1, r3
 800c6fc:	4159      	adcs	r1, r3
 800c6fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c702:	e7eb      	b.n	800c6dc <__swhatbuf_r+0x24>

0800c704 <__smakebuf_r>:
 800c704:	898b      	ldrh	r3, [r1, #12]
 800c706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c708:	079d      	lsls	r5, r3, #30
 800c70a:	4606      	mov	r6, r0
 800c70c:	460c      	mov	r4, r1
 800c70e:	d507      	bpl.n	800c720 <__smakebuf_r+0x1c>
 800c710:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c714:	6023      	str	r3, [r4, #0]
 800c716:	6123      	str	r3, [r4, #16]
 800c718:	2301      	movs	r3, #1
 800c71a:	6163      	str	r3, [r4, #20]
 800c71c:	b003      	add	sp, #12
 800c71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c720:	ab01      	add	r3, sp, #4
 800c722:	466a      	mov	r2, sp
 800c724:	f7ff ffc8 	bl	800c6b8 <__swhatbuf_r>
 800c728:	9f00      	ldr	r7, [sp, #0]
 800c72a:	4605      	mov	r5, r0
 800c72c:	4639      	mov	r1, r7
 800c72e:	4630      	mov	r0, r6
 800c730:	f7ff fa64 	bl	800bbfc <_malloc_r>
 800c734:	b948      	cbnz	r0, 800c74a <__smakebuf_r+0x46>
 800c736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c73a:	059a      	lsls	r2, r3, #22
 800c73c:	d4ee      	bmi.n	800c71c <__smakebuf_r+0x18>
 800c73e:	f023 0303 	bic.w	r3, r3, #3
 800c742:	f043 0302 	orr.w	r3, r3, #2
 800c746:	81a3      	strh	r3, [r4, #12]
 800c748:	e7e2      	b.n	800c710 <__smakebuf_r+0xc>
 800c74a:	89a3      	ldrh	r3, [r4, #12]
 800c74c:	6020      	str	r0, [r4, #0]
 800c74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c752:	81a3      	strh	r3, [r4, #12]
 800c754:	9b01      	ldr	r3, [sp, #4]
 800c756:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c75a:	b15b      	cbz	r3, 800c774 <__smakebuf_r+0x70>
 800c75c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c760:	4630      	mov	r0, r6
 800c762:	f000 f837 	bl	800c7d4 <_isatty_r>
 800c766:	b128      	cbz	r0, 800c774 <__smakebuf_r+0x70>
 800c768:	89a3      	ldrh	r3, [r4, #12]
 800c76a:	f023 0303 	bic.w	r3, r3, #3
 800c76e:	f043 0301 	orr.w	r3, r3, #1
 800c772:	81a3      	strh	r3, [r4, #12]
 800c774:	89a3      	ldrh	r3, [r4, #12]
 800c776:	431d      	orrs	r5, r3
 800c778:	81a5      	strh	r5, [r4, #12]
 800c77a:	e7cf      	b.n	800c71c <__smakebuf_r+0x18>

0800c77c <memmove>:
 800c77c:	4288      	cmp	r0, r1
 800c77e:	b510      	push	{r4, lr}
 800c780:	eb01 0402 	add.w	r4, r1, r2
 800c784:	d902      	bls.n	800c78c <memmove+0x10>
 800c786:	4284      	cmp	r4, r0
 800c788:	4623      	mov	r3, r4
 800c78a:	d807      	bhi.n	800c79c <memmove+0x20>
 800c78c:	1e43      	subs	r3, r0, #1
 800c78e:	42a1      	cmp	r1, r4
 800c790:	d008      	beq.n	800c7a4 <memmove+0x28>
 800c792:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c79a:	e7f8      	b.n	800c78e <memmove+0x12>
 800c79c:	4402      	add	r2, r0
 800c79e:	4601      	mov	r1, r0
 800c7a0:	428a      	cmp	r2, r1
 800c7a2:	d100      	bne.n	800c7a6 <memmove+0x2a>
 800c7a4:	bd10      	pop	{r4, pc}
 800c7a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7ae:	e7f7      	b.n	800c7a0 <memmove+0x24>

0800c7b0 <_fstat_r>:
 800c7b0:	b538      	push	{r3, r4, r5, lr}
 800c7b2:	4d07      	ldr	r5, [pc, #28]	@ (800c7d0 <_fstat_r+0x20>)
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	4608      	mov	r0, r1
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	602b      	str	r3, [r5, #0]
 800c7be:	f7f4 fbbe 	bl	8000f3e <_fstat>
 800c7c2:	1c43      	adds	r3, r0, #1
 800c7c4:	d102      	bne.n	800c7cc <_fstat_r+0x1c>
 800c7c6:	682b      	ldr	r3, [r5, #0]
 800c7c8:	b103      	cbz	r3, 800c7cc <_fstat_r+0x1c>
 800c7ca:	6023      	str	r3, [r4, #0]
 800c7cc:	bd38      	pop	{r3, r4, r5, pc}
 800c7ce:	bf00      	nop
 800c7d0:	24003358 	.word	0x24003358

0800c7d4 <_isatty_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	4d06      	ldr	r5, [pc, #24]	@ (800c7f0 <_isatty_r+0x1c>)
 800c7d8:	2300      	movs	r3, #0
 800c7da:	4604      	mov	r4, r0
 800c7dc:	4608      	mov	r0, r1
 800c7de:	602b      	str	r3, [r5, #0]
 800c7e0:	f7f4 fbbd 	bl	8000f5e <_isatty>
 800c7e4:	1c43      	adds	r3, r0, #1
 800c7e6:	d102      	bne.n	800c7ee <_isatty_r+0x1a>
 800c7e8:	682b      	ldr	r3, [r5, #0]
 800c7ea:	b103      	cbz	r3, 800c7ee <_isatty_r+0x1a>
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	bd38      	pop	{r3, r4, r5, pc}
 800c7f0:	24003358 	.word	0x24003358

0800c7f4 <_sbrk_r>:
 800c7f4:	b538      	push	{r3, r4, r5, lr}
 800c7f6:	4d06      	ldr	r5, [pc, #24]	@ (800c810 <_sbrk_r+0x1c>)
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	4608      	mov	r0, r1
 800c7fe:	602b      	str	r3, [r5, #0]
 800c800:	f7f4 fbc6 	bl	8000f90 <_sbrk>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d102      	bne.n	800c80e <_sbrk_r+0x1a>
 800c808:	682b      	ldr	r3, [r5, #0]
 800c80a:	b103      	cbz	r3, 800c80e <_sbrk_r+0x1a>
 800c80c:	6023      	str	r3, [r4, #0]
 800c80e:	bd38      	pop	{r3, r4, r5, pc}
 800c810:	24003358 	.word	0x24003358

0800c814 <memcpy>:
 800c814:	440a      	add	r2, r1
 800c816:	4291      	cmp	r1, r2
 800c818:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c81c:	d100      	bne.n	800c820 <memcpy+0xc>
 800c81e:	4770      	bx	lr
 800c820:	b510      	push	{r4, lr}
 800c822:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c82a:	4291      	cmp	r1, r2
 800c82c:	d1f9      	bne.n	800c822 <memcpy+0xe>
 800c82e:	bd10      	pop	{r4, pc}

0800c830 <_realloc_r>:
 800c830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c834:	4607      	mov	r7, r0
 800c836:	4614      	mov	r4, r2
 800c838:	460d      	mov	r5, r1
 800c83a:	b921      	cbnz	r1, 800c846 <_realloc_r+0x16>
 800c83c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c840:	4611      	mov	r1, r2
 800c842:	f7ff b9db 	b.w	800bbfc <_malloc_r>
 800c846:	b92a      	cbnz	r2, 800c854 <_realloc_r+0x24>
 800c848:	f7ff f96c 	bl	800bb24 <_free_r>
 800c84c:	4625      	mov	r5, r4
 800c84e:	4628      	mov	r0, r5
 800c850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c854:	f000 f81a 	bl	800c88c <_malloc_usable_size_r>
 800c858:	4284      	cmp	r4, r0
 800c85a:	4606      	mov	r6, r0
 800c85c:	d802      	bhi.n	800c864 <_realloc_r+0x34>
 800c85e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c862:	d8f4      	bhi.n	800c84e <_realloc_r+0x1e>
 800c864:	4621      	mov	r1, r4
 800c866:	4638      	mov	r0, r7
 800c868:	f7ff f9c8 	bl	800bbfc <_malloc_r>
 800c86c:	4680      	mov	r8, r0
 800c86e:	b908      	cbnz	r0, 800c874 <_realloc_r+0x44>
 800c870:	4645      	mov	r5, r8
 800c872:	e7ec      	b.n	800c84e <_realloc_r+0x1e>
 800c874:	42b4      	cmp	r4, r6
 800c876:	4622      	mov	r2, r4
 800c878:	4629      	mov	r1, r5
 800c87a:	bf28      	it	cs
 800c87c:	4632      	movcs	r2, r6
 800c87e:	f7ff ffc9 	bl	800c814 <memcpy>
 800c882:	4629      	mov	r1, r5
 800c884:	4638      	mov	r0, r7
 800c886:	f7ff f94d 	bl	800bb24 <_free_r>
 800c88a:	e7f1      	b.n	800c870 <_realloc_r+0x40>

0800c88c <_malloc_usable_size_r>:
 800c88c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c890:	1f18      	subs	r0, r3, #4
 800c892:	2b00      	cmp	r3, #0
 800c894:	bfbc      	itt	lt
 800c896:	580b      	ldrlt	r3, [r1, r0]
 800c898:	18c0      	addlt	r0, r0, r3
 800c89a:	4770      	bx	lr

0800c89c <_init>:
 800c89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89e:	bf00      	nop
 800c8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8a2:	bc08      	pop	{r3}
 800c8a4:	469e      	mov	lr, r3
 800c8a6:	4770      	bx	lr

0800c8a8 <_fini>:
 800c8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8aa:	bf00      	nop
 800c8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ae:	bc08      	pop	{r3}
 800c8b0:	469e      	mov	lr, r3
 800c8b2:	4770      	bx	lr
