
by_god_please_2_5s_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010edc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0801117c  0801117c  0001217c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801164c  0801164c  0001306c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801164c  0801164c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011654  08011654  0001306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011654  08011654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011658  08011658  00012658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  24000000  0801165c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a80  24000070  080116c8  00013070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24003af0  080116c8  00013af0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028eee  00000000  00000000  0001309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000578e  00000000  00000000  0003bf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  00041718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016b4  00000000  00000000  000434e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043e04  00000000  00000000  00044b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f69e  00000000  00000000  000889a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019d3df  00000000  00000000  000b803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025541d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008404  00000000  00000000  00255460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0025d864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011164 	.word	0x08011164

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08011164 	.word	0x08011164

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <SystemInit+0x12c>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <SystemInit+0x12c>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <SystemInit+0x12c>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4a44      	ldr	r2, [pc, #272]	@ (80007e8 <SystemInit+0x12c>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <SystemInit+0x130>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <SystemInit+0x130>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a3e      	ldr	r2, [pc, #248]	@ (80007ec <SystemInit+0x130>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <SystemInit+0x134>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3c      	ldr	r2, [pc, #240]	@ (80007f0 <SystemInit+0x134>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <SystemInit+0x134>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b39      	ldr	r3, [pc, #228]	@ (80007f0 <SystemInit+0x134>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4938      	ldr	r1, [pc, #224]	@ (80007f0 <SystemInit+0x134>)
 8000710:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <SystemInit+0x138>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b35      	ldr	r3, [pc, #212]	@ (80007ec <SystemInit+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <SystemInit+0x130>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <SystemInit+0x130>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <SystemInit+0x134>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <SystemInit+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <SystemInit+0x134>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <SystemInit+0x134>)
 8000746:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <SystemInit+0x13c>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <SystemInit+0x134>)
 800074c:	4a2b      	ldr	r2, [pc, #172]	@ (80007fc <SystemInit+0x140>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <SystemInit+0x134>)
 8000752:	4a2b      	ldr	r2, [pc, #172]	@ (8000800 <SystemInit+0x144>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <SystemInit+0x134>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <SystemInit+0x134>)
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemInit+0x144>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <SystemInit+0x134>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <SystemInit+0x134>)
 800076a:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <SystemInit+0x144>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <SystemInit+0x134>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <SystemInit+0x134>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <SystemInit+0x134>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <SystemInit+0x134>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemInit+0x148>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <SystemInit+0x148>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <SystemInit+0x14c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <SystemInit+0x150>)
 8000798:	4013      	ands	r3, r2
 800079a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800079e:	d202      	bcs.n	80007a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x154>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <SystemInit+0x134>)
 80007a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d113      	bne.n	80007dc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <SystemInit+0x134>)
 80007b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ba:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <SystemInit+0x134>)
 80007bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <SystemInit+0x158>)
 80007c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <SystemInit+0x134>)
 80007ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <SystemInit+0x134>)
 80007d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	52002000 	.word	0x52002000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007f8:	02020200 	.word	0x02020200
 80007fc:	01ff0000 	.word	0x01ff0000
 8000800:	01010280 	.word	0x01010280
 8000804:	580000c0 	.word	0x580000c0
 8000808:	5c001000 	.word	0x5c001000
 800080c:	ffff0000 	.word	0xffff0000
 8000810:	51008108 	.word	0x51008108
 8000814:	52004000 	.word	0x52004000

08000818 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <ExitRun0Mode+0x2c>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <ExitRun0Mode+0x2c>)
 8000822:	f023 0302 	bic.w	r3, r3, #2
 8000826:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000828:	bf00      	nop
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <ExitRun0Mode+0x2c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f9      	beq.n	800082a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	58024800 	.word	0x58024800

08000848 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800086c:	4b31      	ldr	r3, [pc, #196]	@ (8000934 <MX_ADC1_Init+0xec>)
 800086e:	4a32      	ldr	r2, [pc, #200]	@ (8000938 <MX_ADC1_Init+0xf0>)
 8000870:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000872:	4b30      	ldr	r3, [pc, #192]	@ (8000934 <MX_ADC1_Init+0xec>)
 8000874:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000878:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800087a:	4b2e      	ldr	r3, [pc, #184]	@ (8000934 <MX_ADC1_Init+0xec>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000880:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <MX_ADC1_Init+0xec>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000886:	4b2b      	ldr	r3, [pc, #172]	@ (8000934 <MX_ADC1_Init+0xec>)
 8000888:	2204      	movs	r2, #4
 800088a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800088c:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <MX_ADC1_Init+0xec>)
 800088e:	2200      	movs	r2, #0
 8000890:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000892:	4b28      	ldr	r3, [pc, #160]	@ (8000934 <MX_ADC1_Init+0xec>)
 8000894:	2200      	movs	r2, #0
 8000896:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000898:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <MX_ADC1_Init+0xec>)
 800089a:	2201      	movs	r2, #1
 800089c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089e:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a4:	4b23      	ldr	r3, [pc, #140]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008aa:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008b0:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008be:	2200      	movs	r2, #0
 80008c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d0:	4818      	ldr	r0, [pc, #96]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008d2:	f001 f8db 	bl	8001a8c <HAL_ADC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008dc:	f000 fa78 	bl	8000dd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4812      	ldr	r0, [pc, #72]	@ (8000934 <MX_ADC1_Init+0xec>)
 80008ec:	f001 fff4 	bl	80028d8 <HAL_ADCEx_MultiModeConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008f6:	f000 fa6b 	bl	8000dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_ADC1_Init+0xf4>)
 80008fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fe:	2306      	movs	r3, #6
 8000900:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000906:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800090a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090c:	2304      	movs	r3, #4
 800090e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_ADC1_Init+0xec>)
 800091e:	f001 fb2f 	bl	8001f80 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000928:	f000 fa52 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	@ 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2400008c 	.word	0x2400008c
 8000938:	40022000 	.word	0x40022000
 800093c:	43210000 	.word	0x43210000

08000940 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0ba      	sub	sp, #232	@ 0xe8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	22c0      	movs	r2, #192	@ 0xc0
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f00f fc32 	bl	80101ca <memset>
  if(adcHandle->Instance==ADC1)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a18 <HAL_ADC_MspInit+0xd8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d14f      	bne.n	8000a10 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000970:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000974:	f04f 0300 	mov.w	r3, #0
 8000978:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800097c:	2304      	movs	r3, #4
 800097e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000980:	230a      	movs	r3, #10
 8000982:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800098c:	2302      	movs	r3, #2
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000990:	23c0      	movs	r3, #192	@ 0xc0
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000994:	2320      	movs	r3, #32
 8000996:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800099c:	2300      	movs	r3, #0
 800099e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a2:	f107 0310 	add.w	r3, r7, #16
 80009a6:	4618      	mov	r0, r3
 80009a8:	f004 ff76 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80009b2:	f000 fa0d 	bl	8000dd0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009b6:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <HAL_ADC_MspInit+0xdc>)
 80009b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009bc:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <HAL_ADC_MspInit+0xdc>)
 80009be:	f043 0320 	orr.w	r3, r3, #32
 80009c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <HAL_ADC_MspInit+0xdc>)
 80009c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009cc:	f003 0320 	and.w	r3, r3, #32
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_ADC_MspInit+0xdc>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009da:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <HAL_ADC_MspInit+0xdc>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <HAL_ADC_MspInit+0xdc>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f2:	2301      	movs	r3, #1
 80009f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f8:	2303      	movs	r3, #3
 80009fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <HAL_ADC_MspInit+0xe0>)
 8000a0c:	f002 feb6 	bl	800377c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	37e8      	adds	r7, #232	@ 0xe8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40022000 	.word	0x40022000
 8000a1c:	58024400 	.word	0x58024400
 8000a20:	58020000 	.word	0x58020000

08000a24 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b28      	ldr	r3, [pc, #160]	@ (8000adc <MX_GPIO_Init+0xb8>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	4a26      	ldr	r2, [pc, #152]	@ (8000adc <MX_GPIO_Init+0xb8>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4a:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <MX_GPIO_Init+0xb8>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <MX_GPIO_Init+0xb8>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000adc <MX_GPIO_Init+0xb8>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a68:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <MX_GPIO_Init+0xb8>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <MX_GPIO_Init+0xb8>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	4a17      	ldr	r2, [pc, #92]	@ (8000adc <MX_GPIO_Init+0xb8>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <MX_GPIO_Init+0xb8>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_GPIO_Init+0xb8>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <MX_GPIO_Init+0xb8>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <MX_GPIO_Init+0xb8>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ab2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <MX_GPIO_Init+0xbc>)
 8000ad0:	f002 fe54 	bl	800377c <HAL_GPIO_Init>

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	@ 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	58024400 	.word	0x58024400
 8000ae0:	58020000 	.word	0x58020000

08000ae4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000aea:	4a1c      	ldr	r2, [pc, #112]	@ (8000b5c <MX_I2C1_Init+0x78>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000af0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <MX_I2C1_Init+0x7c>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000af4:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b1e:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b20:	f003 f83c 	bl	8003b9c <HAL_I2C_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b2a:	f000 f951 	bl	8000dd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b32:	f003 fdd9 	bl	80046e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b3c:	f000 f948 	bl	8000dd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b44:	f003 fe1b 	bl	800477e <HAL_I2CEx_ConfigDigitalFilter>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 f93f 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	240000f0 	.word	0x240000f0
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	00707cbb 	.word	0x00707cbb

08000b64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0ba      	sub	sp, #232	@ 0xe8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	22c0      	movs	r2, #192	@ 0xc0
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00f fb20 	bl	80101ca <memset>
  if(i2cHandle->Instance==I2C1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8000c3c <HAL_I2C_MspInit+0xd8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d14e      	bne.n	8000c32 <HAL_I2C_MspInit+0xce>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b94:	f04f 0208 	mov.w	r2, #8
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 fe74 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000bb6:	f000 f90b 	bl	8000dd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <HAL_I2C_MspInit+0xdc>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c40 <HAL_I2C_MspInit+0xdc>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bca:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <HAL_I2C_MspInit+0xdc>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bd8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be0:	2312      	movs	r3, #18
 8000be2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bec:	2302      	movs	r3, #2
 8000bee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4811      	ldr	r0, [pc, #68]	@ (8000c44 <HAL_I2C_MspInit+0xe0>)
 8000c00:	f002 fdbc 	bl	800377c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <HAL_I2C_MspInit+0xdc>)
 8000c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <HAL_I2C_MspInit+0xdc>)
 8000c0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c10:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c14:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <HAL_I2C_MspInit+0xdc>)
 8000c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	201f      	movs	r0, #31
 8000c28:	f002 f80f 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c2c:	201f      	movs	r0, #31
 8000c2e:	f002 f826 	bl	8002c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c32:	bf00      	nop
 8000c34:	37e8      	adds	r7, #232	@ 0xe8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	58024400 	.word	0x58024400
 8000c44:	58020400 	.word	0x58020400

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  //}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f000 fc67 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 f83f 	bl	8000cd4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c56:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <main+0x88>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd0 <main+0x88>)
 8000c5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <main+0x88>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f002 ff63 	bl	8003b40 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f002 ff79 	bl	8003b74 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c86:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c88:	bf00      	nop
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <main+0x88>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d104      	bne.n	8000ca0 <main+0x58>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	dcf4      	bgt.n	8000c8a <main+0x42>
if ( timeout < 0 )
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	da01      	bge.n	8000caa <main+0x62>
{
Error_Handler();
 8000ca6:	f000 f893 	bl	8000dd0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000caa:	f7ff febb 	bl	8000a24 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cae:	f7ff fdcb 	bl	8000848 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cb2:	f7ff ff17 	bl	8000ae4 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8000cb6:	f000 f89d 	bl	8000df4 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 8000cba:	f000 fa8d 	bl	80011d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000cbe:	f000 fad7 	bl	8001270 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000cc2:	f00b ff95 	bl	800cbf0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  manager_init();
 8000cc6:	f00e fc37 	bl	800f538 <manager_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  manager_update();
 8000cca:	f00e fc45 	bl	800f558 <manager_update>
 8000cce:	e7fc      	b.n	8000cca <main+0x82>
 8000cd0:	58024400 	.word	0x58024400

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b09c      	sub	sp, #112	@ 0x70
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cde:	224c      	movs	r2, #76	@ 0x4c
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f00f fa71 	bl	80101ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2220      	movs	r2, #32
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f00f fa6b 	bl	80101ca <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cf4:	2004      	movs	r0, #4
 8000cf6:	f003 fd8f 	bl	8004818 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b32      	ldr	r3, [pc, #200]	@ (8000dc8 <SystemClock_Config+0xf4>)
 8000d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d02:	4a31      	ldr	r2, [pc, #196]	@ (8000dc8 <SystemClock_Config+0xf4>)
 8000d04:	f023 0301 	bic.w	r3, r3, #1
 8000d08:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc8 <SystemClock_Config+0xf4>)
 8000d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <SystemClock_Config+0xf8>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8000dcc <SystemClock_Config+0xf8>)
 8000d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b29      	ldr	r3, [pc, #164]	@ (8000dcc <SystemClock_Config+0xf8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d30:	bf00      	nop
 8000d32:	4b26      	ldr	r3, [pc, #152]	@ (8000dcc <SystemClock_Config+0xf8>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d3e:	d1f8      	bne.n	8000d32 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d40:	2302      	movs	r3, #2
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d48:	2340      	movs	r3, #64	@ 0x40
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d50:	2300      	movs	r3, #0
 8000d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d54:	2304      	movs	r3, #4
 8000d56:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d58:	230a      	movs	r3, #10
 8000d5a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fda7 	bl	80048cc <HAL_RCC_OscConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d84:	f000 f824 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d88:	233f      	movs	r3, #63	@ 0x3f
 8000d8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d9c:	2340      	movs	r3, #64	@ 0x40
 8000d9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000da0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000da4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2101      	movs	r1, #1
 8000dae:	4618      	mov	r0, r3
 8000db0:	f004 f9e6 	bl	8005180 <HAL_RCC_ClockConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000dba:	f000 f809 	bl	8000dd0 <Error_Handler>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3770      	adds	r7, #112	@ 0x70
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	58000400 	.word	0x58000400
 8000dcc:	58024800 	.word	0x58024800

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_UART_Transmit(DEBUG_UART, ERROR_MSG  , sizeof ERROR_MSG , -1);
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dd8:	2212      	movs	r2, #18
 8000dda:	4904      	ldr	r1, [pc, #16]	@ (8000dec <Error_Handler+0x1c>)
 8000ddc:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <Error_Handler+0x20>)
 8000dde:	f009 f8d5 	bl	8009f8c <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de2:	b672      	cpsid	i
}
 8000de4:	bf00      	nop
	__disable_irq();
  while (1)
 8000de6:	bf00      	nop
 8000de8:	e7fd      	b.n	8000de6 <Error_Handler+0x16>
 8000dea:	bf00      	nop
 8000dec:	0801117c 	.word	0x0801117c
 8000df0:	24000260 	.word	0x24000260

08000df4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <MX_SDMMC1_SD_Init+0x3c>)
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8000e34 <MX_SDMMC1_SD_Init+0x40>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <MX_SDMMC1_SD_Init+0x3c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <MX_SDMMC1_SD_Init+0x3c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_SDMMC1_SD_Init+0x3c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e10:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <MX_SDMMC1_SD_Init+0x3c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_SDMMC1_SD_Init+0x3c>)
 8000e18:	2208      	movs	r2, #8
 8000e1a:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <MX_SDMMC1_SD_Init+0x3c>)
 8000e1e:	f007 fa39 	bl	8008294 <HAL_SD_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000e28:	f7ff ffd2 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	24000144 	.word	0x24000144
 8000e34:	52007000 	.word	0x52007000

08000e38 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0bc      	sub	sp, #240	@ 0xf0
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	22c0      	movs	r2, #192	@ 0xc0
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f00f f9b6 	bl	80101ca <memset>
  if(sdHandle->Instance==SDMMC1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a48      	ldr	r2, [pc, #288]	@ (8000f84 <HAL_SD_MspInit+0x14c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	f040 8088 	bne.w	8000f7a <HAL_SD_MspInit+0x142>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000e6a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7a:	f107 0318 	add.w	r3, r7, #24
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f004 fd0a 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8000e8a:	f7ff ffa1 	bl	8000dd0 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f88 <HAL_SD_MspInit+0x150>)
 8000e90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e94:	4a3c      	ldr	r2, [pc, #240]	@ (8000f88 <HAL_SD_MspInit+0x150>)
 8000e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e9a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f88 <HAL_SD_MspInit+0x150>)
 8000ea0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eac:	4b36      	ldr	r3, [pc, #216]	@ (8000f88 <HAL_SD_MspInit+0x150>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb2:	4a35      	ldr	r2, [pc, #212]	@ (8000f88 <HAL_SD_MspInit+0x150>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebc:	4b32      	ldr	r3, [pc, #200]	@ (8000f88 <HAL_SD_MspInit+0x150>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	4b2f      	ldr	r3, [pc, #188]	@ (8000f88 <HAL_SD_MspInit+0x150>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8000f88 <HAL_SD_MspInit+0x150>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eda:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <HAL_SD_MspInit+0x150>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ee8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f02:	230c      	movs	r3, #12
 8000f04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f08:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481f      	ldr	r0, [pc, #124]	@ (8000f8c <HAL_SD_MspInit+0x154>)
 8000f10:	f002 fc34 	bl	800377c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f2e:	230c      	movs	r3, #12
 8000f30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f34:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4814      	ldr	r0, [pc, #80]	@ (8000f8c <HAL_SD_MspInit+0x154>)
 8000f3c:	f002 fc1e 	bl	800377c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f40:	2304      	movs	r3, #4
 8000f42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f58:	230c      	movs	r3, #12
 8000f5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f62:	4619      	mov	r1, r3
 8000f64:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <HAL_SD_MspInit+0x158>)
 8000f66:	f002 fc09 	bl	800377c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2031      	movs	r0, #49	@ 0x31
 8000f70:	f001 fe6b 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000f74:	2031      	movs	r0, #49	@ 0x31
 8000f76:	f001 fe82 	bl	8002c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	37f0      	adds	r7, #240	@ 0xf0
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	52007000 	.word	0x52007000
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020800 	.word	0x58020800
 8000f90:	58020c00 	.word	0x58020c00

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_MspInit+0x30>)
 8000f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fa0:	4a08      	ldr	r2, [pc, #32]	@ (8000fc4 <HAL_MspInit+0x30>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_MspInit+0x30>)
 8000fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	58024400 	.word	0x58024400

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <NMI_Handler+0x4>

08000fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <MemManage_Handler+0x4>

08000fe0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <UsageFault_Handler+0x4>

08000ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extended_tick++;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <SysTick_Handler+0x20>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	1c50      	adds	r0, r2, #1
 8001028:	f143 0100 	adc.w	r1, r3, #0
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <SysTick_Handler+0x20>)
 800102e:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001032:	f000 fae7 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	240001c0 	.word	0x240001c0

08001040 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <I2C1_EV_IRQHandler+0x10>)
 8001046:	f003 f873 	bl	8004130 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	240000f0 	.word	0x240000f0

08001054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <USART1_IRQHandler+0x10>)
 800105a:	f009 f981 	bl	800a360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	240001cc 	.word	0x240001cc

08001068 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <USART3_IRQHandler+0x10>)
 800106e:	f009 f977 	bl	800a360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	24000260 	.word	0x24000260

0800107c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <SDMMC1_IRQHandler+0x10>)
 8001082:	f007 fd3f 	bl	8008b04 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	24000144 	.word	0x24000144

08001090 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	e00a      	b.n	80010b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010a2:	f3af 8000 	nop.w
 80010a6:	4601      	mov	r1, r0
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	60ba      	str	r2, [r7, #8]
 80010ae:	b2ca      	uxtb	r2, r1
 80010b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbf0      	blt.n	80010a2 <_read+0x12>
  }

  return len;
 80010c0:	687b      	ldr	r3, [r7, #4]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	e009      	b.n	80010f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	60ba      	str	r2, [r7, #8]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbf1      	blt.n	80010dc <_write+0x12>
  }
  return len;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_close>:

int _close(int file)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800112a:	605a      	str	r2, [r3, #4]
  return 0;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_isatty>:

int _isatty(int file)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f00f f864 	bl	8010268 <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	24080000 	.word	0x24080000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	240001c8 	.word	0x240001c8
 80011d4:	24003af0 	.word	0x24003af0

080011d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 80011de:	4a23      	ldr	r2, [pc, #140]	@ (800126c <MX_USART1_UART_Init+0x94>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011e2:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001220:	4811      	ldr	r0, [pc, #68]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001222:	f008 fe63 	bl	8009eec <HAL_UART_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800122c:	f7ff fdd0 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001230:	2100      	movs	r1, #0
 8001232:	480d      	ldr	r0, [pc, #52]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001234:	f00a fe48 	bl	800bec8 <HAL_UARTEx_SetTxFifoThreshold>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800123e:	f7ff fdc7 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001242:	2100      	movs	r1, #0
 8001244:	4808      	ldr	r0, [pc, #32]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001246:	f00a fe7d 	bl	800bf44 <HAL_UARTEx_SetRxFifoThreshold>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001250:	f7ff fdbe 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	@ (8001268 <MX_USART1_UART_Init+0x90>)
 8001256:	f00a fdfe 	bl	800be56 <HAL_UARTEx_DisableFifoMode>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001260:	f7ff fdb6 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	240001cc 	.word	0x240001cc
 800126c:	40011000 	.word	0x40011000

08001270 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001274:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 8001276:	4a23      	ldr	r2, [pc, #140]	@ (8001304 <MX_USART3_UART_Init+0x94>)
 8001278:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800127a:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a6:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012b8:	4811      	ldr	r0, [pc, #68]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 80012ba:	f008 fe17 	bl	8009eec <HAL_UART_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012c4:	f7ff fd84 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c8:	2100      	movs	r1, #0
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 80012cc:	f00a fdfc 	bl	800bec8 <HAL_UARTEx_SetTxFifoThreshold>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012d6:	f7ff fd7b 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012da:	2100      	movs	r1, #0
 80012dc:	4808      	ldr	r0, [pc, #32]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 80012de:	f00a fe31 	bl	800bf44 <HAL_UARTEx_SetRxFifoThreshold>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012e8:	f7ff fd72 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <MX_USART3_UART_Init+0x90>)
 80012ee:	f00a fdb2 	bl	800be56 <HAL_UARTEx_DisableFifoMode>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012f8:	f7ff fd6a 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	24000260 	.word	0x24000260
 8001304:	40004800 	.word	0x40004800

08001308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0bc      	sub	sp, #240	@ 0xf0
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 0318 	add.w	r3, r7, #24
 8001324:	22c0      	movs	r2, #192	@ 0xc0
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f00e ff4e 	bl	80101ca <memset>
  if(uartHandle->Instance==USART1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a60      	ldr	r2, [pc, #384]	@ (80014b4 <HAL_UART_MspInit+0x1ac>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d164      	bne.n	8001402 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001338:	f04f 0201 	mov.w	r2, #1
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	4618      	mov	r0, r3
 8001350:	f004 faa2 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800135a:	f7ff fd39 	bl	8000dd0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800135e:	4b56      	ldr	r3, [pc, #344]	@ (80014b8 <HAL_UART_MspInit+0x1b0>)
 8001360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001364:	4a54      	ldr	r2, [pc, #336]	@ (80014b8 <HAL_UART_MspInit+0x1b0>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800136e:	4b52      	ldr	r3, [pc, #328]	@ (80014b8 <HAL_UART_MspInit+0x1b0>)
 8001370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4b4e      	ldr	r3, [pc, #312]	@ (80014b8 <HAL_UART_MspInit+0x1b0>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001382:	4a4d      	ldr	r2, [pc, #308]	@ (80014b8 <HAL_UART_MspInit+0x1b0>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800138c:	4b4a      	ldr	r3, [pc, #296]	@ (80014b8 <HAL_UART_MspInit+0x1b0>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800139a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800139e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013b4:	2304      	movs	r3, #4
 80013b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013be:	4619      	mov	r1, r3
 80013c0:	483e      	ldr	r0, [pc, #248]	@ (80014bc <HAL_UART_MspInit+0x1b4>)
 80013c2:	f002 f9db 	bl	800377c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c6:	2340      	movs	r3, #64	@ 0x40
 80013c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013de:	2307      	movs	r3, #7
 80013e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013e8:	4619      	mov	r1, r3
 80013ea:	4834      	ldr	r0, [pc, #208]	@ (80014bc <HAL_UART_MspInit+0x1b4>)
 80013ec:	f002 f9c6 	bl	800377c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	2025      	movs	r0, #37	@ 0x25
 80013f6:	f001 fc28 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013fa:	2025      	movs	r0, #37	@ 0x25
 80013fc:	f001 fc3f 	bl	8002c7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001400:	e053      	b.n	80014aa <HAL_UART_MspInit+0x1a2>
  else if(uartHandle->Instance==USART3)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a2e      	ldr	r2, [pc, #184]	@ (80014c0 <HAL_UART_MspInit+0x1b8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d14e      	bne.n	80014aa <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800140c:	f04f 0202 	mov.w	r2, #2
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	4618      	mov	r0, r3
 8001424:	f004 fa38 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 800142e:	f7ff fccf 	bl	8000dd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001432:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <HAL_UART_MspInit+0x1b0>)
 8001434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001438:	4a1f      	ldr	r2, [pc, #124]	@ (80014b8 <HAL_UART_MspInit+0x1b0>)
 800143a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800143e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <HAL_UART_MspInit+0x1b0>)
 8001444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_UART_MspInit+0x1b0>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001456:	4a18      	ldr	r2, [pc, #96]	@ (80014b8 <HAL_UART_MspInit+0x1b0>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001460:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <HAL_UART_MspInit+0x1b0>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800146e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001472:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001488:	2307      	movs	r3, #7
 800148a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001492:	4619      	mov	r1, r3
 8001494:	480b      	ldr	r0, [pc, #44]	@ (80014c4 <HAL_UART_MspInit+0x1bc>)
 8001496:	f002 f971 	bl	800377c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2027      	movs	r0, #39	@ 0x27
 80014a0:	f001 fbd3 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014a4:	2027      	movs	r0, #39	@ 0x27
 80014a6:	f001 fbea 	bl	8002c7e <HAL_NVIC_EnableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	37f0      	adds	r7, #240	@ 0xf0
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40011000 	.word	0x40011000
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58020400 	.word	0x58020400
 80014c0:	40004800 	.word	0x40004800
 80014c4:	58020c00 	.word	0x58020c00

080014c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014c8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001504 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80014cc:	f7ff f9a4 	bl	8000818 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d0:	f7ff f8f4 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	@ (800150c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fa:	f00e febb 	bl	8010274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff fba3 	bl	8000c48 <main>
  bx  lr
 8001502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001508:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800150c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001510:	0801165c 	.word	0x0801165c
  ldr r2, =_sbss
 8001514:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001518:	24003af0 	.word	0x24003af0

0800151c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC3_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001526:	2003      	movs	r0, #3
 8001528:	f001 fb84 	bl	8002c34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800152c:	f003 ffde 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 8001530:	4602      	mov	r2, r0
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_Init+0x68>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	4913      	ldr	r1, [pc, #76]	@ (800158c <HAL_Init+0x6c>)
 800153e:	5ccb      	ldrb	r3, [r1, r3]
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	fa22 f303 	lsr.w	r3, r2, r3
 8001548:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <HAL_Init+0x68>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	4a0e      	ldr	r2, [pc, #56]	@ (800158c <HAL_Init+0x6c>)
 8001554:	5cd3      	ldrb	r3, [r2, r3]
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	4a0b      	ldr	r2, [pc, #44]	@ (8001590 <HAL_Init+0x70>)
 8001562:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001564:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <HAL_Init+0x74>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f814 	bl	8001598 <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e002      	b.n	8001580 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800157a:	f7ff fd0b 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	58024400 	.word	0x58024400
 800158c:	0801154c 	.word	0x0801154c
 8001590:	24000004 	.word	0x24000004
 8001594:	24000000 	.word	0x24000000

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015a0:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <HAL_InitTick+0x60>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e021      	b.n	80015f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015ac:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <HAL_InitTick+0x64>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <HAL_InitTick+0x60>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fb69 	bl	8002c9a <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015e0:	f001 fb33 	bl	8002c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	@ (8001600 <HAL_InitTick+0x68>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2400000c 	.word	0x2400000c
 80015fc:	24000000 	.word	0x24000000
 8001600:	24000008 	.word	0x24000008

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2400000c 	.word	0x2400000c
 8001628:	240002f4 	.word	0x240002f4

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b03      	ldr	r3, [pc, #12]	@ (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	240002f4 	.word	0x240002f4

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2400000c 	.word	0x2400000c

0800168c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001690:	4b03      	ldr	r3, [pc, #12]	@ (80016a0 <HAL_GetREVID+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0c1b      	lsrs	r3, r3, #16
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	5c001000 	.word	0x5c001000

080016a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	609a      	str	r2, [r3, #8]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	609a      	str	r2, [r3, #8]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800171c:	2b00      	cmp	r3, #0
 800171e:	d107      	bne.n	8001730 <LL_ADC_SetChannelPreselection+0x24>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	0e9b      	lsrs	r3, r3, #26
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	2201      	movs	r2, #1
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	e015      	b.n	800175c <LL_ADC_SetChannelPreselection+0x50>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001746:	2320      	movs	r3, #32
 8001748:	e003      	b.n	8001752 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	2201      	movs	r2, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	69d2      	ldr	r2, [r2, #28]
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001766:	bf00      	nop
 8001768:	371c      	adds	r7, #28
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001772:	b480      	push	{r7}
 8001774:	b087      	sub	sp, #28
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3360      	adds	r3, #96	@ 0x60
 8001784:	461a      	mov	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	430b      	orrs	r3, r1
 80017a0:	431a      	orrs	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80017a6:	bf00      	nop
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	431a      	orrs	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	611a      	str	r2, [r3, #16]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3360      	adds	r3, #96	@ 0x60
 80017f4:	461a      	mov	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	431a      	orrs	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	601a      	str	r2, [r3, #0]
  }
}
 800180e:	bf00      	nop
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800181a:	b480      	push	{r7}
 800181c:	b087      	sub	sp, #28
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3330      	adds	r3, #48	@ 0x30
 800182a:	461a      	mov	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	4413      	add	r3, r2
 8001838:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	211f      	movs	r1, #31
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	401a      	ands	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	0e9b      	lsrs	r3, r3, #26
 8001852:	f003 011f 	and.w	r1, r3, #31
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	431a      	orrs	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001866:	bf00      	nop
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001872:	b480      	push	{r7}
 8001874:	b087      	sub	sp, #28
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3314      	adds	r3, #20
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	0e5b      	lsrs	r3, r3, #25
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	4413      	add	r3, r2
 8001890:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	0d1b      	lsrs	r3, r3, #20
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2107      	movs	r1, #7
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	0d1b      	lsrs	r3, r3, #20
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	431a      	orrs	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018bc:	bf00      	nop
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018e0:	43db      	mvns	r3, r3
 80018e2:	401a      	ands	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0318 	and.w	r3, r3, #24
 80018ea:	4908      	ldr	r1, [pc, #32]	@ (800190c <LL_ADC_SetChannelSingleDiff+0x44>)
 80018ec:	40d9      	lsrs	r1, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	400b      	ands	r3, r1
 80018f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018f6:	431a      	orrs	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	000fffff 	.word	0x000fffff

08001910 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 031f 	and.w	r3, r3, #31
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4b04      	ldr	r3, [pc, #16]	@ (800194c <LL_ADC_DisableDeepPowerDown+0x20>)
 800193a:	4013      	ands	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6093      	str	r3, [r2, #8]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	5fffffc0 	.word	0x5fffffc0

08001950 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001964:	d101      	bne.n	800196a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <LL_ADC_EnableInternalRegulator+0x24>)
 8001986:	4013      	ands	r3, r2
 8001988:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	6fffffc0 	.word	0x6fffffc0

080019a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019b4:	d101      	bne.n	80019ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <LL_ADC_Enable+0x24>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	7fffffc0 	.word	0x7fffffc0

080019f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <LL_ADC_IsEnabled+0x18>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <LL_ADC_IsEnabled+0x1a>
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <LL_ADC_REG_StartConversion+0x24>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	f043 0204 	orr.w	r2, r3, #4
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	7fffffc0 	.word	0x7fffffc0

08001a40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d101      	bne.n	8001a58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d101      	bne.n	8001a7e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e18f      	b.n	8001dc6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7fe ff43 	bl	8000940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff3f 	bl	8001950 <LL_ADC_IsDeepPowerDownEnabled>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff25 	bl	800192c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff5a 	bl	80019a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d114      	bne.n	8001b1c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff3e 	bl	8001978 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001afc:	4b87      	ldr	r3, [pc, #540]	@ (8001d1c <HAL_ADC_Init+0x290>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	4a87      	ldr	r2, [pc, #540]	@ (8001d20 <HAL_ADC_Init+0x294>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	099b      	lsrs	r3, r3, #6
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b0e:	e002      	b.n	8001b16 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f9      	bne.n	8001b10 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff3d 	bl	80019a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10d      	bne.n	8001b48 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b30:	f043 0210 	orr.w	r2, r3, #16
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff77 	bl	8001a40 <LL_ADC_REG_IsConversionOngoing>
 8001b52:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f040 8129 	bne.w	8001db4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f040 8125 	bne.w	8001db4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b6e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b72:	f043 0202 	orr.w	r2, r3, #2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff36 	bl	80019f0 <LL_ADC_IsEnabled>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d136      	bne.n	8001bf8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a65      	ldr	r2, [pc, #404]	@ (8001d24 <HAL_ADC_Init+0x298>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d004      	beq.n	8001b9e <HAL_ADC_Init+0x112>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a63      	ldr	r2, [pc, #396]	@ (8001d28 <HAL_ADC_Init+0x29c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10e      	bne.n	8001bbc <HAL_ADC_Init+0x130>
 8001b9e:	4861      	ldr	r0, [pc, #388]	@ (8001d24 <HAL_ADC_Init+0x298>)
 8001ba0:	f7ff ff26 	bl	80019f0 <LL_ADC_IsEnabled>
 8001ba4:	4604      	mov	r4, r0
 8001ba6:	4860      	ldr	r0, [pc, #384]	@ (8001d28 <HAL_ADC_Init+0x29c>)
 8001ba8:	f7ff ff22 	bl	80019f0 <LL_ADC_IsEnabled>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4323      	orrs	r3, r4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e008      	b.n	8001bce <HAL_ADC_Init+0x142>
 8001bbc:	485b      	ldr	r0, [pc, #364]	@ (8001d2c <HAL_ADC_Init+0x2a0>)
 8001bbe:	f7ff ff17 	bl	80019f0 <LL_ADC_IsEnabled>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d012      	beq.n	8001bf8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a53      	ldr	r2, [pc, #332]	@ (8001d24 <HAL_ADC_Init+0x298>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d004      	beq.n	8001be6 <HAL_ADC_Init+0x15a>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a51      	ldr	r2, [pc, #324]	@ (8001d28 <HAL_ADC_Init+0x29c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_Init+0x15e>
 8001be6:	4a52      	ldr	r2, [pc, #328]	@ (8001d30 <HAL_ADC_Init+0x2a4>)
 8001be8:	e000      	b.n	8001bec <HAL_ADC_Init+0x160>
 8001bea:	4a52      	ldr	r2, [pc, #328]	@ (8001d34 <HAL_ADC_Init+0x2a8>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f7ff fd56 	bl	80016a4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001bf8:	f7ff fd48 	bl	800168c <HAL_GetREVID>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d914      	bls.n	8001c30 <HAL_ADC_Init+0x1a4>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d110      	bne.n	8001c30 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	7d5b      	ldrb	r3, [r3, #21]
 8001c12:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c18:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c1e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7f1b      	ldrb	r3, [r3, #28]
 8001c24:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c26:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c28:	f043 030c 	orr.w	r3, r3, #12
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	e00d      	b.n	8001c4c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7d5b      	ldrb	r3, [r3, #21]
 8001c34:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c3a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c40:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7f1b      	ldrb	r3, [r3, #28]
 8001c46:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7f1b      	ldrb	r3, [r3, #28]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d106      	bne.n	8001c62 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	045b      	lsls	r3, r3, #17
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c76:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	4b2c      	ldr	r3, [pc, #176]	@ (8001d38 <HAL_ADC_Init+0x2ac>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	69b9      	ldr	r1, [r7, #24]
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fed2 	bl	8001a40 <LL_ADC_REG_IsConversionOngoing>
 8001c9c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fedf 	bl	8001a66 <LL_ADC_INJ_IsConversionOngoing>
 8001ca8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d15f      	bne.n	8001d70 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d15c      	bne.n	8001d70 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7d1b      	ldrb	r3, [r3, #20]
 8001cba:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <HAL_ADC_Init+0x2b0>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	69b9      	ldr	r1, [r7, #24]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d130      	bne.n	8001d44 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <HAL_ADC_Init+0x2b4>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001cf6:	3a01      	subs	r2, #1
 8001cf8:	0411      	lsls	r1, r2, #16
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cfe:	4311      	orrs	r1, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d04:	4311      	orrs	r1, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	611a      	str	r2, [r3, #16]
 8001d18:	e01c      	b.n	8001d54 <HAL_ADC_Init+0x2c8>
 8001d1a:	bf00      	nop
 8001d1c:	24000000 	.word	0x24000000
 8001d20:	053e2d63 	.word	0x053e2d63
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40022100 	.word	0x40022100
 8001d2c:	58026000 	.word	0x58026000
 8001d30:	40022300 	.word	0x40022300
 8001d34:	58026300 	.word	0x58026300
 8001d38:	fff0c003 	.word	0xfff0c003
 8001d3c:	ffffbffc 	.word	0xffffbffc
 8001d40:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fc82 	bl	8002674 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d10c      	bne.n	8001d92 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f023 010f 	bic.w	r1, r3, #15
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	1e5a      	subs	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d90:	e007      	b.n	8001da2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 020f 	bic.w	r2, r2, #15
 8001da0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	f043 0201 	orr.w	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001db2:	e007      	b.n	8001dc4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db8:	f043 0210 	orr.w	r2, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd90      	pop	{r4, r7, pc}
 8001dce:	bf00      	nop

08001dd0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a5c      	ldr	r2, [pc, #368]	@ (8001f50 <HAL_ADC_Start+0x180>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d004      	beq.n	8001dec <HAL_ADC_Start+0x1c>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f54 <HAL_ADC_Start+0x184>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_Start+0x20>
 8001dec:	4b5a      	ldr	r3, [pc, #360]	@ (8001f58 <HAL_ADC_Start+0x188>)
 8001dee:	e000      	b.n	8001df2 <HAL_ADC_Start+0x22>
 8001df0:	4b5a      	ldr	r3, [pc, #360]	@ (8001f5c <HAL_ADC_Start+0x18c>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fd8c 	bl	8001910 <LL_ADC_GetMultimode>
 8001df8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fe1e 	bl	8001a40 <LL_ADC_REG_IsConversionOngoing>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f040 809a 	bne.w	8001f40 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_Start+0x4a>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e095      	b.n	8001f46 <HAL_ADC_Start+0x176>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fb9c 	bl	8002560 <ADC_Enable>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 8081 	bne.w	8001f36 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e38:	4b49      	ldr	r3, [pc, #292]	@ (8001f60 <HAL_ADC_Start+0x190>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a42      	ldr	r2, [pc, #264]	@ (8001f54 <HAL_ADC_Start+0x184>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d002      	beq.n	8001e54 <HAL_ADC_Start+0x84>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	e000      	b.n	8001e56 <HAL_ADC_Start+0x86>
 8001e54:	4b3e      	ldr	r3, [pc, #248]	@ (8001f50 <HAL_ADC_Start+0x180>)
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d002      	beq.n	8001e64 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e7c:	d106      	bne.n	8001e8c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e82:	f023 0206 	bic.w	r2, r3, #6
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e8a:	e002      	b.n	8001e92 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	221c      	movs	r2, #28
 8001e98:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a2b      	ldr	r2, [pc, #172]	@ (8001f54 <HAL_ADC_Start+0x184>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d002      	beq.n	8001eb2 <HAL_ADC_Start+0xe2>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	e000      	b.n	8001eb4 <HAL_ADC_Start+0xe4>
 8001eb2:	4b27      	ldr	r3, [pc, #156]	@ (8001f50 <HAL_ADC_Start+0x180>)
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d008      	beq.n	8001ece <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b05      	cmp	r3, #5
 8001ec6:	d002      	beq.n	8001ece <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	2b09      	cmp	r3, #9
 8001ecc:	d114      	bne.n	8001ef8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ee4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fd91 	bl	8001a18 <LL_ADC_REG_StartConversion>
 8001ef6:	e025      	b.n	8001f44 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <HAL_ADC_Start+0x184>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d002      	beq.n	8001f14 <HAL_ADC_Start+0x144>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	e000      	b.n	8001f16 <HAL_ADC_Start+0x146>
 8001f14:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <HAL_ADC_Start+0x180>)
 8001f16:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00f      	beq.n	8001f44 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f28:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f2c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f34:	e006      	b.n	8001f44 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001f3e:	e001      	b.n	8001f44 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f40:	2302      	movs	r3, #2
 8001f42:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40022100 	.word	0x40022100
 8001f58:	40022300 	.word	0x40022300
 8001f5c:	58026300 	.word	0x58026300
 8001f60:	fffff0fe 	.word	0xfffff0fe

08001f64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b08d      	sub	sp, #52	@ 0x34
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a65      	ldr	r2, [pc, #404]	@ (8002130 <HAL_ADC_ConfigChannel+0x1b0>)
 8001f9a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x2a>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e2c7      	b.n	800253a <HAL_ADC_ConfigChannel+0x5ba>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fd42 	bl	8001a40 <LL_ADC_REG_IsConversionOngoing>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 82ac 	bne.w	800251c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db2c      	blt.n	8002026 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d108      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x6a>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	e016      	b.n	8002018 <HAL_ADC_ConfigChannel+0x98>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	613b      	str	r3, [r7, #16]
  return result;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002002:	2320      	movs	r3, #32
 8002004:	e003      	b.n	800200e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2201      	movs	r2, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	69d1      	ldr	r1, [r2, #28]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	430b      	orrs	r3, r1
 8002024:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6859      	ldr	r1, [r3, #4]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	f7ff fbf1 	bl	800181a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fcff 	bl	8001a40 <LL_ADC_REG_IsConversionOngoing>
 8002042:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fd0c 	bl	8001a66 <LL_ADC_INJ_IsConversionOngoing>
 800204e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 80b8 	bne.w	80021c8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 80b4 	bne.w	80021c8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6819      	ldr	r1, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	461a      	mov	r2, r3
 800206e:	f7ff fc00 	bl	8001872 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002072:	4b30      	ldr	r3, [pc, #192]	@ (8002134 <HAL_ADC_ConfigChannel+0x1b4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800207a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800207e:	d10b      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x118>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	e01d      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x154>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10b      	bne.n	80020be <HAL_ADC_ConfigChannel+0x13e>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	e00a      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x154>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d02c      	beq.n	8002138 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6919      	ldr	r1, [r3, #16]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	f7ff fb41 	bl	8001772 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6919      	ldr	r1, [r3, #16]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	7e5b      	ldrb	r3, [r3, #25]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d102      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x186>
 8002100:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002104:	e000      	b.n	8002108 <HAL_ADC_ConfigChannel+0x188>
 8002106:	2300      	movs	r3, #0
 8002108:	461a      	mov	r2, r3
 800210a:	f7ff fb6b 	bl	80017e4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	7e1b      	ldrb	r3, [r3, #24]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x1a4>
 800211e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002122:	e000      	b.n	8002126 <HAL_ADC_ConfigChannel+0x1a6>
 8002124:	2300      	movs	r3, #0
 8002126:	461a      	mov	r2, r3
 8002128:	f7ff fb43 	bl	80017b2 <LL_ADC_SetDataRightShift>
 800212c:	e04c      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x248>
 800212e:	bf00      	nop
 8002130:	47ff0000 	.word	0x47ff0000
 8002134:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	069b      	lsls	r3, r3, #26
 8002148:	429a      	cmp	r2, r3
 800214a:	d107      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800215a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002162:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	069b      	lsls	r3, r3, #26
 800216c:	429a      	cmp	r2, r3
 800216e:	d107      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800217e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002186:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	069b      	lsls	r3, r3, #26
 8002190:	429a      	cmp	r2, r3
 8002192:	d107      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021a2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	069b      	lsls	r3, r3, #26
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d107      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fc0f 	bl	80019f0 <LL_ADC_IsEnabled>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f040 81aa 	bne.w	800252e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6819      	ldr	r1, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f7ff fb6e 	bl	80018c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a87      	ldr	r2, [pc, #540]	@ (8002410 <HAL_ADC_ConfigChannel+0x490>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	f040 809a 	bne.w	800232c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4984      	ldr	r1, [pc, #528]	@ (8002414 <HAL_ADC_ConfigChannel+0x494>)
 8002202:	428b      	cmp	r3, r1
 8002204:	d147      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x316>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4983      	ldr	r1, [pc, #524]	@ (8002418 <HAL_ADC_ConfigChannel+0x498>)
 800220c:	428b      	cmp	r3, r1
 800220e:	d040      	beq.n	8002292 <HAL_ADC_ConfigChannel+0x312>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4981      	ldr	r1, [pc, #516]	@ (800241c <HAL_ADC_ConfigChannel+0x49c>)
 8002216:	428b      	cmp	r3, r1
 8002218:	d039      	beq.n	800228e <HAL_ADC_ConfigChannel+0x30e>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4980      	ldr	r1, [pc, #512]	@ (8002420 <HAL_ADC_ConfigChannel+0x4a0>)
 8002220:	428b      	cmp	r3, r1
 8002222:	d032      	beq.n	800228a <HAL_ADC_ConfigChannel+0x30a>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	497e      	ldr	r1, [pc, #504]	@ (8002424 <HAL_ADC_ConfigChannel+0x4a4>)
 800222a:	428b      	cmp	r3, r1
 800222c:	d02b      	beq.n	8002286 <HAL_ADC_ConfigChannel+0x306>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	497d      	ldr	r1, [pc, #500]	@ (8002428 <HAL_ADC_ConfigChannel+0x4a8>)
 8002234:	428b      	cmp	r3, r1
 8002236:	d024      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x302>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	497b      	ldr	r1, [pc, #492]	@ (800242c <HAL_ADC_ConfigChannel+0x4ac>)
 800223e:	428b      	cmp	r3, r1
 8002240:	d01d      	beq.n	800227e <HAL_ADC_ConfigChannel+0x2fe>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	497a      	ldr	r1, [pc, #488]	@ (8002430 <HAL_ADC_ConfigChannel+0x4b0>)
 8002248:	428b      	cmp	r3, r1
 800224a:	d016      	beq.n	800227a <HAL_ADC_ConfigChannel+0x2fa>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4978      	ldr	r1, [pc, #480]	@ (8002434 <HAL_ADC_ConfigChannel+0x4b4>)
 8002252:	428b      	cmp	r3, r1
 8002254:	d00f      	beq.n	8002276 <HAL_ADC_ConfigChannel+0x2f6>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4977      	ldr	r1, [pc, #476]	@ (8002438 <HAL_ADC_ConfigChannel+0x4b8>)
 800225c:	428b      	cmp	r3, r1
 800225e:	d008      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x2f2>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4975      	ldr	r1, [pc, #468]	@ (800243c <HAL_ADC_ConfigChannel+0x4bc>)
 8002266:	428b      	cmp	r3, r1
 8002268:	d101      	bne.n	800226e <HAL_ADC_ConfigChannel+0x2ee>
 800226a:	4b75      	ldr	r3, [pc, #468]	@ (8002440 <HAL_ADC_ConfigChannel+0x4c0>)
 800226c:	e05a      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 800226e:	2300      	movs	r3, #0
 8002270:	e058      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 8002272:	4b74      	ldr	r3, [pc, #464]	@ (8002444 <HAL_ADC_ConfigChannel+0x4c4>)
 8002274:	e056      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 8002276:	4b74      	ldr	r3, [pc, #464]	@ (8002448 <HAL_ADC_ConfigChannel+0x4c8>)
 8002278:	e054      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 800227a:	4b6e      	ldr	r3, [pc, #440]	@ (8002434 <HAL_ADC_ConfigChannel+0x4b4>)
 800227c:	e052      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 800227e:	4b6c      	ldr	r3, [pc, #432]	@ (8002430 <HAL_ADC_ConfigChannel+0x4b0>)
 8002280:	e050      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 8002282:	4b72      	ldr	r3, [pc, #456]	@ (800244c <HAL_ADC_ConfigChannel+0x4cc>)
 8002284:	e04e      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 8002286:	4b72      	ldr	r3, [pc, #456]	@ (8002450 <HAL_ADC_ConfigChannel+0x4d0>)
 8002288:	e04c      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 800228a:	4b72      	ldr	r3, [pc, #456]	@ (8002454 <HAL_ADC_ConfigChannel+0x4d4>)
 800228c:	e04a      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 800228e:	4b72      	ldr	r3, [pc, #456]	@ (8002458 <HAL_ADC_ConfigChannel+0x4d8>)
 8002290:	e048      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 8002292:	2301      	movs	r3, #1
 8002294:	e046      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4970      	ldr	r1, [pc, #448]	@ (800245c <HAL_ADC_ConfigChannel+0x4dc>)
 800229c:	428b      	cmp	r3, r1
 800229e:	d140      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x3a2>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	495c      	ldr	r1, [pc, #368]	@ (8002418 <HAL_ADC_ConfigChannel+0x498>)
 80022a6:	428b      	cmp	r3, r1
 80022a8:	d039      	beq.n	800231e <HAL_ADC_ConfigChannel+0x39e>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	495b      	ldr	r1, [pc, #364]	@ (800241c <HAL_ADC_ConfigChannel+0x49c>)
 80022b0:	428b      	cmp	r3, r1
 80022b2:	d032      	beq.n	800231a <HAL_ADC_ConfigChannel+0x39a>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4959      	ldr	r1, [pc, #356]	@ (8002420 <HAL_ADC_ConfigChannel+0x4a0>)
 80022ba:	428b      	cmp	r3, r1
 80022bc:	d02b      	beq.n	8002316 <HAL_ADC_ConfigChannel+0x396>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4958      	ldr	r1, [pc, #352]	@ (8002424 <HAL_ADC_ConfigChannel+0x4a4>)
 80022c4:	428b      	cmp	r3, r1
 80022c6:	d024      	beq.n	8002312 <HAL_ADC_ConfigChannel+0x392>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4956      	ldr	r1, [pc, #344]	@ (8002428 <HAL_ADC_ConfigChannel+0x4a8>)
 80022ce:	428b      	cmp	r3, r1
 80022d0:	d01d      	beq.n	800230e <HAL_ADC_ConfigChannel+0x38e>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4955      	ldr	r1, [pc, #340]	@ (800242c <HAL_ADC_ConfigChannel+0x4ac>)
 80022d8:	428b      	cmp	r3, r1
 80022da:	d016      	beq.n	800230a <HAL_ADC_ConfigChannel+0x38a>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4953      	ldr	r1, [pc, #332]	@ (8002430 <HAL_ADC_ConfigChannel+0x4b0>)
 80022e2:	428b      	cmp	r3, r1
 80022e4:	d00f      	beq.n	8002306 <HAL_ADC_ConfigChannel+0x386>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4952      	ldr	r1, [pc, #328]	@ (8002434 <HAL_ADC_ConfigChannel+0x4b4>)
 80022ec:	428b      	cmp	r3, r1
 80022ee:	d008      	beq.n	8002302 <HAL_ADC_ConfigChannel+0x382>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4951      	ldr	r1, [pc, #324]	@ (800243c <HAL_ADC_ConfigChannel+0x4bc>)
 80022f6:	428b      	cmp	r3, r1
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x37e>
 80022fa:	4b51      	ldr	r3, [pc, #324]	@ (8002440 <HAL_ADC_ConfigChannel+0x4c0>)
 80022fc:	e012      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 80022fe:	2300      	movs	r3, #0
 8002300:	e010      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 8002302:	4b51      	ldr	r3, [pc, #324]	@ (8002448 <HAL_ADC_ConfigChannel+0x4c8>)
 8002304:	e00e      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 8002306:	4b4b      	ldr	r3, [pc, #300]	@ (8002434 <HAL_ADC_ConfigChannel+0x4b4>)
 8002308:	e00c      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 800230a:	4b49      	ldr	r3, [pc, #292]	@ (8002430 <HAL_ADC_ConfigChannel+0x4b0>)
 800230c:	e00a      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 800230e:	4b4f      	ldr	r3, [pc, #316]	@ (800244c <HAL_ADC_ConfigChannel+0x4cc>)
 8002310:	e008      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 8002312:	4b4f      	ldr	r3, [pc, #316]	@ (8002450 <HAL_ADC_ConfigChannel+0x4d0>)
 8002314:	e006      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 8002316:	4b4f      	ldr	r3, [pc, #316]	@ (8002454 <HAL_ADC_ConfigChannel+0x4d4>)
 8002318:	e004      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 800231a:	4b4f      	ldr	r3, [pc, #316]	@ (8002458 <HAL_ADC_ConfigChannel+0x4d8>)
 800231c:	e002      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3a4>
 8002322:	2300      	movs	r3, #0
 8002324:	4619      	mov	r1, r3
 8002326:	4610      	mov	r0, r2
 8002328:	f7ff f9f0 	bl	800170c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f280 80fc 	bge.w	800252e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a36      	ldr	r2, [pc, #216]	@ (8002414 <HAL_ADC_ConfigChannel+0x494>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d004      	beq.n	800234a <HAL_ADC_ConfigChannel+0x3ca>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a45      	ldr	r2, [pc, #276]	@ (800245c <HAL_ADC_ConfigChannel+0x4dc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <HAL_ADC_ConfigChannel+0x3ce>
 800234a:	4b45      	ldr	r3, [pc, #276]	@ (8002460 <HAL_ADC_ConfigChannel+0x4e0>)
 800234c:	e000      	b.n	8002350 <HAL_ADC_ConfigChannel+0x3d0>
 800234e:	4b45      	ldr	r3, [pc, #276]	@ (8002464 <HAL_ADC_ConfigChannel+0x4e4>)
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff f9cd 	bl	80016f0 <LL_ADC_GetCommonPathInternalCh>
 8002356:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a2d      	ldr	r2, [pc, #180]	@ (8002414 <HAL_ADC_ConfigChannel+0x494>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d004      	beq.n	800236c <HAL_ADC_ConfigChannel+0x3ec>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a3d      	ldr	r2, [pc, #244]	@ (800245c <HAL_ADC_ConfigChannel+0x4dc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d10e      	bne.n	800238a <HAL_ADC_ConfigChannel+0x40a>
 800236c:	4829      	ldr	r0, [pc, #164]	@ (8002414 <HAL_ADC_ConfigChannel+0x494>)
 800236e:	f7ff fb3f 	bl	80019f0 <LL_ADC_IsEnabled>
 8002372:	4604      	mov	r4, r0
 8002374:	4839      	ldr	r0, [pc, #228]	@ (800245c <HAL_ADC_ConfigChannel+0x4dc>)
 8002376:	f7ff fb3b 	bl	80019f0 <LL_ADC_IsEnabled>
 800237a:	4603      	mov	r3, r0
 800237c:	4323      	orrs	r3, r4
 800237e:	2b00      	cmp	r3, #0
 8002380:	bf0c      	ite	eq
 8002382:	2301      	moveq	r3, #1
 8002384:	2300      	movne	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	e008      	b.n	800239c <HAL_ADC_ConfigChannel+0x41c>
 800238a:	4837      	ldr	r0, [pc, #220]	@ (8002468 <HAL_ADC_ConfigChannel+0x4e8>)
 800238c:	f7ff fb30 	bl	80019f0 <LL_ADC_IsEnabled>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	bf0c      	ite	eq
 8002396:	2301      	moveq	r3, #1
 8002398:	2300      	movne	r3, #0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80b3 	beq.w	8002508 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a31      	ldr	r2, [pc, #196]	@ (800246c <HAL_ADC_ConfigChannel+0x4ec>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d165      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x4f8>
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d160      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002468 <HAL_ADC_ConfigChannel+0x4e8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	f040 80b6 	bne.w	800252e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a13      	ldr	r2, [pc, #76]	@ (8002414 <HAL_ADC_ConfigChannel+0x494>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d004      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0x456>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a22      	ldr	r2, [pc, #136]	@ (800245c <HAL_ADC_ConfigChannel+0x4dc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_ADC_ConfigChannel+0x45a>
 80023d6:	4a22      	ldr	r2, [pc, #136]	@ (8002460 <HAL_ADC_ConfigChannel+0x4e0>)
 80023d8:	e000      	b.n	80023dc <HAL_ADC_ConfigChannel+0x45c>
 80023da:	4a22      	ldr	r2, [pc, #136]	@ (8002464 <HAL_ADC_ConfigChannel+0x4e4>)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f7ff f970 	bl	80016ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023ea:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <HAL_ADC_ConfigChannel+0x4f0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	099b      	lsrs	r3, r3, #6
 80023f0:	4a20      	ldr	r2, [pc, #128]	@ (8002474 <HAL_ADC_ConfigChannel+0x4f4>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	099b      	lsrs	r3, r3, #6
 80023f8:	3301      	adds	r3, #1
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80023fe:	e002      	b.n	8002406 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3b01      	subs	r3, #1
 8002404:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f9      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800240c:	e08f      	b.n	800252e <HAL_ADC_ConfigChannel+0x5ae>
 800240e:	bf00      	nop
 8002410:	47ff0000 	.word	0x47ff0000
 8002414:	40022000 	.word	0x40022000
 8002418:	04300002 	.word	0x04300002
 800241c:	08600004 	.word	0x08600004
 8002420:	0c900008 	.word	0x0c900008
 8002424:	10c00010 	.word	0x10c00010
 8002428:	14f00020 	.word	0x14f00020
 800242c:	2a000400 	.word	0x2a000400
 8002430:	2e300800 	.word	0x2e300800
 8002434:	32601000 	.word	0x32601000
 8002438:	43210000 	.word	0x43210000
 800243c:	4b840000 	.word	0x4b840000
 8002440:	4fb80000 	.word	0x4fb80000
 8002444:	47520000 	.word	0x47520000
 8002448:	36902000 	.word	0x36902000
 800244c:	25b00200 	.word	0x25b00200
 8002450:	21800100 	.word	0x21800100
 8002454:	1d500080 	.word	0x1d500080
 8002458:	19200040 	.word	0x19200040
 800245c:	40022100 	.word	0x40022100
 8002460:	40022300 	.word	0x40022300
 8002464:	58026300 	.word	0x58026300
 8002468:	58026000 	.word	0x58026000
 800246c:	cb840000 	.word	0xcb840000
 8002470:	24000000 	.word	0x24000000
 8002474:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a31      	ldr	r2, [pc, #196]	@ (8002544 <HAL_ADC_ConfigChannel+0x5c4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d11e      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x540>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d119      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a2d      	ldr	r2, [pc, #180]	@ (8002548 <HAL_ADC_ConfigChannel+0x5c8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d14b      	bne.n	800252e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2c      	ldr	r2, [pc, #176]	@ (800254c <HAL_ADC_ConfigChannel+0x5cc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d004      	beq.n	80024aa <HAL_ADC_ConfigChannel+0x52a>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002550 <HAL_ADC_ConfigChannel+0x5d0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x52e>
 80024aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002554 <HAL_ADC_ConfigChannel+0x5d4>)
 80024ac:	e000      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x530>
 80024ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002558 <HAL_ADC_ConfigChannel+0x5d8>)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f7ff f906 	bl	80016ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024be:	e036      	b.n	800252e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a25      	ldr	r2, [pc, #148]	@ (800255c <HAL_ADC_ConfigChannel+0x5dc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d131      	bne.n	800252e <HAL_ADC_ConfigChannel+0x5ae>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d12c      	bne.n	800252e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002548 <HAL_ADC_ConfigChannel+0x5c8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d127      	bne.n	800252e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1a      	ldr	r2, [pc, #104]	@ (800254c <HAL_ADC_ConfigChannel+0x5cc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d004      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x572>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a18      	ldr	r2, [pc, #96]	@ (8002550 <HAL_ADC_ConfigChannel+0x5d0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x576>
 80024f2:	4a18      	ldr	r2, [pc, #96]	@ (8002554 <HAL_ADC_ConfigChannel+0x5d4>)
 80024f4:	e000      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x578>
 80024f6:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <HAL_ADC_ConfigChannel+0x5d8>)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024fe:	4619      	mov	r1, r3
 8002500:	4610      	mov	r0, r2
 8002502:	f7ff f8e2 	bl	80016ca <LL_ADC_SetCommonPathInternalCh>
 8002506:	e012      	b.n	800252e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250c:	f043 0220 	orr.w	r2, r3, #32
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800251a:	e008      	b.n	800252e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002536:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800253a:	4618      	mov	r0, r3
 800253c:	3734      	adds	r7, #52	@ 0x34
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}
 8002542:	bf00      	nop
 8002544:	c7520000 	.word	0xc7520000
 8002548:	58026000 	.word	0x58026000
 800254c:	40022000 	.word	0x40022000
 8002550:	40022100 	.word	0x40022100
 8002554:	40022300 	.word	0x40022300
 8002558:	58026300 	.word	0x58026300
 800255c:	cfb80000 	.word	0xcfb80000

08002560 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fa3f 	bl	80019f0 <LL_ADC_IsEnabled>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d16e      	bne.n	8002656 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <ADC_Enable+0x100>)
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00d      	beq.n	80025a2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258a:	f043 0210 	orr.w	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002596:	f043 0201 	orr.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e05a      	b.n	8002658 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fa0e 	bl	80019c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025ac:	f7ff f83e 	bl	800162c <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002664 <ADC_Enable+0x104>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <ADC_Enable+0x66>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a29      	ldr	r2, [pc, #164]	@ (8002668 <ADC_Enable+0x108>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <ADC_Enable+0x6a>
 80025c6:	4b29      	ldr	r3, [pc, #164]	@ (800266c <ADC_Enable+0x10c>)
 80025c8:	e000      	b.n	80025cc <ADC_Enable+0x6c>
 80025ca:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <ADC_Enable+0x110>)
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff f99f 	bl	8001910 <LL_ADC_GetMultimode>
 80025d2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a23      	ldr	r2, [pc, #140]	@ (8002668 <ADC_Enable+0x108>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d002      	beq.n	80025e4 <ADC_Enable+0x84>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	e000      	b.n	80025e6 <ADC_Enable+0x86>
 80025e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <ADC_Enable+0x104>)
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d02c      	beq.n	8002648 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d130      	bne.n	8002656 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025f4:	e028      	b.n	8002648 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f9f8 	bl	80019f0 <LL_ADC_IsEnabled>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d104      	bne.n	8002610 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f9dc 	bl	80019c8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002610:	f7ff f80c 	bl	800162c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d914      	bls.n	8002648 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d00d      	beq.n	8002648 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002630:	f043 0210 	orr.w	r2, r3, #16
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e007      	b.n	8002658 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d1cf      	bne.n	80025f6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	8000003f 	.word	0x8000003f
 8002664:	40022000 	.word	0x40022000
 8002668:	40022100 	.word	0x40022100
 800266c:	40022300 	.word	0x40022300
 8002670:	58026300 	.word	0x58026300

08002674 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a7a      	ldr	r2, [pc, #488]	@ (800286c <ADC_ConfigureBoostMode+0x1f8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <ADC_ConfigureBoostMode+0x1c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a79      	ldr	r2, [pc, #484]	@ (8002870 <ADC_ConfigureBoostMode+0x1fc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d109      	bne.n	80026a4 <ADC_ConfigureBoostMode+0x30>
 8002690:	4b78      	ldr	r3, [pc, #480]	@ (8002874 <ADC_ConfigureBoostMode+0x200>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e008      	b.n	80026b6 <ADC_ConfigureBoostMode+0x42>
 80026a4:	4b74      	ldr	r3, [pc, #464]	@ (8002878 <ADC_ConfigureBoostMode+0x204>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf14      	ite	ne
 80026b0:	2301      	movne	r3, #1
 80026b2:	2300      	moveq	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01c      	beq.n	80026f4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026ba:	f003 f891 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 80026be:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026c8:	d010      	beq.n	80026ec <ADC_ConfigureBoostMode+0x78>
 80026ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026ce:	d873      	bhi.n	80027b8 <ADC_ConfigureBoostMode+0x144>
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026d4:	d002      	beq.n	80026dc <ADC_ConfigureBoostMode+0x68>
 80026d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026da:	d16d      	bne.n	80027b8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	60fb      	str	r3, [r7, #12]
        break;
 80026ea:	e068      	b.n	80027be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	60fb      	str	r3, [r7, #12]
        break;
 80026f2:	e064      	b.n	80027be <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80026f4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80026f8:	f04f 0100 	mov.w	r1, #0
 80026fc:	f004 fad6 	bl	8006cac <HAL_RCCEx_GetPeriphCLKFreq>
 8002700:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800270a:	d051      	beq.n	80027b0 <ADC_ConfigureBoostMode+0x13c>
 800270c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002710:	d854      	bhi.n	80027bc <ADC_ConfigureBoostMode+0x148>
 8002712:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002716:	d047      	beq.n	80027a8 <ADC_ConfigureBoostMode+0x134>
 8002718:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800271c:	d84e      	bhi.n	80027bc <ADC_ConfigureBoostMode+0x148>
 800271e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002722:	d03d      	beq.n	80027a0 <ADC_ConfigureBoostMode+0x12c>
 8002724:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002728:	d848      	bhi.n	80027bc <ADC_ConfigureBoostMode+0x148>
 800272a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800272e:	d033      	beq.n	8002798 <ADC_ConfigureBoostMode+0x124>
 8002730:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002734:	d842      	bhi.n	80027bc <ADC_ConfigureBoostMode+0x148>
 8002736:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800273a:	d029      	beq.n	8002790 <ADC_ConfigureBoostMode+0x11c>
 800273c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002740:	d83c      	bhi.n	80027bc <ADC_ConfigureBoostMode+0x148>
 8002742:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002746:	d01a      	beq.n	800277e <ADC_ConfigureBoostMode+0x10a>
 8002748:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800274c:	d836      	bhi.n	80027bc <ADC_ConfigureBoostMode+0x148>
 800274e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002752:	d014      	beq.n	800277e <ADC_ConfigureBoostMode+0x10a>
 8002754:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002758:	d830      	bhi.n	80027bc <ADC_ConfigureBoostMode+0x148>
 800275a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800275e:	d00e      	beq.n	800277e <ADC_ConfigureBoostMode+0x10a>
 8002760:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002764:	d82a      	bhi.n	80027bc <ADC_ConfigureBoostMode+0x148>
 8002766:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800276a:	d008      	beq.n	800277e <ADC_ConfigureBoostMode+0x10a>
 800276c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002770:	d824      	bhi.n	80027bc <ADC_ConfigureBoostMode+0x148>
 8002772:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002776:	d002      	beq.n	800277e <ADC_ConfigureBoostMode+0x10a>
 8002778:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800277c:	d11e      	bne.n	80027bc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	0c9b      	lsrs	r3, r3, #18
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	60fb      	str	r3, [r7, #12]
        break;
 800278e:	e016      	b.n	80027be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	60fb      	str	r3, [r7, #12]
        break;
 8002796:	e012      	b.n	80027be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	60fb      	str	r3, [r7, #12]
        break;
 800279e:	e00e      	b.n	80027be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	099b      	lsrs	r3, r3, #6
 80027a4:	60fb      	str	r3, [r7, #12]
        break;
 80027a6:	e00a      	b.n	80027be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	09db      	lsrs	r3, r3, #7
 80027ac:	60fb      	str	r3, [r7, #12]
        break;
 80027ae:	e006      	b.n	80027be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	60fb      	str	r3, [r7, #12]
        break;
 80027b6:	e002      	b.n	80027be <ADC_ConfigureBoostMode+0x14a>
        break;
 80027b8:	bf00      	nop
 80027ba:	e000      	b.n	80027be <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80027bc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027be:	f7fe ff65 	bl	800168c <HAL_GetREVID>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d815      	bhi.n	80027f8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a2b      	ldr	r2, [pc, #172]	@ (800287c <ADC_ConfigureBoostMode+0x208>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d908      	bls.n	80027e6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027e2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80027e4:	e03e      	b.n	8002864 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027f4:	609a      	str	r2, [r3, #8]
}
 80027f6:	e035      	b.n	8002864 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a1f      	ldr	r2, [pc, #124]	@ (8002880 <ADC_ConfigureBoostMode+0x20c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d808      	bhi.n	8002818 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002814:	609a      	str	r2, [r3, #8]
}
 8002816:	e025      	b.n	8002864 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4a1a      	ldr	r2, [pc, #104]	@ (8002884 <ADC_ConfigureBoostMode+0x210>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d80a      	bhi.n	8002836 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002832:	609a      	str	r2, [r3, #8]
}
 8002834:	e016      	b.n	8002864 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <ADC_ConfigureBoostMode+0x214>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d80a      	bhi.n	8002854 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002850:	609a      	str	r2, [r3, #8]
}
 8002852:	e007      	b.n	8002864 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40022000 	.word	0x40022000
 8002870:	40022100 	.word	0x40022100
 8002874:	40022300 	.word	0x40022300
 8002878:	58026300 	.word	0x58026300
 800287c:	01312d00 	.word	0x01312d00
 8002880:	005f5e10 	.word	0x005f5e10
 8002884:	00bebc20 	.word	0x00bebc20
 8002888:	017d7840 	.word	0x017d7840

0800288c <LL_ADC_IsEnabled>:
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <LL_ADC_IsEnabled+0x18>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <LL_ADC_IsEnabled+0x1a>
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d101      	bne.n	80028ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b09f      	sub	sp, #124	@ 0x7c
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e0be      	b.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002902:	2300      	movs	r3, #0
 8002904:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5c      	ldr	r2, [pc, #368]	@ (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d102      	bne.n	8002916 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002910:	4b5b      	ldr	r3, [pc, #364]	@ (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	e001      	b.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10b      	bne.n	8002938 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e09d      	b.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ffb9 	bl	80028b2 <LL_ADC_REG_IsConversionOngoing>
 8002940:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ffb3 	bl	80028b2 <LL_ADC_REG_IsConversionOngoing>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d17f      	bne.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002952:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002954:	2b00      	cmp	r3, #0
 8002956:	d17c      	bne.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a47      	ldr	r2, [pc, #284]	@ (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d004      	beq.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a46      	ldr	r2, [pc, #280]	@ (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d101      	bne.n	8002970 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800296c:	4b45      	ldr	r3, [pc, #276]	@ (8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800296e:	e000      	b.n	8002972 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002970:	4b45      	ldr	r3, [pc, #276]	@ (8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002972:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d039      	beq.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800297c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	431a      	orrs	r2, r3
 800298a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800298c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a3a      	ldr	r2, [pc, #232]	@ (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d004      	beq.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a38      	ldr	r2, [pc, #224]	@ (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10e      	bne.n	80029c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80029a2:	4836      	ldr	r0, [pc, #216]	@ (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029a4:	f7ff ff72 	bl	800288c <LL_ADC_IsEnabled>
 80029a8:	4604      	mov	r4, r0
 80029aa:	4835      	ldr	r0, [pc, #212]	@ (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029ac:	f7ff ff6e 	bl	800288c <LL_ADC_IsEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4323      	orrs	r3, r4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e008      	b.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80029c0:	4832      	ldr	r0, [pc, #200]	@ (8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80029c2:	f7ff ff63 	bl	800288c <LL_ADC_IsEnabled>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d047      	beq.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	4b2d      	ldr	r3, [pc, #180]	@ (8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80029dc:	4013      	ands	r3, r2
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	6811      	ldr	r1, [r2, #0]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	6892      	ldr	r2, [r2, #8]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ec:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029ee:	e03a      	b.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80029f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1e      	ldr	r2, [pc, #120]	@ (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d10e      	bne.n	8002a2e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002a10:	481a      	ldr	r0, [pc, #104]	@ (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a12:	f7ff ff3b 	bl	800288c <LL_ADC_IsEnabled>
 8002a16:	4604      	mov	r4, r0
 8002a18:	4819      	ldr	r0, [pc, #100]	@ (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a1a:	f7ff ff37 	bl	800288c <LL_ADC_IsEnabled>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4323      	orrs	r3, r4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bf0c      	ite	eq
 8002a26:	2301      	moveq	r3, #1
 8002a28:	2300      	movne	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	e008      	b.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a2e:	4817      	ldr	r0, [pc, #92]	@ (8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002a30:	f7ff ff2c 	bl	800288c <LL_ADC_IsEnabled>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf0c      	ite	eq
 8002a3a:	2301      	moveq	r3, #1
 8002a3c:	2300      	movne	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d010      	beq.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a4e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a50:	e009      	b.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a56:	f043 0220 	orr.w	r2, r3, #32
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002a64:	e000      	b.n	8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a66:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a70:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	377c      	adds	r7, #124	@ 0x7c
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd90      	pop	{r4, r7, pc}
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40022100 	.word	0x40022100
 8002a84:	40022300 	.word	0x40022300
 8002a88:	58026300 	.word	0x58026300
 8002a8c:	58026000 	.word	0x58026000
 8002a90:	fffff0e0 	.word	0xfffff0e0

08002a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac2:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	60d3      	str	r3, [r2, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00
 8002ad8:	05fa0000 	.word	0x05fa0000

08002adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	f003 0307 	and.w	r3, r3, #7
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	db0b      	blt.n	8002b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	4907      	ldr	r1, [pc, #28]	@ (8002b30 <__NVIC_EnableIRQ+0x38>)
 8002b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2001      	movs	r0, #1
 8002b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000e100 	.word	0xe000e100

08002b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	db0a      	blt.n	8002b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	490c      	ldr	r1, [pc, #48]	@ (8002b80 <__NVIC_SetPriority+0x4c>)
 8002b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	440b      	add	r3, r1
 8002b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b5c:	e00a      	b.n	8002b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4908      	ldr	r1, [pc, #32]	@ (8002b84 <__NVIC_SetPriority+0x50>)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	440b      	add	r3, r1
 8002b72:	761a      	strb	r2, [r3, #24]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000e100 	.word	0xe000e100
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	@ 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	bf28      	it	cs
 8002ba6:	2304      	movcs	r3, #4
 8002ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d902      	bls.n	8002bb8 <NVIC_EncodePriority+0x30>
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3b03      	subs	r3, #3
 8002bb6:	e000      	b.n	8002bba <NVIC_EncodePriority+0x32>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	401a      	ands	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43d9      	mvns	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	4313      	orrs	r3, r2
         );
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	@ 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c00:	d301      	bcc.n	8002c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00f      	b.n	8002c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <SysTick_Config+0x40>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0e:	210f      	movs	r1, #15
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c14:	f7ff ff8e 	bl	8002b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c18:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <SysTick_Config+0x40>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1e:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <SysTick_Config+0x40>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	e000e010 	.word	0xe000e010

08002c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff29 	bl	8002a94 <__NVIC_SetPriorityGrouping>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c58:	f7ff ff40 	bl	8002adc <__NVIC_GetPriorityGrouping>
 8002c5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	6978      	ldr	r0, [r7, #20]
 8002c64:	f7ff ff90 	bl	8002b88 <NVIC_EncodePriority>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff5f 	bl	8002b34 <__NVIC_SetPriority>
}
 8002c76:	bf00      	nop
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff33 	bl	8002af8 <__NVIC_EnableIRQ>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ffa4 	bl	8002bf0 <SysTick_Config>
 8002ca8:	4603      	mov	r3, r0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7fe fcb6 	bl	800162c <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e2dc      	b.n	8003286 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d008      	beq.n	8002cea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2280      	movs	r2, #128	@ 0x80
 8002cdc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e2cd      	b.n	8003286 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a76      	ldr	r2, [pc, #472]	@ (8002ec8 <HAL_DMA_Abort+0x214>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d04a      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a74      	ldr	r2, [pc, #464]	@ (8002ecc <HAL_DMA_Abort+0x218>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d045      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a73      	ldr	r2, [pc, #460]	@ (8002ed0 <HAL_DMA_Abort+0x21c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d040      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a71      	ldr	r2, [pc, #452]	@ (8002ed4 <HAL_DMA_Abort+0x220>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d03b      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a70      	ldr	r2, [pc, #448]	@ (8002ed8 <HAL_DMA_Abort+0x224>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d036      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6e      	ldr	r2, [pc, #440]	@ (8002edc <HAL_DMA_Abort+0x228>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d031      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6d      	ldr	r2, [pc, #436]	@ (8002ee0 <HAL_DMA_Abort+0x22c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d02c      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a6b      	ldr	r2, [pc, #428]	@ (8002ee4 <HAL_DMA_Abort+0x230>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d027      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ee8 <HAL_DMA_Abort+0x234>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d022      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a68      	ldr	r2, [pc, #416]	@ (8002eec <HAL_DMA_Abort+0x238>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01d      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a67      	ldr	r2, [pc, #412]	@ (8002ef0 <HAL_DMA_Abort+0x23c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d018      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a65      	ldr	r2, [pc, #404]	@ (8002ef4 <HAL_DMA_Abort+0x240>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a64      	ldr	r2, [pc, #400]	@ (8002ef8 <HAL_DMA_Abort+0x244>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00e      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a62      	ldr	r2, [pc, #392]	@ (8002efc <HAL_DMA_Abort+0x248>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d009      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a61      	ldr	r2, [pc, #388]	@ (8002f00 <HAL_DMA_Abort+0x24c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d004      	beq.n	8002d8a <HAL_DMA_Abort+0xd6>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a5f      	ldr	r2, [pc, #380]	@ (8002f04 <HAL_DMA_Abort+0x250>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_DMA_Abort+0xda>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_DMA_Abort+0xdc>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 021e 	bic.w	r2, r2, #30
 8002da2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002db2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e00a      	b.n	8002dd2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 020e 	bic.w	r2, r2, #14
 8002dca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ec8 <HAL_DMA_Abort+0x214>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d072      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a3a      	ldr	r2, [pc, #232]	@ (8002ecc <HAL_DMA_Abort+0x218>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d06d      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a39      	ldr	r2, [pc, #228]	@ (8002ed0 <HAL_DMA_Abort+0x21c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d068      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a37      	ldr	r2, [pc, #220]	@ (8002ed4 <HAL_DMA_Abort+0x220>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d063      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a36      	ldr	r2, [pc, #216]	@ (8002ed8 <HAL_DMA_Abort+0x224>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d05e      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a34      	ldr	r2, [pc, #208]	@ (8002edc <HAL_DMA_Abort+0x228>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d059      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a33      	ldr	r2, [pc, #204]	@ (8002ee0 <HAL_DMA_Abort+0x22c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d054      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a31      	ldr	r2, [pc, #196]	@ (8002ee4 <HAL_DMA_Abort+0x230>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d04f      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a30      	ldr	r2, [pc, #192]	@ (8002ee8 <HAL_DMA_Abort+0x234>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d04a      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a2e      	ldr	r2, [pc, #184]	@ (8002eec <HAL_DMA_Abort+0x238>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d045      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef0 <HAL_DMA_Abort+0x23c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d040      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2b      	ldr	r2, [pc, #172]	@ (8002ef4 <HAL_DMA_Abort+0x240>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d03b      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef8 <HAL_DMA_Abort+0x244>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d036      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a28      	ldr	r2, [pc, #160]	@ (8002efc <HAL_DMA_Abort+0x248>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d031      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a27      	ldr	r2, [pc, #156]	@ (8002f00 <HAL_DMA_Abort+0x24c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d02c      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a25      	ldr	r2, [pc, #148]	@ (8002f04 <HAL_DMA_Abort+0x250>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d027      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a24      	ldr	r2, [pc, #144]	@ (8002f08 <HAL_DMA_Abort+0x254>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d022      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a22      	ldr	r2, [pc, #136]	@ (8002f0c <HAL_DMA_Abort+0x258>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d01d      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a21      	ldr	r2, [pc, #132]	@ (8002f10 <HAL_DMA_Abort+0x25c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d018      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1f      	ldr	r2, [pc, #124]	@ (8002f14 <HAL_DMA_Abort+0x260>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d013      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f18 <HAL_DMA_Abort+0x264>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f1c <HAL_DMA_Abort+0x268>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d009      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f20 <HAL_DMA_Abort+0x26c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d004      	beq.n	8002ec2 <HAL_DMA_Abort+0x20e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	@ (8002f24 <HAL_DMA_Abort+0x270>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d132      	bne.n	8002f28 <HAL_DMA_Abort+0x274>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e031      	b.n	8002f2a <HAL_DMA_Abort+0x276>
 8002ec6:	bf00      	nop
 8002ec8:	40020010 	.word	0x40020010
 8002ecc:	40020028 	.word	0x40020028
 8002ed0:	40020040 	.word	0x40020040
 8002ed4:	40020058 	.word	0x40020058
 8002ed8:	40020070 	.word	0x40020070
 8002edc:	40020088 	.word	0x40020088
 8002ee0:	400200a0 	.word	0x400200a0
 8002ee4:	400200b8 	.word	0x400200b8
 8002ee8:	40020410 	.word	0x40020410
 8002eec:	40020428 	.word	0x40020428
 8002ef0:	40020440 	.word	0x40020440
 8002ef4:	40020458 	.word	0x40020458
 8002ef8:	40020470 	.word	0x40020470
 8002efc:	40020488 	.word	0x40020488
 8002f00:	400204a0 	.word	0x400204a0
 8002f04:	400204b8 	.word	0x400204b8
 8002f08:	58025408 	.word	0x58025408
 8002f0c:	5802541c 	.word	0x5802541c
 8002f10:	58025430 	.word	0x58025430
 8002f14:	58025444 	.word	0x58025444
 8002f18:	58025458 	.word	0x58025458
 8002f1c:	5802546c 	.word	0x5802546c
 8002f20:	58025480 	.word	0x58025480
 8002f24:	58025494 	.word	0x58025494
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6d      	ldr	r2, [pc, #436]	@ (80030f8 <HAL_DMA_Abort+0x444>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d04a      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6b      	ldr	r2, [pc, #428]	@ (80030fc <HAL_DMA_Abort+0x448>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d045      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a6a      	ldr	r2, [pc, #424]	@ (8003100 <HAL_DMA_Abort+0x44c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d040      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a68      	ldr	r2, [pc, #416]	@ (8003104 <HAL_DMA_Abort+0x450>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d03b      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a67      	ldr	r2, [pc, #412]	@ (8003108 <HAL_DMA_Abort+0x454>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d036      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a65      	ldr	r2, [pc, #404]	@ (800310c <HAL_DMA_Abort+0x458>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d031      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a64      	ldr	r2, [pc, #400]	@ (8003110 <HAL_DMA_Abort+0x45c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d02c      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a62      	ldr	r2, [pc, #392]	@ (8003114 <HAL_DMA_Abort+0x460>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d027      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a61      	ldr	r2, [pc, #388]	@ (8003118 <HAL_DMA_Abort+0x464>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a5f      	ldr	r2, [pc, #380]	@ (800311c <HAL_DMA_Abort+0x468>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a5e      	ldr	r2, [pc, #376]	@ (8003120 <HAL_DMA_Abort+0x46c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d018      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a5c      	ldr	r2, [pc, #368]	@ (8003124 <HAL_DMA_Abort+0x470>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a5b      	ldr	r2, [pc, #364]	@ (8003128 <HAL_DMA_Abort+0x474>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a59      	ldr	r2, [pc, #356]	@ (800312c <HAL_DMA_Abort+0x478>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a58      	ldr	r2, [pc, #352]	@ (8003130 <HAL_DMA_Abort+0x47c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_DMA_Abort+0x32a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a56      	ldr	r2, [pc, #344]	@ (8003134 <HAL_DMA_Abort+0x480>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d108      	bne.n	8002ff0 <HAL_DMA_Abort+0x33c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e007      	b.n	8003000 <HAL_DMA_Abort+0x34c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003000:	e013      	b.n	800302a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003002:	f7fe fb13 	bl	800162c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b05      	cmp	r3, #5
 800300e:	d90c      	bls.n	800302a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2203      	movs	r2, #3
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e12d      	b.n	8003286 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e5      	bne.n	8003002 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2f      	ldr	r2, [pc, #188]	@ (80030f8 <HAL_DMA_Abort+0x444>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d04a      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2d      	ldr	r2, [pc, #180]	@ (80030fc <HAL_DMA_Abort+0x448>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d045      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2c      	ldr	r2, [pc, #176]	@ (8003100 <HAL_DMA_Abort+0x44c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d040      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a2a      	ldr	r2, [pc, #168]	@ (8003104 <HAL_DMA_Abort+0x450>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d03b      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a29      	ldr	r2, [pc, #164]	@ (8003108 <HAL_DMA_Abort+0x454>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d036      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a27      	ldr	r2, [pc, #156]	@ (800310c <HAL_DMA_Abort+0x458>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d031      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a26      	ldr	r2, [pc, #152]	@ (8003110 <HAL_DMA_Abort+0x45c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d02c      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a24      	ldr	r2, [pc, #144]	@ (8003114 <HAL_DMA_Abort+0x460>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d027      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a23      	ldr	r2, [pc, #140]	@ (8003118 <HAL_DMA_Abort+0x464>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a21      	ldr	r2, [pc, #132]	@ (800311c <HAL_DMA_Abort+0x468>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01d      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a20      	ldr	r2, [pc, #128]	@ (8003120 <HAL_DMA_Abort+0x46c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d018      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003124 <HAL_DMA_Abort+0x470>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003128 <HAL_DMA_Abort+0x474>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1b      	ldr	r2, [pc, #108]	@ (800312c <HAL_DMA_Abort+0x478>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <HAL_DMA_Abort+0x47c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_DMA_Abort+0x422>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a18      	ldr	r2, [pc, #96]	@ (8003134 <HAL_DMA_Abort+0x480>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_DMA_Abort+0x426>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_DMA_Abort+0x428>
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d02b      	beq.n	8003138 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	223f      	movs	r2, #63	@ 0x3f
 80030f0:	409a      	lsls	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	e02a      	b.n	800314e <HAL_DMA_Abort+0x49a>
 80030f8:	40020010 	.word	0x40020010
 80030fc:	40020028 	.word	0x40020028
 8003100:	40020040 	.word	0x40020040
 8003104:	40020058 	.word	0x40020058
 8003108:	40020070 	.word	0x40020070
 800310c:	40020088 	.word	0x40020088
 8003110:	400200a0 	.word	0x400200a0
 8003114:	400200b8 	.word	0x400200b8
 8003118:	40020410 	.word	0x40020410
 800311c:	40020428 	.word	0x40020428
 8003120:	40020440 	.word	0x40020440
 8003124:	40020458 	.word	0x40020458
 8003128:	40020470 	.word	0x40020470
 800312c:	40020488 	.word	0x40020488
 8003130:	400204a0 	.word	0x400204a0
 8003134:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	2201      	movs	r2, #1
 8003148:	409a      	lsls	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a4f      	ldr	r2, [pc, #316]	@ (8003290 <HAL_DMA_Abort+0x5dc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d072      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a4d      	ldr	r2, [pc, #308]	@ (8003294 <HAL_DMA_Abort+0x5e0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d06d      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a4c      	ldr	r2, [pc, #304]	@ (8003298 <HAL_DMA_Abort+0x5e4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d068      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a4a      	ldr	r2, [pc, #296]	@ (800329c <HAL_DMA_Abort+0x5e8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d063      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a49      	ldr	r2, [pc, #292]	@ (80032a0 <HAL_DMA_Abort+0x5ec>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d05e      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a47      	ldr	r2, [pc, #284]	@ (80032a4 <HAL_DMA_Abort+0x5f0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d059      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a46      	ldr	r2, [pc, #280]	@ (80032a8 <HAL_DMA_Abort+0x5f4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d054      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a44      	ldr	r2, [pc, #272]	@ (80032ac <HAL_DMA_Abort+0x5f8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d04f      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a43      	ldr	r2, [pc, #268]	@ (80032b0 <HAL_DMA_Abort+0x5fc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04a      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a41      	ldr	r2, [pc, #260]	@ (80032b4 <HAL_DMA_Abort+0x600>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d045      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a40      	ldr	r2, [pc, #256]	@ (80032b8 <HAL_DMA_Abort+0x604>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d040      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a3e      	ldr	r2, [pc, #248]	@ (80032bc <HAL_DMA_Abort+0x608>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d03b      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a3d      	ldr	r2, [pc, #244]	@ (80032c0 <HAL_DMA_Abort+0x60c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d036      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a3b      	ldr	r2, [pc, #236]	@ (80032c4 <HAL_DMA_Abort+0x610>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3a      	ldr	r2, [pc, #232]	@ (80032c8 <HAL_DMA_Abort+0x614>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d02c      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a38      	ldr	r2, [pc, #224]	@ (80032cc <HAL_DMA_Abort+0x618>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d027      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a37      	ldr	r2, [pc, #220]	@ (80032d0 <HAL_DMA_Abort+0x61c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a35      	ldr	r2, [pc, #212]	@ (80032d4 <HAL_DMA_Abort+0x620>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01d      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a34      	ldr	r2, [pc, #208]	@ (80032d8 <HAL_DMA_Abort+0x624>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d018      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a32      	ldr	r2, [pc, #200]	@ (80032dc <HAL_DMA_Abort+0x628>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a31      	ldr	r2, [pc, #196]	@ (80032e0 <HAL_DMA_Abort+0x62c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2f      	ldr	r2, [pc, #188]	@ (80032e4 <HAL_DMA_Abort+0x630>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a2e      	ldr	r2, [pc, #184]	@ (80032e8 <HAL_DMA_Abort+0x634>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_DMA_Abort+0x58a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a2c      	ldr	r2, [pc, #176]	@ (80032ec <HAL_DMA_Abort+0x638>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_DMA_Abort+0x58e>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_DMA_Abort+0x590>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d015      	beq.n	8003274 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003250:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00c      	beq.n	8003274 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003264:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003268:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003272:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40020010 	.word	0x40020010
 8003294:	40020028 	.word	0x40020028
 8003298:	40020040 	.word	0x40020040
 800329c:	40020058 	.word	0x40020058
 80032a0:	40020070 	.word	0x40020070
 80032a4:	40020088 	.word	0x40020088
 80032a8:	400200a0 	.word	0x400200a0
 80032ac:	400200b8 	.word	0x400200b8
 80032b0:	40020410 	.word	0x40020410
 80032b4:	40020428 	.word	0x40020428
 80032b8:	40020440 	.word	0x40020440
 80032bc:	40020458 	.word	0x40020458
 80032c0:	40020470 	.word	0x40020470
 80032c4:	40020488 	.word	0x40020488
 80032c8:	400204a0 	.word	0x400204a0
 80032cc:	400204b8 	.word	0x400204b8
 80032d0:	58025408 	.word	0x58025408
 80032d4:	5802541c 	.word	0x5802541c
 80032d8:	58025430 	.word	0x58025430
 80032dc:	58025444 	.word	0x58025444
 80032e0:	58025458 	.word	0x58025458
 80032e4:	5802546c 	.word	0x5802546c
 80032e8:	58025480 	.word	0x58025480
 80032ec:	58025494 	.word	0x58025494

080032f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e237      	b.n	8003772 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d004      	beq.n	8003318 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2280      	movs	r2, #128	@ 0x80
 8003312:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e22c      	b.n	8003772 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a5c      	ldr	r2, [pc, #368]	@ (8003490 <HAL_DMA_Abort_IT+0x1a0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d04a      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a5b      	ldr	r2, [pc, #364]	@ (8003494 <HAL_DMA_Abort_IT+0x1a4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d045      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a59      	ldr	r2, [pc, #356]	@ (8003498 <HAL_DMA_Abort_IT+0x1a8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d040      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a58      	ldr	r2, [pc, #352]	@ (800349c <HAL_DMA_Abort_IT+0x1ac>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d03b      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a56      	ldr	r2, [pc, #344]	@ (80034a0 <HAL_DMA_Abort_IT+0x1b0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d036      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a55      	ldr	r2, [pc, #340]	@ (80034a4 <HAL_DMA_Abort_IT+0x1b4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d031      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a53      	ldr	r2, [pc, #332]	@ (80034a8 <HAL_DMA_Abort_IT+0x1b8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d02c      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a52      	ldr	r2, [pc, #328]	@ (80034ac <HAL_DMA_Abort_IT+0x1bc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d027      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a50      	ldr	r2, [pc, #320]	@ (80034b0 <HAL_DMA_Abort_IT+0x1c0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d022      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a4f      	ldr	r2, [pc, #316]	@ (80034b4 <HAL_DMA_Abort_IT+0x1c4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d01d      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a4d      	ldr	r2, [pc, #308]	@ (80034b8 <HAL_DMA_Abort_IT+0x1c8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d018      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a4c      	ldr	r2, [pc, #304]	@ (80034bc <HAL_DMA_Abort_IT+0x1cc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a4a      	ldr	r2, [pc, #296]	@ (80034c0 <HAL_DMA_Abort_IT+0x1d0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a49      	ldr	r2, [pc, #292]	@ (80034c4 <HAL_DMA_Abort_IT+0x1d4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a47      	ldr	r2, [pc, #284]	@ (80034c8 <HAL_DMA_Abort_IT+0x1d8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a46      	ldr	r2, [pc, #280]	@ (80034cc <HAL_DMA_Abort_IT+0x1dc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <HAL_DMA_Abort_IT+0xcc>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_DMA_Abort_IT+0xce>
 80033bc:	2300      	movs	r3, #0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8086 	beq.w	80034d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2204      	movs	r2, #4
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a2f      	ldr	r2, [pc, #188]	@ (8003490 <HAL_DMA_Abort_IT+0x1a0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d04a      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a2e      	ldr	r2, [pc, #184]	@ (8003494 <HAL_DMA_Abort_IT+0x1a4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d045      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003498 <HAL_DMA_Abort_IT+0x1a8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d040      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <HAL_DMA_Abort_IT+0x1ac>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d03b      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a29      	ldr	r2, [pc, #164]	@ (80034a0 <HAL_DMA_Abort_IT+0x1b0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d036      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a28      	ldr	r2, [pc, #160]	@ (80034a4 <HAL_DMA_Abort_IT+0x1b4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d031      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a26      	ldr	r2, [pc, #152]	@ (80034a8 <HAL_DMA_Abort_IT+0x1b8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d02c      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a25      	ldr	r2, [pc, #148]	@ (80034ac <HAL_DMA_Abort_IT+0x1bc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d027      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a23      	ldr	r2, [pc, #140]	@ (80034b0 <HAL_DMA_Abort_IT+0x1c0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d022      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a22      	ldr	r2, [pc, #136]	@ (80034b4 <HAL_DMA_Abort_IT+0x1c4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d01d      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a20      	ldr	r2, [pc, #128]	@ (80034b8 <HAL_DMA_Abort_IT+0x1c8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d018      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1f      	ldr	r2, [pc, #124]	@ (80034bc <HAL_DMA_Abort_IT+0x1cc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1d      	ldr	r2, [pc, #116]	@ (80034c0 <HAL_DMA_Abort_IT+0x1d0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00e      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1c      	ldr	r2, [pc, #112]	@ (80034c4 <HAL_DMA_Abort_IT+0x1d4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1a      	ldr	r2, [pc, #104]	@ (80034c8 <HAL_DMA_Abort_IT+0x1d8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_DMA_Abort_IT+0x17c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a19      	ldr	r2, [pc, #100]	@ (80034cc <HAL_DMA_Abort_IT+0x1dc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d108      	bne.n	800347e <HAL_DMA_Abort_IT+0x18e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e178      	b.n	8003770 <HAL_DMA_Abort_IT+0x480>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e16f      	b.n	8003770 <HAL_DMA_Abort_IT+0x480>
 8003490:	40020010 	.word	0x40020010
 8003494:	40020028 	.word	0x40020028
 8003498:	40020040 	.word	0x40020040
 800349c:	40020058 	.word	0x40020058
 80034a0:	40020070 	.word	0x40020070
 80034a4:	40020088 	.word	0x40020088
 80034a8:	400200a0 	.word	0x400200a0
 80034ac:	400200b8 	.word	0x400200b8
 80034b0:	40020410 	.word	0x40020410
 80034b4:	40020428 	.word	0x40020428
 80034b8:	40020440 	.word	0x40020440
 80034bc:	40020458 	.word	0x40020458
 80034c0:	40020470 	.word	0x40020470
 80034c4:	40020488 	.word	0x40020488
 80034c8:	400204a0 	.word	0x400204a0
 80034cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 020e 	bic.w	r2, r2, #14
 80034de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6c      	ldr	r2, [pc, #432]	@ (8003698 <HAL_DMA_Abort_IT+0x3a8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d04a      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a6b      	ldr	r2, [pc, #428]	@ (800369c <HAL_DMA_Abort_IT+0x3ac>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d045      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a69      	ldr	r2, [pc, #420]	@ (80036a0 <HAL_DMA_Abort_IT+0x3b0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d040      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a68      	ldr	r2, [pc, #416]	@ (80036a4 <HAL_DMA_Abort_IT+0x3b4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d03b      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a66      	ldr	r2, [pc, #408]	@ (80036a8 <HAL_DMA_Abort_IT+0x3b8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d036      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a65      	ldr	r2, [pc, #404]	@ (80036ac <HAL_DMA_Abort_IT+0x3bc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d031      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a63      	ldr	r2, [pc, #396]	@ (80036b0 <HAL_DMA_Abort_IT+0x3c0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d02c      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a62      	ldr	r2, [pc, #392]	@ (80036b4 <HAL_DMA_Abort_IT+0x3c4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d027      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a60      	ldr	r2, [pc, #384]	@ (80036b8 <HAL_DMA_Abort_IT+0x3c8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d022      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a5f      	ldr	r2, [pc, #380]	@ (80036bc <HAL_DMA_Abort_IT+0x3cc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d01d      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a5d      	ldr	r2, [pc, #372]	@ (80036c0 <HAL_DMA_Abort_IT+0x3d0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d018      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5c      	ldr	r2, [pc, #368]	@ (80036c4 <HAL_DMA_Abort_IT+0x3d4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a5a      	ldr	r2, [pc, #360]	@ (80036c8 <HAL_DMA_Abort_IT+0x3d8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00e      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a59      	ldr	r2, [pc, #356]	@ (80036cc <HAL_DMA_Abort_IT+0x3dc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d009      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a57      	ldr	r2, [pc, #348]	@ (80036d0 <HAL_DMA_Abort_IT+0x3e0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_DMA_Abort_IT+0x290>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a56      	ldr	r2, [pc, #344]	@ (80036d4 <HAL_DMA_Abort_IT+0x3e4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d108      	bne.n	8003592 <HAL_DMA_Abort_IT+0x2a2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	e007      	b.n	80035a2 <HAL_DMA_Abort_IT+0x2b2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a3c      	ldr	r2, [pc, #240]	@ (8003698 <HAL_DMA_Abort_IT+0x3a8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d072      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a3a      	ldr	r2, [pc, #232]	@ (800369c <HAL_DMA_Abort_IT+0x3ac>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d06d      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a39      	ldr	r2, [pc, #228]	@ (80036a0 <HAL_DMA_Abort_IT+0x3b0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d068      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a37      	ldr	r2, [pc, #220]	@ (80036a4 <HAL_DMA_Abort_IT+0x3b4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d063      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a36      	ldr	r2, [pc, #216]	@ (80036a8 <HAL_DMA_Abort_IT+0x3b8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d05e      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a34      	ldr	r2, [pc, #208]	@ (80036ac <HAL_DMA_Abort_IT+0x3bc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d059      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a33      	ldr	r2, [pc, #204]	@ (80036b0 <HAL_DMA_Abort_IT+0x3c0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d054      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a31      	ldr	r2, [pc, #196]	@ (80036b4 <HAL_DMA_Abort_IT+0x3c4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d04f      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a30      	ldr	r2, [pc, #192]	@ (80036b8 <HAL_DMA_Abort_IT+0x3c8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d04a      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2e      	ldr	r2, [pc, #184]	@ (80036bc <HAL_DMA_Abort_IT+0x3cc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d045      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2d      	ldr	r2, [pc, #180]	@ (80036c0 <HAL_DMA_Abort_IT+0x3d0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d040      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2b      	ldr	r2, [pc, #172]	@ (80036c4 <HAL_DMA_Abort_IT+0x3d4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d03b      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2a      	ldr	r2, [pc, #168]	@ (80036c8 <HAL_DMA_Abort_IT+0x3d8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d036      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a28      	ldr	r2, [pc, #160]	@ (80036cc <HAL_DMA_Abort_IT+0x3dc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d031      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a27      	ldr	r2, [pc, #156]	@ (80036d0 <HAL_DMA_Abort_IT+0x3e0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d02c      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a25      	ldr	r2, [pc, #148]	@ (80036d4 <HAL_DMA_Abort_IT+0x3e4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d027      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a24      	ldr	r2, [pc, #144]	@ (80036d8 <HAL_DMA_Abort_IT+0x3e8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d022      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a22      	ldr	r2, [pc, #136]	@ (80036dc <HAL_DMA_Abort_IT+0x3ec>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01d      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a21      	ldr	r2, [pc, #132]	@ (80036e0 <HAL_DMA_Abort_IT+0x3f0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d018      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1f      	ldr	r2, [pc, #124]	@ (80036e4 <HAL_DMA_Abort_IT+0x3f4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1e      	ldr	r2, [pc, #120]	@ (80036e8 <HAL_DMA_Abort_IT+0x3f8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00e      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1c      	ldr	r2, [pc, #112]	@ (80036ec <HAL_DMA_Abort_IT+0x3fc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <HAL_DMA_Abort_IT+0x400>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_DMA_Abort_IT+0x3a2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a19      	ldr	r2, [pc, #100]	@ (80036f4 <HAL_DMA_Abort_IT+0x404>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d132      	bne.n	80036f8 <HAL_DMA_Abort_IT+0x408>
 8003692:	2301      	movs	r3, #1
 8003694:	e031      	b.n	80036fa <HAL_DMA_Abort_IT+0x40a>
 8003696:	bf00      	nop
 8003698:	40020010 	.word	0x40020010
 800369c:	40020028 	.word	0x40020028
 80036a0:	40020040 	.word	0x40020040
 80036a4:	40020058 	.word	0x40020058
 80036a8:	40020070 	.word	0x40020070
 80036ac:	40020088 	.word	0x40020088
 80036b0:	400200a0 	.word	0x400200a0
 80036b4:	400200b8 	.word	0x400200b8
 80036b8:	40020410 	.word	0x40020410
 80036bc:	40020428 	.word	0x40020428
 80036c0:	40020440 	.word	0x40020440
 80036c4:	40020458 	.word	0x40020458
 80036c8:	40020470 	.word	0x40020470
 80036cc:	40020488 	.word	0x40020488
 80036d0:	400204a0 	.word	0x400204a0
 80036d4:	400204b8 	.word	0x400204b8
 80036d8:	58025408 	.word	0x58025408
 80036dc:	5802541c 	.word	0x5802541c
 80036e0:	58025430 	.word	0x58025430
 80036e4:	58025444 	.word	0x58025444
 80036e8:	58025458 	.word	0x58025458
 80036ec:	5802546c 	.word	0x5802546c
 80036f0:	58025480 	.word	0x58025480
 80036f4:	58025494 	.word	0x58025494
 80036f8:	2300      	movs	r3, #0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d028      	beq.n	8003750 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800370c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	2201      	movs	r2, #1
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800372c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00c      	beq.n	8003750 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003744:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800374e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop

0800377c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800377c:	b480      	push	{r7}
 800377e:	b089      	sub	sp, #36	@ 0x24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800378a:	4b89      	ldr	r3, [pc, #548]	@ (80039b0 <HAL_GPIO_Init+0x234>)
 800378c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800378e:	e194      	b.n	8003aba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	2101      	movs	r1, #1
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa01 f303 	lsl.w	r3, r1, r3
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 8186 	beq.w	8003ab4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d005      	beq.n	80037c0 <HAL_GPIO_Init+0x44>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d130      	bne.n	8003822 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	2203      	movs	r2, #3
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037f6:	2201      	movs	r2, #1
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	f003 0201 	and.w	r2, r3, #1
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b03      	cmp	r3, #3
 800382c:	d017      	beq.n	800385e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	2203      	movs	r2, #3
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d123      	bne.n	80038b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	08da      	lsrs	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3208      	adds	r2, #8
 8003872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	220f      	movs	r2, #15
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4013      	ands	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	08da      	lsrs	r2, r3, #3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3208      	adds	r2, #8
 80038ac:	69b9      	ldr	r1, [r7, #24]
 80038ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	2203      	movs	r2, #3
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 0203 	and.w	r2, r3, #3
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80e0 	beq.w	8003ab4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038f4:	4b2f      	ldr	r3, [pc, #188]	@ (80039b4 <HAL_GPIO_Init+0x238>)
 80038f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038fa:	4a2e      	ldr	r2, [pc, #184]	@ (80039b4 <HAL_GPIO_Init+0x238>)
 80038fc:	f043 0302 	orr.w	r3, r3, #2
 8003900:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003904:	4b2b      	ldr	r3, [pc, #172]	@ (80039b4 <HAL_GPIO_Init+0x238>)
 8003906:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003912:	4a29      	ldr	r2, [pc, #164]	@ (80039b8 <HAL_GPIO_Init+0x23c>)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	3302      	adds	r3, #2
 800391a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	220f      	movs	r2, #15
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a20      	ldr	r2, [pc, #128]	@ (80039bc <HAL_GPIO_Init+0x240>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d052      	beq.n	80039e4 <HAL_GPIO_Init+0x268>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a1f      	ldr	r2, [pc, #124]	@ (80039c0 <HAL_GPIO_Init+0x244>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d031      	beq.n	80039aa <HAL_GPIO_Init+0x22e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1e      	ldr	r2, [pc, #120]	@ (80039c4 <HAL_GPIO_Init+0x248>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d02b      	beq.n	80039a6 <HAL_GPIO_Init+0x22a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a1d      	ldr	r2, [pc, #116]	@ (80039c8 <HAL_GPIO_Init+0x24c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d025      	beq.n	80039a2 <HAL_GPIO_Init+0x226>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a1c      	ldr	r2, [pc, #112]	@ (80039cc <HAL_GPIO_Init+0x250>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d01f      	beq.n	800399e <HAL_GPIO_Init+0x222>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1b      	ldr	r2, [pc, #108]	@ (80039d0 <HAL_GPIO_Init+0x254>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d019      	beq.n	800399a <HAL_GPIO_Init+0x21e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1a      	ldr	r2, [pc, #104]	@ (80039d4 <HAL_GPIO_Init+0x258>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d013      	beq.n	8003996 <HAL_GPIO_Init+0x21a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a19      	ldr	r2, [pc, #100]	@ (80039d8 <HAL_GPIO_Init+0x25c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00d      	beq.n	8003992 <HAL_GPIO_Init+0x216>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a18      	ldr	r2, [pc, #96]	@ (80039dc <HAL_GPIO_Init+0x260>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <HAL_GPIO_Init+0x212>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a17      	ldr	r2, [pc, #92]	@ (80039e0 <HAL_GPIO_Init+0x264>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <HAL_GPIO_Init+0x20e>
 8003986:	2309      	movs	r3, #9
 8003988:	e02d      	b.n	80039e6 <HAL_GPIO_Init+0x26a>
 800398a:	230a      	movs	r3, #10
 800398c:	e02b      	b.n	80039e6 <HAL_GPIO_Init+0x26a>
 800398e:	2308      	movs	r3, #8
 8003990:	e029      	b.n	80039e6 <HAL_GPIO_Init+0x26a>
 8003992:	2307      	movs	r3, #7
 8003994:	e027      	b.n	80039e6 <HAL_GPIO_Init+0x26a>
 8003996:	2306      	movs	r3, #6
 8003998:	e025      	b.n	80039e6 <HAL_GPIO_Init+0x26a>
 800399a:	2305      	movs	r3, #5
 800399c:	e023      	b.n	80039e6 <HAL_GPIO_Init+0x26a>
 800399e:	2304      	movs	r3, #4
 80039a0:	e021      	b.n	80039e6 <HAL_GPIO_Init+0x26a>
 80039a2:	2303      	movs	r3, #3
 80039a4:	e01f      	b.n	80039e6 <HAL_GPIO_Init+0x26a>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e01d      	b.n	80039e6 <HAL_GPIO_Init+0x26a>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e01b      	b.n	80039e6 <HAL_GPIO_Init+0x26a>
 80039ae:	bf00      	nop
 80039b0:	58000080 	.word	0x58000080
 80039b4:	58024400 	.word	0x58024400
 80039b8:	58000400 	.word	0x58000400
 80039bc:	58020000 	.word	0x58020000
 80039c0:	58020400 	.word	0x58020400
 80039c4:	58020800 	.word	0x58020800
 80039c8:	58020c00 	.word	0x58020c00
 80039cc:	58021000 	.word	0x58021000
 80039d0:	58021400 	.word	0x58021400
 80039d4:	58021800 	.word	0x58021800
 80039d8:	58021c00 	.word	0x58021c00
 80039dc:	58022000 	.word	0x58022000
 80039e0:	58022400 	.word	0x58022400
 80039e4:	2300      	movs	r3, #0
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	f002 0203 	and.w	r2, r2, #3
 80039ec:	0092      	lsls	r2, r2, #2
 80039ee:	4093      	lsls	r3, r2
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f6:	4938      	ldr	r1, [pc, #224]	@ (8003ad8 <HAL_GPIO_Init+0x35c>)
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	089b      	lsrs	r3, r3, #2
 80039fc:	3302      	adds	r3, #2
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	43db      	mvns	r3, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4013      	ands	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f47f ae63 	bne.w	8003790 <HAL_GPIO_Init+0x14>
  }
}
 8003aca:	bf00      	nop
 8003acc:	bf00      	nop
 8003ace:	3724      	adds	r7, #36	@ 0x24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	58000400 	.word	0x58000400

08003adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	887b      	ldrh	r3, [r7, #2]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	e001      	b.n	8003afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b1c:	787b      	ldrb	r3, [r7, #1]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b28:	e003      	b.n	8003b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b2a:	887b      	ldrh	r3, [r7, #2]
 8003b2c:	041a      	lsls	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	619a      	str	r2, [r3, #24]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003b48:	4a08      	ldr	r2, [pc, #32]	@ (8003b6c <HAL_HSEM_FastTake+0x2c>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3320      	adds	r3, #32
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	4a07      	ldr	r2, [pc, #28]	@ (8003b70 <HAL_HSEM_FastTake+0x30>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e000      	b.n	8003b5e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	58026400 	.word	0x58026400
 8003b70:	80000300 	.word	0x80000300

08003b74 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003b7e:	4906      	ldr	r1, [pc, #24]	@ (8003b98 <HAL_HSEM_Release+0x24>)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	58026400 	.word	0x58026400

08003b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e08b      	b.n	8003cc6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fc ffce 	bl	8000b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2224      	movs	r2, #36	@ 0x24
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d107      	bne.n	8003c16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	e006      	b.n	8003c24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d108      	bne.n	8003c3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c3a:	605a      	str	r2, [r3, #4]
 8003c3c:	e007      	b.n	8003c4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd0 <HAL_I2C_Init+0x134>)
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69d9      	ldr	r1, [r3, #28]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1a      	ldr	r2, [r3, #32]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	02008000 	.word	0x02008000

08003cd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	817b      	strh	r3, [r7, #10]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	813b      	strh	r3, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	f040 80f9 	bne.w	8003eee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_I2C_Mem_Write+0x34>
 8003d02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0ed      	b.n	8003ef0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_I2C_Mem_Write+0x4e>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e0e6      	b.n	8003ef0 <HAL_I2C_Mem_Write+0x21c>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d2a:	f7fd fc7f 	bl	800162c <HAL_GetTick>
 8003d2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2319      	movs	r3, #25
 8003d36:	2201      	movs	r2, #1
 8003d38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fadd 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0d1      	b.n	8003ef0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2221      	movs	r2, #33	@ 0x21
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2240      	movs	r2, #64	@ 0x40
 8003d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a3a      	ldr	r2, [r7, #32]
 8003d66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d74:	88f8      	ldrh	r0, [r7, #6]
 8003d76:	893a      	ldrh	r2, [r7, #8]
 8003d78:	8979      	ldrh	r1, [r7, #10]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	4603      	mov	r3, r0
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f9ed 	bl	8004164 <I2C_RequestMemoryWrite>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0a9      	b.n	8003ef0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2bff      	cmp	r3, #255	@ 0xff
 8003da4:	d90e      	bls.n	8003dc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	22ff      	movs	r2, #255	@ 0xff
 8003daa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	8979      	ldrh	r1, [r7, #10]
 8003db4:	2300      	movs	r3, #0
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fc61 	bl	8004684 <I2C_TransferConfig>
 8003dc2:	e00f      	b.n	8003de4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	8979      	ldrh	r1, [r7, #10]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fc50 	bl	8004684 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fae0 	bl	80043ae <I2C_WaitOnTXISFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e07b      	b.n	8003ef0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d034      	beq.n	8003e9c <HAL_I2C_Mem_Write+0x1c8>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d130      	bne.n	8003e9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e40:	2200      	movs	r2, #0
 8003e42:	2180      	movs	r1, #128	@ 0x80
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 fa59 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e04d      	b.n	8003ef0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2bff      	cmp	r3, #255	@ 0xff
 8003e5c:	d90e      	bls.n	8003e7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	22ff      	movs	r2, #255	@ 0xff
 8003e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	8979      	ldrh	r1, [r7, #10]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fc05 	bl	8004684 <I2C_TransferConfig>
 8003e7a:	e00f      	b.n	8003e9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	8979      	ldrh	r1, [r7, #10]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fbf4 	bl	8004684 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d19e      	bne.n	8003de4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fac6 	bl	800443c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e01a      	b.n	8003ef0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef8 <HAL_I2C_Mem_Write+0x224>)
 8003ece:	400b      	ands	r3, r1
 8003ed0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e000      	b.n	8003ef0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
  }
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	fe00e800 	.word	0xfe00e800

08003efc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	4608      	mov	r0, r1
 8003f06:	4611      	mov	r1, r2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	817b      	strh	r3, [r7, #10]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	813b      	strh	r3, [r7, #8]
 8003f12:	4613      	mov	r3, r2
 8003f14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	f040 80fd 	bne.w	800411e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_I2C_Mem_Read+0x34>
 8003f2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f36:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0f1      	b.n	8004120 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2C_Mem_Read+0x4e>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e0ea      	b.n	8004120 <HAL_I2C_Mem_Read+0x224>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f52:	f7fd fb6b 	bl	800162c <HAL_GetTick>
 8003f56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2319      	movs	r3, #25
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f9c9 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0d5      	b.n	8004120 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2222      	movs	r2, #34	@ 0x22
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2240      	movs	r2, #64	@ 0x40
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a3a      	ldr	r2, [r7, #32]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f9c:	88f8      	ldrh	r0, [r7, #6]
 8003f9e:	893a      	ldrh	r2, [r7, #8]
 8003fa0:	8979      	ldrh	r1, [r7, #10]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	4603      	mov	r3, r0
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f92d 	bl	800420c <I2C_RequestMemoryRead>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0ad      	b.n	8004120 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2bff      	cmp	r3, #255	@ 0xff
 8003fcc:	d90e      	bls.n	8003fec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	22ff      	movs	r2, #255	@ 0xff
 8003fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	8979      	ldrh	r1, [r7, #10]
 8003fdc:	4b52      	ldr	r3, [pc, #328]	@ (8004128 <HAL_I2C_Mem_Read+0x22c>)
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fb4d 	bl	8004684 <I2C_TransferConfig>
 8003fea:	e00f      	b.n	800400c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	8979      	ldrh	r1, [r7, #10]
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8004128 <HAL_I2C_Mem_Read+0x22c>)
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fb3c 	bl	8004684 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	2200      	movs	r2, #0
 8004014:	2104      	movs	r1, #4
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f970 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07c      	b.n	8004120 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d034      	beq.n	80040cc <HAL_I2C_Mem_Read+0x1d0>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004066:	2b00      	cmp	r3, #0
 8004068:	d130      	bne.n	80040cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004070:	2200      	movs	r2, #0
 8004072:	2180      	movs	r1, #128	@ 0x80
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f941 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e04d      	b.n	8004120 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2bff      	cmp	r3, #255	@ 0xff
 800408c:	d90e      	bls.n	80040ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	22ff      	movs	r2, #255	@ 0xff
 8004092:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004098:	b2da      	uxtb	r2, r3
 800409a:	8979      	ldrh	r1, [r7, #10]
 800409c:	2300      	movs	r3, #0
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 faed 	bl	8004684 <I2C_TransferConfig>
 80040aa:	e00f      	b.n	80040cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	8979      	ldrh	r1, [r7, #10]
 80040be:	2300      	movs	r3, #0
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 fadc 	bl	8004684 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d19a      	bne.n	800400c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f9ae 	bl	800443c <I2C_WaitOnSTOPFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e01a      	b.n	8004120 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2220      	movs	r2, #32
 80040f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <HAL_I2C_Mem_Read+0x230>)
 80040fe:	400b      	ands	r3, r1
 8004100:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e000      	b.n	8004120 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800411e:	2302      	movs	r3, #2
  }
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	80002400 	.word	0x80002400
 800412c:	fe00e800 	.word	0xfe00e800

08004130 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	68f9      	ldr	r1, [r7, #12]
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
  }
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	461a      	mov	r2, r3
 8004172:	4603      	mov	r3, r0
 8004174:	817b      	strh	r3, [r7, #10]
 8004176:	460b      	mov	r3, r1
 8004178:	813b      	strh	r3, [r7, #8]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	8979      	ldrh	r1, [r7, #10]
 8004184:	4b20      	ldr	r3, [pc, #128]	@ (8004208 <I2C_RequestMemoryWrite+0xa4>)
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fa79 	bl	8004684 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	69b9      	ldr	r1, [r7, #24]
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f909 	bl	80043ae <I2C_WaitOnTXISFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e02c      	b.n	8004200 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d105      	bne.n	80041b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ac:	893b      	ldrh	r3, [r7, #8]
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80041b6:	e015      	b.n	80041e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041b8:	893b      	ldrh	r3, [r7, #8]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	b29b      	uxth	r3, r3
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	69b9      	ldr	r1, [r7, #24]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f8ef 	bl	80043ae <I2C_WaitOnTXISFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e012      	b.n	8004200 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041da:	893b      	ldrh	r3, [r7, #8]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2180      	movs	r1, #128	@ 0x80
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f884 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	80002000 	.word	0x80002000

0800420c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	461a      	mov	r2, r3
 800421a:	4603      	mov	r3, r0
 800421c:	817b      	strh	r3, [r7, #10]
 800421e:	460b      	mov	r3, r1
 8004220:	813b      	strh	r3, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	8979      	ldrh	r1, [r7, #10]
 800422c:	4b20      	ldr	r3, [pc, #128]	@ (80042b0 <I2C_RequestMemoryRead+0xa4>)
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	2300      	movs	r3, #0
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fa26 	bl	8004684 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	69b9      	ldr	r1, [r7, #24]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f8b6 	bl	80043ae <I2C_WaitOnTXISFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e02c      	b.n	80042a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d105      	bne.n	800425e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004252:	893b      	ldrh	r3, [r7, #8]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	629a      	str	r2, [r3, #40]	@ 0x28
 800425c:	e015      	b.n	800428a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800425e:	893b      	ldrh	r3, [r7, #8]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	b29b      	uxth	r3, r3
 8004264:	b2da      	uxtb	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	69b9      	ldr	r1, [r7, #24]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f89c 	bl	80043ae <I2C_WaitOnTXISFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e012      	b.n	80042a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004280:	893b      	ldrh	r3, [r7, #8]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2200      	movs	r2, #0
 8004292:	2140      	movs	r1, #64	@ 0x40
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f831 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	80002000 	.word	0x80002000

080042b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d103      	bne.n	80042d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d007      	beq.n	80042f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	619a      	str	r2, [r3, #24]
  }
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800430c:	e03b      	b.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	6839      	ldr	r1, [r7, #0]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f8d6 	bl	80044c4 <I2C_IsErrorOccurred>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e041      	b.n	80043a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004328:	d02d      	beq.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432a:	f7fd f97f 	bl	800162c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d302      	bcc.n	8004340 <I2C_WaitOnFlagUntilTimeout+0x44>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d122      	bne.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	429a      	cmp	r2, r3
 800435c:	d113      	bne.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	f043 0220 	orr.w	r2, r3, #32
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2220      	movs	r2, #32
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e00f      	b.n	80043a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699a      	ldr	r2, [r3, #24]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4013      	ands	r3, r2
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	429a      	cmp	r2, r3
 8004394:	bf0c      	ite	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	2300      	movne	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d0b4      	beq.n	800430e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043ba:	e033      	b.n	8004424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f87f 	bl	80044c4 <I2C_IsErrorOccurred>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e031      	b.n	8004434 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043d6:	d025      	beq.n	8004424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d8:	f7fd f928 	bl	800162c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d302      	bcc.n	80043ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11a      	bne.n	8004424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d013      	beq.n	8004424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004400:	f043 0220 	orr.w	r2, r3, #32
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e007      	b.n	8004434 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b02      	cmp	r3, #2
 8004430:	d1c4      	bne.n	80043bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004448:	e02f      	b.n	80044aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f838 	bl	80044c4 <I2C_IsErrorOccurred>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e02d      	b.n	80044ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445e:	f7fd f8e5 	bl	800162c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d11a      	bne.n	80044aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b20      	cmp	r3, #32
 8004480:	d013      	beq.n	80044aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e007      	b.n	80044ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	d1c8      	bne.n	800444a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	@ 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d068      	beq.n	80045c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2210      	movs	r2, #16
 80044f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044f8:	e049      	b.n	800458e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004500:	d045      	beq.n	800458e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004502:	f7fd f893 	bl	800162c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <I2C_IsErrorOccurred+0x54>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d13a      	bne.n	800458e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004522:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800452a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453a:	d121      	bne.n	8004580 <I2C_IsErrorOccurred+0xbc>
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004542:	d01d      	beq.n	8004580 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	2b20      	cmp	r3, #32
 8004548:	d01a      	beq.n	8004580 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004558:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800455a:	f7fd f867 	bl	800162c <HAL_GetTick>
 800455e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004560:	e00e      	b.n	8004580 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004562:	f7fd f863 	bl	800162c <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b19      	cmp	r3, #25
 800456e:	d907      	bls.n	8004580 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	f043 0320 	orr.w	r3, r3, #32
 8004576:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800457e:	e006      	b.n	800458e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b20      	cmp	r3, #32
 800458c:	d1e9      	bne.n	8004562 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b20      	cmp	r3, #32
 800459a:	d003      	beq.n	80045a4 <I2C_IsErrorOccurred+0xe0>
 800459c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0aa      	beq.n	80044fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d103      	bne.n	80045b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2220      	movs	r2, #32
 80045b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f043 0304 	orr.w	r3, r3, #4
 80045ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	f043 0308 	orr.w	r3, r3, #8
 80045fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004606:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00b      	beq.n	8004630 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	f043 0302 	orr.w	r3, r3, #2
 800461e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004628:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01c      	beq.n	8004672 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f7ff fe3b 	bl	80042b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6859      	ldr	r1, [r3, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	4b0d      	ldr	r3, [pc, #52]	@ (8004680 <I2C_IsErrorOccurred+0x1bc>)
 800464a:	400b      	ands	r3, r1
 800464c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004676:	4618      	mov	r0, r3
 8004678:	3728      	adds	r7, #40	@ 0x28
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	fe00e800 	.word	0xfe00e800

08004684 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	817b      	strh	r3, [r7, #10]
 8004692:	4613      	mov	r3, r2
 8004694:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004696:	897b      	ldrh	r3, [r7, #10]
 8004698:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800469c:	7a7b      	ldrb	r3, [r7, #9]
 800469e:	041b      	lsls	r3, r3, #16
 80046a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046a4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046b2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	0d5b      	lsrs	r3, r3, #21
 80046be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80046c2:	4b08      	ldr	r3, [pc, #32]	@ (80046e4 <I2C_TransferConfig+0x60>)
 80046c4:	430b      	orrs	r3, r1
 80046c6:	43db      	mvns	r3, r3
 80046c8:	ea02 0103 	and.w	r1, r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	03ff63ff 	.word	0x03ff63ff

080046e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d138      	bne.n	8004770 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004708:	2302      	movs	r3, #2
 800470a:	e032      	b.n	8004772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	@ 0x24
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800473a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b20      	cmp	r3, #32
 8004792:	d139      	bne.n	8004808 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800479e:	2302      	movs	r3, #2
 80047a0:	e033      	b.n	800480a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2224      	movs	r2, #36	@ 0x24
 80047ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80047d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004820:	4b29      	ldr	r3, [pc, #164]	@ (80048c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	2b06      	cmp	r3, #6
 800482a:	d00a      	beq.n	8004842 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800482c:	4b26      	ldr	r3, [pc, #152]	@ (80048c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	429a      	cmp	r2, r3
 8004838:	d001      	beq.n	800483e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e040      	b.n	80048c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e03e      	b.n	80048c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004842:	4b21      	ldr	r3, [pc, #132]	@ (80048c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800484a:	491f      	ldr	r1, [pc, #124]	@ (80048c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4313      	orrs	r3, r2
 8004850:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004852:	f7fc feeb 	bl	800162c <HAL_GetTick>
 8004856:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004858:	e009      	b.n	800486e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800485a:	f7fc fee7 	bl	800162c <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004868:	d901      	bls.n	800486e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e028      	b.n	80048c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800486e:	4b16      	ldr	r3, [pc, #88]	@ (80048c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800487a:	d1ee      	bne.n	800485a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b1e      	cmp	r3, #30
 8004880:	d008      	beq.n	8004894 <HAL_PWREx_ConfigSupply+0x7c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b2e      	cmp	r3, #46	@ 0x2e
 8004886:	d005      	beq.n	8004894 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b1d      	cmp	r3, #29
 800488c:	d002      	beq.n	8004894 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b2d      	cmp	r3, #45	@ 0x2d
 8004892:	d114      	bne.n	80048be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004894:	f7fc feca 	bl	800162c <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800489a:	e009      	b.n	80048b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800489c:	f7fc fec6 	bl	800162c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048aa:	d901      	bls.n	80048b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e007      	b.n	80048c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80048b0:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048bc:	d1ee      	bne.n	800489c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	58024800 	.word	0x58024800

080048cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08c      	sub	sp, #48	@ 0x30
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f000 bc48 	b.w	8005170 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8088 	beq.w	80049fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ee:	4b99      	ldr	r3, [pc, #612]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048f8:	4b96      	ldr	r3, [pc, #600]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 80048fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004900:	2b10      	cmp	r3, #16
 8004902:	d007      	beq.n	8004914 <HAL_RCC_OscConfig+0x48>
 8004904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004906:	2b18      	cmp	r3, #24
 8004908:	d111      	bne.n	800492e <HAL_RCC_OscConfig+0x62>
 800490a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d10c      	bne.n	800492e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004914:	4b8f      	ldr	r3, [pc, #572]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d06d      	beq.n	80049fc <HAL_RCC_OscConfig+0x130>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d169      	bne.n	80049fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	f000 bc21 	b.w	8005170 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004936:	d106      	bne.n	8004946 <HAL_RCC_OscConfig+0x7a>
 8004938:	4b86      	ldr	r3, [pc, #536]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a85      	ldr	r2, [pc, #532]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 800493e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	e02e      	b.n	80049a4 <HAL_RCC_OscConfig+0xd8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0x9c>
 800494e:	4b81      	ldr	r3, [pc, #516]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a80      	ldr	r2, [pc, #512]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a7d      	ldr	r2, [pc, #500]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004960:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e01d      	b.n	80049a4 <HAL_RCC_OscConfig+0xd8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004970:	d10c      	bne.n	800498c <HAL_RCC_OscConfig+0xc0>
 8004972:	4b78      	ldr	r3, [pc, #480]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a77      	ldr	r2, [pc, #476]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	4b75      	ldr	r3, [pc, #468]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a74      	ldr	r2, [pc, #464]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e00b      	b.n	80049a4 <HAL_RCC_OscConfig+0xd8>
 800498c:	4b71      	ldr	r3, [pc, #452]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a70      	ldr	r2, [pc, #448]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b6e      	ldr	r3, [pc, #440]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a6d      	ldr	r2, [pc, #436]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 800499e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d013      	beq.n	80049d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fc fe3e 	bl	800162c <HAL_GetTick>
 80049b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b4:	f7fc fe3a 	bl	800162c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	@ 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e3d4      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049c6:	4b63      	ldr	r3, [pc, #396]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0xe8>
 80049d2:	e014      	b.n	80049fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fc fe2a 	bl	800162c <HAL_GetTick>
 80049d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049dc:	f7fc fe26 	bl	800162c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b64      	cmp	r3, #100	@ 0x64
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e3c0      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049ee:	4b59      	ldr	r3, [pc, #356]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x110>
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80ca 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0c:	4b51      	ldr	r3, [pc, #324]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a16:	4b4f      	ldr	r3, [pc, #316]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <HAL_RCC_OscConfig+0x166>
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	2b18      	cmp	r3, #24
 8004a26:	d156      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x20a>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d151      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a32:	4b48      	ldr	r3, [pc, #288]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_RCC_OscConfig+0x17e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e392      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a4a:	4b42      	ldr	r3, [pc, #264]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 0219 	bic.w	r2, r3, #25
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	493f      	ldr	r1, [pc, #252]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fc fde6 	bl	800162c <HAL_GetTick>
 8004a60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a64:	f7fc fde2 	bl	800162c <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e37c      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a76:	4b37      	ldr	r3, [pc, #220]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a82:	f7fc fe03 	bl	800168c <HAL_GetREVID>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d817      	bhi.n	8004ac0 <HAL_RCC_OscConfig+0x1f4>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b40      	cmp	r3, #64	@ 0x40
 8004a96:	d108      	bne.n	8004aaa <HAL_RCC_OscConfig+0x1de>
 8004a98:	4b2e      	ldr	r3, [pc, #184]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aa8:	e07a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	031b      	lsls	r3, r3, #12
 8004ab8:	4926      	ldr	r1, [pc, #152]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004abe:	e06f      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b24      	ldr	r3, [pc, #144]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	4921      	ldr	r1, [pc, #132]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ad4:	e064      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d047      	beq.n	8004b6e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ade:	4b1d      	ldr	r3, [pc, #116]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 0219 	bic.w	r2, r3, #25
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	491a      	ldr	r1, [pc, #104]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fc fd9c 	bl	800162c <HAL_GetTick>
 8004af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af8:	f7fc fd98 	bl	800162c <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e332      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b0a:	4b12      	ldr	r3, [pc, #72]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b16:	f7fc fdb9 	bl	800168c <HAL_GetREVID>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d819      	bhi.n	8004b58 <HAL_RCC_OscConfig+0x28c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	2b40      	cmp	r3, #64	@ 0x40
 8004b2a:	d108      	bne.n	8004b3e <HAL_RCC_OscConfig+0x272>
 8004b2c:	4b09      	ldr	r3, [pc, #36]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b34:	4a07      	ldr	r2, [pc, #28]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b3a:	6053      	str	r3, [r2, #4]
 8004b3c:	e030      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
 8004b3e:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	031b      	lsls	r3, r3, #12
 8004b4c:	4901      	ldr	r1, [pc, #4]	@ (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	604b      	str	r3, [r1, #4]
 8004b52:	e025      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
 8004b54:	58024400 	.word	0x58024400
 8004b58:	4b9a      	ldr	r3, [pc, #616]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	4997      	ldr	r1, [pc, #604]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	604b      	str	r3, [r1, #4]
 8004b6c:	e018      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b6e:	4b95      	ldr	r3, [pc, #596]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a94      	ldr	r2, [pc, #592]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fc fd57 	bl	800162c <HAL_GetTick>
 8004b7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b82:	f7fc fd53 	bl	800162c <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e2ed      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b94:	4b8b      	ldr	r3, [pc, #556]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f0      	bne.n	8004b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80a9 	beq.w	8004d00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bae:	4b85      	ldr	r3, [pc, #532]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bb6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bb8:	4b82      	ldr	r3, [pc, #520]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d007      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x308>
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b18      	cmp	r3, #24
 8004bc8:	d13a      	bne.n	8004c40 <HAL_RCC_OscConfig+0x374>
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d135      	bne.n	8004c40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bd4:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_OscConfig+0x320>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	2b80      	cmp	r3, #128	@ 0x80
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e2c1      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bec:	f7fc fd4e 	bl	800168c <HAL_GetREVID>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d817      	bhi.n	8004c2a <HAL_RCC_OscConfig+0x35e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d108      	bne.n	8004c14 <HAL_RCC_OscConfig+0x348>
 8004c02:	4b70      	ldr	r3, [pc, #448]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c10:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c12:	e075      	b.n	8004d00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c14:	4b6b      	ldr	r3, [pc, #428]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	069b      	lsls	r3, r3, #26
 8004c22:	4968      	ldr	r1, [pc, #416]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c28:	e06a      	b.n	8004d00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c2a:	4b66      	ldr	r3, [pc, #408]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	4962      	ldr	r1, [pc, #392]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c3e:	e05f      	b.n	8004d00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d042      	beq.n	8004cce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c48:	4b5e      	ldr	r3, [pc, #376]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a5d      	ldr	r2, [pc, #372]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fc fcea 	bl	800162c <HAL_GetTick>
 8004c58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c5c:	f7fc fce6 	bl	800162c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e280      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c6e:	4b55      	ldr	r3, [pc, #340]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c7a:	f7fc fd07 	bl	800168c <HAL_GetREVID>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d817      	bhi.n	8004cb8 <HAL_RCC_OscConfig+0x3ec>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d108      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x3d6>
 8004c90:	4b4c      	ldr	r3, [pc, #304]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c98:	4a4a      	ldr	r2, [pc, #296]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c9e:	6053      	str	r3, [r2, #4]
 8004ca0:	e02e      	b.n	8004d00 <HAL_RCC_OscConfig+0x434>
 8004ca2:	4b48      	ldr	r3, [pc, #288]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	069b      	lsls	r3, r3, #26
 8004cb0:	4944      	ldr	r1, [pc, #272]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	604b      	str	r3, [r1, #4]
 8004cb6:	e023      	b.n	8004d00 <HAL_RCC_OscConfig+0x434>
 8004cb8:	4b42      	ldr	r3, [pc, #264]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	061b      	lsls	r3, r3, #24
 8004cc6:	493f      	ldr	r1, [pc, #252]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60cb      	str	r3, [r1, #12]
 8004ccc:	e018      	b.n	8004d00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004cce:	4b3d      	ldr	r3, [pc, #244]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a3c      	ldr	r2, [pc, #240]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004cd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cda:	f7fc fca7 	bl	800162c <HAL_GetTick>
 8004cde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ce2:	f7fc fca3 	bl	800162c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e23d      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cf4:	4b33      	ldr	r3, [pc, #204]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f0      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d036      	beq.n	8004d7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d019      	beq.n	8004d48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d14:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d18:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fc fc84 	bl	800162c <HAL_GetTick>
 8004d24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d28:	f7fc fc80 	bl	800162c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e21a      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d3a:	4b22      	ldr	r3, [pc, #136]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x45c>
 8004d46:	e018      	b.n	8004d7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d48:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fc fc6a 	bl	800162c <HAL_GetTick>
 8004d58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5c:	f7fc fc66 	bl	800162c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e200      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d6e:	4b15      	ldr	r3, [pc, #84]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d039      	beq.n	8004dfa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01c      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d9a:	f7fc fc47 	bl	800162c <HAL_GetTick>
 8004d9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004da2:	f7fc fc43 	bl	800162c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e1dd      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004db4:	4b03      	ldr	r3, [pc, #12]	@ (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0f0      	beq.n	8004da2 <HAL_RCC_OscConfig+0x4d6>
 8004dc0:	e01b      	b.n	8004dfa <HAL_RCC_OscConfig+0x52e>
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dc8:	4b9b      	ldr	r3, [pc, #620]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a9a      	ldr	r2, [pc, #616]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004dce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dd4:	f7fc fc2a 	bl	800162c <HAL_GetTick>
 8004dd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ddc:	f7fc fc26 	bl	800162c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e1c0      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dee:	4b92      	ldr	r3, [pc, #584]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8081 	beq.w	8004f0a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e08:	4b8c      	ldr	r3, [pc, #560]	@ (800503c <HAL_RCC_OscConfig+0x770>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a8b      	ldr	r2, [pc, #556]	@ (800503c <HAL_RCC_OscConfig+0x770>)
 8004e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e14:	f7fc fc0a 	bl	800162c <HAL_GetTick>
 8004e18:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1c:	f7fc fc06 	bl	800162c <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	@ 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e1a0      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e2e:	4b83      	ldr	r3, [pc, #524]	@ (800503c <HAL_RCC_OscConfig+0x770>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d106      	bne.n	8004e50 <HAL_RCC_OscConfig+0x584>
 8004e42:	4b7d      	ldr	r3, [pc, #500]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e46:	4a7c      	ldr	r2, [pc, #496]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e4e:	e02d      	b.n	8004eac <HAL_RCC_OscConfig+0x5e0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10c      	bne.n	8004e72 <HAL_RCC_OscConfig+0x5a6>
 8004e58:	4b77      	ldr	r3, [pc, #476]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5c:	4a76      	ldr	r2, [pc, #472]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e64:	4b74      	ldr	r3, [pc, #464]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e68:	4a73      	ldr	r2, [pc, #460]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e6a:	f023 0304 	bic.w	r3, r3, #4
 8004e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e70:	e01c      	b.n	8004eac <HAL_RCC_OscConfig+0x5e0>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x5c8>
 8004e7a:	4b6f      	ldr	r3, [pc, #444]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7e:	4a6e      	ldr	r2, [pc, #440]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e86:	4b6c      	ldr	r3, [pc, #432]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8a:	4a6b      	ldr	r2, [pc, #428]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e92:	e00b      	b.n	8004eac <HAL_RCC_OscConfig+0x5e0>
 8004e94:	4b68      	ldr	r3, [pc, #416]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e98:	4a67      	ldr	r2, [pc, #412]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea0:	4b65      	ldr	r3, [pc, #404]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea4:	4a64      	ldr	r2, [pc, #400]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004ea6:	f023 0304 	bic.w	r3, r3, #4
 8004eaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fc fbba 	bl	800162c <HAL_GetTick>
 8004eb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebc:	f7fc fbb6 	bl	800162c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e14e      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed2:	4b59      	ldr	r3, [pc, #356]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0ee      	beq.n	8004ebc <HAL_RCC_OscConfig+0x5f0>
 8004ede:	e014      	b.n	8004f0a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fc fba4 	bl	800162c <HAL_GetTick>
 8004ee4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fc fba0 	bl	800162c <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e138      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004efe:	4b4e      	ldr	r3, [pc, #312]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1ee      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 812d 	beq.w	800516e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f14:	4b48      	ldr	r3, [pc, #288]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f1c:	2b18      	cmp	r3, #24
 8004f1e:	f000 80bd 	beq.w	800509c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	f040 809e 	bne.w	8005068 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2c:	4b42      	ldr	r3, [pc, #264]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a41      	ldr	r2, [pc, #260]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fc fb78 	bl	800162c <HAL_GetTick>
 8004f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f40:	f7fc fb74 	bl	800162c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e10e      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f52:	4b39      	ldr	r3, [pc, #228]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f5e:	4b36      	ldr	r3, [pc, #216]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f62:	4b37      	ldr	r3, [pc, #220]	@ (8005040 <HAL_RCC_OscConfig+0x774>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f6e:	0112      	lsls	r2, r2, #4
 8004f70:	430a      	orrs	r2, r1
 8004f72:	4931      	ldr	r1, [pc, #196]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f86:	3b01      	subs	r3, #1
 8004f88:	025b      	lsls	r3, r3, #9
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f92:	3b01      	subs	r3, #1
 8004f94:	041b      	lsls	r3, r3, #16
 8004f96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	061b      	lsls	r3, r3, #24
 8004fa4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fa8:	4923      	ldr	r1, [pc, #140]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004fae:	4b22      	ldr	r3, [pc, #136]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	4a21      	ldr	r2, [pc, #132]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fba:	4b1f      	ldr	r3, [pc, #124]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fbe:	4b21      	ldr	r3, [pc, #132]	@ (8005044 <HAL_RCC_OscConfig+0x778>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004fc6:	00d2      	lsls	r2, r2, #3
 8004fc8:	491b      	ldr	r1, [pc, #108]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fce:	4b1a      	ldr	r3, [pc, #104]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd2:	f023 020c 	bic.w	r2, r3, #12
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	4917      	ldr	r1, [pc, #92]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fe0:	4b15      	ldr	r3, [pc, #84]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe4:	f023 0202 	bic.w	r2, r3, #2
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fec:	4912      	ldr	r1, [pc, #72]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ff2:	4b11      	ldr	r3, [pc, #68]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	4a10      	ldr	r2, [pc, #64]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	4a0d      	ldr	r2, [pc, #52]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8005004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005008:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800500a:	4b0b      	ldr	r3, [pc, #44]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	4a0a      	ldr	r2, [pc, #40]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8005010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005014:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005016:	4b08      	ldr	r3, [pc, #32]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8005018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501a:	4a07      	ldr	r2, [pc, #28]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005022:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a04      	ldr	r2, [pc, #16]	@ (8005038 <HAL_RCC_OscConfig+0x76c>)
 8005028:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800502c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fc fafd 	bl	800162c <HAL_GetTick>
 8005032:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005034:	e011      	b.n	800505a <HAL_RCC_OscConfig+0x78e>
 8005036:	bf00      	nop
 8005038:	58024400 	.word	0x58024400
 800503c:	58024800 	.word	0x58024800
 8005040:	fffffc0c 	.word	0xfffffc0c
 8005044:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005048:	f7fc faf0 	bl	800162c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e08a      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800505a:	4b47      	ldr	r3, [pc, #284]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x77c>
 8005066:	e082      	b.n	800516e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005068:	4b43      	ldr	r3, [pc, #268]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a42      	ldr	r2, [pc, #264]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 800506e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005074:	f7fc fada 	bl	800162c <HAL_GetTick>
 8005078:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507c:	f7fc fad6 	bl	800162c <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e070      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800508e:	4b3a      	ldr	r3, [pc, #232]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0x7b0>
 800509a:	e068      	b.n	800516e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800509c:	4b36      	ldr	r3, [pc, #216]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 800509e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050a2:	4b35      	ldr	r3, [pc, #212]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d031      	beq.n	8005114 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f003 0203 	and.w	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d12a      	bne.n	8005114 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d122      	bne.n	8005114 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050da:	429a      	cmp	r2, r3
 80050dc:	d11a      	bne.n	8005114 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	0a5b      	lsrs	r3, r3, #9
 80050e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d111      	bne.n	8005114 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	0c1b      	lsrs	r3, r3, #16
 80050f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d108      	bne.n	8005114 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	0e1b      	lsrs	r3, r3, #24
 8005106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e02b      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005118:	4b17      	ldr	r3, [pc, #92]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 800511a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511c:	08db      	lsrs	r3, r3, #3
 800511e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005122:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	429a      	cmp	r2, r3
 800512c:	d01f      	beq.n	800516e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800512e:	4b12      	ldr	r3, [pc, #72]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 8005130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005132:	4a11      	ldr	r2, [pc, #68]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800513a:	f7fc fa77 	bl	800162c <HAL_GetTick>
 800513e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005140:	bf00      	nop
 8005142:	f7fc fa73 	bl	800162c <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	4293      	cmp	r3, r2
 800514c:	d0f9      	beq.n	8005142 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800514e:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 8005150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005152:	4b0a      	ldr	r3, [pc, #40]	@ (800517c <HAL_RCC_OscConfig+0x8b0>)
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800515a:	00d2      	lsls	r2, r2, #3
 800515c:	4906      	ldr	r1, [pc, #24]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 800515e:	4313      	orrs	r3, r2
 8005160:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005162:	4b05      	ldr	r3, [pc, #20]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	4a04      	ldr	r2, [pc, #16]	@ (8005178 <HAL_RCC_OscConfig+0x8ac>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3730      	adds	r7, #48	@ 0x30
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	58024400 	.word	0x58024400
 800517c:	ffff0007 	.word	0xffff0007

08005180 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e19c      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005194:	4b8a      	ldr	r3, [pc, #552]	@ (80053c0 <HAL_RCC_ClockConfig+0x240>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d910      	bls.n	80051c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a2:	4b87      	ldr	r3, [pc, #540]	@ (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f023 020f 	bic.w	r2, r3, #15
 80051aa:	4985      	ldr	r1, [pc, #532]	@ (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b2:	4b83      	ldr	r3, [pc, #524]	@ (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e184      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d010      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	4b7b      	ldr	r3, [pc, #492]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051dc:	429a      	cmp	r2, r3
 80051de:	d908      	bls.n	80051f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051e0:	4b78      	ldr	r3, [pc, #480]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	4975      	ldr	r1, [pc, #468]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d010      	beq.n	8005220 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	4b70      	ldr	r3, [pc, #448]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800520a:	429a      	cmp	r2, r3
 800520c:	d908      	bls.n	8005220 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800520e:	4b6d      	ldr	r3, [pc, #436]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	496a      	ldr	r1, [pc, #424]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800521c:	4313      	orrs	r3, r2
 800521e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	4b64      	ldr	r3, [pc, #400]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005238:	429a      	cmp	r2, r3
 800523a:	d908      	bls.n	800524e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800523c:	4b61      	ldr	r3, [pc, #388]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	495e      	ldr	r1, [pc, #376]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800524a:	4313      	orrs	r3, r2
 800524c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d010      	beq.n	800527c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	4b59      	ldr	r3, [pc, #356]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005266:	429a      	cmp	r2, r3
 8005268:	d908      	bls.n	800527c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800526a:	4b56      	ldr	r3, [pc, #344]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	4953      	ldr	r1, [pc, #332]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005278:	4313      	orrs	r3, r2
 800527a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d010      	beq.n	80052aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	4b4d      	ldr	r3, [pc, #308]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	429a      	cmp	r2, r3
 8005296:	d908      	bls.n	80052aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005298:	4b4a      	ldr	r3, [pc, #296]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f023 020f 	bic.w	r2, r3, #15
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4947      	ldr	r1, [pc, #284]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d055      	beq.n	8005362 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80052b6:	4b43      	ldr	r3, [pc, #268]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	4940      	ldr	r1, [pc, #256]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d107      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052d0:	4b3c      	ldr	r3, [pc, #240]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d121      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0f6      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d107      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052e8:	4b36      	ldr	r3, [pc, #216]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d115      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0ea      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d107      	bne.n	8005310 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005300:	4b30      	ldr	r3, [pc, #192]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d109      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0de      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005310:	4b2c      	ldr	r3, [pc, #176]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e0d6      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005320:	4b28      	ldr	r3, [pc, #160]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f023 0207 	bic.w	r2, r3, #7
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4925      	ldr	r1, [pc, #148]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800532e:	4313      	orrs	r3, r2
 8005330:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005332:	f7fc f97b 	bl	800162c <HAL_GetTick>
 8005336:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005338:	e00a      	b.n	8005350 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800533a:	f7fc f977 	bl	800162c <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e0be      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005350:	4b1c      	ldr	r3, [pc, #112]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	429a      	cmp	r2, r3
 8005360:	d1eb      	bne.n	800533a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d010      	beq.n	8005390 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	4b14      	ldr	r3, [pc, #80]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	429a      	cmp	r2, r3
 800537c:	d208      	bcs.n	8005390 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800537e:	4b11      	ldr	r3, [pc, #68]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f023 020f 	bic.w	r2, r3, #15
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	490e      	ldr	r1, [pc, #56]	@ (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800538c:	4313      	orrs	r3, r2
 800538e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005390:	4b0b      	ldr	r3, [pc, #44]	@ (80053c0 <HAL_RCC_ClockConfig+0x240>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d214      	bcs.n	80053c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b08      	ldr	r3, [pc, #32]	@ (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 020f 	bic.w	r2, r3, #15
 80053a6:	4906      	ldr	r1, [pc, #24]	@ (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b04      	ldr	r3, [pc, #16]	@ (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e086      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
 80053c0:	52002000 	.word	0x52002000
 80053c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d010      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	4b3f      	ldr	r3, [pc, #252]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d208      	bcs.n	80053f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053e4:	4b3c      	ldr	r3, [pc, #240]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	4939      	ldr	r1, [pc, #228]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d010      	beq.n	8005424 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	4b34      	ldr	r3, [pc, #208]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800540e:	429a      	cmp	r2, r3
 8005410:	d208      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005412:	4b31      	ldr	r3, [pc, #196]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	492e      	ldr	r1, [pc, #184]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005420:	4313      	orrs	r3, r2
 8005422:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	d010      	beq.n	8005452 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	4b28      	ldr	r3, [pc, #160]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800543c:	429a      	cmp	r2, r3
 800543e:	d208      	bcs.n	8005452 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005440:	4b25      	ldr	r3, [pc, #148]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	4922      	ldr	r1, [pc, #136]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 800544e:	4313      	orrs	r3, r2
 8005450:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d010      	beq.n	8005480 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	4b1d      	ldr	r3, [pc, #116]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800546a:	429a      	cmp	r2, r3
 800546c:	d208      	bcs.n	8005480 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800546e:	4b1a      	ldr	r3, [pc, #104]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	4917      	ldr	r1, [pc, #92]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 800547c:	4313      	orrs	r3, r2
 800547e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005480:	f000 f834 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 8005484:	4602      	mov	r2, r0
 8005486:	4b14      	ldr	r3, [pc, #80]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	0a1b      	lsrs	r3, r3, #8
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	4912      	ldr	r1, [pc, #72]	@ (80054dc <HAL_RCC_ClockConfig+0x35c>)
 8005492:	5ccb      	ldrb	r3, [r1, r3]
 8005494:	f003 031f 	and.w	r3, r3, #31
 8005498:	fa22 f303 	lsr.w	r3, r2, r3
 800549c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800549e:	4b0e      	ldr	r3, [pc, #56]	@ (80054d8 <HAL_RCC_ClockConfig+0x358>)
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	4a0d      	ldr	r2, [pc, #52]	@ (80054dc <HAL_RCC_ClockConfig+0x35c>)
 80054a8:	5cd3      	ldrb	r3, [r2, r3]
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
 80054b4:	4a0a      	ldr	r2, [pc, #40]	@ (80054e0 <HAL_RCC_ClockConfig+0x360>)
 80054b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054b8:	4a0a      	ldr	r2, [pc, #40]	@ (80054e4 <HAL_RCC_ClockConfig+0x364>)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80054be:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <HAL_RCC_ClockConfig+0x368>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fc f868 	bl	8001598 <HAL_InitTick>
 80054c8:	4603      	mov	r3, r0
 80054ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	58024400 	.word	0x58024400
 80054dc:	0801154c 	.word	0x0801154c
 80054e0:	24000004 	.word	0x24000004
 80054e4:	24000000 	.word	0x24000000
 80054e8:	24000008 	.word	0x24000008

080054ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	@ 0x24
 80054f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054f2:	4bb3      	ldr	r3, [pc, #716]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054fa:	2b18      	cmp	r3, #24
 80054fc:	f200 8155 	bhi.w	80057aa <HAL_RCC_GetSysClockFreq+0x2be>
 8005500:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	0800556d 	.word	0x0800556d
 800550c:	080057ab 	.word	0x080057ab
 8005510:	080057ab 	.word	0x080057ab
 8005514:	080057ab 	.word	0x080057ab
 8005518:	080057ab 	.word	0x080057ab
 800551c:	080057ab 	.word	0x080057ab
 8005520:	080057ab 	.word	0x080057ab
 8005524:	080057ab 	.word	0x080057ab
 8005528:	08005593 	.word	0x08005593
 800552c:	080057ab 	.word	0x080057ab
 8005530:	080057ab 	.word	0x080057ab
 8005534:	080057ab 	.word	0x080057ab
 8005538:	080057ab 	.word	0x080057ab
 800553c:	080057ab 	.word	0x080057ab
 8005540:	080057ab 	.word	0x080057ab
 8005544:	080057ab 	.word	0x080057ab
 8005548:	08005599 	.word	0x08005599
 800554c:	080057ab 	.word	0x080057ab
 8005550:	080057ab 	.word	0x080057ab
 8005554:	080057ab 	.word	0x080057ab
 8005558:	080057ab 	.word	0x080057ab
 800555c:	080057ab 	.word	0x080057ab
 8005560:	080057ab 	.word	0x080057ab
 8005564:	080057ab 	.word	0x080057ab
 8005568:	0800559f 	.word	0x0800559f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800556c:	4b94      	ldr	r3, [pc, #592]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d009      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005578:	4b91      	ldr	r3, [pc, #580]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	08db      	lsrs	r3, r3, #3
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	4a90      	ldr	r2, [pc, #576]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
 8005588:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800558a:	e111      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800558c:	4b8d      	ldr	r3, [pc, #564]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800558e:	61bb      	str	r3, [r7, #24]
      break;
 8005590:	e10e      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005592:	4b8d      	ldr	r3, [pc, #564]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005594:	61bb      	str	r3, [r7, #24]
      break;
 8005596:	e10b      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005598:	4b8c      	ldr	r3, [pc, #560]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800559a:	61bb      	str	r3, [r7, #24]
      break;
 800559c:	e108      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800559e:	4b88      	ldr	r3, [pc, #544]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80055a8:	4b85      	ldr	r3, [pc, #532]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80055b4:	4b82      	ldr	r3, [pc, #520]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80055be:	4b80      	ldr	r3, [pc, #512]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c2:	08db      	lsrs	r3, r3, #3
 80055c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80e1 	beq.w	80057a4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	f000 8083 	beq.w	80056f0 <HAL_RCC_GetSysClockFreq+0x204>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	f200 80a1 	bhi.w	8005734 <HAL_RCC_GetSysClockFreq+0x248>
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_RCC_GetSysClockFreq+0x114>
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d056      	beq.n	80056ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80055fe:	e099      	b.n	8005734 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005600:	4b6f      	ldr	r3, [pc, #444]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02d      	beq.n	8005668 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800560c:	4b6c      	ldr	r3, [pc, #432]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	08db      	lsrs	r3, r3, #3
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	4a6b      	ldr	r2, [pc, #428]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
 800561c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005636:	4b62      	ldr	r3, [pc, #392]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005646:	ed97 6a02 	vldr	s12, [r7, #8]
 800564a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800564e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005666:	e087      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80057d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567a:	4b51      	ldr	r3, [pc, #324]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568a:	ed97 6a02 	vldr	s12, [r7, #8]
 800568e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800569e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056aa:	e065      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80057d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056be:	4b40      	ldr	r3, [pc, #256]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80056d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056ee:	e043      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80057dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80056fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005702:	4b2f      	ldr	r3, [pc, #188]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	ed97 6a02 	vldr	s12, [r7, #8]
 8005716:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800571a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005732:	e021      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80057d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005746:	4b1e      	ldr	r3, [pc, #120]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005756:	ed97 6a02 	vldr	s12, [r7, #8]
 800575a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800575e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800576a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005776:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005778:	4b11      	ldr	r3, [pc, #68]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577c:	0a5b      	lsrs	r3, r3, #9
 800577e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005782:	3301      	adds	r3, #1
 8005784:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005790:	edd7 6a07 	vldr	s13, [r7, #28]
 8005794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579c:	ee17 3a90 	vmov	r3, s15
 80057a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80057a2:	e005      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
      break;
 80057a8:	e002      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80057aa:	4b07      	ldr	r3, [pc, #28]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057ac:	61bb      	str	r3, [r7, #24]
      break;
 80057ae:	bf00      	nop
  }

  return sysclockfreq;
 80057b0:	69bb      	ldr	r3, [r7, #24]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3724      	adds	r7, #36	@ 0x24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	58024400 	.word	0x58024400
 80057c4:	03d09000 	.word	0x03d09000
 80057c8:	003d0900 	.word	0x003d0900
 80057cc:	017d7840 	.word	0x017d7840
 80057d0:	46000000 	.word	0x46000000
 80057d4:	4c742400 	.word	0x4c742400
 80057d8:	4a742400 	.word	0x4a742400
 80057dc:	4bbebc20 	.word	0x4bbebc20

080057e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057e6:	f7ff fe81 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 80057ea:	4602      	mov	r2, r0
 80057ec:	4b10      	ldr	r3, [pc, #64]	@ (8005830 <HAL_RCC_GetHCLKFreq+0x50>)
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	0a1b      	lsrs	r3, r3, #8
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	490f      	ldr	r1, [pc, #60]	@ (8005834 <HAL_RCC_GetHCLKFreq+0x54>)
 80057f8:	5ccb      	ldrb	r3, [r1, r3]
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005802:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005804:	4b0a      	ldr	r3, [pc, #40]	@ (8005830 <HAL_RCC_GetHCLKFreq+0x50>)
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	4a09      	ldr	r2, [pc, #36]	@ (8005834 <HAL_RCC_GetHCLKFreq+0x54>)
 800580e:	5cd3      	ldrb	r3, [r2, r3]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	fa22 f303 	lsr.w	r3, r2, r3
 800581a:	4a07      	ldr	r2, [pc, #28]	@ (8005838 <HAL_RCC_GetHCLKFreq+0x58>)
 800581c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800581e:	4a07      	ldr	r2, [pc, #28]	@ (800583c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005824:	4b04      	ldr	r3, [pc, #16]	@ (8005838 <HAL_RCC_GetHCLKFreq+0x58>)
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	58024400 	.word	0x58024400
 8005834:	0801154c 	.word	0x0801154c
 8005838:	24000004 	.word	0x24000004
 800583c:	24000000 	.word	0x24000000

08005840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005844:	f7ff ffcc 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8005848:	4602      	mov	r2, r0
 800584a:	4b06      	ldr	r3, [pc, #24]	@ (8005864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	4904      	ldr	r1, [pc, #16]	@ (8005868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005856:	5ccb      	ldrb	r3, [r1, r3]
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005860:	4618      	mov	r0, r3
 8005862:	bd80      	pop	{r7, pc}
 8005864:	58024400 	.word	0x58024400
 8005868:	0801154c 	.word	0x0801154c

0800586c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005870:	f7ff ffb6 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8005874:	4602      	mov	r2, r0
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	0a1b      	lsrs	r3, r3, #8
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	4904      	ldr	r1, [pc, #16]	@ (8005894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005882:	5ccb      	ldrb	r3, [r1, r3]
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800588c:	4618      	mov	r0, r3
 800588e:	bd80      	pop	{r7, pc}
 8005890:	58024400 	.word	0x58024400
 8005894:	0801154c 	.word	0x0801154c

08005898 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800589c:	b0ca      	sub	sp, #296	@ 0x128
 800589e:	af00      	add	r7, sp, #0
 80058a0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058a4:	2300      	movs	r3, #0
 80058a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058aa:	2300      	movs	r3, #0
 80058ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80058bc:	2500      	movs	r5, #0
 80058be:	ea54 0305 	orrs.w	r3, r4, r5
 80058c2:	d049      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058ce:	d02f      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80058d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058d4:	d828      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80058d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058da:	d01a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80058dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058e0:	d822      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80058e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058ea:	d007      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058ec:	e01c      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ee:	4bb8      	ldr	r3, [pc, #736]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f2:	4ab7      	ldr	r2, [pc, #732]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058fa:	e01a      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005900:	3308      	adds	r3, #8
 8005902:	2102      	movs	r1, #2
 8005904:	4618      	mov	r0, r3
 8005906:	f002 fb61 	bl	8007fcc <RCCEx_PLL2_Config>
 800590a:	4603      	mov	r3, r0
 800590c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005910:	e00f      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	3328      	adds	r3, #40	@ 0x28
 8005918:	2102      	movs	r1, #2
 800591a:	4618      	mov	r0, r3
 800591c:	f002 fc08 	bl	8008130 <RCCEx_PLL3_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005926:	e004      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800592e:	e000      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800593a:	4ba5      	ldr	r3, [pc, #660]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800593c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800593e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005948:	4aa1      	ldr	r2, [pc, #644]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800594a:	430b      	orrs	r3, r1
 800594c:	6513      	str	r3, [r2, #80]	@ 0x50
 800594e:	e003      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005954:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005964:	f04f 0900 	mov.w	r9, #0
 8005968:	ea58 0309 	orrs.w	r3, r8, r9
 800596c:	d047      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005974:	2b04      	cmp	r3, #4
 8005976:	d82a      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005978:	a201      	add	r2, pc, #4	@ (adr r2, 8005980 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	08005995 	.word	0x08005995
 8005984:	080059a3 	.word	0x080059a3
 8005988:	080059b9 	.word	0x080059b9
 800598c:	080059d7 	.word	0x080059d7
 8005990:	080059d7 	.word	0x080059d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005994:	4b8e      	ldr	r3, [pc, #568]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005998:	4a8d      	ldr	r2, [pc, #564]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800599a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800599e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059a0:	e01a      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a6:	3308      	adds	r3, #8
 80059a8:	2100      	movs	r1, #0
 80059aa:	4618      	mov	r0, r3
 80059ac:	f002 fb0e 	bl	8007fcc <RCCEx_PLL2_Config>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059b6:	e00f      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	3328      	adds	r3, #40	@ 0x28
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f002 fbb5 	bl	8008130 <RCCEx_PLL3_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059cc:	e004      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059d4:	e000      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80059d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059e0:	4b7b      	ldr	r3, [pc, #492]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e4:	f023 0107 	bic.w	r1, r3, #7
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ee:	4a78      	ldr	r2, [pc, #480]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059f0:	430b      	orrs	r3, r1
 80059f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80059f4:	e003      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80059fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005a0a:	f04f 0b00 	mov.w	fp, #0
 8005a0e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a12:	d04c      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a1e:	d030      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a24:	d829      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a26:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a28:	d02d      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005a2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a2c:	d825      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a2e:	2b80      	cmp	r3, #128	@ 0x80
 8005a30:	d018      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005a32:	2b80      	cmp	r3, #128	@ 0x80
 8005a34:	d821      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005a3a:	2b40      	cmp	r3, #64	@ 0x40
 8005a3c:	d007      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005a3e:	e01c      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a40:	4b63      	ldr	r3, [pc, #396]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a44:	4a62      	ldr	r2, [pc, #392]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a4c:	e01c      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a52:	3308      	adds	r3, #8
 8005a54:	2100      	movs	r1, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	f002 fab8 	bl	8007fcc <RCCEx_PLL2_Config>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a62:	e011      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a68:	3328      	adds	r3, #40	@ 0x28
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f002 fb5f 	bl	8008130 <RCCEx_PLL3_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a78:	e006      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a80:	e002      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a90:	4b4f      	ldr	r3, [pc, #316]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a94:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a9e:	4a4c      	ldr	r2, [pc, #304]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005aa4:	e003      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005aba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005ac4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4313      	orrs	r3, r2
 8005acc:	d053      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ad6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ada:	d035      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005adc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ae0:	d82e      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ae2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ae6:	d031      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005ae8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005aec:	d828      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005aee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005af2:	d01a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005af4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005af8:	d822      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005afe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b02:	d007      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005b04:	e01c      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b06:	4b32      	ldr	r3, [pc, #200]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0a:	4a31      	ldr	r2, [pc, #196]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b12:	e01c      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b18:	3308      	adds	r3, #8
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f002 fa55 	bl	8007fcc <RCCEx_PLL2_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b28:	e011      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2e:	3328      	adds	r3, #40	@ 0x28
 8005b30:	2100      	movs	r1, #0
 8005b32:	4618      	mov	r0, r3
 8005b34:	f002 fafc 	bl	8008130 <RCCEx_PLL3_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b3e:	e006      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b46:	e002      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b48:	bf00      	nop
 8005b4a:	e000      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10b      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b56:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b66:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b6c:	e003      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005b82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b86:	2300      	movs	r3, #0
 8005b88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005b8c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005b90:	460b      	mov	r3, r1
 8005b92:	4313      	orrs	r3, r2
 8005b94:	d056      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ba2:	d038      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005ba4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ba8:	d831      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005baa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005bae:	d034      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005bb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005bb4:	d82b      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bba:	d01d      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005bbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bc0:	d825      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d006      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005bc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bca:	d00a      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005bcc:	e01f      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bce:	bf00      	nop
 8005bd0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd4:	4ba2      	ldr	r3, [pc, #648]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	4aa1      	ldr	r2, [pc, #644]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005be0:	e01c      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	3308      	adds	r3, #8
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f002 f9ee 	bl	8007fcc <RCCEx_PLL2_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005bf6:	e011      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfc:	3328      	adds	r3, #40	@ 0x28
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f002 fa95 	bl	8008130 <RCCEx_PLL3_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c0c:	e006      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c14:	e002      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c16:	bf00      	nop
 8005c18:	e000      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10b      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c24:	4b8e      	ldr	r3, [pc, #568]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c28:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c34:	4a8a      	ldr	r2, [pc, #552]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c36:	430b      	orrs	r3, r1
 8005c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c3a:	e003      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005c50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c54:	2300      	movs	r3, #0
 8005c56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4313      	orrs	r3, r2
 8005c62:	d03a      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c6a:	2b30      	cmp	r3, #48	@ 0x30
 8005c6c:	d01f      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005c6e:	2b30      	cmp	r3, #48	@ 0x30
 8005c70:	d819      	bhi.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d00c      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	d815      	bhi.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d019      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005c7e:	2b10      	cmp	r3, #16
 8005c80:	d111      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c82:	4b77      	ldr	r3, [pc, #476]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c86:	4a76      	ldr	r2, [pc, #472]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c8e:	e011      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c94:	3308      	adds	r3, #8
 8005c96:	2102      	movs	r1, #2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f002 f997 	bl	8007fcc <RCCEx_PLL2_Config>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ca4:	e006      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cac:	e002      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005cbc:	4b68      	ldr	r3, [pc, #416]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cca:	4a65      	ldr	r2, [pc, #404]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005cd0:	e003      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005ce6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005cea:	2300      	movs	r3, #0
 8005cec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005cf0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	d051      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d04:	d035      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005d06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d0a:	d82e      	bhi.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d10:	d031      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005d12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d16:	d828      	bhi.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d1c:	d01a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d22:	d822      	bhi.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d2c:	d007      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005d2e:	e01c      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d30:	4b4b      	ldr	r3, [pc, #300]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	4a4a      	ldr	r2, [pc, #296]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d3c:	e01c      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d42:	3308      	adds	r3, #8
 8005d44:	2100      	movs	r1, #0
 8005d46:	4618      	mov	r0, r3
 8005d48:	f002 f940 	bl	8007fcc <RCCEx_PLL2_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d52:	e011      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	3328      	adds	r3, #40	@ 0x28
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f002 f9e7 	bl	8008130 <RCCEx_PLL3_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d68:	e006      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d70:	e002      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d72:	bf00      	nop
 8005d74:	e000      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d80:	4b37      	ldr	r3, [pc, #220]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d84:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d8e:	4a34      	ldr	r2, [pc, #208]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d90:	430b      	orrs	r3, r1
 8005d92:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d94:	e003      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005daa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dae:	2300      	movs	r3, #0
 8005db0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005db4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005db8:	460b      	mov	r3, r1
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	d056      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dc8:	d033      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005dca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dce:	d82c      	bhi.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005dd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dd4:	d02f      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005dd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dda:	d826      	bhi.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ddc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005de0:	d02b      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005de2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005de6:	d820      	bhi.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dec:	d012      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005dee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005df2:	d81a      	bhi.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d022      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dfc:	d115      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e02:	3308      	adds	r3, #8
 8005e04:	2101      	movs	r1, #1
 8005e06:	4618      	mov	r0, r3
 8005e08:	f002 f8e0 	bl	8007fcc <RCCEx_PLL2_Config>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e12:	e015      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e18:	3328      	adds	r3, #40	@ 0x28
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f002 f987 	bl	8008130 <RCCEx_PLL3_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e28:	e00a      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e30:	e006      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e32:	bf00      	nop
 8005e34:	e004      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e36:	bf00      	nop
 8005e38:	e002      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e3a:	bf00      	nop
 8005e3c:	e000      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10d      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e48:	4b05      	ldr	r3, [pc, #20]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e4c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e56:	4a02      	ldr	r2, [pc, #8]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e5c:	e006      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e5e:	bf00      	nop
 8005e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e82:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	d055      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e98:	d033      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e9e:	d82c      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea4:	d02f      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eaa:	d826      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005eac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005eb0:	d02b      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005eb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005eb6:	d820      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ebc:	d012      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ec2:	d81a      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d022      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005ec8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ecc:	d115      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f002 f878 	bl	8007fcc <RCCEx_PLL2_Config>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ee2:	e015      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee8:	3328      	adds	r3, #40	@ 0x28
 8005eea:	2101      	movs	r1, #1
 8005eec:	4618      	mov	r0, r3
 8005eee:	f002 f91f 	bl	8008130 <RCCEx_PLL3_Config>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ef8:	e00a      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f00:	e006      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f02:	bf00      	nop
 8005f04:	e004      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f06:	bf00      	nop
 8005f08:	e002      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f0a:	bf00      	nop
 8005f0c:	e000      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10b      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f18:	4ba3      	ldr	r3, [pc, #652]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f28:	4a9f      	ldr	r2, [pc, #636]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f2e:	e003      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005f44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	d037      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f62:	d00e      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005f64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f68:	d816      	bhi.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d018      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f72:	d111      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f74:	4b8c      	ldr	r3, [pc, #560]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f78:	4a8b      	ldr	r2, [pc, #556]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f80:	e00f      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f86:	3308      	adds	r3, #8
 8005f88:	2101      	movs	r1, #1
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f002 f81e 	bl	8007fcc <RCCEx_PLL2_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f96:	e004      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f9e:	e000      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005faa:	4b7f      	ldr	r3, [pc, #508]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb8:	4a7b      	ldr	r2, [pc, #492]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fba:	430b      	orrs	r3, r1
 8005fbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fbe:	e003      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005fde:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	d039      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d81c      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	08006035 	.word	0x08006035
 8005ffc:	08006009 	.word	0x08006009
 8006000:	08006017 	.word	0x08006017
 8006004:	08006035 	.word	0x08006035
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006008:	4b67      	ldr	r3, [pc, #412]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	4a66      	ldr	r2, [pc, #408]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800600e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006014:	e00f      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601a:	3308      	adds	r3, #8
 800601c:	2102      	movs	r1, #2
 800601e:	4618      	mov	r0, r3
 8006020:	f001 ffd4 	bl	8007fcc <RCCEx_PLL2_Config>
 8006024:	4603      	mov	r3, r0
 8006026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800602a:	e004      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006032:	e000      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10a      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800603e:	4b5a      	ldr	r3, [pc, #360]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006042:	f023 0103 	bic.w	r1, r3, #3
 8006046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800604c:	4a56      	ldr	r2, [pc, #344]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800604e:	430b      	orrs	r3, r1
 8006050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006052:	e003      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800605c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006068:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800606c:	2300      	movs	r3, #0
 800606e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006072:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006076:	460b      	mov	r3, r1
 8006078:	4313      	orrs	r3, r2
 800607a:	f000 809f 	beq.w	80061bc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800607e:	4b4b      	ldr	r3, [pc, #300]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a4a      	ldr	r2, [pc, #296]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006088:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800608a:	f7fb facf 	bl	800162c <HAL_GetTick>
 800608e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006092:	e00b      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006094:	f7fb faca 	bl	800162c <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b64      	cmp	r3, #100	@ 0x64
 80060a2:	d903      	bls.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060aa:	e005      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060ac:	4b3f      	ldr	r3, [pc, #252]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0ed      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80060b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d179      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060c0:	4b39      	ldr	r3, [pc, #228]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060cc:	4053      	eors	r3, r2
 80060ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d015      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060d6:	4b34      	ldr	r3, [pc, #208]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060e2:	4b31      	ldr	r3, [pc, #196]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e6:	4a30      	ldr	r2, [pc, #192]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ee:	4b2e      	ldr	r3, [pc, #184]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f2:	4a2d      	ldr	r2, [pc, #180]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80060fa:	4a2b      	ldr	r2, [pc, #172]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006100:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006106:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800610a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800610e:	d118      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006110:	f7fb fa8c 	bl	800162c <HAL_GetTick>
 8006114:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006118:	e00d      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611a:	f7fb fa87 	bl	800162c <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006124:	1ad2      	subs	r2, r2, r3
 8006126:	f241 3388 	movw	r3, #5000	@ 0x1388
 800612a:	429a      	cmp	r2, r3
 800612c:	d903      	bls.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006134:	e005      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006136:	4b1c      	ldr	r3, [pc, #112]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0eb      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006146:	2b00      	cmp	r3, #0
 8006148:	d129      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800614a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800615a:	d10e      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800615c:	4b12      	ldr	r3, [pc, #72]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006168:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800616c:	091a      	lsrs	r2, r3, #4
 800616e:	4b10      	ldr	r3, [pc, #64]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006170:	4013      	ands	r3, r2
 8006172:	4a0d      	ldr	r2, [pc, #52]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006174:	430b      	orrs	r3, r1
 8006176:	6113      	str	r3, [r2, #16]
 8006178:	e005      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800617a:	4b0b      	ldr	r3, [pc, #44]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	4a0a      	ldr	r2, [pc, #40]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006180:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006184:	6113      	str	r3, [r2, #16]
 8006186:	4b08      	ldr	r3, [pc, #32]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006188:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006196:	4a04      	ldr	r2, [pc, #16]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006198:	430b      	orrs	r3, r1
 800619a:	6713      	str	r3, [r2, #112]	@ 0x70
 800619c:	e00e      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800619e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80061a6:	e009      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80061a8:	58024400 	.word	0x58024400
 80061ac:	58024800 	.word	0x58024800
 80061b0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f002 0301 	and.w	r3, r2, #1
 80061c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061cc:	2300      	movs	r3, #0
 80061ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4313      	orrs	r3, r2
 80061da:	f000 8089 	beq.w	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80061de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061e4:	2b28      	cmp	r3, #40	@ 0x28
 80061e6:	d86b      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80061e8:	a201      	add	r2, pc, #4	@ (adr r2, 80061f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	080062c9 	.word	0x080062c9
 80061f4:	080062c1 	.word	0x080062c1
 80061f8:	080062c1 	.word	0x080062c1
 80061fc:	080062c1 	.word	0x080062c1
 8006200:	080062c1 	.word	0x080062c1
 8006204:	080062c1 	.word	0x080062c1
 8006208:	080062c1 	.word	0x080062c1
 800620c:	080062c1 	.word	0x080062c1
 8006210:	08006295 	.word	0x08006295
 8006214:	080062c1 	.word	0x080062c1
 8006218:	080062c1 	.word	0x080062c1
 800621c:	080062c1 	.word	0x080062c1
 8006220:	080062c1 	.word	0x080062c1
 8006224:	080062c1 	.word	0x080062c1
 8006228:	080062c1 	.word	0x080062c1
 800622c:	080062c1 	.word	0x080062c1
 8006230:	080062ab 	.word	0x080062ab
 8006234:	080062c1 	.word	0x080062c1
 8006238:	080062c1 	.word	0x080062c1
 800623c:	080062c1 	.word	0x080062c1
 8006240:	080062c1 	.word	0x080062c1
 8006244:	080062c1 	.word	0x080062c1
 8006248:	080062c1 	.word	0x080062c1
 800624c:	080062c1 	.word	0x080062c1
 8006250:	080062c9 	.word	0x080062c9
 8006254:	080062c1 	.word	0x080062c1
 8006258:	080062c1 	.word	0x080062c1
 800625c:	080062c1 	.word	0x080062c1
 8006260:	080062c1 	.word	0x080062c1
 8006264:	080062c1 	.word	0x080062c1
 8006268:	080062c1 	.word	0x080062c1
 800626c:	080062c1 	.word	0x080062c1
 8006270:	080062c9 	.word	0x080062c9
 8006274:	080062c1 	.word	0x080062c1
 8006278:	080062c1 	.word	0x080062c1
 800627c:	080062c1 	.word	0x080062c1
 8006280:	080062c1 	.word	0x080062c1
 8006284:	080062c1 	.word	0x080062c1
 8006288:	080062c1 	.word	0x080062c1
 800628c:	080062c1 	.word	0x080062c1
 8006290:	080062c9 	.word	0x080062c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006298:	3308      	adds	r3, #8
 800629a:	2101      	movs	r1, #1
 800629c:	4618      	mov	r0, r3
 800629e:	f001 fe95 	bl	8007fcc <RCCEx_PLL2_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80062a8:	e00f      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	3328      	adds	r3, #40	@ 0x28
 80062b0:	2101      	movs	r1, #1
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 ff3c 	bl	8008130 <RCCEx_PLL3_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80062be:	e004      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062c6:	e000      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80062c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062d2:	4bbf      	ldr	r3, [pc, #764]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062e0:	4abb      	ldr	r2, [pc, #748]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062e2:	430b      	orrs	r3, r1
 80062e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80062e6:	e003      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f002 0302 	and.w	r3, r2, #2
 80062fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006300:	2300      	movs	r3, #0
 8006302:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006306:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800630a:	460b      	mov	r3, r1
 800630c:	4313      	orrs	r3, r2
 800630e:	d041      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006314:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006316:	2b05      	cmp	r3, #5
 8006318:	d824      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800631a:	a201      	add	r2, pc, #4	@ (adr r2, 8006320 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	0800636d 	.word	0x0800636d
 8006324:	08006339 	.word	0x08006339
 8006328:	0800634f 	.word	0x0800634f
 800632c:	0800636d 	.word	0x0800636d
 8006330:	0800636d 	.word	0x0800636d
 8006334:	0800636d 	.word	0x0800636d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633c:	3308      	adds	r3, #8
 800633e:	2101      	movs	r1, #1
 8006340:	4618      	mov	r0, r3
 8006342:	f001 fe43 	bl	8007fcc <RCCEx_PLL2_Config>
 8006346:	4603      	mov	r3, r0
 8006348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800634c:	e00f      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800634e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006352:	3328      	adds	r3, #40	@ 0x28
 8006354:	2101      	movs	r1, #1
 8006356:	4618      	mov	r0, r3
 8006358:	f001 feea 	bl	8008130 <RCCEx_PLL3_Config>
 800635c:	4603      	mov	r3, r0
 800635e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006362:	e004      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800636a:	e000      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800636c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006376:	4b96      	ldr	r3, [pc, #600]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637a:	f023 0107 	bic.w	r1, r3, #7
 800637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006382:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006384:	4a92      	ldr	r2, [pc, #584]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006386:	430b      	orrs	r3, r1
 8006388:	6553      	str	r3, [r2, #84]	@ 0x54
 800638a:	e003      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f002 0304 	and.w	r3, r2, #4
 80063a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4313      	orrs	r3, r2
 80063b2:	d044      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80063b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063bc:	2b05      	cmp	r3, #5
 80063be:	d825      	bhi.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80063c0:	a201      	add	r2, pc, #4	@ (adr r2, 80063c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80063c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c6:	bf00      	nop
 80063c8:	08006415 	.word	0x08006415
 80063cc:	080063e1 	.word	0x080063e1
 80063d0:	080063f7 	.word	0x080063f7
 80063d4:	08006415 	.word	0x08006415
 80063d8:	08006415 	.word	0x08006415
 80063dc:	08006415 	.word	0x08006415
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e4:	3308      	adds	r3, #8
 80063e6:	2101      	movs	r1, #1
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 fdef 	bl	8007fcc <RCCEx_PLL2_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063f4:	e00f      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fa:	3328      	adds	r3, #40	@ 0x28
 80063fc:	2101      	movs	r1, #1
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 fe96 	bl	8008130 <RCCEx_PLL3_Config>
 8006404:	4603      	mov	r3, r0
 8006406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800640a:	e004      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006412:	e000      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10b      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800641e:	4b6c      	ldr	r3, [pc, #432]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006422:	f023 0107 	bic.w	r1, r3, #7
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800642e:	4a68      	ldr	r2, [pc, #416]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006430:	430b      	orrs	r3, r1
 8006432:	6593      	str	r3, [r2, #88]	@ 0x58
 8006434:	e003      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800643a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800643e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	f002 0320 	and.w	r3, r2, #32
 800644a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800644e:	2300      	movs	r3, #0
 8006450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006454:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006458:	460b      	mov	r3, r1
 800645a:	4313      	orrs	r3, r2
 800645c:	d055      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800645e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006466:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800646a:	d033      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800646c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006470:	d82c      	bhi.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006476:	d02f      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800647c:	d826      	bhi.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800647e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006482:	d02b      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006484:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006488:	d820      	bhi.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800648a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800648e:	d012      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006494:	d81a      	bhi.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d022      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800649a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800649e:	d115      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a4:	3308      	adds	r3, #8
 80064a6:	2100      	movs	r1, #0
 80064a8:	4618      	mov	r0, r3
 80064aa:	f001 fd8f 	bl	8007fcc <RCCEx_PLL2_Config>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064b4:	e015      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ba:	3328      	adds	r3, #40	@ 0x28
 80064bc:	2102      	movs	r1, #2
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 fe36 	bl	8008130 <RCCEx_PLL3_Config>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064ca:	e00a      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064d2:	e006      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064d4:	bf00      	nop
 80064d6:	e004      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064d8:	bf00      	nop
 80064da:	e002      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064dc:	bf00      	nop
 80064de:	e000      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064ea:	4b39      	ldr	r3, [pc, #228]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80064f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fa:	4a35      	ldr	r2, [pc, #212]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064fc:	430b      	orrs	r3, r1
 80064fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006500:	e003      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800650a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006516:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800651a:	2300      	movs	r3, #0
 800651c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006520:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006524:	460b      	mov	r3, r1
 8006526:	4313      	orrs	r3, r2
 8006528:	d058      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006532:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006536:	d033      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006538:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800653c:	d82c      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800653e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006542:	d02f      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006548:	d826      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800654a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800654e:	d02b      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006550:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006554:	d820      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800655a:	d012      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800655c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006560:	d81a      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d022      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800656a:	d115      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800656c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006570:	3308      	adds	r3, #8
 8006572:	2100      	movs	r1, #0
 8006574:	4618      	mov	r0, r3
 8006576:	f001 fd29 	bl	8007fcc <RCCEx_PLL2_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006580:	e015      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006586:	3328      	adds	r3, #40	@ 0x28
 8006588:	2102      	movs	r1, #2
 800658a:	4618      	mov	r0, r3
 800658c:	f001 fdd0 	bl	8008130 <RCCEx_PLL3_Config>
 8006590:	4603      	mov	r3, r0
 8006592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006596:	e00a      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800659e:	e006      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065a0:	bf00      	nop
 80065a2:	e004      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065a4:	bf00      	nop
 80065a6:	e002      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065a8:	bf00      	nop
 80065aa:	e000      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10e      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065b6:	4b06      	ldr	r3, [pc, #24]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80065be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065c6:	4a02      	ldr	r2, [pc, #8]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065c8:	430b      	orrs	r3, r1
 80065ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80065cc:	e006      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80065ce:	bf00      	nop
 80065d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80065e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065ec:	2300      	movs	r3, #0
 80065ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80065f6:	460b      	mov	r3, r1
 80065f8:	4313      	orrs	r3, r2
 80065fa:	d055      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80065fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006600:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006604:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006608:	d033      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800660a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800660e:	d82c      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006614:	d02f      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006616:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800661a:	d826      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800661c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006620:	d02b      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006622:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006626:	d820      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800662c:	d012      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800662e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006632:	d81a      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d022      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800663c:	d115      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006642:	3308      	adds	r3, #8
 8006644:	2100      	movs	r1, #0
 8006646:	4618      	mov	r0, r3
 8006648:	f001 fcc0 	bl	8007fcc <RCCEx_PLL2_Config>
 800664c:	4603      	mov	r3, r0
 800664e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006652:	e015      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006658:	3328      	adds	r3, #40	@ 0x28
 800665a:	2102      	movs	r1, #2
 800665c:	4618      	mov	r0, r3
 800665e:	f001 fd67 	bl	8008130 <RCCEx_PLL3_Config>
 8006662:	4603      	mov	r3, r0
 8006664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006668:	e00a      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006670:	e006      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006672:	bf00      	nop
 8006674:	e004      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006676:	bf00      	nop
 8006678:	e002      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800667a:	bf00      	nop
 800667c:	e000      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800667e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10b      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006688:	4ba1      	ldr	r3, [pc, #644]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800668a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006694:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006698:	4a9d      	ldr	r2, [pc, #628]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800669a:	430b      	orrs	r3, r1
 800669c:	6593      	str	r3, [r2, #88]	@ 0x58
 800669e:	e003      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f002 0308 	and.w	r3, r2, #8
 80066b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066b8:	2300      	movs	r3, #0
 80066ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80066c2:	460b      	mov	r3, r1
 80066c4:	4313      	orrs	r3, r2
 80066c6:	d01e      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80066c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d4:	d10c      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066da:	3328      	adds	r3, #40	@ 0x28
 80066dc:	2102      	movs	r1, #2
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 fd26 	bl	8008130 <RCCEx_PLL3_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80066f0:	4b87      	ldr	r3, [pc, #540]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006700:	4a83      	ldr	r2, [pc, #524]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006702:	430b      	orrs	r3, r1
 8006704:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	f002 0310 	and.w	r3, r2, #16
 8006712:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006716:	2300      	movs	r3, #0
 8006718:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800671c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006720:	460b      	mov	r3, r1
 8006722:	4313      	orrs	r3, r2
 8006724:	d01e      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800672e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006732:	d10c      	bne.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006738:	3328      	adds	r3, #40	@ 0x28
 800673a:	2102      	movs	r1, #2
 800673c:	4618      	mov	r0, r3
 800673e:	f001 fcf7 	bl	8008130 <RCCEx_PLL3_Config>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800674e:	4b70      	ldr	r3, [pc, #448]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006752:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800675e:	4a6c      	ldr	r2, [pc, #432]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006760:	430b      	orrs	r3, r1
 8006762:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006770:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006774:	2300      	movs	r3, #0
 8006776:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800677a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800677e:	460b      	mov	r3, r1
 8006780:	4313      	orrs	r3, r2
 8006782:	d03e      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006788:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800678c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006790:	d022      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006796:	d81b      	bhi.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a0:	d00b      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80067a2:	e015      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a8:	3308      	adds	r3, #8
 80067aa:	2100      	movs	r1, #0
 80067ac:	4618      	mov	r0, r3
 80067ae:	f001 fc0d 	bl	8007fcc <RCCEx_PLL2_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067b8:	e00f      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067be:	3328      	adds	r3, #40	@ 0x28
 80067c0:	2102      	movs	r1, #2
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 fcb4 	bl	8008130 <RCCEx_PLL3_Config>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067ce:	e004      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067d6:	e000      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80067d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10b      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067e2:	4b4b      	ldr	r3, [pc, #300]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80067ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067f2:	4a47      	ldr	r2, [pc, #284]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067f4:	430b      	orrs	r3, r1
 80067f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80067f8:	e003      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800680e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006810:	2300      	movs	r3, #0
 8006812:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006814:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006818:	460b      	mov	r3, r1
 800681a:	4313      	orrs	r3, r2
 800681c:	d03b      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800681e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006826:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800682a:	d01f      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800682c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006830:	d818      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006832:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006836:	d003      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006838:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800683c:	d007      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800683e:	e011      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006840:	4b33      	ldr	r3, [pc, #204]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006844:	4a32      	ldr	r2, [pc, #200]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800684a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800684c:	e00f      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006852:	3328      	adds	r3, #40	@ 0x28
 8006854:	2101      	movs	r1, #1
 8006856:	4618      	mov	r0, r3
 8006858:	f001 fc6a 	bl	8008130 <RCCEx_PLL3_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006862:	e004      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800686a:	e000      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800686c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800686e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10b      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006876:	4b26      	ldr	r3, [pc, #152]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800687a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006886:	4a22      	ldr	r2, [pc, #136]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006888:	430b      	orrs	r3, r1
 800688a:	6553      	str	r3, [r2, #84]	@ 0x54
 800688c:	e003      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80068a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80068a4:	2300      	movs	r3, #0
 80068a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80068a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80068ac:	460b      	mov	r3, r1
 80068ae:	4313      	orrs	r3, r2
 80068b0:	d034      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80068b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80068bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c0:	d007      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80068c2:	e011      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c4:	4b12      	ldr	r3, [pc, #72]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c8:	4a11      	ldr	r2, [pc, #68]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068d0:	e00e      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d6:	3308      	adds	r3, #8
 80068d8:	2102      	movs	r1, #2
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 fb76 	bl	8007fcc <RCCEx_PLL2_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068e6:	e003      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10d      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068f8:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006906:	4a02      	ldr	r2, [pc, #8]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006908:	430b      	orrs	r3, r1
 800690a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800690c:	e006      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800690e:	bf00      	nop
 8006910:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006918:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800691c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006928:	66bb      	str	r3, [r7, #104]	@ 0x68
 800692a:	2300      	movs	r3, #0
 800692c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800692e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006932:	460b      	mov	r3, r1
 8006934:	4313      	orrs	r3, r2
 8006936:	d00c      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693c:	3328      	adds	r3, #40	@ 0x28
 800693e:	2102      	movs	r1, #2
 8006940:	4618      	mov	r0, r3
 8006942:	f001 fbf5 	bl	8008130 <RCCEx_PLL3_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800695e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006960:	2300      	movs	r3, #0
 8006962:	667b      	str	r3, [r7, #100]	@ 0x64
 8006964:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006968:	460b      	mov	r3, r1
 800696a:	4313      	orrs	r3, r2
 800696c:	d038      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800697a:	d018      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800697c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006980:	d811      	bhi.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006986:	d014      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800698c:	d80b      	bhi.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d011      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006996:	d106      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006998:	4bc3      	ldr	r3, [pc, #780]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800699a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699c:	4ac2      	ldr	r2, [pc, #776]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800699e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80069a4:	e008      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069ac:	e004      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069ae:	bf00      	nop
 80069b0:	e002      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069b2:	bf00      	nop
 80069b4:	e000      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10b      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069c0:	4bb9      	ldr	r3, [pc, #740]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069d0:	4ab5      	ldr	r2, [pc, #724]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069d2:	430b      	orrs	r3, r1
 80069d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80069d6:	e003      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80069ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069ee:	2300      	movs	r3, #0
 80069f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80069f6:	460b      	mov	r3, r1
 80069f8:	4313      	orrs	r3, r2
 80069fa:	d009      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069fc:	4baa      	ldr	r3, [pc, #680]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a0a:	4aa7      	ldr	r2, [pc, #668]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006a1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a1e:	2300      	movs	r3, #0
 8006a20:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a22:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006a26:	460b      	mov	r3, r1
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	d00a      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006a2c:	4b9e      	ldr	r3, [pc, #632]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a3c:	4a9a      	ldr	r2, [pc, #616]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a3e:	430b      	orrs	r3, r1
 8006a40:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a50:	2300      	movs	r3, #0
 8006a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a54:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	d009      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a5e:	4b92      	ldr	r3, [pc, #584]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a62:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a6c:	4a8e      	ldr	r2, [pc, #568]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a6e:	430b      	orrs	r3, r1
 8006a70:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006a7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a80:	2300      	movs	r3, #0
 8006a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a84:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	d00e      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a8e:	4b86      	ldr	r3, [pc, #536]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	4a85      	ldr	r2, [pc, #532]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a94:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a98:	6113      	str	r3, [r2, #16]
 8006a9a:	4b83      	ldr	r3, [pc, #524]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a9c:	6919      	ldr	r1, [r3, #16]
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006aa6:	4a80      	ldr	r2, [pc, #512]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aba:	2300      	movs	r3, #0
 8006abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006abe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	d009      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ac8:	4b77      	ldr	r3, [pc, #476]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006acc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad6:	4a74      	ldr	r2, [pc, #464]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aea:	2300      	movs	r3, #0
 8006aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006af2:	460b      	mov	r3, r1
 8006af4:	4313      	orrs	r3, r2
 8006af6:	d00a      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006af8:	4b6b      	ldr	r3, [pc, #428]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b08:	4a67      	ldr	r2, [pc, #412]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	2100      	movs	r1, #0
 8006b18:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b20:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006b24:	460b      	mov	r3, r1
 8006b26:	4313      	orrs	r3, r2
 8006b28:	d011      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2e:	3308      	adds	r3, #8
 8006b30:	2100      	movs	r1, #0
 8006b32:	4618      	mov	r0, r3
 8006b34:	f001 fa4a 	bl	8007fcc <RCCEx_PLL2_Config>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	2100      	movs	r1, #0
 8006b58:	6239      	str	r1, [r7, #32]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b60:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b64:	460b      	mov	r3, r1
 8006b66:	4313      	orrs	r3, r2
 8006b68:	d011      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6e:	3308      	adds	r3, #8
 8006b70:	2101      	movs	r1, #1
 8006b72:	4618      	mov	r0, r3
 8006b74:	f001 fa2a 	bl	8007fcc <RCCEx_PLL2_Config>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	2100      	movs	r1, #0
 8006b98:	61b9      	str	r1, [r7, #24]
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	61fb      	str	r3, [r7, #28]
 8006ba0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	d011      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bae:	3308      	adds	r3, #8
 8006bb0:	2102      	movs	r1, #2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f001 fa0a 	bl	8007fcc <RCCEx_PLL2_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	6139      	str	r1, [r7, #16]
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006be4:	460b      	mov	r3, r1
 8006be6:	4313      	orrs	r3, r2
 8006be8:	d011      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bee:	3328      	adds	r3, #40	@ 0x28
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f001 fa9c 	bl	8008130 <RCCEx_PLL3_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	2100      	movs	r1, #0
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	f003 0310 	and.w	r3, r3, #16
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c24:	460b      	mov	r3, r1
 8006c26:	4313      	orrs	r3, r2
 8006c28:	d011      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2e:	3328      	adds	r3, #40	@ 0x28
 8006c30:	2101      	movs	r1, #1
 8006c32:	4618      	mov	r0, r3
 8006c34:	f001 fa7c 	bl	8008130 <RCCEx_PLL3_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	2100      	movs	r1, #0
 8006c58:	6039      	str	r1, [r7, #0]
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	607b      	str	r3, [r7, #4]
 8006c60:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c64:	460b      	mov	r3, r1
 8006c66:	4313      	orrs	r3, r2
 8006c68:	d011      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6e:	3328      	adds	r3, #40	@ 0x28
 8006c70:	2102      	movs	r1, #2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 fa5c 	bl	8008130 <RCCEx_PLL3_Config>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006c8e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	e000      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ca8:	58024400 	.word	0x58024400

08006cac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b090      	sub	sp, #64	@ 0x40
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cba:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	f040 8094 	bne.w	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006cc4:	4b9e      	ldr	r3, [pc, #632]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	f200 8087 	bhi.w	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cdc:	08006cf1 	.word	0x08006cf1
 8006ce0:	08006d19 	.word	0x08006d19
 8006ce4:	08006d41 	.word	0x08006d41
 8006ce8:	08006ddd 	.word	0x08006ddd
 8006cec:	08006d69 	.word	0x08006d69
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cf0:	4b93      	ldr	r3, [pc, #588]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cfc:	d108      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 f810 	bl	8007d28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d0c:	f000 bd45 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d14:	f000 bd41 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d18:	4b89      	ldr	r3, [pc, #548]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d24:	d108      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d26:	f107 0318 	add.w	r3, r7, #24
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fd54 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d34:	f000 bd31 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d3c:	f000 bd2d 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d40:	4b7f      	ldr	r3, [pc, #508]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d4c:	d108      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d4e:	f107 030c 	add.w	r3, r7, #12
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fe94 	bl	8007a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d5c:	f000 bd1d 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d64:	f000 bd19 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d68:	4b75      	ldr	r3, [pc, #468]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d70:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d72:	4b73      	ldr	r3, [pc, #460]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0304 	and.w	r3, r3, #4
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d10c      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d109      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d84:	4b6e      	ldr	r3, [pc, #440]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	08db      	lsrs	r3, r3, #3
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	4a6d      	ldr	r2, [pc, #436]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
 8006d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d96:	e01f      	b.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d98:	4b69      	ldr	r3, [pc, #420]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da4:	d106      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dac:	d102      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006dae:	4b66      	ldr	r3, [pc, #408]	@ (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006db2:	e011      	b.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006db4:	4b62      	ldr	r3, [pc, #392]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dc0:	d106      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dc8:	d102      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006dca:	4b60      	ldr	r3, [pc, #384]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dce:	e003      	b.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006dd4:	f000 bce1 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006dd8:	f000 bcdf 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de0:	f000 bcdb 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de8:	f000 bcd7 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006df4:	430b      	orrs	r3, r1
 8006df6:	f040 80ad 	bne.w	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006dfa:	4b51      	ldr	r3, [pc, #324]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006e02:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e0a:	d056      	beq.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e12:	f200 8090 	bhi.w	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e1a:	f000 8088 	beq.w	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e20:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e22:	f200 8088 	bhi.w	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	2b80      	cmp	r3, #128	@ 0x80
 8006e2a:	d032      	beq.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2e:	2b80      	cmp	r3, #128	@ 0x80
 8006e30:	f200 8081 	bhi.w	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	2b40      	cmp	r3, #64	@ 0x40
 8006e3e:	d014      	beq.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006e40:	e079      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e42:	4b3f      	ldr	r3, [pc, #252]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e4e:	d108      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 ff67 	bl	8007d28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e5e:	f000 bc9c 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e66:	f000 bc98 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e6a:	4b35      	ldr	r3, [pc, #212]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e76:	d108      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e78:	f107 0318 	add.w	r3, r7, #24
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fcab 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e86:	f000 bc88 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e8e:	f000 bc84 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e92:	4b2b      	ldr	r3, [pc, #172]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e9e:	d108      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ea0:	f107 030c 	add.w	r3, r7, #12
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 fdeb 	bl	8007a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eae:	f000 bc74 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eb6:	f000 bc70 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006eba:	4b21      	ldr	r3, [pc, #132]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ebe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ec2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d10c      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	08db      	lsrs	r3, r3, #3
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	4a18      	ldr	r2, [pc, #96]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ee8:	e01f      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eea:	4b15      	ldr	r3, [pc, #84]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ef6:	d106      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006efe:	d102      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f00:	4b11      	ldr	r3, [pc, #68]	@ (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f04:	e011      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f06:	4b0e      	ldr	r3, [pc, #56]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f12:	d106      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f1a:	d102      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f20:	e003      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f26:	f000 bc38 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f2a:	f000 bc36 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f2e:	4b08      	ldr	r3, [pc, #32]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f32:	f000 bc32 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3a:	f000 bc2e 	b.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f3e:	bf00      	nop
 8006f40:	58024400 	.word	0x58024400
 8006f44:	03d09000 	.word	0x03d09000
 8006f48:	003d0900 	.word	0x003d0900
 8006f4c:	017d7840 	.word	0x017d7840
 8006f50:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f58:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	f040 809c 	bne.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006f62:	4b9e      	ldr	r3, [pc, #632]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f66:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006f6a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f72:	d054      	beq.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f7a:	f200 808b 	bhi.w	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f80:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f84:	f000 8083 	beq.w	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f8e:	f200 8081 	bhi.w	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f98:	d02f      	beq.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fa0:	d878      	bhi.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006faa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fae:	d012      	beq.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006fb0:	e070      	b.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fb2:	4b8a      	ldr	r3, [pc, #552]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fbe:	d107      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 feaf 	bl	8007d28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fce:	e3e4      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fd4:	e3e1      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fd6:	4b81      	ldr	r3, [pc, #516]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fe2:	d107      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe4:	f107 0318 	add.w	r3, r7, #24
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fbf5 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ff2:	e3d2      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ff8:	e3cf      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ffa:	4b78      	ldr	r3, [pc, #480]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007006:	d107      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007008:	f107 030c 	add.w	r3, r7, #12
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fd37 	bl	8007a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007016:	e3c0      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800701c:	e3bd      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800701e:	4b6f      	ldr	r3, [pc, #444]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007022:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007028:	4b6c      	ldr	r3, [pc, #432]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b04      	cmp	r3, #4
 8007032:	d10c      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007036:	2b00      	cmp	r3, #0
 8007038:	d109      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800703a:	4b68      	ldr	r3, [pc, #416]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	08db      	lsrs	r3, r3, #3
 8007040:	f003 0303 	and.w	r3, r3, #3
 8007044:	4a66      	ldr	r2, [pc, #408]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007046:	fa22 f303 	lsr.w	r3, r2, r3
 800704a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800704c:	e01e      	b.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800704e:	4b63      	ldr	r3, [pc, #396]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800705a:	d106      	bne.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800705c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007062:	d102      	bne.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007064:	4b5f      	ldr	r3, [pc, #380]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007068:	e010      	b.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800706a:	4b5c      	ldr	r3, [pc, #368]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007076:	d106      	bne.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800707a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800707e:	d102      	bne.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007080:	4b59      	ldr	r3, [pc, #356]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007084:	e002      	b.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800708a:	e386      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800708c:	e385      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800708e:	4b57      	ldr	r3, [pc, #348]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007092:	e382      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007098:	e37f      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800709a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800709e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80070a2:	430b      	orrs	r3, r1
 80070a4:	f040 80a7 	bne.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80070a8:	4b4c      	ldr	r3, [pc, #304]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ac:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80070b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070b8:	d055      	beq.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80070ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070c0:	f200 8096 	bhi.w	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80070c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070ca:	f000 8084 	beq.w	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80070ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070d4:	f200 808c 	bhi.w	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070de:	d030      	beq.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80070e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070e6:	f200 8083 	bhi.w	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070f6:	d012      	beq.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80070f8:	e07a      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070fa:	4b38      	ldr	r3, [pc, #224]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007106:	d107      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800710c:	4618      	mov	r0, r3
 800710e:	f000 fe0b 	bl	8007d28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007116:	e340      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800711c:	e33d      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800711e:	4b2f      	ldr	r3, [pc, #188]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800712a:	d107      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800712c:	f107 0318 	add.w	r3, r7, #24
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fb51 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800713a:	e32e      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007140:	e32b      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007142:	4b26      	ldr	r3, [pc, #152]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800714a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800714e:	d107      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007150:	f107 030c 	add.w	r3, r7, #12
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fc93 	bl	8007a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800715e:	e31c      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007164:	e319      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007166:	4b1d      	ldr	r3, [pc, #116]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800716a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800716e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007170:	4b1a      	ldr	r3, [pc, #104]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b04      	cmp	r3, #4
 800717a:	d10c      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800717c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717e:	2b00      	cmp	r3, #0
 8007180:	d109      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007182:	4b16      	ldr	r3, [pc, #88]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	08db      	lsrs	r3, r3, #3
 8007188:	f003 0303 	and.w	r3, r3, #3
 800718c:	4a14      	ldr	r2, [pc, #80]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800718e:	fa22 f303 	lsr.w	r3, r2, r3
 8007192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007194:	e01e      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007196:	4b11      	ldr	r3, [pc, #68]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800719e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071a2:	d106      	bne.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80071a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071aa:	d102      	bne.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071ac:	4b0d      	ldr	r3, [pc, #52]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80071ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071b0:	e010      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071b2:	4b0a      	ldr	r3, [pc, #40]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071be:	d106      	bne.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80071c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071c6:	d102      	bne.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071c8:	4b07      	ldr	r3, [pc, #28]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80071ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071cc:	e002      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80071d2:	e2e2      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071d4:	e2e1      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071d6:	4b05      	ldr	r3, [pc, #20]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80071d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071da:	e2de      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071dc:	58024400 	.word	0x58024400
 80071e0:	03d09000 	.word	0x03d09000
 80071e4:	003d0900 	.word	0x003d0900
 80071e8:	017d7840 	.word	0x017d7840
 80071ec:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f4:	e2d1      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80071f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071fa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80071fe:	430b      	orrs	r3, r1
 8007200:	f040 809c 	bne.w	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007204:	4b93      	ldr	r3, [pc, #588]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007208:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800720c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800720e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007210:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007214:	d054      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007218:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800721c:	f200 808b 	bhi.w	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007222:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007226:	f000 8083 	beq.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800722a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007230:	f200 8081 	bhi.w	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800723a:	d02f      	beq.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800723c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007242:	d878      	bhi.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007246:	2b00      	cmp	r3, #0
 8007248:	d004      	beq.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800724a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007250:	d012      	beq.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007252:	e070      	b.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007254:	4b7f      	ldr	r3, [pc, #508]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800725c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007260:	d107      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fd5e 	bl	8007d28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007270:	e293      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007276:	e290      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007278:	4b76      	ldr	r3, [pc, #472]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007280:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007284:	d107      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007286:	f107 0318 	add.w	r3, r7, #24
 800728a:	4618      	mov	r0, r3
 800728c:	f000 faa4 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007294:	e281      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800729a:	e27e      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800729c:	4b6d      	ldr	r3, [pc, #436]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072a8:	d107      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072aa:	f107 030c 	add.w	r3, r7, #12
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fbe6 	bl	8007a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072b8:	e26f      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072be:	e26c      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072c0:	4b64      	ldr	r3, [pc, #400]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80072c8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072ca:	4b62      	ldr	r3, [pc, #392]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d10c      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80072d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d109      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072dc:	4b5d      	ldr	r3, [pc, #372]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	08db      	lsrs	r3, r3, #3
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	4a5c      	ldr	r2, [pc, #368]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
 80072ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ee:	e01e      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072f0:	4b58      	ldr	r3, [pc, #352]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072fc:	d106      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80072fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007304:	d102      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007306:	4b55      	ldr	r3, [pc, #340]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800730a:	e010      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800730c:	4b51      	ldr	r3, [pc, #324]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007318:	d106      	bne.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800731a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007320:	d102      	bne.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007322:	4b4f      	ldr	r3, [pc, #316]	@ (8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007326:	e002      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800732c:	e235      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800732e:	e234      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007330:	4b4c      	ldr	r3, [pc, #304]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007334:	e231      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800733a:	e22e      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800733c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007340:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007344:	430b      	orrs	r3, r1
 8007346:	f040 808f 	bne.w	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800734a:	4b42      	ldr	r3, [pc, #264]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800734c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800734e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007352:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007356:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800735a:	d06b      	beq.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800735c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007362:	d874      	bhi.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007366:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800736a:	d056      	beq.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800736c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007372:	d86c      	bhi.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007376:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800737a:	d03b      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800737c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007382:	d864      	bhi.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007386:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800738a:	d021      	beq.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800738c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007392:	d85c      	bhi.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007396:	2b00      	cmp	r3, #0
 8007398:	d004      	beq.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800739a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a0:	d004      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80073a2:	e054      	b.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80073a4:	f7fe fa4c 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 80073a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073aa:	e1f6      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073ac:	4b29      	ldr	r3, [pc, #164]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073b8:	d107      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ba:	f107 0318 	add.w	r3, r7, #24
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fa0a 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c8:	e1e7      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ce:	e1e4      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073d0:	4b20      	ldr	r3, [pc, #128]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073dc:	d107      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073de:	f107 030c 	add.w	r3, r7, #12
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fb4c 	bl	8007a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ec:	e1d5      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f2:	e1d2      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073f4:	4b17      	ldr	r3, [pc, #92]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	d109      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007400:	4b14      	ldr	r3, [pc, #80]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	08db      	lsrs	r3, r3, #3
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	4a13      	ldr	r2, [pc, #76]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800740c:	fa22 f303 	lsr.w	r3, r2, r3
 8007410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007412:	e1c2      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007418:	e1bf      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800741a:	4b0e      	ldr	r3, [pc, #56]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007426:	d102      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007428:	4b0c      	ldr	r3, [pc, #48]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800742a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800742c:	e1b5      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007432:	e1b2      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007434:	4b07      	ldr	r3, [pc, #28]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007440:	d102      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007442:	4b07      	ldr	r3, [pc, #28]	@ (8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007446:	e1a8      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800744c:	e1a5      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007452:	e1a2      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007454:	58024400 	.word	0x58024400
 8007458:	03d09000 	.word	0x03d09000
 800745c:	003d0900 	.word	0x003d0900
 8007460:	017d7840 	.word	0x017d7840
 8007464:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800746c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007470:	430b      	orrs	r3, r1
 8007472:	d173      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007474:	4b9c      	ldr	r3, [pc, #624]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007478:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800747c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800747e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007480:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007484:	d02f      	beq.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007488:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800748c:	d863      	bhi.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800748e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800749a:	d012      	beq.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800749c:	e05b      	b.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800749e:	4b92      	ldr	r3, [pc, #584]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074aa:	d107      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ac:	f107 0318 	add.w	r3, r7, #24
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 f991 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ba:	e16e      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074c0:	e16b      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074c2:	4b89      	ldr	r3, [pc, #548]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074ce:	d107      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d0:	f107 030c 	add.w	r3, r7, #12
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fad3 	bl	8007a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074de:	e15c      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e4:	e159      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074e6:	4b80      	ldr	r3, [pc, #512]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074f0:	4b7d      	ldr	r3, [pc, #500]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d10c      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80074fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d109      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007502:	4b79      	ldr	r3, [pc, #484]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	08db      	lsrs	r3, r3, #3
 8007508:	f003 0303 	and.w	r3, r3, #3
 800750c:	4a77      	ldr	r2, [pc, #476]	@ (80076ec <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800750e:	fa22 f303 	lsr.w	r3, r2, r3
 8007512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007514:	e01e      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007516:	4b74      	ldr	r3, [pc, #464]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800751e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007522:	d106      	bne.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800752a:	d102      	bne.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800752c:	4b70      	ldr	r3, [pc, #448]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800752e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007530:	e010      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007532:	4b6d      	ldr	r3, [pc, #436]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800753a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800753e:	d106      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007546:	d102      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007548:	4b6a      	ldr	r3, [pc, #424]	@ (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800754a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800754c:	e002      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007552:	e122      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007554:	e121      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800755a:	e11e      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800755c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007560:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007564:	430b      	orrs	r3, r1
 8007566:	d133      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007568:	4b5f      	ldr	r3, [pc, #380]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800756a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800756c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007570:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007574:	2b00      	cmp	r3, #0
 8007576:	d004      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800757e:	d012      	beq.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007580:	e023      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007582:	4b59      	ldr	r3, [pc, #356]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800758a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800758e:	d107      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007594:	4618      	mov	r0, r3
 8007596:	f000 fbc7 	bl	8007d28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800759e:	e0fc      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a4:	e0f9      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075a6:	4b50      	ldr	r3, [pc, #320]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075b2:	d107      	bne.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075b4:	f107 0318 	add.w	r3, r7, #24
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 f90d 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075c2:	e0ea      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075c4:	2300      	movs	r3, #0
 80075c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c8:	e0e7      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ce:	e0e4      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80075d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075d4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80075d8:	430b      	orrs	r3, r1
 80075da:	f040 808d 	bne.w	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80075de:	4b42      	ldr	r3, [pc, #264]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80075e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80075e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075ee:	d06b      	beq.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80075f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075f6:	d874      	bhi.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80075f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075fe:	d056      	beq.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007606:	d86c      	bhi.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800760e:	d03b      	beq.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007612:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007616:	d864      	bhi.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800761e:	d021      	beq.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007626:	d85c      	bhi.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800762e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007634:	d004      	beq.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007636:	e054      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007638:	f000 f8b8 	bl	80077ac <HAL_RCCEx_GetD3PCLK1Freq>
 800763c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800763e:	e0ac      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007640:	4b29      	ldr	r3, [pc, #164]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800764c:	d107      	bne.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800764e:	f107 0318 	add.w	r3, r7, #24
 8007652:	4618      	mov	r0, r3
 8007654:	f000 f8c0 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800765c:	e09d      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007662:	e09a      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007664:	4b20      	ldr	r3, [pc, #128]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800766c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007670:	d107      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007672:	f107 030c 	add.w	r3, r7, #12
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fa02 	bl	8007a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007680:	e08b      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007686:	e088      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007688:	4b17      	ldr	r3, [pc, #92]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b04      	cmp	r3, #4
 8007692:	d109      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007694:	4b14      	ldr	r3, [pc, #80]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	08db      	lsrs	r3, r3, #3
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	4a13      	ldr	r2, [pc, #76]	@ (80076ec <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80076a0:	fa22 f303 	lsr.w	r3, r2, r3
 80076a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076a6:	e078      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076a8:	2300      	movs	r3, #0
 80076aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ac:	e075      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80076ae:	4b0e      	ldr	r3, [pc, #56]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076ba:	d102      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80076bc:	4b0c      	ldr	r3, [pc, #48]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80076be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076c0:	e06b      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c6:	e068      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076c8:	4b07      	ldr	r3, [pc, #28]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076d4:	d102      	bne.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80076d6:	4b07      	ldr	r3, [pc, #28]	@ (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80076d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076da:	e05e      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e0:	e05b      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e6:	e058      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076e8:	58024400 	.word	0x58024400
 80076ec:	03d09000 	.word	0x03d09000
 80076f0:	003d0900 	.word	0x003d0900
 80076f4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80076f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076fc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007700:	430b      	orrs	r3, r1
 8007702:	d148      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007704:	4b27      	ldr	r3, [pc, #156]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007708:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800770c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800770e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007710:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007714:	d02a      	beq.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800771c:	d838      	bhi.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800771e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800772a:	d00d      	beq.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800772c:	e030      	b.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800772e:	4b1d      	ldr	r3, [pc, #116]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007736:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800773a:	d102      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800773c:	4b1a      	ldr	r3, [pc, #104]	@ (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800773e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007740:	e02b      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007746:	e028      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007748:	4b16      	ldr	r3, [pc, #88]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007750:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007754:	d107      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800775a:	4618      	mov	r0, r3
 800775c:	f000 fae4 	bl	8007d28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007764:	e019      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800776a:	e016      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800776c:	4b0d      	ldr	r3, [pc, #52]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007774:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007778:	d107      	bne.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800777a:	f107 0318 	add.w	r3, r7, #24
 800777e:	4618      	mov	r0, r3
 8007780:	f000 f82a 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007788:	e007      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800778e:	e004      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007794:	e001      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800779a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800779c:	4618      	mov	r0, r3
 800779e:	3740      	adds	r7, #64	@ 0x40
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	58024400 	.word	0x58024400
 80077a8:	017d7840 	.word	0x017d7840

080077ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80077b0:	f7fe f816 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 80077b4:	4602      	mov	r2, r0
 80077b6:	4b06      	ldr	r3, [pc, #24]	@ (80077d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	091b      	lsrs	r3, r3, #4
 80077bc:	f003 0307 	and.w	r3, r3, #7
 80077c0:	4904      	ldr	r1, [pc, #16]	@ (80077d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80077c2:	5ccb      	ldrb	r3, [r1, r3]
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	58024400 	.word	0x58024400
 80077d4:	0801154c 	.word	0x0801154c

080077d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80077d8:	b480      	push	{r7}
 80077da:	b089      	sub	sp, #36	@ 0x24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077e0:	4ba1      	ldr	r3, [pc, #644]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80077ea:	4b9f      	ldr	r3, [pc, #636]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ee:	0b1b      	lsrs	r3, r3, #12
 80077f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077f6:	4b9c      	ldr	r3, [pc, #624]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fa:	091b      	lsrs	r3, r3, #4
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007802:	4b99      	ldr	r3, [pc, #612]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007806:	08db      	lsrs	r3, r3, #3
 8007808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	fb02 f303 	mul.w	r3, r2, r3
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 8111 	beq.w	8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	2b02      	cmp	r3, #2
 800782a:	f000 8083 	beq.w	8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b02      	cmp	r3, #2
 8007832:	f200 80a1 	bhi.w	8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d056      	beq.n	80078f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007842:	e099      	b.n	8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007844:	4b88      	ldr	r3, [pc, #544]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b00      	cmp	r3, #0
 800784e:	d02d      	beq.n	80078ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007850:	4b85      	ldr	r3, [pc, #532]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	08db      	lsrs	r3, r3, #3
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	4a84      	ldr	r2, [pc, #528]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800785c:	fa22 f303 	lsr.w	r3, r2, r3
 8007860:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	ee07 3a90 	vmov	s15, r3
 8007868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800787a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800787c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788a:	ed97 6a03 	vldr	s12, [r7, #12]
 800788e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800789a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800789e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80078aa:	e087      	b.n	80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80078ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078be:	4b6a      	ldr	r3, [pc, #424]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80078d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ee:	e065      	b.n	80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007902:	4b59      	ldr	r3, [pc, #356]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007912:	ed97 6a03 	vldr	s12, [r7, #12]
 8007916:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800791a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800792a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007932:	e043      	b.n	80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007946:	4b48      	ldr	r3, [pc, #288]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007956:	ed97 6a03 	vldr	s12, [r7, #12]
 800795a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800795e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800796a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007976:	e021      	b.n	80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007982:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798a:	4b37      	ldr	r3, [pc, #220]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800799a:	ed97 6a03 	vldr	s12, [r7, #12]
 800799e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80079bc:	4b2a      	ldr	r3, [pc, #168]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c0:	0a5b      	lsrs	r3, r3, #9
 80079c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e2:	ee17 2a90 	vmov	r2, s15
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80079ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ee:	0c1b      	lsrs	r3, r3, #16
 80079f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079f4:	ee07 3a90 	vmov	s15, r3
 80079f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a04:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a10:	ee17 2a90 	vmov	r2, s15
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007a18:	4b13      	ldr	r3, [pc, #76]	@ (8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1c:	0e1b      	lsrs	r3, r3, #24
 8007a1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a3e:	ee17 2a90 	vmov	r2, s15
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a46:	e008      	b.n	8007a5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	609a      	str	r2, [r3, #8]
}
 8007a5a:	bf00      	nop
 8007a5c:	3724      	adds	r7, #36	@ 0x24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	58024400 	.word	0x58024400
 8007a6c:	03d09000 	.word	0x03d09000
 8007a70:	46000000 	.word	0x46000000
 8007a74:	4c742400 	.word	0x4c742400
 8007a78:	4a742400 	.word	0x4a742400
 8007a7c:	4bbebc20 	.word	0x4bbebc20

08007a80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b089      	sub	sp, #36	@ 0x24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a88:	4ba1      	ldr	r3, [pc, #644]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8c:	f003 0303 	and.w	r3, r3, #3
 8007a90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a92:	4b9f      	ldr	r3, [pc, #636]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a96:	0d1b      	lsrs	r3, r3, #20
 8007a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a9e:	4b9c      	ldr	r3, [pc, #624]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa2:	0a1b      	lsrs	r3, r3, #8
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007aaa:	4b99      	ldr	r3, [pc, #612]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aae:	08db      	lsrs	r3, r3, #3
 8007ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	fb02 f303 	mul.w	r3, r2, r3
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 8111 	beq.w	8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	f000 8083 	beq.w	8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	f200 80a1 	bhi.w	8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d056      	beq.n	8007b98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007aea:	e099      	b.n	8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aec:	4b88      	ldr	r3, [pc, #544]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0320 	and.w	r3, r3, #32
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d02d      	beq.n	8007b54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007af8:	4b85      	ldr	r3, [pc, #532]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	08db      	lsrs	r3, r3, #3
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	4a84      	ldr	r2, [pc, #528]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007b04:	fa22 f303 	lsr.w	r3, r2, r3
 8007b08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	ee07 3a90 	vmov	s15, r3
 8007b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	ee07 3a90 	vmov	s15, r3
 8007b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b22:	4b7b      	ldr	r3, [pc, #492]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b52:	e087      	b.n	8007c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007d1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b66:	4b6a      	ldr	r3, [pc, #424]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6e:	ee07 3a90 	vmov	s15, r3
 8007b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b96:	e065      	b.n	8007c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007baa:	4b59      	ldr	r3, [pc, #356]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb2:	ee07 3a90 	vmov	s15, r3
 8007bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bda:	e043      	b.n	8007c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bee:	4b48      	ldr	r3, [pc, #288]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf6:	ee07 3a90 	vmov	s15, r3
 8007bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c1e:	e021      	b.n	8007c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c32:	4b37      	ldr	r3, [pc, #220]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c3a:	ee07 3a90 	vmov	s15, r3
 8007c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c64:	4b2a      	ldr	r3, [pc, #168]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c68:	0a5b      	lsrs	r3, r3, #9
 8007c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c8a:	ee17 2a90 	vmov	r2, s15
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c92:	4b1f      	ldr	r3, [pc, #124]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c96:	0c1b      	lsrs	r3, r3, #16
 8007c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c9c:	ee07 3a90 	vmov	s15, r3
 8007ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cb8:	ee17 2a90 	vmov	r2, s15
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007cc0:	4b13      	ldr	r3, [pc, #76]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc4:	0e1b      	lsrs	r3, r3, #24
 8007cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ce6:	ee17 2a90 	vmov	r2, s15
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007cee:	e008      	b.n	8007d02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	609a      	str	r2, [r3, #8]
}
 8007d02:	bf00      	nop
 8007d04:	3724      	adds	r7, #36	@ 0x24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	58024400 	.word	0x58024400
 8007d14:	03d09000 	.word	0x03d09000
 8007d18:	46000000 	.word	0x46000000
 8007d1c:	4c742400 	.word	0x4c742400
 8007d20:	4a742400 	.word	0x4a742400
 8007d24:	4bbebc20 	.word	0x4bbebc20

08007d28 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b089      	sub	sp, #36	@ 0x24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d30:	4ba0      	ldr	r3, [pc, #640]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d34:	f003 0303 	and.w	r3, r3, #3
 8007d38:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007d3a:	4b9e      	ldr	r3, [pc, #632]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3e:	091b      	lsrs	r3, r3, #4
 8007d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d44:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007d46:	4b9b      	ldr	r3, [pc, #620]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007d50:	4b98      	ldr	r3, [pc, #608]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d54:	08db      	lsrs	r3, r3, #3
 8007d56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	fb02 f303 	mul.w	r3, r2, r3
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d68:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 8111 	beq.w	8007f96 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	f000 8083 	beq.w	8007e82 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	f200 80a1 	bhi.w	8007ec6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d056      	beq.n	8007e3e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007d90:	e099      	b.n	8007ec6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d92:	4b88      	ldr	r3, [pc, #544]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d02d      	beq.n	8007dfa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d9e:	4b85      	ldr	r3, [pc, #532]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	08db      	lsrs	r3, r3, #3
 8007da4:	f003 0303 	and.w	r3, r3, #3
 8007da8:	4a83      	ldr	r2, [pc, #524]	@ (8007fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007daa:	fa22 f303 	lsr.w	r3, r2, r3
 8007dae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc8:	4b7a      	ldr	r3, [pc, #488]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd0:	ee07 3a90 	vmov	s15, r3
 8007dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ddc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007fbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007df8:	e087      	b.n	8007f0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e04:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e0c:	4b69      	ldr	r3, [pc, #420]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e14:	ee07 3a90 	vmov	s15, r3
 8007e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e20:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007fbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e3c:	e065      	b.n	8007f0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e48:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e50:	4b58      	ldr	r3, [pc, #352]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e58:	ee07 3a90 	vmov	s15, r3
 8007e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e60:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e64:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007fbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e80:	e043      	b.n	8007f0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e94:	4b47      	ldr	r3, [pc, #284]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9c:	ee07 3a90 	vmov	s15, r3
 8007ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ea4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ea8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007fbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ec4:	e021      	b.n	8007f0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	ee07 3a90 	vmov	s15, r3
 8007ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed8:	4b36      	ldr	r3, [pc, #216]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee0:	ee07 3a90 	vmov	s15, r3
 8007ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007fbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f08:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0e:	0a5b      	lsrs	r3, r3, #9
 8007f10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f14:	ee07 3a90 	vmov	s15, r3
 8007f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f24:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f30:	ee17 2a90 	vmov	r2, s15
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007f38:	4b1e      	ldr	r3, [pc, #120]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f3c:	0c1b      	lsrs	r3, r3, #16
 8007f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f5e:	ee17 2a90 	vmov	r2, s15
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007f66:	4b13      	ldr	r3, [pc, #76]	@ (8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f6a:	0e1b      	lsrs	r3, r3, #24
 8007f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f70:	ee07 3a90 	vmov	s15, r3
 8007f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f8c:	ee17 2a90 	vmov	r2, s15
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f94:	e008      	b.n	8007fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	609a      	str	r2, [r3, #8]
}
 8007fa8:	bf00      	nop
 8007faa:	3724      	adds	r7, #36	@ 0x24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	58024400 	.word	0x58024400
 8007fb8:	03d09000 	.word	0x03d09000
 8007fbc:	46000000 	.word	0x46000000
 8007fc0:	4c742400 	.word	0x4c742400
 8007fc4:	4a742400 	.word	0x4a742400
 8007fc8:	4bbebc20 	.word	0x4bbebc20

08007fcc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fda:	4b53      	ldr	r3, [pc, #332]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d101      	bne.n	8007fea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e099      	b.n	800811e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fea:	4b4f      	ldr	r3, [pc, #316]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a4e      	ldr	r2, [pc, #312]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 8007ff0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff6:	f7f9 fb19 	bl	800162c <HAL_GetTick>
 8007ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ffc:	e008      	b.n	8008010 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ffe:	f7f9 fb15 	bl	800162c <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d901      	bls.n	8008010 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e086      	b.n	800811e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008010:	4b45      	ldr	r3, [pc, #276]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1f0      	bne.n	8007ffe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800801c:	4b42      	ldr	r3, [pc, #264]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 800801e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008020:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	031b      	lsls	r3, r3, #12
 800802a:	493f      	ldr	r1, [pc, #252]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 800802c:	4313      	orrs	r3, r2
 800802e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	3b01      	subs	r3, #1
 8008036:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	3b01      	subs	r3, #1
 8008040:	025b      	lsls	r3, r3, #9
 8008042:	b29b      	uxth	r3, r3
 8008044:	431a      	orrs	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	3b01      	subs	r3, #1
 800804c:	041b      	lsls	r3, r3, #16
 800804e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008052:	431a      	orrs	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	3b01      	subs	r3, #1
 800805a:	061b      	lsls	r3, r3, #24
 800805c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008060:	4931      	ldr	r1, [pc, #196]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 8008062:	4313      	orrs	r3, r2
 8008064:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008066:	4b30      	ldr	r3, [pc, #192]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 8008068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	492d      	ldr	r1, [pc, #180]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 8008074:	4313      	orrs	r3, r2
 8008076:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008078:	4b2b      	ldr	r3, [pc, #172]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 800807a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807c:	f023 0220 	bic.w	r2, r3, #32
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	4928      	ldr	r1, [pc, #160]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 8008086:	4313      	orrs	r3, r2
 8008088:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800808a:	4b27      	ldr	r3, [pc, #156]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 800808c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808e:	4a26      	ldr	r2, [pc, #152]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 8008090:	f023 0310 	bic.w	r3, r3, #16
 8008094:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008096:	4b24      	ldr	r3, [pc, #144]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 8008098:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800809a:	4b24      	ldr	r3, [pc, #144]	@ (800812c <RCCEx_PLL2_Config+0x160>)
 800809c:	4013      	ands	r3, r2
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	69d2      	ldr	r2, [r2, #28]
 80080a2:	00d2      	lsls	r2, r2, #3
 80080a4:	4920      	ldr	r1, [pc, #128]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080aa:	4b1f      	ldr	r3, [pc, #124]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 80080ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 80080b0:	f043 0310 	orr.w	r3, r3, #16
 80080b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d106      	bne.n	80080ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 80080be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c0:	4a19      	ldr	r2, [pc, #100]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 80080c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080c8:	e00f      	b.n	80080ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d106      	bne.n	80080de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080d0:	4b15      	ldr	r3, [pc, #84]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 80080d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d4:	4a14      	ldr	r2, [pc, #80]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 80080d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080dc:	e005      	b.n	80080ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080de:	4b12      	ldr	r3, [pc, #72]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 80080e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e2:	4a11      	ldr	r2, [pc, #68]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 80080e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a0e      	ldr	r2, [pc, #56]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 80080f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080f6:	f7f9 fa99 	bl	800162c <HAL_GetTick>
 80080fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080fc:	e008      	b.n	8008110 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080fe:	f7f9 fa95 	bl	800162c <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	2b02      	cmp	r3, #2
 800810a:	d901      	bls.n	8008110 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e006      	b.n	800811e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008110:	4b05      	ldr	r3, [pc, #20]	@ (8008128 <RCCEx_PLL2_Config+0x15c>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d0f0      	beq.n	80080fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	58024400 	.word	0x58024400
 800812c:	ffff0007 	.word	0xffff0007

08008130 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800813e:	4b53      	ldr	r3, [pc, #332]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	2b03      	cmp	r3, #3
 8008148:	d101      	bne.n	800814e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e099      	b.n	8008282 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800814e:	4b4f      	ldr	r3, [pc, #316]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a4e      	ldr	r2, [pc, #312]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800815a:	f7f9 fa67 	bl	800162c <HAL_GetTick>
 800815e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008160:	e008      	b.n	8008174 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008162:	f7f9 fa63 	bl	800162c <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d901      	bls.n	8008174 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e086      	b.n	8008282 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008174:	4b45      	ldr	r3, [pc, #276]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1f0      	bne.n	8008162 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008180:	4b42      	ldr	r3, [pc, #264]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008184:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	051b      	lsls	r3, r3, #20
 800818e:	493f      	ldr	r1, [pc, #252]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008190:	4313      	orrs	r3, r2
 8008192:	628b      	str	r3, [r1, #40]	@ 0x28
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	3b01      	subs	r3, #1
 800819a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	025b      	lsls	r3, r3, #9
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	041b      	lsls	r3, r3, #16
 80081b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081b6:	431a      	orrs	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	3b01      	subs	r3, #1
 80081be:	061b      	lsls	r3, r3, #24
 80081c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081c4:	4931      	ldr	r1, [pc, #196]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081ca:	4b30      	ldr	r3, [pc, #192]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 80081cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	492d      	ldr	r1, [pc, #180]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081dc:	4b2b      	ldr	r3, [pc, #172]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 80081de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	4928      	ldr	r1, [pc, #160]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081ee:	4b27      	ldr	r3, [pc, #156]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f2:	4a26      	ldr	r2, [pc, #152]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 80081f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081fa:	4b24      	ldr	r3, [pc, #144]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 80081fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081fe:	4b24      	ldr	r3, [pc, #144]	@ (8008290 <RCCEx_PLL3_Config+0x160>)
 8008200:	4013      	ands	r3, r2
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	69d2      	ldr	r2, [r2, #28]
 8008206:	00d2      	lsls	r2, r2, #3
 8008208:	4920      	ldr	r1, [pc, #128]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 800820a:	4313      	orrs	r3, r2
 800820c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800820e:	4b1f      	ldr	r3, [pc, #124]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008212:	4a1e      	ldr	r2, [pc, #120]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008218:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d106      	bne.n	800822e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008220:	4b1a      	ldr	r3, [pc, #104]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008224:	4a19      	ldr	r2, [pc, #100]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008226:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800822a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800822c:	e00f      	b.n	800824e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d106      	bne.n	8008242 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008234:	4b15      	ldr	r3, [pc, #84]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008238:	4a14      	ldr	r2, [pc, #80]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 800823a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800823e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008240:	e005      	b.n	800824e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008242:	4b12      	ldr	r3, [pc, #72]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008246:	4a11      	ldr	r2, [pc, #68]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008248:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800824c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800824e:	4b0f      	ldr	r3, [pc, #60]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a0e      	ldr	r2, [pc, #56]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800825a:	f7f9 f9e7 	bl	800162c <HAL_GetTick>
 800825e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008260:	e008      	b.n	8008274 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008262:	f7f9 f9e3 	bl	800162c <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b02      	cmp	r3, #2
 800826e:	d901      	bls.n	8008274 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e006      	b.n	8008282 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008274:	4b05      	ldr	r3, [pc, #20]	@ (800828c <RCCEx_PLL3_Config+0x15c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0f0      	beq.n	8008262 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	58024400 	.word	0x58024400
 8008290:	ffff0007 	.word	0xffff0007

08008294 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08a      	sub	sp, #40	@ 0x28
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e075      	b.n	8008392 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d105      	bne.n	80082be <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7f8 fdbd 	bl	8000e38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2204      	movs	r2, #4
 80082c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f868 	bl	800839c <HAL_SD_InitCard>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e05d      	b.n	8008392 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80082d6:	f107 0308 	add.w	r3, r7, #8
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 ff77 	bl	80091d0 <HAL_SD_GetCardStatus>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e052      	b.n	8008392 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80082ec:	7e3b      	ldrb	r3, [r7, #24]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80082f2:	7e7b      	ldrb	r3, [r7, #25]
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d10a      	bne.n	8008316 <HAL_SD_Init+0x82>
 8008300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <HAL_SD_Init+0x78>
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d004      	beq.n	8008316 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008312:	659a      	str	r2, [r3, #88]	@ 0x58
 8008314:	e00b      	b.n	800832e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831a:	2b01      	cmp	r3, #1
 800831c:	d104      	bne.n	8008328 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008324:	659a      	str	r2, [r3, #88]	@ 0x58
 8008326:	e002      	b.n	800832e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 f835 	bl	80093a4 <HAL_SD_ConfigWideBusOperation>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e026      	b.n	8008392 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008344:	f7f9 f972 	bl	800162c <HAL_GetTick>
 8008348:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800834a:	e011      	b.n	8008370 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800834c:	f7f9 f96e 	bl	800162c <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800835a:	d109      	bne.n	8008370 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008362:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e010      	b.n	8008392 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 f929 	bl	80095c8 <HAL_SD_GetCardState>
 8008376:	4603      	mov	r3, r0
 8008378:	2b04      	cmp	r3, #4
 800837a:	d1e7      	bne.n	800834c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3728      	adds	r7, #40	@ 0x28
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
	...

0800839c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800839c:	b590      	push	{r4, r7, lr}
 800839e:	b08d      	sub	sp, #52	@ 0x34
 80083a0:	af02      	add	r7, sp, #8
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80083a8:	2300      	movs	r3, #0
 80083aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80083ac:	2300      	movs	r3, #0
 80083ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80083b4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80083b8:	f04f 0100 	mov.w	r1, #0
 80083bc:	f7fe fc76 	bl	8006cac <HAL_RCCEx_GetPeriphCLKFreq>
 80083c0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80083c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d109      	bne.n	80083dc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80083d6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e070      	b.n	80084be <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80083dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083de:	0a1b      	lsrs	r3, r3, #8
 80083e0:	4a39      	ldr	r2, [pc, #228]	@ (80084c8 <HAL_SD_InitCard+0x12c>)
 80083e2:	fba2 2303 	umull	r2, r3, r2, r3
 80083e6:	091b      	lsrs	r3, r3, #4
 80083e8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681c      	ldr	r4, [r3, #0]
 80083ee:	466a      	mov	r2, sp
 80083f0:	f107 0318 	add.w	r3, r7, #24
 80083f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80083f8:	e882 0003 	stmia.w	r2, {r0, r1}
 80083fc:	f107 030c 	add.w	r3, r7, #12
 8008400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008402:	4620      	mov	r0, r4
 8008404:	f003 fe2a 	bl	800c05c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4618      	mov	r0, r3
 800840e:	f003 fe6d 	bl	800c0ec <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d005      	beq.n	8008424 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800841e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008426:	2b00      	cmp	r3, #0
 8008428:	d007      	beq.n	800843a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800842a:	4a28      	ldr	r2, [pc, #160]	@ (80084cc <HAL_SD_InitCard+0x130>)
 800842c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008432:	3301      	adds	r3, #1
 8008434:	4618      	mov	r0, r3
 8008436:	f7f9 f905 	bl	8001644 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 f9b2 	bl	80097a4 <SD_PowerON>
 8008440:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e02e      	b.n	80084be <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f8d1 	bl	8009608 <SD_InitCard>
 8008466:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00b      	beq.n	8008486 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	431a      	orrs	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e01b      	b.n	80084be <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800848e:	4618      	mov	r0, r3
 8008490:	f003 fec2 	bl	800c218 <SDMMC_CmdBlockLength>
 8008494:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00f      	beq.n	80084bc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0b      	ldr	r2, [pc, #44]	@ (80084d0 <HAL_SD_InitCard+0x134>)
 80084a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e000      	b.n	80084be <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	372c      	adds	r7, #44	@ 0x2c
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd90      	pop	{r4, r7, pc}
 80084c6:	bf00      	nop
 80084c8:	014f8b59 	.word	0x014f8b59
 80084cc:	00012110 	.word	0x00012110
 80084d0:	1fe00fff 	.word	0x1fe00fff

080084d4 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b092      	sub	sp, #72	@ 0x48
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084e2:	f7f9 f8a3 	bl	800162c <HAL_GetTick>
 80084e6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d107      	bne.n	8008506 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e167      	b.n	80087d6 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b01      	cmp	r3, #1
 8008510:	f040 815a 	bne.w	80087c8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800851a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	441a      	add	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008524:	429a      	cmp	r2, r3
 8008526:	d907      	bls.n	8008538 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800852c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e14e      	b.n	80087d6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2203      	movs	r2, #3
 800853c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2200      	movs	r2, #0
 8008546:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854c:	2b01      	cmp	r3, #1
 800854e:	d002      	beq.n	8008556 <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 8008550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008552:	025b      	lsls	r3, r3, #9
 8008554:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800855a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	025b      	lsls	r3, r3, #9
 8008560:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008562:	2390      	movs	r3, #144	@ 0x90
 8008564:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008566:	2302      	movs	r3, #2
 8008568:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800856a:	2300      	movs	r3, #0
 800856c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800856e:	2300      	movs	r3, #0
 8008570:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f107 0214 	add.w	r2, r7, #20
 800857a:	4611      	mov	r1, r2
 800857c:	4618      	mov	r0, r3
 800857e:	f003 fe1f 	bl	800c1c0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008590:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d90a      	bls.n	80085ae <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2202      	movs	r2, #2
 800859c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80085a4:	4618      	mov	r0, r3
 80085a6:	f003 fe7d 	bl	800c2a4 <SDMMC_CmdReadMultiBlock>
 80085aa:	6478      	str	r0, [r7, #68]	@ 0x44
 80085ac:	e009      	b.n	80085c2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80085ba:	4618      	mov	r0, r3
 80085bc:	f003 fe4f 	bl	800c25e <SDMMC_CmdReadSingleBlock>
 80085c0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80085c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d012      	beq.n	80085ee <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a84      	ldr	r2, [pc, #528]	@ (80087e0 <HAL_SD_ReadBlocks+0x30c>)
 80085ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085d6:	431a      	orrs	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e0f3      	b.n	80087d6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80085f2:	e058      	b.n	80086a6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d033      	beq.n	800866a <HAL_SD_ReadBlocks+0x196>
 8008602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008604:	2b1f      	cmp	r3, #31
 8008606:	d930      	bls.n	800866a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8008608:	2300      	movs	r3, #0
 800860a:	643b      	str	r3, [r7, #64]	@ 0x40
 800860c:	e027      	b.n	800865e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4618      	mov	r0, r3
 8008614:	f003 fd4c 	bl	800c0b0 <SDMMC_ReadFIFO>
 8008618:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800861a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861c:	b2da      	uxtb	r2, r3
 800861e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008620:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008624:	3301      	adds	r3, #1
 8008626:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862a:	0a1b      	lsrs	r3, r3, #8
 800862c:	b2da      	uxtb	r2, r3
 800862e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008630:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008634:	3301      	adds	r3, #1
 8008636:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863a:	0c1b      	lsrs	r3, r3, #16
 800863c:	b2da      	uxtb	r2, r3
 800863e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008640:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008644:	3301      	adds	r3, #1
 8008646:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864a:	0e1b      	lsrs	r3, r3, #24
 800864c:	b2da      	uxtb	r2, r3
 800864e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008650:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008654:	3301      	adds	r3, #1
 8008656:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8008658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800865a:	3301      	adds	r3, #1
 800865c:	643b      	str	r3, [r7, #64]	@ 0x40
 800865e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008660:	2b07      	cmp	r3, #7
 8008662:	d9d4      	bls.n	800860e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 8008664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008666:	3b20      	subs	r3, #32
 8008668:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800866a:	f7f8 ffdf 	bl	800162c <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008676:	429a      	cmp	r2, r3
 8008678:	d902      	bls.n	8008680 <HAL_SD_ReadBlocks+0x1ac>
 800867a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800867c:	2b00      	cmp	r3, #0
 800867e:	d112      	bne.n	80086a6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a56      	ldr	r2, [pc, #344]	@ (80087e0 <HAL_SD_ReadBlocks+0x30c>)
 8008686:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800868c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e097      	b.n	80087d6 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ac:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d09f      	beq.n	80085f4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086c2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d022      	beq.n	8008718 <HAL_SD_ReadBlocks+0x244>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d91f      	bls.n	8008718 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d01b      	beq.n	8008718 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f003 fe47 	bl	800c378 <SDMMC_CmdStopTransfer>
 80086ea:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80086ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d012      	beq.n	8008718 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a3a      	ldr	r2, [pc, #232]	@ (80087e0 <HAL_SD_ReadBlocks+0x30c>)
 80086f8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008700:	431a      	orrs	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e05e      	b.n	80087d6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800871e:	f003 0308 	and.w	r3, r3, #8
 8008722:	2b00      	cmp	r3, #0
 8008724:	d012      	beq.n	800874c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a2d      	ldr	r2, [pc, #180]	@ (80087e0 <HAL_SD_ReadBlocks+0x30c>)
 800872c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008732:	f043 0208 	orr.w	r2, r3, #8
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e044      	b.n	80087d6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d012      	beq.n	8008780 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a20      	ldr	r2, [pc, #128]	@ (80087e0 <HAL_SD_ReadBlocks+0x30c>)
 8008760:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008766:	f043 0202 	orr.w	r2, r3, #2
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e02a      	b.n	80087d6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008786:	f003 0320 	and.w	r3, r3, #32
 800878a:	2b00      	cmp	r3, #0
 800878c:	d012      	beq.n	80087b4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a13      	ldr	r2, [pc, #76]	@ (80087e0 <HAL_SD_ReadBlocks+0x30c>)
 8008794:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800879a:	f043 0220 	orr.w	r2, r3, #32
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e010      	b.n	80087d6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a0a      	ldr	r2, [pc, #40]	@ (80087e4 <HAL_SD_ReadBlocks+0x310>)
 80087ba:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	e006      	b.n	80087d6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087cc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
  }
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3748      	adds	r7, #72	@ 0x48
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	1fe00fff 	.word	0x1fe00fff
 80087e4:	18000f3a 	.word	0x18000f3a

080087e8 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b092      	sub	sp, #72	@ 0x48
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80087f6:	f7f8 ff19 	bl	800162c <HAL_GetTick>
 80087fa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d107      	bne.n	800881a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800880e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e16b      	b.n	8008af2 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b01      	cmp	r3, #1
 8008824:	f040 815e 	bne.w	8008ae4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800882e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	441a      	add	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008838:	429a      	cmp	r2, r3
 800883a:	d907      	bls.n	800884c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008840:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e152      	b.n	8008af2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2203      	movs	r2, #3
 8008850:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2200      	movs	r2, #0
 800885a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008860:	2b01      	cmp	r3, #1
 8008862:	d002      	beq.n	800886a <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 8008864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008866:	025b      	lsls	r3, r3, #9
 8008868:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800886a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800886e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	025b      	lsls	r3, r3, #9
 8008874:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008876:	2390      	movs	r3, #144	@ 0x90
 8008878:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800887a:	2300      	movs	r3, #0
 800887c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800887e:	2300      	movs	r3, #0
 8008880:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008882:	2300      	movs	r3, #0
 8008884:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f107 0218 	add.w	r2, r7, #24
 800888e:	4611      	mov	r1, r2
 8008890:	4618      	mov	r0, r3
 8008892:	f003 fc95 	bl	800c1c0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68da      	ldr	r2, [r3, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088a4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d90a      	bls.n	80088c2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80088b8:	4618      	mov	r0, r3
 80088ba:	f003 fd39 	bl	800c330 <SDMMC_CmdWriteMultiBlock>
 80088be:	6478      	str	r0, [r7, #68]	@ 0x44
 80088c0:	e009      	b.n	80088d6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2210      	movs	r2, #16
 80088c6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80088ce:	4618      	mov	r0, r3
 80088d0:	f003 fd0b 	bl	800c2ea <SDMMC_CmdWriteSingleBlock>
 80088d4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80088d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d012      	beq.n	8008902 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a86      	ldr	r2, [pc, #536]	@ (8008afc <HAL_SD_WriteBlocks+0x314>)
 80088e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088ea:	431a      	orrs	r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e0f7      	b.n	8008af2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008906:	e05c      	b.n	80089c2 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800890e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d037      	beq.n	8008986 <HAL_SD_WriteBlocks+0x19e>
 8008916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008918:	2b1f      	cmp	r3, #31
 800891a:	d934      	bls.n	8008986 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800891c:	2300      	movs	r3, #0
 800891e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008920:	e02b      	b.n	800897a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892a:	3301      	adds	r3, #1
 800892c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800892e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	021a      	lsls	r2, r3, #8
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800893a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800893c:	3301      	adds	r3, #1
 800893e:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	041a      	lsls	r2, r3, #16
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	4313      	orrs	r3, r2
 800894a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800894c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800894e:	3301      	adds	r3, #1
 8008950:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	061a      	lsls	r2, r3, #24
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	4313      	orrs	r3, r2
 800895c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800895e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008960:	3301      	adds	r3, #1
 8008962:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f107 0214 	add.w	r2, r7, #20
 800896c:	4611      	mov	r1, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f003 fbab 	bl	800c0ca <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8008974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008976:	3301      	adds	r3, #1
 8008978:	643b      	str	r3, [r7, #64]	@ 0x40
 800897a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800897c:	2b07      	cmp	r3, #7
 800897e:	d9d0      	bls.n	8008922 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 8008980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008982:	3b20      	subs	r3, #32
 8008984:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008986:	f7f8 fe51 	bl	800162c <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008992:	429a      	cmp	r2, r3
 8008994:	d902      	bls.n	800899c <HAL_SD_WriteBlocks+0x1b4>
 8008996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008998:	2b00      	cmp	r3, #0
 800899a:	d112      	bne.n	80089c2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a56      	ldr	r2, [pc, #344]	@ (8008afc <HAL_SD_WriteBlocks+0x314>)
 80089a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089aa:	431a      	orrs	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e097      	b.n	8008af2 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089c8:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d09b      	beq.n	8008908 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089de:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d022      	beq.n	8008a34 <HAL_SD_WriteBlocks+0x24c>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d91f      	bls.n	8008a34 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d01b      	beq.n	8008a34 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f003 fcb9 	bl	800c378 <SDMMC_CmdStopTransfer>
 8008a06:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d012      	beq.n	8008a34 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a3a      	ldr	r2, [pc, #232]	@ (8008afc <HAL_SD_WriteBlocks+0x314>)
 8008a14:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e05e      	b.n	8008af2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a3a:	f003 0308 	and.w	r3, r3, #8
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d012      	beq.n	8008a68 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a2d      	ldr	r2, [pc, #180]	@ (8008afc <HAL_SD_WriteBlocks+0x314>)
 8008a48:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a4e:	f043 0208 	orr.w	r2, r3, #8
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e044      	b.n	8008af2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a6e:	f003 0302 	and.w	r3, r3, #2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d012      	beq.n	8008a9c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a20      	ldr	r2, [pc, #128]	@ (8008afc <HAL_SD_WriteBlocks+0x314>)
 8008a7c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a82:	f043 0202 	orr.w	r2, r3, #2
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e02a      	b.n	8008af2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d012      	beq.n	8008ad0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a13      	ldr	r2, [pc, #76]	@ (8008afc <HAL_SD_WriteBlocks+0x314>)
 8008ab0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab6:	f043 0210 	orr.w	r2, r3, #16
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e010      	b.n	8008af2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8008b00 <HAL_SD_WriteBlocks+0x318>)
 8008ad6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	e006      	b.n	8008af2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ae8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
  }
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3748      	adds	r7, #72	@ 0x48
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	1fe00fff 	.word	0x1fe00fff
 8008b00:	18000f3a 	.word	0x18000f3a

08008b04 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b10:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d008      	beq.n	8008b32 <HAL_SD_IRQHandler+0x2e>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f003 0308 	and.w	r3, r3, #8
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d003      	beq.n	8008b32 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f001 f926 	bl	8009d7c <SD_Read_IT>
 8008b30:	e19a      	b.n	8008e68 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 80ac 	beq.w	8008c9a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b4a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	4b59      	ldr	r3, [pc, #356]	@ (8008cbc <HAL_SD_IRQHandler+0x1b8>)
 8008b58:	400b      	ands	r3, r1
 8008b5a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b7a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f003 0308 	and.w	r3, r3, #8
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d038      	beq.n	8008bf8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f003 0302 	and.w	r3, r3, #2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d104      	bne.n	8008b9a <HAL_SD_IRQHandler+0x96>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f003 0320 	and.w	r3, r3, #32
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d011      	beq.n	8008bbe <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f003 fbea 	bl	800c378 <SDMMC_CmdStopTransfer>
 8008ba4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d008      	beq.n	8008bbe <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f95b 	bl	8008e74 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a3f      	ldr	r2, [pc, #252]	@ (8008cc0 <HAL_SD_IRQHandler+0x1bc>)
 8008bc4:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d104      	bne.n	8008be8 <HAL_SD_IRQHandler+0xe4>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f004 f897 	bl	800cd1c <HAL_SD_RxCpltCallback>
 8008bee:	e13b      	b.n	8008e68 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f004 f889 	bl	800cd08 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008bf6:	e137      	b.n	8008e68 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 8132 	beq.w	8008e68 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2200      	movs	r2, #0
 8008c12:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d104      	bne.n	8008c30 <HAL_SD_IRQHandler+0x12c>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f003 0320 	and.w	r3, r3, #32
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d011      	beq.n	8008c54 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f003 fb9f 	bl	800c378 <SDMMC_CmdStopTransfer>
 8008c3a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d008      	beq.n	8008c54 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f910 	bl	8008e74 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f003 0310 	and.w	r3, r3, #16
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d104      	bne.n	8008c76 <HAL_SD_IRQHandler+0x172>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f003 0320 	and.w	r3, r3, #32
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f004 f846 	bl	800cd08 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d105      	bne.n	8008c92 <HAL_SD_IRQHandler+0x18e>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f003 0302 	and.w	r3, r3, #2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 80eb 	beq.w	8008e68 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f004 f842 	bl	800cd1c <HAL_SD_RxCpltCallback>
}
 8008c98:	e0e6      	b.n	8008e68 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00d      	beq.n	8008cc4 <HAL_SD_IRQHandler+0x1c0>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f003 0308 	and.w	r3, r3, #8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d008      	beq.n	8008cc4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f001 f8a8 	bl	8009e08 <SD_Write_IT>
 8008cb8:	e0d6      	b.n	8008e68 <HAL_SD_IRQHandler+0x364>
 8008cba:	bf00      	nop
 8008cbc:	ffff3ec5 	.word	0xffff3ec5
 8008cc0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cca:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 809d 	beq.w	8008e0e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce6:	f043 0202 	orr.w	r2, r3, #2
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cf4:	f003 0308 	and.w	r3, r3, #8
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d00:	f043 0208 	orr.w	r2, r3, #8
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d0e:	f003 0320 	and.w	r3, r3, #32
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d1a:	f043 0220 	orr.w	r2, r3, #32
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d28:	f003 0310 	and.w	r3, r3, #16
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d005      	beq.n	8008d3c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d34:	f043 0210 	orr.w	r2, r3, #16
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a4b      	ldr	r2, [pc, #300]	@ (8008e70 <HAL_SD_IRQHandler+0x36c>)
 8008d42:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008d52:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d62:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d72:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008d82:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f003 faf5 	bl	800c378 <SDMMC_CmdStopTransfer>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d94:	431a      	orrs	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68da      	ldr	r2, [r3, #12]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008da8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008db2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f003 0308 	and.w	r3, r3, #8
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00a      	beq.n	8008dd4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f851 	bl	8008e74 <HAL_SD_ErrorCallback>
}
 8008dd2:	e049      	b.n	8008e68 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d044      	beq.n	8008e68 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d040      	beq.n	8008e68 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008df4:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f834 	bl	8008e74 <HAL_SD_ErrorCallback>
}
 8008e0c:	e02c      	b.n	8008e68 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d025      	beq.n	8008e68 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e24:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10c      	bne.n	8008e4e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f003 0320 	and.w	r3, r3, #32
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f001 f84a 	bl	8009ed8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008e44:	e010      	b.n	8008e68 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 f832 	bl	8009eb0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008e4c:	e00c      	b.n	8008e68 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f003 0320 	and.w	r3, r3, #32
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d003      	beq.n	8008e60 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f001 f833 	bl	8009ec4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8008e5e:	e003      	b.n	8008e68 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 f81b 	bl	8009e9c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008e66:	e7ff      	b.n	8008e68 <HAL_SD_IRQHandler+0x364>
 8008e68:	bf00      	nop
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	18000f3a 	.word	0x18000f3a

08008e74 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e96:	0f9b      	lsrs	r3, r3, #30
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ea2:	0e9b      	lsrs	r3, r3, #26
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	f003 030f 	and.w	r3, r3, #15
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eb4:	0e1b      	lsrs	r3, r3, #24
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	f003 0303 	and.w	r3, r3, #3
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ec6:	0c1b      	lsrs	r3, r3, #16
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ed2:	0a1b      	lsrs	r3, r3, #8
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ee8:	0d1b      	lsrs	r3, r3, #20
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ef4:	0c1b      	lsrs	r3, r3, #16
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	f003 030f 	and.w	r3, r3, #15
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f06:	0bdb      	lsrs	r3, r3, #15
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f18:	0b9b      	lsrs	r3, r3, #14
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f2a:	0b5b      	lsrs	r3, r3, #13
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f3c:	0b1b      	lsrs	r3, r3, #12
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d163      	bne.n	8009020 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f5c:	009a      	lsls	r2, r3, #2
 8008f5e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008f62:	4013      	ands	r3, r2
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008f68:	0f92      	lsrs	r2, r2, #30
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f74:	0edb      	lsrs	r3, r3, #27
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	f003 0307 	and.w	r3, r3, #7
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f86:	0e1b      	lsrs	r3, r3, #24
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f98:	0d5b      	lsrs	r3, r3, #21
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	f003 0307 	and.w	r3, r3, #7
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008faa:	0c9b      	lsrs	r3, r3, #18
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fbc:	0bdb      	lsrs	r3, r3, #15
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	1c5a      	adds	r2, r3, #1
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	7e1b      	ldrb	r3, [r3, #24]
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	f003 0307 	and.w	r3, r3, #7
 8008fde:	3302      	adds	r3, #2
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008fea:	fb03 f202 	mul.w	r2, r3, r2
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	7a1b      	ldrb	r3, [r3, #8]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 030f 	and.w	r3, r3, #15
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	409a      	lsls	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800900c:	0a52      	lsrs	r2, r2, #9
 800900e:	fb03 f202 	mul.w	r2, r3, r2
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800901c:	655a      	str	r2, [r3, #84]	@ 0x54
 800901e:	e031      	b.n	8009084 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009024:	2b01      	cmp	r3, #1
 8009026:	d11d      	bne.n	8009064 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800902c:	041b      	lsls	r3, r3, #16
 800902e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009036:	0c1b      	lsrs	r3, r3, #16
 8009038:	431a      	orrs	r2, r3
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	3301      	adds	r3, #1
 8009044:	029a      	lsls	r2, r3, #10
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009058:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	655a      	str	r2, [r3, #84]	@ 0x54
 8009062:	e00f      	b.n	8009084 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a58      	ldr	r2, [pc, #352]	@ (80091cc <HAL_SD_GetCardCSD+0x344>)
 800906a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009070:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e09d      	b.n	80091c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009088:	0b9b      	lsrs	r3, r3, #14
 800908a:	b2db      	uxtb	r3, r3
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	b2da      	uxtb	r2, r3
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800909a:	09db      	lsrs	r3, r3, #7
 800909c:	b2db      	uxtb	r3, r3
 800909e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090bc:	0fdb      	lsrs	r3, r3, #31
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090c8:	0f5b      	lsrs	r3, r3, #29
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	f003 0303 	and.w	r3, r3, #3
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090da:	0e9b      	lsrs	r3, r3, #26
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090ec:	0d9b      	lsrs	r3, r3, #22
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	f003 030f 	and.w	r3, r3, #15
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090fe:	0d5b      	lsrs	r3, r3, #21
 8009100:	b2db      	uxtb	r3, r3
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	b2da      	uxtb	r2, r3
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800911a:	0c1b      	lsrs	r3, r3, #16
 800911c:	b2db      	uxtb	r3, r3
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	b2da      	uxtb	r2, r3
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800912e:	0bdb      	lsrs	r3, r3, #15
 8009130:	b2db      	uxtb	r3, r3
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	b2da      	uxtb	r2, r3
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009142:	0b9b      	lsrs	r3, r3, #14
 8009144:	b2db      	uxtb	r3, r3
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	b2da      	uxtb	r2, r3
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009156:	0b5b      	lsrs	r3, r3, #13
 8009158:	b2db      	uxtb	r3, r3
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	b2da      	uxtb	r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800916a:	0b1b      	lsrs	r3, r3, #12
 800916c:	b2db      	uxtb	r3, r3
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	b2da      	uxtb	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800917e:	0a9b      	lsrs	r3, r3, #10
 8009180:	b2db      	uxtb	r3, r3
 8009182:	f003 0303 	and.w	r3, r3, #3
 8009186:	b2da      	uxtb	r2, r3
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009192:	0a1b      	lsrs	r3, r3, #8
 8009194:	b2db      	uxtb	r3, r3
 8009196:	f003 0303 	and.w	r3, r3, #3
 800919a:	b2da      	uxtb	r2, r3
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091a6:	085b      	lsrs	r3, r3, #1
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	1fe00fff 	.word	0x1fe00fff

080091d0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b094      	sub	sp, #80	@ 0x50
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d101      	bne.n	80091f0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e0a7      	b.n	8009340 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80091f0:	f107 0308 	add.w	r3, r7, #8
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fb62 	bl	80098c0 <SD_SendSDStatus>
 80091fc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80091fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009200:	2b00      	cmp	r3, #0
 8009202:	d011      	beq.n	8009228 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a4f      	ldr	r2, [pc, #316]	@ (8009348 <HAL_SD_GetCardStatus+0x178>)
 800920a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009212:	431a      	orrs	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009226:	e070      	b.n	800930a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	099b      	lsrs	r3, r3, #6
 800922c:	b2db      	uxtb	r3, r3
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	b2da      	uxtb	r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	095b      	lsrs	r3, r3, #5
 800923c:	b2db      	uxtb	r3, r3
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	b2da      	uxtb	r2, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	0a1b      	lsrs	r3, r3, #8
 800924c:	b29b      	uxth	r3, r3
 800924e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009252:	b29a      	uxth	r2, r3
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	0e1b      	lsrs	r3, r3, #24
 8009258:	b29b      	uxth	r3, r3
 800925a:	4313      	orrs	r3, r2
 800925c:	b29a      	uxth	r2, r3
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	061a      	lsls	r2, r3, #24
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	021b      	lsls	r3, r3, #8
 800926a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800926e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	0a1b      	lsrs	r3, r3, #8
 8009274:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009278:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	0e1b      	lsrs	r3, r3, #24
 800927e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	b2da      	uxtb	r2, r3
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	0a1b      	lsrs	r3, r3, #8
 8009290:	b2da      	uxtb	r2, r3
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	0d1b      	lsrs	r3, r3, #20
 800929a:	b2db      	uxtb	r3, r3
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	0c1b      	lsrs	r3, r3, #16
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	4313      	orrs	r3, r2
 80092bc:	b29a      	uxth	r2, r3
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	0a9b      	lsrs	r3, r3, #10
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	0a1b      	lsrs	r3, r3, #8
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 0303 	and.w	r3, r3, #3
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	091b      	lsrs	r3, r3, #4
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	f003 030f 	and.w	r3, r3, #15
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	f003 030f 	and.w	r3, r3, #15
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	0e1b      	lsrs	r3, r3, #24
 8009304:	b2da      	uxtb	r2, r3
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009312:	4618      	mov	r0, r3
 8009314:	f002 ff80 	bl	800c218 <SDMMC_CmdBlockLength>
 8009318:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800931a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00d      	beq.n	800933c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a08      	ldr	r2, [pc, #32]	@ (8009348 <HAL_SD_GetCardStatus+0x178>)
 8009326:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800932c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800933c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009340:	4618      	mov	r0, r3
 8009342:	3750      	adds	r7, #80	@ 0x50
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	1fe00fff 	.word	0x1fe00fff

0800934c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80093a4:	b590      	push	{r4, r7, lr}
 80093a6:	b08d      	sub	sp, #52	@ 0x34
 80093a8:	af02      	add	r7, sp, #8
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2203      	movs	r2, #3
 80093b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d02e      	beq.n	8009422 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093ca:	d106      	bne.n	80093da <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80093d8:	e029      	b.n	800942e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093e0:	d10a      	bne.n	80093f8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fb64 	bl	8009ab0 <SD_WideBus_Enable>
 80093e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	431a      	orrs	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80093f6:	e01a      	b.n	800942e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10a      	bne.n	8009414 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fba1 	bl	8009b46 <SD_WideBus_Disable>
 8009404:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	431a      	orrs	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	635a      	str	r2, [r3, #52]	@ 0x34
 8009412:	e00c      	b.n	800942e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009418:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	635a      	str	r2, [r3, #52]	@ 0x34
 8009420:	e005      	b.n	800942e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009426:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009432:	2b00      	cmp	r3, #0
 8009434:	d007      	beq.n	8009446 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a5f      	ldr	r2, [pc, #380]	@ (80095b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800943c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009444:	e096      	b.n	8009574 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009446:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800944a:	f04f 0100 	mov.w	r1, #0
 800944e:	f7fd fc2d 	bl	8006cac <HAL_RCCEx_GetPeriphCLKFreq>
 8009452:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 8083 	beq.w	8009562 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	695a      	ldr	r2, [r3, #20]
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	4950      	ldr	r1, [pc, #320]	@ (80095bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800947a:	fba1 1303 	umull	r1, r3, r1, r3
 800947e:	0e1b      	lsrs	r3, r3, #24
 8009480:	429a      	cmp	r2, r3
 8009482:	d303      	bcc.n	800948c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	61bb      	str	r3, [r7, #24]
 800948a:	e05a      	b.n	8009542 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009494:	d103      	bne.n	800949e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	61bb      	str	r3, [r7, #24]
 800949c:	e051      	b.n	8009542 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094a6:	d126      	bne.n	80094f6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10e      	bne.n	80094ce <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	4a43      	ldr	r2, [pc, #268]	@ (80095c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d906      	bls.n	80094c6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	4a40      	ldr	r2, [pc, #256]	@ (80095bc <HAL_SD_ConfigWideBusOperation+0x218>)
 80094bc:	fba2 2303 	umull	r2, r3, r2, r3
 80094c0:	0e5b      	lsrs	r3, r3, #25
 80094c2:	61bb      	str	r3, [r7, #24]
 80094c4:	e03d      	b.n	8009542 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	61bb      	str	r3, [r7, #24]
 80094cc:	e039      	b.n	8009542 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094da:	4a39      	ldr	r2, [pc, #228]	@ (80095c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d906      	bls.n	80094ee <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	4a36      	ldr	r2, [pc, #216]	@ (80095bc <HAL_SD_ConfigWideBusOperation+0x218>)
 80094e4:	fba2 2303 	umull	r2, r3, r2, r3
 80094e8:	0e5b      	lsrs	r3, r3, #25
 80094ea:	61bb      	str	r3, [r7, #24]
 80094ec:	e029      	b.n	8009542 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	61bb      	str	r3, [r7, #24]
 80094f4:	e025      	b.n	8009542 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10e      	bne.n	800951c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	4a30      	ldr	r2, [pc, #192]	@ (80095c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d906      	bls.n	8009514 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	4a2c      	ldr	r2, [pc, #176]	@ (80095bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800950a:	fba2 2303 	umull	r2, r3, r2, r3
 800950e:	0e1b      	lsrs	r3, r3, #24
 8009510:	61bb      	str	r3, [r7, #24]
 8009512:	e016      	b.n	8009542 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	695b      	ldr	r3, [r3, #20]
 8009518:	61bb      	str	r3, [r7, #24]
 800951a:	e012      	b.n	8009542 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	005b      	lsls	r3, r3, #1
 8009522:	69fa      	ldr	r2, [r7, #28]
 8009524:	fbb2 f3f3 	udiv	r3, r2, r3
 8009528:	4a26      	ldr	r2, [pc, #152]	@ (80095c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d906      	bls.n	800953c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	4a22      	ldr	r2, [pc, #136]	@ (80095bc <HAL_SD_ConfigWideBusOperation+0x218>)
 8009532:	fba2 2303 	umull	r2, r3, r2, r3
 8009536:	0e1b      	lsrs	r3, r3, #24
 8009538:	61bb      	str	r3, [r7, #24]
 800953a:	e002      	b.n	8009542 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681c      	ldr	r4, [r3, #0]
 8009546:	466a      	mov	r2, sp
 8009548:	f107 0314 	add.w	r3, r7, #20
 800954c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009550:	e882 0003 	stmia.w	r2, {r0, r1}
 8009554:	f107 0308 	add.w	r3, r7, #8
 8009558:	cb0e      	ldmia	r3, {r1, r2, r3}
 800955a:	4620      	mov	r0, r4
 800955c:	f002 fd7e 	bl	800c05c <SDMMC_Init>
 8009560:	e008      	b.n	8009574 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009566:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800957c:	4618      	mov	r0, r3
 800957e:	f002 fe4b 	bl	800c218 <SDMMC_CmdBlockLength>
 8009582:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00c      	beq.n	80095a4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a0a      	ldr	r2, [pc, #40]	@ (80095b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009590:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	431a      	orrs	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80095ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	372c      	adds	r7, #44	@ 0x2c
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd90      	pop	{r4, r7, pc}
 80095b8:	1fe00fff 	.word	0x1fe00fff
 80095bc:	55e63b89 	.word	0x55e63b89
 80095c0:	02faf080 	.word	0x02faf080
 80095c4:	017d7840 	.word	0x017d7840

080095c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80095d0:	2300      	movs	r3, #0
 80095d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80095d4:	f107 030c 	add.w	r3, r7, #12
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fa40 	bl	8009a60 <SD_SendStatus>
 80095e0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d005      	beq.n	80095f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	431a      	orrs	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	0a5b      	lsrs	r3, r3, #9
 80095f8:	f003 030f 	and.w	r3, r3, #15
 80095fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80095fe:	693b      	ldr	r3, [r7, #16]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b090      	sub	sp, #64	@ 0x40
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009610:	2300      	movs	r3, #0
 8009612:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009614:	f7f8 f80a 	bl	800162c <HAL_GetTick>
 8009618:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4618      	mov	r0, r3
 8009620:	f002 fd75 	bl	800c10e <SDMMC_GetPowerState>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d102      	bne.n	8009630 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800962a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800962e:	e0b5      	b.n	800979c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009634:	2b03      	cmp	r3, #3
 8009636:	d02e      	beq.n	8009696 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4618      	mov	r0, r3
 800963e:	f002 ffc0 	bl	800c5c2 <SDMMC_CmdSendCID>
 8009642:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <SD_InitCard+0x46>
    {
      return errorstate;
 800964a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964c:	e0a6      	b.n	800979c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2100      	movs	r1, #0
 8009654:	4618      	mov	r0, r3
 8009656:	f002 fda0 	bl	800c19a <SDMMC_GetResponse>
 800965a:	4602      	mov	r2, r0
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2104      	movs	r1, #4
 8009666:	4618      	mov	r0, r3
 8009668:	f002 fd97 	bl	800c19a <SDMMC_GetResponse>
 800966c:	4602      	mov	r2, r0
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2108      	movs	r1, #8
 8009678:	4618      	mov	r0, r3
 800967a:	f002 fd8e 	bl	800c19a <SDMMC_GetResponse>
 800967e:	4602      	mov	r2, r0
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	210c      	movs	r1, #12
 800968a:	4618      	mov	r0, r3
 800968c:	f002 fd85 	bl	800c19a <SDMMC_GetResponse>
 8009690:	4602      	mov	r2, r0
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800969a:	2b03      	cmp	r3, #3
 800969c:	d01d      	beq.n	80096da <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800969e:	e019      	b.n	80096d4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f107 020a 	add.w	r2, r7, #10
 80096a8:	4611      	mov	r1, r2
 80096aa:	4618      	mov	r0, r3
 80096ac:	f002 ffc8 	bl	800c640 <SDMMC_CmdSetRelAdd>
 80096b0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80096b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <SD_InitCard+0xb4>
      {
        return errorstate;
 80096b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ba:	e06f      	b.n	800979c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80096bc:	f7f7 ffb6 	bl	800162c <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d902      	bls.n	80096d4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80096ce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80096d2:	e063      	b.n	800979c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80096d4:	897b      	ldrh	r3, [r7, #10]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d0e2      	beq.n	80096a0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d036      	beq.n	8009750 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80096e2:	897b      	ldrh	r3, [r7, #10]
 80096e4:	461a      	mov	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096f2:	041b      	lsls	r3, r3, #16
 80096f4:	4619      	mov	r1, r3
 80096f6:	4610      	mov	r0, r2
 80096f8:	f002 ff82 	bl	800c600 <SDMMC_CmdSendCSD>
 80096fc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80096fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <SD_InitCard+0x100>
    {
      return errorstate;
 8009704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009706:	e049      	b.n	800979c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2100      	movs	r1, #0
 800970e:	4618      	mov	r0, r3
 8009710:	f002 fd43 	bl	800c19a <SDMMC_GetResponse>
 8009714:	4602      	mov	r2, r0
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2104      	movs	r1, #4
 8009720:	4618      	mov	r0, r3
 8009722:	f002 fd3a 	bl	800c19a <SDMMC_GetResponse>
 8009726:	4602      	mov	r2, r0
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2108      	movs	r1, #8
 8009732:	4618      	mov	r0, r3
 8009734:	f002 fd31 	bl	800c19a <SDMMC_GetResponse>
 8009738:	4602      	mov	r2, r0
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	210c      	movs	r1, #12
 8009744:	4618      	mov	r0, r3
 8009746:	f002 fd28 	bl	800c19a <SDMMC_GetResponse>
 800974a:	4602      	mov	r2, r0
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2104      	movs	r1, #4
 8009756:	4618      	mov	r0, r3
 8009758:	f002 fd1f 	bl	800c19a <SDMMC_GetResponse>
 800975c:	4603      	mov	r3, r0
 800975e:	0d1a      	lsrs	r2, r3, #20
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009764:	f107 030c 	add.w	r3, r7, #12
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff fb8c 	bl	8008e88 <HAL_SD_GetCardCSD>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d002      	beq.n	800977c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009776:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800977a:	e00f      	b.n	800979c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009784:	041b      	lsls	r3, r3, #16
 8009786:	4619      	mov	r1, r3
 8009788:	4610      	mov	r0, r2
 800978a:	f002 fe31 	bl	800c3f0 <SDMMC_CmdSelDesel>
 800978e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <SD_InitCard+0x192>
  {
    return errorstate;
 8009796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009798:	e000      	b.n	800979c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3740      	adds	r7, #64	@ 0x40
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097ac:	2300      	movs	r3, #0
 80097ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80097b4:	2300      	movs	r3, #0
 80097b6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4618      	mov	r0, r3
 80097be:	f002 fe3a 	bl	800c436 <SDMMC_CmdGoIdleState>
 80097c2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <SD_PowerON+0x2a>
  {
    return errorstate;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	e072      	b.n	80098b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f002 fe4d 	bl	800c472 <SDMMC_CmdOperCond>
 80097d8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097e0:	d10d      	bne.n	80097fe <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f002 fe22 	bl	800c436 <SDMMC_CmdGoIdleState>
 80097f2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d004      	beq.n	8009804 <SD_PowerON+0x60>
    {
      return errorstate;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	e05a      	b.n	80098b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009808:	2b01      	cmp	r3, #1
 800980a:	d137      	bne.n	800987c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2100      	movs	r1, #0
 8009812:	4618      	mov	r0, r3
 8009814:	f002 fe4d 	bl	800c4b2 <SDMMC_CmdAppCommand>
 8009818:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d02d      	beq.n	800987c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009820:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009824:	e046      	b.n	80098b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2100      	movs	r1, #0
 800982c:	4618      	mov	r0, r3
 800982e:	f002 fe40 	bl	800c4b2 <SDMMC_CmdAppCommand>
 8009832:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <SD_PowerON+0x9a>
    {
      return errorstate;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	e03a      	b.n	80098b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	491e      	ldr	r1, [pc, #120]	@ (80098bc <SD_PowerON+0x118>)
 8009844:	4618      	mov	r0, r3
 8009846:	f002 fe57 	bl	800c4f8 <SDMMC_CmdAppOperCommand>
 800984a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009852:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009856:	e02d      	b.n	80098b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2100      	movs	r1, #0
 800985e:	4618      	mov	r0, r3
 8009860:	f002 fc9b 	bl	800c19a <SDMMC_GetResponse>
 8009864:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	0fdb      	lsrs	r3, r3, #31
 800986a:	2b01      	cmp	r3, #1
 800986c:	d101      	bne.n	8009872 <SD_PowerON+0xce>
 800986e:	2301      	movs	r3, #1
 8009870:	e000      	b.n	8009874 <SD_PowerON+0xd0>
 8009872:	2300      	movs	r3, #0
 8009874:	613b      	str	r3, [r7, #16]

    count++;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	3301      	adds	r3, #1
 800987a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009882:	4293      	cmp	r3, r2
 8009884:	d802      	bhi.n	800988c <SD_PowerON+0xe8>
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d0cc      	beq.n	8009826 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009892:	4293      	cmp	r3, r2
 8009894:	d902      	bls.n	800989c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009896:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800989a:	e00b      	b.n	80098b4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3718      	adds	r7, #24
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	c1100000 	.word	0xc1100000

080098c0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b08c      	sub	sp, #48	@ 0x30
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80098ca:	f7f7 feaf 	bl	800162c <HAL_GetTick>
 80098ce:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2100      	movs	r1, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	f002 fc5d 	bl	800c19a <SDMMC_GetResponse>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098ea:	d102      	bne.n	80098f2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80098ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80098f0:	e0b0      	b.n	8009a54 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2140      	movs	r1, #64	@ 0x40
 80098f8:	4618      	mov	r0, r3
 80098fa:	f002 fc8d 	bl	800c218 <SDMMC_CmdBlockLength>
 80098fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d005      	beq.n	8009912 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	e0a0      	b.n	8009a54 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800991a:	041b      	lsls	r3, r3, #16
 800991c:	4619      	mov	r1, r3
 800991e:	4610      	mov	r0, r2
 8009920:	f002 fdc7 	bl	800c4b2 <SDMMC_CmdAppCommand>
 8009924:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d005      	beq.n	8009938 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	e08d      	b.n	8009a54 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009938:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800993c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800993e:	2340      	movs	r3, #64	@ 0x40
 8009940:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009942:	2360      	movs	r3, #96	@ 0x60
 8009944:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009946:	2302      	movs	r3, #2
 8009948:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800994a:	2300      	movs	r3, #0
 800994c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800994e:	2301      	movs	r3, #1
 8009950:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f107 0208 	add.w	r2, r7, #8
 800995a:	4611      	mov	r1, r2
 800995c:	4618      	mov	r0, r3
 800995e:	f002 fc2f 	bl	800c1c0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4618      	mov	r0, r3
 8009968:	f002 feaf 	bl	800c6ca <SDMMC_CmdStatusRegister>
 800996c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d02b      	beq.n	80099cc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	e069      	b.n	8009a54 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009986:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800998a:	2b00      	cmp	r3, #0
 800998c:	d013      	beq.n	80099b6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800998e:	2300      	movs	r3, #0
 8009990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009992:	e00d      	b.n	80099b0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4618      	mov	r0, r3
 800999a:	f002 fb89 	bl	800c0b0 <SDMMC_ReadFIFO>
 800999e:	4602      	mov	r2, r0
 80099a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a2:	601a      	str	r2, [r3, #0]
        pData++;
 80099a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a6:	3304      	adds	r3, #4
 80099a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80099aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ac:	3301      	adds	r3, #1
 80099ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b2:	2b07      	cmp	r3, #7
 80099b4:	d9ee      	bls.n	8009994 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80099b6:	f7f7 fe39 	bl	800162c <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099c4:	d102      	bne.n	80099cc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80099c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80099ca:	e043      	b.n	8009a54 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099d2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d0d2      	beq.n	8009980 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099e0:	f003 0308 	and.w	r3, r3, #8
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80099e8:	2308      	movs	r3, #8
 80099ea:	e033      	b.n	8009a54 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099f2:	f003 0302 	and.w	r3, r3, #2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80099fa:	2302      	movs	r3, #2
 80099fc:	e02a      	b.n	8009a54 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a04:	f003 0320 	and.w	r3, r3, #32
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d017      	beq.n	8009a3c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009a0c:	2320      	movs	r3, #32
 8009a0e:	e021      	b.n	8009a54 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f002 fb4b 	bl	800c0b0 <SDMMC_ReadFIFO>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1e:	601a      	str	r2, [r3, #0]
    pData++;
 8009a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a22:	3304      	adds	r3, #4
 8009a24:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009a26:	f7f7 fe01 	bl	800162c <HAL_GetTick>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a34:	d102      	bne.n	8009a3c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009a36:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a3a:	e00b      	b.n	8009a54 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1e2      	bne.n	8009a10 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a03      	ldr	r2, [pc, #12]	@ (8009a5c <SD_SendSDStatus+0x19c>)
 8009a50:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3730      	adds	r7, #48	@ 0x30
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	18000f3a 	.word	0x18000f3a

08009a60 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d102      	bne.n	8009a76 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009a70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a74:	e018      	b.n	8009aa8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a7e:	041b      	lsls	r3, r3, #16
 8009a80:	4619      	mov	r1, r3
 8009a82:	4610      	mov	r0, r2
 8009a84:	f002 fdfe 	bl	800c684 <SDMMC_CmdSendStatus>
 8009a88:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	e009      	b.n	8009aa8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f002 fb7d 	bl	800c19a <SDMMC_GetResponse>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60fb      	str	r3, [r7, #12]
 8009abc:	2300      	movs	r3, #0
 8009abe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f002 fb67 	bl	800c19a <SDMMC_GetResponse>
 8009acc:	4603      	mov	r3, r0
 8009ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ad2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ad6:	d102      	bne.n	8009ade <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ad8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009adc:	e02f      	b.n	8009b3e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ade:	f107 030c 	add.w	r3, r7, #12
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f879 	bl	8009bdc <SD_FindSCR>
 8009aea:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	e023      	b.n	8009b3e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d01c      	beq.n	8009b3a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b08:	041b      	lsls	r3, r3, #16
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	f002 fcd0 	bl	800c4b2 <SDMMC_CmdAppCommand>
 8009b12:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	e00f      	b.n	8009b3e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2102      	movs	r1, #2
 8009b24:	4618      	mov	r0, r3
 8009b26:	f002 fd07 	bl	800c538 <SDMMC_CmdBusWidth>
 8009b2a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	e003      	b.n	8009b3e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009b36:	2300      	movs	r3, #0
 8009b38:	e001      	b.n	8009b3e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b3a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b086      	sub	sp, #24
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	2300      	movs	r3, #0
 8009b54:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f002 fb1c 	bl	800c19a <SDMMC_GetResponse>
 8009b62:	4603      	mov	r3, r0
 8009b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b6c:	d102      	bne.n	8009b74 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009b72:	e02f      	b.n	8009bd4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b74:	f107 030c 	add.w	r3, r7, #12
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f82e 	bl	8009bdc <SD_FindSCR>
 8009b80:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	e023      	b.n	8009bd4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d01c      	beq.n	8009bd0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b9e:	041b      	lsls	r3, r3, #16
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	f002 fc85 	bl	800c4b2 <SDMMC_CmdAppCommand>
 8009ba8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	e00f      	b.n	8009bd4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2100      	movs	r1, #0
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f002 fcbc 	bl	800c538 <SDMMC_CmdBusWidth>
 8009bc0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	e003      	b.n	8009bd4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e001      	b.n	8009bd4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bd0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3718      	adds	r7, #24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08e      	sub	sp, #56	@ 0x38
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009be6:	f7f7 fd21 	bl	800162c <HAL_GetTick>
 8009bea:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60bb      	str	r3, [r7, #8]
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2108      	movs	r1, #8
 8009c02:	4618      	mov	r0, r3
 8009c04:	f002 fb08 	bl	800c218 <SDMMC_CmdBlockLength>
 8009c08:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c12:	e0ad      	b.n	8009d70 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c1c:	041b      	lsls	r3, r3, #16
 8009c1e:	4619      	mov	r1, r3
 8009c20:	4610      	mov	r0, r2
 8009c22:	f002 fc46 	bl	800c4b2 <SDMMC_CmdAppCommand>
 8009c26:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c30:	e09e      	b.n	8009d70 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c36:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009c38:	2308      	movs	r3, #8
 8009c3a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009c3c:	2330      	movs	r3, #48	@ 0x30
 8009c3e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c40:	2302      	movs	r3, #2
 8009c42:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f107 0210 	add.w	r2, r7, #16
 8009c54:	4611      	mov	r1, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f002 fab2 	bl	800c1c0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f002 fc8c 	bl	800c57e <SDMMC_CmdSendSCR>
 8009c66:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d027      	beq.n	8009cbe <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c70:	e07e      	b.n	8009d70 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d113      	bne.n	8009ca8 <SD_FindSCR+0xcc>
 8009c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d110      	bne.n	8009ca8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f002 fa10 	bl	800c0b0 <SDMMC_ReadFIFO>
 8009c90:	4603      	mov	r3, r0
 8009c92:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f002 fa09 	bl	800c0b0 <SDMMC_ReadFIFO>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	60fb      	str	r3, [r7, #12]
      index++;
 8009ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009ca8:	f7f7 fcc0 	bl	800162c <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cb6:	d102      	bne.n	8009cbe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009cb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009cbc:	e058      	b.n	8009d70 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cc4:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009cc8:	4013      	ands	r3, r2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d0d1      	beq.n	8009c72 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cd4:	f003 0308 	and.w	r3, r3, #8
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ce4:	2308      	movs	r3, #8
 8009ce6:	e043      	b.n	8009d70 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cee:	f003 0302 	and.w	r3, r3, #2
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d005      	beq.n	8009d02 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009cfe:	2302      	movs	r3, #2
 8009d00:	e036      	b.n	8009d70 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d08:	f003 0320 	and.w	r3, r3, #32
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d005      	beq.n	8009d1c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2220      	movs	r2, #32
 8009d16:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009d18:	2320      	movs	r3, #32
 8009d1a:	e029      	b.n	8009d70 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a15      	ldr	r2, [pc, #84]	@ (8009d78 <SD_FindSCR+0x19c>)
 8009d22:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	061a      	lsls	r2, r3, #24
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	021b      	lsls	r3, r3, #8
 8009d2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009d30:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	0a1b      	lsrs	r3, r3, #8
 8009d36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8009d3a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	0e1b      	lsrs	r3, r3, #24
 8009d40:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8009d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d44:	601a      	str	r2, [r3, #0]
    scr++;
 8009d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d48:	3304      	adds	r3, #4
 8009d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	061a      	lsls	r2, r3, #24
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	021b      	lsls	r3, r3, #8
 8009d54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009d58:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	0a1b      	lsrs	r3, r3, #8
 8009d5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009d62:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	0e1b      	lsrs	r3, r3, #24
 8009d68:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3738      	adds	r7, #56	@ 0x38
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	18000f3a 	.word	0x18000f3a

08009d7c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d88:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d8e:	2b1f      	cmp	r3, #31
 8009d90:	d936      	bls.n	8009e00 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8009d92:	2300      	movs	r3, #0
 8009d94:	617b      	str	r3, [r7, #20]
 8009d96:	e027      	b.n	8009de8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f002 f987 	bl	800c0b0 <SDMMC_ReadFIFO>
 8009da2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	3301      	adds	r3, #1
 8009db0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	0a1b      	lsrs	r3, r3, #8
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	0c1b      	lsrs	r3, r3, #16
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	0e1b      	lsrs	r3, r3, #24
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	3301      	adds	r3, #1
 8009de0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	3301      	adds	r3, #1
 8009de6:	617b      	str	r3, [r7, #20]
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	2b07      	cmp	r3, #7
 8009dec:	d9d4      	bls.n	8009d98 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df8:	f1a3 0220 	sub.w	r2, r3, #32
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8009e00:	bf00      	nop
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	69db      	ldr	r3, [r3, #28]
 8009e14:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	2b1f      	cmp	r3, #31
 8009e1c:	d93a      	bls.n	8009e94 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8009e1e:	2300      	movs	r3, #0
 8009e20:	617b      	str	r3, [r7, #20]
 8009e22:	e02b      	b.n	8009e7c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	021a      	lsls	r2, r3, #8
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	041a      	lsls	r2, r3, #16
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	3301      	adds	r3, #1
 8009e52:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	061a      	lsls	r2, r3, #24
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	3301      	adds	r3, #1
 8009e64:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f107 020c 	add.w	r2, r7, #12
 8009e6e:	4611      	mov	r1, r2
 8009e70:	4618      	mov	r0, r3
 8009e72:	f002 f92a 	bl	800c0ca <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	617b      	str	r3, [r7, #20]
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	2b07      	cmp	r3, #7
 8009e80:	d9d0      	bls.n	8009e24 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a1b      	ldr	r3, [r3, #32]
 8009e8c:	f1a3 0220 	sub.w	r2, r3, #32
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	621a      	str	r2, [r3, #32]
  }
}
 8009e94:	bf00      	nop
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e042      	b.n	8009f84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d106      	bne.n	8009f16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7f7 f9f9 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2224      	movs	r2, #36	@ 0x24
 8009f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 0201 	bic.w	r2, r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d002      	beq.n	8009f3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 fb70 	bl	800b61c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fe05 	bl	800ab4c <UART_SetConfig>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d101      	bne.n	8009f4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e01b      	b.n	8009f84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689a      	ldr	r2, [r3, #8]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0201 	orr.w	r2, r2, #1
 8009f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 fbef 	bl	800b760 <UART_CheckIdleState>
 8009f82:	4603      	mov	r3, r0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08a      	sub	sp, #40	@ 0x28
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	603b      	str	r3, [r7, #0]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fa2:	2b20      	cmp	r3, #32
 8009fa4:	d17b      	bne.n	800a09e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <HAL_UART_Transmit+0x26>
 8009fac:	88fb      	ldrh	r3, [r7, #6]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e074      	b.n	800a0a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2221      	movs	r2, #33	@ 0x21
 8009fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fc6:	f7f7 fb31 	bl	800162c <HAL_GetTick>
 8009fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	88fa      	ldrh	r2, [r7, #6]
 8009fd0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	88fa      	ldrh	r2, [r7, #6]
 8009fd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fe4:	d108      	bne.n	8009ff8 <HAL_UART_Transmit+0x6c>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d104      	bne.n	8009ff8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	61bb      	str	r3, [r7, #24]
 8009ff6:	e003      	b.n	800a000 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a000:	e030      	b.n	800a064 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2200      	movs	r2, #0
 800a00a:	2180      	movs	r1, #128	@ 0x80
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f001 fc51 	bl	800b8b4 <UART_WaitOnFlagUntilTimeout>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d005      	beq.n	800a024 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e03d      	b.n	800a0a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10b      	bne.n	800a042 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a038:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	3302      	adds	r3, #2
 800a03e:	61bb      	str	r3, [r7, #24]
 800a040:	e007      	b.n	800a052 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	781a      	ldrb	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	3301      	adds	r3, #1
 800a050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a058:	b29b      	uxth	r3, r3
 800a05a:	3b01      	subs	r3, #1
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1c8      	bne.n	800a002 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	2200      	movs	r2, #0
 800a078:	2140      	movs	r1, #64	@ 0x40
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f001 fc1a 	bl	800b8b4 <UART_WaitOnFlagUntilTimeout>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d005      	beq.n	800a092 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2220      	movs	r2, #32
 800a08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e006      	b.n	800a0a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2220      	movs	r2, #32
 800a096:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	e000      	b.n	800a0a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a09e:	2302      	movs	r3, #2
  }
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3720      	adds	r7, #32
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08a      	sub	sp, #40	@ 0x28
 800a0ac:	af02      	add	r7, sp, #8
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	603b      	str	r3, [r7, #0]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	f040 80b5 	bne.w	800a22e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <HAL_UART_Receive+0x28>
 800a0ca:	88fb      	ldrh	r3, [r7, #6]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e0ad      	b.n	800a230 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2222      	movs	r2, #34	@ 0x22
 800a0e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0ea:	f7f7 fa9f 	bl	800162c <HAL_GetTick>
 800a0ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	88fa      	ldrh	r2, [r7, #6]
 800a0f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	88fa      	ldrh	r2, [r7, #6]
 800a0fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a108:	d10e      	bne.n	800a128 <HAL_UART_Receive+0x80>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d105      	bne.n	800a11e <HAL_UART_Receive+0x76>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a118:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a11c:	e02d      	b.n	800a17a <HAL_UART_Receive+0xd2>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	22ff      	movs	r2, #255	@ 0xff
 800a122:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a126:	e028      	b.n	800a17a <HAL_UART_Receive+0xd2>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10d      	bne.n	800a14c <HAL_UART_Receive+0xa4>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d104      	bne.n	800a142 <HAL_UART_Receive+0x9a>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	22ff      	movs	r2, #255	@ 0xff
 800a13c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a140:	e01b      	b.n	800a17a <HAL_UART_Receive+0xd2>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	227f      	movs	r2, #127	@ 0x7f
 800a146:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a14a:	e016      	b.n	800a17a <HAL_UART_Receive+0xd2>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a154:	d10d      	bne.n	800a172 <HAL_UART_Receive+0xca>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d104      	bne.n	800a168 <HAL_UART_Receive+0xc0>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	227f      	movs	r2, #127	@ 0x7f
 800a162:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a166:	e008      	b.n	800a17a <HAL_UART_Receive+0xd2>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	223f      	movs	r2, #63	@ 0x3f
 800a16c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a170:	e003      	b.n	800a17a <HAL_UART_Receive+0xd2>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a180:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a18a:	d108      	bne.n	800a19e <HAL_UART_Receive+0xf6>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d104      	bne.n	800a19e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a194:	2300      	movs	r3, #0
 800a196:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	61bb      	str	r3, [r7, #24]
 800a19c:	e003      	b.n	800a1a6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a1a6:	e036      	b.n	800a216 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2120      	movs	r1, #32
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f001 fb7e 	bl	800b8b4 <UART_WaitOnFlagUntilTimeout>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2220      	movs	r2, #32
 800a1c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e032      	b.n	800a230 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10c      	bne.n	800a1ea <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	8a7b      	ldrh	r3, [r7, #18]
 800a1da:	4013      	ands	r3, r2
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	3302      	adds	r3, #2
 800a1e6:	61bb      	str	r3, [r7, #24]
 800a1e8:	e00c      	b.n	800a204 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	8a7b      	ldrh	r3, [r7, #18]
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	3301      	adds	r3, #1
 800a202:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	3b01      	subs	r3, #1
 800a20e:	b29a      	uxth	r2, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1c2      	bne.n	800a1a8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2220      	movs	r2, #32
 800a226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	e000      	b.n	800a230 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800a22e:	2302      	movs	r3, #2
  }
}
 800a230:	4618      	mov	r0, r3
 800a232:	3720      	adds	r7, #32
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a238:	b480      	push	{r7}
 800a23a:	b091      	sub	sp, #68	@ 0x44
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	4613      	mov	r3, r2
 800a244:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a24c:	2b20      	cmp	r3, #32
 800a24e:	d178      	bne.n	800a342 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <HAL_UART_Transmit_IT+0x24>
 800a256:	88fb      	ldrh	r3, [r7, #6]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e071      	b.n	800a344 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	88fa      	ldrh	r2, [r7, #6]
 800a26a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	88fa      	ldrh	r2, [r7, #6]
 800a272:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2221      	movs	r2, #33	@ 0x21
 800a288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a294:	d12a      	bne.n	800a2ec <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a29e:	d107      	bne.n	800a2b0 <HAL_UART_Transmit_IT+0x78>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d103      	bne.n	800a2b0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	4a29      	ldr	r2, [pc, #164]	@ (800a350 <HAL_UART_Transmit_IT+0x118>)
 800a2ac:	679a      	str	r2, [r3, #120]	@ 0x78
 800a2ae:	e002      	b.n	800a2b6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	4a28      	ldr	r2, [pc, #160]	@ (800a354 <HAL_UART_Transmit_IT+0x11c>)
 800a2b4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c0:	e853 3f00 	ldrex	r3, [r3]
 800a2c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a2cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	3308      	adds	r3, #8
 800a2d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2d6:	637a      	str	r2, [r7, #52]	@ 0x34
 800a2d8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a2dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2de:	e841 2300 	strex	r3, r2, [r1]
 800a2e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1e5      	bne.n	800a2b6 <HAL_UART_Transmit_IT+0x7e>
 800a2ea:	e028      	b.n	800a33e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2f4:	d107      	bne.n	800a306 <HAL_UART_Transmit_IT+0xce>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d103      	bne.n	800a306 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	4a15      	ldr	r2, [pc, #84]	@ (800a358 <HAL_UART_Transmit_IT+0x120>)
 800a302:	679a      	str	r2, [r3, #120]	@ 0x78
 800a304:	e002      	b.n	800a30c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	4a14      	ldr	r2, [pc, #80]	@ (800a35c <HAL_UART_Transmit_IT+0x124>)
 800a30a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	e853 3f00 	ldrex	r3, [r3]
 800a318:	613b      	str	r3, [r7, #16]
   return(result);
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a320:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	461a      	mov	r2, r3
 800a328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a32a:	623b      	str	r3, [r7, #32]
 800a32c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32e:	69f9      	ldr	r1, [r7, #28]
 800a330:	6a3a      	ldr	r2, [r7, #32]
 800a332:	e841 2300 	strex	r3, r2, [r1]
 800a336:	61bb      	str	r3, [r7, #24]
   return(result);
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1e6      	bne.n	800a30c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	e000      	b.n	800a344 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800a342:	2302      	movs	r3, #2
  }
}
 800a344:	4618      	mov	r0, r3
 800a346:	3744      	adds	r7, #68	@ 0x44
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	0800bcdb 	.word	0x0800bcdb
 800a354:	0800bbfb 	.word	0x0800bbfb
 800a358:	0800bb39 	.word	0x0800bb39
 800a35c:	0800ba81 	.word	0x0800ba81

0800a360 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b0ba      	sub	sp, #232	@ 0xe8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a386:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a38a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a38e:	4013      	ands	r3, r2
 800a390:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d11b      	bne.n	800a3d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a39c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3a0:	f003 0320 	and.w	r3, r3, #32
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d015      	beq.n	800a3d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3ac:	f003 0320 	and.w	r3, r3, #32
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d105      	bne.n	800a3c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a3b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d009      	beq.n	800a3d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 8393 	beq.w	800aaf0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	4798      	blx	r3
      }
      return;
 800a3d2:	e38d      	b.n	800aaf0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a3d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 8123 	beq.w	800a624 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a3de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a3e2:	4b8d      	ldr	r3, [pc, #564]	@ (800a618 <HAL_UART_IRQHandler+0x2b8>)
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d106      	bne.n	800a3f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a3ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a3ee:	4b8b      	ldr	r3, [pc, #556]	@ (800a61c <HAL_UART_IRQHandler+0x2bc>)
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f000 8116 	beq.w	800a624 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	d011      	beq.n	800a428 <HAL_UART_IRQHandler+0xc8>
 800a404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00b      	beq.n	800a428 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2201      	movs	r2, #1
 800a416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a41e:	f043 0201 	orr.w	r2, r3, #1
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	2b00      	cmp	r3, #0
 800a432:	d011      	beq.n	800a458 <HAL_UART_IRQHandler+0xf8>
 800a434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00b      	beq.n	800a458 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2202      	movs	r2, #2
 800a446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a44e:	f043 0204 	orr.w	r2, r3, #4
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b00      	cmp	r3, #0
 800a462:	d011      	beq.n	800a488 <HAL_UART_IRQHandler+0x128>
 800a464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00b      	beq.n	800a488 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2204      	movs	r2, #4
 800a476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a47e:	f043 0202 	orr.w	r2, r3, #2
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a48c:	f003 0308 	and.w	r3, r3, #8
 800a490:	2b00      	cmp	r3, #0
 800a492:	d017      	beq.n	800a4c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a498:	f003 0320 	and.w	r3, r3, #32
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d105      	bne.n	800a4ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a4a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a4a4:	4b5c      	ldr	r3, [pc, #368]	@ (800a618 <HAL_UART_IRQHandler+0x2b8>)
 800a4a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00b      	beq.n	800a4c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2208      	movs	r2, #8
 800a4b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ba:	f043 0208 	orr.w	r2, r3, #8
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d012      	beq.n	800a4f6 <HAL_UART_IRQHandler+0x196>
 800a4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00c      	beq.n	800a4f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ec:	f043 0220 	orr.w	r2, r3, #32
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 82f9 	beq.w	800aaf4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a506:	f003 0320 	and.w	r3, r3, #32
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d013      	beq.n	800a536 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a50e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a512:	f003 0320 	and.w	r3, r3, #32
 800a516:	2b00      	cmp	r3, #0
 800a518:	d105      	bne.n	800a526 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a51a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a51e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d007      	beq.n	800a536 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d003      	beq.n	800a536 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a53c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a54a:	2b40      	cmp	r3, #64	@ 0x40
 800a54c:	d005      	beq.n	800a55a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a54e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a552:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a556:	2b00      	cmp	r3, #0
 800a558:	d054      	beq.n	800a604 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f001 fa18 	bl	800b990 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a56a:	2b40      	cmp	r3, #64	@ 0x40
 800a56c:	d146      	bne.n	800a5fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3308      	adds	r3, #8
 800a574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a57c:	e853 3f00 	ldrex	r3, [r3]
 800a580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a58c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3308      	adds	r3, #8
 800a596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a59a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a59e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a5a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a5aa:	e841 2300 	strex	r3, r2, [r1]
 800a5ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a5b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1d9      	bne.n	800a56e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d017      	beq.n	800a5f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5ca:	4a15      	ldr	r2, [pc, #84]	@ (800a620 <HAL_UART_IRQHandler+0x2c0>)
 800a5cc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7f8 fe8b 	bl	80032f0 <HAL_DMA_Abort_IT>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d019      	beq.n	800a614 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f2:	e00f      	b.n	800a614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fa93 	bl	800ab20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5fa:	e00b      	b.n	800a614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fa8f 	bl	800ab20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a602:	e007      	b.n	800a614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fa8b 	bl	800ab20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a612:	e26f      	b.n	800aaf4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a614:	bf00      	nop
    return;
 800a616:	e26d      	b.n	800aaf4 <HAL_UART_IRQHandler+0x794>
 800a618:	10000001 	.word	0x10000001
 800a61c:	04000120 	.word	0x04000120
 800a620:	0800ba5d 	.word	0x0800ba5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a628:	2b01      	cmp	r3, #1
 800a62a:	f040 8203 	bne.w	800aa34 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a62e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a632:	f003 0310 	and.w	r3, r3, #16
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 81fc 	beq.w	800aa34 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a640:	f003 0310 	and.w	r3, r3, #16
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 81f5 	beq.w	800aa34 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2210      	movs	r2, #16
 800a650:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a65c:	2b40      	cmp	r3, #64	@ 0x40
 800a65e:	f040 816d 	bne.w	800a93c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4aa4      	ldr	r2, [pc, #656]	@ (800a8fc <HAL_UART_IRQHandler+0x59c>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d068      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4aa1      	ldr	r2, [pc, #644]	@ (800a900 <HAL_UART_IRQHandler+0x5a0>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d061      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a9f      	ldr	r2, [pc, #636]	@ (800a904 <HAL_UART_IRQHandler+0x5a4>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d05a      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a9c      	ldr	r2, [pc, #624]	@ (800a908 <HAL_UART_IRQHandler+0x5a8>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d053      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a9a      	ldr	r2, [pc, #616]	@ (800a90c <HAL_UART_IRQHandler+0x5ac>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d04c      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a97      	ldr	r2, [pc, #604]	@ (800a910 <HAL_UART_IRQHandler+0x5b0>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d045      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a95      	ldr	r2, [pc, #596]	@ (800a914 <HAL_UART_IRQHandler+0x5b4>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d03e      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a92      	ldr	r2, [pc, #584]	@ (800a918 <HAL_UART_IRQHandler+0x5b8>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d037      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a90      	ldr	r2, [pc, #576]	@ (800a91c <HAL_UART_IRQHandler+0x5bc>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d030      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a8d      	ldr	r2, [pc, #564]	@ (800a920 <HAL_UART_IRQHandler+0x5c0>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d029      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a8b      	ldr	r2, [pc, #556]	@ (800a924 <HAL_UART_IRQHandler+0x5c4>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d022      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a88      	ldr	r2, [pc, #544]	@ (800a928 <HAL_UART_IRQHandler+0x5c8>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d01b      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a86      	ldr	r2, [pc, #536]	@ (800a92c <HAL_UART_IRQHandler+0x5cc>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d014      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a83      	ldr	r2, [pc, #524]	@ (800a930 <HAL_UART_IRQHandler+0x5d0>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d00d      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a81      	ldr	r2, [pc, #516]	@ (800a934 <HAL_UART_IRQHandler+0x5d4>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d006      	beq.n	800a742 <HAL_UART_IRQHandler+0x3e2>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a7e      	ldr	r2, [pc, #504]	@ (800a938 <HAL_UART_IRQHandler+0x5d8>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d106      	bne.n	800a750 <HAL_UART_IRQHandler+0x3f0>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	e005      	b.n	800a75c <HAL_UART_IRQHandler+0x3fc>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a760:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 80ad 	beq.w	800a8c4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a770:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a774:	429a      	cmp	r2, r3
 800a776:	f080 80a5 	bcs.w	800a8c4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a780:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a78a:	69db      	ldr	r3, [r3, #28]
 800a78c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a790:	f000 8087 	beq.w	800a8a2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a7a0:	e853 3f00 	ldrex	r3, [r3]
 800a7a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a7a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a7c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a7ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a7ce:	e841 2300 	strex	r3, r2, [r1]
 800a7d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a7d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1da      	bne.n	800a794 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3308      	adds	r3, #8
 800a7e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7e8:	e853 3f00 	ldrex	r3, [r3]
 800a7ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a7ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7f0:	f023 0301 	bic.w	r3, r3, #1
 800a7f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a802:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a806:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a808:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a80a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a80e:	e841 2300 	strex	r3, r2, [r1]
 800a812:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1e1      	bne.n	800a7de <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3308      	adds	r3, #8
 800a820:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a822:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a824:	e853 3f00 	ldrex	r3, [r3]
 800a828:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a82a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a82c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3308      	adds	r3, #8
 800a83a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a83e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a840:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a842:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a844:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a846:	e841 2300 	strex	r3, r2, [r1]
 800a84a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a84c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1e3      	bne.n	800a81a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2220      	movs	r2, #32
 800a856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a868:	e853 3f00 	ldrex	r3, [r3]
 800a86c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a86e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a870:	f023 0310 	bic.w	r3, r3, #16
 800a874:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	461a      	mov	r2, r3
 800a87e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a882:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a884:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a886:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a888:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a88a:	e841 2300 	strex	r3, r2, [r1]
 800a88e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1e4      	bne.n	800a860 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7f8 fa09 	bl	8002cb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f939 	bl	800ab34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a8c2:	e119      	b.n	800aaf8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	f040 8112 	bne.w	800aaf8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8da:	69db      	ldr	r3, [r3, #28]
 800a8dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8e0:	f040 810a 	bne.w	800aaf8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f91e 	bl	800ab34 <HAL_UARTEx_RxEventCallback>
      return;
 800a8f8:	e0fe      	b.n	800aaf8 <HAL_UART_IRQHandler+0x798>
 800a8fa:	bf00      	nop
 800a8fc:	40020010 	.word	0x40020010
 800a900:	40020028 	.word	0x40020028
 800a904:	40020040 	.word	0x40020040
 800a908:	40020058 	.word	0x40020058
 800a90c:	40020070 	.word	0x40020070
 800a910:	40020088 	.word	0x40020088
 800a914:	400200a0 	.word	0x400200a0
 800a918:	400200b8 	.word	0x400200b8
 800a91c:	40020410 	.word	0x40020410
 800a920:	40020428 	.word	0x40020428
 800a924:	40020440 	.word	0x40020440
 800a928:	40020458 	.word	0x40020458
 800a92c:	40020470 	.word	0x40020470
 800a930:	40020488 	.word	0x40020488
 800a934:	400204a0 	.word	0x400204a0
 800a938:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a948:	b29b      	uxth	r3, r3
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a956:	b29b      	uxth	r3, r3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 80cf 	beq.w	800aafc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800a95e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a962:	2b00      	cmp	r3, #0
 800a964:	f000 80ca 	beq.w	800aafc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a970:	e853 3f00 	ldrex	r3, [r3]
 800a974:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a97c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	461a      	mov	r2, r3
 800a986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a98a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a98c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a990:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a992:	e841 2300 	strex	r3, r2, [r1]
 800a996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1e4      	bne.n	800a968 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3308      	adds	r3, #8
 800a9a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	623b      	str	r3, [r7, #32]
   return(result);
 800a9ae:	6a3a      	ldr	r2, [r7, #32]
 800a9b0:	4b55      	ldr	r3, [pc, #340]	@ (800ab08 <HAL_UART_IRQHandler+0x7a8>)
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3308      	adds	r3, #8
 800a9be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a9c2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9ca:	e841 2300 	strex	r3, r2, [r1]
 800a9ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1e3      	bne.n	800a99e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2220      	movs	r2, #32
 800a9da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	e853 3f00 	ldrex	r3, [r3]
 800a9f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f023 0310 	bic.w	r3, r3, #16
 800a9fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa0c:	61fb      	str	r3, [r7, #28]
 800aa0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa10:	69b9      	ldr	r1, [r7, #24]
 800aa12:	69fa      	ldr	r2, [r7, #28]
 800aa14:	e841 2300 	strex	r3, r2, [r1]
 800aa18:	617b      	str	r3, [r7, #20]
   return(result);
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1e4      	bne.n	800a9ea <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2202      	movs	r2, #2
 800aa24:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f881 	bl	800ab34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa32:	e063      	b.n	800aafc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aa34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00e      	beq.n	800aa5e <HAL_UART_IRQHandler+0x6fe>
 800aa40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d008      	beq.n	800aa5e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800aa54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f001 f9df 	bl	800be1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa5c:	e051      	b.n	800ab02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aa5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d014      	beq.n	800aa94 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aa6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d105      	bne.n	800aa82 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aa76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d008      	beq.n	800aa94 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d03a      	beq.n	800ab00 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	4798      	blx	r3
    }
    return;
 800aa92:	e035      	b.n	800ab00 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d009      	beq.n	800aab4 <HAL_UART_IRQHandler+0x754>
 800aaa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d003      	beq.n	800aab4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 f989 	bl	800bdc4 <UART_EndTransmit_IT>
    return;
 800aab2:	e026      	b.n	800ab02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aab8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d009      	beq.n	800aad4 <HAL_UART_IRQHandler+0x774>
 800aac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aac4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d003      	beq.n	800aad4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f001 f9b8 	bl	800be42 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aad2:	e016      	b.n	800ab02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d010      	beq.n	800ab02 <HAL_UART_IRQHandler+0x7a2>
 800aae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	da0c      	bge.n	800ab02 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f001 f9a0 	bl	800be2e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aaee:	e008      	b.n	800ab02 <HAL_UART_IRQHandler+0x7a2>
      return;
 800aaf0:	bf00      	nop
 800aaf2:	e006      	b.n	800ab02 <HAL_UART_IRQHandler+0x7a2>
    return;
 800aaf4:	bf00      	nop
 800aaf6:	e004      	b.n	800ab02 <HAL_UART_IRQHandler+0x7a2>
      return;
 800aaf8:	bf00      	nop
 800aafa:	e002      	b.n	800ab02 <HAL_UART_IRQHandler+0x7a2>
      return;
 800aafc:	bf00      	nop
 800aafe:	e000      	b.n	800ab02 <HAL_UART_IRQHandler+0x7a2>
    return;
 800ab00:	bf00      	nop
  }
}
 800ab02:	37e8      	adds	r7, #232	@ 0xe8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	effffffe 	.word	0xeffffffe

0800ab0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab50:	b092      	sub	sp, #72	@ 0x48
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	689a      	ldr	r2, [r3, #8]
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	431a      	orrs	r2, r3
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	69db      	ldr	r3, [r3, #28]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	4bbe      	ldr	r3, [pc, #760]	@ (800ae74 <UART_SetConfig+0x328>)
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	6812      	ldr	r2, [r2, #0]
 800ab82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab84:	430b      	orrs	r3, r1
 800ab86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	68da      	ldr	r2, [r3, #12]
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4ab3      	ldr	r2, [pc, #716]	@ (800ae78 <UART_SetConfig+0x32c>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d004      	beq.n	800abb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abb4:	4313      	orrs	r3, r2
 800abb6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689a      	ldr	r2, [r3, #8]
 800abbe:	4baf      	ldr	r3, [pc, #700]	@ (800ae7c <UART_SetConfig+0x330>)
 800abc0:	4013      	ands	r3, r2
 800abc2:	697a      	ldr	r2, [r7, #20]
 800abc4:	6812      	ldr	r2, [r2, #0]
 800abc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abc8:	430b      	orrs	r3, r1
 800abca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd2:	f023 010f 	bic.w	r1, r3, #15
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4aa6      	ldr	r2, [pc, #664]	@ (800ae80 <UART_SetConfig+0x334>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d177      	bne.n	800acdc <UART_SetConfig+0x190>
 800abec:	4ba5      	ldr	r3, [pc, #660]	@ (800ae84 <UART_SetConfig+0x338>)
 800abee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abf4:	2b28      	cmp	r3, #40	@ 0x28
 800abf6:	d86d      	bhi.n	800acd4 <UART_SetConfig+0x188>
 800abf8:	a201      	add	r2, pc, #4	@ (adr r2, 800ac00 <UART_SetConfig+0xb4>)
 800abfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfe:	bf00      	nop
 800ac00:	0800aca5 	.word	0x0800aca5
 800ac04:	0800acd5 	.word	0x0800acd5
 800ac08:	0800acd5 	.word	0x0800acd5
 800ac0c:	0800acd5 	.word	0x0800acd5
 800ac10:	0800acd5 	.word	0x0800acd5
 800ac14:	0800acd5 	.word	0x0800acd5
 800ac18:	0800acd5 	.word	0x0800acd5
 800ac1c:	0800acd5 	.word	0x0800acd5
 800ac20:	0800acad 	.word	0x0800acad
 800ac24:	0800acd5 	.word	0x0800acd5
 800ac28:	0800acd5 	.word	0x0800acd5
 800ac2c:	0800acd5 	.word	0x0800acd5
 800ac30:	0800acd5 	.word	0x0800acd5
 800ac34:	0800acd5 	.word	0x0800acd5
 800ac38:	0800acd5 	.word	0x0800acd5
 800ac3c:	0800acd5 	.word	0x0800acd5
 800ac40:	0800acb5 	.word	0x0800acb5
 800ac44:	0800acd5 	.word	0x0800acd5
 800ac48:	0800acd5 	.word	0x0800acd5
 800ac4c:	0800acd5 	.word	0x0800acd5
 800ac50:	0800acd5 	.word	0x0800acd5
 800ac54:	0800acd5 	.word	0x0800acd5
 800ac58:	0800acd5 	.word	0x0800acd5
 800ac5c:	0800acd5 	.word	0x0800acd5
 800ac60:	0800acbd 	.word	0x0800acbd
 800ac64:	0800acd5 	.word	0x0800acd5
 800ac68:	0800acd5 	.word	0x0800acd5
 800ac6c:	0800acd5 	.word	0x0800acd5
 800ac70:	0800acd5 	.word	0x0800acd5
 800ac74:	0800acd5 	.word	0x0800acd5
 800ac78:	0800acd5 	.word	0x0800acd5
 800ac7c:	0800acd5 	.word	0x0800acd5
 800ac80:	0800acc5 	.word	0x0800acc5
 800ac84:	0800acd5 	.word	0x0800acd5
 800ac88:	0800acd5 	.word	0x0800acd5
 800ac8c:	0800acd5 	.word	0x0800acd5
 800ac90:	0800acd5 	.word	0x0800acd5
 800ac94:	0800acd5 	.word	0x0800acd5
 800ac98:	0800acd5 	.word	0x0800acd5
 800ac9c:	0800acd5 	.word	0x0800acd5
 800aca0:	0800accd 	.word	0x0800accd
 800aca4:	2301      	movs	r3, #1
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acaa:	e222      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800acac:	2304      	movs	r3, #4
 800acae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb2:	e21e      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800acb4:	2308      	movs	r3, #8
 800acb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acba:	e21a      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800acbc:	2310      	movs	r3, #16
 800acbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc2:	e216      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800acc4:	2320      	movs	r3, #32
 800acc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acca:	e212      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800accc:	2340      	movs	r3, #64	@ 0x40
 800acce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd2:	e20e      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800acd4:	2380      	movs	r3, #128	@ 0x80
 800acd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acda:	e20a      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a69      	ldr	r2, [pc, #420]	@ (800ae88 <UART_SetConfig+0x33c>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d130      	bne.n	800ad48 <UART_SetConfig+0x1fc>
 800ace6:	4b67      	ldr	r3, [pc, #412]	@ (800ae84 <UART_SetConfig+0x338>)
 800ace8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acea:	f003 0307 	and.w	r3, r3, #7
 800acee:	2b05      	cmp	r3, #5
 800acf0:	d826      	bhi.n	800ad40 <UART_SetConfig+0x1f4>
 800acf2:	a201      	add	r2, pc, #4	@ (adr r2, 800acf8 <UART_SetConfig+0x1ac>)
 800acf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf8:	0800ad11 	.word	0x0800ad11
 800acfc:	0800ad19 	.word	0x0800ad19
 800ad00:	0800ad21 	.word	0x0800ad21
 800ad04:	0800ad29 	.word	0x0800ad29
 800ad08:	0800ad31 	.word	0x0800ad31
 800ad0c:	0800ad39 	.word	0x0800ad39
 800ad10:	2300      	movs	r3, #0
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad16:	e1ec      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ad18:	2304      	movs	r3, #4
 800ad1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1e:	e1e8      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ad20:	2308      	movs	r3, #8
 800ad22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad26:	e1e4      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ad28:	2310      	movs	r3, #16
 800ad2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2e:	e1e0      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ad30:	2320      	movs	r3, #32
 800ad32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad36:	e1dc      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ad38:	2340      	movs	r3, #64	@ 0x40
 800ad3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3e:	e1d8      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ad40:	2380      	movs	r3, #128	@ 0x80
 800ad42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad46:	e1d4      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a4f      	ldr	r2, [pc, #316]	@ (800ae8c <UART_SetConfig+0x340>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d130      	bne.n	800adb4 <UART_SetConfig+0x268>
 800ad52:	4b4c      	ldr	r3, [pc, #304]	@ (800ae84 <UART_SetConfig+0x338>)
 800ad54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad56:	f003 0307 	and.w	r3, r3, #7
 800ad5a:	2b05      	cmp	r3, #5
 800ad5c:	d826      	bhi.n	800adac <UART_SetConfig+0x260>
 800ad5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad64 <UART_SetConfig+0x218>)
 800ad60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad64:	0800ad7d 	.word	0x0800ad7d
 800ad68:	0800ad85 	.word	0x0800ad85
 800ad6c:	0800ad8d 	.word	0x0800ad8d
 800ad70:	0800ad95 	.word	0x0800ad95
 800ad74:	0800ad9d 	.word	0x0800ad9d
 800ad78:	0800ada5 	.word	0x0800ada5
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad82:	e1b6      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ad84:	2304      	movs	r3, #4
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8a:	e1b2      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ad8c:	2308      	movs	r3, #8
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad92:	e1ae      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ad94:	2310      	movs	r3, #16
 800ad96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9a:	e1aa      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ad9c:	2320      	movs	r3, #32
 800ad9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada2:	e1a6      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ada4:	2340      	movs	r3, #64	@ 0x40
 800ada6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adaa:	e1a2      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800adac:	2380      	movs	r3, #128	@ 0x80
 800adae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb2:	e19e      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a35      	ldr	r2, [pc, #212]	@ (800ae90 <UART_SetConfig+0x344>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d130      	bne.n	800ae20 <UART_SetConfig+0x2d4>
 800adbe:	4b31      	ldr	r3, [pc, #196]	@ (800ae84 <UART_SetConfig+0x338>)
 800adc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adc2:	f003 0307 	and.w	r3, r3, #7
 800adc6:	2b05      	cmp	r3, #5
 800adc8:	d826      	bhi.n	800ae18 <UART_SetConfig+0x2cc>
 800adca:	a201      	add	r2, pc, #4	@ (adr r2, 800add0 <UART_SetConfig+0x284>)
 800adcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add0:	0800ade9 	.word	0x0800ade9
 800add4:	0800adf1 	.word	0x0800adf1
 800add8:	0800adf9 	.word	0x0800adf9
 800addc:	0800ae01 	.word	0x0800ae01
 800ade0:	0800ae09 	.word	0x0800ae09
 800ade4:	0800ae11 	.word	0x0800ae11
 800ade8:	2300      	movs	r3, #0
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adee:	e180      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800adf0:	2304      	movs	r3, #4
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf6:	e17c      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800adf8:	2308      	movs	r3, #8
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfe:	e178      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ae00:	2310      	movs	r3, #16
 800ae02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae06:	e174      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ae08:	2320      	movs	r3, #32
 800ae0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0e:	e170      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ae10:	2340      	movs	r3, #64	@ 0x40
 800ae12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae16:	e16c      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ae18:	2380      	movs	r3, #128	@ 0x80
 800ae1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1e:	e168      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a1b      	ldr	r2, [pc, #108]	@ (800ae94 <UART_SetConfig+0x348>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d142      	bne.n	800aeb0 <UART_SetConfig+0x364>
 800ae2a:	4b16      	ldr	r3, [pc, #88]	@ (800ae84 <UART_SetConfig+0x338>)
 800ae2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae2e:	f003 0307 	and.w	r3, r3, #7
 800ae32:	2b05      	cmp	r3, #5
 800ae34:	d838      	bhi.n	800aea8 <UART_SetConfig+0x35c>
 800ae36:	a201      	add	r2, pc, #4	@ (adr r2, 800ae3c <UART_SetConfig+0x2f0>)
 800ae38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae3c:	0800ae55 	.word	0x0800ae55
 800ae40:	0800ae5d 	.word	0x0800ae5d
 800ae44:	0800ae65 	.word	0x0800ae65
 800ae48:	0800ae6d 	.word	0x0800ae6d
 800ae4c:	0800ae99 	.word	0x0800ae99
 800ae50:	0800aea1 	.word	0x0800aea1
 800ae54:	2300      	movs	r3, #0
 800ae56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5a:	e14a      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ae5c:	2304      	movs	r3, #4
 800ae5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae62:	e146      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ae64:	2308      	movs	r3, #8
 800ae66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6a:	e142      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ae6c:	2310      	movs	r3, #16
 800ae6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae72:	e13e      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800ae74:	cfff69f3 	.word	0xcfff69f3
 800ae78:	58000c00 	.word	0x58000c00
 800ae7c:	11fff4ff 	.word	0x11fff4ff
 800ae80:	40011000 	.word	0x40011000
 800ae84:	58024400 	.word	0x58024400
 800ae88:	40004400 	.word	0x40004400
 800ae8c:	40004800 	.word	0x40004800
 800ae90:	40004c00 	.word	0x40004c00
 800ae94:	40005000 	.word	0x40005000
 800ae98:	2320      	movs	r3, #32
 800ae9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae9e:	e128      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800aea0:	2340      	movs	r3, #64	@ 0x40
 800aea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea6:	e124      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800aea8:	2380      	movs	r3, #128	@ 0x80
 800aeaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeae:	e120      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4acb      	ldr	r2, [pc, #812]	@ (800b1e4 <UART_SetConfig+0x698>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d176      	bne.n	800afa8 <UART_SetConfig+0x45c>
 800aeba:	4bcb      	ldr	r3, [pc, #812]	@ (800b1e8 <UART_SetConfig+0x69c>)
 800aebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aebe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aec2:	2b28      	cmp	r3, #40	@ 0x28
 800aec4:	d86c      	bhi.n	800afa0 <UART_SetConfig+0x454>
 800aec6:	a201      	add	r2, pc, #4	@ (adr r2, 800aecc <UART_SetConfig+0x380>)
 800aec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aecc:	0800af71 	.word	0x0800af71
 800aed0:	0800afa1 	.word	0x0800afa1
 800aed4:	0800afa1 	.word	0x0800afa1
 800aed8:	0800afa1 	.word	0x0800afa1
 800aedc:	0800afa1 	.word	0x0800afa1
 800aee0:	0800afa1 	.word	0x0800afa1
 800aee4:	0800afa1 	.word	0x0800afa1
 800aee8:	0800afa1 	.word	0x0800afa1
 800aeec:	0800af79 	.word	0x0800af79
 800aef0:	0800afa1 	.word	0x0800afa1
 800aef4:	0800afa1 	.word	0x0800afa1
 800aef8:	0800afa1 	.word	0x0800afa1
 800aefc:	0800afa1 	.word	0x0800afa1
 800af00:	0800afa1 	.word	0x0800afa1
 800af04:	0800afa1 	.word	0x0800afa1
 800af08:	0800afa1 	.word	0x0800afa1
 800af0c:	0800af81 	.word	0x0800af81
 800af10:	0800afa1 	.word	0x0800afa1
 800af14:	0800afa1 	.word	0x0800afa1
 800af18:	0800afa1 	.word	0x0800afa1
 800af1c:	0800afa1 	.word	0x0800afa1
 800af20:	0800afa1 	.word	0x0800afa1
 800af24:	0800afa1 	.word	0x0800afa1
 800af28:	0800afa1 	.word	0x0800afa1
 800af2c:	0800af89 	.word	0x0800af89
 800af30:	0800afa1 	.word	0x0800afa1
 800af34:	0800afa1 	.word	0x0800afa1
 800af38:	0800afa1 	.word	0x0800afa1
 800af3c:	0800afa1 	.word	0x0800afa1
 800af40:	0800afa1 	.word	0x0800afa1
 800af44:	0800afa1 	.word	0x0800afa1
 800af48:	0800afa1 	.word	0x0800afa1
 800af4c:	0800af91 	.word	0x0800af91
 800af50:	0800afa1 	.word	0x0800afa1
 800af54:	0800afa1 	.word	0x0800afa1
 800af58:	0800afa1 	.word	0x0800afa1
 800af5c:	0800afa1 	.word	0x0800afa1
 800af60:	0800afa1 	.word	0x0800afa1
 800af64:	0800afa1 	.word	0x0800afa1
 800af68:	0800afa1 	.word	0x0800afa1
 800af6c:	0800af99 	.word	0x0800af99
 800af70:	2301      	movs	r3, #1
 800af72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af76:	e0bc      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800af78:	2304      	movs	r3, #4
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af7e:	e0b8      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800af80:	2308      	movs	r3, #8
 800af82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af86:	e0b4      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800af88:	2310      	movs	r3, #16
 800af8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8e:	e0b0      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800af90:	2320      	movs	r3, #32
 800af92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af96:	e0ac      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800af98:	2340      	movs	r3, #64	@ 0x40
 800af9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9e:	e0a8      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800afa0:	2380      	movs	r3, #128	@ 0x80
 800afa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa6:	e0a4      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a8f      	ldr	r2, [pc, #572]	@ (800b1ec <UART_SetConfig+0x6a0>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d130      	bne.n	800b014 <UART_SetConfig+0x4c8>
 800afb2:	4b8d      	ldr	r3, [pc, #564]	@ (800b1e8 <UART_SetConfig+0x69c>)
 800afb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	2b05      	cmp	r3, #5
 800afbc:	d826      	bhi.n	800b00c <UART_SetConfig+0x4c0>
 800afbe:	a201      	add	r2, pc, #4	@ (adr r2, 800afc4 <UART_SetConfig+0x478>)
 800afc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc4:	0800afdd 	.word	0x0800afdd
 800afc8:	0800afe5 	.word	0x0800afe5
 800afcc:	0800afed 	.word	0x0800afed
 800afd0:	0800aff5 	.word	0x0800aff5
 800afd4:	0800affd 	.word	0x0800affd
 800afd8:	0800b005 	.word	0x0800b005
 800afdc:	2300      	movs	r3, #0
 800afde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe2:	e086      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800afe4:	2304      	movs	r3, #4
 800afe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afea:	e082      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800afec:	2308      	movs	r3, #8
 800afee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff2:	e07e      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800aff4:	2310      	movs	r3, #16
 800aff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affa:	e07a      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800affc:	2320      	movs	r3, #32
 800affe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b002:	e076      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b004:	2340      	movs	r3, #64	@ 0x40
 800b006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00a:	e072      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b00c:	2380      	movs	r3, #128	@ 0x80
 800b00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b012:	e06e      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a75      	ldr	r2, [pc, #468]	@ (800b1f0 <UART_SetConfig+0x6a4>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d130      	bne.n	800b080 <UART_SetConfig+0x534>
 800b01e:	4b72      	ldr	r3, [pc, #456]	@ (800b1e8 <UART_SetConfig+0x69c>)
 800b020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b022:	f003 0307 	and.w	r3, r3, #7
 800b026:	2b05      	cmp	r3, #5
 800b028:	d826      	bhi.n	800b078 <UART_SetConfig+0x52c>
 800b02a:	a201      	add	r2, pc, #4	@ (adr r2, 800b030 <UART_SetConfig+0x4e4>)
 800b02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b030:	0800b049 	.word	0x0800b049
 800b034:	0800b051 	.word	0x0800b051
 800b038:	0800b059 	.word	0x0800b059
 800b03c:	0800b061 	.word	0x0800b061
 800b040:	0800b069 	.word	0x0800b069
 800b044:	0800b071 	.word	0x0800b071
 800b048:	2300      	movs	r3, #0
 800b04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b04e:	e050      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b050:	2304      	movs	r3, #4
 800b052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b056:	e04c      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b058:	2308      	movs	r3, #8
 800b05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b05e:	e048      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b060:	2310      	movs	r3, #16
 800b062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b066:	e044      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b068:	2320      	movs	r3, #32
 800b06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b06e:	e040      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b070:	2340      	movs	r3, #64	@ 0x40
 800b072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b076:	e03c      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b078:	2380      	movs	r3, #128	@ 0x80
 800b07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b07e:	e038      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a5b      	ldr	r2, [pc, #364]	@ (800b1f4 <UART_SetConfig+0x6a8>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d130      	bne.n	800b0ec <UART_SetConfig+0x5a0>
 800b08a:	4b57      	ldr	r3, [pc, #348]	@ (800b1e8 <UART_SetConfig+0x69c>)
 800b08c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b08e:	f003 0307 	and.w	r3, r3, #7
 800b092:	2b05      	cmp	r3, #5
 800b094:	d826      	bhi.n	800b0e4 <UART_SetConfig+0x598>
 800b096:	a201      	add	r2, pc, #4	@ (adr r2, 800b09c <UART_SetConfig+0x550>)
 800b098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09c:	0800b0b5 	.word	0x0800b0b5
 800b0a0:	0800b0bd 	.word	0x0800b0bd
 800b0a4:	0800b0c5 	.word	0x0800b0c5
 800b0a8:	0800b0cd 	.word	0x0800b0cd
 800b0ac:	0800b0d5 	.word	0x0800b0d5
 800b0b0:	0800b0dd 	.word	0x0800b0dd
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ba:	e01a      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b0bc:	2304      	movs	r3, #4
 800b0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c2:	e016      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b0c4:	2308      	movs	r3, #8
 800b0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ca:	e012      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b0cc:	2310      	movs	r3, #16
 800b0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d2:	e00e      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b0d4:	2320      	movs	r3, #32
 800b0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0da:	e00a      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b0dc:	2340      	movs	r3, #64	@ 0x40
 800b0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e2:	e006      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b0e4:	2380      	movs	r3, #128	@ 0x80
 800b0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ea:	e002      	b.n	800b0f2 <UART_SetConfig+0x5a6>
 800b0ec:	2380      	movs	r3, #128	@ 0x80
 800b0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a3f      	ldr	r2, [pc, #252]	@ (800b1f4 <UART_SetConfig+0x6a8>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	f040 80f8 	bne.w	800b2ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b102:	2b20      	cmp	r3, #32
 800b104:	dc46      	bgt.n	800b194 <UART_SetConfig+0x648>
 800b106:	2b02      	cmp	r3, #2
 800b108:	f2c0 8082 	blt.w	800b210 <UART_SetConfig+0x6c4>
 800b10c:	3b02      	subs	r3, #2
 800b10e:	2b1e      	cmp	r3, #30
 800b110:	d87e      	bhi.n	800b210 <UART_SetConfig+0x6c4>
 800b112:	a201      	add	r2, pc, #4	@ (adr r2, 800b118 <UART_SetConfig+0x5cc>)
 800b114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b118:	0800b19b 	.word	0x0800b19b
 800b11c:	0800b211 	.word	0x0800b211
 800b120:	0800b1a3 	.word	0x0800b1a3
 800b124:	0800b211 	.word	0x0800b211
 800b128:	0800b211 	.word	0x0800b211
 800b12c:	0800b211 	.word	0x0800b211
 800b130:	0800b1b3 	.word	0x0800b1b3
 800b134:	0800b211 	.word	0x0800b211
 800b138:	0800b211 	.word	0x0800b211
 800b13c:	0800b211 	.word	0x0800b211
 800b140:	0800b211 	.word	0x0800b211
 800b144:	0800b211 	.word	0x0800b211
 800b148:	0800b211 	.word	0x0800b211
 800b14c:	0800b211 	.word	0x0800b211
 800b150:	0800b1c3 	.word	0x0800b1c3
 800b154:	0800b211 	.word	0x0800b211
 800b158:	0800b211 	.word	0x0800b211
 800b15c:	0800b211 	.word	0x0800b211
 800b160:	0800b211 	.word	0x0800b211
 800b164:	0800b211 	.word	0x0800b211
 800b168:	0800b211 	.word	0x0800b211
 800b16c:	0800b211 	.word	0x0800b211
 800b170:	0800b211 	.word	0x0800b211
 800b174:	0800b211 	.word	0x0800b211
 800b178:	0800b211 	.word	0x0800b211
 800b17c:	0800b211 	.word	0x0800b211
 800b180:	0800b211 	.word	0x0800b211
 800b184:	0800b211 	.word	0x0800b211
 800b188:	0800b211 	.word	0x0800b211
 800b18c:	0800b211 	.word	0x0800b211
 800b190:	0800b203 	.word	0x0800b203
 800b194:	2b40      	cmp	r3, #64	@ 0x40
 800b196:	d037      	beq.n	800b208 <UART_SetConfig+0x6bc>
 800b198:	e03a      	b.n	800b210 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b19a:	f7fc fb07 	bl	80077ac <HAL_RCCEx_GetD3PCLK1Freq>
 800b19e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b1a0:	e03c      	b.n	800b21c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fc fb16 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b0:	e034      	b.n	800b21c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1b2:	f107 0318 	add.w	r3, r7, #24
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fc fc62 	bl	8007a80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1c0:	e02c      	b.n	800b21c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1c2:	4b09      	ldr	r3, [pc, #36]	@ (800b1e8 <UART_SetConfig+0x69c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 0320 	and.w	r3, r3, #32
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d016      	beq.n	800b1fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1ce:	4b06      	ldr	r3, [pc, #24]	@ (800b1e8 <UART_SetConfig+0x69c>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	08db      	lsrs	r3, r3, #3
 800b1d4:	f003 0303 	and.w	r3, r3, #3
 800b1d8:	4a07      	ldr	r2, [pc, #28]	@ (800b1f8 <UART_SetConfig+0x6ac>)
 800b1da:	fa22 f303 	lsr.w	r3, r2, r3
 800b1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1e0:	e01c      	b.n	800b21c <UART_SetConfig+0x6d0>
 800b1e2:	bf00      	nop
 800b1e4:	40011400 	.word	0x40011400
 800b1e8:	58024400 	.word	0x58024400
 800b1ec:	40007800 	.word	0x40007800
 800b1f0:	40007c00 	.word	0x40007c00
 800b1f4:	58000c00 	.word	0x58000c00
 800b1f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b1fc:	4b9d      	ldr	r3, [pc, #628]	@ (800b474 <UART_SetConfig+0x928>)
 800b1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b200:	e00c      	b.n	800b21c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b202:	4b9d      	ldr	r3, [pc, #628]	@ (800b478 <UART_SetConfig+0x92c>)
 800b204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b206:	e009      	b.n	800b21c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b20e:	e005      	b.n	800b21c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b210:	2300      	movs	r3, #0
 800b212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b21a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b21c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 81de 	beq.w	800b5e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b228:	4a94      	ldr	r2, [pc, #592]	@ (800b47c <UART_SetConfig+0x930>)
 800b22a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b22e:	461a      	mov	r2, r3
 800b230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b232:	fbb3 f3f2 	udiv	r3, r3, r2
 800b236:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	4613      	mov	r3, r2
 800b23e:	005b      	lsls	r3, r3, #1
 800b240:	4413      	add	r3, r2
 800b242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b244:	429a      	cmp	r2, r3
 800b246:	d305      	bcc.n	800b254 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b24e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b250:	429a      	cmp	r2, r3
 800b252:	d903      	bls.n	800b25c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b25a:	e1c1      	b.n	800b5e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b25c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b25e:	2200      	movs	r2, #0
 800b260:	60bb      	str	r3, [r7, #8]
 800b262:	60fa      	str	r2, [r7, #12]
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b268:	4a84      	ldr	r2, [pc, #528]	@ (800b47c <UART_SetConfig+0x930>)
 800b26a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	2200      	movs	r2, #0
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	607a      	str	r2, [r7, #4]
 800b276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b27a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b27e:	f7f5 f887 	bl	8000390 <__aeabi_uldivmod>
 800b282:	4602      	mov	r2, r0
 800b284:	460b      	mov	r3, r1
 800b286:	4610      	mov	r0, r2
 800b288:	4619      	mov	r1, r3
 800b28a:	f04f 0200 	mov.w	r2, #0
 800b28e:	f04f 0300 	mov.w	r3, #0
 800b292:	020b      	lsls	r3, r1, #8
 800b294:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b298:	0202      	lsls	r2, r0, #8
 800b29a:	6979      	ldr	r1, [r7, #20]
 800b29c:	6849      	ldr	r1, [r1, #4]
 800b29e:	0849      	lsrs	r1, r1, #1
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	eb12 0804 	adds.w	r8, r2, r4
 800b2aa:	eb43 0905 	adc.w	r9, r3, r5
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	469a      	mov	sl, r3
 800b2b6:	4693      	mov	fp, r2
 800b2b8:	4652      	mov	r2, sl
 800b2ba:	465b      	mov	r3, fp
 800b2bc:	4640      	mov	r0, r8
 800b2be:	4649      	mov	r1, r9
 800b2c0:	f7f5 f866 	bl	8000390 <__aeabi_uldivmod>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2d2:	d308      	bcc.n	800b2e6 <UART_SetConfig+0x79a>
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2da:	d204      	bcs.n	800b2e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2e2:	60da      	str	r2, [r3, #12]
 800b2e4:	e17c      	b.n	800b5e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b2ec:	e178      	b.n	800b5e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	69db      	ldr	r3, [r3, #28]
 800b2f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2f6:	f040 80c5 	bne.w	800b484 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b2fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b2fe:	2b20      	cmp	r3, #32
 800b300:	dc48      	bgt.n	800b394 <UART_SetConfig+0x848>
 800b302:	2b00      	cmp	r3, #0
 800b304:	db7b      	blt.n	800b3fe <UART_SetConfig+0x8b2>
 800b306:	2b20      	cmp	r3, #32
 800b308:	d879      	bhi.n	800b3fe <UART_SetConfig+0x8b2>
 800b30a:	a201      	add	r2, pc, #4	@ (adr r2, 800b310 <UART_SetConfig+0x7c4>)
 800b30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b310:	0800b39b 	.word	0x0800b39b
 800b314:	0800b3a3 	.word	0x0800b3a3
 800b318:	0800b3ff 	.word	0x0800b3ff
 800b31c:	0800b3ff 	.word	0x0800b3ff
 800b320:	0800b3ab 	.word	0x0800b3ab
 800b324:	0800b3ff 	.word	0x0800b3ff
 800b328:	0800b3ff 	.word	0x0800b3ff
 800b32c:	0800b3ff 	.word	0x0800b3ff
 800b330:	0800b3bb 	.word	0x0800b3bb
 800b334:	0800b3ff 	.word	0x0800b3ff
 800b338:	0800b3ff 	.word	0x0800b3ff
 800b33c:	0800b3ff 	.word	0x0800b3ff
 800b340:	0800b3ff 	.word	0x0800b3ff
 800b344:	0800b3ff 	.word	0x0800b3ff
 800b348:	0800b3ff 	.word	0x0800b3ff
 800b34c:	0800b3ff 	.word	0x0800b3ff
 800b350:	0800b3cb 	.word	0x0800b3cb
 800b354:	0800b3ff 	.word	0x0800b3ff
 800b358:	0800b3ff 	.word	0x0800b3ff
 800b35c:	0800b3ff 	.word	0x0800b3ff
 800b360:	0800b3ff 	.word	0x0800b3ff
 800b364:	0800b3ff 	.word	0x0800b3ff
 800b368:	0800b3ff 	.word	0x0800b3ff
 800b36c:	0800b3ff 	.word	0x0800b3ff
 800b370:	0800b3ff 	.word	0x0800b3ff
 800b374:	0800b3ff 	.word	0x0800b3ff
 800b378:	0800b3ff 	.word	0x0800b3ff
 800b37c:	0800b3ff 	.word	0x0800b3ff
 800b380:	0800b3ff 	.word	0x0800b3ff
 800b384:	0800b3ff 	.word	0x0800b3ff
 800b388:	0800b3ff 	.word	0x0800b3ff
 800b38c:	0800b3ff 	.word	0x0800b3ff
 800b390:	0800b3f1 	.word	0x0800b3f1
 800b394:	2b40      	cmp	r3, #64	@ 0x40
 800b396:	d02e      	beq.n	800b3f6 <UART_SetConfig+0x8aa>
 800b398:	e031      	b.n	800b3fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b39a:	f7fa fa51 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 800b39e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b3a0:	e033      	b.n	800b40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3a2:	f7fa fa63 	bl	800586c <HAL_RCC_GetPCLK2Freq>
 800b3a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b3a8:	e02f      	b.n	800b40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fc fa12 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3b8:	e027      	b.n	800b40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3ba:	f107 0318 	add.w	r3, r7, #24
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fc fb5e 	bl	8007a80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3c8:	e01f      	b.n	800b40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3ca:	4b2d      	ldr	r3, [pc, #180]	@ (800b480 <UART_SetConfig+0x934>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 0320 	and.w	r3, r3, #32
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d009      	beq.n	800b3ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3d6:	4b2a      	ldr	r3, [pc, #168]	@ (800b480 <UART_SetConfig+0x934>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	08db      	lsrs	r3, r3, #3
 800b3dc:	f003 0303 	and.w	r3, r3, #3
 800b3e0:	4a24      	ldr	r2, [pc, #144]	@ (800b474 <UART_SetConfig+0x928>)
 800b3e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3e8:	e00f      	b.n	800b40a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b3ea:	4b22      	ldr	r3, [pc, #136]	@ (800b474 <UART_SetConfig+0x928>)
 800b3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ee:	e00c      	b.n	800b40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3f0:	4b21      	ldr	r3, [pc, #132]	@ (800b478 <UART_SetConfig+0x92c>)
 800b3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f4:	e009      	b.n	800b40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3fc:	e005      	b.n	800b40a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b408:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b40a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f000 80e7 	beq.w	800b5e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b416:	4a19      	ldr	r2, [pc, #100]	@ (800b47c <UART_SetConfig+0x930>)
 800b418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b41c:	461a      	mov	r2, r3
 800b41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b420:	fbb3 f3f2 	udiv	r3, r3, r2
 800b424:	005a      	lsls	r2, r3, #1
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	085b      	lsrs	r3, r3, #1
 800b42c:	441a      	add	r2, r3
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	fbb2 f3f3 	udiv	r3, r2, r3
 800b436:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43a:	2b0f      	cmp	r3, #15
 800b43c:	d916      	bls.n	800b46c <UART_SetConfig+0x920>
 800b43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b444:	d212      	bcs.n	800b46c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b448:	b29b      	uxth	r3, r3
 800b44a:	f023 030f 	bic.w	r3, r3, #15
 800b44e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b452:	085b      	lsrs	r3, r3, #1
 800b454:	b29b      	uxth	r3, r3
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b45e:	4313      	orrs	r3, r2
 800b460:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b468:	60da      	str	r2, [r3, #12]
 800b46a:	e0b9      	b.n	800b5e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b472:	e0b5      	b.n	800b5e0 <UART_SetConfig+0xa94>
 800b474:	03d09000 	.word	0x03d09000
 800b478:	003d0900 	.word	0x003d0900
 800b47c:	0801155c 	.word	0x0801155c
 800b480:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b484:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b488:	2b20      	cmp	r3, #32
 800b48a:	dc49      	bgt.n	800b520 <UART_SetConfig+0x9d4>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	db7c      	blt.n	800b58a <UART_SetConfig+0xa3e>
 800b490:	2b20      	cmp	r3, #32
 800b492:	d87a      	bhi.n	800b58a <UART_SetConfig+0xa3e>
 800b494:	a201      	add	r2, pc, #4	@ (adr r2, 800b49c <UART_SetConfig+0x950>)
 800b496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49a:	bf00      	nop
 800b49c:	0800b527 	.word	0x0800b527
 800b4a0:	0800b52f 	.word	0x0800b52f
 800b4a4:	0800b58b 	.word	0x0800b58b
 800b4a8:	0800b58b 	.word	0x0800b58b
 800b4ac:	0800b537 	.word	0x0800b537
 800b4b0:	0800b58b 	.word	0x0800b58b
 800b4b4:	0800b58b 	.word	0x0800b58b
 800b4b8:	0800b58b 	.word	0x0800b58b
 800b4bc:	0800b547 	.word	0x0800b547
 800b4c0:	0800b58b 	.word	0x0800b58b
 800b4c4:	0800b58b 	.word	0x0800b58b
 800b4c8:	0800b58b 	.word	0x0800b58b
 800b4cc:	0800b58b 	.word	0x0800b58b
 800b4d0:	0800b58b 	.word	0x0800b58b
 800b4d4:	0800b58b 	.word	0x0800b58b
 800b4d8:	0800b58b 	.word	0x0800b58b
 800b4dc:	0800b557 	.word	0x0800b557
 800b4e0:	0800b58b 	.word	0x0800b58b
 800b4e4:	0800b58b 	.word	0x0800b58b
 800b4e8:	0800b58b 	.word	0x0800b58b
 800b4ec:	0800b58b 	.word	0x0800b58b
 800b4f0:	0800b58b 	.word	0x0800b58b
 800b4f4:	0800b58b 	.word	0x0800b58b
 800b4f8:	0800b58b 	.word	0x0800b58b
 800b4fc:	0800b58b 	.word	0x0800b58b
 800b500:	0800b58b 	.word	0x0800b58b
 800b504:	0800b58b 	.word	0x0800b58b
 800b508:	0800b58b 	.word	0x0800b58b
 800b50c:	0800b58b 	.word	0x0800b58b
 800b510:	0800b58b 	.word	0x0800b58b
 800b514:	0800b58b 	.word	0x0800b58b
 800b518:	0800b58b 	.word	0x0800b58b
 800b51c:	0800b57d 	.word	0x0800b57d
 800b520:	2b40      	cmp	r3, #64	@ 0x40
 800b522:	d02e      	beq.n	800b582 <UART_SetConfig+0xa36>
 800b524:	e031      	b.n	800b58a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b526:	f7fa f98b 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 800b52a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b52c:	e033      	b.n	800b596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b52e:	f7fa f99d 	bl	800586c <HAL_RCC_GetPCLK2Freq>
 800b532:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b534:	e02f      	b.n	800b596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fc f94c 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b544:	e027      	b.n	800b596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b546:	f107 0318 	add.w	r3, r7, #24
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fc fa98 	bl	8007a80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b554:	e01f      	b.n	800b596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b556:	4b2d      	ldr	r3, [pc, #180]	@ (800b60c <UART_SetConfig+0xac0>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 0320 	and.w	r3, r3, #32
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d009      	beq.n	800b576 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b562:	4b2a      	ldr	r3, [pc, #168]	@ (800b60c <UART_SetConfig+0xac0>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	08db      	lsrs	r3, r3, #3
 800b568:	f003 0303 	and.w	r3, r3, #3
 800b56c:	4a28      	ldr	r2, [pc, #160]	@ (800b610 <UART_SetConfig+0xac4>)
 800b56e:	fa22 f303 	lsr.w	r3, r2, r3
 800b572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b574:	e00f      	b.n	800b596 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b576:	4b26      	ldr	r3, [pc, #152]	@ (800b610 <UART_SetConfig+0xac4>)
 800b578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b57a:	e00c      	b.n	800b596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b57c:	4b25      	ldr	r3, [pc, #148]	@ (800b614 <UART_SetConfig+0xac8>)
 800b57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b580:	e009      	b.n	800b596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b588:	e005      	b.n	800b596 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b58a:	2300      	movs	r3, #0
 800b58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b594:	bf00      	nop
    }

    if (pclk != 0U)
 800b596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d021      	beq.n	800b5e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a0:	4a1d      	ldr	r2, [pc, #116]	@ (800b618 <UART_SetConfig+0xacc>)
 800b5a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	085b      	lsrs	r3, r3, #1
 800b5b4:	441a      	add	r2, r3
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c2:	2b0f      	cmp	r3, #15
 800b5c4:	d909      	bls.n	800b5da <UART_SetConfig+0xa8e>
 800b5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5cc:	d205      	bcs.n	800b5da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d0:	b29a      	uxth	r2, r3
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	60da      	str	r2, [r3, #12]
 800b5d8:	e002      	b.n	800b5e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b5fc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b600:	4618      	mov	r0, r3
 800b602:	3748      	adds	r7, #72	@ 0x48
 800b604:	46bd      	mov	sp, r7
 800b606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b60a:	bf00      	nop
 800b60c:	58024400 	.word	0x58024400
 800b610:	03d09000 	.word	0x03d09000
 800b614:	003d0900 	.word	0x003d0900
 800b618:	0801155c 	.word	0x0801155c

0800b61c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b628:	f003 0308 	and.w	r3, r3, #8
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00a      	beq.n	800b646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	430a      	orrs	r2, r1
 800b644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64a:	f003 0301 	and.w	r3, r3, #1
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00a      	beq.n	800b668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	430a      	orrs	r2, r1
 800b666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b66c:	f003 0302 	and.w	r3, r3, #2
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00a      	beq.n	800b68a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	430a      	orrs	r2, r1
 800b688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b68e:	f003 0304 	and.w	r3, r3, #4
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00a      	beq.n	800b6ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	430a      	orrs	r2, r1
 800b6aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b0:	f003 0310 	and.w	r3, r3, #16
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00a      	beq.n	800b6ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	430a      	orrs	r2, r1
 800b6cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d2:	f003 0320 	and.w	r3, r3, #32
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00a      	beq.n	800b6f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	430a      	orrs	r2, r1
 800b6ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01a      	beq.n	800b732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	430a      	orrs	r2, r1
 800b710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b71a:	d10a      	bne.n	800b732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	430a      	orrs	r2, r1
 800b730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00a      	beq.n	800b754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	430a      	orrs	r2, r1
 800b752:	605a      	str	r2, [r3, #4]
  }
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b098      	sub	sp, #96	@ 0x60
 800b764:	af02      	add	r7, sp, #8
 800b766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b770:	f7f5 ff5c 	bl	800162c <HAL_GetTick>
 800b774:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 0308 	and.w	r3, r3, #8
 800b780:	2b08      	cmp	r3, #8
 800b782:	d12f      	bne.n	800b7e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b784:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b78c:	2200      	movs	r2, #0
 800b78e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f88e 	bl	800b8b4 <UART_WaitOnFlagUntilTimeout>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d022      	beq.n	800b7e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a6:	e853 3f00 	ldrex	r3, [r3]
 800b7aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7c4:	e841 2300 	strex	r3, r2, [r1]
 800b7c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1e6      	bne.n	800b79e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2220      	movs	r2, #32
 800b7d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	e063      	b.n	800b8ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0304 	and.w	r3, r3, #4
 800b7ee:	2b04      	cmp	r3, #4
 800b7f0:	d149      	bne.n	800b886 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f857 	bl	800b8b4 <UART_WaitOnFlagUntilTimeout>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d03c      	beq.n	800b886 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b814:	e853 3f00 	ldrex	r3, [r3]
 800b818:	623b      	str	r3, [r7, #32]
   return(result);
 800b81a:	6a3b      	ldr	r3, [r7, #32]
 800b81c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b820:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	461a      	mov	r2, r3
 800b828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b82a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b82c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b832:	e841 2300 	strex	r3, r2, [r1]
 800b836:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d1e6      	bne.n	800b80c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3308      	adds	r3, #8
 800b844:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	e853 3f00 	ldrex	r3, [r3]
 800b84c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f023 0301 	bic.w	r3, r3, #1
 800b854:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	3308      	adds	r3, #8
 800b85c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b85e:	61fa      	str	r2, [r7, #28]
 800b860:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b862:	69b9      	ldr	r1, [r7, #24]
 800b864:	69fa      	ldr	r2, [r7, #28]
 800b866:	e841 2300 	strex	r3, r2, [r1]
 800b86a:	617b      	str	r3, [r7, #20]
   return(result);
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1e5      	bne.n	800b83e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2220      	movs	r2, #32
 800b876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b882:	2303      	movs	r3, #3
 800b884:	e012      	b.n	800b8ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2220      	movs	r2, #32
 800b88a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2220      	movs	r2, #32
 800b892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3758      	adds	r7, #88	@ 0x58
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	603b      	str	r3, [r7, #0]
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8c4:	e04f      	b.n	800b966 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8cc:	d04b      	beq.n	800b966 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8ce:	f7f5 fead 	bl	800162c <HAL_GetTick>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	69ba      	ldr	r2, [r7, #24]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d302      	bcc.n	800b8e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d101      	bne.n	800b8e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	e04e      	b.n	800b986 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 0304 	and.w	r3, r3, #4
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d037      	beq.n	800b966 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b80      	cmp	r3, #128	@ 0x80
 800b8fa:	d034      	beq.n	800b966 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2b40      	cmp	r3, #64	@ 0x40
 800b900:	d031      	beq.n	800b966 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	69db      	ldr	r3, [r3, #28]
 800b908:	f003 0308 	and.w	r3, r3, #8
 800b90c:	2b08      	cmp	r3, #8
 800b90e:	d110      	bne.n	800b932 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2208      	movs	r2, #8
 800b916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f000 f839 	bl	800b990 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2208      	movs	r2, #8
 800b922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e029      	b.n	800b986 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	69db      	ldr	r3, [r3, #28]
 800b938:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b93c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b940:	d111      	bne.n	800b966 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b94a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f000 f81f 	bl	800b990 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2220      	movs	r2, #32
 800b956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	e00f      	b.n	800b986 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	69da      	ldr	r2, [r3, #28]
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	4013      	ands	r3, r2
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	429a      	cmp	r2, r3
 800b974:	bf0c      	ite	eq
 800b976:	2301      	moveq	r3, #1
 800b978:	2300      	movne	r3, #0
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	461a      	mov	r2, r3
 800b97e:	79fb      	ldrb	r3, [r7, #7]
 800b980:	429a      	cmp	r2, r3
 800b982:	d0a0      	beq.n	800b8c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
	...

0800b990 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b990:	b480      	push	{r7}
 800b992:	b095      	sub	sp, #84	@ 0x54
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9a0:	e853 3f00 	ldrex	r3, [r3]
 800b9a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9be:	e841 2300 	strex	r3, r2, [r1]
 800b9c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1e6      	bne.n	800b998 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d2:	6a3b      	ldr	r3, [r7, #32]
 800b9d4:	e853 3f00 	ldrex	r3, [r3]
 800b9d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9da:	69fa      	ldr	r2, [r7, #28]
 800b9dc:	4b1e      	ldr	r3, [pc, #120]	@ (800ba58 <UART_EndRxTransfer+0xc8>)
 800b9de:	4013      	ands	r3, r2
 800b9e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	3308      	adds	r3, #8
 800b9e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b9ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9f2:	e841 2300 	strex	r3, r2, [r1]
 800b9f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1e5      	bne.n	800b9ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d118      	bne.n	800ba38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	e853 3f00 	ldrex	r3, [r3]
 800ba12:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f023 0310 	bic.w	r3, r3, #16
 800ba1a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	461a      	mov	r2, r3
 800ba22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba24:	61bb      	str	r3, [r7, #24]
 800ba26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba28:	6979      	ldr	r1, [r7, #20]
 800ba2a:	69ba      	ldr	r2, [r7, #24]
 800ba2c:	e841 2300 	strex	r3, r2, [r1]
 800ba30:	613b      	str	r3, [r7, #16]
   return(result);
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1e6      	bne.n	800ba06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2220      	movs	r2, #32
 800ba3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba4c:	bf00      	nop
 800ba4e:	3754      	adds	r7, #84	@ 0x54
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr
 800ba58:	effffffe 	.word	0xeffffffe

0800ba5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f7ff f854 	bl	800ab20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba78:	bf00      	nop
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b08f      	sub	sp, #60	@ 0x3c
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba8e:	2b21      	cmp	r3, #33	@ 0x21
 800ba90:	d14c      	bne.n	800bb2c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d132      	bne.n	800bb04 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	e853 3f00 	ldrex	r3, [r3]
 800baaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bab2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	461a      	mov	r2, r3
 800baba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800babc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800babe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bac4:	e841 2300 	strex	r3, r2, [r1]
 800bac8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800baca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d1e6      	bne.n	800ba9e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	e853 3f00 	ldrex	r3, [r3]
 800badc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bae4:	633b      	str	r3, [r7, #48]	@ 0x30
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	461a      	mov	r2, r3
 800baec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baee:	61bb      	str	r3, [r7, #24]
 800baf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf2:	6979      	ldr	r1, [r7, #20]
 800baf4:	69ba      	ldr	r2, [r7, #24]
 800baf6:	e841 2300 	strex	r3, r2, [r1]
 800bafa:	613b      	str	r3, [r7, #16]
   return(result);
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1e6      	bne.n	800bad0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bb02:	e013      	b.n	800bb2c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb08:	781a      	ldrb	r2, [r3, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb14:	1c5a      	adds	r2, r3, #1
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	3b01      	subs	r3, #1
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800bb2c:	bf00      	nop
 800bb2e:	373c      	adds	r7, #60	@ 0x3c
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b091      	sub	sp, #68	@ 0x44
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb46:	2b21      	cmp	r3, #33	@ 0x21
 800bb48:	d151      	bne.n	800bbee <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d132      	bne.n	800bbbc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5e:	e853 3f00 	ldrex	r3, [r3]
 800bb62:	623b      	str	r3, [r7, #32]
   return(result);
 800bb64:	6a3b      	ldr	r3, [r7, #32]
 800bb66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	461a      	mov	r2, r3
 800bb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb74:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb7c:	e841 2300 	strex	r3, r2, [r1]
 800bb80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1e6      	bne.n	800bb56 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	e853 3f00 	ldrex	r3, [r3]
 800bb94:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	461a      	mov	r2, r3
 800bba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba6:	61fb      	str	r3, [r7, #28]
 800bba8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbaa:	69b9      	ldr	r1, [r7, #24]
 800bbac:	69fa      	ldr	r2, [r7, #28]
 800bbae:	e841 2300 	strex	r3, r2, [r1]
 800bbb2:	617b      	str	r3, [r7, #20]
   return(result);
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1e6      	bne.n	800bb88 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bbba:	e018      	b.n	800bbee <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bbc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc4:	881b      	ldrh	r3, [r3, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbd0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbd6:	1c9a      	adds	r2, r3, #2
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800bbee:	bf00      	nop
 800bbf0:	3744      	adds	r7, #68	@ 0x44
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b091      	sub	sp, #68	@ 0x44
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc08:	2b21      	cmp	r3, #33	@ 0x21
 800bc0a:	d160      	bne.n	800bcce <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc12:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800bc14:	e057      	b.n	800bcc6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d133      	bne.n	800bc8a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	3308      	adds	r3, #8
 800bc28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2c:	e853 3f00 	ldrex	r3, [r3]
 800bc30:	623b      	str	r3, [r7, #32]
   return(result);
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bc38:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3308      	adds	r3, #8
 800bc40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc42:	633a      	str	r2, [r7, #48]	@ 0x30
 800bc44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc4a:	e841 2300 	strex	r3, r2, [r1]
 800bc4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1e5      	bne.n	800bc22 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	e853 3f00 	ldrex	r3, [r3]
 800bc62:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	461a      	mov	r2, r3
 800bc72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc74:	61fb      	str	r3, [r7, #28]
 800bc76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc78:	69b9      	ldr	r1, [r7, #24]
 800bc7a:	69fa      	ldr	r2, [r7, #28]
 800bc7c:	e841 2300 	strex	r3, r2, [r1]
 800bc80:	617b      	str	r3, [r7, #20]
   return(result);
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1e6      	bne.n	800bc56 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800bc88:	e021      	b.n	800bcce <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	69db      	ldr	r3, [r3, #28]
 800bc90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d013      	beq.n	800bcc0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc9c:	781a      	ldrb	r2, [r3, #0]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bca8:	1c5a      	adds	r2, r3, #1
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bcc0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800bcc6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1a4      	bne.n	800bc16 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800bccc:	e7ff      	b.n	800bcce <UART_TxISR_8BIT_FIFOEN+0xd4>
 800bcce:	bf00      	nop
 800bcd0:	3744      	adds	r7, #68	@ 0x44
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b091      	sub	sp, #68	@ 0x44
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bce8:	2b21      	cmp	r3, #33	@ 0x21
 800bcea:	d165      	bne.n	800bdb8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcf2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800bcf4:	e05c      	b.n	800bdb0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d133      	bne.n	800bd6a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	3308      	adds	r3, #8
 800bd08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0a:	6a3b      	ldr	r3, [r7, #32]
 800bd0c:	e853 3f00 	ldrex	r3, [r3]
 800bd10:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bd18:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3308      	adds	r3, #8
 800bd20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bd24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd2a:	e841 2300 	strex	r3, r2, [r1]
 800bd2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1e5      	bne.n	800bd02 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	e853 3f00 	ldrex	r3, [r3]
 800bd42:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	461a      	mov	r2, r3
 800bd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd54:	61bb      	str	r3, [r7, #24]
 800bd56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd58:	6979      	ldr	r1, [r7, #20]
 800bd5a:	69ba      	ldr	r2, [r7, #24]
 800bd5c:	e841 2300 	strex	r3, r2, [r1]
 800bd60:	613b      	str	r3, [r7, #16]
   return(result);
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1e6      	bne.n	800bd36 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800bd68:	e026      	b.n	800bdb8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	69db      	ldr	r3, [r3, #28]
 800bd70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d018      	beq.n	800bdaa <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd7c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd80:	881b      	ldrh	r3, [r3, #0]
 800bd82:	461a      	mov	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd8c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd92:	1c9a      	adds	r2, r3, #2
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	3b01      	subs	r3, #1
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bdaa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bdac:	3b01      	subs	r3, #1
 800bdae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800bdb0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d19f      	bne.n	800bcf6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800bdb6:	e7ff      	b.n	800bdb8 <UART_TxISR_16BIT_FIFOEN+0xde>
 800bdb8:	bf00      	nop
 800bdba:	3744      	adds	r7, #68	@ 0x44
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b088      	sub	sp, #32
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	e853 3f00 	ldrex	r3, [r3]
 800bdd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bde0:	61fb      	str	r3, [r7, #28]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	461a      	mov	r2, r3
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	61bb      	str	r3, [r7, #24]
 800bdec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdee:	6979      	ldr	r1, [r7, #20]
 800bdf0:	69ba      	ldr	r2, [r7, #24]
 800bdf2:	e841 2300 	strex	r3, r2, [r1]
 800bdf6:	613b      	str	r3, [r7, #16]
   return(result);
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1e6      	bne.n	800bdcc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2220      	movs	r2, #32
 800be02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f7fe fe7d 	bl	800ab0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be12:	bf00      	nop
 800be14:	3720      	adds	r7, #32
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be1a:	b480      	push	{r7}
 800be1c:	b083      	sub	sp, #12
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800be22:	bf00      	nop
 800be24:	370c      	adds	r7, #12
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800be2e:	b480      	push	{r7}
 800be30:	b083      	sub	sp, #12
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800be36:	bf00      	nop
 800be38:	370c      	adds	r7, #12
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be42:	b480      	push	{r7}
 800be44:	b083      	sub	sp, #12
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800be4a:	bf00      	nop
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be56:	b480      	push	{r7}
 800be58:	b085      	sub	sp, #20
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be64:	2b01      	cmp	r3, #1
 800be66:	d101      	bne.n	800be6c <HAL_UARTEx_DisableFifoMode+0x16>
 800be68:	2302      	movs	r3, #2
 800be6a:	e027      	b.n	800bebc <HAL_UARTEx_DisableFifoMode+0x66>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2224      	movs	r2, #36	@ 0x24
 800be78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f022 0201 	bic.w	r2, r2, #1
 800be92:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800be9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2220      	movs	r2, #32
 800beae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3714      	adds	r7, #20
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d101      	bne.n	800bee0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bedc:	2302      	movs	r3, #2
 800bede:	e02d      	b.n	800bf3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2224      	movs	r2, #36	@ 0x24
 800beec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f022 0201 	bic.w	r2, r2, #1
 800bf06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	683a      	ldr	r2, [r7, #0]
 800bf18:	430a      	orrs	r2, r1
 800bf1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 f84f 	bl	800bfc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2220      	movs	r2, #32
 800bf2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d101      	bne.n	800bf5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf58:	2302      	movs	r3, #2
 800bf5a:	e02d      	b.n	800bfb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2224      	movs	r2, #36	@ 0x24
 800bf68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f022 0201 	bic.w	r2, r2, #1
 800bf82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	683a      	ldr	r2, [r7, #0]
 800bf94:	430a      	orrs	r2, r1
 800bf96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 f811 	bl	800bfc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2220      	movs	r2, #32
 800bfaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d108      	bne.n	800bfe2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfe0:	e031      	b.n	800c046 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfe2:	2310      	movs	r3, #16
 800bfe4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfe6:	2310      	movs	r3, #16
 800bfe8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	0e5b      	lsrs	r3, r3, #25
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	f003 0307 	and.w	r3, r3, #7
 800bff8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	0f5b      	lsrs	r3, r3, #29
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 0307 	and.w	r3, r3, #7
 800c008:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c00a:	7bbb      	ldrb	r3, [r7, #14]
 800c00c:	7b3a      	ldrb	r2, [r7, #12]
 800c00e:	4911      	ldr	r1, [pc, #68]	@ (800c054 <UARTEx_SetNbDataToProcess+0x94>)
 800c010:	5c8a      	ldrb	r2, [r1, r2]
 800c012:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c016:	7b3a      	ldrb	r2, [r7, #12]
 800c018:	490f      	ldr	r1, [pc, #60]	@ (800c058 <UARTEx_SetNbDataToProcess+0x98>)
 800c01a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c01c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c020:	b29a      	uxth	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	7b7a      	ldrb	r2, [r7, #13]
 800c02c:	4909      	ldr	r1, [pc, #36]	@ (800c054 <UARTEx_SetNbDataToProcess+0x94>)
 800c02e:	5c8a      	ldrb	r2, [r1, r2]
 800c030:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c034:	7b7a      	ldrb	r2, [r7, #13]
 800c036:	4908      	ldr	r1, [pc, #32]	@ (800c058 <UARTEx_SetNbDataToProcess+0x98>)
 800c038:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c03a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c03e:	b29a      	uxth	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c046:	bf00      	nop
 800c048:	3714      	adds	r7, #20
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	08011574 	.word	0x08011574
 800c058:	0801157c 	.word	0x0801157c

0800c05c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c05c:	b084      	sub	sp, #16
 800c05e:	b480      	push	{r7}
 800c060:	b085      	sub	sp, #20
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	f107 001c 	add.w	r0, r7, #28
 800c06a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c06e:	2300      	movs	r3, #0
 800c070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c072:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c074:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c076:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800c07a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800c07e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800c082:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c084:	68fa      	ldr	r2, [r7, #12]
 800c086:	4313      	orrs	r3, r2
 800c088:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685a      	ldr	r2, [r3, #4]
 800c08e:	4b07      	ldr	r3, [pc, #28]	@ (800c0ac <SDMMC_Init+0x50>)
 800c090:	4013      	ands	r3, r2
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	431a      	orrs	r2, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	b004      	add	sp, #16
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop
 800c0ac:	ffc02c00 	.word	0xffc02c00

0800c0b0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	370c      	adds	r7, #12
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b083      	sub	sp, #12
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
 800c0d2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f043 0203 	orr.w	r2, r3, #3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800c10e:	b480      	push	{r7}
 800c110:	b083      	sub	sp, #12
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 0303 	and.w	r3, r3, #3
}
 800c11e:	4618      	mov	r0, r3
 800c120:	370c      	adds	r7, #12
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
	...

0800c12c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c136:	2300      	movs	r3, #0
 800c138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c14a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c150:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c156:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68da      	ldr	r2, [r3, #12]
 800c162:	4b06      	ldr	r3, [pc, #24]	@ (800c17c <SDMMC_SendCommand+0x50>)
 800c164:	4013      	ands	r3, r2
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	431a      	orrs	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3714      	adds	r7, #20
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	fffee0c0 	.word	0xfffee0c0

0800c180 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	691b      	ldr	r3, [r3, #16]
 800c18c:	b2db      	uxtb	r3, r3
}
 800c18e:	4618      	mov	r0, r3
 800c190:	370c      	adds	r7, #12
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c19a:	b480      	push	{r7}
 800c19c:	b085      	sub	sp, #20
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	3314      	adds	r3, #20
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	685a      	ldr	r2, [r3, #4]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c1e6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800c1ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800c1f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	431a      	orrs	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c20a:	2300      	movs	r3, #0

}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3714      	adds	r7, #20
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b088      	sub	sp, #32
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c226:	2310      	movs	r3, #16
 800c228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c22a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c22e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c230:	2300      	movs	r3, #0
 800c232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c238:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c23a:	f107 0308 	add.w	r3, r7, #8
 800c23e:	4619      	mov	r1, r3
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7ff ff73 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c24a:	2110      	movs	r1, #16
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 fa5f 	bl	800c710 <SDMMC_GetCmdResp1>
 800c252:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c254:	69fb      	ldr	r3, [r7, #28]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3720      	adds	r7, #32
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b088      	sub	sp, #32
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
 800c266:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c26c:	2311      	movs	r3, #17
 800c26e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c270:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c274:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c276:	2300      	movs	r3, #0
 800c278:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c27a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c27e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c280:	f107 0308 	add.w	r3, r7, #8
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7ff ff50 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c28c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c290:	2111      	movs	r1, #17
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 fa3c 	bl	800c710 <SDMMC_GetCmdResp1>
 800c298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c29a:	69fb      	ldr	r3, [r7, #28]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3720      	adds	r7, #32
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b088      	sub	sp, #32
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c2b2:	2312      	movs	r3, #18
 800c2b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2c6:	f107 0308 	add.w	r3, r7, #8
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f7ff ff2d 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c2d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2d6:	2112      	movs	r1, #18
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fa19 	bl	800c710 <SDMMC_GetCmdResp1>
 800c2de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2e0:	69fb      	ldr	r3, [r7, #28]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3720      	adds	r7, #32
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b088      	sub	sp, #32
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c2f8:	2318      	movs	r3, #24
 800c2fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c302:	2300      	movs	r3, #0
 800c304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c306:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c30a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c30c:	f107 0308 	add.w	r3, r7, #8
 800c310:	4619      	mov	r1, r3
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7ff ff0a 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c31c:	2118      	movs	r1, #24
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f9f6 	bl	800c710 <SDMMC_GetCmdResp1>
 800c324:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c326:	69fb      	ldr	r3, [r7, #28]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3720      	adds	r7, #32
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c33e:	2319      	movs	r3, #25
 800c340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c342:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c348:	2300      	movs	r3, #0
 800c34a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c34c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c350:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c352:	f107 0308 	add.w	r3, r7, #8
 800c356:	4619      	mov	r1, r3
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7ff fee7 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c35e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c362:	2119      	movs	r1, #25
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 f9d3 	bl	800c710 <SDMMC_GetCmdResp1>
 800c36a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c36c:	69fb      	ldr	r3, [r7, #28]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3720      	adds	r7, #32
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
	...

0800c378 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b088      	sub	sp, #32
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c380:	2300      	movs	r3, #0
 800c382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c384:	230c      	movs	r3, #12
 800c386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c388:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c38c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c38e:	2300      	movs	r3, #0
 800c390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c392:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c396:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3b0:	f107 0308 	add.w	r3, r7, #8
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f7ff feb8 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c3bc:	4a0b      	ldr	r2, [pc, #44]	@ (800c3ec <SDMMC_CmdStopTransfer+0x74>)
 800c3be:	210c      	movs	r1, #12
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 f9a5 	bl	800c710 <SDMMC_GetCmdResp1>
 800c3c6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c3da:	d101      	bne.n	800c3e0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3720      	adds	r7, #32
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	05f5e100 	.word	0x05f5e100

0800c3f0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b088      	sub	sp, #32
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c3fe:	2307      	movs	r3, #7
 800c400:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c402:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c408:	2300      	movs	r3, #0
 800c40a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c40c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c410:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c412:	f107 0308 	add.w	r3, r7, #8
 800c416:	4619      	mov	r1, r3
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7ff fe87 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c41e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c422:	2107      	movs	r1, #7
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f973 	bl	800c710 <SDMMC_GetCmdResp1>
 800c42a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c42c:	69fb      	ldr	r3, [r7, #28]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3720      	adds	r7, #32
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b088      	sub	sp, #32
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c43e:	2300      	movs	r3, #0
 800c440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c442:	2300      	movs	r3, #0
 800c444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c446:	2300      	movs	r3, #0
 800c448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c44a:	2300      	movs	r3, #0
 800c44c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c44e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c452:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c454:	f107 0308 	add.w	r3, r7, #8
 800c458:	4619      	mov	r1, r3
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7ff fe66 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 fb97 	bl	800cb94 <SDMMC_GetCmdError>
 800c466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c468:	69fb      	ldr	r3, [r7, #28]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3720      	adds	r7, #32
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b088      	sub	sp, #32
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c47a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c47e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c480:	2308      	movs	r3, #8
 800c482:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c484:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c488:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c48a:	2300      	movs	r3, #0
 800c48c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c48e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c492:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c494:	f107 0308 	add.w	r3, r7, #8
 800c498:	4619      	mov	r1, r3
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f7ff fe46 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 fb29 	bl	800caf8 <SDMMC_GetCmdResp7>
 800c4a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4a8:	69fb      	ldr	r3, [r7, #28]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3720      	adds	r7, #32
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b088      	sub	sp, #32
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c4c0:	2337      	movs	r3, #55	@ 0x37
 800c4c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c4c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c4d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4d4:	f107 0308 	add.w	r3, r7, #8
 800c4d8:	4619      	mov	r1, r3
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7ff fe26 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c4e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4e4:	2137      	movs	r1, #55	@ 0x37
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 f912 	bl	800c710 <SDMMC_GetCmdResp1>
 800c4ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4ee:	69fb      	ldr	r3, [r7, #28]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3720      	adds	r7, #32
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b088      	sub	sp, #32
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c506:	2329      	movs	r3, #41	@ 0x29
 800c508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c50a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c50e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c510:	2300      	movs	r3, #0
 800c512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c518:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c51a:	f107 0308 	add.w	r3, r7, #8
 800c51e:	4619      	mov	r1, r3
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7ff fe03 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fa2e 	bl	800c988 <SDMMC_GetCmdResp3>
 800c52c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c52e:	69fb      	ldr	r3, [r7, #28]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3720      	adds	r7, #32
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b088      	sub	sp, #32
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c546:	2306      	movs	r3, #6
 800c548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c54a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c54e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c550:	2300      	movs	r3, #0
 800c552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c558:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c55a:	f107 0308 	add.w	r3, r7, #8
 800c55e:	4619      	mov	r1, r3
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7ff fde3 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c56a:	2106      	movs	r1, #6
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 f8cf 	bl	800c710 <SDMMC_GetCmdResp1>
 800c572:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c574:	69fb      	ldr	r3, [r7, #28]
}
 800c576:	4618      	mov	r0, r3
 800c578:	3720      	adds	r7, #32
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}

0800c57e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b088      	sub	sp, #32
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c586:	2300      	movs	r3, #0
 800c588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c58a:	2333      	movs	r3, #51	@ 0x33
 800c58c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c58e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c594:	2300      	movs	r3, #0
 800c596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c59c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c59e:	f107 0308 	add.w	r3, r7, #8
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f7ff fdc1 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c5aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5ae:	2133      	movs	r1, #51	@ 0x33
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f8ad 	bl	800c710 <SDMMC_GetCmdResp1>
 800c5b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5b8:	69fb      	ldr	r3, [r7, #28]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3720      	adds	r7, #32
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b088      	sub	sp, #32
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c5ce:	2302      	movs	r3, #2
 800c5d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c5d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c5d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c5e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5e2:	f107 0308 	add.w	r3, r7, #8
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff fd9f 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f980 	bl	800c8f4 <SDMMC_GetCmdResp2>
 800c5f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5f6:	69fb      	ldr	r3, [r7, #28]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3720      	adds	r7, #32
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b088      	sub	sp, #32
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c60e:	2309      	movs	r3, #9
 800c610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c612:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c616:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c618:	2300      	movs	r3, #0
 800c61a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c61c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c620:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c622:	f107 0308 	add.w	r3, r7, #8
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7ff fd7f 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 f960 	bl	800c8f4 <SDMMC_GetCmdResp2>
 800c634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c636:	69fb      	ldr	r3, [r7, #28]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3720      	adds	r7, #32
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b088      	sub	sp, #32
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c64a:	2300      	movs	r3, #0
 800c64c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c64e:	2303      	movs	r3, #3
 800c650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c652:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c658:	2300      	movs	r3, #0
 800c65a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c65c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c660:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c662:	f107 0308 	add.w	r3, r7, #8
 800c666:	4619      	mov	r1, r3
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7ff fd5f 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	2103      	movs	r1, #3
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f9c8 	bl	800ca08 <SDMMC_GetCmdResp6>
 800c678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c67a:	69fb      	ldr	r3, [r7, #28]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3720      	adds	r7, #32
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b088      	sub	sp, #32
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c692:	230d      	movs	r3, #13
 800c694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c696:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c69a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c69c:	2300      	movs	r3, #0
 800c69e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c6a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6a6:	f107 0308 	add.w	r3, r7, #8
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7ff fd3d 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c6b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6b6:	210d      	movs	r1, #13
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 f829 	bl	800c710 <SDMMC_GetCmdResp1>
 800c6be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6c0:	69fb      	ldr	r3, [r7, #28]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3720      	adds	r7, #32
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b088      	sub	sp, #32
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c6d6:	230d      	movs	r3, #13
 800c6d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c6de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c6e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6ea:	f107 0308 	add.w	r3, r7, #8
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff fd1b 	bl	800c12c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c6f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6fa:	210d      	movs	r1, #13
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 f807 	bl	800c710 <SDMMC_GetCmdResp1>
 800c702:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c704:	69fb      	ldr	r3, [r7, #28]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3720      	adds	r7, #32
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
	...

0800c710 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b088      	sub	sp, #32
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	460b      	mov	r3, r1
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c71e:	4b70      	ldr	r3, [pc, #448]	@ (800c8e0 <SDMMC_GetCmdResp1+0x1d0>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a70      	ldr	r2, [pc, #448]	@ (800c8e4 <SDMMC_GetCmdResp1+0x1d4>)
 800c724:	fba2 2303 	umull	r2, r3, r2, r3
 800c728:	0a5a      	lsrs	r2, r3, #9
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	fb02 f303 	mul.w	r3, r2, r3
 800c730:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	1e5a      	subs	r2, r3, #1
 800c736:	61fa      	str	r2, [r7, #28]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d102      	bne.n	800c742 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c73c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c740:	e0c9      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c746:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c748:	69ba      	ldr	r2, [r7, #24]
 800c74a:	4b67      	ldr	r3, [pc, #412]	@ (800c8e8 <SDMMC_GetCmdResp1+0x1d8>)
 800c74c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d0ef      	beq.n	800c732 <SDMMC_GetCmdResp1+0x22>
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1ea      	bne.n	800c732 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c760:	f003 0304 	and.w	r3, r3, #4
 800c764:	2b00      	cmp	r3, #0
 800c766:	d004      	beq.n	800c772 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2204      	movs	r2, #4
 800c76c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c76e:	2304      	movs	r3, #4
 800c770:	e0b1      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c776:	f003 0301 	and.w	r3, r3, #1
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d004      	beq.n	800c788 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2201      	movs	r2, #1
 800c782:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c784:	2301      	movs	r3, #1
 800c786:	e0a6      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	4a58      	ldr	r2, [pc, #352]	@ (800c8ec <SDMMC_GetCmdResp1+0x1dc>)
 800c78c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f7ff fcf6 	bl	800c180 <SDMMC_GetCommandResponse>
 800c794:	4603      	mov	r3, r0
 800c796:	461a      	mov	r2, r3
 800c798:	7afb      	ldrb	r3, [r7, #11]
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d001      	beq.n	800c7a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e099      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f7ff fcf8 	bl	800c19a <SDMMC_GetResponse>
 800c7aa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c7ac:	697a      	ldr	r2, [r7, #20]
 800c7ae:	4b50      	ldr	r3, [pc, #320]	@ (800c8f0 <SDMMC_GetCmdResp1+0x1e0>)
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d101      	bne.n	800c7ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	e08d      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	da02      	bge.n	800c7c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c7c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c7c4:	e087      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d001      	beq.n	800c7d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c7d0:	2340      	movs	r3, #64	@ 0x40
 800c7d2:	e080      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d001      	beq.n	800c7e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c7de:	2380      	movs	r3, #128	@ 0x80
 800c7e0:	e079      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c7ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c7f0:	e071      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d002      	beq.n	800c802 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c7fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c800:	e069      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c80c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c810:	e061      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c81c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c820:	e059      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c82c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c830:	e051      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d002      	beq.n	800c842 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c83c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c840:	e049      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d002      	beq.n	800c852 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c84c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c850:	e041      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d002      	beq.n	800c862 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c85c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c860:	e039      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c86c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c870:	e031      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c87c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c880:	e029      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d002      	beq.n	800c892 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c88c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c890:	e021      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c89c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c8a0:	e019      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d002      	beq.n	800c8b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c8ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c8b0:	e011      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d002      	beq.n	800c8c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c8bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c8c0:	e009      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f003 0308 	and.w	r3, r3, #8
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d002      	beq.n	800c8d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c8cc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c8d0:	e001      	b.n	800c8d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c8d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3720      	adds	r7, #32
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	24000000 	.word	0x24000000
 800c8e4:	10624dd3 	.word	0x10624dd3
 800c8e8:	00200045 	.word	0x00200045
 800c8ec:	002000c5 	.word	0x002000c5
 800c8f0:	fdffe008 	.word	0xfdffe008

0800c8f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c8fc:	4b1f      	ldr	r3, [pc, #124]	@ (800c97c <SDMMC_GetCmdResp2+0x88>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a1f      	ldr	r2, [pc, #124]	@ (800c980 <SDMMC_GetCmdResp2+0x8c>)
 800c902:	fba2 2303 	umull	r2, r3, r2, r3
 800c906:	0a5b      	lsrs	r3, r3, #9
 800c908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c90c:	fb02 f303 	mul.w	r3, r2, r3
 800c910:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	1e5a      	subs	r2, r3, #1
 800c916:	60fa      	str	r2, [r7, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d102      	bne.n	800c922 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c91c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c920:	e026      	b.n	800c970 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c926:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d0ef      	beq.n	800c912 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1ea      	bne.n	800c912 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c940:	f003 0304 	and.w	r3, r3, #4
 800c944:	2b00      	cmp	r3, #0
 800c946:	d004      	beq.n	800c952 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2204      	movs	r2, #4
 800c94c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c94e:	2304      	movs	r3, #4
 800c950:	e00e      	b.n	800c970 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c956:	f003 0301 	and.w	r3, r3, #1
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d004      	beq.n	800c968 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2201      	movs	r2, #1
 800c962:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c964:	2301      	movs	r3, #1
 800c966:	e003      	b.n	800c970 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a06      	ldr	r2, [pc, #24]	@ (800c984 <SDMMC_GetCmdResp2+0x90>)
 800c96c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3714      	adds	r7, #20
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr
 800c97c:	24000000 	.word	0x24000000
 800c980:	10624dd3 	.word	0x10624dd3
 800c984:	002000c5 	.word	0x002000c5

0800c988 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c990:	4b1a      	ldr	r3, [pc, #104]	@ (800c9fc <SDMMC_GetCmdResp3+0x74>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a1a      	ldr	r2, [pc, #104]	@ (800ca00 <SDMMC_GetCmdResp3+0x78>)
 800c996:	fba2 2303 	umull	r2, r3, r2, r3
 800c99a:	0a5b      	lsrs	r3, r3, #9
 800c99c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9a0:	fb02 f303 	mul.w	r3, r2, r3
 800c9a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	1e5a      	subs	r2, r3, #1
 800c9aa:	60fa      	str	r2, [r7, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d102      	bne.n	800c9b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c9b4:	e01b      	b.n	800c9ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d0ef      	beq.n	800c9a6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d1ea      	bne.n	800c9a6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9d4:	f003 0304 	and.w	r3, r3, #4
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d004      	beq.n	800c9e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2204      	movs	r2, #4
 800c9e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9e2:	2304      	movs	r3, #4
 800c9e4:	e003      	b.n	800c9ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4a06      	ldr	r2, [pc, #24]	@ (800ca04 <SDMMC_GetCmdResp3+0x7c>)
 800c9ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3714      	adds	r7, #20
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	24000000 	.word	0x24000000
 800ca00:	10624dd3 	.word	0x10624dd3
 800ca04:	002000c5 	.word	0x002000c5

0800ca08 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b088      	sub	sp, #32
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	460b      	mov	r3, r1
 800ca12:	607a      	str	r2, [r7, #4]
 800ca14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ca16:	4b35      	ldr	r3, [pc, #212]	@ (800caec <SDMMC_GetCmdResp6+0xe4>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a35      	ldr	r2, [pc, #212]	@ (800caf0 <SDMMC_GetCmdResp6+0xe8>)
 800ca1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca20:	0a5b      	lsrs	r3, r3, #9
 800ca22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca26:	fb02 f303 	mul.w	r3, r2, r3
 800ca2a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	1e5a      	subs	r2, r3, #1
 800ca30:	61fa      	str	r2, [r7, #28]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d102      	bne.n	800ca3c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca36:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ca3a:	e052      	b.n	800cae2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca40:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d0ef      	beq.n	800ca2c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1ea      	bne.n	800ca2c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca5a:	f003 0304 	and.w	r3, r3, #4
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d004      	beq.n	800ca6c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2204      	movs	r2, #4
 800ca66:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca68:	2304      	movs	r3, #4
 800ca6a:	e03a      	b.n	800cae2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca70:	f003 0301 	and.w	r3, r3, #1
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d004      	beq.n	800ca82 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e02f      	b.n	800cae2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	f7ff fb7c 	bl	800c180 <SDMMC_GetCommandResponse>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	7afb      	ldrb	r3, [r7, #11]
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d001      	beq.n	800ca96 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca92:	2301      	movs	r3, #1
 800ca94:	e025      	b.n	800cae2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	4a16      	ldr	r2, [pc, #88]	@ (800caf4 <SDMMC_GetCmdResp6+0xec>)
 800ca9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f7ff fb7b 	bl	800c19a <SDMMC_GetResponse>
 800caa4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800caac:	2b00      	cmp	r3, #0
 800caae:	d106      	bne.n	800cabe <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	0c1b      	lsrs	r3, r3, #16
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800caba:	2300      	movs	r3, #0
 800cabc:	e011      	b.n	800cae2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d002      	beq.n	800cace <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cac8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cacc:	e009      	b.n	800cae2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d002      	beq.n	800cade <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cadc:	e001      	b.n	800cae2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cade:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3720      	adds	r7, #32
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	24000000 	.word	0x24000000
 800caf0:	10624dd3 	.word	0x10624dd3
 800caf4:	002000c5 	.word	0x002000c5

0800caf8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cb00:	4b22      	ldr	r3, [pc, #136]	@ (800cb8c <SDMMC_GetCmdResp7+0x94>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a22      	ldr	r2, [pc, #136]	@ (800cb90 <SDMMC_GetCmdResp7+0x98>)
 800cb06:	fba2 2303 	umull	r2, r3, r2, r3
 800cb0a:	0a5b      	lsrs	r3, r3, #9
 800cb0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb10:	fb02 f303 	mul.w	r3, r2, r3
 800cb14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	1e5a      	subs	r2, r3, #1
 800cb1a:	60fa      	str	r2, [r7, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d102      	bne.n	800cb26 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cb24:	e02c      	b.n	800cb80 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb2a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d0ef      	beq.n	800cb16 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d1ea      	bne.n	800cb16 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb44:	f003 0304 	and.w	r3, r3, #4
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d004      	beq.n	800cb56 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2204      	movs	r2, #4
 800cb50:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb52:	2304      	movs	r3, #4
 800cb54:	e014      	b.n	800cb80 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb5a:	f003 0301 	and.w	r3, r3, #1
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d004      	beq.n	800cb6c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2201      	movs	r2, #1
 800cb66:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e009      	b.n	800cb80 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d002      	beq.n	800cb7e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2240      	movs	r2, #64	@ 0x40
 800cb7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800cb7e:	2300      	movs	r3, #0

}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3714      	adds	r7, #20
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr
 800cb8c:	24000000 	.word	0x24000000
 800cb90:	10624dd3 	.word	0x10624dd3

0800cb94 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cb9c:	4b11      	ldr	r3, [pc, #68]	@ (800cbe4 <SDMMC_GetCmdError+0x50>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a11      	ldr	r2, [pc, #68]	@ (800cbe8 <SDMMC_GetCmdError+0x54>)
 800cba2:	fba2 2303 	umull	r2, r3, r2, r3
 800cba6:	0a5b      	lsrs	r3, r3, #9
 800cba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbac:	fb02 f303 	mul.w	r3, r2, r3
 800cbb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	1e5a      	subs	r2, r3, #1
 800cbb6:	60fa      	str	r2, [r7, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d102      	bne.n	800cbc2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cbbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cbc0:	e009      	b.n	800cbd6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d0f1      	beq.n	800cbb2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4a06      	ldr	r2, [pc, #24]	@ (800cbec <SDMMC_GetCmdError+0x58>)
 800cbd2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800cbd4:	2300      	movs	r3, #0
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3714      	adds	r7, #20
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	24000000 	.word	0x24000000
 800cbe8:	10624dd3 	.word	0x10624dd3
 800cbec:	002000c5 	.word	0x002000c5

0800cbf0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cbf4:	4904      	ldr	r1, [pc, #16]	@ (800cc08 <MX_FATFS_Init+0x18>)
 800cbf6:	4805      	ldr	r0, [pc, #20]	@ (800cc0c <MX_FATFS_Init+0x1c>)
 800cbf8:	f002 fb42 	bl	800f280 <FATFS_LinkDriver>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	461a      	mov	r2, r3
 800cc00:	4b03      	ldr	r3, [pc, #12]	@ (800cc10 <MX_FATFS_Init+0x20>)
 800cc02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cc04:	bf00      	nop
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	240002fc 	.word	0x240002fc
 800cc0c:	08011584 	.word	0x08011584
 800cc10:	240002f8 	.word	0x240002f8

0800cc14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cc14:	b480      	push	{r7}
 800cc16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cc18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cc2e:	f000 f88d 	bl	800cd4c <BSP_SD_IsDetected>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d001      	beq.n	800cc3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cc38:	2302      	movs	r3, #2
 800cc3a:	e005      	b.n	800cc48 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cc3c:	4804      	ldr	r0, [pc, #16]	@ (800cc50 <BSP_SD_Init+0x2c>)
 800cc3e:	f7fb fb29 	bl	8008294 <HAL_SD_Init>
 800cc42:	4603      	mov	r3, r0
 800cc44:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cc46:	79fb      	ldrb	r3, [r7, #7]
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	24000144 	.word	0x24000144

0800cc54 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b088      	sub	sp, #32
 800cc58:	af02      	add	r7, sp, #8
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
 800cc60:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cc62:	2300      	movs	r3, #0
 800cc64:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	68f9      	ldr	r1, [r7, #12]
 800cc70:	4806      	ldr	r0, [pc, #24]	@ (800cc8c <BSP_SD_ReadBlocks+0x38>)
 800cc72:	f7fb fc2f 	bl	80084d4 <HAL_SD_ReadBlocks>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d001      	beq.n	800cc80 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	24000144 	.word	0x24000144

0800cc90 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b088      	sub	sp, #32
 800cc94:	af02      	add	r7, sp, #8
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
 800cc9c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	68f9      	ldr	r1, [r7, #12]
 800ccac:	4806      	ldr	r0, [pc, #24]	@ (800ccc8 <BSP_SD_WriteBlocks+0x38>)
 800ccae:	f7fb fd9b 	bl	80087e8 <HAL_SD_WriteBlocks>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d001      	beq.n	800ccbc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ccbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	24000144 	.word	0x24000144

0800cccc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ccd0:	4805      	ldr	r0, [pc, #20]	@ (800cce8 <BSP_SD_GetCardState+0x1c>)
 800ccd2:	f7fc fc79 	bl	80095c8 <HAL_SD_GetCardState>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b04      	cmp	r3, #4
 800ccda:	bf14      	ite	ne
 800ccdc:	2301      	movne	r3, #1
 800ccde:	2300      	moveq	r3, #0
 800cce0:	b2db      	uxtb	r3, r3
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	24000144 	.word	0x24000144

0800ccec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ccf4:	6879      	ldr	r1, [r7, #4]
 800ccf6:	4803      	ldr	r0, [pc, #12]	@ (800cd04 <BSP_SD_GetCardInfo+0x18>)
 800ccf8:	f7fc fb28 	bl	800934c <HAL_SD_GetCardInfo>
}
 800ccfc:	bf00      	nop
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	24000144 	.word	0x24000144

0800cd08 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cd10:	f000 f80e 	bl	800cd30 <BSP_SD_WriteCpltCallback>
}
 800cd14:	bf00      	nop
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cd24:	f000 f80b 	bl	800cd3e <BSP_SD_ReadCpltCallback>
}
 800cd28:	bf00      	nop
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800cd30:	b480      	push	{r7}
 800cd32:	af00      	add	r7, sp, #0

}
 800cd34:	bf00      	nop
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr

0800cd3e <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	af00      	add	r7, sp, #0

}
 800cd42:	bf00      	nop
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cd52:	2301      	movs	r3, #1
 800cd54:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800cd56:	79fb      	ldrb	r3, [r7, #7]
 800cd58:	b2db      	uxtb	r3, r3
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr
	...

0800cd68 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	4603      	mov	r3, r0
 800cd70:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cd72:	4b0b      	ldr	r3, [pc, #44]	@ (800cda0 <SD_CheckStatus+0x38>)
 800cd74:	2201      	movs	r2, #1
 800cd76:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cd78:	f7ff ffa8 	bl	800cccc <BSP_SD_GetCardState>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d107      	bne.n	800cd92 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cd82:	4b07      	ldr	r3, [pc, #28]	@ (800cda0 <SD_CheckStatus+0x38>)
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	f023 0301 	bic.w	r3, r3, #1
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	4b04      	ldr	r3, [pc, #16]	@ (800cda0 <SD_CheckStatus+0x38>)
 800cd90:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cd92:	4b03      	ldr	r3, [pc, #12]	@ (800cda0 <SD_CheckStatus+0x38>)
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	b2db      	uxtb	r3, r3
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	2400000d 	.word	0x2400000d

0800cda4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	4603      	mov	r3, r0
 800cdac:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cdae:	4b0b      	ldr	r3, [pc, #44]	@ (800cddc <SD_initialize+0x38>)
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cdb4:	f7ff ff36 	bl	800cc24 <BSP_SD_Init>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d107      	bne.n	800cdce <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cdbe:	79fb      	ldrb	r3, [r7, #7]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff ffd1 	bl	800cd68 <SD_CheckStatus>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	461a      	mov	r2, r3
 800cdca:	4b04      	ldr	r3, [pc, #16]	@ (800cddc <SD_initialize+0x38>)
 800cdcc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cdce:	4b03      	ldr	r3, [pc, #12]	@ (800cddc <SD_initialize+0x38>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	b2db      	uxtb	r3, r3
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	2400000d 	.word	0x2400000d

0800cde0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	4603      	mov	r3, r0
 800cde8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cdea:	79fb      	ldrb	r3, [r7, #7]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff ffbb 	bl	800cd68 <SD_CheckStatus>
 800cdf2:	4603      	mov	r3, r0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60b9      	str	r1, [r7, #8]
 800ce04:	607a      	str	r2, [r7, #4]
 800ce06:	603b      	str	r3, [r7, #0]
 800ce08:	4603      	mov	r3, r0
 800ce0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ce10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	6879      	ldr	r1, [r7, #4]
 800ce18:	68b8      	ldr	r0, [r7, #8]
 800ce1a:	f7ff ff1b 	bl	800cc54 <BSP_SD_ReadBlocks>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d107      	bne.n	800ce34 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ce24:	bf00      	nop
 800ce26:	f7ff ff51 	bl	800cccc <BSP_SD_GetCardState>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d1fa      	bne.n	800ce26 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ce30:	2300      	movs	r3, #0
 800ce32:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ce34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3718      	adds	r7, #24
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b086      	sub	sp, #24
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
 800ce48:	603b      	str	r3, [r7, #0]
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ce52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	68b8      	ldr	r0, [r7, #8]
 800ce5c:	f7ff ff18 	bl	800cc90 <BSP_SD_WriteBlocks>
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d107      	bne.n	800ce76 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ce66:	bf00      	nop
 800ce68:	f7ff ff30 	bl	800cccc <BSP_SD_GetCardState>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d1fa      	bne.n	800ce68 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ce72:	2300      	movs	r3, #0
 800ce74:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ce76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3718      	adds	r7, #24
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b08c      	sub	sp, #48	@ 0x30
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	603a      	str	r2, [r7, #0]
 800ce8a:	71fb      	strb	r3, [r7, #7]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ce90:	2301      	movs	r3, #1
 800ce92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ce96:	4b25      	ldr	r3, [pc, #148]	@ (800cf2c <SD_ioctl+0xac>)
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	f003 0301 	and.w	r3, r3, #1
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d001      	beq.n	800cea8 <SD_ioctl+0x28>
 800cea4:	2303      	movs	r3, #3
 800cea6:	e03c      	b.n	800cf22 <SD_ioctl+0xa2>

  switch (cmd)
 800cea8:	79bb      	ldrb	r3, [r7, #6]
 800ceaa:	2b03      	cmp	r3, #3
 800ceac:	d834      	bhi.n	800cf18 <SD_ioctl+0x98>
 800ceae:	a201      	add	r2, pc, #4	@ (adr r2, 800ceb4 <SD_ioctl+0x34>)
 800ceb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb4:	0800cec5 	.word	0x0800cec5
 800ceb8:	0800cecd 	.word	0x0800cecd
 800cebc:	0800cee5 	.word	0x0800cee5
 800cec0:	0800ceff 	.word	0x0800ceff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cec4:	2300      	movs	r3, #0
 800cec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ceca:	e028      	b.n	800cf1e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cecc:	f107 0308 	add.w	r3, r7, #8
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7ff ff0b 	bl	800ccec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ced6:	6a3a      	ldr	r2, [r7, #32]
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cedc:	2300      	movs	r3, #0
 800cede:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cee2:	e01c      	b.n	800cf1e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cee4:	f107 0308 	add.w	r3, r7, #8
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7ff feff 	bl	800ccec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ceee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cef6:	2300      	movs	r3, #0
 800cef8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cefc:	e00f      	b.n	800cf1e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cefe:	f107 0308 	add.w	r3, r7, #8
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7ff fef2 	bl	800ccec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cf08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0a:	0a5a      	lsrs	r2, r3, #9
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf10:	2300      	movs	r3, #0
 800cf12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cf16:	e002      	b.n	800cf1e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cf18:	2304      	movs	r3, #4
 800cf1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800cf1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3730      	adds	r7, #48	@ 0x30
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	2400000d 	.word	0x2400000d

0800cf30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	4603      	mov	r3, r0
 800cf38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cf3a:	79fb      	ldrb	r3, [r7, #7]
 800cf3c:	4a08      	ldr	r2, [pc, #32]	@ (800cf60 <disk_status+0x30>)
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	4413      	add	r3, r2
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	79fa      	ldrb	r2, [r7, #7]
 800cf48:	4905      	ldr	r1, [pc, #20]	@ (800cf60 <disk_status+0x30>)
 800cf4a:	440a      	add	r2, r1
 800cf4c:	7a12      	ldrb	r2, [r2, #8]
 800cf4e:	4610      	mov	r0, r2
 800cf50:	4798      	blx	r3
 800cf52:	4603      	mov	r3, r0
 800cf54:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cf56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	24000328 	.word	0x24000328

0800cf64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cf72:	79fb      	ldrb	r3, [r7, #7]
 800cf74:	4a0e      	ldr	r2, [pc, #56]	@ (800cfb0 <disk_initialize+0x4c>)
 800cf76:	5cd3      	ldrb	r3, [r2, r3]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d114      	bne.n	800cfa6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	4a0c      	ldr	r2, [pc, #48]	@ (800cfb0 <disk_initialize+0x4c>)
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	4413      	add	r3, r2
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	79fa      	ldrb	r2, [r7, #7]
 800cf8a:	4909      	ldr	r1, [pc, #36]	@ (800cfb0 <disk_initialize+0x4c>)
 800cf8c:	440a      	add	r2, r1
 800cf8e:	7a12      	ldrb	r2, [r2, #8]
 800cf90:	4610      	mov	r0, r2
 800cf92:	4798      	blx	r3
 800cf94:	4603      	mov	r3, r0
 800cf96:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d103      	bne.n	800cfa6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800cf9e:	79fb      	ldrb	r3, [r7, #7]
 800cfa0:	4a03      	ldr	r2, [pc, #12]	@ (800cfb0 <disk_initialize+0x4c>)
 800cfa2:	2101      	movs	r1, #1
 800cfa4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800cfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	24000328 	.word	0x24000328

0800cfb4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cfb4:	b590      	push	{r4, r7, lr}
 800cfb6:	b087      	sub	sp, #28
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60b9      	str	r1, [r7, #8]
 800cfbc:	607a      	str	r2, [r7, #4]
 800cfbe:	603b      	str	r3, [r7, #0]
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
 800cfc6:	4a0a      	ldr	r2, [pc, #40]	@ (800cff0 <disk_read+0x3c>)
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4413      	add	r3, r2
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	689c      	ldr	r4, [r3, #8]
 800cfd0:	7bfb      	ldrb	r3, [r7, #15]
 800cfd2:	4a07      	ldr	r2, [pc, #28]	@ (800cff0 <disk_read+0x3c>)
 800cfd4:	4413      	add	r3, r2
 800cfd6:	7a18      	ldrb	r0, [r3, #8]
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	68b9      	ldr	r1, [r7, #8]
 800cfde:	47a0      	blx	r4
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	75fb      	strb	r3, [r7, #23]
  return res;
 800cfe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	371c      	adds	r7, #28
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd90      	pop	{r4, r7, pc}
 800cfee:	bf00      	nop
 800cff0:	24000328 	.word	0x24000328

0800cff4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cff4:	b590      	push	{r4, r7, lr}
 800cff6:	b087      	sub	sp, #28
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60b9      	str	r1, [r7, #8]
 800cffc:	607a      	str	r2, [r7, #4]
 800cffe:	603b      	str	r3, [r7, #0]
 800d000:	4603      	mov	r3, r0
 800d002:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d004:	7bfb      	ldrb	r3, [r7, #15]
 800d006:	4a0a      	ldr	r2, [pc, #40]	@ (800d030 <disk_write+0x3c>)
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	4413      	add	r3, r2
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	68dc      	ldr	r4, [r3, #12]
 800d010:	7bfb      	ldrb	r3, [r7, #15]
 800d012:	4a07      	ldr	r2, [pc, #28]	@ (800d030 <disk_write+0x3c>)
 800d014:	4413      	add	r3, r2
 800d016:	7a18      	ldrb	r0, [r3, #8]
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	68b9      	ldr	r1, [r7, #8]
 800d01e:	47a0      	blx	r4
 800d020:	4603      	mov	r3, r0
 800d022:	75fb      	strb	r3, [r7, #23]
  return res;
 800d024:	7dfb      	ldrb	r3, [r7, #23]
}
 800d026:	4618      	mov	r0, r3
 800d028:	371c      	adds	r7, #28
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd90      	pop	{r4, r7, pc}
 800d02e:	bf00      	nop
 800d030:	24000328 	.word	0x24000328

0800d034 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	4603      	mov	r3, r0
 800d03c:	603a      	str	r2, [r7, #0]
 800d03e:	71fb      	strb	r3, [r7, #7]
 800d040:	460b      	mov	r3, r1
 800d042:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d044:	79fb      	ldrb	r3, [r7, #7]
 800d046:	4a09      	ldr	r2, [pc, #36]	@ (800d06c <disk_ioctl+0x38>)
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	79fa      	ldrb	r2, [r7, #7]
 800d052:	4906      	ldr	r1, [pc, #24]	@ (800d06c <disk_ioctl+0x38>)
 800d054:	440a      	add	r2, r1
 800d056:	7a10      	ldrb	r0, [r2, #8]
 800d058:	79b9      	ldrb	r1, [r7, #6]
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	4798      	blx	r3
 800d05e:	4603      	mov	r3, r0
 800d060:	73fb      	strb	r3, [r7, #15]
  return res;
 800d062:	7bfb      	ldrb	r3, [r7, #15]
}
 800d064:	4618      	mov	r0, r3
 800d066:	3710      	adds	r7, #16
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	24000328 	.word	0x24000328

0800d070 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d070:	b480      	push	{r7}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	3301      	adds	r3, #1
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d080:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d084:	021b      	lsls	r3, r3, #8
 800d086:	b21a      	sxth	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	b21b      	sxth	r3, r3
 800d08e:	4313      	orrs	r3, r2
 800d090:	b21b      	sxth	r3, r3
 800d092:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d094:	89fb      	ldrh	r3, [r7, #14]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3714      	adds	r7, #20
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr

0800d0a2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d0a2:	b480      	push	{r7}
 800d0a4:	b085      	sub	sp, #20
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	3303      	adds	r3, #3
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	021b      	lsls	r3, r3, #8
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	3202      	adds	r2, #2
 800d0ba:	7812      	ldrb	r2, [r2, #0]
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	021b      	lsls	r3, r3, #8
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	3201      	adds	r2, #1
 800d0c8:	7812      	ldrb	r2, [r2, #0]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	021b      	lsls	r3, r3, #8
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	7812      	ldrb	r2, [r2, #0]
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	60fb      	str	r3, [r7, #12]
	return rv;
 800d0da:	68fb      	ldr	r3, [r7, #12]
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3714      	adds	r7, #20
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	1c5a      	adds	r2, r3, #1
 800d0f8:	607a      	str	r2, [r7, #4]
 800d0fa:	887a      	ldrh	r2, [r7, #2]
 800d0fc:	b2d2      	uxtb	r2, r2
 800d0fe:	701a      	strb	r2, [r3, #0]
 800d100:	887b      	ldrh	r3, [r7, #2]
 800d102:	0a1b      	lsrs	r3, r3, #8
 800d104:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	1c5a      	adds	r2, r3, #1
 800d10a:	607a      	str	r2, [r7, #4]
 800d10c:	887a      	ldrh	r2, [r7, #2]
 800d10e:	b2d2      	uxtb	r2, r2
 800d110:	701a      	strb	r2, [r3, #0]
}
 800d112:	bf00      	nop
 800d114:	370c      	adds	r7, #12
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr

0800d11e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d11e:	b480      	push	{r7}
 800d120:	b083      	sub	sp, #12
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	1c5a      	adds	r2, r3, #1
 800d12c:	607a      	str	r2, [r7, #4]
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	b2d2      	uxtb	r2, r2
 800d132:	701a      	strb	r2, [r3, #0]
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	0a1b      	lsrs	r3, r3, #8
 800d138:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	1c5a      	adds	r2, r3, #1
 800d13e:	607a      	str	r2, [r7, #4]
 800d140:	683a      	ldr	r2, [r7, #0]
 800d142:	b2d2      	uxtb	r2, r2
 800d144:	701a      	strb	r2, [r3, #0]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	0a1b      	lsrs	r3, r3, #8
 800d14a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	1c5a      	adds	r2, r3, #1
 800d150:	607a      	str	r2, [r7, #4]
 800d152:	683a      	ldr	r2, [r7, #0]
 800d154:	b2d2      	uxtb	r2, r2
 800d156:	701a      	strb	r2, [r3, #0]
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	0a1b      	lsrs	r3, r3, #8
 800d15c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	1c5a      	adds	r2, r3, #1
 800d162:	607a      	str	r2, [r7, #4]
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	b2d2      	uxtb	r2, r2
 800d168:	701a      	strb	r2, [r3, #0]
}
 800d16a:	bf00      	nop
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr

0800d176 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d176:	b480      	push	{r7}
 800d178:	b087      	sub	sp, #28
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	60f8      	str	r0, [r7, #12]
 800d17e:	60b9      	str	r1, [r7, #8]
 800d180:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00d      	beq.n	800d1ac <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d190:	693a      	ldr	r2, [r7, #16]
 800d192:	1c53      	adds	r3, r2, #1
 800d194:	613b      	str	r3, [r7, #16]
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	1c59      	adds	r1, r3, #1
 800d19a:	6179      	str	r1, [r7, #20]
 800d19c:	7812      	ldrb	r2, [r2, #0]
 800d19e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	607b      	str	r3, [r7, #4]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1f1      	bne.n	800d190 <mem_cpy+0x1a>
	}
}
 800d1ac:	bf00      	nop
 800d1ae:	371c      	adds	r7, #28
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d1b8:	b480      	push	{r7}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	1c5a      	adds	r2, r3, #1
 800d1cc:	617a      	str	r2, [r7, #20]
 800d1ce:	68ba      	ldr	r2, [r7, #8]
 800d1d0:	b2d2      	uxtb	r2, r2
 800d1d2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	607b      	str	r3, [r7, #4]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1f3      	bne.n	800d1c8 <mem_set+0x10>
}
 800d1e0:	bf00      	nop
 800d1e2:	bf00      	nop
 800d1e4:	371c      	adds	r7, #28
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d1ee:	b480      	push	{r7}
 800d1f0:	b089      	sub	sp, #36	@ 0x24
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	60f8      	str	r0, [r7, #12]
 800d1f6:	60b9      	str	r1, [r7, #8]
 800d1f8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	61fb      	str	r3, [r7, #28]
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	1c5a      	adds	r2, r3, #1
 800d20a:	61fa      	str	r2, [r7, #28]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	4619      	mov	r1, r3
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	61ba      	str	r2, [r7, #24]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	1acb      	subs	r3, r1, r3
 800d21a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	3b01      	subs	r3, #1
 800d220:	607b      	str	r3, [r7, #4]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <mem_cmp+0x40>
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d0eb      	beq.n	800d206 <mem_cmp+0x18>

	return r;
 800d22e:	697b      	ldr	r3, [r7, #20]
}
 800d230:	4618      	mov	r0, r3
 800d232:	3724      	adds	r7, #36	@ 0x24
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d246:	e002      	b.n	800d24e <chk_chr+0x12>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	3301      	adds	r3, #1
 800d24c:	607b      	str	r3, [r7, #4]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d005      	beq.n	800d262 <chk_chr+0x26>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	461a      	mov	r2, r3
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	4293      	cmp	r3, r2
 800d260:	d1f2      	bne.n	800d248 <chk_chr+0xc>
	return *str;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	781b      	ldrb	r3, [r3, #0]
}
 800d266:	4618      	mov	r0, r3
 800d268:	370c      	adds	r7, #12
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
	...

0800d274 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d27e:	2300      	movs	r3, #0
 800d280:	60bb      	str	r3, [r7, #8]
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	60fb      	str	r3, [r7, #12]
 800d286:	e029      	b.n	800d2dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d288:	4a27      	ldr	r2, [pc, #156]	@ (800d328 <chk_lock+0xb4>)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	011b      	lsls	r3, r3, #4
 800d28e:	4413      	add	r3, r2
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d01d      	beq.n	800d2d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d296:	4a24      	ldr	r2, [pc, #144]	@ (800d328 <chk_lock+0xb4>)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	011b      	lsls	r3, r3, #4
 800d29c:	4413      	add	r3, r2
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d116      	bne.n	800d2d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d2a8:	4a1f      	ldr	r2, [pc, #124]	@ (800d328 <chk_lock+0xb4>)
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	011b      	lsls	r3, r3, #4
 800d2ae:	4413      	add	r3, r2
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d10c      	bne.n	800d2d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d2bc:	4a1a      	ldr	r2, [pc, #104]	@ (800d328 <chk_lock+0xb4>)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	011b      	lsls	r3, r3, #4
 800d2c2:	4413      	add	r3, r2
 800d2c4:	3308      	adds	r3, #8
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d102      	bne.n	800d2d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d2d0:	e007      	b.n	800d2e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	60fb      	str	r3, [r7, #12]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d9d2      	bls.n	800d288 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d109      	bne.n	800d2fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d102      	bne.n	800d2f4 <chk_lock+0x80>
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	d101      	bne.n	800d2f8 <chk_lock+0x84>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	e010      	b.n	800d31a <chk_lock+0xa6>
 800d2f8:	2312      	movs	r3, #18
 800d2fa:	e00e      	b.n	800d31a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d108      	bne.n	800d314 <chk_lock+0xa0>
 800d302:	4a09      	ldr	r2, [pc, #36]	@ (800d328 <chk_lock+0xb4>)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	011b      	lsls	r3, r3, #4
 800d308:	4413      	add	r3, r2
 800d30a:	330c      	adds	r3, #12
 800d30c:	881b      	ldrh	r3, [r3, #0]
 800d30e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d312:	d101      	bne.n	800d318 <chk_lock+0xa4>
 800d314:	2310      	movs	r3, #16
 800d316:	e000      	b.n	800d31a <chk_lock+0xa6>
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3714      	adds	r7, #20
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	24000308 	.word	0x24000308

0800d32c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d332:	2300      	movs	r3, #0
 800d334:	607b      	str	r3, [r7, #4]
 800d336:	e002      	b.n	800d33e <enq_lock+0x12>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	3301      	adds	r3, #1
 800d33c:	607b      	str	r3, [r7, #4]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2b01      	cmp	r3, #1
 800d342:	d806      	bhi.n	800d352 <enq_lock+0x26>
 800d344:	4a09      	ldr	r2, [pc, #36]	@ (800d36c <enq_lock+0x40>)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	011b      	lsls	r3, r3, #4
 800d34a:	4413      	add	r3, r2
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d1f2      	bne.n	800d338 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2b02      	cmp	r3, #2
 800d356:	bf14      	ite	ne
 800d358:	2301      	movne	r3, #1
 800d35a:	2300      	moveq	r3, #0
 800d35c:	b2db      	uxtb	r3, r3
}
 800d35e:	4618      	mov	r0, r3
 800d360:	370c      	adds	r7, #12
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	24000308 	.word	0x24000308

0800d370 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d37a:	2300      	movs	r3, #0
 800d37c:	60fb      	str	r3, [r7, #12]
 800d37e:	e01f      	b.n	800d3c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d380:	4a41      	ldr	r2, [pc, #260]	@ (800d488 <inc_lock+0x118>)
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	011b      	lsls	r3, r3, #4
 800d386:	4413      	add	r3, r2
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d113      	bne.n	800d3ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d392:	4a3d      	ldr	r2, [pc, #244]	@ (800d488 <inc_lock+0x118>)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	011b      	lsls	r3, r3, #4
 800d398:	4413      	add	r3, r2
 800d39a:	3304      	adds	r3, #4
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d109      	bne.n	800d3ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d3a6:	4a38      	ldr	r2, [pc, #224]	@ (800d488 <inc_lock+0x118>)
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	011b      	lsls	r3, r3, #4
 800d3ac:	4413      	add	r3, r2
 800d3ae:	3308      	adds	r3, #8
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d006      	beq.n	800d3c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	60fb      	str	r3, [r7, #12]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d9dc      	bls.n	800d380 <inc_lock+0x10>
 800d3c6:	e000      	b.n	800d3ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d3c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d132      	bne.n	800d436 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	60fb      	str	r3, [r7, #12]
 800d3d4:	e002      	b.n	800d3dc <inc_lock+0x6c>
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	60fb      	str	r3, [r7, #12]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d806      	bhi.n	800d3f0 <inc_lock+0x80>
 800d3e2:	4a29      	ldr	r2, [pc, #164]	@ (800d488 <inc_lock+0x118>)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	011b      	lsls	r3, r3, #4
 800d3e8:	4413      	add	r3, r2
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1f2      	bne.n	800d3d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d101      	bne.n	800d3fa <inc_lock+0x8a>
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	e040      	b.n	800d47c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	4922      	ldr	r1, [pc, #136]	@ (800d488 <inc_lock+0x118>)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	011b      	lsls	r3, r3, #4
 800d404:	440b      	add	r3, r1
 800d406:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	689a      	ldr	r2, [r3, #8]
 800d40c:	491e      	ldr	r1, [pc, #120]	@ (800d488 <inc_lock+0x118>)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	011b      	lsls	r3, r3, #4
 800d412:	440b      	add	r3, r1
 800d414:	3304      	adds	r3, #4
 800d416:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	695a      	ldr	r2, [r3, #20]
 800d41c:	491a      	ldr	r1, [pc, #104]	@ (800d488 <inc_lock+0x118>)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	011b      	lsls	r3, r3, #4
 800d422:	440b      	add	r3, r1
 800d424:	3308      	adds	r3, #8
 800d426:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d428:	4a17      	ldr	r2, [pc, #92]	@ (800d488 <inc_lock+0x118>)
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	011b      	lsls	r3, r3, #4
 800d42e:	4413      	add	r3, r2
 800d430:	330c      	adds	r3, #12
 800d432:	2200      	movs	r2, #0
 800d434:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d009      	beq.n	800d450 <inc_lock+0xe0>
 800d43c:	4a12      	ldr	r2, [pc, #72]	@ (800d488 <inc_lock+0x118>)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	011b      	lsls	r3, r3, #4
 800d442:	4413      	add	r3, r2
 800d444:	330c      	adds	r3, #12
 800d446:	881b      	ldrh	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d001      	beq.n	800d450 <inc_lock+0xe0>
 800d44c:	2300      	movs	r3, #0
 800d44e:	e015      	b.n	800d47c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d108      	bne.n	800d468 <inc_lock+0xf8>
 800d456:	4a0c      	ldr	r2, [pc, #48]	@ (800d488 <inc_lock+0x118>)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	011b      	lsls	r3, r3, #4
 800d45c:	4413      	add	r3, r2
 800d45e:	330c      	adds	r3, #12
 800d460:	881b      	ldrh	r3, [r3, #0]
 800d462:	3301      	adds	r3, #1
 800d464:	b29a      	uxth	r2, r3
 800d466:	e001      	b.n	800d46c <inc_lock+0xfc>
 800d468:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d46c:	4906      	ldr	r1, [pc, #24]	@ (800d488 <inc_lock+0x118>)
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	011b      	lsls	r3, r3, #4
 800d472:	440b      	add	r3, r1
 800d474:	330c      	adds	r3, #12
 800d476:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	3301      	adds	r3, #1
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3714      	adds	r7, #20
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr
 800d488:	24000308 	.word	0x24000308

0800d48c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b085      	sub	sp, #20
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	3b01      	subs	r3, #1
 800d498:	607b      	str	r3, [r7, #4]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d825      	bhi.n	800d4ec <dec_lock+0x60>
		n = Files[i].ctr;
 800d4a0:	4a17      	ldr	r2, [pc, #92]	@ (800d500 <dec_lock+0x74>)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	011b      	lsls	r3, r3, #4
 800d4a6:	4413      	add	r3, r2
 800d4a8:	330c      	adds	r3, #12
 800d4aa:	881b      	ldrh	r3, [r3, #0]
 800d4ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d4ae:	89fb      	ldrh	r3, [r7, #14]
 800d4b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4b4:	d101      	bne.n	800d4ba <dec_lock+0x2e>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d4ba:	89fb      	ldrh	r3, [r7, #14]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d002      	beq.n	800d4c6 <dec_lock+0x3a>
 800d4c0:	89fb      	ldrh	r3, [r7, #14]
 800d4c2:	3b01      	subs	r3, #1
 800d4c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d4c6:	4a0e      	ldr	r2, [pc, #56]	@ (800d500 <dec_lock+0x74>)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	011b      	lsls	r3, r3, #4
 800d4cc:	4413      	add	r3, r2
 800d4ce:	330c      	adds	r3, #12
 800d4d0:	89fa      	ldrh	r2, [r7, #14]
 800d4d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d4d4:	89fb      	ldrh	r3, [r7, #14]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d105      	bne.n	800d4e6 <dec_lock+0x5a>
 800d4da:	4a09      	ldr	r2, [pc, #36]	@ (800d500 <dec_lock+0x74>)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	011b      	lsls	r3, r3, #4
 800d4e0:	4413      	add	r3, r2
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	737b      	strb	r3, [r7, #13]
 800d4ea:	e001      	b.n	800d4f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d4ec:	2302      	movs	r3, #2
 800d4ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d4f0:	7b7b      	ldrb	r3, [r7, #13]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3714      	adds	r7, #20
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	24000308 	.word	0x24000308

0800d504 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d50c:	2300      	movs	r3, #0
 800d50e:	60fb      	str	r3, [r7, #12]
 800d510:	e010      	b.n	800d534 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d512:	4a0d      	ldr	r2, [pc, #52]	@ (800d548 <clear_lock+0x44>)
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	011b      	lsls	r3, r3, #4
 800d518:	4413      	add	r3, r2
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d105      	bne.n	800d52e <clear_lock+0x2a>
 800d522:	4a09      	ldr	r2, [pc, #36]	@ (800d548 <clear_lock+0x44>)
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	011b      	lsls	r3, r3, #4
 800d528:	4413      	add	r3, r2
 800d52a:	2200      	movs	r2, #0
 800d52c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	3301      	adds	r3, #1
 800d532:	60fb      	str	r3, [r7, #12]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d9eb      	bls.n	800d512 <clear_lock+0xe>
	}
}
 800d53a:	bf00      	nop
 800d53c:	bf00      	nop
 800d53e:	3714      	adds	r7, #20
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	24000308 	.word	0x24000308

0800d54c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d554:	2300      	movs	r3, #0
 800d556:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	78db      	ldrb	r3, [r3, #3]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d034      	beq.n	800d5ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d564:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	7858      	ldrb	r0, [r3, #1]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d570:	2301      	movs	r3, #1
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	f7ff fd3e 	bl	800cff4 <disk_write>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d57e:	2301      	movs	r3, #1
 800d580:	73fb      	strb	r3, [r7, #15]
 800d582:	e022      	b.n	800d5ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a1b      	ldr	r3, [r3, #32]
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	1ad2      	subs	r2, r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	699b      	ldr	r3, [r3, #24]
 800d596:	429a      	cmp	r2, r3
 800d598:	d217      	bcs.n	800d5ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	789b      	ldrb	r3, [r3, #2]
 800d59e:	613b      	str	r3, [r7, #16]
 800d5a0:	e010      	b.n	800d5c4 <sync_window+0x78>
					wsect += fs->fsize;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	699b      	ldr	r3, [r3, #24]
 800d5a6:	697a      	ldr	r2, [r7, #20]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	7858      	ldrb	r0, [r3, #1]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	697a      	ldr	r2, [r7, #20]
 800d5ba:	f7ff fd1b 	bl	800cff4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	613b      	str	r3, [r7, #16]
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d8eb      	bhi.n	800d5a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3718      	adds	r7, #24
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5e6:	683a      	ldr	r2, [r7, #0]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d01b      	beq.n	800d624 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7ff ffad 	bl	800d54c <sync_window>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d5f6:	7bfb      	ldrb	r3, [r7, #15]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d113      	bne.n	800d624 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	7858      	ldrb	r0, [r3, #1]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d606:	2301      	movs	r3, #1
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	f7ff fcd3 	bl	800cfb4 <disk_read>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d004      	beq.n	800d61e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d614:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d618:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	683a      	ldr	r2, [r7, #0]
 800d622:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d624:	7bfb      	ldrb	r3, [r7, #15]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
	...

0800d630 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7ff ff87 	bl	800d54c <sync_window>
 800d63e:	4603      	mov	r3, r0
 800d640:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d642:	7bfb      	ldrb	r3, [r7, #15]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d158      	bne.n	800d6fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	2b03      	cmp	r3, #3
 800d64e:	d148      	bne.n	800d6e2 <sync_fs+0xb2>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	791b      	ldrb	r3, [r3, #4]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d144      	bne.n	800d6e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	3330      	adds	r3, #48	@ 0x30
 800d65c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d660:	2100      	movs	r1, #0
 800d662:	4618      	mov	r0, r3
 800d664:	f7ff fda8 	bl	800d1b8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	3330      	adds	r3, #48	@ 0x30
 800d66c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d670:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d674:	4618      	mov	r0, r3
 800d676:	f7ff fd37 	bl	800d0e8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	3330      	adds	r3, #48	@ 0x30
 800d67e:	4921      	ldr	r1, [pc, #132]	@ (800d704 <sync_fs+0xd4>)
 800d680:	4618      	mov	r0, r3
 800d682:	f7ff fd4c 	bl	800d11e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	3330      	adds	r3, #48	@ 0x30
 800d68a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d68e:	491e      	ldr	r1, [pc, #120]	@ (800d708 <sync_fs+0xd8>)
 800d690:	4618      	mov	r0, r3
 800d692:	f7ff fd44 	bl	800d11e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	3330      	adds	r3, #48	@ 0x30
 800d69a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	f7ff fd3a 	bl	800d11e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	3330      	adds	r3, #48	@ 0x30
 800d6ae:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	f7ff fd30 	bl	800d11e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	69db      	ldr	r3, [r3, #28]
 800d6c2:	1c5a      	adds	r2, r3, #1
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	7858      	ldrb	r0, [r3, #1]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	f7ff fc8c 	bl	800cff4 <disk_write>
			fs->fsi_flag = 0;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	785b      	ldrb	r3, [r3, #1]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7ff fca2 	bl	800d034 <disk_ioctl>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d001      	beq.n	800d6fa <sync_fs+0xca>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3710      	adds	r7, #16
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	41615252 	.word	0x41615252
 800d708:	61417272 	.word	0x61417272

0800d70c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	3b02      	subs	r3, #2
 800d71a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	695b      	ldr	r3, [r3, #20]
 800d720:	3b02      	subs	r3, #2
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	429a      	cmp	r2, r3
 800d726:	d301      	bcc.n	800d72c <clust2sect+0x20>
 800d728:	2300      	movs	r3, #0
 800d72a:	e008      	b.n	800d73e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	895b      	ldrh	r3, [r3, #10]
 800d730:	461a      	mov	r2, r3
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	fb03 f202 	mul.w	r2, r3, r2
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d73c:	4413      	add	r3, r2
}
 800d73e:	4618      	mov	r0, r3
 800d740:	370c      	adds	r7, #12
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr

0800d74a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b086      	sub	sp, #24
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d904      	bls.n	800d76a <get_fat+0x20>
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	695b      	ldr	r3, [r3, #20]
 800d764:	683a      	ldr	r2, [r7, #0]
 800d766:	429a      	cmp	r2, r3
 800d768:	d302      	bcc.n	800d770 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d76a:	2301      	movs	r3, #1
 800d76c:	617b      	str	r3, [r7, #20]
 800d76e:	e08e      	b.n	800d88e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d770:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d774:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	2b03      	cmp	r3, #3
 800d77c:	d061      	beq.n	800d842 <get_fat+0xf8>
 800d77e:	2b03      	cmp	r3, #3
 800d780:	dc7b      	bgt.n	800d87a <get_fat+0x130>
 800d782:	2b01      	cmp	r3, #1
 800d784:	d002      	beq.n	800d78c <get_fat+0x42>
 800d786:	2b02      	cmp	r3, #2
 800d788:	d041      	beq.n	800d80e <get_fat+0xc4>
 800d78a:	e076      	b.n	800d87a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	60fb      	str	r3, [r7, #12]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	085b      	lsrs	r3, r3, #1
 800d794:	68fa      	ldr	r2, [r7, #12]
 800d796:	4413      	add	r3, r2
 800d798:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	6a1a      	ldr	r2, [r3, #32]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	0a5b      	lsrs	r3, r3, #9
 800d7a2:	4413      	add	r3, r2
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6938      	ldr	r0, [r7, #16]
 800d7a8:	f7ff ff14 	bl	800d5d4 <move_window>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d166      	bne.n	800d880 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	1c5a      	adds	r2, r3, #1
 800d7b6:	60fa      	str	r2, [r7, #12]
 800d7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7bc:	693a      	ldr	r2, [r7, #16]
 800d7be:	4413      	add	r3, r2
 800d7c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d7c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	6a1a      	ldr	r2, [r3, #32]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	0a5b      	lsrs	r3, r3, #9
 800d7ce:	4413      	add	r3, r2
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	6938      	ldr	r0, [r7, #16]
 800d7d4:	f7ff fefe 	bl	800d5d4 <move_window>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d152      	bne.n	800d884 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7e4:	693a      	ldr	r2, [r7, #16]
 800d7e6:	4413      	add	r3, r2
 800d7e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d7ec:	021b      	lsls	r3, r3, #8
 800d7ee:	68ba      	ldr	r2, [r7, #8]
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	f003 0301 	and.w	r3, r3, #1
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d002      	beq.n	800d804 <get_fat+0xba>
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	091b      	lsrs	r3, r3, #4
 800d802:	e002      	b.n	800d80a <get_fat+0xc0>
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d80a:	617b      	str	r3, [r7, #20]
			break;
 800d80c:	e03f      	b.n	800d88e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	6a1a      	ldr	r2, [r3, #32]
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	0a1b      	lsrs	r3, r3, #8
 800d816:	4413      	add	r3, r2
 800d818:	4619      	mov	r1, r3
 800d81a:	6938      	ldr	r0, [r7, #16]
 800d81c:	f7ff feda 	bl	800d5d4 <move_window>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d130      	bne.n	800d888 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	005b      	lsls	r3, r3, #1
 800d830:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d834:	4413      	add	r3, r2
 800d836:	4618      	mov	r0, r3
 800d838:	f7ff fc1a 	bl	800d070 <ld_word>
 800d83c:	4603      	mov	r3, r0
 800d83e:	617b      	str	r3, [r7, #20]
			break;
 800d840:	e025      	b.n	800d88e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	6a1a      	ldr	r2, [r3, #32]
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	09db      	lsrs	r3, r3, #7
 800d84a:	4413      	add	r3, r2
 800d84c:	4619      	mov	r1, r3
 800d84e:	6938      	ldr	r0, [r7, #16]
 800d850:	f7ff fec0 	bl	800d5d4 <move_window>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d118      	bne.n	800d88c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d868:	4413      	add	r3, r2
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7ff fc19 	bl	800d0a2 <ld_dword>
 800d870:	4603      	mov	r3, r0
 800d872:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d876:	617b      	str	r3, [r7, #20]
			break;
 800d878:	e009      	b.n	800d88e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d87a:	2301      	movs	r3, #1
 800d87c:	617b      	str	r3, [r7, #20]
 800d87e:	e006      	b.n	800d88e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d880:	bf00      	nop
 800d882:	e004      	b.n	800d88e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d884:	bf00      	nop
 800d886:	e002      	b.n	800d88e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d888:	bf00      	nop
 800d88a:	e000      	b.n	800d88e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d88c:	bf00      	nop
		}
	}

	return val;
 800d88e:	697b      	ldr	r3, [r7, #20]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d898:	b590      	push	{r4, r7, lr}
 800d89a:	b089      	sub	sp, #36	@ 0x24
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	f240 80d9 	bls.w	800da62 <put_fat+0x1ca>
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	695b      	ldr	r3, [r3, #20]
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	f080 80d3 	bcs.w	800da62 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2b03      	cmp	r3, #3
 800d8c2:	f000 8096 	beq.w	800d9f2 <put_fat+0x15a>
 800d8c6:	2b03      	cmp	r3, #3
 800d8c8:	f300 80cb 	bgt.w	800da62 <put_fat+0x1ca>
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d002      	beq.n	800d8d6 <put_fat+0x3e>
 800d8d0:	2b02      	cmp	r3, #2
 800d8d2:	d06e      	beq.n	800d9b2 <put_fat+0x11a>
 800d8d4:	e0c5      	b.n	800da62 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	61bb      	str	r3, [r7, #24]
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	085b      	lsrs	r3, r3, #1
 800d8de:	69ba      	ldr	r2, [r7, #24]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	6a1a      	ldr	r2, [r3, #32]
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	0a5b      	lsrs	r3, r3, #9
 800d8ec:	4413      	add	r3, r2
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f7ff fe6f 	bl	800d5d4 <move_window>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d8fa:	7ffb      	ldrb	r3, [r7, #31]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f040 80a9 	bne.w	800da54 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	1c59      	adds	r1, r3, #1
 800d90c:	61b9      	str	r1, [r7, #24]
 800d90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d912:	4413      	add	r3, r2
 800d914:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	f003 0301 	and.w	r3, r3, #1
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00d      	beq.n	800d93c <put_fat+0xa4>
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	b25b      	sxtb	r3, r3
 800d926:	f003 030f 	and.w	r3, r3, #15
 800d92a:	b25a      	sxtb	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	b25b      	sxtb	r3, r3
 800d930:	011b      	lsls	r3, r3, #4
 800d932:	b25b      	sxtb	r3, r3
 800d934:	4313      	orrs	r3, r2
 800d936:	b25b      	sxtb	r3, r3
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	e001      	b.n	800d940 <put_fat+0xa8>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	697a      	ldr	r2, [r7, #20]
 800d942:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2201      	movs	r2, #1
 800d948:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6a1a      	ldr	r2, [r3, #32]
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	0a5b      	lsrs	r3, r3, #9
 800d952:	4413      	add	r3, r2
 800d954:	4619      	mov	r1, r3
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f7ff fe3c 	bl	800d5d4 <move_window>
 800d95c:	4603      	mov	r3, r0
 800d95e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d960:	7ffb      	ldrb	r3, [r7, #31]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d178      	bne.n	800da58 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d972:	4413      	add	r3, r2
 800d974:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	f003 0301 	and.w	r3, r3, #1
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d003      	beq.n	800d988 <put_fat+0xf0>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	091b      	lsrs	r3, r3, #4
 800d984:	b2db      	uxtb	r3, r3
 800d986:	e00e      	b.n	800d9a6 <put_fat+0x10e>
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	b25b      	sxtb	r3, r3
 800d98e:	f023 030f 	bic.w	r3, r3, #15
 800d992:	b25a      	sxtb	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	0a1b      	lsrs	r3, r3, #8
 800d998:	b25b      	sxtb	r3, r3
 800d99a:	f003 030f 	and.w	r3, r3, #15
 800d99e:	b25b      	sxtb	r3, r3
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	b25b      	sxtb	r3, r3
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	70da      	strb	r2, [r3, #3]
			break;
 800d9b0:	e057      	b.n	800da62 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	6a1a      	ldr	r2, [r3, #32]
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	0a1b      	lsrs	r3, r3, #8
 800d9ba:	4413      	add	r3, r2
 800d9bc:	4619      	mov	r1, r3
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f7ff fe08 	bl	800d5d4 <move_window>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9c8:	7ffb      	ldrb	r3, [r7, #31]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d146      	bne.n	800da5c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	005b      	lsls	r3, r3, #1
 800d9d8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d9dc:	4413      	add	r3, r2
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	b292      	uxth	r2, r2
 800d9e2:	4611      	mov	r1, r2
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7ff fb7f 	bl	800d0e8 <st_word>
			fs->wflag = 1;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	70da      	strb	r2, [r3, #3]
			break;
 800d9f0:	e037      	b.n	800da62 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	6a1a      	ldr	r2, [r3, #32]
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	09db      	lsrs	r3, r3, #7
 800d9fa:	4413      	add	r3, r2
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f7ff fde8 	bl	800d5d4 <move_window>
 800da04:	4603      	mov	r3, r0
 800da06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da08:	7ffb      	ldrb	r3, [r7, #31]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d128      	bne.n	800da60 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800da22:	4413      	add	r3, r2
 800da24:	4618      	mov	r0, r3
 800da26:	f7ff fb3c 	bl	800d0a2 <ld_dword>
 800da2a:	4603      	mov	r3, r0
 800da2c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800da30:	4323      	orrs	r3, r4
 800da32:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800da42:	4413      	add	r3, r2
 800da44:	6879      	ldr	r1, [r7, #4]
 800da46:	4618      	mov	r0, r3
 800da48:	f7ff fb69 	bl	800d11e <st_dword>
			fs->wflag = 1;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2201      	movs	r2, #1
 800da50:	70da      	strb	r2, [r3, #3]
			break;
 800da52:	e006      	b.n	800da62 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800da54:	bf00      	nop
 800da56:	e004      	b.n	800da62 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800da58:	bf00      	nop
 800da5a:	e002      	b.n	800da62 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800da5c:	bf00      	nop
 800da5e:	e000      	b.n	800da62 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800da60:	bf00      	nop
		}
	}
	return res;
 800da62:	7ffb      	ldrb	r3, [r7, #31]
}
 800da64:	4618      	mov	r0, r3
 800da66:	3724      	adds	r7, #36	@ 0x24
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd90      	pop	{r4, r7, pc}

0800da6c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b088      	sub	sp, #32
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800da78:	2300      	movs	r3, #0
 800da7a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d904      	bls.n	800da92 <remove_chain+0x26>
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	695b      	ldr	r3, [r3, #20]
 800da8c:	68ba      	ldr	r2, [r7, #8]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d301      	bcc.n	800da96 <remove_chain+0x2a>
 800da92:	2302      	movs	r3, #2
 800da94:	e04b      	b.n	800db2e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d00c      	beq.n	800dab6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800da9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800daa0:	6879      	ldr	r1, [r7, #4]
 800daa2:	69b8      	ldr	r0, [r7, #24]
 800daa4:	f7ff fef8 	bl	800d898 <put_fat>
 800daa8:	4603      	mov	r3, r0
 800daaa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800daac:	7ffb      	ldrb	r3, [r7, #31]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d001      	beq.n	800dab6 <remove_chain+0x4a>
 800dab2:	7ffb      	ldrb	r3, [r7, #31]
 800dab4:	e03b      	b.n	800db2e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dab6:	68b9      	ldr	r1, [r7, #8]
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f7ff fe46 	bl	800d74a <get_fat>
 800dabe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d031      	beq.n	800db2a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d101      	bne.n	800dad0 <remove_chain+0x64>
 800dacc:	2302      	movs	r3, #2
 800dace:	e02e      	b.n	800db2e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dad6:	d101      	bne.n	800dadc <remove_chain+0x70>
 800dad8:	2301      	movs	r3, #1
 800dada:	e028      	b.n	800db2e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dadc:	2200      	movs	r2, #0
 800dade:	68b9      	ldr	r1, [r7, #8]
 800dae0:	69b8      	ldr	r0, [r7, #24]
 800dae2:	f7ff fed9 	bl	800d898 <put_fat>
 800dae6:	4603      	mov	r3, r0
 800dae8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800daea:	7ffb      	ldrb	r3, [r7, #31]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d001      	beq.n	800daf4 <remove_chain+0x88>
 800daf0:	7ffb      	ldrb	r3, [r7, #31]
 800daf2:	e01c      	b.n	800db2e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	691a      	ldr	r2, [r3, #16]
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	695b      	ldr	r3, [r3, #20]
 800dafc:	3b02      	subs	r3, #2
 800dafe:	429a      	cmp	r2, r3
 800db00:	d20b      	bcs.n	800db1a <remove_chain+0xae>
			fs->free_clst++;
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	691b      	ldr	r3, [r3, #16]
 800db06:	1c5a      	adds	r2, r3, #1
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	791b      	ldrb	r3, [r3, #4]
 800db10:	f043 0301 	orr.w	r3, r3, #1
 800db14:	b2da      	uxtb	r2, r3
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	695b      	ldr	r3, [r3, #20]
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	429a      	cmp	r2, r3
 800db26:	d3c6      	bcc.n	800dab6 <remove_chain+0x4a>
 800db28:	e000      	b.n	800db2c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800db2a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3720      	adds	r7, #32
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b088      	sub	sp, #32
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d10d      	bne.n	800db68 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d004      	beq.n	800db62 <create_chain+0x2c>
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	695b      	ldr	r3, [r3, #20]
 800db5c:	69ba      	ldr	r2, [r7, #24]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d31b      	bcc.n	800db9a <create_chain+0x64>
 800db62:	2301      	movs	r3, #1
 800db64:	61bb      	str	r3, [r7, #24]
 800db66:	e018      	b.n	800db9a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800db68:	6839      	ldr	r1, [r7, #0]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f7ff fded 	bl	800d74a <get_fat>
 800db70:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d801      	bhi.n	800db7c <create_chain+0x46>
 800db78:	2301      	movs	r3, #1
 800db7a:	e070      	b.n	800dc5e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db82:	d101      	bne.n	800db88 <create_chain+0x52>
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	e06a      	b.n	800dc5e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	695b      	ldr	r3, [r3, #20]
 800db8c:	68fa      	ldr	r2, [r7, #12]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d201      	bcs.n	800db96 <create_chain+0x60>
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	e063      	b.n	800dc5e <create_chain+0x128>
		scl = clst;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	3301      	adds	r3, #1
 800dba2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	695b      	ldr	r3, [r3, #20]
 800dba8:	69fa      	ldr	r2, [r7, #28]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d307      	bcc.n	800dbbe <create_chain+0x88>
				ncl = 2;
 800dbae:	2302      	movs	r3, #2
 800dbb0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dbb2:	69fa      	ldr	r2, [r7, #28]
 800dbb4:	69bb      	ldr	r3, [r7, #24]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d901      	bls.n	800dbbe <create_chain+0x88>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	e04f      	b.n	800dc5e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dbbe:	69f9      	ldr	r1, [r7, #28]
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f7ff fdc2 	bl	800d74a <get_fat>
 800dbc6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00e      	beq.n	800dbec <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d003      	beq.n	800dbdc <create_chain+0xa6>
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dbda:	d101      	bne.n	800dbe0 <create_chain+0xaa>
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	e03e      	b.n	800dc5e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dbe0:	69fa      	ldr	r2, [r7, #28]
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d1da      	bne.n	800db9e <create_chain+0x68>
 800dbe8:	2300      	movs	r3, #0
 800dbea:	e038      	b.n	800dc5e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dbec:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dbee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dbf2:	69f9      	ldr	r1, [r7, #28]
 800dbf4:	6938      	ldr	r0, [r7, #16]
 800dbf6:	f7ff fe4f 	bl	800d898 <put_fat>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dbfe:	7dfb      	ldrb	r3, [r7, #23]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d109      	bne.n	800dc18 <create_chain+0xe2>
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d006      	beq.n	800dc18 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc0a:	69fa      	ldr	r2, [r7, #28]
 800dc0c:	6839      	ldr	r1, [r7, #0]
 800dc0e:	6938      	ldr	r0, [r7, #16]
 800dc10:	f7ff fe42 	bl	800d898 <put_fat>
 800dc14:	4603      	mov	r3, r0
 800dc16:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc18:	7dfb      	ldrb	r3, [r7, #23]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d116      	bne.n	800dc4c <create_chain+0x116>
		fs->last_clst = ncl;
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	69fa      	ldr	r2, [r7, #28]
 800dc22:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	691a      	ldr	r2, [r3, #16]
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	695b      	ldr	r3, [r3, #20]
 800dc2c:	3b02      	subs	r3, #2
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d804      	bhi.n	800dc3c <create_chain+0x106>
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	691b      	ldr	r3, [r3, #16]
 800dc36:	1e5a      	subs	r2, r3, #1
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	791b      	ldrb	r3, [r3, #4]
 800dc40:	f043 0301 	orr.w	r3, r3, #1
 800dc44:	b2da      	uxtb	r2, r3
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	711a      	strb	r2, [r3, #4]
 800dc4a:	e007      	b.n	800dc5c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dc4c:	7dfb      	ldrb	r3, [r7, #23]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d102      	bne.n	800dc58 <create_chain+0x122>
 800dc52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dc56:	e000      	b.n	800dc5a <create_chain+0x124>
 800dc58:	2301      	movs	r3, #1
 800dc5a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dc5c:	69fb      	ldr	r3, [r7, #28]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3720      	adds	r7, #32
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dc66:	b480      	push	{r7}
 800dc68:	b087      	sub	sp, #28
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc7a:	3304      	adds	r3, #4
 800dc7c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	0a5b      	lsrs	r3, r3, #9
 800dc82:	68fa      	ldr	r2, [r7, #12]
 800dc84:	8952      	ldrh	r2, [r2, #10]
 800dc86:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc8a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	1d1a      	adds	r2, r3, #4
 800dc90:	613a      	str	r2, [r7, #16]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d101      	bne.n	800dca0 <clmt_clust+0x3a>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	e010      	b.n	800dcc2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d307      	bcc.n	800dcb8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	1ad3      	subs	r3, r2, r3
 800dcae:	617b      	str	r3, [r7, #20]
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dcb6:	e7e9      	b.n	800dc8c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800dcb8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	4413      	add	r3, r2
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	371c      	adds	r7, #28
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b086      	sub	sp, #24
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dce4:	d204      	bcs.n	800dcf0 <dir_sdi+0x22>
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	f003 031f 	and.w	r3, r3, #31
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d001      	beq.n	800dcf4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	e063      	b.n	800ddbc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	683a      	ldr	r2, [r7, #0]
 800dcf8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d106      	bne.n	800dd14 <dir_sdi+0x46>
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b02      	cmp	r3, #2
 800dd0c:	d902      	bls.n	800dd14 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd12:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d10c      	bne.n	800dd34 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	095b      	lsrs	r3, r3, #5
 800dd1e:	693a      	ldr	r2, [r7, #16]
 800dd20:	8912      	ldrh	r2, [r2, #8]
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d301      	bcc.n	800dd2a <dir_sdi+0x5c>
 800dd26:	2302      	movs	r3, #2
 800dd28:	e048      	b.n	800ddbc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	61da      	str	r2, [r3, #28]
 800dd32:	e029      	b.n	800dd88 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	895b      	ldrh	r3, [r3, #10]
 800dd38:	025b      	lsls	r3, r3, #9
 800dd3a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd3c:	e019      	b.n	800dd72 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6979      	ldr	r1, [r7, #20]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7ff fd01 	bl	800d74a <get_fat>
 800dd48:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd50:	d101      	bne.n	800dd56 <dir_sdi+0x88>
 800dd52:	2301      	movs	r3, #1
 800dd54:	e032      	b.n	800ddbc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d904      	bls.n	800dd66 <dir_sdi+0x98>
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	695b      	ldr	r3, [r3, #20]
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d301      	bcc.n	800dd6a <dir_sdi+0x9c>
 800dd66:	2302      	movs	r3, #2
 800dd68:	e028      	b.n	800ddbc <dir_sdi+0xee>
			ofs -= csz;
 800dd6a:	683a      	ldr	r2, [r7, #0]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	1ad3      	subs	r3, r2, r3
 800dd70:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd72:	683a      	ldr	r2, [r7, #0]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d2e1      	bcs.n	800dd3e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dd7a:	6979      	ldr	r1, [r7, #20]
 800dd7c:	6938      	ldr	r0, [r7, #16]
 800dd7e:	f7ff fcc5 	bl	800d70c <clust2sect>
 800dd82:	4602      	mov	r2, r0
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	697a      	ldr	r2, [r7, #20]
 800dd8c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	69db      	ldr	r3, [r3, #28]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d101      	bne.n	800dd9a <dir_sdi+0xcc>
 800dd96:	2302      	movs	r3, #2
 800dd98:	e010      	b.n	800ddbc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	69da      	ldr	r2, [r3, #28]
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	0a5b      	lsrs	r3, r3, #9
 800dda2:	441a      	add	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddb4:	441a      	add	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ddba:	2300      	movs	r3, #0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3718      	adds	r7, #24
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	695b      	ldr	r3, [r3, #20]
 800ddd8:	3320      	adds	r3, #32
 800ddda:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	69db      	ldr	r3, [r3, #28]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d003      	beq.n	800ddec <dir_next+0x28>
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ddea:	d301      	bcc.n	800ddf0 <dir_next+0x2c>
 800ddec:	2304      	movs	r3, #4
 800ddee:	e0aa      	b.n	800df46 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f040 8098 	bne.w	800df2c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	69db      	ldr	r3, [r3, #28]
 800de00:	1c5a      	adds	r2, r3, #1
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	699b      	ldr	r3, [r3, #24]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d10b      	bne.n	800de26 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	095b      	lsrs	r3, r3, #5
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	8912      	ldrh	r2, [r2, #8]
 800de16:	4293      	cmp	r3, r2
 800de18:	f0c0 8088 	bcc.w	800df2c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2200      	movs	r2, #0
 800de20:	61da      	str	r2, [r3, #28]
 800de22:	2304      	movs	r3, #4
 800de24:	e08f      	b.n	800df46 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	0a5b      	lsrs	r3, r3, #9
 800de2a:	68fa      	ldr	r2, [r7, #12]
 800de2c:	8952      	ldrh	r2, [r2, #10]
 800de2e:	3a01      	subs	r2, #1
 800de30:	4013      	ands	r3, r2
 800de32:	2b00      	cmp	r3, #0
 800de34:	d17a      	bne.n	800df2c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	699b      	ldr	r3, [r3, #24]
 800de3c:	4619      	mov	r1, r3
 800de3e:	4610      	mov	r0, r2
 800de40:	f7ff fc83 	bl	800d74a <get_fat>
 800de44:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d801      	bhi.n	800de50 <dir_next+0x8c>
 800de4c:	2302      	movs	r3, #2
 800de4e:	e07a      	b.n	800df46 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de56:	d101      	bne.n	800de5c <dir_next+0x98>
 800de58:	2301      	movs	r3, #1
 800de5a:	e074      	b.n	800df46 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	695b      	ldr	r3, [r3, #20]
 800de60:	697a      	ldr	r2, [r7, #20]
 800de62:	429a      	cmp	r2, r3
 800de64:	d358      	bcc.n	800df18 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d104      	bne.n	800de76 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	61da      	str	r2, [r3, #28]
 800de72:	2304      	movs	r3, #4
 800de74:	e067      	b.n	800df46 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	699b      	ldr	r3, [r3, #24]
 800de7c:	4619      	mov	r1, r3
 800de7e:	4610      	mov	r0, r2
 800de80:	f7ff fe59 	bl	800db36 <create_chain>
 800de84:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d101      	bne.n	800de90 <dir_next+0xcc>
 800de8c:	2307      	movs	r3, #7
 800de8e:	e05a      	b.n	800df46 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	2b01      	cmp	r3, #1
 800de94:	d101      	bne.n	800de9a <dir_next+0xd6>
 800de96:	2302      	movs	r3, #2
 800de98:	e055      	b.n	800df46 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dea0:	d101      	bne.n	800dea6 <dir_next+0xe2>
 800dea2:	2301      	movs	r3, #1
 800dea4:	e04f      	b.n	800df46 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f7ff fb50 	bl	800d54c <sync_window>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d001      	beq.n	800deb6 <dir_next+0xf2>
 800deb2:	2301      	movs	r3, #1
 800deb4:	e047      	b.n	800df46 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	3330      	adds	r3, #48	@ 0x30
 800deba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800debe:	2100      	movs	r1, #0
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7ff f979 	bl	800d1b8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dec6:	2300      	movs	r3, #0
 800dec8:	613b      	str	r3, [r7, #16]
 800deca:	6979      	ldr	r1, [r7, #20]
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f7ff fc1d 	bl	800d70c <clust2sect>
 800ded2:	4602      	mov	r2, r0
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ded8:	e012      	b.n	800df00 <dir_next+0x13c>
						fs->wflag = 1;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2201      	movs	r2, #1
 800dede:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f7ff fb33 	bl	800d54c <sync_window>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d001      	beq.n	800def0 <dir_next+0x12c>
 800deec:	2301      	movs	r3, #1
 800deee:	e02a      	b.n	800df46 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	3301      	adds	r3, #1
 800def4:	613b      	str	r3, [r7, #16]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800defa:	1c5a      	adds	r2, r3, #1
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	62da      	str	r2, [r3, #44]	@ 0x2c
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	895b      	ldrh	r3, [r3, #10]
 800df04:	461a      	mov	r2, r3
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	4293      	cmp	r3, r2
 800df0a:	d3e6      	bcc.n	800deda <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	1ad2      	subs	r2, r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	697a      	ldr	r2, [r7, #20]
 800df1c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800df1e:	6979      	ldr	r1, [r7, #20]
 800df20:	68f8      	ldr	r0, [r7, #12]
 800df22:	f7ff fbf3 	bl	800d70c <clust2sect>
 800df26:	4602      	mov	r2, r0
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df3e:	441a      	add	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3718      	adds	r7, #24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b086      	sub	sp, #24
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
 800df56:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800df5e:	2100      	movs	r1, #0
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7ff feb4 	bl	800dcce <dir_sdi>
 800df66:	4603      	mov	r3, r0
 800df68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df6a:	7dfb      	ldrb	r3, [r7, #23]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d12b      	bne.n	800dfc8 <dir_alloc+0x7a>
		n = 0;
 800df70:	2300      	movs	r3, #0
 800df72:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	69db      	ldr	r3, [r3, #28]
 800df78:	4619      	mov	r1, r3
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f7ff fb2a 	bl	800d5d4 <move_window>
 800df80:	4603      	mov	r3, r0
 800df82:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800df84:	7dfb      	ldrb	r3, [r7, #23]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d11d      	bne.n	800dfc6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6a1b      	ldr	r3, [r3, #32]
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2be5      	cmp	r3, #229	@ 0xe5
 800df92:	d004      	beq.n	800df9e <dir_alloc+0x50>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6a1b      	ldr	r3, [r3, #32]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d107      	bne.n	800dfae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	613b      	str	r3, [r7, #16]
 800dfa4:	693a      	ldr	r2, [r7, #16]
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d102      	bne.n	800dfb2 <dir_alloc+0x64>
 800dfac:	e00c      	b.n	800dfc8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dfae:	2300      	movs	r3, #0
 800dfb0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dfb2:	2101      	movs	r1, #1
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f7ff ff05 	bl	800ddc4 <dir_next>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dfbe:	7dfb      	ldrb	r3, [r7, #23]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d0d7      	beq.n	800df74 <dir_alloc+0x26>
 800dfc4:	e000      	b.n	800dfc8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dfc6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dfc8:	7dfb      	ldrb	r3, [r7, #23]
 800dfca:	2b04      	cmp	r3, #4
 800dfcc:	d101      	bne.n	800dfd2 <dir_alloc+0x84>
 800dfce:	2307      	movs	r3, #7
 800dfd0:	75fb      	strb	r3, [r7, #23]
	return res;
 800dfd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3718      	adds	r7, #24
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	331a      	adds	r3, #26
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7ff f840 	bl	800d070 <ld_word>
 800dff0:	4603      	mov	r3, r0
 800dff2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	2b03      	cmp	r3, #3
 800dffa:	d109      	bne.n	800e010 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	3314      	adds	r3, #20
 800e000:	4618      	mov	r0, r3
 800e002:	f7ff f835 	bl	800d070 <ld_word>
 800e006:	4603      	mov	r3, r0
 800e008:	041b      	lsls	r3, r3, #16
 800e00a:	68fa      	ldr	r2, [r7, #12]
 800e00c:	4313      	orrs	r3, r2
 800e00e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e010:	68fb      	ldr	r3, [r7, #12]
}
 800e012:	4618      	mov	r0, r3
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b084      	sub	sp, #16
 800e01e:	af00      	add	r7, sp, #0
 800e020:	60f8      	str	r0, [r7, #12]
 800e022:	60b9      	str	r1, [r7, #8]
 800e024:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	331a      	adds	r3, #26
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	b292      	uxth	r2, r2
 800e02e:	4611      	mov	r1, r2
 800e030:	4618      	mov	r0, r3
 800e032:	f7ff f859 	bl	800d0e8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	2b03      	cmp	r3, #3
 800e03c:	d109      	bne.n	800e052 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	f103 0214 	add.w	r2, r3, #20
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	0c1b      	lsrs	r3, r3, #16
 800e048:	b29b      	uxth	r3, r3
 800e04a:	4619      	mov	r1, r3
 800e04c:	4610      	mov	r0, r2
 800e04e:	f7ff f84b 	bl	800d0e8 <st_word>
	}
}
 800e052:	bf00      	nop
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b086      	sub	sp, #24
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e068:	2100      	movs	r1, #0
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7ff fe2f 	bl	800dcce <dir_sdi>
 800e070:	4603      	mov	r3, r0
 800e072:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e074:	7dfb      	ldrb	r3, [r7, #23]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d001      	beq.n	800e07e <dir_find+0x24>
 800e07a:	7dfb      	ldrb	r3, [r7, #23]
 800e07c:	e03e      	b.n	800e0fc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	69db      	ldr	r3, [r3, #28]
 800e082:	4619      	mov	r1, r3
 800e084:	6938      	ldr	r0, [r7, #16]
 800e086:	f7ff faa5 	bl	800d5d4 <move_window>
 800e08a:	4603      	mov	r3, r0
 800e08c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e08e:	7dfb      	ldrb	r3, [r7, #23]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d12f      	bne.n	800e0f4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6a1b      	ldr	r3, [r3, #32]
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e09c:	7bfb      	ldrb	r3, [r7, #15]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d102      	bne.n	800e0a8 <dir_find+0x4e>
 800e0a2:	2304      	movs	r3, #4
 800e0a4:	75fb      	strb	r3, [r7, #23]
 800e0a6:	e028      	b.n	800e0fa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6a1b      	ldr	r3, [r3, #32]
 800e0ac:	330b      	adds	r3, #11
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e0b4:	b2da      	uxtb	r2, r3
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a1b      	ldr	r3, [r3, #32]
 800e0be:	330b      	adds	r3, #11
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	f003 0308 	and.w	r3, r3, #8
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d10a      	bne.n	800e0e0 <dir_find+0x86>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a18      	ldr	r0, [r3, #32]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	3324      	adds	r3, #36	@ 0x24
 800e0d2:	220b      	movs	r2, #11
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	f7ff f88a 	bl	800d1ee <mem_cmp>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00b      	beq.n	800e0f8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f7ff fe6e 	bl	800ddc4 <dir_next>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e0ec:	7dfb      	ldrb	r3, [r7, #23]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d0c5      	beq.n	800e07e <dir_find+0x24>
 800e0f2:	e002      	b.n	800e0fa <dir_find+0xa0>
		if (res != FR_OK) break;
 800e0f4:	bf00      	nop
 800e0f6:	e000      	b.n	800e0fa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e0f8:	bf00      	nop

	return res;
 800e0fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3718      	adds	r7, #24
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e112:	2101      	movs	r1, #1
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7ff ff1a 	bl	800df4e <dir_alloc>
 800e11a:	4603      	mov	r3, r0
 800e11c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e11e:	7bfb      	ldrb	r3, [r7, #15]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d11c      	bne.n	800e15e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	69db      	ldr	r3, [r3, #28]
 800e128:	4619      	mov	r1, r3
 800e12a:	68b8      	ldr	r0, [r7, #8]
 800e12c:	f7ff fa52 	bl	800d5d4 <move_window>
 800e130:	4603      	mov	r3, r0
 800e132:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e134:	7bfb      	ldrb	r3, [r7, #15]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d111      	bne.n	800e15e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6a1b      	ldr	r3, [r3, #32]
 800e13e:	2220      	movs	r2, #32
 800e140:	2100      	movs	r1, #0
 800e142:	4618      	mov	r0, r3
 800e144:	f7ff f838 	bl	800d1b8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6a18      	ldr	r0, [r3, #32]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	3324      	adds	r3, #36	@ 0x24
 800e150:	220b      	movs	r2, #11
 800e152:	4619      	mov	r1, r3
 800e154:	f7ff f80f 	bl	800d176 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	2201      	movs	r2, #1
 800e15c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b088      	sub	sp, #32
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	60fb      	str	r3, [r7, #12]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	3324      	adds	r3, #36	@ 0x24
 800e17c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e17e:	220b      	movs	r2, #11
 800e180:	2120      	movs	r1, #32
 800e182:	68b8      	ldr	r0, [r7, #8]
 800e184:	f7ff f818 	bl	800d1b8 <mem_set>
	si = i = 0; ni = 8;
 800e188:	2300      	movs	r3, #0
 800e18a:	613b      	str	r3, [r7, #16]
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	61fb      	str	r3, [r7, #28]
 800e190:	2308      	movs	r3, #8
 800e192:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	1c5a      	adds	r2, r3, #1
 800e198:	61fa      	str	r2, [r7, #28]
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	4413      	add	r3, r2
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e1a2:	7efb      	ldrb	r3, [r7, #27]
 800e1a4:	2b20      	cmp	r3, #32
 800e1a6:	d94e      	bls.n	800e246 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e1a8:	7efb      	ldrb	r3, [r7, #27]
 800e1aa:	2b2f      	cmp	r3, #47	@ 0x2f
 800e1ac:	d006      	beq.n	800e1bc <create_name+0x54>
 800e1ae:	7efb      	ldrb	r3, [r7, #27]
 800e1b0:	2b5c      	cmp	r3, #92	@ 0x5c
 800e1b2:	d110      	bne.n	800e1d6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e1b4:	e002      	b.n	800e1bc <create_name+0x54>
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	61fb      	str	r3, [r7, #28]
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	69fb      	ldr	r3, [r7, #28]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e1c6:	d0f6      	beq.n	800e1b6 <create_name+0x4e>
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	4413      	add	r3, r2
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800e1d2:	d0f0      	beq.n	800e1b6 <create_name+0x4e>
			break;
 800e1d4:	e038      	b.n	800e248 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e1d6:	7efb      	ldrb	r3, [r7, #27]
 800e1d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1da:	d003      	beq.n	800e1e4 <create_name+0x7c>
 800e1dc:	693a      	ldr	r2, [r7, #16]
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d30c      	bcc.n	800e1fe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	2b0b      	cmp	r3, #11
 800e1e8:	d002      	beq.n	800e1f0 <create_name+0x88>
 800e1ea:	7efb      	ldrb	r3, [r7, #27]
 800e1ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1ee:	d001      	beq.n	800e1f4 <create_name+0x8c>
 800e1f0:	2306      	movs	r3, #6
 800e1f2:	e044      	b.n	800e27e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e1f4:	2308      	movs	r3, #8
 800e1f6:	613b      	str	r3, [r7, #16]
 800e1f8:	230b      	movs	r3, #11
 800e1fa:	617b      	str	r3, [r7, #20]
			continue;
 800e1fc:	e022      	b.n	800e244 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e1fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e202:	2b00      	cmp	r3, #0
 800e204:	da04      	bge.n	800e210 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e206:	7efb      	ldrb	r3, [r7, #27]
 800e208:	3b80      	subs	r3, #128	@ 0x80
 800e20a:	4a1f      	ldr	r2, [pc, #124]	@ (800e288 <create_name+0x120>)
 800e20c:	5cd3      	ldrb	r3, [r2, r3]
 800e20e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e210:	7efb      	ldrb	r3, [r7, #27]
 800e212:	4619      	mov	r1, r3
 800e214:	481d      	ldr	r0, [pc, #116]	@ (800e28c <create_name+0x124>)
 800e216:	f7ff f811 	bl	800d23c <chk_chr>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <create_name+0xbc>
 800e220:	2306      	movs	r3, #6
 800e222:	e02c      	b.n	800e27e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e224:	7efb      	ldrb	r3, [r7, #27]
 800e226:	2b60      	cmp	r3, #96	@ 0x60
 800e228:	d905      	bls.n	800e236 <create_name+0xce>
 800e22a:	7efb      	ldrb	r3, [r7, #27]
 800e22c:	2b7a      	cmp	r3, #122	@ 0x7a
 800e22e:	d802      	bhi.n	800e236 <create_name+0xce>
 800e230:	7efb      	ldrb	r3, [r7, #27]
 800e232:	3b20      	subs	r3, #32
 800e234:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	1c5a      	adds	r2, r3, #1
 800e23a:	613a      	str	r2, [r7, #16]
 800e23c:	68ba      	ldr	r2, [r7, #8]
 800e23e:	4413      	add	r3, r2
 800e240:	7efa      	ldrb	r2, [r7, #27]
 800e242:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e244:	e7a6      	b.n	800e194 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e246:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	441a      	add	r2, r3
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d101      	bne.n	800e25c <create_name+0xf4>
 800e258:	2306      	movs	r3, #6
 800e25a:	e010      	b.n	800e27e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	2be5      	cmp	r3, #229	@ 0xe5
 800e262:	d102      	bne.n	800e26a <create_name+0x102>
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	2205      	movs	r2, #5
 800e268:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e26a:	7efb      	ldrb	r3, [r7, #27]
 800e26c:	2b20      	cmp	r3, #32
 800e26e:	d801      	bhi.n	800e274 <create_name+0x10c>
 800e270:	2204      	movs	r2, #4
 800e272:	e000      	b.n	800e276 <create_name+0x10e>
 800e274:	2200      	movs	r2, #0
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	330b      	adds	r3, #11
 800e27a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e27c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3720      	adds	r7, #32
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	08011598 	.word	0x08011598
 800e28c:	08011190 	.word	0x08011190

0800e290 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b086      	sub	sp, #24
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e2a4:	e002      	b.n	800e2ac <follow_path+0x1c>
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	603b      	str	r3, [r7, #0]
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	2b2f      	cmp	r3, #47	@ 0x2f
 800e2b2:	d0f8      	beq.n	800e2a6 <follow_path+0x16>
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800e2ba:	d0f4      	beq.n	800e2a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	2b1f      	cmp	r3, #31
 800e2c8:	d80a      	bhi.n	800e2e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2280      	movs	r2, #128	@ 0x80
 800e2ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7ff fcfa 	bl	800dcce <dir_sdi>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	75fb      	strb	r3, [r7, #23]
 800e2de:	e043      	b.n	800e368 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e2e0:	463b      	mov	r3, r7
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f7ff ff3f 	bl	800e168 <create_name>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e2ee:	7dfb      	ldrb	r3, [r7, #23]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d134      	bne.n	800e35e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f7ff feb0 	bl	800e05a <dir_find>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e304:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e306:	7dfb      	ldrb	r3, [r7, #23]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00a      	beq.n	800e322 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e30c:	7dfb      	ldrb	r3, [r7, #23]
 800e30e:	2b04      	cmp	r3, #4
 800e310:	d127      	bne.n	800e362 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e312:	7afb      	ldrb	r3, [r7, #11]
 800e314:	f003 0304 	and.w	r3, r3, #4
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d122      	bne.n	800e362 <follow_path+0xd2>
 800e31c:	2305      	movs	r3, #5
 800e31e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e320:	e01f      	b.n	800e362 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e322:	7afb      	ldrb	r3, [r7, #11]
 800e324:	f003 0304 	and.w	r3, r3, #4
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d11c      	bne.n	800e366 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	799b      	ldrb	r3, [r3, #6]
 800e330:	f003 0310 	and.w	r3, r3, #16
 800e334:	2b00      	cmp	r3, #0
 800e336:	d102      	bne.n	800e33e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e338:	2305      	movs	r3, #5
 800e33a:	75fb      	strb	r3, [r7, #23]
 800e33c:	e014      	b.n	800e368 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	695b      	ldr	r3, [r3, #20]
 800e348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e34c:	4413      	add	r3, r2
 800e34e:	4619      	mov	r1, r3
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f7ff fe43 	bl	800dfdc <ld_clust>
 800e356:	4602      	mov	r2, r0
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e35c:	e7c0      	b.n	800e2e0 <follow_path+0x50>
			if (res != FR_OK) break;
 800e35e:	bf00      	nop
 800e360:	e002      	b.n	800e368 <follow_path+0xd8>
				break;
 800e362:	bf00      	nop
 800e364:	e000      	b.n	800e368 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e366:	bf00      	nop
			}
		}
	}

	return res;
 800e368:	7dfb      	ldrb	r3, [r7, #23]
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3718      	adds	r7, #24
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e372:	b480      	push	{r7}
 800e374:	b087      	sub	sp, #28
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e37a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e37e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d031      	beq.n	800e3ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	617b      	str	r3, [r7, #20]
 800e38e:	e002      	b.n	800e396 <get_ldnumber+0x24>
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	3301      	adds	r3, #1
 800e394:	617b      	str	r3, [r7, #20]
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	2b20      	cmp	r3, #32
 800e39c:	d903      	bls.n	800e3a6 <get_ldnumber+0x34>
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	2b3a      	cmp	r3, #58	@ 0x3a
 800e3a4:	d1f4      	bne.n	800e390 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	2b3a      	cmp	r3, #58	@ 0x3a
 800e3ac:	d11c      	bne.n	800e3e8 <get_ldnumber+0x76>
			tp = *path;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	1c5a      	adds	r2, r3, #1
 800e3b8:	60fa      	str	r2, [r7, #12]
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	3b30      	subs	r3, #48	@ 0x30
 800e3be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	2b09      	cmp	r3, #9
 800e3c4:	d80e      	bhi.n	800e3e4 <get_ldnumber+0x72>
 800e3c6:	68fa      	ldr	r2, [r7, #12]
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d10a      	bne.n	800e3e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d107      	bne.n	800e3e4 <get_ldnumber+0x72>
					vol = (int)i;
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	617b      	str	r3, [r7, #20]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	697a      	ldr	r2, [r7, #20]
 800e3e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	e002      	b.n	800e3ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e3ec:	693b      	ldr	r3, [r7, #16]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	371c      	adds	r7, #28
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr
	...

0800e3fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2200      	movs	r2, #0
 800e40a:	70da      	strb	r2, [r3, #3]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e412:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e414:	6839      	ldr	r1, [r7, #0]
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7ff f8dc 	bl	800d5d4 <move_window>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <check_fs+0x2a>
 800e422:	2304      	movs	r3, #4
 800e424:	e038      	b.n	800e498 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	3330      	adds	r3, #48	@ 0x30
 800e42a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fe fe1e 	bl	800d070 <ld_word>
 800e434:	4603      	mov	r3, r0
 800e436:	461a      	mov	r2, r3
 800e438:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d001      	beq.n	800e444 <check_fs+0x48>
 800e440:	2303      	movs	r3, #3
 800e442:	e029      	b.n	800e498 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e44a:	2be9      	cmp	r3, #233	@ 0xe9
 800e44c:	d009      	beq.n	800e462 <check_fs+0x66>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e454:	2beb      	cmp	r3, #235	@ 0xeb
 800e456:	d11e      	bne.n	800e496 <check_fs+0x9a>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e45e:	2b90      	cmp	r3, #144	@ 0x90
 800e460:	d119      	bne.n	800e496 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	3330      	adds	r3, #48	@ 0x30
 800e466:	3336      	adds	r3, #54	@ 0x36
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fe fe1a 	bl	800d0a2 <ld_dword>
 800e46e:	4603      	mov	r3, r0
 800e470:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e474:	4a0a      	ldr	r2, [pc, #40]	@ (800e4a0 <check_fs+0xa4>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d101      	bne.n	800e47e <check_fs+0x82>
 800e47a:	2300      	movs	r3, #0
 800e47c:	e00c      	b.n	800e498 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	3330      	adds	r3, #48	@ 0x30
 800e482:	3352      	adds	r3, #82	@ 0x52
 800e484:	4618      	mov	r0, r3
 800e486:	f7fe fe0c 	bl	800d0a2 <ld_dword>
 800e48a:	4603      	mov	r3, r0
 800e48c:	4a05      	ldr	r2, [pc, #20]	@ (800e4a4 <check_fs+0xa8>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d101      	bne.n	800e496 <check_fs+0x9a>
 800e492:	2300      	movs	r3, #0
 800e494:	e000      	b.n	800e498 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e496:	2302      	movs	r3, #2
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	00544146 	.word	0x00544146
 800e4a4:	33544146 	.word	0x33544146

0800e4a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b096      	sub	sp, #88	@ 0x58
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f7ff ff58 	bl	800e372 <get_ldnumber>
 800e4c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e4c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	da01      	bge.n	800e4ce <find_volume+0x26>
 800e4ca:	230b      	movs	r3, #11
 800e4cc:	e22d      	b.n	800e92a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e4ce:	4aa1      	ldr	r2, [pc, #644]	@ (800e754 <find_volume+0x2ac>)
 800e4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d101      	bne.n	800e4e2 <find_volume+0x3a>
 800e4de:	230c      	movs	r3, #12
 800e4e0:	e223      	b.n	800e92a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e4e8:	79fb      	ldrb	r3, [r7, #7]
 800e4ea:	f023 0301 	bic.w	r3, r3, #1
 800e4ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d01a      	beq.n	800e52e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fa:	785b      	ldrb	r3, [r3, #1]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fe fd17 	bl	800cf30 <disk_status>
 800e502:	4603      	mov	r3, r0
 800e504:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e508:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e50c:	f003 0301 	and.w	r3, r3, #1
 800e510:	2b00      	cmp	r3, #0
 800e512:	d10c      	bne.n	800e52e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e514:	79fb      	ldrb	r3, [r7, #7]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d007      	beq.n	800e52a <find_volume+0x82>
 800e51a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e51e:	f003 0304 	and.w	r3, r3, #4
 800e522:	2b00      	cmp	r3, #0
 800e524:	d001      	beq.n	800e52a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e526:	230a      	movs	r3, #10
 800e528:	e1ff      	b.n	800e92a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e52a:	2300      	movs	r3, #0
 800e52c:	e1fd      	b.n	800e92a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e530:	2200      	movs	r2, #0
 800e532:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e536:	b2da      	uxtb	r2, r3
 800e538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e53a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e53e:	785b      	ldrb	r3, [r3, #1]
 800e540:	4618      	mov	r0, r3
 800e542:	f7fe fd0f 	bl	800cf64 <disk_initialize>
 800e546:	4603      	mov	r3, r0
 800e548:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e54c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e550:	f003 0301 	and.w	r3, r3, #1
 800e554:	2b00      	cmp	r3, #0
 800e556:	d001      	beq.n	800e55c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e558:	2303      	movs	r3, #3
 800e55a:	e1e6      	b.n	800e92a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e55c:	79fb      	ldrb	r3, [r7, #7]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d007      	beq.n	800e572 <find_volume+0xca>
 800e562:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e566:	f003 0304 	and.w	r3, r3, #4
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d001      	beq.n	800e572 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e56e:	230a      	movs	r3, #10
 800e570:	e1db      	b.n	800e92a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e572:	2300      	movs	r3, #0
 800e574:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e576:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e578:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e57a:	f7ff ff3f 	bl	800e3fc <check_fs>
 800e57e:	4603      	mov	r3, r0
 800e580:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e584:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e588:	2b02      	cmp	r3, #2
 800e58a:	d149      	bne.n	800e620 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e58c:	2300      	movs	r3, #0
 800e58e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e590:	e01e      	b.n	800e5d0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e594:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e59a:	011b      	lsls	r3, r3, #4
 800e59c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e5a0:	4413      	add	r3, r2
 800e5a2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a6:	3304      	adds	r3, #4
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d006      	beq.n	800e5bc <find_volume+0x114>
 800e5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5b0:	3308      	adds	r3, #8
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fe fd75 	bl	800d0a2 <ld_dword>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	e000      	b.n	800e5be <find_volume+0x116>
 800e5bc:	2200      	movs	r2, #0
 800e5be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	3358      	adds	r3, #88	@ 0x58
 800e5c4:	443b      	add	r3, r7
 800e5c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e5ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5d2:	2b03      	cmp	r3, #3
 800e5d4:	d9dd      	bls.n	800e592 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e5da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d002      	beq.n	800e5e6 <find_volume+0x13e>
 800e5e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e5e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	3358      	adds	r3, #88	@ 0x58
 800e5ec:	443b      	add	r3, r7
 800e5ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e5f2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e5f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d005      	beq.n	800e606 <find_volume+0x15e>
 800e5fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e5fc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e5fe:	f7ff fefd 	bl	800e3fc <check_fs>
 800e602:	4603      	mov	r3, r0
 800e604:	e000      	b.n	800e608 <find_volume+0x160>
 800e606:	2303      	movs	r3, #3
 800e608:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e60c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e610:	2b01      	cmp	r3, #1
 800e612:	d905      	bls.n	800e620 <find_volume+0x178>
 800e614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e616:	3301      	adds	r3, #1
 800e618:	643b      	str	r3, [r7, #64]	@ 0x40
 800e61a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e61c:	2b03      	cmp	r3, #3
 800e61e:	d9e2      	bls.n	800e5e6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e620:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e624:	2b04      	cmp	r3, #4
 800e626:	d101      	bne.n	800e62c <find_volume+0x184>
 800e628:	2301      	movs	r3, #1
 800e62a:	e17e      	b.n	800e92a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e62c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e630:	2b01      	cmp	r3, #1
 800e632:	d901      	bls.n	800e638 <find_volume+0x190>
 800e634:	230d      	movs	r3, #13
 800e636:	e178      	b.n	800e92a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e63a:	3330      	adds	r3, #48	@ 0x30
 800e63c:	330b      	adds	r3, #11
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fe fd16 	bl	800d070 <ld_word>
 800e644:	4603      	mov	r3, r0
 800e646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e64a:	d001      	beq.n	800e650 <find_volume+0x1a8>
 800e64c:	230d      	movs	r3, #13
 800e64e:	e16c      	b.n	800e92a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e652:	3330      	adds	r3, #48	@ 0x30
 800e654:	3316      	adds	r3, #22
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe fd0a 	bl	800d070 <ld_word>
 800e65c:	4603      	mov	r3, r0
 800e65e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e662:	2b00      	cmp	r3, #0
 800e664:	d106      	bne.n	800e674 <find_volume+0x1cc>
 800e666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e668:	3330      	adds	r3, #48	@ 0x30
 800e66a:	3324      	adds	r3, #36	@ 0x24
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7fe fd18 	bl	800d0a2 <ld_dword>
 800e672:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e676:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e678:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e67c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e682:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e686:	789b      	ldrb	r3, [r3, #2]
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d005      	beq.n	800e698 <find_volume+0x1f0>
 800e68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e68e:	789b      	ldrb	r3, [r3, #2]
 800e690:	2b02      	cmp	r3, #2
 800e692:	d001      	beq.n	800e698 <find_volume+0x1f0>
 800e694:	230d      	movs	r3, #13
 800e696:	e148      	b.n	800e92a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e69a:	789b      	ldrb	r3, [r3, #2]
 800e69c:	461a      	mov	r2, r3
 800e69e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6a0:	fb02 f303 	mul.w	r3, r2, r3
 800e6a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e6b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6b4:	895b      	ldrh	r3, [r3, #10]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d008      	beq.n	800e6cc <find_volume+0x224>
 800e6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6bc:	895b      	ldrh	r3, [r3, #10]
 800e6be:	461a      	mov	r2, r3
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c2:	895b      	ldrh	r3, [r3, #10]
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	4013      	ands	r3, r2
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <find_volume+0x228>
 800e6cc:	230d      	movs	r3, #13
 800e6ce:	e12c      	b.n	800e92a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d2:	3330      	adds	r3, #48	@ 0x30
 800e6d4:	3311      	adds	r3, #17
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fe fcca 	bl	800d070 <ld_word>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	461a      	mov	r2, r3
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e6:	891b      	ldrh	r3, [r3, #8]
 800e6e8:	f003 030f 	and.w	r3, r3, #15
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d001      	beq.n	800e6f6 <find_volume+0x24e>
 800e6f2:	230d      	movs	r3, #13
 800e6f4:	e119      	b.n	800e92a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6f8:	3330      	adds	r3, #48	@ 0x30
 800e6fa:	3313      	adds	r3, #19
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fe fcb7 	bl	800d070 <ld_word>
 800e702:	4603      	mov	r3, r0
 800e704:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d106      	bne.n	800e71a <find_volume+0x272>
 800e70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e70e:	3330      	adds	r3, #48	@ 0x30
 800e710:	3320      	adds	r3, #32
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe fcc5 	bl	800d0a2 <ld_dword>
 800e718:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e71c:	3330      	adds	r3, #48	@ 0x30
 800e71e:	330e      	adds	r3, #14
 800e720:	4618      	mov	r0, r3
 800e722:	f7fe fca5 	bl	800d070 <ld_word>
 800e726:	4603      	mov	r3, r0
 800e728:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e72a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d101      	bne.n	800e734 <find_volume+0x28c>
 800e730:	230d      	movs	r3, #13
 800e732:	e0fa      	b.n	800e92a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e734:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e738:	4413      	add	r3, r2
 800e73a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e73c:	8912      	ldrh	r2, [r2, #8]
 800e73e:	0912      	lsrs	r2, r2, #4
 800e740:	b292      	uxth	r2, r2
 800e742:	4413      	add	r3, r2
 800e744:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d204      	bcs.n	800e758 <find_volume+0x2b0>
 800e74e:	230d      	movs	r3, #13
 800e750:	e0eb      	b.n	800e92a <find_volume+0x482>
 800e752:	bf00      	nop
 800e754:	24000300 	.word	0x24000300
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e758:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e760:	8952      	ldrh	r2, [r2, #10]
 800e762:	fbb3 f3f2 	udiv	r3, r3, r2
 800e766:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d101      	bne.n	800e772 <find_volume+0x2ca>
 800e76e:	230d      	movs	r3, #13
 800e770:	e0db      	b.n	800e92a <find_volume+0x482>
		fmt = FS_FAT32;
 800e772:	2303      	movs	r3, #3
 800e774:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e77a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e77e:	4293      	cmp	r3, r2
 800e780:	d802      	bhi.n	800e788 <find_volume+0x2e0>
 800e782:	2302      	movs	r3, #2
 800e784:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e78a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e78e:	4293      	cmp	r3, r2
 800e790:	d802      	bhi.n	800e798 <find_volume+0x2f0>
 800e792:	2301      	movs	r3, #1
 800e794:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e79a:	1c9a      	adds	r2, r3, #2
 800e79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e7a4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e7a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e7a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7aa:	441a      	add	r2, r3
 800e7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7ae:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e7b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7b4:	441a      	add	r2, r3
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e7ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e7be:	2b03      	cmp	r3, #3
 800e7c0:	d11e      	bne.n	800e800 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c4:	3330      	adds	r3, #48	@ 0x30
 800e7c6:	332a      	adds	r3, #42	@ 0x2a
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fe fc51 	bl	800d070 <ld_word>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d001      	beq.n	800e7d8 <find_volume+0x330>
 800e7d4:	230d      	movs	r3, #13
 800e7d6:	e0a8      	b.n	800e92a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7da:	891b      	ldrh	r3, [r3, #8]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d001      	beq.n	800e7e4 <find_volume+0x33c>
 800e7e0:	230d      	movs	r3, #13
 800e7e2:	e0a2      	b.n	800e92a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e6:	3330      	adds	r3, #48	@ 0x30
 800e7e8:	332c      	adds	r3, #44	@ 0x2c
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7fe fc59 	bl	800d0a2 <ld_dword>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f8:	695b      	ldr	r3, [r3, #20]
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7fe:	e01f      	b.n	800e840 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e802:	891b      	ldrh	r3, [r3, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d101      	bne.n	800e80c <find_volume+0x364>
 800e808:	230d      	movs	r3, #13
 800e80a:	e08e      	b.n	800e92a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e80e:	6a1a      	ldr	r2, [r3, #32]
 800e810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e812:	441a      	add	r2, r3
 800e814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e816:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e818:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e81c:	2b02      	cmp	r3, #2
 800e81e:	d103      	bne.n	800e828 <find_volume+0x380>
 800e820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e822:	695b      	ldr	r3, [r3, #20]
 800e824:	005b      	lsls	r3, r3, #1
 800e826:	e00a      	b.n	800e83e <find_volume+0x396>
 800e828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82a:	695a      	ldr	r2, [r3, #20]
 800e82c:	4613      	mov	r3, r2
 800e82e:	005b      	lsls	r3, r3, #1
 800e830:	4413      	add	r3, r2
 800e832:	085a      	lsrs	r2, r3, #1
 800e834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e836:	695b      	ldr	r3, [r3, #20]
 800e838:	f003 0301 	and.w	r3, r3, #1
 800e83c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e83e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e842:	699a      	ldr	r2, [r3, #24]
 800e844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e846:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e84a:	0a5b      	lsrs	r3, r3, #9
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d201      	bcs.n	800e854 <find_volume+0x3ac>
 800e850:	230d      	movs	r3, #13
 800e852:	e06a      	b.n	800e92a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e856:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e85a:	611a      	str	r2, [r3, #16]
 800e85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e85e:	691a      	ldr	r2, [r3, #16]
 800e860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e862:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e866:	2280      	movs	r2, #128	@ 0x80
 800e868:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e86a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e86e:	2b03      	cmp	r3, #3
 800e870:	d149      	bne.n	800e906 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e874:	3330      	adds	r3, #48	@ 0x30
 800e876:	3330      	adds	r3, #48	@ 0x30
 800e878:	4618      	mov	r0, r3
 800e87a:	f7fe fbf9 	bl	800d070 <ld_word>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b01      	cmp	r3, #1
 800e882:	d140      	bne.n	800e906 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e886:	3301      	adds	r3, #1
 800e888:	4619      	mov	r1, r3
 800e88a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e88c:	f7fe fea2 	bl	800d5d4 <move_window>
 800e890:	4603      	mov	r3, r0
 800e892:	2b00      	cmp	r3, #0
 800e894:	d137      	bne.n	800e906 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e898:	2200      	movs	r2, #0
 800e89a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e89e:	3330      	adds	r3, #48	@ 0x30
 800e8a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fe fbe3 	bl	800d070 <ld_word>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d127      	bne.n	800e906 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8b8:	3330      	adds	r3, #48	@ 0x30
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7fe fbf1 	bl	800d0a2 <ld_dword>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	4a1c      	ldr	r2, [pc, #112]	@ (800e934 <find_volume+0x48c>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d11e      	bne.n	800e906 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ca:	3330      	adds	r3, #48	@ 0x30
 800e8cc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fe fbe6 	bl	800d0a2 <ld_dword>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	4a17      	ldr	r2, [pc, #92]	@ (800e938 <find_volume+0x490>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d113      	bne.n	800e906 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8e0:	3330      	adds	r3, #48	@ 0x30
 800e8e2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fe fbdb 	bl	800d0a2 <ld_dword>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8f0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8f4:	3330      	adds	r3, #48	@ 0x30
 800e8f6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fe fbd1 	bl	800d0a2 <ld_dword>
 800e900:	4602      	mov	r2, r0
 800e902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e904:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e908:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e90c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e90e:	4b0b      	ldr	r3, [pc, #44]	@ (800e93c <find_volume+0x494>)
 800e910:	881b      	ldrh	r3, [r3, #0]
 800e912:	3301      	adds	r3, #1
 800e914:	b29a      	uxth	r2, r3
 800e916:	4b09      	ldr	r3, [pc, #36]	@ (800e93c <find_volume+0x494>)
 800e918:	801a      	strh	r2, [r3, #0]
 800e91a:	4b08      	ldr	r3, [pc, #32]	@ (800e93c <find_volume+0x494>)
 800e91c:	881a      	ldrh	r2, [r3, #0]
 800e91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e920:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e922:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e924:	f7fe fdee 	bl	800d504 <clear_lock>
#endif
	return FR_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3758      	adds	r7, #88	@ 0x58
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	41615252 	.word	0x41615252
 800e938:	61417272 	.word	0x61417272
 800e93c:	24000304 	.word	0x24000304

0800e940 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e94a:	2309      	movs	r3, #9
 800e94c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d01c      	beq.n	800e98e <validate+0x4e>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d018      	beq.n	800e98e <validate+0x4e>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d013      	beq.n	800e98e <validate+0x4e>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	889a      	ldrh	r2, [r3, #4]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	88db      	ldrh	r3, [r3, #6]
 800e970:	429a      	cmp	r2, r3
 800e972:	d10c      	bne.n	800e98e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	785b      	ldrb	r3, [r3, #1]
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fe fad8 	bl	800cf30 <disk_status>
 800e980:	4603      	mov	r3, r0
 800e982:	f003 0301 	and.w	r3, r3, #1
 800e986:	2b00      	cmp	r3, #0
 800e988:	d101      	bne.n	800e98e <validate+0x4e>
			res = FR_OK;
 800e98a:	2300      	movs	r3, #0
 800e98c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e98e:	7bfb      	ldrb	r3, [r7, #15]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d102      	bne.n	800e99a <validate+0x5a>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	e000      	b.n	800e99c <validate+0x5c>
 800e99a:	2300      	movs	r3, #0
 800e99c:	683a      	ldr	r2, [r7, #0]
 800e99e:	6013      	str	r3, [r2, #0]
	return res;
 800e9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
	...

0800e9ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b088      	sub	sp, #32
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e9be:	f107 0310 	add.w	r3, r7, #16
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7ff fcd5 	bl	800e372 <get_ldnumber>
 800e9c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	da01      	bge.n	800e9d4 <f_mount+0x28>
 800e9d0:	230b      	movs	r3, #11
 800e9d2:	e02b      	b.n	800ea2c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e9d4:	4a17      	ldr	r2, [pc, #92]	@ (800ea34 <f_mount+0x88>)
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d005      	beq.n	800e9f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e9e4:	69b8      	ldr	r0, [r7, #24]
 800e9e6:	f7fe fd8d 	bl	800d504 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d002      	beq.n	800e9fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	490d      	ldr	r1, [pc, #52]	@ (800ea34 <f_mount+0x88>)
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d002      	beq.n	800ea12 <f_mount+0x66>
 800ea0c:	79fb      	ldrb	r3, [r7, #7]
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d001      	beq.n	800ea16 <f_mount+0x6a>
 800ea12:	2300      	movs	r3, #0
 800ea14:	e00a      	b.n	800ea2c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ea16:	f107 010c 	add.w	r1, r7, #12
 800ea1a:	f107 0308 	add.w	r3, r7, #8
 800ea1e:	2200      	movs	r2, #0
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7ff fd41 	bl	800e4a8 <find_volume>
 800ea26:	4603      	mov	r3, r0
 800ea28:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ea2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3720      	adds	r7, #32
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	24000300 	.word	0x24000300

0800ea38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b098      	sub	sp, #96	@ 0x60
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	4613      	mov	r3, r2
 800ea44:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d101      	bne.n	800ea50 <f_open+0x18>
 800ea4c:	2309      	movs	r3, #9
 800ea4e:	e1a9      	b.n	800eda4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ea50:	79fb      	ldrb	r3, [r7, #7]
 800ea52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ea56:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ea58:	79fa      	ldrb	r2, [r7, #7]
 800ea5a:	f107 0110 	add.w	r1, r7, #16
 800ea5e:	f107 0308 	add.w	r3, r7, #8
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7ff fd20 	bl	800e4a8 <find_volume>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ea6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f040 818d 	bne.w	800ed92 <f_open+0x35a>
		dj.obj.fs = fs;
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ea7c:	68ba      	ldr	r2, [r7, #8]
 800ea7e:	f107 0314 	add.w	r3, r7, #20
 800ea82:	4611      	mov	r1, r2
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7ff fc03 	bl	800e290 <follow_path>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ea90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d118      	bne.n	800eaca <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ea98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ea9c:	b25b      	sxtb	r3, r3
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	da03      	bge.n	800eaaa <f_open+0x72>
				res = FR_INVALID_NAME;
 800eaa2:	2306      	movs	r3, #6
 800eaa4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800eaa8:	e00f      	b.n	800eaca <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eaaa:	79fb      	ldrb	r3, [r7, #7]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	bf8c      	ite	hi
 800eab0:	2301      	movhi	r3, #1
 800eab2:	2300      	movls	r3, #0
 800eab4:	b2db      	uxtb	r3, r3
 800eab6:	461a      	mov	r2, r3
 800eab8:	f107 0314 	add.w	r3, r7, #20
 800eabc:	4611      	mov	r1, r2
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fe fbd8 	bl	800d274 <chk_lock>
 800eac4:	4603      	mov	r3, r0
 800eac6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eaca:	79fb      	ldrb	r3, [r7, #7]
 800eacc:	f003 031c 	and.w	r3, r3, #28
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d07f      	beq.n	800ebd4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ead4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d017      	beq.n	800eb0c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eadc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eae0:	2b04      	cmp	r3, #4
 800eae2:	d10e      	bne.n	800eb02 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eae4:	f7fe fc22 	bl	800d32c <enq_lock>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d006      	beq.n	800eafc <f_open+0xc4>
 800eaee:	f107 0314 	add.w	r3, r7, #20
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7ff fb06 	bl	800e104 <dir_register>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	e000      	b.n	800eafe <f_open+0xc6>
 800eafc:	2312      	movs	r3, #18
 800eafe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eb02:	79fb      	ldrb	r3, [r7, #7]
 800eb04:	f043 0308 	orr.w	r3, r3, #8
 800eb08:	71fb      	strb	r3, [r7, #7]
 800eb0a:	e010      	b.n	800eb2e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eb0c:	7ebb      	ldrb	r3, [r7, #26]
 800eb0e:	f003 0311 	and.w	r3, r3, #17
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d003      	beq.n	800eb1e <f_open+0xe6>
					res = FR_DENIED;
 800eb16:	2307      	movs	r3, #7
 800eb18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800eb1c:	e007      	b.n	800eb2e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eb1e:	79fb      	ldrb	r3, [r7, #7]
 800eb20:	f003 0304 	and.w	r3, r3, #4
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d002      	beq.n	800eb2e <f_open+0xf6>
 800eb28:	2308      	movs	r3, #8
 800eb2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eb2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d168      	bne.n	800ec08 <f_open+0x1d0>
 800eb36:	79fb      	ldrb	r3, [r7, #7]
 800eb38:	f003 0308 	and.w	r3, r3, #8
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d063      	beq.n	800ec08 <f_open+0x1d0>
				dw = GET_FATTIME();
 800eb40:	f7fe f868 	bl	800cc14 <get_fattime>
 800eb44:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eb46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb48:	330e      	adds	r3, #14
 800eb4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fe fae6 	bl	800d11e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eb52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb54:	3316      	adds	r3, #22
 800eb56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7fe fae0 	bl	800d11e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eb5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb60:	330b      	adds	r3, #11
 800eb62:	2220      	movs	r2, #32
 800eb64:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb6a:	4611      	mov	r1, r2
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7ff fa35 	bl	800dfdc <ld_clust>
 800eb72:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800eb78:	2200      	movs	r2, #0
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7ff fa4d 	bl	800e01a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eb80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb82:	331c      	adds	r3, #28
 800eb84:	2100      	movs	r1, #0
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fe fac9 	bl	800d11e <st_dword>
					fs->wflag = 1;
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	2201      	movs	r2, #1
 800eb90:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800eb92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d037      	beq.n	800ec08 <f_open+0x1d0>
						dw = fs->winsect;
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb9c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800eb9e:	f107 0314 	add.w	r3, r7, #20
 800eba2:	2200      	movs	r2, #0
 800eba4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fe ff60 	bl	800da6c <remove_chain>
 800ebac:	4603      	mov	r3, r0
 800ebae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800ebb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d126      	bne.n	800ec08 <f_open+0x1d0>
							res = move_window(fs, dw);
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fe fd08 	bl	800d5d4 <move_window>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ebce:	3a01      	subs	r2, #1
 800ebd0:	60da      	str	r2, [r3, #12]
 800ebd2:	e019      	b.n	800ec08 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ebd4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d115      	bne.n	800ec08 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ebdc:	7ebb      	ldrb	r3, [r7, #26]
 800ebde:	f003 0310 	and.w	r3, r3, #16
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d003      	beq.n	800ebee <f_open+0x1b6>
					res = FR_NO_FILE;
 800ebe6:	2304      	movs	r3, #4
 800ebe8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ebec:	e00c      	b.n	800ec08 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ebee:	79fb      	ldrb	r3, [r7, #7]
 800ebf0:	f003 0302 	and.w	r3, r3, #2
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d007      	beq.n	800ec08 <f_open+0x1d0>
 800ebf8:	7ebb      	ldrb	r3, [r7, #26]
 800ebfa:	f003 0301 	and.w	r3, r3, #1
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d002      	beq.n	800ec08 <f_open+0x1d0>
						res = FR_DENIED;
 800ec02:	2307      	movs	r3, #7
 800ec04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ec08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d126      	bne.n	800ec5e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ec10:	79fb      	ldrb	r3, [r7, #7]
 800ec12:	f003 0308 	and.w	r3, r3, #8
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d003      	beq.n	800ec22 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800ec1a:	79fb      	ldrb	r3, [r7, #7]
 800ec1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec20:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ec2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ec30:	79fb      	ldrb	r3, [r7, #7]
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	bf8c      	ite	hi
 800ec36:	2301      	movhi	r3, #1
 800ec38:	2300      	movls	r3, #0
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	f107 0314 	add.w	r3, r7, #20
 800ec42:	4611      	mov	r1, r2
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fe fb93 	bl	800d370 <inc_lock>
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	691b      	ldr	r3, [r3, #16]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d102      	bne.n	800ec5e <f_open+0x226>
 800ec58:	2302      	movs	r3, #2
 800ec5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ec5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	f040 8095 	bne.w	800ed92 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec6c:	4611      	mov	r1, r2
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7ff f9b4 	bl	800dfdc <ld_clust>
 800ec74:	4602      	mov	r2, r0
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ec7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec7c:	331c      	adds	r3, #28
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fe fa0f 	bl	800d0a2 <ld_dword>
 800ec84:	4602      	mov	r2, r0
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ec90:	693a      	ldr	r2, [r7, #16]
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	88da      	ldrh	r2, [r3, #6]
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	79fa      	ldrb	r2, [r7, #7]
 800eca2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2200      	movs	r2, #0
 800eca8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2200      	movs	r2, #0
 800ecae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	3330      	adds	r3, #48	@ 0x30
 800ecba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecbe:	2100      	movs	r1, #0
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7fe fa79 	bl	800d1b8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ecc6:	79fb      	ldrb	r3, [r7, #7]
 800ecc8:	f003 0320 	and.w	r3, r3, #32
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d060      	beq.n	800ed92 <f_open+0x35a>
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d05c      	beq.n	800ed92 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	68da      	ldr	r2, [r3, #12]
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	895b      	ldrh	r3, [r3, #10]
 800ece4:	025b      	lsls	r3, r3, #9
 800ece6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	657b      	str	r3, [r7, #84]	@ 0x54
 800ecf4:	e016      	b.n	800ed24 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fe fd25 	bl	800d74a <get_fat>
 800ed00:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ed02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d802      	bhi.n	800ed0e <f_open+0x2d6>
 800ed08:	2302      	movs	r3, #2
 800ed0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ed0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed14:	d102      	bne.n	800ed1c <f_open+0x2e4>
 800ed16:	2301      	movs	r3, #1
 800ed18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ed1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	657b      	str	r3, [r7, #84]	@ 0x54
 800ed24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d103      	bne.n	800ed34 <f_open+0x2fc>
 800ed2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ed2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d8e0      	bhi.n	800ecf6 <f_open+0x2be>
				}
				fp->clust = clst;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ed38:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ed3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d127      	bne.n	800ed92 <f_open+0x35a>
 800ed42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d022      	beq.n	800ed92 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7fe fcdb 	bl	800d70c <clust2sect>
 800ed56:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d103      	bne.n	800ed66 <f_open+0x32e>
						res = FR_INT_ERR;
 800ed5e:	2302      	movs	r3, #2
 800ed60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ed64:	e015      	b.n	800ed92 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ed66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed68:	0a5a      	lsrs	r2, r3, #9
 800ed6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed6c:	441a      	add	r2, r3
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	7858      	ldrb	r0, [r3, #1]
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6a1a      	ldr	r2, [r3, #32]
 800ed80:	2301      	movs	r3, #1
 800ed82:	f7fe f917 	bl	800cfb4 <disk_read>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <f_open+0x35a>
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ed92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d002      	beq.n	800eda0 <f_open+0x368>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eda0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3760      	adds	r7, #96	@ 0x60
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b08c      	sub	sp, #48	@ 0x30
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	60b9      	str	r1, [r7, #8]
 800edb6:	607a      	str	r2, [r7, #4]
 800edb8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	2200      	movs	r2, #0
 800edc2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f107 0210 	add.w	r2, r7, #16
 800edca:	4611      	mov	r1, r2
 800edcc:	4618      	mov	r0, r3
 800edce:	f7ff fdb7 	bl	800e940 <validate>
 800edd2:	4603      	mov	r3, r0
 800edd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800edd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d107      	bne.n	800edf0 <f_write+0x44>
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	7d5b      	ldrb	r3, [r3, #21]
 800ede4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ede8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800edec:	2b00      	cmp	r3, #0
 800edee:	d002      	beq.n	800edf6 <f_write+0x4a>
 800edf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800edf4:	e14b      	b.n	800f08e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	7d1b      	ldrb	r3, [r3, #20]
 800edfa:	f003 0302 	and.w	r3, r3, #2
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d101      	bne.n	800ee06 <f_write+0x5a>
 800ee02:	2307      	movs	r3, #7
 800ee04:	e143      	b.n	800f08e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	699a      	ldr	r2, [r3, #24]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	441a      	add	r2, r3
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	699b      	ldr	r3, [r3, #24]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	f080 812d 	bcs.w	800f072 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	699b      	ldr	r3, [r3, #24]
 800ee1c:	43db      	mvns	r3, r3
 800ee1e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ee20:	e127      	b.n	800f072 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	699b      	ldr	r3, [r3, #24]
 800ee26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f040 80e3 	bne.w	800eff6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	699b      	ldr	r3, [r3, #24]
 800ee34:	0a5b      	lsrs	r3, r3, #9
 800ee36:	693a      	ldr	r2, [r7, #16]
 800ee38:	8952      	ldrh	r2, [r2, #10]
 800ee3a:	3a01      	subs	r2, #1
 800ee3c:	4013      	ands	r3, r2
 800ee3e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d143      	bne.n	800eece <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d10c      	bne.n	800ee68 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ee54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d11a      	bne.n	800ee90 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2100      	movs	r1, #0
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fe fe69 	bl	800db36 <create_chain>
 800ee64:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ee66:	e013      	b.n	800ee90 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d007      	beq.n	800ee80 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	699b      	ldr	r3, [r3, #24]
 800ee74:	4619      	mov	r1, r3
 800ee76:	68f8      	ldr	r0, [r7, #12]
 800ee78:	f7fe fef5 	bl	800dc66 <clmt_clust>
 800ee7c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ee7e:	e007      	b.n	800ee90 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	69db      	ldr	r3, [r3, #28]
 800ee86:	4619      	mov	r1, r3
 800ee88:	4610      	mov	r0, r2
 800ee8a:	f7fe fe54 	bl	800db36 <create_chain>
 800ee8e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ee90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	f000 80f2 	beq.w	800f07c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ee98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d104      	bne.n	800eea8 <f_write+0xfc>
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2202      	movs	r2, #2
 800eea2:	755a      	strb	r2, [r3, #21]
 800eea4:	2302      	movs	r3, #2
 800eea6:	e0f2      	b.n	800f08e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eeae:	d104      	bne.n	800eeba <f_write+0x10e>
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	755a      	strb	r2, [r3, #21]
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	e0e9      	b.n	800f08e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eebe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d102      	bne.n	800eece <f_write+0x122>
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eecc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	7d1b      	ldrb	r3, [r3, #20]
 800eed2:	b25b      	sxtb	r3, r3
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	da18      	bge.n	800ef0a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	7858      	ldrb	r0, [r3, #1]
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6a1a      	ldr	r2, [r3, #32]
 800eee6:	2301      	movs	r3, #1
 800eee8:	f7fe f884 	bl	800cff4 <disk_write>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d004      	beq.n	800eefc <f_write+0x150>
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2201      	movs	r2, #1
 800eef6:	755a      	strb	r2, [r3, #21]
 800eef8:	2301      	movs	r3, #1
 800eefa:	e0c8      	b.n	800f08e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	7d1b      	ldrb	r3, [r3, #20]
 800ef00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef04:	b2da      	uxtb	r2, r3
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ef0a:	693a      	ldr	r2, [r7, #16]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	69db      	ldr	r3, [r3, #28]
 800ef10:	4619      	mov	r1, r3
 800ef12:	4610      	mov	r0, r2
 800ef14:	f7fe fbfa 	bl	800d70c <clust2sect>
 800ef18:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d104      	bne.n	800ef2a <f_write+0x17e>
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2202      	movs	r2, #2
 800ef24:	755a      	strb	r2, [r3, #21]
 800ef26:	2302      	movs	r3, #2
 800ef28:	e0b1      	b.n	800f08e <f_write+0x2e2>
			sect += csect;
 800ef2a:	697a      	ldr	r2, [r7, #20]
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	4413      	add	r3, r2
 800ef30:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	0a5b      	lsrs	r3, r3, #9
 800ef36:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ef38:	6a3b      	ldr	r3, [r7, #32]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d03c      	beq.n	800efb8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ef3e:	69ba      	ldr	r2, [r7, #24]
 800ef40:	6a3b      	ldr	r3, [r7, #32]
 800ef42:	4413      	add	r3, r2
 800ef44:	693a      	ldr	r2, [r7, #16]
 800ef46:	8952      	ldrh	r2, [r2, #10]
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d905      	bls.n	800ef58 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	895b      	ldrh	r3, [r3, #10]
 800ef50:	461a      	mov	r2, r3
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	7858      	ldrb	r0, [r3, #1]
 800ef5c:	6a3b      	ldr	r3, [r7, #32]
 800ef5e:	697a      	ldr	r2, [r7, #20]
 800ef60:	69f9      	ldr	r1, [r7, #28]
 800ef62:	f7fe f847 	bl	800cff4 <disk_write>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d004      	beq.n	800ef76 <f_write+0x1ca>
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	755a      	strb	r2, [r3, #21]
 800ef72:	2301      	movs	r3, #1
 800ef74:	e08b      	b.n	800f08e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	6a1a      	ldr	r2, [r3, #32]
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	1ad3      	subs	r3, r2, r3
 800ef7e:	6a3a      	ldr	r2, [r7, #32]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d915      	bls.n	800efb0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	6a1a      	ldr	r2, [r3, #32]
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	1ad3      	subs	r3, r2, r3
 800ef92:	025b      	lsls	r3, r3, #9
 800ef94:	69fa      	ldr	r2, [r7, #28]
 800ef96:	4413      	add	r3, r2
 800ef98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	f7fe f8ea 	bl	800d176 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	7d1b      	ldrb	r3, [r3, #20]
 800efa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800efaa:	b2da      	uxtb	r2, r3
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800efb0:	6a3b      	ldr	r3, [r7, #32]
 800efb2:	025b      	lsls	r3, r3, #9
 800efb4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800efb6:	e03f      	b.n	800f038 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	6a1b      	ldr	r3, [r3, #32]
 800efbc:	697a      	ldr	r2, [r7, #20]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d016      	beq.n	800eff0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	699a      	ldr	r2, [r3, #24]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800efca:	429a      	cmp	r2, r3
 800efcc:	d210      	bcs.n	800eff0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	7858      	ldrb	r0, [r3, #1]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800efd8:	2301      	movs	r3, #1
 800efda:	697a      	ldr	r2, [r7, #20]
 800efdc:	f7fd ffea 	bl	800cfb4 <disk_read>
 800efe0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d004      	beq.n	800eff0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2201      	movs	r2, #1
 800efea:	755a      	strb	r2, [r3, #21]
 800efec:	2301      	movs	r3, #1
 800efee:	e04e      	b.n	800f08e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	697a      	ldr	r2, [r7, #20]
 800eff4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	699b      	ldr	r3, [r3, #24]
 800effa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800effe:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f002:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d901      	bls.n	800f010 <f_write+0x264>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	699b      	ldr	r3, [r3, #24]
 800f01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f01e:	4413      	add	r3, r2
 800f020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f022:	69f9      	ldr	r1, [r7, #28]
 800f024:	4618      	mov	r0, r3
 800f026:	f7fe f8a6 	bl	800d176 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	7d1b      	ldrb	r3, [r3, #20]
 800f02e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f032:	b2da      	uxtb	r2, r3
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f038:	69fa      	ldr	r2, [r7, #28]
 800f03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f03c:	4413      	add	r3, r2
 800f03e:	61fb      	str	r3, [r7, #28]
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	699a      	ldr	r2, [r3, #24]
 800f044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f046:	441a      	add	r2, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	619a      	str	r2, [r3, #24]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	68da      	ldr	r2, [r3, #12]
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	699b      	ldr	r3, [r3, #24]
 800f054:	429a      	cmp	r2, r3
 800f056:	bf38      	it	cc
 800f058:	461a      	movcc	r2, r3
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	60da      	str	r2, [r3, #12]
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f064:	441a      	add	r2, r3
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	601a      	str	r2, [r3, #0]
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f06e:	1ad3      	subs	r3, r2, r3
 800f070:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2b00      	cmp	r3, #0
 800f076:	f47f aed4 	bne.w	800ee22 <f_write+0x76>
 800f07a:	e000      	b.n	800f07e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f07c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	7d1b      	ldrb	r3, [r3, #20]
 800f082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f086:	b2da      	uxtb	r2, r3
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f08c:	2300      	movs	r3, #0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3730      	adds	r7, #48	@ 0x30
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}

0800f096 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f096:	b580      	push	{r7, lr}
 800f098:	b086      	sub	sp, #24
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f107 0208 	add.w	r2, r7, #8
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7ff fc4a 	bl	800e940 <validate>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f0b0:	7dfb      	ldrb	r3, [r7, #23]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d168      	bne.n	800f188 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	7d1b      	ldrb	r3, [r3, #20]
 800f0ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d062      	beq.n	800f188 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	7d1b      	ldrb	r3, [r3, #20]
 800f0c6:	b25b      	sxtb	r3, r3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	da15      	bge.n	800f0f8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	7858      	ldrb	r0, [r3, #1]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6a1a      	ldr	r2, [r3, #32]
 800f0da:	2301      	movs	r3, #1
 800f0dc:	f7fd ff8a 	bl	800cff4 <disk_write>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d001      	beq.n	800f0ea <f_sync+0x54>
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	e04f      	b.n	800f18a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	7d1b      	ldrb	r3, [r3, #20]
 800f0ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0f2:	b2da      	uxtb	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f0f8:	f7fd fd8c 	bl	800cc14 <get_fattime>
 800f0fc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f0fe:	68ba      	ldr	r2, [r7, #8]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f104:	4619      	mov	r1, r3
 800f106:	4610      	mov	r0, r2
 800f108:	f7fe fa64 	bl	800d5d4 <move_window>
 800f10c:	4603      	mov	r3, r0
 800f10e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f110:	7dfb      	ldrb	r3, [r7, #23]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d138      	bne.n	800f188 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f11a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	330b      	adds	r3, #11
 800f120:	781a      	ldrb	r2, [r3, #0]
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	330b      	adds	r3, #11
 800f126:	f042 0220 	orr.w	r2, r2, #32
 800f12a:	b2d2      	uxtb	r2, r2
 800f12c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6818      	ldr	r0, [r3, #0]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	461a      	mov	r2, r3
 800f138:	68f9      	ldr	r1, [r7, #12]
 800f13a:	f7fe ff6e 	bl	800e01a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f103 021c 	add.w	r2, r3, #28
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	4619      	mov	r1, r3
 800f14a:	4610      	mov	r0, r2
 800f14c:	f7fd ffe7 	bl	800d11e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	3316      	adds	r3, #22
 800f154:	6939      	ldr	r1, [r7, #16]
 800f156:	4618      	mov	r0, r3
 800f158:	f7fd ffe1 	bl	800d11e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	3312      	adds	r3, #18
 800f160:	2100      	movs	r1, #0
 800f162:	4618      	mov	r0, r3
 800f164:	f7fd ffc0 	bl	800d0e8 <st_word>
					fs->wflag = 1;
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	2201      	movs	r2, #1
 800f16c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	4618      	mov	r0, r3
 800f172:	f7fe fa5d 	bl	800d630 <sync_fs>
 800f176:	4603      	mov	r3, r0
 800f178:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	7d1b      	ldrb	r3, [r3, #20]
 800f17e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f182:	b2da      	uxtb	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f188:	7dfb      	ldrb	r3, [r7, #23]
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3718      	adds	r7, #24
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}

0800f192 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f192:	b580      	push	{r7, lr}
 800f194:	b084      	sub	sp, #16
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f7ff ff7b 	bl	800f096 <f_sync>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f1a4:	7bfb      	ldrb	r3, [r7, #15]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d118      	bne.n	800f1dc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f107 0208 	add.w	r2, r7, #8
 800f1b0:	4611      	mov	r1, r2
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7ff fbc4 	bl	800e940 <validate>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f1bc:	7bfb      	ldrb	r3, [r7, #15]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d10c      	bne.n	800f1dc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	691b      	ldr	r3, [r3, #16]
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7fe f960 	bl	800d48c <dec_lock>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f1d0:	7bfb      	ldrb	r3, [r7, #15]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d102      	bne.n	800f1dc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
	...

0800f1e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b087      	sub	sp, #28
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	60b9      	str	r1, [r7, #8]
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f1fe:	4b1f      	ldr	r3, [pc, #124]	@ (800f27c <FATFS_LinkDriverEx+0x94>)
 800f200:	7a5b      	ldrb	r3, [r3, #9]
 800f202:	b2db      	uxtb	r3, r3
 800f204:	2b00      	cmp	r3, #0
 800f206:	d131      	bne.n	800f26c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f208:	4b1c      	ldr	r3, [pc, #112]	@ (800f27c <FATFS_LinkDriverEx+0x94>)
 800f20a:	7a5b      	ldrb	r3, [r3, #9]
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	461a      	mov	r2, r3
 800f210:	4b1a      	ldr	r3, [pc, #104]	@ (800f27c <FATFS_LinkDriverEx+0x94>)
 800f212:	2100      	movs	r1, #0
 800f214:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f216:	4b19      	ldr	r3, [pc, #100]	@ (800f27c <FATFS_LinkDriverEx+0x94>)
 800f218:	7a5b      	ldrb	r3, [r3, #9]
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	4a17      	ldr	r2, [pc, #92]	@ (800f27c <FATFS_LinkDriverEx+0x94>)
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	4413      	add	r3, r2
 800f222:	68fa      	ldr	r2, [r7, #12]
 800f224:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f226:	4b15      	ldr	r3, [pc, #84]	@ (800f27c <FATFS_LinkDriverEx+0x94>)
 800f228:	7a5b      	ldrb	r3, [r3, #9]
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	461a      	mov	r2, r3
 800f22e:	4b13      	ldr	r3, [pc, #76]	@ (800f27c <FATFS_LinkDriverEx+0x94>)
 800f230:	4413      	add	r3, r2
 800f232:	79fa      	ldrb	r2, [r7, #7]
 800f234:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f236:	4b11      	ldr	r3, [pc, #68]	@ (800f27c <FATFS_LinkDriverEx+0x94>)
 800f238:	7a5b      	ldrb	r3, [r3, #9]
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	1c5a      	adds	r2, r3, #1
 800f23e:	b2d1      	uxtb	r1, r2
 800f240:	4a0e      	ldr	r2, [pc, #56]	@ (800f27c <FATFS_LinkDriverEx+0x94>)
 800f242:	7251      	strb	r1, [r2, #9]
 800f244:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f246:	7dbb      	ldrb	r3, [r7, #22]
 800f248:	3330      	adds	r3, #48	@ 0x30
 800f24a:	b2da      	uxtb	r2, r3
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	3301      	adds	r3, #1
 800f254:	223a      	movs	r2, #58	@ 0x3a
 800f256:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	3302      	adds	r3, #2
 800f25c:	222f      	movs	r2, #47	@ 0x2f
 800f25e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	3303      	adds	r3, #3
 800f264:	2200      	movs	r2, #0
 800f266:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f268:	2300      	movs	r3, #0
 800f26a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f26c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f26e:	4618      	mov	r0, r3
 800f270:	371c      	adds	r7, #28
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr
 800f27a:	bf00      	nop
 800f27c:	24000328 	.word	0x24000328

0800f280 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f28a:	2200      	movs	r2, #0
 800f28c:	6839      	ldr	r1, [r7, #0]
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f7ff ffaa 	bl	800f1e8 <FATFS_LinkDriverEx>
 800f294:	4603      	mov	r3, r0
}
 800f296:	4618      	mov	r0, r3
 800f298:	3708      	adds	r7, #8
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
	...

0800f2a0 <at_echo_off>:
{
	mobile_sendCommand("\r\nATE1\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_echo_off (char* recived)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nATE0\r\n", COMMAND_GENERAL_DELAY, recived);
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	f240 5114 	movw	r1, #1300	@ 0x514
 800f2ae:	4803      	ldr	r0, [pc, #12]	@ (800f2bc <at_echo_off+0x1c>)
 800f2b0:	f000 f898 	bl	800f3e4 <mobile_sendCommand>
}
 800f2b4:	bf00      	nop
 800f2b6:	3708      	adds	r7, #8
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	080111f4 	.word	0x080111f4

0800f2c0 <at_network_mode>:
{
	mobile_sendCommand("\r\nAT+CPIN?\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_network_mode (char* recived)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CNMP=38\r\n", COMMAND_GENERAL_DELAY, recived);
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	f240 5114 	movw	r1, #1300	@ 0x514
 800f2ce:	4803      	ldr	r0, [pc, #12]	@ (800f2dc <at_network_mode+0x1c>)
 800f2d0:	f000 f888 	bl	800f3e4 <mobile_sendCommand>
}
 800f2d4:	bf00      	nop
 800f2d6:	3708      	adds	r7, #8
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	0801128c 	.word	0x0801128c

0800f2e0 <at_set_band>:

void at_set_band(char* recived)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CMNB=3\r\n", COMMAND_GENERAL_DELAY, recived);
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	f240 5114 	movw	r1, #1300	@ 0x514
 800f2ee:	4803      	ldr	r0, [pc, #12]	@ (800f2fc <at_set_band+0x1c>)
 800f2f0:	f000 f878 	bl	800f3e4 <mobile_sendCommand>
}
 800f2f4:	bf00      	nop
 800f2f6:	3708      	adds	r7, #8
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}
 800f2fc:	0801129c 	.word	0x0801129c

0800f300 <at_gprs_init>:
{
	mobile_sendCommand("\r\nAT+CBANDCFG=\"CAT-M\",3,20\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_gprs_init (char* recived)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CGACT=1,1\r\n", COMMAND_GENERAL_DELAY, recived);
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	f240 5114 	movw	r1, #1300	@ 0x514
 800f30e:	4803      	ldr	r0, [pc, #12]	@ (800f31c <at_gprs_init+0x1c>)
 800f310:	f000 f868 	bl	800f3e4 <mobile_sendCommand>
}
 800f314:	bf00      	nop
 800f316:	3708      	adds	r7, #8
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	080112dc 	.word	0x080112dc

0800f320 <at_network_attach_request>:
	fprintf(buffer,"\r\nAT%PINGCMD=0,%s,%d\r\n",MONGO_DB_IP,count);
	mobile_sendCommand(buffer, COMMAND_GENERAL_DELAY, recived);
}

void at_network_attach_request (char* recived)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CGATT=1\r\n", COMMAND_GENERAL_DELAY, recived);
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	f240 5114 	movw	r1, #1300	@ 0x514
 800f32e:	4803      	ldr	r0, [pc, #12]	@ (800f33c <at_network_attach_request+0x1c>)
 800f330:	f000 f858 	bl	800f3e4 <mobile_sendCommand>
}
 800f334:	bf00      	nop
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	08011328 	.word	0x08011328

0800f340 <at_init_http_connection>:
{
	mobile_sendCommand("\r\nAT+CIPSRIP=1\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_init_http_connection (char* recived)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b082      	sub	sp, #8
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]

	//mobile_sendCommand("\r\nAT+SAPBR=1,1\r\n", COMMAND_GENERAL_DELAY, recived);

	//mobile_sendCommand("\r\nAT+SAPBR=2,1\r\n", COMMAND_GENERAL_DELAY, recived);

	mobile_sendCommand("\r\nAT+HTTPINIT\r\n", COMMAND_GENERAL_DELAY, recived);
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	f240 5114 	movw	r1, #1300	@ 0x514
 800f34e:	4806      	ldr	r0, [pc, #24]	@ (800f368 <at_init_http_connection+0x28>)
 800f350:	f000 f848 	bl	800f3e4 <mobile_sendCommand>

	mobile_sendCommand("\r\nAT+HTTPPARA=\"CID\",1\r\n", COMMAND_GENERAL_DELAY, recived);
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	f240 5114 	movw	r1, #1300	@ 0x514
 800f35a:	4804      	ldr	r0, [pc, #16]	@ (800f36c <at_init_http_connection+0x2c>)
 800f35c:	f000 f842 	bl	800f3e4 <mobile_sendCommand>

}
 800f360:	bf00      	nop
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	08011368 	.word	0x08011368
 800f36c:	08011378 	.word	0x08011378

0800f370 <at_lte_send>:
{
	mobile_sendCommand("\r\nAT+CIPHEAD=1\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_lte_send(char* site, char* to_send,char* recived)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b0a4      	sub	sp, #144	@ 0x90
 800f374:	af00      	add	r7, sp, #0
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	60b9      	str	r1, [r7, #8]
 800f37a:	607a      	str	r2, [r7, #4]
	char buffer[MAX_LTE_MSG_LEN];
	sprintf(buffer,"AT+HTTPPARA=\"URL\",\"%s%s\"",site,to_send);
 800f37c:	f107 0010 	add.w	r0, r7, #16
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	4907      	ldr	r1, [pc, #28]	@ (800f3a4 <at_lte_send+0x34>)
 800f386:	f000 febb 	bl	8010100 <siprintf>
	mobile_sendCommand(buffer, 5000, recived);
 800f38a:	f107 0310 	add.w	r3, r7, #16
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f394:	4618      	mov	r0, r3
 800f396:	f000 f825 	bl	800f3e4 <mobile_sendCommand>
}
 800f39a:	bf00      	nop
 800f39c:	3790      	adds	r7, #144	@ 0x90
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	080113a4 	.word	0x080113a4

0800f3a8 <at_network_pdp_activate>:


//nbiot
void at_network_pdp_activate(char* recived)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b092      	sub	sp, #72	@ 0x48
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
	char buffer[64];
	fprintf(buffer,"\r\nAT+CGDCONT=1,\"%s\",\"%s\"\r\n",MONGO_DB_PDP_TYPE,SIMBASE_APN);
 800f3b0:	f107 0008 	add.w	r0, r7, #8
 800f3b4:	4b08      	ldr	r3, [pc, #32]	@ (800f3d8 <at_network_pdp_activate+0x30>)
 800f3b6:	4a09      	ldr	r2, [pc, #36]	@ (800f3dc <at_network_pdp_activate+0x34>)
 800f3b8:	4909      	ldr	r1, [pc, #36]	@ (800f3e0 <at_network_pdp_activate+0x38>)
 800f3ba:	f000 fe3b 	bl	8010034 <fiprintf>
	mobile_sendCommand(buffer, COMMAND_GENERAL_DELAY, recived);
 800f3be:	f107 0308 	add.w	r3, r7, #8
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	f240 5114 	movw	r1, #1300	@ 0x514
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f000 f80b 	bl	800f3e4 <mobile_sendCommand>

}
 800f3ce:	bf00      	nop
 800f3d0:	3748      	adds	r7, #72	@ 0x48
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	08011338 	.word	0x08011338
 800f3dc:	080113c0 	.word	0x080113c0
 800f3e0:	080113c4 	.word	0x080113c4

0800f3e4 <mobile_sendCommand>:
}

//----------------------------------------------------------------------------------------

void mobile_sendCommand(char * command, unsigned int timeout, char * recived)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(MOBILE_COMMS_UART, command, strlen(command)); //Transmits
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f7f0 ff75 	bl	80002e0 <strlen>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	68f9      	ldr	r1, [r7, #12]
 800f3fe:	4806      	ldr	r0, [pc, #24]	@ (800f418 <mobile_sendCommand+0x34>)
 800f400:	f7fa ff1a 	bl	800a238 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(MOBILE_COMMS_UART, recived, 32, timeout); //Reads the module
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	2220      	movs	r2, #32
 800f408:	6879      	ldr	r1, [r7, #4]
 800f40a:	4803      	ldr	r0, [pc, #12]	@ (800f418 <mobile_sendCommand+0x34>)
 800f40c:	f7fa fe4c 	bl	800a0a8 <HAL_UART_Receive>
}
 800f410:	bf00      	nop
 800f412:	3710      	adds	r7, #16
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}
 800f418:	240001cc 	.word	0x240001cc

0800f41c <init_package_data>:
package_data_t package_data[2];
char package_data_index = 0;


void init_package_data(void)
{
 800f41c:	b480      	push	{r7}
 800f41e:	af00      	add	r7, sp, #0
	package_data[0].packege_number = 0;
 800f420:	4b08      	ldr	r3, [pc, #32]	@ (800f444 <init_package_data+0x28>)
 800f422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f426:	2200      	movs	r2, #0
 800f428:	f8a3 27ac 	strh.w	r2, [r3, #1964]	@ 0x7ac
	package_data[1].packege_number = 0;
 800f42c:	4b05      	ldr	r3, [pc, #20]	@ (800f444 <init_package_data+0x28>)
 800f42e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f432:	2200      	movs	r2, #0
 800f434:	f8a3 2f5c 	strh.w	r2, [r3, #3932]	@ 0xf5c
}
 800f438:	bf00      	nop
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	24000334 	.word	0x24000334

0800f448 <write_package_data>:

package_data_t* write_package_data()
{
 800f448:	b480      	push	{r7}
 800f44a:	af00      	add	r7, sp, #0
    return &package_data[package_data_index];
 800f44c:	4b06      	ldr	r3, [pc, #24]	@ (800f468 <write_package_data+0x20>)
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	461a      	mov	r2, r3
 800f452:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 800f456:	fb02 f303 	mul.w	r3, r2, r3
 800f45a:	4a04      	ldr	r2, [pc, #16]	@ (800f46c <write_package_data+0x24>)
 800f45c:	4413      	add	r3, r2
}
 800f45e:	4618      	mov	r0, r3
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr
 800f468:	24003294 	.word	0x24003294
 800f46c:	24000334 	.word	0x24000334

0800f470 <read_package_data>:


package_data_t* read_package_data()
{
 800f470:	b480      	push	{r7}
 800f472:	af00      	add	r7, sp, #0
    return &package_data[!package_data_index];
 800f474:	4b09      	ldr	r3, [pc, #36]	@ (800f49c <read_package_data+0x2c>)
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	bf0c      	ite	eq
 800f47c:	2301      	moveq	r3, #1
 800f47e:	2300      	movne	r3, #0
 800f480:	b2db      	uxtb	r3, r3
 800f482:	461a      	mov	r2, r3
 800f484:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 800f488:	fb02 f303 	mul.w	r3, r2, r3
 800f48c:	4a04      	ldr	r2, [pc, #16]	@ (800f4a0 <read_package_data+0x30>)
 800f48e:	4413      	add	r3, r2
}
 800f490:	4618      	mov	r0, r3
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr
 800f49a:	bf00      	nop
 800f49c:	24003294 	.word	0x24003294
 800f4a0:	24000334 	.word	0x24000334

0800f4a4 <update_package_data>:


void update_package_data()
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	af00      	add	r7, sp, #0
	package_data[package_data_index].packege_number++;
 800f4a8:	4b21      	ldr	r3, [pc, #132]	@ (800f530 <update_package_data+0x8c>)
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	4921      	ldr	r1, [pc, #132]	@ (800f534 <update_package_data+0x90>)
 800f4b0:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 800f4b4:	fb02 f303 	mul.w	r3, r2, r3
 800f4b8:	4419      	add	r1, r3
 800f4ba:	f241 73ac 	movw	r3, #6060	@ 0x17ac
 800f4be:	440b      	add	r3, r1
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	b298      	uxth	r0, r3
 800f4c6:	491b      	ldr	r1, [pc, #108]	@ (800f534 <update_package_data+0x90>)
 800f4c8:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 800f4cc:	fb02 f303 	mul.w	r3, r2, r3
 800f4d0:	18ca      	adds	r2, r1, r3
 800f4d2:	f241 73ac 	movw	r3, #6060	@ 0x17ac
 800f4d6:	4413      	add	r3, r2
 800f4d8:	4602      	mov	r2, r0
 800f4da:	801a      	strh	r2, [r3, #0]
    package_data_index = !package_data_index;
 800f4dc:	4b14      	ldr	r3, [pc, #80]	@ (800f530 <update_package_data+0x8c>)
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	bf0c      	ite	eq
 800f4e4:	2301      	moveq	r3, #1
 800f4e6:	2300      	movne	r3, #0
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	4b10      	ldr	r3, [pc, #64]	@ (800f530 <update_package_data+0x8c>)
 800f4ee:	701a      	strb	r2, [r3, #0]
    package_data[package_data_index].packege_number++;
 800f4f0:	4b0f      	ldr	r3, [pc, #60]	@ (800f530 <update_package_data+0x8c>)
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	490f      	ldr	r1, [pc, #60]	@ (800f534 <update_package_data+0x90>)
 800f4f8:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 800f4fc:	fb02 f303 	mul.w	r3, r2, r3
 800f500:	4419      	add	r1, r3
 800f502:	f241 73ac 	movw	r3, #6060	@ 0x17ac
 800f506:	440b      	add	r3, r1
 800f508:	881b      	ldrh	r3, [r3, #0]
 800f50a:	3301      	adds	r3, #1
 800f50c:	b298      	uxth	r0, r3
 800f50e:	4909      	ldr	r1, [pc, #36]	@ (800f534 <update_package_data+0x90>)
 800f510:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 800f514:	fb02 f303 	mul.w	r3, r2, r3
 800f518:	18ca      	adds	r2, r1, r3
 800f51a:	f241 73ac 	movw	r3, #6060	@ 0x17ac
 800f51e:	4413      	add	r3, r2
 800f520:	4602      	mov	r2, r0
 800f522:	801a      	strh	r2, [r3, #0]
}
 800f524:	bf00      	nop
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop
 800f530:	24003294 	.word	0x24003294
 800f534:	24000334 	.word	0x24000334

0800f538 <manager_init>:
uint64_t prev_imu_timer = 0;
uint64_t prev_temperature_timer = 0;
uint64_t prev_send_timer = 0;

void manager_init(void)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	af00      	add	r7, sp, #0
	//Memory
	init_package_data();
 800f53c:	f7ff ff6e 	bl	800f41c <init_package_data>
	//Batteries
	battery_init();
 800f540:	f000 f86e 	bl	800f620 <battery_init>
	//Temperature
	temperature_init();
 800f544:	f000 fb34 	bl	800fbb0 <temperature_init>
	//CNSS
	//cnss_init();
	//IMU
	imu_init();
 800f548:	f000 f8c2 	bl	800f6d0 <imu_init>
	//NB_IoT
	nb_iot_init();
 800f54c:	f000 f976 	bl	800f83c <nb_iot_init>
	//SD_CARD
	sd_card_init();
 800f550:	f000 f9b4 	bl	800f8bc <sd_card_init>

}
 800f554:	bf00      	nop
 800f556:	bd80      	pop	{r7, pc}

0800f558 <manager_update>:
void manager_update(void)
{
 800f558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f55c:	af00      	add	r7, sp, #0
	current_time = extended_tick;
 800f55e:	492b      	ldr	r1, [pc, #172]	@ (800f60c <manager_update+0xb4>)
 800f560:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f564:	4e2a      	ldr	r6, [pc, #168]	@ (800f610 <manager_update+0xb8>)
 800f566:	e9c6 0100 	strd	r0, r1, [r6]

	if (current_time - prev_imu_timer >= IMU_SAMPLE_PERIOD_UC)
 800f56a:	4929      	ldr	r1, [pc, #164]	@ (800f610 <manager_update+0xb8>)
 800f56c:	e9d1 ab00 	ldrd	sl, fp, [r1]
 800f570:	4928      	ldr	r1, [pc, #160]	@ (800f614 <manager_update+0xbc>)
 800f572:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f576:	ebba 0200 	subs.w	r2, sl, r0
 800f57a:	eb6b 0301 	sbc.w	r3, fp, r1
 800f57e:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f582:	428a      	cmp	r2, r1
 800f584:	f173 0300 	sbcs.w	r3, r3, #0
 800f588:	d307      	bcc.n	800f59a <manager_update+0x42>
	{
		//IMU
		imu_update(); //not tested
 800f58a:	f000 f8fd 	bl	800f788 <imu_update>
		prev_imu_timer = current_time;
 800f58e:	4b20      	ldr	r3, [pc, #128]	@ (800f610 <manager_update+0xb8>)
 800f590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f594:	491f      	ldr	r1, [pc, #124]	@ (800f614 <manager_update+0xbc>)
 800f596:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (current_time - prev_temperature_timer >= TEMP_SAMPLE_PERIOD_UC)
 800f59a:	4b1d      	ldr	r3, [pc, #116]	@ (800f610 <manager_update+0xb8>)
 800f59c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5a0:	4b1d      	ldr	r3, [pc, #116]	@ (800f618 <manager_update+0xc0>)
 800f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a6:	ebb0 0802 	subs.w	r8, r0, r2
 800f5aa:	eb61 0903 	sbc.w	r9, r1, r3
 800f5ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f5b2:	4598      	cmp	r8, r3
 800f5b4:	f179 0300 	sbcs.w	r3, r9, #0
 800f5b8:	d307      	bcc.n	800f5ca <manager_update+0x72>
	{
		//Temperature
		temperature_update();
 800f5ba:	f000 faff 	bl	800fbbc <temperature_update>
		prev_temperature_timer = current_time;
 800f5be:	4b14      	ldr	r3, [pc, #80]	@ (800f610 <manager_update+0xb8>)
 800f5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c4:	4914      	ldr	r1, [pc, #80]	@ (800f618 <manager_update+0xc0>)
 800f5c6:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (current_time - prev_send_timer >= SEND_SAMPLE_PERIOD_UC)
 800f5ca:	4b11      	ldr	r3, [pc, #68]	@ (800f610 <manager_update+0xb8>)
 800f5cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5d0:	4b12      	ldr	r3, [pc, #72]	@ (800f61c <manager_update+0xc4>)
 800f5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d6:	1a84      	subs	r4, r0, r2
 800f5d8:	eb61 0503 	sbc.w	r5, r1, r3
 800f5dc:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f5e0:	429c      	cmp	r4, r3
 800f5e2:	f175 0300 	sbcs.w	r3, r5, #0
 800f5e6:	d30d      	bcc.n	800f604 <manager_update+0xac>
	{
		//Batteries
		battery_update(); //verified
 800f5e8:	f000 f822 	bl	800f630 <battery_update>
		//CNSS
		//cnss_update(); //working but not tested
		//NB_IoT
		nb_iot_update(); //not working
 800f5ec:	f000 f952 	bl	800f894 <nb_iot_update>
		///SD_CARD
		update_package_data();
 800f5f0:	f7ff ff58 	bl	800f4a4 <update_package_data>
		sd_card_update();
 800f5f4:	f000 f9c6 	bl	800f984 <sd_card_update>
		prev_send_timer = current_time;
 800f5f8:	4b05      	ldr	r3, [pc, #20]	@ (800f610 <manager_update+0xb8>)
 800f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fe:	4907      	ldr	r1, [pc, #28]	@ (800f61c <manager_update+0xc4>)
 800f600:	e9c1 2300 	strd	r2, r3, [r1]
	}
	//HAL_Delay(1000);
}
 800f604:	bf00      	nop
 800f606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f60a:	bf00      	nop
 800f60c:	240001c0 	.word	0x240001c0
 800f610:	24003298 	.word	0x24003298
 800f614:	240032a0 	.word	0x240032a0
 800f618:	240032a8 	.word	0x240032a8
 800f61c:	240032b0 	.word	0x240032b0

0800f620 <battery_init>:
 *      Author: viny
 */
#include "battery_behavior.h"

void battery_init (void)
{
 800f620:	b480      	push	{r7}
 800f622:	af00      	add	r7, sp, #0

}
 800f624:	bf00      	nop
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr
	...

0800f630 <battery_update>:

void battery_update (void)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b086      	sub	sp, #24
 800f634:	af00      	add	r7, sp, #0
	//Start Conversion
	HAL_ADC_Start(&hadc1);
 800f636:	4822      	ldr	r0, [pc, #136]	@ (800f6c0 <battery_update+0x90>)
 800f638:	f7f2 fbca 	bl	8001dd0 <HAL_ADC_Start>

	//Get and Store Conversion
	package_data_t* temp = write_package_data();
 800f63c:	f7ff ff04 	bl	800f448 <write_package_data>
 800f640:	6178      	str	r0, [r7, #20]
	temp->power_level=
			((HAL_ADC_GetValue(&hadc1) * 5/1023)-3.3)/0.017;
 800f642:	481f      	ldr	r0, [pc, #124]	@ (800f6c0 <battery_update+0x90>)
 800f644:	f7f2 fc8e 	bl	8001f64 <HAL_ADC_GetValue>
 800f648:	4602      	mov	r2, r0
 800f64a:	4613      	mov	r3, r2
 800f64c:	009b      	lsls	r3, r3, #2
 800f64e:	441a      	add	r2, r3
 800f650:	4b1c      	ldr	r3, [pc, #112]	@ (800f6c4 <battery_update+0x94>)
 800f652:	fba3 1302 	umull	r1, r3, r3, r2
 800f656:	1ad2      	subs	r2, r2, r3
 800f658:	0852      	lsrs	r2, r2, #1
 800f65a:	4413      	add	r3, r2
 800f65c:	0a5b      	lsrs	r3, r3, #9
 800f65e:	ee07 3a90 	vmov	s15, r3
 800f662:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f666:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 800f6b0 <battery_update+0x80>
 800f66a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800f66e:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 800f6b8 <battery_update+0x88>
 800f672:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f676:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	temp->power_level=
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	edc3 7a00 	vstr	s15, [r3]
	char buffer[16];
	sprintf(buffer,"Batt:%d\n\n",(int)temp->power_level);
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	edd3 7a00 	vldr	s15, [r3]
 800f686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f68a:	1d3b      	adds	r3, r7, #4
 800f68c:	ee17 2a90 	vmov	r2, s15
 800f690:	490d      	ldr	r1, [pc, #52]	@ (800f6c8 <battery_update+0x98>)
 800f692:	4618      	mov	r0, r3
 800f694:	f000 fd34 	bl	8010100 <siprintf>
	HAL_UART_Transmit(&huart3, buffer, 8, -1);
 800f698:	1d39      	adds	r1, r7, #4
 800f69a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f69e:	2208      	movs	r2, #8
 800f6a0:	480a      	ldr	r0, [pc, #40]	@ (800f6cc <battery_update+0x9c>)
 800f6a2:	f7fa fc73 	bl	8009f8c <HAL_UART_Transmit>
}
 800f6a6:	bf00      	nop
 800f6a8:	3718      	adds	r7, #24
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	66666666 	.word	0x66666666
 800f6b4:	400a6666 	.word	0x400a6666
 800f6b8:	b020c49c 	.word	0xb020c49c
 800f6bc:	3f916872 	.word	0x3f916872
 800f6c0:	2400008c 	.word	0x2400008c
 800f6c4:	00401005 	.word	0x00401005
 800f6c8:	080113f8 	.word	0x080113f8
 800f6cc:	24000260 	.word	0x24000260

0800f6d0 <imu_init>:
unsigned int sample_count = 0;

char imu_msg_buffer[32];

void imu_init(void)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b086      	sub	sp, #24
 800f6d4:	af04      	add	r7, sp, #16
	uint8_t whoami = 0;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(IMU_I2C, ITG3205_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &whoami, 1, 100);
 800f6da:	2364      	movs	r3, #100	@ 0x64
 800f6dc:	9302      	str	r3, [sp, #8]
 800f6de:	2301      	movs	r3, #1
 800f6e0:	9301      	str	r3, [sp, #4]
 800f6e2:	1dfb      	adds	r3, r7, #7
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	21d0      	movs	r1, #208	@ 0xd0
 800f6ec:	4821      	ldr	r0, [pc, #132]	@ (800f774 <imu_init+0xa4>)
 800f6ee:	f7f4 fc05 	bl	8003efc <HAL_I2C_Mem_Read>
	sprintf(imu_msg_buffer, "\r\nWHO_AM_I: 0x%02X\r\n", whoami);
 800f6f2:	79fb      	ldrb	r3, [r7, #7]
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	4920      	ldr	r1, [pc, #128]	@ (800f778 <imu_init+0xa8>)
 800f6f8:	4820      	ldr	r0, [pc, #128]	@ (800f77c <imu_init+0xac>)
 800f6fa:	f000 fd01 	bl	8010100 <siprintf>
	HAL_UART_Transmit(DEBUG_UART, imu_msg_buffer, 20, -1);
 800f6fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f702:	2214      	movs	r2, #20
 800f704:	491d      	ldr	r1, [pc, #116]	@ (800f77c <imu_init+0xac>)
 800f706:	481e      	ldr	r0, [pc, #120]	@ (800f780 <imu_init+0xb0>)
 800f708:	f7fa fc40 	bl	8009f8c <HAL_UART_Transmit>

	uint8_t val;

	// Sample Rate Divider
	val = 0x07;
 800f70c:	2307      	movs	r3, #7
 800f70e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IMU_I2C, ITG3205_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 800f710:	2364      	movs	r3, #100	@ 0x64
 800f712:	9302      	str	r3, [sp, #8]
 800f714:	2301      	movs	r3, #1
 800f716:	9301      	str	r3, [sp, #4]
 800f718:	1dbb      	adds	r3, r7, #6
 800f71a:	9300      	str	r3, [sp, #0]
 800f71c:	2301      	movs	r3, #1
 800f71e:	2215      	movs	r2, #21
 800f720:	21d0      	movs	r1, #208	@ 0xd0
 800f722:	4814      	ldr	r0, [pc, #80]	@ (800f774 <imu_init+0xa4>)
 800f724:	f7f4 fad6 	bl	8003cd4 <HAL_I2C_Mem_Write>

	// DLPF & Full Scale
	val = 0x1B;
 800f728:	231b      	movs	r3, #27
 800f72a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IMU_I2C, ITG3205_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 800f72c:	2364      	movs	r3, #100	@ 0x64
 800f72e:	9302      	str	r3, [sp, #8]
 800f730:	2301      	movs	r3, #1
 800f732:	9301      	str	r3, [sp, #4]
 800f734:	1dbb      	adds	r3, r7, #6
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	2301      	movs	r3, #1
 800f73a:	2216      	movs	r2, #22
 800f73c:	21d0      	movs	r1, #208	@ 0xd0
 800f73e:	480d      	ldr	r0, [pc, #52]	@ (800f774 <imu_init+0xa4>)
 800f740:	f7f4 fac8 	bl	8003cd4 <HAL_I2C_Mem_Write>

	// Power Management
	val = 0x03;
 800f744:	2303      	movs	r3, #3
 800f746:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IMU_I2C, ITG3205_ADDR, 0x3E, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 800f748:	2364      	movs	r3, #100	@ 0x64
 800f74a:	9302      	str	r3, [sp, #8]
 800f74c:	2301      	movs	r3, #1
 800f74e:	9301      	str	r3, [sp, #4]
 800f750:	1dbb      	adds	r3, r7, #6
 800f752:	9300      	str	r3, [sp, #0]
 800f754:	2301      	movs	r3, #1
 800f756:	223e      	movs	r2, #62	@ 0x3e
 800f758:	21d0      	movs	r1, #208	@ 0xd0
 800f75a:	4806      	ldr	r0, [pc, #24]	@ (800f774 <imu_init+0xa4>)
 800f75c:	f7f4 faba 	bl	8003cd4 <HAL_I2C_Mem_Write>

	HAL_UART_Transmit(DEBUG_UART, IMU_INIT_MSG , sizeof IMU_INIT_MSG , 100);
 800f760:	2364      	movs	r3, #100	@ 0x64
 800f762:	220e      	movs	r2, #14
 800f764:	4907      	ldr	r1, [pc, #28]	@ (800f784 <imu_init+0xb4>)
 800f766:	4806      	ldr	r0, [pc, #24]	@ (800f780 <imu_init+0xb0>)
 800f768:	f7fa fc10 	bl	8009f8c <HAL_UART_Transmit>

}
 800f76c:	bf00      	nop
 800f76e:	3708      	adds	r7, #8
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	240000f0 	.word	0x240000f0
 800f778:	08011404 	.word	0x08011404
 800f77c:	240032bc 	.word	0x240032bc
 800f780:	24000260 	.word	0x24000260
 800f784:	0801141c 	.word	0x0801141c

0800f788 <imu_update>:

void imu_update(void)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b088      	sub	sp, #32
 800f78c:	af04      	add	r7, sp, #16
	if (sample_count < IMU_NUMBER_OF_SAMPLES)
 800f78e:	4b26      	ldr	r3, [pc, #152]	@ (800f828 <imu_update+0xa0>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800f796:	4293      	cmp	r3, r2
 800f798:	d83e      	bhi.n	800f818 <imu_update+0x90>
	{
		uint8_t buf[2] = {0};
 800f79a:	2300      	movs	r3, #0
 800f79c:	80bb      	strh	r3, [r7, #4]
		if (HAL_I2C_Mem_Read(IMU_I2C, ITG3205_ADDR, 0x21, I2C_MEMADD_SIZE_8BIT, buf, 2, 100) == HAL_OK)
 800f79e:	2364      	movs	r3, #100	@ 0x64
 800f7a0:	9302      	str	r3, [sp, #8]
 800f7a2:	2302      	movs	r3, #2
 800f7a4:	9301      	str	r3, [sp, #4]
 800f7a6:	1d3b      	adds	r3, r7, #4
 800f7a8:	9300      	str	r3, [sp, #0]
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	2221      	movs	r2, #33	@ 0x21
 800f7ae:	21d0      	movs	r1, #208	@ 0xd0
 800f7b0:	481e      	ldr	r0, [pc, #120]	@ (800f82c <imu_update+0xa4>)
 800f7b2:	f7f4 fba3 	bl	8003efc <HAL_I2C_Mem_Read>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d130      	bne.n	800f81e <imu_update+0x96>
		{
			int16_t z_raw = (int16_t)((buf[0] << 8) | buf[1]);
 800f7bc:	793b      	ldrb	r3, [r7, #4]
 800f7be:	b21b      	sxth	r3, r3
 800f7c0:	021b      	lsls	r3, r3, #8
 800f7c2:	b21a      	sxth	r2, r3
 800f7c4:	797b      	ldrb	r3, [r7, #5]
 800f7c6:	b21b      	sxth	r3, r3
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	81fb      	strh	r3, [r7, #14]
			package_data_t* imu_data = write_package_data();
 800f7cc:	f7ff fe3c 	bl	800f448 <write_package_data>
 800f7d0:	60b8      	str	r0, [r7, #8]
			imu_data->imu[sample_count] = z_raw;
 800f7d2:	4b15      	ldr	r3, [pc, #84]	@ (800f828 <imu_update+0xa0>)
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	3218      	adds	r2, #24
 800f7da:	89f9      	ldrh	r1, [r7, #14]
 800f7dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sample_count++;
 800f7e0:	4b11      	ldr	r3, [pc, #68]	@ (800f828 <imu_update+0xa0>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	4a10      	ldr	r2, [pc, #64]	@ (800f828 <imu_update+0xa0>)
 800f7e8:	6013      	str	r3, [r2, #0]

			sprintf(imu_msg_buffer, "\r\nZ: %02X %02X = %d\r\n", buf[0], buf[1], z_raw);
 800f7ea:	793b      	ldrb	r3, [r7, #4]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	797b      	ldrb	r3, [r7, #5]
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f7f6:	9300      	str	r3, [sp, #0]
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	490d      	ldr	r1, [pc, #52]	@ (800f830 <imu_update+0xa8>)
 800f7fc:	480d      	ldr	r0, [pc, #52]	@ (800f834 <imu_update+0xac>)
 800f7fe:	f000 fc7f 	bl	8010100 <siprintf>
			HAL_UART_Transmit(DEBUG_UART, imu_msg_buffer, strlen(imu_msg_buffer), 100);
 800f802:	480c      	ldr	r0, [pc, #48]	@ (800f834 <imu_update+0xac>)
 800f804:	f7f0 fd6c 	bl	80002e0 <strlen>
 800f808:	4603      	mov	r3, r0
 800f80a:	b29a      	uxth	r2, r3
 800f80c:	2364      	movs	r3, #100	@ 0x64
 800f80e:	4909      	ldr	r1, [pc, #36]	@ (800f834 <imu_update+0xac>)
 800f810:	4809      	ldr	r0, [pc, #36]	@ (800f838 <imu_update+0xb0>)
 800f812:	f7fa fbbb 	bl	8009f8c <HAL_UART_Transmit>
		}
	}
	else {
		sample_count = 0;
	}
}
 800f816:	e002      	b.n	800f81e <imu_update+0x96>
		sample_count = 0;
 800f818:	4b03      	ldr	r3, [pc, #12]	@ (800f828 <imu_update+0xa0>)
 800f81a:	2200      	movs	r2, #0
 800f81c:	601a      	str	r2, [r3, #0]
}
 800f81e:	bf00      	nop
 800f820:	3710      	adds	r7, #16
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	240032b8 	.word	0x240032b8
 800f82c:	240000f0 	.word	0x240000f0
 800f830:	0801142c 	.word	0x0801142c
 800f834:	240032bc 	.word	0x240032bc
 800f838:	24000260 	.word	0x24000260

0800f83c <nb_iot_init>:

char recived_at_msg[MOBILE_COMMS_ANSWER_LEN];
char msg_buffer[32];

void nb_iot_init (void)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(DEBUG_UART, MOBILE_COMMS_INIT_MSG, sizeof MOBILE_COMMS_INIT_MSG);
 800f840:	2216      	movs	r2, #22
 800f842:	4910      	ldr	r1, [pc, #64]	@ (800f884 <nb_iot_init+0x48>)
 800f844:	4810      	ldr	r0, [pc, #64]	@ (800f888 <nb_iot_init+0x4c>)
 800f846:	f7fa fcf7 	bl	800a238 <HAL_UART_Transmit_IT>

	at_echo_off(recived_at_msg);
 800f84a:	4810      	ldr	r0, [pc, #64]	@ (800f88c <nb_iot_init+0x50>)
 800f84c:	f7ff fd28 	bl	800f2a0 <at_echo_off>
	at_network_mode(recived_at_msg);
 800f850:	480e      	ldr	r0, [pc, #56]	@ (800f88c <nb_iot_init+0x50>)
 800f852:	f7ff fd35 	bl	800f2c0 <at_network_mode>
	at_set_band(recived_at_msg);
 800f856:	480d      	ldr	r0, [pc, #52]	@ (800f88c <nb_iot_init+0x50>)
 800f858:	f7ff fd42 	bl	800f2e0 <at_set_band>
	//at_setup_lte(recived_at_msg);
	at_network_pdp_activate(recived_at_msg);
 800f85c:	480b      	ldr	r0, [pc, #44]	@ (800f88c <nb_iot_init+0x50>)
 800f85e:	f7ff fda3 	bl	800f3a8 <at_network_pdp_activate>
	at_gprs_init(recived_at_msg);
 800f862:	480a      	ldr	r0, [pc, #40]	@ (800f88c <nb_iot_init+0x50>)
 800f864:	f7ff fd4c 	bl	800f300 <at_gprs_init>
	at_network_attach_request (recived_at_msg);
 800f868:	4808      	ldr	r0, [pc, #32]	@ (800f88c <nb_iot_init+0x50>)
 800f86a:	f7ff fd59 	bl	800f320 <at_network_attach_request>
	//at_set_ip_config(recived_at_msg);
	//at_set_ip_headers(recived_at_msg);
	at_init_http_connection(recived_at_msg);
 800f86e:	4807      	ldr	r0, [pc, #28]	@ (800f88c <nb_iot_init+0x50>)
 800f870:	f7ff fd66 	bl	800f340 <at_init_http_connection>

	HAL_UART_Transmit_IT(DEBUG_UART, MOBILE_COMMS_END_INIT_MSG, sizeof MOBILE_COMMS_END_INIT_MSG);
 800f874:	221a      	movs	r2, #26
 800f876:	4906      	ldr	r1, [pc, #24]	@ (800f890 <nb_iot_init+0x54>)
 800f878:	4803      	ldr	r0, [pc, #12]	@ (800f888 <nb_iot_init+0x4c>)
 800f87a:	f7fa fcdd 	bl	800a238 <HAL_UART_Transmit_IT>

}
 800f87e:	bf00      	nop
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	08011444 	.word	0x08011444
 800f888:	24000260 	.word	0x24000260
 800f88c:	240032dc 	.word	0x240032dc
 800f890:	0801145c 	.word	0x0801145c

0800f894 <nb_iot_update>:

void nb_iot_update (void)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	af00      	add	r7, sp, #0
	at_lte_send(TESTE_SITE, "Teste", recived_at_msg);
 800f898:	4a05      	ldr	r2, [pc, #20]	@ (800f8b0 <nb_iot_update+0x1c>)
 800f89a:	4906      	ldr	r1, [pc, #24]	@ (800f8b4 <nb_iot_update+0x20>)
 800f89c:	4806      	ldr	r0, [pc, #24]	@ (800f8b8 <nb_iot_update+0x24>)
 800f89e:	f7ff fd67 	bl	800f370 <at_lte_send>
	HAL_Delay(1000);
 800f8a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800f8a6:	f7f1 fecd 	bl	8001644 <HAL_Delay>
}
 800f8aa:	bf00      	nop
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop
 800f8b0:	240032dc 	.word	0x240032dc
 800f8b4:	08011478 	.word	0x08011478
 800f8b8:	08011480 	.word	0x08011480

0800f8bc <sd_card_init>:
UINT bw;
char verify_flag;
char to_send[512];

void sd_card_init (void)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
    // Mount SD Card
    HAL_UART_Transmit(DEBUG_UART, SD_CARD_INIT_MSG , sizeof SD_CARD_INIT_MSG , -1);
 800f8c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f8c6:	2211      	movs	r2, #17
 800f8c8:	4928      	ldr	r1, [pc, #160]	@ (800f96c <sd_card_init+0xb0>)
 800f8ca:	4829      	ldr	r0, [pc, #164]	@ (800f970 <sd_card_init+0xb4>)
 800f8cc:	f7fa fb5e 	bl	8009f8c <HAL_UART_Transmit>

    if (HAL_SD_Init(&hsd1) != HAL_OK)
 800f8d0:	4828      	ldr	r0, [pc, #160]	@ (800f974 <sd_card_init+0xb8>)
 800f8d2:	f7f8 fcdf 	bl	8008294 <HAL_SD_Init>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d001      	beq.n	800f8e0 <sd_card_init+0x24>
	{
		Error_Handler();
 800f8dc:	f7f1 fa78 	bl	8000dd0 <Error_Handler>
	}

    //SD_initialize(lun)
    for (int i = 0,verify_flag = 0; (i < 10) & !verify_flag; ++i)
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	607b      	str	r3, [r7, #4]
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	603b      	str	r3, [r7, #0]
 800f8e8:	e00d      	b.n	800f906 <sd_card_init+0x4a>
    {
        if (HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER)
 800f8ea:	4822      	ldr	r0, [pc, #136]	@ (800f974 <sd_card_init+0xb8>)
 800f8ec:	f7f9 fe6c 	bl	80095c8 <HAL_SD_GetCardState>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b04      	cmp	r3, #4
 800f8f4:	d101      	bne.n	800f8fa <sd_card_init+0x3e>
        {
        	verify_flag = 1;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	603b      	str	r3, [r7, #0]
        }
        HAL_Delay(50);
 800f8fa:	2032      	movs	r0, #50	@ 0x32
 800f8fc:	f7f1 fea2 	bl	8001644 <HAL_Delay>
    for (int i = 0,verify_flag = 0; (i < 10) & !verify_flag; ++i)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	3301      	adds	r3, #1
 800f904:	607b      	str	r3, [r7, #4]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2b09      	cmp	r3, #9
 800f90a:	bfd4      	ite	le
 800f90c:	2301      	movle	r3, #1
 800f90e:	2300      	movgt	r3, #0
 800f910:	b2da      	uxtb	r2, r3
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	bf0c      	ite	eq
 800f918:	2301      	moveq	r3, #1
 800f91a:	2300      	movne	r3, #0
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	4013      	ands	r3, r2
 800f920:	b2db      	uxtb	r3, r3
 800f922:	2b00      	cmp	r3, #0
 800f924:	d1e1      	bne.n	800f8ea <sd_card_init+0x2e>
    }

    if (BSP_SD_Init() != RES_OK)
 800f926:	f7fd f97d 	bl	800cc24 <BSP_SD_Init>
 800f92a:	4603      	mov	r3, r0
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d001      	beq.n	800f934 <sd_card_init+0x78>
   {
	   Error_Handler();
 800f930:	f7f1 fa4e 	bl	8000dd0 <Error_Handler>
   }

    if (disk_initialize(0) != RES_OK)
 800f934:	2000      	movs	r0, #0
 800f936:	f7fd fb15 	bl	800cf64 <disk_initialize>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d001      	beq.n	800f944 <sd_card_init+0x88>
   {
	   Error_Handler();
 800f940:	f7f1 fa46 	bl	8000dd0 <Error_Handler>
   }

    res = f_mount(&fs, (TCHAR const*)SDPath, 1);
 800f944:	2201      	movs	r2, #1
 800f946:	490c      	ldr	r1, [pc, #48]	@ (800f978 <sd_card_init+0xbc>)
 800f948:	480c      	ldr	r0, [pc, #48]	@ (800f97c <sd_card_init+0xc0>)
 800f94a:	f7ff f82f 	bl	800e9ac <f_mount>
 800f94e:	4603      	mov	r3, r0
 800f950:	461a      	mov	r2, r3
 800f952:	4b0b      	ldr	r3, [pc, #44]	@ (800f980 <sd_card_init+0xc4>)
 800f954:	701a      	strb	r2, [r3, #0]
    if (res != FR_OK)
 800f956:	4b0a      	ldr	r3, [pc, #40]	@ (800f980 <sd_card_init+0xc4>)
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d001      	beq.n	800f962 <sd_card_init+0xa6>
    {
        Error_Handler();
 800f95e:	f7f1 fa37 	bl	8000dd0 <Error_Handler>
    }
}
 800f962:	bf00      	nop
 800f964:	3708      	adds	r7, #8
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	080114a0 	.word	0x080114a0
 800f970:	24000260 	.word	0x24000260
 800f974:	24000144 	.word	0x24000144
 800f978:	240002fc 	.word	0x240002fc
 800f97c:	2400333c 	.word	0x2400333c
 800f980:	2400379c 	.word	0x2400379c

0800f984 <sd_card_update>:

void sd_card_update (void)
{
 800f984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f986:	b095      	sub	sp, #84	@ 0x54
 800f988:	af0c      	add	r7, sp, #48	@ 0x30
    package_data_t* data = read_package_data();
 800f98a:	f7ff fd71 	bl	800f470 <read_package_data>
 800f98e:	6138      	str	r0, [r7, #16]

    // Open or create file to write
    char log_name[16];
    sprintf(log_name,"log_%d.txt",data->packege_number);
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f996:	f8b3 37ac 	ldrh.w	r3, [r3, #1964]	@ 0x7ac
 800f99a:	461a      	mov	r2, r3
 800f99c:	463b      	mov	r3, r7
 800f99e:	497a      	ldr	r1, [pc, #488]	@ (800fb88 <sd_card_update+0x204>)
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f000 fbad 	bl	8010100 <siprintf>
    res = f_open(&fil, log_name, FA_WRITE | FA_CREATE_ALWAYS);
 800f9a6:	463b      	mov	r3, r7
 800f9a8:	220a      	movs	r2, #10
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	4877      	ldr	r0, [pc, #476]	@ (800fb8c <sd_card_update+0x208>)
 800f9ae:	f7ff f843 	bl	800ea38 <f_open>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	4b76      	ldr	r3, [pc, #472]	@ (800fb90 <sd_card_update+0x20c>)
 800f9b8:	701a      	strb	r2, [r3, #0]
    if (res != FR_OK)
 800f9ba:	4b75      	ldr	r3, [pc, #468]	@ (800fb90 <sd_card_update+0x20c>)
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d001      	beq.n	800f9c6 <sd_card_update+0x42>
    {
        Error_Handler();
 800f9c2:	f7f1 fa05 	bl	8000dd0 <Error_Handler>
    }
    uint32_t offset = 0;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	61fb      	str	r3, [r7, #28]

    offset += snprintf(to_send + offset, sizeof(to_send) - offset,
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	4a71      	ldr	r2, [pc, #452]	@ (800fb94 <sd_card_update+0x210>)
 800f9ce:	eb03 0c02 	add.w	ip, r3, r2
 800f9d2:	69fb      	ldr	r3, [r7, #28]
 800f9d4:	f5c3 7e00 	rsb	lr, r3, #512	@ 0x200
        "Power: %d V\n"
        "Time: %04d-%02d-%02d %02d:%02d:%02d\n"
        "GNSS: Lat=%f, Lon=%f\n"
        "Temp:",
        data->power_level,
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	edd3 7a00 	vldr	s15, [r3]
    offset += snprintf(to_send + offset, sizeof(to_send) - offset,
 800f9de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	693a      	ldr	r2, [r7, #16]
 800f9e8:	6892      	ldr	r2, [r2, #8]
 800f9ea:	6939      	ldr	r1, [r7, #16]
 800f9ec:	68c9      	ldr	r1, [r1, #12]
 800f9ee:	6938      	ldr	r0, [r7, #16]
 800f9f0:	6900      	ldr	r0, [r0, #16]
 800f9f2:	693c      	ldr	r4, [r7, #16]
 800f9f4:	6964      	ldr	r4, [r4, #20]
 800f9f6:	693d      	ldr	r5, [r7, #16]
 800f9f8:	69ad      	ldr	r5, [r5, #24]
        data->utc.year, data->utc.month, data->utc.day,
        data->utc.hour, data->utc.minute, data->utc.second,
        data->gnss.latitude, data->gnss.longitude);
 800f9fa:	693e      	ldr	r6, [r7, #16]
 800f9fc:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800fa00:	f206 76a4 	addw	r6, r6, #1956	@ 0x7a4
 800fa04:	edd6 6a00 	vldr	s13, [r6]
    offset += snprintf(to_send + offset, sizeof(to_send) - offset,
 800fa08:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
        data->gnss.latitude, data->gnss.longitude);
 800fa0c:	693e      	ldr	r6, [r7, #16]
 800fa0e:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800fa12:	f506 66f4 	add.w	r6, r6, #1952	@ 0x7a0
 800fa16:	edd6 5a00 	vldr	s11, [r6]
    offset += snprintf(to_send + offset, sizeof(to_send) - offset,
 800fa1a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800fa1e:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 800fa22:	ed8d 6b08 	vstr	d6, [sp, #32]
 800fa26:	9507      	str	r5, [sp, #28]
 800fa28:	9406      	str	r4, [sp, #24]
 800fa2a:	9005      	str	r0, [sp, #20]
 800fa2c:	9104      	str	r1, [sp, #16]
 800fa2e:	9203      	str	r2, [sp, #12]
 800fa30:	9302      	str	r3, [sp, #8]
 800fa32:	ed8d 7b00 	vstr	d7, [sp]
 800fa36:	4a58      	ldr	r2, [pc, #352]	@ (800fb98 <sd_card_update+0x214>)
 800fa38:	4671      	mov	r1, lr
 800fa3a:	4660      	mov	r0, ip
 800fa3c:	f000 fb2a 	bl	8010094 <sniprintf>
 800fa40:	4603      	mov	r3, r0
 800fa42:	461a      	mov	r2, r3
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	4413      	add	r3, r2
 800fa48:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < TEMP_NUMBER_OF_SAMPLES; i++) {
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	61bb      	str	r3, [r7, #24]
 800fa4e:	e019      	b.n	800fa84 <sd_card_update+0x100>
        offset += snprintf(to_send + offset-4, strlen(to_send), " %d", data->temperature[i]);
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	3b04      	subs	r3, #4
 800fa54:	4a4f      	ldr	r2, [pc, #316]	@ (800fb94 <sd_card_update+0x210>)
 800fa56:	189c      	adds	r4, r3, r2
 800fa58:	484e      	ldr	r0, [pc, #312]	@ (800fb94 <sd_card_update+0x210>)
 800fa5a:	f7f0 fc41 	bl	80002e0 <strlen>
 800fa5e:	4601      	mov	r1, r0
 800fa60:	693a      	ldr	r2, [r7, #16]
 800fa62:	69bb      	ldr	r3, [r7, #24]
 800fa64:	330c      	adds	r3, #12
 800fa66:	005b      	lsls	r3, r3, #1
 800fa68:	4413      	add	r3, r2
 800fa6a:	889b      	ldrh	r3, [r3, #4]
 800fa6c:	4a4b      	ldr	r2, [pc, #300]	@ (800fb9c <sd_card_update+0x218>)
 800fa6e:	4620      	mov	r0, r4
 800fa70:	f000 fb10 	bl	8010094 <sniprintf>
 800fa74:	4603      	mov	r3, r0
 800fa76:	461a      	mov	r2, r3
 800fa78:	69fb      	ldr	r3, [r7, #28]
 800fa7a:	4413      	add	r3, r2
 800fa7c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < TEMP_NUMBER_OF_SAMPLES; i++) {
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	3301      	adds	r3, #1
 800fa82:	61bb      	str	r3, [r7, #24]
 800fa84:	69bb      	ldr	r3, [r7, #24]
 800fa86:	2b09      	cmp	r3, #9
 800fa88:	dde2      	ble.n	800fa50 <sd_card_update+0xcc>
    }

    offset += snprintf(to_send + offset-4, strlen(to_send), "\nIMU:");
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	3b04      	subs	r3, #4
 800fa8e:	4a41      	ldr	r2, [pc, #260]	@ (800fb94 <sd_card_update+0x210>)
 800fa90:	189c      	adds	r4, r3, r2
 800fa92:	4840      	ldr	r0, [pc, #256]	@ (800fb94 <sd_card_update+0x210>)
 800fa94:	f7f0 fc24 	bl	80002e0 <strlen>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	4a41      	ldr	r2, [pc, #260]	@ (800fba0 <sd_card_update+0x21c>)
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f000 faf8 	bl	8010094 <sniprintf>
 800faa4:	4603      	mov	r3, r0
 800faa6:	461a      	mov	r2, r3
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	4413      	add	r3, r2
 800faac:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < IMU_NUMBER_OF_SAMPLES; i++) {
 800faae:	2300      	movs	r3, #0
 800fab0:	617b      	str	r3, [r7, #20]
 800fab2:	e018      	b.n	800fae6 <sd_card_update+0x162>
        offset += snprintf(to_send + offset-4, strlen(to_send), " %d", data->imu[i]);
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	3b04      	subs	r3, #4
 800fab8:	4a36      	ldr	r2, [pc, #216]	@ (800fb94 <sd_card_update+0x210>)
 800faba:	189c      	adds	r4, r3, r2
 800fabc:	4835      	ldr	r0, [pc, #212]	@ (800fb94 <sd_card_update+0x210>)
 800fabe:	f7f0 fc0f 	bl	80002e0 <strlen>
 800fac2:	4601      	mov	r1, r0
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	697a      	ldr	r2, [r7, #20]
 800fac8:	3218      	adds	r2, #24
 800faca:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800face:	4a33      	ldr	r2, [pc, #204]	@ (800fb9c <sd_card_update+0x218>)
 800fad0:	4620      	mov	r0, r4
 800fad2:	f000 fadf 	bl	8010094 <sniprintf>
 800fad6:	4603      	mov	r3, r0
 800fad8:	461a      	mov	r2, r3
 800fada:	69fb      	ldr	r3, [r7, #28]
 800fadc:	4413      	add	r3, r2
 800fade:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < IMU_NUMBER_OF_SAMPLES; i++) {
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	3301      	adds	r3, #1
 800fae4:	617b      	str	r3, [r7, #20]
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800faec:	4293      	cmp	r3, r2
 800faee:	dde1      	ble.n	800fab4 <sd_card_update+0x130>
    }

    offset += snprintf(to_send + offset-4, strlen(to_send),
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	3b04      	subs	r3, #4
 800faf4:	4a27      	ldr	r2, [pc, #156]	@ (800fb94 <sd_card_update+0x210>)
 800faf6:	189c      	adds	r4, r3, r2
 800faf8:	4826      	ldr	r0, [pc, #152]	@ (800fb94 <sd_card_update+0x210>)
 800fafa:	f7f0 fbf1 	bl	80002e0 <strlen>
 800fafe:	4601      	mov	r1, r0
        "\nErrors: 0x%04X\nSample #: %u\n------------------\n",
        data->errors, data->sample_number);
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fb06:	f8b3 37a8 	ldrh.w	r3, [r3, #1960]	@ 0x7a8
    offset += snprintf(to_send + offset-4, strlen(to_send),
 800fb0a:	461a      	mov	r2, r3
        data->errors, data->sample_number);
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fb12:	f893 37aa 	ldrb.w	r3, [r3, #1962]	@ 0x7aa
    offset += snprintf(to_send + offset-4, strlen(to_send),
 800fb16:	9300      	str	r3, [sp, #0]
 800fb18:	4613      	mov	r3, r2
 800fb1a:	4a22      	ldr	r2, [pc, #136]	@ (800fba4 <sd_card_update+0x220>)
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	f000 fab9 	bl	8010094 <sniprintf>
 800fb22:	4603      	mov	r3, r0
 800fb24:	461a      	mov	r2, r3
 800fb26:	69fb      	ldr	r3, [r7, #28]
 800fb28:	4413      	add	r3, r2
 800fb2a:	61fb      	str	r3, [r7, #28]


    // Write a string to the file
    HAL_UART_Transmit(DEBUG_UART,to_send,strlen(to_send),-1);
 800fb2c:	4819      	ldr	r0, [pc, #100]	@ (800fb94 <sd_card_update+0x210>)
 800fb2e:	f7f0 fbd7 	bl	80002e0 <strlen>
 800fb32:	4603      	mov	r3, r0
 800fb34:	b29a      	uxth	r2, r3
 800fb36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fb3a:	4916      	ldr	r1, [pc, #88]	@ (800fb94 <sd_card_update+0x210>)
 800fb3c:	481a      	ldr	r0, [pc, #104]	@ (800fba8 <sd_card_update+0x224>)
 800fb3e:	f7fa fa25 	bl	8009f8c <HAL_UART_Transmit>
    res = f_write(&fil, to_send, strlen(to_send), &bw);
 800fb42:	4814      	ldr	r0, [pc, #80]	@ (800fb94 <sd_card_update+0x210>)
 800fb44:	f7f0 fbcc 	bl	80002e0 <strlen>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	4b18      	ldr	r3, [pc, #96]	@ (800fbac <sd_card_update+0x228>)
 800fb4c:	4911      	ldr	r1, [pc, #68]	@ (800fb94 <sd_card_update+0x210>)
 800fb4e:	480f      	ldr	r0, [pc, #60]	@ (800fb8c <sd_card_update+0x208>)
 800fb50:	f7ff f92c 	bl	800edac <f_write>
 800fb54:	4603      	mov	r3, r0
 800fb56:	461a      	mov	r2, r3
 800fb58:	4b0d      	ldr	r3, [pc, #52]	@ (800fb90 <sd_card_update+0x20c>)
 800fb5a:	701a      	strb	r2, [r3, #0]
    if (res != FR_OK || bw < strlen(to_send))
 800fb5c:	4b0c      	ldr	r3, [pc, #48]	@ (800fb90 <sd_card_update+0x20c>)
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d107      	bne.n	800fb74 <sd_card_update+0x1f0>
 800fb64:	480b      	ldr	r0, [pc, #44]	@ (800fb94 <sd_card_update+0x210>)
 800fb66:	f7f0 fbbb 	bl	80002e0 <strlen>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	4b0f      	ldr	r3, [pc, #60]	@ (800fbac <sd_card_update+0x228>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d901      	bls.n	800fb78 <sd_card_update+0x1f4>
    {
        Error_Handler();
 800fb74:	f7f1 f92c 	bl	8000dd0 <Error_Handler>
    }

    // Close the file
    f_close(&fil);
 800fb78:	4804      	ldr	r0, [pc, #16]	@ (800fb8c <sd_card_update+0x208>)
 800fb7a:	f7ff fb0a 	bl	800f192 <f_close>
}
 800fb7e:	bf00      	nop
 800fb80:	3724      	adds	r7, #36	@ 0x24
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb86:	bf00      	nop
 800fb88:	080114b4 	.word	0x080114b4
 800fb8c:	2400356c 	.word	0x2400356c
 800fb90:	2400379c 	.word	0x2400379c
 800fb94:	240037a4 	.word	0x240037a4
 800fb98:	080114c0 	.word	0x080114c0
 800fb9c:	0801150c 	.word	0x0801150c
 800fba0:	08011510 	.word	0x08011510
 800fba4:	08011518 	.word	0x08011518
 800fba8:	24000260 	.word	0x24000260
 800fbac:	240037a0 	.word	0x240037a0

0800fbb0 <temperature_init>:
 */

#include "temperature_behavior.h"

void temperature_init (void)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	af00      	add	r7, sp, #0
	DWT_Init();  // Enable cycle counter for delay
 800fbb4:	f000 f85a 	bl	800fc6c <DWT_Init>
}
 800fbb8:	bf00      	nop
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <temperature_update>:

void temperature_update (void)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
	package_data_t* to_send = write_package_data();
 800fbc2:	f7ff fc41 	bl	800f448 <write_package_data>
 800fbc6:	6078      	str	r0, [r7, #4]

	to_send->temperature[to_send->sample_number++ % TEMP_NUMBER_OF_SAMPLES] = DS18B20_GetTemp();
 800fbc8:	f000 f958 	bl	800fe7c <DS18B20_GetTemp>
 800fbcc:	eef0 7a40 	vmov.f32	s15, s0
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fbd6:	f893 27aa 	ldrb.w	r2, [r3, #1962]	@ 0x7aa
 800fbda:	1c53      	adds	r3, r2, #1
 800fbdc:	b2d9      	uxtb	r1, r3
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fbe4:	f883 17aa 	strb.w	r1, [r3, #1962]	@ 0x7aa
 800fbe8:	4b0c      	ldr	r3, [pc, #48]	@ (800fc1c <temperature_update+0x60>)
 800fbea:	fba3 1302 	umull	r1, r3, r3, r2
 800fbee:	08d9      	lsrs	r1, r3, #3
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	440b      	add	r3, r1
 800fbf6:	005b      	lsls	r3, r3, #1
 800fbf8:	1ad3      	subs	r3, r2, r3
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc00:	ee17 2a90 	vmov	r2, s15
 800fc04:	b291      	uxth	r1, r2
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	330c      	adds	r3, #12
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	4413      	add	r3, r2
 800fc0e:	460a      	mov	r2, r1
 800fc10:	809a      	strh	r2, [r3, #4]
}
 800fc12:	bf00      	nop
 800fc14:	3708      	adds	r7, #8
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	cccccccd 	.word	0xcccccccd

0800fc20 <Delay_us>:
#include "delay.h"

void Delay_us(uint32_t us) {
 800fc20:	b480      	push	{r7}
 800fc22:	b085      	sub	sp, #20
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 800fc28:	4b0d      	ldr	r3, [pc, #52]	@ (800fc60 <Delay_us+0x40>)
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	60fb      	str	r3, [r7, #12]
    us *= (SystemCoreClock / 1000000);
 800fc2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fc64 <Delay_us+0x44>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	4a0d      	ldr	r2, [pc, #52]	@ (800fc68 <Delay_us+0x48>)
 800fc34:	fba2 2303 	umull	r2, r3, r2, r3
 800fc38:	0c9a      	lsrs	r2, r3, #18
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	fb02 f303 	mul.w	r3, r2, r3
 800fc40:	607b      	str	r3, [r7, #4]
    while ((DWT->CYCCNT - start) < us);
 800fc42:	bf00      	nop
 800fc44:	4b06      	ldr	r3, [pc, #24]	@ (800fc60 <Delay_us+0x40>)
 800fc46:	685a      	ldr	r2, [r3, #4]
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	1ad3      	subs	r3, r2, r3
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d8f8      	bhi.n	800fc44 <Delay_us+0x24>
}
 800fc52:	bf00      	nop
 800fc54:	bf00      	nop
 800fc56:	3714      	adds	r7, #20
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr
 800fc60:	e0001000 	.word	0xe0001000
 800fc64:	24000000 	.word	0x24000000
 800fc68:	431bde83 	.word	0x431bde83

0800fc6c <DWT_Init>:

void DWT_Init(void) {
 800fc6c:	b480      	push	{r7}
 800fc6e:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800fc70:	4b08      	ldr	r3, [pc, #32]	@ (800fc94 <DWT_Init+0x28>)
 800fc72:	68db      	ldr	r3, [r3, #12]
 800fc74:	4a07      	ldr	r2, [pc, #28]	@ (800fc94 <DWT_Init+0x28>)
 800fc76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fc7a:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800fc7c:	4b06      	ldr	r3, [pc, #24]	@ (800fc98 <DWT_Init+0x2c>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a05      	ldr	r2, [pc, #20]	@ (800fc98 <DWT_Init+0x2c>)
 800fc82:	f043 0301 	orr.w	r3, r3, #1
 800fc86:	6013      	str	r3, [r2, #0]
}
 800fc88:	bf00      	nop
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr
 800fc92:	bf00      	nop
 800fc94:	e000edf0 	.word	0xe000edf0
 800fc98:	e0001000 	.word	0xe0001000

0800fc9c <DS18B20_Pin_Output>:
#include "delay.h"  // Custom microsecond delay using DWT or TIM

#define DS18B20_PORT GPIOC
#define DS18B20_PIN GPIO_PIN_0

void DS18B20_Pin_Output(void) {
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b086      	sub	sp, #24
 800fca0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fca2:	1d3b      	adds	r3, r7, #4
 800fca4:	2200      	movs	r2, #0
 800fca6:	601a      	str	r2, [r3, #0]
 800fca8:	605a      	str	r2, [r3, #4]
 800fcaa:	609a      	str	r2, [r3, #8]
 800fcac:	60da      	str	r2, [r3, #12]
 800fcae:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DS18B20_PIN;
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800fcb4:	2311      	movs	r3, #17
 800fcb6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 800fcc0:	1d3b      	adds	r3, r7, #4
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	4803      	ldr	r0, [pc, #12]	@ (800fcd4 <DS18B20_Pin_Output+0x38>)
 800fcc6:	f7f3 fd59 	bl	800377c <HAL_GPIO_Init>
}
 800fcca:	bf00      	nop
 800fccc:	3718      	adds	r7, #24
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	58020800 	.word	0x58020800

0800fcd8 <DS18B20_Pin_Input>:

void DS18B20_Pin_Input(void) {
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b086      	sub	sp, #24
 800fcdc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fcde:	1d3b      	adds	r3, r7, #4
 800fce0:	2200      	movs	r2, #0
 800fce2:	601a      	str	r2, [r3, #0]
 800fce4:	605a      	str	r2, [r3, #4]
 800fce6:	609a      	str	r2, [r3, #8]
 800fce8:	60da      	str	r2, [r3, #12]
 800fcea:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DS18B20_PIN;
 800fcec:	2301      	movs	r3, #1
 800fcee:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 800fcf8:	1d3b      	adds	r3, r7, #4
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	4803      	ldr	r0, [pc, #12]	@ (800fd0c <DS18B20_Pin_Input+0x34>)
 800fcfe:	f7f3 fd3d 	bl	800377c <HAL_GPIO_Init>
}
 800fd02:	bf00      	nop
 800fd04:	3718      	adds	r7, #24
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	58020800 	.word	0x58020800

0800fd10 <DS18B20_Reset>:

uint8_t DS18B20_Reset(void) {
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	71fb      	strb	r3, [r7, #7]
    DS18B20_Pin_Output();
 800fd1a:	f7ff ffbf 	bl	800fc9c <DS18B20_Pin_Output>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 800fd1e:	2200      	movs	r2, #0
 800fd20:	2101      	movs	r1, #1
 800fd22:	480f      	ldr	r0, [pc, #60]	@ (800fd60 <DS18B20_Reset+0x50>)
 800fd24:	f7f3 fef2 	bl	8003b0c <HAL_GPIO_WritePin>
    Delay_us(480);
 800fd28:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800fd2c:	f7ff ff78 	bl	800fc20 <Delay_us>
    DS18B20_Pin_Input();
 800fd30:	f7ff ffd2 	bl	800fcd8 <DS18B20_Pin_Input>
    Delay_us(80);
 800fd34:	2050      	movs	r0, #80	@ 0x50
 800fd36:	f7ff ff73 	bl	800fc20 <Delay_us>
    if (!HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)) response = 1;
 800fd3a:	2101      	movs	r1, #1
 800fd3c:	4808      	ldr	r0, [pc, #32]	@ (800fd60 <DS18B20_Reset+0x50>)
 800fd3e:	f7f3 fecd 	bl	8003adc <HAL_GPIO_ReadPin>
 800fd42:	4603      	mov	r3, r0
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d101      	bne.n	800fd4c <DS18B20_Reset+0x3c>
 800fd48:	2301      	movs	r3, #1
 800fd4a:	71fb      	strb	r3, [r7, #7]
    Delay_us(400);
 800fd4c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800fd50:	f7ff ff66 	bl	800fc20 <Delay_us>
    return response;
 800fd54:	79fb      	ldrb	r3, [r7, #7]
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3708      	adds	r7, #8
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	58020800 	.word	0x58020800

0800fd64 <DS18B20_WriteBit>:

void DS18B20_WriteBit(uint8_t bit) {
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	71fb      	strb	r3, [r7, #7]
    DS18B20_Pin_Output();
 800fd6e:	f7ff ff95 	bl	800fc9c <DS18B20_Pin_Output>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 800fd72:	2200      	movs	r2, #0
 800fd74:	2101      	movs	r1, #1
 800fd76:	480d      	ldr	r0, [pc, #52]	@ (800fdac <DS18B20_WriteBit+0x48>)
 800fd78:	f7f3 fec8 	bl	8003b0c <HAL_GPIO_WritePin>
    Delay_us(bit ? 1 : 60);
 800fd7c:	79fb      	ldrb	r3, [r7, #7]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d001      	beq.n	800fd86 <DS18B20_WriteBit+0x22>
 800fd82:	2301      	movs	r3, #1
 800fd84:	e000      	b.n	800fd88 <DS18B20_WriteBit+0x24>
 800fd86:	233c      	movs	r3, #60	@ 0x3c
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7ff ff49 	bl	800fc20 <Delay_us>
    DS18B20_Pin_Input();
 800fd8e:	f7ff ffa3 	bl	800fcd8 <DS18B20_Pin_Input>
    Delay_us(bit ? 60 : 1);
 800fd92:	79fb      	ldrb	r3, [r7, #7]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d001      	beq.n	800fd9c <DS18B20_WriteBit+0x38>
 800fd98:	233c      	movs	r3, #60	@ 0x3c
 800fd9a:	e000      	b.n	800fd9e <DS18B20_WriteBit+0x3a>
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7ff ff3e 	bl	800fc20 <Delay_us>
}
 800fda4:	bf00      	nop
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	58020800 	.word	0x58020800

0800fdb0 <DS18B20_ReadBit>:

uint8_t DS18B20_ReadBit(void) {
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
    uint8_t bit = 0;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	71fb      	strb	r3, [r7, #7]
    DS18B20_Pin_Output();
 800fdba:	f7ff ff6f 	bl	800fc9c <DS18B20_Pin_Output>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	2101      	movs	r1, #1
 800fdc2:	480c      	ldr	r0, [pc, #48]	@ (800fdf4 <DS18B20_ReadBit+0x44>)
 800fdc4:	f7f3 fea2 	bl	8003b0c <HAL_GPIO_WritePin>
    Delay_us(2);
 800fdc8:	2002      	movs	r0, #2
 800fdca:	f7ff ff29 	bl	800fc20 <Delay_us>
    DS18B20_Pin_Input();
 800fdce:	f7ff ff83 	bl	800fcd8 <DS18B20_Pin_Input>
    Delay_us(10);
 800fdd2:	200a      	movs	r0, #10
 800fdd4:	f7ff ff24 	bl	800fc20 <Delay_us>
    bit = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN);
 800fdd8:	2101      	movs	r1, #1
 800fdda:	4806      	ldr	r0, [pc, #24]	@ (800fdf4 <DS18B20_ReadBit+0x44>)
 800fddc:	f7f3 fe7e 	bl	8003adc <HAL_GPIO_ReadPin>
 800fde0:	4603      	mov	r3, r0
 800fde2:	71fb      	strb	r3, [r7, #7]
    Delay_us(50);
 800fde4:	2032      	movs	r0, #50	@ 0x32
 800fde6:	f7ff ff1b 	bl	800fc20 <Delay_us>
    return bit;
 800fdea:	79fb      	ldrb	r3, [r7, #7]
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	58020800 	.word	0x58020800

0800fdf8 <DS18B20_WriteByte>:

void DS18B20_WriteByte(uint8_t byte) {
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	4603      	mov	r3, r0
 800fe00:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800fe02:	2300      	movs	r3, #0
 800fe04:	60fb      	str	r3, [r7, #12]
 800fe06:	e00f      	b.n	800fe28 <DS18B20_WriteByte+0x30>
        DS18B20_WriteBit(byte & (1 << i));
 800fe08:	2201      	movs	r2, #1
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe10:	b25a      	sxtb	r2, r3
 800fe12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe16:	4013      	ands	r3, r2
 800fe18:	b25b      	sxtb	r3, r3
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7ff ffa1 	bl	800fd64 <DS18B20_WriteBit>
    for (int i = 0; i < 8; i++) {
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	3301      	adds	r3, #1
 800fe26:	60fb      	str	r3, [r7, #12]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2b07      	cmp	r3, #7
 800fe2c:	ddec      	ble.n	800fe08 <DS18B20_WriteByte+0x10>
    }
}
 800fe2e:	bf00      	nop
 800fe30:	bf00      	nop
 800fe32:	3710      	adds	r7, #16
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <DS18B20_ReadByte>:

uint8_t DS18B20_ReadByte(void) {
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
    uint8_t byte = 0;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800fe42:	2300      	movs	r3, #0
 800fe44:	603b      	str	r3, [r7, #0]
 800fe46:	e011      	b.n	800fe6c <DS18B20_ReadByte+0x34>
        if (DS18B20_ReadBit()) byte |= 1 << i;
 800fe48:	f7ff ffb2 	bl	800fdb0 <DS18B20_ReadBit>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d009      	beq.n	800fe66 <DS18B20_ReadByte+0x2e>
 800fe52:	2201      	movs	r2, #1
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	fa02 f303 	lsl.w	r3, r2, r3
 800fe5a:	b25a      	sxtb	r2, r3
 800fe5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe60:	4313      	orrs	r3, r2
 800fe62:	b25b      	sxtb	r3, r3
 800fe64:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	3301      	adds	r3, #1
 800fe6a:	603b      	str	r3, [r7, #0]
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	2b07      	cmp	r3, #7
 800fe70:	ddea      	ble.n	800fe48 <DS18B20_ReadByte+0x10>
    }
    return byte;
 800fe72:	79fb      	ldrb	r3, [r7, #7]
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <DS18B20_GetTemp>:

float DS18B20_GetTemp(void) {
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
    uint8_t temp_lsb, temp_msb;
    int16_t temp_raw;

    DS18B20_Reset();
 800fe82:	f7ff ff45 	bl	800fd10 <DS18B20_Reset>
    DS18B20_WriteByte(0xCC);  // Skip ROM
 800fe86:	20cc      	movs	r0, #204	@ 0xcc
 800fe88:	f7ff ffb6 	bl	800fdf8 <DS18B20_WriteByte>
    DS18B20_WriteByte(0x44);  // Convert T
 800fe8c:	2044      	movs	r0, #68	@ 0x44
 800fe8e:	f7ff ffb3 	bl	800fdf8 <DS18B20_WriteByte>
    HAL_Delay(750);           // Wait conversion
 800fe92:	f240 20ee 	movw	r0, #750	@ 0x2ee
 800fe96:	f7f1 fbd5 	bl	8001644 <HAL_Delay>

    DS18B20_Reset();
 800fe9a:	f7ff ff39 	bl	800fd10 <DS18B20_Reset>
    DS18B20_WriteByte(0xCC);  // Skip ROM
 800fe9e:	20cc      	movs	r0, #204	@ 0xcc
 800fea0:	f7ff ffaa 	bl	800fdf8 <DS18B20_WriteByte>
    DS18B20_WriteByte(0xBE);  // Read Scratchpad
 800fea4:	20be      	movs	r0, #190	@ 0xbe
 800fea6:	f7ff ffa7 	bl	800fdf8 <DS18B20_WriteByte>

    temp_lsb = DS18B20_ReadByte();
 800feaa:	f7ff ffc5 	bl	800fe38 <DS18B20_ReadByte>
 800feae:	4603      	mov	r3, r0
 800feb0:	71fb      	strb	r3, [r7, #7]
    temp_msb = DS18B20_ReadByte();
 800feb2:	f7ff ffc1 	bl	800fe38 <DS18B20_ReadByte>
 800feb6:	4603      	mov	r3, r0
 800feb8:	71bb      	strb	r3, [r7, #6]

    temp_raw = (temp_msb << 8) | temp_lsb;
 800feba:	79bb      	ldrb	r3, [r7, #6]
 800febc:	b21b      	sxth	r3, r3
 800febe:	021b      	lsls	r3, r3, #8
 800fec0:	b21a      	sxth	r2, r3
 800fec2:	79fb      	ldrb	r3, [r7, #7]
 800fec4:	b21b      	sxth	r3, r3
 800fec6:	4313      	orrs	r3, r2
 800fec8:	80bb      	strh	r3, [r7, #4]
    return (float)temp_raw / 16.0;
 800feca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fece:	ee07 3a90 	vmov	s15, r3
 800fed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fed6:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800feda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800fede:	eef0 7a66 	vmov.f32	s15, s13
}
 800fee2:	eeb0 0a67 	vmov.f32	s0, s15
 800fee6:	3708      	adds	r7, #8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <std>:
 800feec:	2300      	movs	r3, #0
 800feee:	b510      	push	{r4, lr}
 800fef0:	4604      	mov	r4, r0
 800fef2:	e9c0 3300 	strd	r3, r3, [r0]
 800fef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fefa:	6083      	str	r3, [r0, #8]
 800fefc:	8181      	strh	r1, [r0, #12]
 800fefe:	6643      	str	r3, [r0, #100]	@ 0x64
 800ff00:	81c2      	strh	r2, [r0, #14]
 800ff02:	6183      	str	r3, [r0, #24]
 800ff04:	4619      	mov	r1, r3
 800ff06:	2208      	movs	r2, #8
 800ff08:	305c      	adds	r0, #92	@ 0x5c
 800ff0a:	f000 f95e 	bl	80101ca <memset>
 800ff0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ff44 <std+0x58>)
 800ff10:	6263      	str	r3, [r4, #36]	@ 0x24
 800ff12:	4b0d      	ldr	r3, [pc, #52]	@ (800ff48 <std+0x5c>)
 800ff14:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ff16:	4b0d      	ldr	r3, [pc, #52]	@ (800ff4c <std+0x60>)
 800ff18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ff1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ff50 <std+0x64>)
 800ff1c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ff1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ff54 <std+0x68>)
 800ff20:	6224      	str	r4, [r4, #32]
 800ff22:	429c      	cmp	r4, r3
 800ff24:	d006      	beq.n	800ff34 <std+0x48>
 800ff26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ff2a:	4294      	cmp	r4, r2
 800ff2c:	d002      	beq.n	800ff34 <std+0x48>
 800ff2e:	33d0      	adds	r3, #208	@ 0xd0
 800ff30:	429c      	cmp	r4, r3
 800ff32:	d105      	bne.n	800ff40 <std+0x54>
 800ff34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ff38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff3c:	f000 b9be 	b.w	80102bc <__retarget_lock_init_recursive>
 800ff40:	bd10      	pop	{r4, pc}
 800ff42:	bf00      	nop
 800ff44:	08010145 	.word	0x08010145
 800ff48:	08010167 	.word	0x08010167
 800ff4c:	0801019f 	.word	0x0801019f
 800ff50:	080101c3 	.word	0x080101c3
 800ff54:	240039a4 	.word	0x240039a4

0800ff58 <stdio_exit_handler>:
 800ff58:	4a02      	ldr	r2, [pc, #8]	@ (800ff64 <stdio_exit_handler+0xc>)
 800ff5a:	4903      	ldr	r1, [pc, #12]	@ (800ff68 <stdio_exit_handler+0x10>)
 800ff5c:	4803      	ldr	r0, [pc, #12]	@ (800ff6c <stdio_exit_handler+0x14>)
 800ff5e:	f000 b87b 	b.w	8010058 <_fwalk_sglue>
 800ff62:	bf00      	nop
 800ff64:	24000010 	.word	0x24000010
 800ff68:	08010e09 	.word	0x08010e09
 800ff6c:	24000020 	.word	0x24000020

0800ff70 <cleanup_stdio>:
 800ff70:	6841      	ldr	r1, [r0, #4]
 800ff72:	4b0c      	ldr	r3, [pc, #48]	@ (800ffa4 <cleanup_stdio+0x34>)
 800ff74:	4299      	cmp	r1, r3
 800ff76:	b510      	push	{r4, lr}
 800ff78:	4604      	mov	r4, r0
 800ff7a:	d001      	beq.n	800ff80 <cleanup_stdio+0x10>
 800ff7c:	f000 ff44 	bl	8010e08 <_fflush_r>
 800ff80:	68a1      	ldr	r1, [r4, #8]
 800ff82:	4b09      	ldr	r3, [pc, #36]	@ (800ffa8 <cleanup_stdio+0x38>)
 800ff84:	4299      	cmp	r1, r3
 800ff86:	d002      	beq.n	800ff8e <cleanup_stdio+0x1e>
 800ff88:	4620      	mov	r0, r4
 800ff8a:	f000 ff3d 	bl	8010e08 <_fflush_r>
 800ff8e:	68e1      	ldr	r1, [r4, #12]
 800ff90:	4b06      	ldr	r3, [pc, #24]	@ (800ffac <cleanup_stdio+0x3c>)
 800ff92:	4299      	cmp	r1, r3
 800ff94:	d004      	beq.n	800ffa0 <cleanup_stdio+0x30>
 800ff96:	4620      	mov	r0, r4
 800ff98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff9c:	f000 bf34 	b.w	8010e08 <_fflush_r>
 800ffa0:	bd10      	pop	{r4, pc}
 800ffa2:	bf00      	nop
 800ffa4:	240039a4 	.word	0x240039a4
 800ffa8:	24003a0c 	.word	0x24003a0c
 800ffac:	24003a74 	.word	0x24003a74

0800ffb0 <global_stdio_init.part.0>:
 800ffb0:	b510      	push	{r4, lr}
 800ffb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ffe0 <global_stdio_init.part.0+0x30>)
 800ffb4:	4c0b      	ldr	r4, [pc, #44]	@ (800ffe4 <global_stdio_init.part.0+0x34>)
 800ffb6:	4a0c      	ldr	r2, [pc, #48]	@ (800ffe8 <global_stdio_init.part.0+0x38>)
 800ffb8:	601a      	str	r2, [r3, #0]
 800ffba:	4620      	mov	r0, r4
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	2104      	movs	r1, #4
 800ffc0:	f7ff ff94 	bl	800feec <std>
 800ffc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ffc8:	2201      	movs	r2, #1
 800ffca:	2109      	movs	r1, #9
 800ffcc:	f7ff ff8e 	bl	800feec <std>
 800ffd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ffd4:	2202      	movs	r2, #2
 800ffd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffda:	2112      	movs	r1, #18
 800ffdc:	f7ff bf86 	b.w	800feec <std>
 800ffe0:	24003adc 	.word	0x24003adc
 800ffe4:	240039a4 	.word	0x240039a4
 800ffe8:	0800ff59 	.word	0x0800ff59

0800ffec <__sfp_lock_acquire>:
 800ffec:	4801      	ldr	r0, [pc, #4]	@ (800fff4 <__sfp_lock_acquire+0x8>)
 800ffee:	f000 b966 	b.w	80102be <__retarget_lock_acquire_recursive>
 800fff2:	bf00      	nop
 800fff4:	24003ae5 	.word	0x24003ae5

0800fff8 <__sfp_lock_release>:
 800fff8:	4801      	ldr	r0, [pc, #4]	@ (8010000 <__sfp_lock_release+0x8>)
 800fffa:	f000 b961 	b.w	80102c0 <__retarget_lock_release_recursive>
 800fffe:	bf00      	nop
 8010000:	24003ae5 	.word	0x24003ae5

08010004 <__sinit>:
 8010004:	b510      	push	{r4, lr}
 8010006:	4604      	mov	r4, r0
 8010008:	f7ff fff0 	bl	800ffec <__sfp_lock_acquire>
 801000c:	6a23      	ldr	r3, [r4, #32]
 801000e:	b11b      	cbz	r3, 8010018 <__sinit+0x14>
 8010010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010014:	f7ff bff0 	b.w	800fff8 <__sfp_lock_release>
 8010018:	4b04      	ldr	r3, [pc, #16]	@ (801002c <__sinit+0x28>)
 801001a:	6223      	str	r3, [r4, #32]
 801001c:	4b04      	ldr	r3, [pc, #16]	@ (8010030 <__sinit+0x2c>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d1f5      	bne.n	8010010 <__sinit+0xc>
 8010024:	f7ff ffc4 	bl	800ffb0 <global_stdio_init.part.0>
 8010028:	e7f2      	b.n	8010010 <__sinit+0xc>
 801002a:	bf00      	nop
 801002c:	0800ff71 	.word	0x0800ff71
 8010030:	24003adc 	.word	0x24003adc

08010034 <fiprintf>:
 8010034:	b40e      	push	{r1, r2, r3}
 8010036:	b503      	push	{r0, r1, lr}
 8010038:	4601      	mov	r1, r0
 801003a:	ab03      	add	r3, sp, #12
 801003c:	4805      	ldr	r0, [pc, #20]	@ (8010054 <fiprintf+0x20>)
 801003e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010042:	6800      	ldr	r0, [r0, #0]
 8010044:	9301      	str	r3, [sp, #4]
 8010046:	f000 fbb7 	bl	80107b8 <_vfiprintf_r>
 801004a:	b002      	add	sp, #8
 801004c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010050:	b003      	add	sp, #12
 8010052:	4770      	bx	lr
 8010054:	2400001c 	.word	0x2400001c

08010058 <_fwalk_sglue>:
 8010058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801005c:	4607      	mov	r7, r0
 801005e:	4688      	mov	r8, r1
 8010060:	4614      	mov	r4, r2
 8010062:	2600      	movs	r6, #0
 8010064:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010068:	f1b9 0901 	subs.w	r9, r9, #1
 801006c:	d505      	bpl.n	801007a <_fwalk_sglue+0x22>
 801006e:	6824      	ldr	r4, [r4, #0]
 8010070:	2c00      	cmp	r4, #0
 8010072:	d1f7      	bne.n	8010064 <_fwalk_sglue+0xc>
 8010074:	4630      	mov	r0, r6
 8010076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801007a:	89ab      	ldrh	r3, [r5, #12]
 801007c:	2b01      	cmp	r3, #1
 801007e:	d907      	bls.n	8010090 <_fwalk_sglue+0x38>
 8010080:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010084:	3301      	adds	r3, #1
 8010086:	d003      	beq.n	8010090 <_fwalk_sglue+0x38>
 8010088:	4629      	mov	r1, r5
 801008a:	4638      	mov	r0, r7
 801008c:	47c0      	blx	r8
 801008e:	4306      	orrs	r6, r0
 8010090:	3568      	adds	r5, #104	@ 0x68
 8010092:	e7e9      	b.n	8010068 <_fwalk_sglue+0x10>

08010094 <sniprintf>:
 8010094:	b40c      	push	{r2, r3}
 8010096:	b530      	push	{r4, r5, lr}
 8010098:	4b18      	ldr	r3, [pc, #96]	@ (80100fc <sniprintf+0x68>)
 801009a:	1e0c      	subs	r4, r1, #0
 801009c:	681d      	ldr	r5, [r3, #0]
 801009e:	b09d      	sub	sp, #116	@ 0x74
 80100a0:	da08      	bge.n	80100b4 <sniprintf+0x20>
 80100a2:	238b      	movs	r3, #139	@ 0x8b
 80100a4:	602b      	str	r3, [r5, #0]
 80100a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80100aa:	b01d      	add	sp, #116	@ 0x74
 80100ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100b0:	b002      	add	sp, #8
 80100b2:	4770      	bx	lr
 80100b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80100b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80100bc:	f04f 0300 	mov.w	r3, #0
 80100c0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80100c2:	bf14      	ite	ne
 80100c4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80100c8:	4623      	moveq	r3, r4
 80100ca:	9304      	str	r3, [sp, #16]
 80100cc:	9307      	str	r3, [sp, #28]
 80100ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80100d2:	9002      	str	r0, [sp, #8]
 80100d4:	9006      	str	r0, [sp, #24]
 80100d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80100da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80100dc:	ab21      	add	r3, sp, #132	@ 0x84
 80100de:	a902      	add	r1, sp, #8
 80100e0:	4628      	mov	r0, r5
 80100e2:	9301      	str	r3, [sp, #4]
 80100e4:	f000 fa42 	bl	801056c <_svfiprintf_r>
 80100e8:	1c43      	adds	r3, r0, #1
 80100ea:	bfbc      	itt	lt
 80100ec:	238b      	movlt	r3, #139	@ 0x8b
 80100ee:	602b      	strlt	r3, [r5, #0]
 80100f0:	2c00      	cmp	r4, #0
 80100f2:	d0da      	beq.n	80100aa <sniprintf+0x16>
 80100f4:	9b02      	ldr	r3, [sp, #8]
 80100f6:	2200      	movs	r2, #0
 80100f8:	701a      	strb	r2, [r3, #0]
 80100fa:	e7d6      	b.n	80100aa <sniprintf+0x16>
 80100fc:	2400001c 	.word	0x2400001c

08010100 <siprintf>:
 8010100:	b40e      	push	{r1, r2, r3}
 8010102:	b510      	push	{r4, lr}
 8010104:	b09d      	sub	sp, #116	@ 0x74
 8010106:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010108:	9002      	str	r0, [sp, #8]
 801010a:	9006      	str	r0, [sp, #24]
 801010c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010110:	480a      	ldr	r0, [pc, #40]	@ (801013c <siprintf+0x3c>)
 8010112:	9107      	str	r1, [sp, #28]
 8010114:	9104      	str	r1, [sp, #16]
 8010116:	490a      	ldr	r1, [pc, #40]	@ (8010140 <siprintf+0x40>)
 8010118:	f853 2b04 	ldr.w	r2, [r3], #4
 801011c:	9105      	str	r1, [sp, #20]
 801011e:	2400      	movs	r4, #0
 8010120:	a902      	add	r1, sp, #8
 8010122:	6800      	ldr	r0, [r0, #0]
 8010124:	9301      	str	r3, [sp, #4]
 8010126:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010128:	f000 fa20 	bl	801056c <_svfiprintf_r>
 801012c:	9b02      	ldr	r3, [sp, #8]
 801012e:	701c      	strb	r4, [r3, #0]
 8010130:	b01d      	add	sp, #116	@ 0x74
 8010132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010136:	b003      	add	sp, #12
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	2400001c 	.word	0x2400001c
 8010140:	ffff0208 	.word	0xffff0208

08010144 <__sread>:
 8010144:	b510      	push	{r4, lr}
 8010146:	460c      	mov	r4, r1
 8010148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801014c:	f000 f868 	bl	8010220 <_read_r>
 8010150:	2800      	cmp	r0, #0
 8010152:	bfab      	itete	ge
 8010154:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010156:	89a3      	ldrhlt	r3, [r4, #12]
 8010158:	181b      	addge	r3, r3, r0
 801015a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801015e:	bfac      	ite	ge
 8010160:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010162:	81a3      	strhlt	r3, [r4, #12]
 8010164:	bd10      	pop	{r4, pc}

08010166 <__swrite>:
 8010166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801016a:	461f      	mov	r7, r3
 801016c:	898b      	ldrh	r3, [r1, #12]
 801016e:	05db      	lsls	r3, r3, #23
 8010170:	4605      	mov	r5, r0
 8010172:	460c      	mov	r4, r1
 8010174:	4616      	mov	r6, r2
 8010176:	d505      	bpl.n	8010184 <__swrite+0x1e>
 8010178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801017c:	2302      	movs	r3, #2
 801017e:	2200      	movs	r2, #0
 8010180:	f000 f83c 	bl	80101fc <_lseek_r>
 8010184:	89a3      	ldrh	r3, [r4, #12]
 8010186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801018a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801018e:	81a3      	strh	r3, [r4, #12]
 8010190:	4632      	mov	r2, r6
 8010192:	463b      	mov	r3, r7
 8010194:	4628      	mov	r0, r5
 8010196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801019a:	f000 b853 	b.w	8010244 <_write_r>

0801019e <__sseek>:
 801019e:	b510      	push	{r4, lr}
 80101a0:	460c      	mov	r4, r1
 80101a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101a6:	f000 f829 	bl	80101fc <_lseek_r>
 80101aa:	1c43      	adds	r3, r0, #1
 80101ac:	89a3      	ldrh	r3, [r4, #12]
 80101ae:	bf15      	itete	ne
 80101b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80101b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80101b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80101ba:	81a3      	strheq	r3, [r4, #12]
 80101bc:	bf18      	it	ne
 80101be:	81a3      	strhne	r3, [r4, #12]
 80101c0:	bd10      	pop	{r4, pc}

080101c2 <__sclose>:
 80101c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101c6:	f000 b809 	b.w	80101dc <_close_r>

080101ca <memset>:
 80101ca:	4402      	add	r2, r0
 80101cc:	4603      	mov	r3, r0
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d100      	bne.n	80101d4 <memset+0xa>
 80101d2:	4770      	bx	lr
 80101d4:	f803 1b01 	strb.w	r1, [r3], #1
 80101d8:	e7f9      	b.n	80101ce <memset+0x4>
	...

080101dc <_close_r>:
 80101dc:	b538      	push	{r3, r4, r5, lr}
 80101de:	4d06      	ldr	r5, [pc, #24]	@ (80101f8 <_close_r+0x1c>)
 80101e0:	2300      	movs	r3, #0
 80101e2:	4604      	mov	r4, r0
 80101e4:	4608      	mov	r0, r1
 80101e6:	602b      	str	r3, [r5, #0]
 80101e8:	f7f0 ff8b 	bl	8001102 <_close>
 80101ec:	1c43      	adds	r3, r0, #1
 80101ee:	d102      	bne.n	80101f6 <_close_r+0x1a>
 80101f0:	682b      	ldr	r3, [r5, #0]
 80101f2:	b103      	cbz	r3, 80101f6 <_close_r+0x1a>
 80101f4:	6023      	str	r3, [r4, #0]
 80101f6:	bd38      	pop	{r3, r4, r5, pc}
 80101f8:	24003ae0 	.word	0x24003ae0

080101fc <_lseek_r>:
 80101fc:	b538      	push	{r3, r4, r5, lr}
 80101fe:	4d07      	ldr	r5, [pc, #28]	@ (801021c <_lseek_r+0x20>)
 8010200:	4604      	mov	r4, r0
 8010202:	4608      	mov	r0, r1
 8010204:	4611      	mov	r1, r2
 8010206:	2200      	movs	r2, #0
 8010208:	602a      	str	r2, [r5, #0]
 801020a:	461a      	mov	r2, r3
 801020c:	f7f0 ffa0 	bl	8001150 <_lseek>
 8010210:	1c43      	adds	r3, r0, #1
 8010212:	d102      	bne.n	801021a <_lseek_r+0x1e>
 8010214:	682b      	ldr	r3, [r5, #0]
 8010216:	b103      	cbz	r3, 801021a <_lseek_r+0x1e>
 8010218:	6023      	str	r3, [r4, #0]
 801021a:	bd38      	pop	{r3, r4, r5, pc}
 801021c:	24003ae0 	.word	0x24003ae0

08010220 <_read_r>:
 8010220:	b538      	push	{r3, r4, r5, lr}
 8010222:	4d07      	ldr	r5, [pc, #28]	@ (8010240 <_read_r+0x20>)
 8010224:	4604      	mov	r4, r0
 8010226:	4608      	mov	r0, r1
 8010228:	4611      	mov	r1, r2
 801022a:	2200      	movs	r2, #0
 801022c:	602a      	str	r2, [r5, #0]
 801022e:	461a      	mov	r2, r3
 8010230:	f7f0 ff2e 	bl	8001090 <_read>
 8010234:	1c43      	adds	r3, r0, #1
 8010236:	d102      	bne.n	801023e <_read_r+0x1e>
 8010238:	682b      	ldr	r3, [r5, #0]
 801023a:	b103      	cbz	r3, 801023e <_read_r+0x1e>
 801023c:	6023      	str	r3, [r4, #0]
 801023e:	bd38      	pop	{r3, r4, r5, pc}
 8010240:	24003ae0 	.word	0x24003ae0

08010244 <_write_r>:
 8010244:	b538      	push	{r3, r4, r5, lr}
 8010246:	4d07      	ldr	r5, [pc, #28]	@ (8010264 <_write_r+0x20>)
 8010248:	4604      	mov	r4, r0
 801024a:	4608      	mov	r0, r1
 801024c:	4611      	mov	r1, r2
 801024e:	2200      	movs	r2, #0
 8010250:	602a      	str	r2, [r5, #0]
 8010252:	461a      	mov	r2, r3
 8010254:	f7f0 ff39 	bl	80010ca <_write>
 8010258:	1c43      	adds	r3, r0, #1
 801025a:	d102      	bne.n	8010262 <_write_r+0x1e>
 801025c:	682b      	ldr	r3, [r5, #0]
 801025e:	b103      	cbz	r3, 8010262 <_write_r+0x1e>
 8010260:	6023      	str	r3, [r4, #0]
 8010262:	bd38      	pop	{r3, r4, r5, pc}
 8010264:	24003ae0 	.word	0x24003ae0

08010268 <__errno>:
 8010268:	4b01      	ldr	r3, [pc, #4]	@ (8010270 <__errno+0x8>)
 801026a:	6818      	ldr	r0, [r3, #0]
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop
 8010270:	2400001c 	.word	0x2400001c

08010274 <__libc_init_array>:
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	4d0d      	ldr	r5, [pc, #52]	@ (80102ac <__libc_init_array+0x38>)
 8010278:	4c0d      	ldr	r4, [pc, #52]	@ (80102b0 <__libc_init_array+0x3c>)
 801027a:	1b64      	subs	r4, r4, r5
 801027c:	10a4      	asrs	r4, r4, #2
 801027e:	2600      	movs	r6, #0
 8010280:	42a6      	cmp	r6, r4
 8010282:	d109      	bne.n	8010298 <__libc_init_array+0x24>
 8010284:	4d0b      	ldr	r5, [pc, #44]	@ (80102b4 <__libc_init_array+0x40>)
 8010286:	4c0c      	ldr	r4, [pc, #48]	@ (80102b8 <__libc_init_array+0x44>)
 8010288:	f000 ff6c 	bl	8011164 <_init>
 801028c:	1b64      	subs	r4, r4, r5
 801028e:	10a4      	asrs	r4, r4, #2
 8010290:	2600      	movs	r6, #0
 8010292:	42a6      	cmp	r6, r4
 8010294:	d105      	bne.n	80102a2 <__libc_init_array+0x2e>
 8010296:	bd70      	pop	{r4, r5, r6, pc}
 8010298:	f855 3b04 	ldr.w	r3, [r5], #4
 801029c:	4798      	blx	r3
 801029e:	3601      	adds	r6, #1
 80102a0:	e7ee      	b.n	8010280 <__libc_init_array+0xc>
 80102a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80102a6:	4798      	blx	r3
 80102a8:	3601      	adds	r6, #1
 80102aa:	e7f2      	b.n	8010292 <__libc_init_array+0x1e>
 80102ac:	08011654 	.word	0x08011654
 80102b0:	08011654 	.word	0x08011654
 80102b4:	08011654 	.word	0x08011654
 80102b8:	08011658 	.word	0x08011658

080102bc <__retarget_lock_init_recursive>:
 80102bc:	4770      	bx	lr

080102be <__retarget_lock_acquire_recursive>:
 80102be:	4770      	bx	lr

080102c0 <__retarget_lock_release_recursive>:
 80102c0:	4770      	bx	lr
	...

080102c4 <_free_r>:
 80102c4:	b538      	push	{r3, r4, r5, lr}
 80102c6:	4605      	mov	r5, r0
 80102c8:	2900      	cmp	r1, #0
 80102ca:	d041      	beq.n	8010350 <_free_r+0x8c>
 80102cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102d0:	1f0c      	subs	r4, r1, #4
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	bfb8      	it	lt
 80102d6:	18e4      	addlt	r4, r4, r3
 80102d8:	f000 f8e0 	bl	801049c <__malloc_lock>
 80102dc:	4a1d      	ldr	r2, [pc, #116]	@ (8010354 <_free_r+0x90>)
 80102de:	6813      	ldr	r3, [r2, #0]
 80102e0:	b933      	cbnz	r3, 80102f0 <_free_r+0x2c>
 80102e2:	6063      	str	r3, [r4, #4]
 80102e4:	6014      	str	r4, [r2, #0]
 80102e6:	4628      	mov	r0, r5
 80102e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102ec:	f000 b8dc 	b.w	80104a8 <__malloc_unlock>
 80102f0:	42a3      	cmp	r3, r4
 80102f2:	d908      	bls.n	8010306 <_free_r+0x42>
 80102f4:	6820      	ldr	r0, [r4, #0]
 80102f6:	1821      	adds	r1, r4, r0
 80102f8:	428b      	cmp	r3, r1
 80102fa:	bf01      	itttt	eq
 80102fc:	6819      	ldreq	r1, [r3, #0]
 80102fe:	685b      	ldreq	r3, [r3, #4]
 8010300:	1809      	addeq	r1, r1, r0
 8010302:	6021      	streq	r1, [r4, #0]
 8010304:	e7ed      	b.n	80102e2 <_free_r+0x1e>
 8010306:	461a      	mov	r2, r3
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	b10b      	cbz	r3, 8010310 <_free_r+0x4c>
 801030c:	42a3      	cmp	r3, r4
 801030e:	d9fa      	bls.n	8010306 <_free_r+0x42>
 8010310:	6811      	ldr	r1, [r2, #0]
 8010312:	1850      	adds	r0, r2, r1
 8010314:	42a0      	cmp	r0, r4
 8010316:	d10b      	bne.n	8010330 <_free_r+0x6c>
 8010318:	6820      	ldr	r0, [r4, #0]
 801031a:	4401      	add	r1, r0
 801031c:	1850      	adds	r0, r2, r1
 801031e:	4283      	cmp	r3, r0
 8010320:	6011      	str	r1, [r2, #0]
 8010322:	d1e0      	bne.n	80102e6 <_free_r+0x22>
 8010324:	6818      	ldr	r0, [r3, #0]
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	6053      	str	r3, [r2, #4]
 801032a:	4408      	add	r0, r1
 801032c:	6010      	str	r0, [r2, #0]
 801032e:	e7da      	b.n	80102e6 <_free_r+0x22>
 8010330:	d902      	bls.n	8010338 <_free_r+0x74>
 8010332:	230c      	movs	r3, #12
 8010334:	602b      	str	r3, [r5, #0]
 8010336:	e7d6      	b.n	80102e6 <_free_r+0x22>
 8010338:	6820      	ldr	r0, [r4, #0]
 801033a:	1821      	adds	r1, r4, r0
 801033c:	428b      	cmp	r3, r1
 801033e:	bf04      	itt	eq
 8010340:	6819      	ldreq	r1, [r3, #0]
 8010342:	685b      	ldreq	r3, [r3, #4]
 8010344:	6063      	str	r3, [r4, #4]
 8010346:	bf04      	itt	eq
 8010348:	1809      	addeq	r1, r1, r0
 801034a:	6021      	streq	r1, [r4, #0]
 801034c:	6054      	str	r4, [r2, #4]
 801034e:	e7ca      	b.n	80102e6 <_free_r+0x22>
 8010350:	bd38      	pop	{r3, r4, r5, pc}
 8010352:	bf00      	nop
 8010354:	24003aec 	.word	0x24003aec

08010358 <sbrk_aligned>:
 8010358:	b570      	push	{r4, r5, r6, lr}
 801035a:	4e0f      	ldr	r6, [pc, #60]	@ (8010398 <sbrk_aligned+0x40>)
 801035c:	460c      	mov	r4, r1
 801035e:	6831      	ldr	r1, [r6, #0]
 8010360:	4605      	mov	r5, r0
 8010362:	b911      	cbnz	r1, 801036a <sbrk_aligned+0x12>
 8010364:	f000 fe26 	bl	8010fb4 <_sbrk_r>
 8010368:	6030      	str	r0, [r6, #0]
 801036a:	4621      	mov	r1, r4
 801036c:	4628      	mov	r0, r5
 801036e:	f000 fe21 	bl	8010fb4 <_sbrk_r>
 8010372:	1c43      	adds	r3, r0, #1
 8010374:	d103      	bne.n	801037e <sbrk_aligned+0x26>
 8010376:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801037a:	4620      	mov	r0, r4
 801037c:	bd70      	pop	{r4, r5, r6, pc}
 801037e:	1cc4      	adds	r4, r0, #3
 8010380:	f024 0403 	bic.w	r4, r4, #3
 8010384:	42a0      	cmp	r0, r4
 8010386:	d0f8      	beq.n	801037a <sbrk_aligned+0x22>
 8010388:	1a21      	subs	r1, r4, r0
 801038a:	4628      	mov	r0, r5
 801038c:	f000 fe12 	bl	8010fb4 <_sbrk_r>
 8010390:	3001      	adds	r0, #1
 8010392:	d1f2      	bne.n	801037a <sbrk_aligned+0x22>
 8010394:	e7ef      	b.n	8010376 <sbrk_aligned+0x1e>
 8010396:	bf00      	nop
 8010398:	24003ae8 	.word	0x24003ae8

0801039c <_malloc_r>:
 801039c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103a0:	1ccd      	adds	r5, r1, #3
 80103a2:	f025 0503 	bic.w	r5, r5, #3
 80103a6:	3508      	adds	r5, #8
 80103a8:	2d0c      	cmp	r5, #12
 80103aa:	bf38      	it	cc
 80103ac:	250c      	movcc	r5, #12
 80103ae:	2d00      	cmp	r5, #0
 80103b0:	4606      	mov	r6, r0
 80103b2:	db01      	blt.n	80103b8 <_malloc_r+0x1c>
 80103b4:	42a9      	cmp	r1, r5
 80103b6:	d904      	bls.n	80103c2 <_malloc_r+0x26>
 80103b8:	230c      	movs	r3, #12
 80103ba:	6033      	str	r3, [r6, #0]
 80103bc:	2000      	movs	r0, #0
 80103be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010498 <_malloc_r+0xfc>
 80103c6:	f000 f869 	bl	801049c <__malloc_lock>
 80103ca:	f8d8 3000 	ldr.w	r3, [r8]
 80103ce:	461c      	mov	r4, r3
 80103d0:	bb44      	cbnz	r4, 8010424 <_malloc_r+0x88>
 80103d2:	4629      	mov	r1, r5
 80103d4:	4630      	mov	r0, r6
 80103d6:	f7ff ffbf 	bl	8010358 <sbrk_aligned>
 80103da:	1c43      	adds	r3, r0, #1
 80103dc:	4604      	mov	r4, r0
 80103de:	d158      	bne.n	8010492 <_malloc_r+0xf6>
 80103e0:	f8d8 4000 	ldr.w	r4, [r8]
 80103e4:	4627      	mov	r7, r4
 80103e6:	2f00      	cmp	r7, #0
 80103e8:	d143      	bne.n	8010472 <_malloc_r+0xd6>
 80103ea:	2c00      	cmp	r4, #0
 80103ec:	d04b      	beq.n	8010486 <_malloc_r+0xea>
 80103ee:	6823      	ldr	r3, [r4, #0]
 80103f0:	4639      	mov	r1, r7
 80103f2:	4630      	mov	r0, r6
 80103f4:	eb04 0903 	add.w	r9, r4, r3
 80103f8:	f000 fddc 	bl	8010fb4 <_sbrk_r>
 80103fc:	4581      	cmp	r9, r0
 80103fe:	d142      	bne.n	8010486 <_malloc_r+0xea>
 8010400:	6821      	ldr	r1, [r4, #0]
 8010402:	1a6d      	subs	r5, r5, r1
 8010404:	4629      	mov	r1, r5
 8010406:	4630      	mov	r0, r6
 8010408:	f7ff ffa6 	bl	8010358 <sbrk_aligned>
 801040c:	3001      	adds	r0, #1
 801040e:	d03a      	beq.n	8010486 <_malloc_r+0xea>
 8010410:	6823      	ldr	r3, [r4, #0]
 8010412:	442b      	add	r3, r5
 8010414:	6023      	str	r3, [r4, #0]
 8010416:	f8d8 3000 	ldr.w	r3, [r8]
 801041a:	685a      	ldr	r2, [r3, #4]
 801041c:	bb62      	cbnz	r2, 8010478 <_malloc_r+0xdc>
 801041e:	f8c8 7000 	str.w	r7, [r8]
 8010422:	e00f      	b.n	8010444 <_malloc_r+0xa8>
 8010424:	6822      	ldr	r2, [r4, #0]
 8010426:	1b52      	subs	r2, r2, r5
 8010428:	d420      	bmi.n	801046c <_malloc_r+0xd0>
 801042a:	2a0b      	cmp	r2, #11
 801042c:	d917      	bls.n	801045e <_malloc_r+0xc2>
 801042e:	1961      	adds	r1, r4, r5
 8010430:	42a3      	cmp	r3, r4
 8010432:	6025      	str	r5, [r4, #0]
 8010434:	bf18      	it	ne
 8010436:	6059      	strne	r1, [r3, #4]
 8010438:	6863      	ldr	r3, [r4, #4]
 801043a:	bf08      	it	eq
 801043c:	f8c8 1000 	streq.w	r1, [r8]
 8010440:	5162      	str	r2, [r4, r5]
 8010442:	604b      	str	r3, [r1, #4]
 8010444:	4630      	mov	r0, r6
 8010446:	f000 f82f 	bl	80104a8 <__malloc_unlock>
 801044a:	f104 000b 	add.w	r0, r4, #11
 801044e:	1d23      	adds	r3, r4, #4
 8010450:	f020 0007 	bic.w	r0, r0, #7
 8010454:	1ac2      	subs	r2, r0, r3
 8010456:	bf1c      	itt	ne
 8010458:	1a1b      	subne	r3, r3, r0
 801045a:	50a3      	strne	r3, [r4, r2]
 801045c:	e7af      	b.n	80103be <_malloc_r+0x22>
 801045e:	6862      	ldr	r2, [r4, #4]
 8010460:	42a3      	cmp	r3, r4
 8010462:	bf0c      	ite	eq
 8010464:	f8c8 2000 	streq.w	r2, [r8]
 8010468:	605a      	strne	r2, [r3, #4]
 801046a:	e7eb      	b.n	8010444 <_malloc_r+0xa8>
 801046c:	4623      	mov	r3, r4
 801046e:	6864      	ldr	r4, [r4, #4]
 8010470:	e7ae      	b.n	80103d0 <_malloc_r+0x34>
 8010472:	463c      	mov	r4, r7
 8010474:	687f      	ldr	r7, [r7, #4]
 8010476:	e7b6      	b.n	80103e6 <_malloc_r+0x4a>
 8010478:	461a      	mov	r2, r3
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	42a3      	cmp	r3, r4
 801047e:	d1fb      	bne.n	8010478 <_malloc_r+0xdc>
 8010480:	2300      	movs	r3, #0
 8010482:	6053      	str	r3, [r2, #4]
 8010484:	e7de      	b.n	8010444 <_malloc_r+0xa8>
 8010486:	230c      	movs	r3, #12
 8010488:	6033      	str	r3, [r6, #0]
 801048a:	4630      	mov	r0, r6
 801048c:	f000 f80c 	bl	80104a8 <__malloc_unlock>
 8010490:	e794      	b.n	80103bc <_malloc_r+0x20>
 8010492:	6005      	str	r5, [r0, #0]
 8010494:	e7d6      	b.n	8010444 <_malloc_r+0xa8>
 8010496:	bf00      	nop
 8010498:	24003aec 	.word	0x24003aec

0801049c <__malloc_lock>:
 801049c:	4801      	ldr	r0, [pc, #4]	@ (80104a4 <__malloc_lock+0x8>)
 801049e:	f7ff bf0e 	b.w	80102be <__retarget_lock_acquire_recursive>
 80104a2:	bf00      	nop
 80104a4:	24003ae4 	.word	0x24003ae4

080104a8 <__malloc_unlock>:
 80104a8:	4801      	ldr	r0, [pc, #4]	@ (80104b0 <__malloc_unlock+0x8>)
 80104aa:	f7ff bf09 	b.w	80102c0 <__retarget_lock_release_recursive>
 80104ae:	bf00      	nop
 80104b0:	24003ae4 	.word	0x24003ae4

080104b4 <__ssputs_r>:
 80104b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104b8:	688e      	ldr	r6, [r1, #8]
 80104ba:	461f      	mov	r7, r3
 80104bc:	42be      	cmp	r6, r7
 80104be:	680b      	ldr	r3, [r1, #0]
 80104c0:	4682      	mov	sl, r0
 80104c2:	460c      	mov	r4, r1
 80104c4:	4690      	mov	r8, r2
 80104c6:	d82d      	bhi.n	8010524 <__ssputs_r+0x70>
 80104c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80104cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80104d0:	d026      	beq.n	8010520 <__ssputs_r+0x6c>
 80104d2:	6965      	ldr	r5, [r4, #20]
 80104d4:	6909      	ldr	r1, [r1, #16]
 80104d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104da:	eba3 0901 	sub.w	r9, r3, r1
 80104de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80104e2:	1c7b      	adds	r3, r7, #1
 80104e4:	444b      	add	r3, r9
 80104e6:	106d      	asrs	r5, r5, #1
 80104e8:	429d      	cmp	r5, r3
 80104ea:	bf38      	it	cc
 80104ec:	461d      	movcc	r5, r3
 80104ee:	0553      	lsls	r3, r2, #21
 80104f0:	d527      	bpl.n	8010542 <__ssputs_r+0x8e>
 80104f2:	4629      	mov	r1, r5
 80104f4:	f7ff ff52 	bl	801039c <_malloc_r>
 80104f8:	4606      	mov	r6, r0
 80104fa:	b360      	cbz	r0, 8010556 <__ssputs_r+0xa2>
 80104fc:	6921      	ldr	r1, [r4, #16]
 80104fe:	464a      	mov	r2, r9
 8010500:	f000 fd68 	bl	8010fd4 <memcpy>
 8010504:	89a3      	ldrh	r3, [r4, #12]
 8010506:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801050a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801050e:	81a3      	strh	r3, [r4, #12]
 8010510:	6126      	str	r6, [r4, #16]
 8010512:	6165      	str	r5, [r4, #20]
 8010514:	444e      	add	r6, r9
 8010516:	eba5 0509 	sub.w	r5, r5, r9
 801051a:	6026      	str	r6, [r4, #0]
 801051c:	60a5      	str	r5, [r4, #8]
 801051e:	463e      	mov	r6, r7
 8010520:	42be      	cmp	r6, r7
 8010522:	d900      	bls.n	8010526 <__ssputs_r+0x72>
 8010524:	463e      	mov	r6, r7
 8010526:	6820      	ldr	r0, [r4, #0]
 8010528:	4632      	mov	r2, r6
 801052a:	4641      	mov	r1, r8
 801052c:	f000 fd28 	bl	8010f80 <memmove>
 8010530:	68a3      	ldr	r3, [r4, #8]
 8010532:	1b9b      	subs	r3, r3, r6
 8010534:	60a3      	str	r3, [r4, #8]
 8010536:	6823      	ldr	r3, [r4, #0]
 8010538:	4433      	add	r3, r6
 801053a:	6023      	str	r3, [r4, #0]
 801053c:	2000      	movs	r0, #0
 801053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010542:	462a      	mov	r2, r5
 8010544:	f000 fd54 	bl	8010ff0 <_realloc_r>
 8010548:	4606      	mov	r6, r0
 801054a:	2800      	cmp	r0, #0
 801054c:	d1e0      	bne.n	8010510 <__ssputs_r+0x5c>
 801054e:	6921      	ldr	r1, [r4, #16]
 8010550:	4650      	mov	r0, sl
 8010552:	f7ff feb7 	bl	80102c4 <_free_r>
 8010556:	230c      	movs	r3, #12
 8010558:	f8ca 3000 	str.w	r3, [sl]
 801055c:	89a3      	ldrh	r3, [r4, #12]
 801055e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010562:	81a3      	strh	r3, [r4, #12]
 8010564:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010568:	e7e9      	b.n	801053e <__ssputs_r+0x8a>
	...

0801056c <_svfiprintf_r>:
 801056c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010570:	4698      	mov	r8, r3
 8010572:	898b      	ldrh	r3, [r1, #12]
 8010574:	061b      	lsls	r3, r3, #24
 8010576:	b09d      	sub	sp, #116	@ 0x74
 8010578:	4607      	mov	r7, r0
 801057a:	460d      	mov	r5, r1
 801057c:	4614      	mov	r4, r2
 801057e:	d510      	bpl.n	80105a2 <_svfiprintf_r+0x36>
 8010580:	690b      	ldr	r3, [r1, #16]
 8010582:	b973      	cbnz	r3, 80105a2 <_svfiprintf_r+0x36>
 8010584:	2140      	movs	r1, #64	@ 0x40
 8010586:	f7ff ff09 	bl	801039c <_malloc_r>
 801058a:	6028      	str	r0, [r5, #0]
 801058c:	6128      	str	r0, [r5, #16]
 801058e:	b930      	cbnz	r0, 801059e <_svfiprintf_r+0x32>
 8010590:	230c      	movs	r3, #12
 8010592:	603b      	str	r3, [r7, #0]
 8010594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010598:	b01d      	add	sp, #116	@ 0x74
 801059a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801059e:	2340      	movs	r3, #64	@ 0x40
 80105a0:	616b      	str	r3, [r5, #20]
 80105a2:	2300      	movs	r3, #0
 80105a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80105a6:	2320      	movs	r3, #32
 80105a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80105ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80105b0:	2330      	movs	r3, #48	@ 0x30
 80105b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010750 <_svfiprintf_r+0x1e4>
 80105b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80105ba:	f04f 0901 	mov.w	r9, #1
 80105be:	4623      	mov	r3, r4
 80105c0:	469a      	mov	sl, r3
 80105c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105c6:	b10a      	cbz	r2, 80105cc <_svfiprintf_r+0x60>
 80105c8:	2a25      	cmp	r2, #37	@ 0x25
 80105ca:	d1f9      	bne.n	80105c0 <_svfiprintf_r+0x54>
 80105cc:	ebba 0b04 	subs.w	fp, sl, r4
 80105d0:	d00b      	beq.n	80105ea <_svfiprintf_r+0x7e>
 80105d2:	465b      	mov	r3, fp
 80105d4:	4622      	mov	r2, r4
 80105d6:	4629      	mov	r1, r5
 80105d8:	4638      	mov	r0, r7
 80105da:	f7ff ff6b 	bl	80104b4 <__ssputs_r>
 80105de:	3001      	adds	r0, #1
 80105e0:	f000 80a7 	beq.w	8010732 <_svfiprintf_r+0x1c6>
 80105e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105e6:	445a      	add	r2, fp
 80105e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80105ea:	f89a 3000 	ldrb.w	r3, [sl]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f000 809f 	beq.w	8010732 <_svfiprintf_r+0x1c6>
 80105f4:	2300      	movs	r3, #0
 80105f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80105fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105fe:	f10a 0a01 	add.w	sl, sl, #1
 8010602:	9304      	str	r3, [sp, #16]
 8010604:	9307      	str	r3, [sp, #28]
 8010606:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801060a:	931a      	str	r3, [sp, #104]	@ 0x68
 801060c:	4654      	mov	r4, sl
 801060e:	2205      	movs	r2, #5
 8010610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010614:	484e      	ldr	r0, [pc, #312]	@ (8010750 <_svfiprintf_r+0x1e4>)
 8010616:	f7ef fe6b 	bl	80002f0 <memchr>
 801061a:	9a04      	ldr	r2, [sp, #16]
 801061c:	b9d8      	cbnz	r0, 8010656 <_svfiprintf_r+0xea>
 801061e:	06d0      	lsls	r0, r2, #27
 8010620:	bf44      	itt	mi
 8010622:	2320      	movmi	r3, #32
 8010624:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010628:	0711      	lsls	r1, r2, #28
 801062a:	bf44      	itt	mi
 801062c:	232b      	movmi	r3, #43	@ 0x2b
 801062e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010632:	f89a 3000 	ldrb.w	r3, [sl]
 8010636:	2b2a      	cmp	r3, #42	@ 0x2a
 8010638:	d015      	beq.n	8010666 <_svfiprintf_r+0xfa>
 801063a:	9a07      	ldr	r2, [sp, #28]
 801063c:	4654      	mov	r4, sl
 801063e:	2000      	movs	r0, #0
 8010640:	f04f 0c0a 	mov.w	ip, #10
 8010644:	4621      	mov	r1, r4
 8010646:	f811 3b01 	ldrb.w	r3, [r1], #1
 801064a:	3b30      	subs	r3, #48	@ 0x30
 801064c:	2b09      	cmp	r3, #9
 801064e:	d94b      	bls.n	80106e8 <_svfiprintf_r+0x17c>
 8010650:	b1b0      	cbz	r0, 8010680 <_svfiprintf_r+0x114>
 8010652:	9207      	str	r2, [sp, #28]
 8010654:	e014      	b.n	8010680 <_svfiprintf_r+0x114>
 8010656:	eba0 0308 	sub.w	r3, r0, r8
 801065a:	fa09 f303 	lsl.w	r3, r9, r3
 801065e:	4313      	orrs	r3, r2
 8010660:	9304      	str	r3, [sp, #16]
 8010662:	46a2      	mov	sl, r4
 8010664:	e7d2      	b.n	801060c <_svfiprintf_r+0xa0>
 8010666:	9b03      	ldr	r3, [sp, #12]
 8010668:	1d19      	adds	r1, r3, #4
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	9103      	str	r1, [sp, #12]
 801066e:	2b00      	cmp	r3, #0
 8010670:	bfbb      	ittet	lt
 8010672:	425b      	neglt	r3, r3
 8010674:	f042 0202 	orrlt.w	r2, r2, #2
 8010678:	9307      	strge	r3, [sp, #28]
 801067a:	9307      	strlt	r3, [sp, #28]
 801067c:	bfb8      	it	lt
 801067e:	9204      	strlt	r2, [sp, #16]
 8010680:	7823      	ldrb	r3, [r4, #0]
 8010682:	2b2e      	cmp	r3, #46	@ 0x2e
 8010684:	d10a      	bne.n	801069c <_svfiprintf_r+0x130>
 8010686:	7863      	ldrb	r3, [r4, #1]
 8010688:	2b2a      	cmp	r3, #42	@ 0x2a
 801068a:	d132      	bne.n	80106f2 <_svfiprintf_r+0x186>
 801068c:	9b03      	ldr	r3, [sp, #12]
 801068e:	1d1a      	adds	r2, r3, #4
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	9203      	str	r2, [sp, #12]
 8010694:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010698:	3402      	adds	r4, #2
 801069a:	9305      	str	r3, [sp, #20]
 801069c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010760 <_svfiprintf_r+0x1f4>
 80106a0:	7821      	ldrb	r1, [r4, #0]
 80106a2:	2203      	movs	r2, #3
 80106a4:	4650      	mov	r0, sl
 80106a6:	f7ef fe23 	bl	80002f0 <memchr>
 80106aa:	b138      	cbz	r0, 80106bc <_svfiprintf_r+0x150>
 80106ac:	9b04      	ldr	r3, [sp, #16]
 80106ae:	eba0 000a 	sub.w	r0, r0, sl
 80106b2:	2240      	movs	r2, #64	@ 0x40
 80106b4:	4082      	lsls	r2, r0
 80106b6:	4313      	orrs	r3, r2
 80106b8:	3401      	adds	r4, #1
 80106ba:	9304      	str	r3, [sp, #16]
 80106bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106c0:	4824      	ldr	r0, [pc, #144]	@ (8010754 <_svfiprintf_r+0x1e8>)
 80106c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80106c6:	2206      	movs	r2, #6
 80106c8:	f7ef fe12 	bl	80002f0 <memchr>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	d036      	beq.n	801073e <_svfiprintf_r+0x1d2>
 80106d0:	4b21      	ldr	r3, [pc, #132]	@ (8010758 <_svfiprintf_r+0x1ec>)
 80106d2:	bb1b      	cbnz	r3, 801071c <_svfiprintf_r+0x1b0>
 80106d4:	9b03      	ldr	r3, [sp, #12]
 80106d6:	3307      	adds	r3, #7
 80106d8:	f023 0307 	bic.w	r3, r3, #7
 80106dc:	3308      	adds	r3, #8
 80106de:	9303      	str	r3, [sp, #12]
 80106e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106e2:	4433      	add	r3, r6
 80106e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80106e6:	e76a      	b.n	80105be <_svfiprintf_r+0x52>
 80106e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80106ec:	460c      	mov	r4, r1
 80106ee:	2001      	movs	r0, #1
 80106f0:	e7a8      	b.n	8010644 <_svfiprintf_r+0xd8>
 80106f2:	2300      	movs	r3, #0
 80106f4:	3401      	adds	r4, #1
 80106f6:	9305      	str	r3, [sp, #20]
 80106f8:	4619      	mov	r1, r3
 80106fa:	f04f 0c0a 	mov.w	ip, #10
 80106fe:	4620      	mov	r0, r4
 8010700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010704:	3a30      	subs	r2, #48	@ 0x30
 8010706:	2a09      	cmp	r2, #9
 8010708:	d903      	bls.n	8010712 <_svfiprintf_r+0x1a6>
 801070a:	2b00      	cmp	r3, #0
 801070c:	d0c6      	beq.n	801069c <_svfiprintf_r+0x130>
 801070e:	9105      	str	r1, [sp, #20]
 8010710:	e7c4      	b.n	801069c <_svfiprintf_r+0x130>
 8010712:	fb0c 2101 	mla	r1, ip, r1, r2
 8010716:	4604      	mov	r4, r0
 8010718:	2301      	movs	r3, #1
 801071a:	e7f0      	b.n	80106fe <_svfiprintf_r+0x192>
 801071c:	ab03      	add	r3, sp, #12
 801071e:	9300      	str	r3, [sp, #0]
 8010720:	462a      	mov	r2, r5
 8010722:	4b0e      	ldr	r3, [pc, #56]	@ (801075c <_svfiprintf_r+0x1f0>)
 8010724:	a904      	add	r1, sp, #16
 8010726:	4638      	mov	r0, r7
 8010728:	f3af 8000 	nop.w
 801072c:	1c42      	adds	r2, r0, #1
 801072e:	4606      	mov	r6, r0
 8010730:	d1d6      	bne.n	80106e0 <_svfiprintf_r+0x174>
 8010732:	89ab      	ldrh	r3, [r5, #12]
 8010734:	065b      	lsls	r3, r3, #25
 8010736:	f53f af2d 	bmi.w	8010594 <_svfiprintf_r+0x28>
 801073a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801073c:	e72c      	b.n	8010598 <_svfiprintf_r+0x2c>
 801073e:	ab03      	add	r3, sp, #12
 8010740:	9300      	str	r3, [sp, #0]
 8010742:	462a      	mov	r2, r5
 8010744:	4b05      	ldr	r3, [pc, #20]	@ (801075c <_svfiprintf_r+0x1f0>)
 8010746:	a904      	add	r1, sp, #16
 8010748:	4638      	mov	r0, r7
 801074a:	f000 f9bb 	bl	8010ac4 <_printf_i>
 801074e:	e7ed      	b.n	801072c <_svfiprintf_r+0x1c0>
 8010750:	08011618 	.word	0x08011618
 8010754:	08011622 	.word	0x08011622
 8010758:	00000000 	.word	0x00000000
 801075c:	080104b5 	.word	0x080104b5
 8010760:	0801161e 	.word	0x0801161e

08010764 <__sfputc_r>:
 8010764:	6893      	ldr	r3, [r2, #8]
 8010766:	3b01      	subs	r3, #1
 8010768:	2b00      	cmp	r3, #0
 801076a:	b410      	push	{r4}
 801076c:	6093      	str	r3, [r2, #8]
 801076e:	da08      	bge.n	8010782 <__sfputc_r+0x1e>
 8010770:	6994      	ldr	r4, [r2, #24]
 8010772:	42a3      	cmp	r3, r4
 8010774:	db01      	blt.n	801077a <__sfputc_r+0x16>
 8010776:	290a      	cmp	r1, #10
 8010778:	d103      	bne.n	8010782 <__sfputc_r+0x1e>
 801077a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801077e:	f000 bb6b 	b.w	8010e58 <__swbuf_r>
 8010782:	6813      	ldr	r3, [r2, #0]
 8010784:	1c58      	adds	r0, r3, #1
 8010786:	6010      	str	r0, [r2, #0]
 8010788:	7019      	strb	r1, [r3, #0]
 801078a:	4608      	mov	r0, r1
 801078c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010790:	4770      	bx	lr

08010792 <__sfputs_r>:
 8010792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010794:	4606      	mov	r6, r0
 8010796:	460f      	mov	r7, r1
 8010798:	4614      	mov	r4, r2
 801079a:	18d5      	adds	r5, r2, r3
 801079c:	42ac      	cmp	r4, r5
 801079e:	d101      	bne.n	80107a4 <__sfputs_r+0x12>
 80107a0:	2000      	movs	r0, #0
 80107a2:	e007      	b.n	80107b4 <__sfputs_r+0x22>
 80107a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107a8:	463a      	mov	r2, r7
 80107aa:	4630      	mov	r0, r6
 80107ac:	f7ff ffda 	bl	8010764 <__sfputc_r>
 80107b0:	1c43      	adds	r3, r0, #1
 80107b2:	d1f3      	bne.n	801079c <__sfputs_r+0xa>
 80107b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107b8 <_vfiprintf_r>:
 80107b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107bc:	460d      	mov	r5, r1
 80107be:	b09d      	sub	sp, #116	@ 0x74
 80107c0:	4614      	mov	r4, r2
 80107c2:	4698      	mov	r8, r3
 80107c4:	4606      	mov	r6, r0
 80107c6:	b118      	cbz	r0, 80107d0 <_vfiprintf_r+0x18>
 80107c8:	6a03      	ldr	r3, [r0, #32]
 80107ca:	b90b      	cbnz	r3, 80107d0 <_vfiprintf_r+0x18>
 80107cc:	f7ff fc1a 	bl	8010004 <__sinit>
 80107d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107d2:	07d9      	lsls	r1, r3, #31
 80107d4:	d405      	bmi.n	80107e2 <_vfiprintf_r+0x2a>
 80107d6:	89ab      	ldrh	r3, [r5, #12]
 80107d8:	059a      	lsls	r2, r3, #22
 80107da:	d402      	bmi.n	80107e2 <_vfiprintf_r+0x2a>
 80107dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107de:	f7ff fd6e 	bl	80102be <__retarget_lock_acquire_recursive>
 80107e2:	89ab      	ldrh	r3, [r5, #12]
 80107e4:	071b      	lsls	r3, r3, #28
 80107e6:	d501      	bpl.n	80107ec <_vfiprintf_r+0x34>
 80107e8:	692b      	ldr	r3, [r5, #16]
 80107ea:	b99b      	cbnz	r3, 8010814 <_vfiprintf_r+0x5c>
 80107ec:	4629      	mov	r1, r5
 80107ee:	4630      	mov	r0, r6
 80107f0:	f000 fb70 	bl	8010ed4 <__swsetup_r>
 80107f4:	b170      	cbz	r0, 8010814 <_vfiprintf_r+0x5c>
 80107f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107f8:	07dc      	lsls	r4, r3, #31
 80107fa:	d504      	bpl.n	8010806 <_vfiprintf_r+0x4e>
 80107fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010800:	b01d      	add	sp, #116	@ 0x74
 8010802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010806:	89ab      	ldrh	r3, [r5, #12]
 8010808:	0598      	lsls	r0, r3, #22
 801080a:	d4f7      	bmi.n	80107fc <_vfiprintf_r+0x44>
 801080c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801080e:	f7ff fd57 	bl	80102c0 <__retarget_lock_release_recursive>
 8010812:	e7f3      	b.n	80107fc <_vfiprintf_r+0x44>
 8010814:	2300      	movs	r3, #0
 8010816:	9309      	str	r3, [sp, #36]	@ 0x24
 8010818:	2320      	movs	r3, #32
 801081a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801081e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010822:	2330      	movs	r3, #48	@ 0x30
 8010824:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80109d4 <_vfiprintf_r+0x21c>
 8010828:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801082c:	f04f 0901 	mov.w	r9, #1
 8010830:	4623      	mov	r3, r4
 8010832:	469a      	mov	sl, r3
 8010834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010838:	b10a      	cbz	r2, 801083e <_vfiprintf_r+0x86>
 801083a:	2a25      	cmp	r2, #37	@ 0x25
 801083c:	d1f9      	bne.n	8010832 <_vfiprintf_r+0x7a>
 801083e:	ebba 0b04 	subs.w	fp, sl, r4
 8010842:	d00b      	beq.n	801085c <_vfiprintf_r+0xa4>
 8010844:	465b      	mov	r3, fp
 8010846:	4622      	mov	r2, r4
 8010848:	4629      	mov	r1, r5
 801084a:	4630      	mov	r0, r6
 801084c:	f7ff ffa1 	bl	8010792 <__sfputs_r>
 8010850:	3001      	adds	r0, #1
 8010852:	f000 80a7 	beq.w	80109a4 <_vfiprintf_r+0x1ec>
 8010856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010858:	445a      	add	r2, fp
 801085a:	9209      	str	r2, [sp, #36]	@ 0x24
 801085c:	f89a 3000 	ldrb.w	r3, [sl]
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 809f 	beq.w	80109a4 <_vfiprintf_r+0x1ec>
 8010866:	2300      	movs	r3, #0
 8010868:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801086c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010870:	f10a 0a01 	add.w	sl, sl, #1
 8010874:	9304      	str	r3, [sp, #16]
 8010876:	9307      	str	r3, [sp, #28]
 8010878:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801087c:	931a      	str	r3, [sp, #104]	@ 0x68
 801087e:	4654      	mov	r4, sl
 8010880:	2205      	movs	r2, #5
 8010882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010886:	4853      	ldr	r0, [pc, #332]	@ (80109d4 <_vfiprintf_r+0x21c>)
 8010888:	f7ef fd32 	bl	80002f0 <memchr>
 801088c:	9a04      	ldr	r2, [sp, #16]
 801088e:	b9d8      	cbnz	r0, 80108c8 <_vfiprintf_r+0x110>
 8010890:	06d1      	lsls	r1, r2, #27
 8010892:	bf44      	itt	mi
 8010894:	2320      	movmi	r3, #32
 8010896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801089a:	0713      	lsls	r3, r2, #28
 801089c:	bf44      	itt	mi
 801089e:	232b      	movmi	r3, #43	@ 0x2b
 80108a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108a4:	f89a 3000 	ldrb.w	r3, [sl]
 80108a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80108aa:	d015      	beq.n	80108d8 <_vfiprintf_r+0x120>
 80108ac:	9a07      	ldr	r2, [sp, #28]
 80108ae:	4654      	mov	r4, sl
 80108b0:	2000      	movs	r0, #0
 80108b2:	f04f 0c0a 	mov.w	ip, #10
 80108b6:	4621      	mov	r1, r4
 80108b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108bc:	3b30      	subs	r3, #48	@ 0x30
 80108be:	2b09      	cmp	r3, #9
 80108c0:	d94b      	bls.n	801095a <_vfiprintf_r+0x1a2>
 80108c2:	b1b0      	cbz	r0, 80108f2 <_vfiprintf_r+0x13a>
 80108c4:	9207      	str	r2, [sp, #28]
 80108c6:	e014      	b.n	80108f2 <_vfiprintf_r+0x13a>
 80108c8:	eba0 0308 	sub.w	r3, r0, r8
 80108cc:	fa09 f303 	lsl.w	r3, r9, r3
 80108d0:	4313      	orrs	r3, r2
 80108d2:	9304      	str	r3, [sp, #16]
 80108d4:	46a2      	mov	sl, r4
 80108d6:	e7d2      	b.n	801087e <_vfiprintf_r+0xc6>
 80108d8:	9b03      	ldr	r3, [sp, #12]
 80108da:	1d19      	adds	r1, r3, #4
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	9103      	str	r1, [sp, #12]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	bfbb      	ittet	lt
 80108e4:	425b      	neglt	r3, r3
 80108e6:	f042 0202 	orrlt.w	r2, r2, #2
 80108ea:	9307      	strge	r3, [sp, #28]
 80108ec:	9307      	strlt	r3, [sp, #28]
 80108ee:	bfb8      	it	lt
 80108f0:	9204      	strlt	r2, [sp, #16]
 80108f2:	7823      	ldrb	r3, [r4, #0]
 80108f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80108f6:	d10a      	bne.n	801090e <_vfiprintf_r+0x156>
 80108f8:	7863      	ldrb	r3, [r4, #1]
 80108fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80108fc:	d132      	bne.n	8010964 <_vfiprintf_r+0x1ac>
 80108fe:	9b03      	ldr	r3, [sp, #12]
 8010900:	1d1a      	adds	r2, r3, #4
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	9203      	str	r2, [sp, #12]
 8010906:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801090a:	3402      	adds	r4, #2
 801090c:	9305      	str	r3, [sp, #20]
 801090e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80109e4 <_vfiprintf_r+0x22c>
 8010912:	7821      	ldrb	r1, [r4, #0]
 8010914:	2203      	movs	r2, #3
 8010916:	4650      	mov	r0, sl
 8010918:	f7ef fcea 	bl	80002f0 <memchr>
 801091c:	b138      	cbz	r0, 801092e <_vfiprintf_r+0x176>
 801091e:	9b04      	ldr	r3, [sp, #16]
 8010920:	eba0 000a 	sub.w	r0, r0, sl
 8010924:	2240      	movs	r2, #64	@ 0x40
 8010926:	4082      	lsls	r2, r0
 8010928:	4313      	orrs	r3, r2
 801092a:	3401      	adds	r4, #1
 801092c:	9304      	str	r3, [sp, #16]
 801092e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010932:	4829      	ldr	r0, [pc, #164]	@ (80109d8 <_vfiprintf_r+0x220>)
 8010934:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010938:	2206      	movs	r2, #6
 801093a:	f7ef fcd9 	bl	80002f0 <memchr>
 801093e:	2800      	cmp	r0, #0
 8010940:	d03f      	beq.n	80109c2 <_vfiprintf_r+0x20a>
 8010942:	4b26      	ldr	r3, [pc, #152]	@ (80109dc <_vfiprintf_r+0x224>)
 8010944:	bb1b      	cbnz	r3, 801098e <_vfiprintf_r+0x1d6>
 8010946:	9b03      	ldr	r3, [sp, #12]
 8010948:	3307      	adds	r3, #7
 801094a:	f023 0307 	bic.w	r3, r3, #7
 801094e:	3308      	adds	r3, #8
 8010950:	9303      	str	r3, [sp, #12]
 8010952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010954:	443b      	add	r3, r7
 8010956:	9309      	str	r3, [sp, #36]	@ 0x24
 8010958:	e76a      	b.n	8010830 <_vfiprintf_r+0x78>
 801095a:	fb0c 3202 	mla	r2, ip, r2, r3
 801095e:	460c      	mov	r4, r1
 8010960:	2001      	movs	r0, #1
 8010962:	e7a8      	b.n	80108b6 <_vfiprintf_r+0xfe>
 8010964:	2300      	movs	r3, #0
 8010966:	3401      	adds	r4, #1
 8010968:	9305      	str	r3, [sp, #20]
 801096a:	4619      	mov	r1, r3
 801096c:	f04f 0c0a 	mov.w	ip, #10
 8010970:	4620      	mov	r0, r4
 8010972:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010976:	3a30      	subs	r2, #48	@ 0x30
 8010978:	2a09      	cmp	r2, #9
 801097a:	d903      	bls.n	8010984 <_vfiprintf_r+0x1cc>
 801097c:	2b00      	cmp	r3, #0
 801097e:	d0c6      	beq.n	801090e <_vfiprintf_r+0x156>
 8010980:	9105      	str	r1, [sp, #20]
 8010982:	e7c4      	b.n	801090e <_vfiprintf_r+0x156>
 8010984:	fb0c 2101 	mla	r1, ip, r1, r2
 8010988:	4604      	mov	r4, r0
 801098a:	2301      	movs	r3, #1
 801098c:	e7f0      	b.n	8010970 <_vfiprintf_r+0x1b8>
 801098e:	ab03      	add	r3, sp, #12
 8010990:	9300      	str	r3, [sp, #0]
 8010992:	462a      	mov	r2, r5
 8010994:	4b12      	ldr	r3, [pc, #72]	@ (80109e0 <_vfiprintf_r+0x228>)
 8010996:	a904      	add	r1, sp, #16
 8010998:	4630      	mov	r0, r6
 801099a:	f3af 8000 	nop.w
 801099e:	4607      	mov	r7, r0
 80109a0:	1c78      	adds	r0, r7, #1
 80109a2:	d1d6      	bne.n	8010952 <_vfiprintf_r+0x19a>
 80109a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109a6:	07d9      	lsls	r1, r3, #31
 80109a8:	d405      	bmi.n	80109b6 <_vfiprintf_r+0x1fe>
 80109aa:	89ab      	ldrh	r3, [r5, #12]
 80109ac:	059a      	lsls	r2, r3, #22
 80109ae:	d402      	bmi.n	80109b6 <_vfiprintf_r+0x1fe>
 80109b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109b2:	f7ff fc85 	bl	80102c0 <__retarget_lock_release_recursive>
 80109b6:	89ab      	ldrh	r3, [r5, #12]
 80109b8:	065b      	lsls	r3, r3, #25
 80109ba:	f53f af1f 	bmi.w	80107fc <_vfiprintf_r+0x44>
 80109be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80109c0:	e71e      	b.n	8010800 <_vfiprintf_r+0x48>
 80109c2:	ab03      	add	r3, sp, #12
 80109c4:	9300      	str	r3, [sp, #0]
 80109c6:	462a      	mov	r2, r5
 80109c8:	4b05      	ldr	r3, [pc, #20]	@ (80109e0 <_vfiprintf_r+0x228>)
 80109ca:	a904      	add	r1, sp, #16
 80109cc:	4630      	mov	r0, r6
 80109ce:	f000 f879 	bl	8010ac4 <_printf_i>
 80109d2:	e7e4      	b.n	801099e <_vfiprintf_r+0x1e6>
 80109d4:	08011618 	.word	0x08011618
 80109d8:	08011622 	.word	0x08011622
 80109dc:	00000000 	.word	0x00000000
 80109e0:	08010793 	.word	0x08010793
 80109e4:	0801161e 	.word	0x0801161e

080109e8 <_printf_common>:
 80109e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109ec:	4616      	mov	r6, r2
 80109ee:	4698      	mov	r8, r3
 80109f0:	688a      	ldr	r2, [r1, #8]
 80109f2:	690b      	ldr	r3, [r1, #16]
 80109f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80109f8:	4293      	cmp	r3, r2
 80109fa:	bfb8      	it	lt
 80109fc:	4613      	movlt	r3, r2
 80109fe:	6033      	str	r3, [r6, #0]
 8010a00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010a04:	4607      	mov	r7, r0
 8010a06:	460c      	mov	r4, r1
 8010a08:	b10a      	cbz	r2, 8010a0e <_printf_common+0x26>
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	6033      	str	r3, [r6, #0]
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	0699      	lsls	r1, r3, #26
 8010a12:	bf42      	ittt	mi
 8010a14:	6833      	ldrmi	r3, [r6, #0]
 8010a16:	3302      	addmi	r3, #2
 8010a18:	6033      	strmi	r3, [r6, #0]
 8010a1a:	6825      	ldr	r5, [r4, #0]
 8010a1c:	f015 0506 	ands.w	r5, r5, #6
 8010a20:	d106      	bne.n	8010a30 <_printf_common+0x48>
 8010a22:	f104 0a19 	add.w	sl, r4, #25
 8010a26:	68e3      	ldr	r3, [r4, #12]
 8010a28:	6832      	ldr	r2, [r6, #0]
 8010a2a:	1a9b      	subs	r3, r3, r2
 8010a2c:	42ab      	cmp	r3, r5
 8010a2e:	dc26      	bgt.n	8010a7e <_printf_common+0x96>
 8010a30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010a34:	6822      	ldr	r2, [r4, #0]
 8010a36:	3b00      	subs	r3, #0
 8010a38:	bf18      	it	ne
 8010a3a:	2301      	movne	r3, #1
 8010a3c:	0692      	lsls	r2, r2, #26
 8010a3e:	d42b      	bmi.n	8010a98 <_printf_common+0xb0>
 8010a40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010a44:	4641      	mov	r1, r8
 8010a46:	4638      	mov	r0, r7
 8010a48:	47c8      	blx	r9
 8010a4a:	3001      	adds	r0, #1
 8010a4c:	d01e      	beq.n	8010a8c <_printf_common+0xa4>
 8010a4e:	6823      	ldr	r3, [r4, #0]
 8010a50:	6922      	ldr	r2, [r4, #16]
 8010a52:	f003 0306 	and.w	r3, r3, #6
 8010a56:	2b04      	cmp	r3, #4
 8010a58:	bf02      	ittt	eq
 8010a5a:	68e5      	ldreq	r5, [r4, #12]
 8010a5c:	6833      	ldreq	r3, [r6, #0]
 8010a5e:	1aed      	subeq	r5, r5, r3
 8010a60:	68a3      	ldr	r3, [r4, #8]
 8010a62:	bf0c      	ite	eq
 8010a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a68:	2500      	movne	r5, #0
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	bfc4      	itt	gt
 8010a6e:	1a9b      	subgt	r3, r3, r2
 8010a70:	18ed      	addgt	r5, r5, r3
 8010a72:	2600      	movs	r6, #0
 8010a74:	341a      	adds	r4, #26
 8010a76:	42b5      	cmp	r5, r6
 8010a78:	d11a      	bne.n	8010ab0 <_printf_common+0xc8>
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	e008      	b.n	8010a90 <_printf_common+0xa8>
 8010a7e:	2301      	movs	r3, #1
 8010a80:	4652      	mov	r2, sl
 8010a82:	4641      	mov	r1, r8
 8010a84:	4638      	mov	r0, r7
 8010a86:	47c8      	blx	r9
 8010a88:	3001      	adds	r0, #1
 8010a8a:	d103      	bne.n	8010a94 <_printf_common+0xac>
 8010a8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a94:	3501      	adds	r5, #1
 8010a96:	e7c6      	b.n	8010a26 <_printf_common+0x3e>
 8010a98:	18e1      	adds	r1, r4, r3
 8010a9a:	1c5a      	adds	r2, r3, #1
 8010a9c:	2030      	movs	r0, #48	@ 0x30
 8010a9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010aa2:	4422      	add	r2, r4
 8010aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010aa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010aac:	3302      	adds	r3, #2
 8010aae:	e7c7      	b.n	8010a40 <_printf_common+0x58>
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	4622      	mov	r2, r4
 8010ab4:	4641      	mov	r1, r8
 8010ab6:	4638      	mov	r0, r7
 8010ab8:	47c8      	blx	r9
 8010aba:	3001      	adds	r0, #1
 8010abc:	d0e6      	beq.n	8010a8c <_printf_common+0xa4>
 8010abe:	3601      	adds	r6, #1
 8010ac0:	e7d9      	b.n	8010a76 <_printf_common+0x8e>
	...

08010ac4 <_printf_i>:
 8010ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ac8:	7e0f      	ldrb	r7, [r1, #24]
 8010aca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010acc:	2f78      	cmp	r7, #120	@ 0x78
 8010ace:	4691      	mov	r9, r2
 8010ad0:	4680      	mov	r8, r0
 8010ad2:	460c      	mov	r4, r1
 8010ad4:	469a      	mov	sl, r3
 8010ad6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010ada:	d807      	bhi.n	8010aec <_printf_i+0x28>
 8010adc:	2f62      	cmp	r7, #98	@ 0x62
 8010ade:	d80a      	bhi.n	8010af6 <_printf_i+0x32>
 8010ae0:	2f00      	cmp	r7, #0
 8010ae2:	f000 80d1 	beq.w	8010c88 <_printf_i+0x1c4>
 8010ae6:	2f58      	cmp	r7, #88	@ 0x58
 8010ae8:	f000 80b8 	beq.w	8010c5c <_printf_i+0x198>
 8010aec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010af0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010af4:	e03a      	b.n	8010b6c <_printf_i+0xa8>
 8010af6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010afa:	2b15      	cmp	r3, #21
 8010afc:	d8f6      	bhi.n	8010aec <_printf_i+0x28>
 8010afe:	a101      	add	r1, pc, #4	@ (adr r1, 8010b04 <_printf_i+0x40>)
 8010b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b04:	08010b5d 	.word	0x08010b5d
 8010b08:	08010b71 	.word	0x08010b71
 8010b0c:	08010aed 	.word	0x08010aed
 8010b10:	08010aed 	.word	0x08010aed
 8010b14:	08010aed 	.word	0x08010aed
 8010b18:	08010aed 	.word	0x08010aed
 8010b1c:	08010b71 	.word	0x08010b71
 8010b20:	08010aed 	.word	0x08010aed
 8010b24:	08010aed 	.word	0x08010aed
 8010b28:	08010aed 	.word	0x08010aed
 8010b2c:	08010aed 	.word	0x08010aed
 8010b30:	08010c6f 	.word	0x08010c6f
 8010b34:	08010b9b 	.word	0x08010b9b
 8010b38:	08010c29 	.word	0x08010c29
 8010b3c:	08010aed 	.word	0x08010aed
 8010b40:	08010aed 	.word	0x08010aed
 8010b44:	08010c91 	.word	0x08010c91
 8010b48:	08010aed 	.word	0x08010aed
 8010b4c:	08010b9b 	.word	0x08010b9b
 8010b50:	08010aed 	.word	0x08010aed
 8010b54:	08010aed 	.word	0x08010aed
 8010b58:	08010c31 	.word	0x08010c31
 8010b5c:	6833      	ldr	r3, [r6, #0]
 8010b5e:	1d1a      	adds	r2, r3, #4
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	6032      	str	r2, [r6, #0]
 8010b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	e09c      	b.n	8010caa <_printf_i+0x1e6>
 8010b70:	6833      	ldr	r3, [r6, #0]
 8010b72:	6820      	ldr	r0, [r4, #0]
 8010b74:	1d19      	adds	r1, r3, #4
 8010b76:	6031      	str	r1, [r6, #0]
 8010b78:	0606      	lsls	r6, r0, #24
 8010b7a:	d501      	bpl.n	8010b80 <_printf_i+0xbc>
 8010b7c:	681d      	ldr	r5, [r3, #0]
 8010b7e:	e003      	b.n	8010b88 <_printf_i+0xc4>
 8010b80:	0645      	lsls	r5, r0, #25
 8010b82:	d5fb      	bpl.n	8010b7c <_printf_i+0xb8>
 8010b84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010b88:	2d00      	cmp	r5, #0
 8010b8a:	da03      	bge.n	8010b94 <_printf_i+0xd0>
 8010b8c:	232d      	movs	r3, #45	@ 0x2d
 8010b8e:	426d      	negs	r5, r5
 8010b90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b94:	4858      	ldr	r0, [pc, #352]	@ (8010cf8 <_printf_i+0x234>)
 8010b96:	230a      	movs	r3, #10
 8010b98:	e011      	b.n	8010bbe <_printf_i+0xfa>
 8010b9a:	6821      	ldr	r1, [r4, #0]
 8010b9c:	6833      	ldr	r3, [r6, #0]
 8010b9e:	0608      	lsls	r0, r1, #24
 8010ba0:	f853 5b04 	ldr.w	r5, [r3], #4
 8010ba4:	d402      	bmi.n	8010bac <_printf_i+0xe8>
 8010ba6:	0649      	lsls	r1, r1, #25
 8010ba8:	bf48      	it	mi
 8010baa:	b2ad      	uxthmi	r5, r5
 8010bac:	2f6f      	cmp	r7, #111	@ 0x6f
 8010bae:	4852      	ldr	r0, [pc, #328]	@ (8010cf8 <_printf_i+0x234>)
 8010bb0:	6033      	str	r3, [r6, #0]
 8010bb2:	bf14      	ite	ne
 8010bb4:	230a      	movne	r3, #10
 8010bb6:	2308      	moveq	r3, #8
 8010bb8:	2100      	movs	r1, #0
 8010bba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010bbe:	6866      	ldr	r6, [r4, #4]
 8010bc0:	60a6      	str	r6, [r4, #8]
 8010bc2:	2e00      	cmp	r6, #0
 8010bc4:	db05      	blt.n	8010bd2 <_printf_i+0x10e>
 8010bc6:	6821      	ldr	r1, [r4, #0]
 8010bc8:	432e      	orrs	r6, r5
 8010bca:	f021 0104 	bic.w	r1, r1, #4
 8010bce:	6021      	str	r1, [r4, #0]
 8010bd0:	d04b      	beq.n	8010c6a <_printf_i+0x1a6>
 8010bd2:	4616      	mov	r6, r2
 8010bd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8010bd8:	fb03 5711 	mls	r7, r3, r1, r5
 8010bdc:	5dc7      	ldrb	r7, [r0, r7]
 8010bde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010be2:	462f      	mov	r7, r5
 8010be4:	42bb      	cmp	r3, r7
 8010be6:	460d      	mov	r5, r1
 8010be8:	d9f4      	bls.n	8010bd4 <_printf_i+0x110>
 8010bea:	2b08      	cmp	r3, #8
 8010bec:	d10b      	bne.n	8010c06 <_printf_i+0x142>
 8010bee:	6823      	ldr	r3, [r4, #0]
 8010bf0:	07df      	lsls	r7, r3, #31
 8010bf2:	d508      	bpl.n	8010c06 <_printf_i+0x142>
 8010bf4:	6923      	ldr	r3, [r4, #16]
 8010bf6:	6861      	ldr	r1, [r4, #4]
 8010bf8:	4299      	cmp	r1, r3
 8010bfa:	bfde      	ittt	le
 8010bfc:	2330      	movle	r3, #48	@ 0x30
 8010bfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010c02:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010c06:	1b92      	subs	r2, r2, r6
 8010c08:	6122      	str	r2, [r4, #16]
 8010c0a:	f8cd a000 	str.w	sl, [sp]
 8010c0e:	464b      	mov	r3, r9
 8010c10:	aa03      	add	r2, sp, #12
 8010c12:	4621      	mov	r1, r4
 8010c14:	4640      	mov	r0, r8
 8010c16:	f7ff fee7 	bl	80109e8 <_printf_common>
 8010c1a:	3001      	adds	r0, #1
 8010c1c:	d14a      	bne.n	8010cb4 <_printf_i+0x1f0>
 8010c1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c22:	b004      	add	sp, #16
 8010c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c28:	6823      	ldr	r3, [r4, #0]
 8010c2a:	f043 0320 	orr.w	r3, r3, #32
 8010c2e:	6023      	str	r3, [r4, #0]
 8010c30:	4832      	ldr	r0, [pc, #200]	@ (8010cfc <_printf_i+0x238>)
 8010c32:	2778      	movs	r7, #120	@ 0x78
 8010c34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010c38:	6823      	ldr	r3, [r4, #0]
 8010c3a:	6831      	ldr	r1, [r6, #0]
 8010c3c:	061f      	lsls	r7, r3, #24
 8010c3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8010c42:	d402      	bmi.n	8010c4a <_printf_i+0x186>
 8010c44:	065f      	lsls	r7, r3, #25
 8010c46:	bf48      	it	mi
 8010c48:	b2ad      	uxthmi	r5, r5
 8010c4a:	6031      	str	r1, [r6, #0]
 8010c4c:	07d9      	lsls	r1, r3, #31
 8010c4e:	bf44      	itt	mi
 8010c50:	f043 0320 	orrmi.w	r3, r3, #32
 8010c54:	6023      	strmi	r3, [r4, #0]
 8010c56:	b11d      	cbz	r5, 8010c60 <_printf_i+0x19c>
 8010c58:	2310      	movs	r3, #16
 8010c5a:	e7ad      	b.n	8010bb8 <_printf_i+0xf4>
 8010c5c:	4826      	ldr	r0, [pc, #152]	@ (8010cf8 <_printf_i+0x234>)
 8010c5e:	e7e9      	b.n	8010c34 <_printf_i+0x170>
 8010c60:	6823      	ldr	r3, [r4, #0]
 8010c62:	f023 0320 	bic.w	r3, r3, #32
 8010c66:	6023      	str	r3, [r4, #0]
 8010c68:	e7f6      	b.n	8010c58 <_printf_i+0x194>
 8010c6a:	4616      	mov	r6, r2
 8010c6c:	e7bd      	b.n	8010bea <_printf_i+0x126>
 8010c6e:	6833      	ldr	r3, [r6, #0]
 8010c70:	6825      	ldr	r5, [r4, #0]
 8010c72:	6961      	ldr	r1, [r4, #20]
 8010c74:	1d18      	adds	r0, r3, #4
 8010c76:	6030      	str	r0, [r6, #0]
 8010c78:	062e      	lsls	r6, r5, #24
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	d501      	bpl.n	8010c82 <_printf_i+0x1be>
 8010c7e:	6019      	str	r1, [r3, #0]
 8010c80:	e002      	b.n	8010c88 <_printf_i+0x1c4>
 8010c82:	0668      	lsls	r0, r5, #25
 8010c84:	d5fb      	bpl.n	8010c7e <_printf_i+0x1ba>
 8010c86:	8019      	strh	r1, [r3, #0]
 8010c88:	2300      	movs	r3, #0
 8010c8a:	6123      	str	r3, [r4, #16]
 8010c8c:	4616      	mov	r6, r2
 8010c8e:	e7bc      	b.n	8010c0a <_printf_i+0x146>
 8010c90:	6833      	ldr	r3, [r6, #0]
 8010c92:	1d1a      	adds	r2, r3, #4
 8010c94:	6032      	str	r2, [r6, #0]
 8010c96:	681e      	ldr	r6, [r3, #0]
 8010c98:	6862      	ldr	r2, [r4, #4]
 8010c9a:	2100      	movs	r1, #0
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	f7ef fb27 	bl	80002f0 <memchr>
 8010ca2:	b108      	cbz	r0, 8010ca8 <_printf_i+0x1e4>
 8010ca4:	1b80      	subs	r0, r0, r6
 8010ca6:	6060      	str	r0, [r4, #4]
 8010ca8:	6863      	ldr	r3, [r4, #4]
 8010caa:	6123      	str	r3, [r4, #16]
 8010cac:	2300      	movs	r3, #0
 8010cae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010cb2:	e7aa      	b.n	8010c0a <_printf_i+0x146>
 8010cb4:	6923      	ldr	r3, [r4, #16]
 8010cb6:	4632      	mov	r2, r6
 8010cb8:	4649      	mov	r1, r9
 8010cba:	4640      	mov	r0, r8
 8010cbc:	47d0      	blx	sl
 8010cbe:	3001      	adds	r0, #1
 8010cc0:	d0ad      	beq.n	8010c1e <_printf_i+0x15a>
 8010cc2:	6823      	ldr	r3, [r4, #0]
 8010cc4:	079b      	lsls	r3, r3, #30
 8010cc6:	d413      	bmi.n	8010cf0 <_printf_i+0x22c>
 8010cc8:	68e0      	ldr	r0, [r4, #12]
 8010cca:	9b03      	ldr	r3, [sp, #12]
 8010ccc:	4298      	cmp	r0, r3
 8010cce:	bfb8      	it	lt
 8010cd0:	4618      	movlt	r0, r3
 8010cd2:	e7a6      	b.n	8010c22 <_printf_i+0x15e>
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	4632      	mov	r2, r6
 8010cd8:	4649      	mov	r1, r9
 8010cda:	4640      	mov	r0, r8
 8010cdc:	47d0      	blx	sl
 8010cde:	3001      	adds	r0, #1
 8010ce0:	d09d      	beq.n	8010c1e <_printf_i+0x15a>
 8010ce2:	3501      	adds	r5, #1
 8010ce4:	68e3      	ldr	r3, [r4, #12]
 8010ce6:	9903      	ldr	r1, [sp, #12]
 8010ce8:	1a5b      	subs	r3, r3, r1
 8010cea:	42ab      	cmp	r3, r5
 8010cec:	dcf2      	bgt.n	8010cd4 <_printf_i+0x210>
 8010cee:	e7eb      	b.n	8010cc8 <_printf_i+0x204>
 8010cf0:	2500      	movs	r5, #0
 8010cf2:	f104 0619 	add.w	r6, r4, #25
 8010cf6:	e7f5      	b.n	8010ce4 <_printf_i+0x220>
 8010cf8:	08011629 	.word	0x08011629
 8010cfc:	0801163a 	.word	0x0801163a

08010d00 <__sflush_r>:
 8010d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d08:	0716      	lsls	r6, r2, #28
 8010d0a:	4605      	mov	r5, r0
 8010d0c:	460c      	mov	r4, r1
 8010d0e:	d454      	bmi.n	8010dba <__sflush_r+0xba>
 8010d10:	684b      	ldr	r3, [r1, #4]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	dc02      	bgt.n	8010d1c <__sflush_r+0x1c>
 8010d16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	dd48      	ble.n	8010dae <__sflush_r+0xae>
 8010d1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d1e:	2e00      	cmp	r6, #0
 8010d20:	d045      	beq.n	8010dae <__sflush_r+0xae>
 8010d22:	2300      	movs	r3, #0
 8010d24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010d28:	682f      	ldr	r7, [r5, #0]
 8010d2a:	6a21      	ldr	r1, [r4, #32]
 8010d2c:	602b      	str	r3, [r5, #0]
 8010d2e:	d030      	beq.n	8010d92 <__sflush_r+0x92>
 8010d30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010d32:	89a3      	ldrh	r3, [r4, #12]
 8010d34:	0759      	lsls	r1, r3, #29
 8010d36:	d505      	bpl.n	8010d44 <__sflush_r+0x44>
 8010d38:	6863      	ldr	r3, [r4, #4]
 8010d3a:	1ad2      	subs	r2, r2, r3
 8010d3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010d3e:	b10b      	cbz	r3, 8010d44 <__sflush_r+0x44>
 8010d40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010d42:	1ad2      	subs	r2, r2, r3
 8010d44:	2300      	movs	r3, #0
 8010d46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d48:	6a21      	ldr	r1, [r4, #32]
 8010d4a:	4628      	mov	r0, r5
 8010d4c:	47b0      	blx	r6
 8010d4e:	1c43      	adds	r3, r0, #1
 8010d50:	89a3      	ldrh	r3, [r4, #12]
 8010d52:	d106      	bne.n	8010d62 <__sflush_r+0x62>
 8010d54:	6829      	ldr	r1, [r5, #0]
 8010d56:	291d      	cmp	r1, #29
 8010d58:	d82b      	bhi.n	8010db2 <__sflush_r+0xb2>
 8010d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8010e04 <__sflush_r+0x104>)
 8010d5c:	40ca      	lsrs	r2, r1
 8010d5e:	07d6      	lsls	r6, r2, #31
 8010d60:	d527      	bpl.n	8010db2 <__sflush_r+0xb2>
 8010d62:	2200      	movs	r2, #0
 8010d64:	6062      	str	r2, [r4, #4]
 8010d66:	04d9      	lsls	r1, r3, #19
 8010d68:	6922      	ldr	r2, [r4, #16]
 8010d6a:	6022      	str	r2, [r4, #0]
 8010d6c:	d504      	bpl.n	8010d78 <__sflush_r+0x78>
 8010d6e:	1c42      	adds	r2, r0, #1
 8010d70:	d101      	bne.n	8010d76 <__sflush_r+0x76>
 8010d72:	682b      	ldr	r3, [r5, #0]
 8010d74:	b903      	cbnz	r3, 8010d78 <__sflush_r+0x78>
 8010d76:	6560      	str	r0, [r4, #84]	@ 0x54
 8010d78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d7a:	602f      	str	r7, [r5, #0]
 8010d7c:	b1b9      	cbz	r1, 8010dae <__sflush_r+0xae>
 8010d7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d82:	4299      	cmp	r1, r3
 8010d84:	d002      	beq.n	8010d8c <__sflush_r+0x8c>
 8010d86:	4628      	mov	r0, r5
 8010d88:	f7ff fa9c 	bl	80102c4 <_free_r>
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d90:	e00d      	b.n	8010dae <__sflush_r+0xae>
 8010d92:	2301      	movs	r3, #1
 8010d94:	4628      	mov	r0, r5
 8010d96:	47b0      	blx	r6
 8010d98:	4602      	mov	r2, r0
 8010d9a:	1c50      	adds	r0, r2, #1
 8010d9c:	d1c9      	bne.n	8010d32 <__sflush_r+0x32>
 8010d9e:	682b      	ldr	r3, [r5, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d0c6      	beq.n	8010d32 <__sflush_r+0x32>
 8010da4:	2b1d      	cmp	r3, #29
 8010da6:	d001      	beq.n	8010dac <__sflush_r+0xac>
 8010da8:	2b16      	cmp	r3, #22
 8010daa:	d11e      	bne.n	8010dea <__sflush_r+0xea>
 8010dac:	602f      	str	r7, [r5, #0]
 8010dae:	2000      	movs	r0, #0
 8010db0:	e022      	b.n	8010df8 <__sflush_r+0xf8>
 8010db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010db6:	b21b      	sxth	r3, r3
 8010db8:	e01b      	b.n	8010df2 <__sflush_r+0xf2>
 8010dba:	690f      	ldr	r7, [r1, #16]
 8010dbc:	2f00      	cmp	r7, #0
 8010dbe:	d0f6      	beq.n	8010dae <__sflush_r+0xae>
 8010dc0:	0793      	lsls	r3, r2, #30
 8010dc2:	680e      	ldr	r6, [r1, #0]
 8010dc4:	bf08      	it	eq
 8010dc6:	694b      	ldreq	r3, [r1, #20]
 8010dc8:	600f      	str	r7, [r1, #0]
 8010dca:	bf18      	it	ne
 8010dcc:	2300      	movne	r3, #0
 8010dce:	eba6 0807 	sub.w	r8, r6, r7
 8010dd2:	608b      	str	r3, [r1, #8]
 8010dd4:	f1b8 0f00 	cmp.w	r8, #0
 8010dd8:	dde9      	ble.n	8010dae <__sflush_r+0xae>
 8010dda:	6a21      	ldr	r1, [r4, #32]
 8010ddc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010dde:	4643      	mov	r3, r8
 8010de0:	463a      	mov	r2, r7
 8010de2:	4628      	mov	r0, r5
 8010de4:	47b0      	blx	r6
 8010de6:	2800      	cmp	r0, #0
 8010de8:	dc08      	bgt.n	8010dfc <__sflush_r+0xfc>
 8010dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010df2:	81a3      	strh	r3, [r4, #12]
 8010df4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dfc:	4407      	add	r7, r0
 8010dfe:	eba8 0800 	sub.w	r8, r8, r0
 8010e02:	e7e7      	b.n	8010dd4 <__sflush_r+0xd4>
 8010e04:	20400001 	.word	0x20400001

08010e08 <_fflush_r>:
 8010e08:	b538      	push	{r3, r4, r5, lr}
 8010e0a:	690b      	ldr	r3, [r1, #16]
 8010e0c:	4605      	mov	r5, r0
 8010e0e:	460c      	mov	r4, r1
 8010e10:	b913      	cbnz	r3, 8010e18 <_fflush_r+0x10>
 8010e12:	2500      	movs	r5, #0
 8010e14:	4628      	mov	r0, r5
 8010e16:	bd38      	pop	{r3, r4, r5, pc}
 8010e18:	b118      	cbz	r0, 8010e22 <_fflush_r+0x1a>
 8010e1a:	6a03      	ldr	r3, [r0, #32]
 8010e1c:	b90b      	cbnz	r3, 8010e22 <_fflush_r+0x1a>
 8010e1e:	f7ff f8f1 	bl	8010004 <__sinit>
 8010e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d0f3      	beq.n	8010e12 <_fflush_r+0xa>
 8010e2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010e2c:	07d0      	lsls	r0, r2, #31
 8010e2e:	d404      	bmi.n	8010e3a <_fflush_r+0x32>
 8010e30:	0599      	lsls	r1, r3, #22
 8010e32:	d402      	bmi.n	8010e3a <_fflush_r+0x32>
 8010e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e36:	f7ff fa42 	bl	80102be <__retarget_lock_acquire_recursive>
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	f7ff ff5f 	bl	8010d00 <__sflush_r>
 8010e42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e44:	07da      	lsls	r2, r3, #31
 8010e46:	4605      	mov	r5, r0
 8010e48:	d4e4      	bmi.n	8010e14 <_fflush_r+0xc>
 8010e4a:	89a3      	ldrh	r3, [r4, #12]
 8010e4c:	059b      	lsls	r3, r3, #22
 8010e4e:	d4e1      	bmi.n	8010e14 <_fflush_r+0xc>
 8010e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e52:	f7ff fa35 	bl	80102c0 <__retarget_lock_release_recursive>
 8010e56:	e7dd      	b.n	8010e14 <_fflush_r+0xc>

08010e58 <__swbuf_r>:
 8010e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e5a:	460e      	mov	r6, r1
 8010e5c:	4614      	mov	r4, r2
 8010e5e:	4605      	mov	r5, r0
 8010e60:	b118      	cbz	r0, 8010e6a <__swbuf_r+0x12>
 8010e62:	6a03      	ldr	r3, [r0, #32]
 8010e64:	b90b      	cbnz	r3, 8010e6a <__swbuf_r+0x12>
 8010e66:	f7ff f8cd 	bl	8010004 <__sinit>
 8010e6a:	69a3      	ldr	r3, [r4, #24]
 8010e6c:	60a3      	str	r3, [r4, #8]
 8010e6e:	89a3      	ldrh	r3, [r4, #12]
 8010e70:	071a      	lsls	r2, r3, #28
 8010e72:	d501      	bpl.n	8010e78 <__swbuf_r+0x20>
 8010e74:	6923      	ldr	r3, [r4, #16]
 8010e76:	b943      	cbnz	r3, 8010e8a <__swbuf_r+0x32>
 8010e78:	4621      	mov	r1, r4
 8010e7a:	4628      	mov	r0, r5
 8010e7c:	f000 f82a 	bl	8010ed4 <__swsetup_r>
 8010e80:	b118      	cbz	r0, 8010e8a <__swbuf_r+0x32>
 8010e82:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010e86:	4638      	mov	r0, r7
 8010e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e8a:	6823      	ldr	r3, [r4, #0]
 8010e8c:	6922      	ldr	r2, [r4, #16]
 8010e8e:	1a98      	subs	r0, r3, r2
 8010e90:	6963      	ldr	r3, [r4, #20]
 8010e92:	b2f6      	uxtb	r6, r6
 8010e94:	4283      	cmp	r3, r0
 8010e96:	4637      	mov	r7, r6
 8010e98:	dc05      	bgt.n	8010ea6 <__swbuf_r+0x4e>
 8010e9a:	4621      	mov	r1, r4
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	f7ff ffb3 	bl	8010e08 <_fflush_r>
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	d1ed      	bne.n	8010e82 <__swbuf_r+0x2a>
 8010ea6:	68a3      	ldr	r3, [r4, #8]
 8010ea8:	3b01      	subs	r3, #1
 8010eaa:	60a3      	str	r3, [r4, #8]
 8010eac:	6823      	ldr	r3, [r4, #0]
 8010eae:	1c5a      	adds	r2, r3, #1
 8010eb0:	6022      	str	r2, [r4, #0]
 8010eb2:	701e      	strb	r6, [r3, #0]
 8010eb4:	6962      	ldr	r2, [r4, #20]
 8010eb6:	1c43      	adds	r3, r0, #1
 8010eb8:	429a      	cmp	r2, r3
 8010eba:	d004      	beq.n	8010ec6 <__swbuf_r+0x6e>
 8010ebc:	89a3      	ldrh	r3, [r4, #12]
 8010ebe:	07db      	lsls	r3, r3, #31
 8010ec0:	d5e1      	bpl.n	8010e86 <__swbuf_r+0x2e>
 8010ec2:	2e0a      	cmp	r6, #10
 8010ec4:	d1df      	bne.n	8010e86 <__swbuf_r+0x2e>
 8010ec6:	4621      	mov	r1, r4
 8010ec8:	4628      	mov	r0, r5
 8010eca:	f7ff ff9d 	bl	8010e08 <_fflush_r>
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	d0d9      	beq.n	8010e86 <__swbuf_r+0x2e>
 8010ed2:	e7d6      	b.n	8010e82 <__swbuf_r+0x2a>

08010ed4 <__swsetup_r>:
 8010ed4:	b538      	push	{r3, r4, r5, lr}
 8010ed6:	4b29      	ldr	r3, [pc, #164]	@ (8010f7c <__swsetup_r+0xa8>)
 8010ed8:	4605      	mov	r5, r0
 8010eda:	6818      	ldr	r0, [r3, #0]
 8010edc:	460c      	mov	r4, r1
 8010ede:	b118      	cbz	r0, 8010ee8 <__swsetup_r+0x14>
 8010ee0:	6a03      	ldr	r3, [r0, #32]
 8010ee2:	b90b      	cbnz	r3, 8010ee8 <__swsetup_r+0x14>
 8010ee4:	f7ff f88e 	bl	8010004 <__sinit>
 8010ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010eec:	0719      	lsls	r1, r3, #28
 8010eee:	d422      	bmi.n	8010f36 <__swsetup_r+0x62>
 8010ef0:	06da      	lsls	r2, r3, #27
 8010ef2:	d407      	bmi.n	8010f04 <__swsetup_r+0x30>
 8010ef4:	2209      	movs	r2, #9
 8010ef6:	602a      	str	r2, [r5, #0]
 8010ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010efc:	81a3      	strh	r3, [r4, #12]
 8010efe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f02:	e033      	b.n	8010f6c <__swsetup_r+0x98>
 8010f04:	0758      	lsls	r0, r3, #29
 8010f06:	d512      	bpl.n	8010f2e <__swsetup_r+0x5a>
 8010f08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f0a:	b141      	cbz	r1, 8010f1e <__swsetup_r+0x4a>
 8010f0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f10:	4299      	cmp	r1, r3
 8010f12:	d002      	beq.n	8010f1a <__swsetup_r+0x46>
 8010f14:	4628      	mov	r0, r5
 8010f16:	f7ff f9d5 	bl	80102c4 <_free_r>
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010f1e:	89a3      	ldrh	r3, [r4, #12]
 8010f20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010f24:	81a3      	strh	r3, [r4, #12]
 8010f26:	2300      	movs	r3, #0
 8010f28:	6063      	str	r3, [r4, #4]
 8010f2a:	6923      	ldr	r3, [r4, #16]
 8010f2c:	6023      	str	r3, [r4, #0]
 8010f2e:	89a3      	ldrh	r3, [r4, #12]
 8010f30:	f043 0308 	orr.w	r3, r3, #8
 8010f34:	81a3      	strh	r3, [r4, #12]
 8010f36:	6923      	ldr	r3, [r4, #16]
 8010f38:	b94b      	cbnz	r3, 8010f4e <__swsetup_r+0x7a>
 8010f3a:	89a3      	ldrh	r3, [r4, #12]
 8010f3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f44:	d003      	beq.n	8010f4e <__swsetup_r+0x7a>
 8010f46:	4621      	mov	r1, r4
 8010f48:	4628      	mov	r0, r5
 8010f4a:	f000 f8a5 	bl	8011098 <__smakebuf_r>
 8010f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f52:	f013 0201 	ands.w	r2, r3, #1
 8010f56:	d00a      	beq.n	8010f6e <__swsetup_r+0x9a>
 8010f58:	2200      	movs	r2, #0
 8010f5a:	60a2      	str	r2, [r4, #8]
 8010f5c:	6962      	ldr	r2, [r4, #20]
 8010f5e:	4252      	negs	r2, r2
 8010f60:	61a2      	str	r2, [r4, #24]
 8010f62:	6922      	ldr	r2, [r4, #16]
 8010f64:	b942      	cbnz	r2, 8010f78 <__swsetup_r+0xa4>
 8010f66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010f6a:	d1c5      	bne.n	8010ef8 <__swsetup_r+0x24>
 8010f6c:	bd38      	pop	{r3, r4, r5, pc}
 8010f6e:	0799      	lsls	r1, r3, #30
 8010f70:	bf58      	it	pl
 8010f72:	6962      	ldrpl	r2, [r4, #20]
 8010f74:	60a2      	str	r2, [r4, #8]
 8010f76:	e7f4      	b.n	8010f62 <__swsetup_r+0x8e>
 8010f78:	2000      	movs	r0, #0
 8010f7a:	e7f7      	b.n	8010f6c <__swsetup_r+0x98>
 8010f7c:	2400001c 	.word	0x2400001c

08010f80 <memmove>:
 8010f80:	4288      	cmp	r0, r1
 8010f82:	b510      	push	{r4, lr}
 8010f84:	eb01 0402 	add.w	r4, r1, r2
 8010f88:	d902      	bls.n	8010f90 <memmove+0x10>
 8010f8a:	4284      	cmp	r4, r0
 8010f8c:	4623      	mov	r3, r4
 8010f8e:	d807      	bhi.n	8010fa0 <memmove+0x20>
 8010f90:	1e43      	subs	r3, r0, #1
 8010f92:	42a1      	cmp	r1, r4
 8010f94:	d008      	beq.n	8010fa8 <memmove+0x28>
 8010f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f9e:	e7f8      	b.n	8010f92 <memmove+0x12>
 8010fa0:	4402      	add	r2, r0
 8010fa2:	4601      	mov	r1, r0
 8010fa4:	428a      	cmp	r2, r1
 8010fa6:	d100      	bne.n	8010faa <memmove+0x2a>
 8010fa8:	bd10      	pop	{r4, pc}
 8010faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010fb2:	e7f7      	b.n	8010fa4 <memmove+0x24>

08010fb4 <_sbrk_r>:
 8010fb4:	b538      	push	{r3, r4, r5, lr}
 8010fb6:	4d06      	ldr	r5, [pc, #24]	@ (8010fd0 <_sbrk_r+0x1c>)
 8010fb8:	2300      	movs	r3, #0
 8010fba:	4604      	mov	r4, r0
 8010fbc:	4608      	mov	r0, r1
 8010fbe:	602b      	str	r3, [r5, #0]
 8010fc0:	f7f0 f8d4 	bl	800116c <_sbrk>
 8010fc4:	1c43      	adds	r3, r0, #1
 8010fc6:	d102      	bne.n	8010fce <_sbrk_r+0x1a>
 8010fc8:	682b      	ldr	r3, [r5, #0]
 8010fca:	b103      	cbz	r3, 8010fce <_sbrk_r+0x1a>
 8010fcc:	6023      	str	r3, [r4, #0]
 8010fce:	bd38      	pop	{r3, r4, r5, pc}
 8010fd0:	24003ae0 	.word	0x24003ae0

08010fd4 <memcpy>:
 8010fd4:	440a      	add	r2, r1
 8010fd6:	4291      	cmp	r1, r2
 8010fd8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010fdc:	d100      	bne.n	8010fe0 <memcpy+0xc>
 8010fde:	4770      	bx	lr
 8010fe0:	b510      	push	{r4, lr}
 8010fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010fea:	4291      	cmp	r1, r2
 8010fec:	d1f9      	bne.n	8010fe2 <memcpy+0xe>
 8010fee:	bd10      	pop	{r4, pc}

08010ff0 <_realloc_r>:
 8010ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff4:	4607      	mov	r7, r0
 8010ff6:	4614      	mov	r4, r2
 8010ff8:	460d      	mov	r5, r1
 8010ffa:	b921      	cbnz	r1, 8011006 <_realloc_r+0x16>
 8010ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011000:	4611      	mov	r1, r2
 8011002:	f7ff b9cb 	b.w	801039c <_malloc_r>
 8011006:	b92a      	cbnz	r2, 8011014 <_realloc_r+0x24>
 8011008:	f7ff f95c 	bl	80102c4 <_free_r>
 801100c:	4625      	mov	r5, r4
 801100e:	4628      	mov	r0, r5
 8011010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011014:	f000 f89e 	bl	8011154 <_malloc_usable_size_r>
 8011018:	4284      	cmp	r4, r0
 801101a:	4606      	mov	r6, r0
 801101c:	d802      	bhi.n	8011024 <_realloc_r+0x34>
 801101e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011022:	d8f4      	bhi.n	801100e <_realloc_r+0x1e>
 8011024:	4621      	mov	r1, r4
 8011026:	4638      	mov	r0, r7
 8011028:	f7ff f9b8 	bl	801039c <_malloc_r>
 801102c:	4680      	mov	r8, r0
 801102e:	b908      	cbnz	r0, 8011034 <_realloc_r+0x44>
 8011030:	4645      	mov	r5, r8
 8011032:	e7ec      	b.n	801100e <_realloc_r+0x1e>
 8011034:	42b4      	cmp	r4, r6
 8011036:	4622      	mov	r2, r4
 8011038:	4629      	mov	r1, r5
 801103a:	bf28      	it	cs
 801103c:	4632      	movcs	r2, r6
 801103e:	f7ff ffc9 	bl	8010fd4 <memcpy>
 8011042:	4629      	mov	r1, r5
 8011044:	4638      	mov	r0, r7
 8011046:	f7ff f93d 	bl	80102c4 <_free_r>
 801104a:	e7f1      	b.n	8011030 <_realloc_r+0x40>

0801104c <__swhatbuf_r>:
 801104c:	b570      	push	{r4, r5, r6, lr}
 801104e:	460c      	mov	r4, r1
 8011050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011054:	2900      	cmp	r1, #0
 8011056:	b096      	sub	sp, #88	@ 0x58
 8011058:	4615      	mov	r5, r2
 801105a:	461e      	mov	r6, r3
 801105c:	da0d      	bge.n	801107a <__swhatbuf_r+0x2e>
 801105e:	89a3      	ldrh	r3, [r4, #12]
 8011060:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011064:	f04f 0100 	mov.w	r1, #0
 8011068:	bf14      	ite	ne
 801106a:	2340      	movne	r3, #64	@ 0x40
 801106c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011070:	2000      	movs	r0, #0
 8011072:	6031      	str	r1, [r6, #0]
 8011074:	602b      	str	r3, [r5, #0]
 8011076:	b016      	add	sp, #88	@ 0x58
 8011078:	bd70      	pop	{r4, r5, r6, pc}
 801107a:	466a      	mov	r2, sp
 801107c:	f000 f848 	bl	8011110 <_fstat_r>
 8011080:	2800      	cmp	r0, #0
 8011082:	dbec      	blt.n	801105e <__swhatbuf_r+0x12>
 8011084:	9901      	ldr	r1, [sp, #4]
 8011086:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801108a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801108e:	4259      	negs	r1, r3
 8011090:	4159      	adcs	r1, r3
 8011092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011096:	e7eb      	b.n	8011070 <__swhatbuf_r+0x24>

08011098 <__smakebuf_r>:
 8011098:	898b      	ldrh	r3, [r1, #12]
 801109a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801109c:	079d      	lsls	r5, r3, #30
 801109e:	4606      	mov	r6, r0
 80110a0:	460c      	mov	r4, r1
 80110a2:	d507      	bpl.n	80110b4 <__smakebuf_r+0x1c>
 80110a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80110a8:	6023      	str	r3, [r4, #0]
 80110aa:	6123      	str	r3, [r4, #16]
 80110ac:	2301      	movs	r3, #1
 80110ae:	6163      	str	r3, [r4, #20]
 80110b0:	b003      	add	sp, #12
 80110b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110b4:	ab01      	add	r3, sp, #4
 80110b6:	466a      	mov	r2, sp
 80110b8:	f7ff ffc8 	bl	801104c <__swhatbuf_r>
 80110bc:	9f00      	ldr	r7, [sp, #0]
 80110be:	4605      	mov	r5, r0
 80110c0:	4639      	mov	r1, r7
 80110c2:	4630      	mov	r0, r6
 80110c4:	f7ff f96a 	bl	801039c <_malloc_r>
 80110c8:	b948      	cbnz	r0, 80110de <__smakebuf_r+0x46>
 80110ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110ce:	059a      	lsls	r2, r3, #22
 80110d0:	d4ee      	bmi.n	80110b0 <__smakebuf_r+0x18>
 80110d2:	f023 0303 	bic.w	r3, r3, #3
 80110d6:	f043 0302 	orr.w	r3, r3, #2
 80110da:	81a3      	strh	r3, [r4, #12]
 80110dc:	e7e2      	b.n	80110a4 <__smakebuf_r+0xc>
 80110de:	89a3      	ldrh	r3, [r4, #12]
 80110e0:	6020      	str	r0, [r4, #0]
 80110e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110e6:	81a3      	strh	r3, [r4, #12]
 80110e8:	9b01      	ldr	r3, [sp, #4]
 80110ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80110ee:	b15b      	cbz	r3, 8011108 <__smakebuf_r+0x70>
 80110f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110f4:	4630      	mov	r0, r6
 80110f6:	f000 f81d 	bl	8011134 <_isatty_r>
 80110fa:	b128      	cbz	r0, 8011108 <__smakebuf_r+0x70>
 80110fc:	89a3      	ldrh	r3, [r4, #12]
 80110fe:	f023 0303 	bic.w	r3, r3, #3
 8011102:	f043 0301 	orr.w	r3, r3, #1
 8011106:	81a3      	strh	r3, [r4, #12]
 8011108:	89a3      	ldrh	r3, [r4, #12]
 801110a:	431d      	orrs	r5, r3
 801110c:	81a5      	strh	r5, [r4, #12]
 801110e:	e7cf      	b.n	80110b0 <__smakebuf_r+0x18>

08011110 <_fstat_r>:
 8011110:	b538      	push	{r3, r4, r5, lr}
 8011112:	4d07      	ldr	r5, [pc, #28]	@ (8011130 <_fstat_r+0x20>)
 8011114:	2300      	movs	r3, #0
 8011116:	4604      	mov	r4, r0
 8011118:	4608      	mov	r0, r1
 801111a:	4611      	mov	r1, r2
 801111c:	602b      	str	r3, [r5, #0]
 801111e:	f7ef fffc 	bl	800111a <_fstat>
 8011122:	1c43      	adds	r3, r0, #1
 8011124:	d102      	bne.n	801112c <_fstat_r+0x1c>
 8011126:	682b      	ldr	r3, [r5, #0]
 8011128:	b103      	cbz	r3, 801112c <_fstat_r+0x1c>
 801112a:	6023      	str	r3, [r4, #0]
 801112c:	bd38      	pop	{r3, r4, r5, pc}
 801112e:	bf00      	nop
 8011130:	24003ae0 	.word	0x24003ae0

08011134 <_isatty_r>:
 8011134:	b538      	push	{r3, r4, r5, lr}
 8011136:	4d06      	ldr	r5, [pc, #24]	@ (8011150 <_isatty_r+0x1c>)
 8011138:	2300      	movs	r3, #0
 801113a:	4604      	mov	r4, r0
 801113c:	4608      	mov	r0, r1
 801113e:	602b      	str	r3, [r5, #0]
 8011140:	f7ef fffb 	bl	800113a <_isatty>
 8011144:	1c43      	adds	r3, r0, #1
 8011146:	d102      	bne.n	801114e <_isatty_r+0x1a>
 8011148:	682b      	ldr	r3, [r5, #0]
 801114a:	b103      	cbz	r3, 801114e <_isatty_r+0x1a>
 801114c:	6023      	str	r3, [r4, #0]
 801114e:	bd38      	pop	{r3, r4, r5, pc}
 8011150:	24003ae0 	.word	0x24003ae0

08011154 <_malloc_usable_size_r>:
 8011154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011158:	1f18      	subs	r0, r3, #4
 801115a:	2b00      	cmp	r3, #0
 801115c:	bfbc      	itt	lt
 801115e:	580b      	ldrlt	r3, [r1, r0]
 8011160:	18c0      	addlt	r0, r0, r3
 8011162:	4770      	bx	lr

08011164 <_init>:
 8011164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011166:	bf00      	nop
 8011168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801116a:	bc08      	pop	{r3}
 801116c:	469e      	mov	lr, r3
 801116e:	4770      	bx	lr

08011170 <_fini>:
 8011170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011172:	bf00      	nop
 8011174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011176:	bc08      	pop	{r3}
 8011178:	469e      	mov	lr, r3
 801117a:	4770      	bx	lr
