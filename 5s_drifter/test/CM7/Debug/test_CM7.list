
test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000517c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005414  08005414  00006414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005454  08005454  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005454  08005454  00006454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800545c  0800545c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800545c  0800545c  0000645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005460  08005460  00006460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08005464  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  24000010  08005474  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000c4  08005474  000070c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb59  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7f  00000000  00000000  00016b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00018a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000878  00000000  00000000  00019520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003911b  00000000  00000000  00019d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1f9  00000000  00000000  00052eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017ab07  00000000  00000000  000610ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dbbb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d24  00000000  00000000  001dbbf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001de91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080053fc 	.word	0x080053fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080053fc 	.word	0x080053fc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800079a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800079c:	bf00      	nop
 800079e:	4b27      	ldr	r3, [pc, #156]	@ (800083c <main+0xac>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d004      	beq.n	80007b4 <main+0x24>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dcf4      	bgt.n	800079e <main+0xe>
  if ( timeout < 0 )
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	da01      	bge.n	80007be <main+0x2e>
  {
  Error_Handler();
 80007ba:	f000 f9b3 	bl	8000b24 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f000 fa97 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 f841 	bl	8000848 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007c6:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <main+0xac>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007cc:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <main+0xac>)
 80007ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d6:	4b19      	ldr	r3, [pc, #100]	@ (800083c <main+0xac>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 fdd9 	bl	800139c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 fdef 	bl	80013d0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007f8:	bf00      	nop
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <main+0xac>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d104      	bne.n	8000810 <main+0x80>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dcf4      	bgt.n	80007fa <main+0x6a>
if ( timeout < 0 )
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da01      	bge.n	800081a <main+0x8a>
{
Error_Handler();
 8000816:	f000 f985 	bl	8000b24 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 f8cb 	bl	80009b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800081e:	f000 f87d 	bl	800091c <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart3, "Hallo\n", 6, (unsigned int)-1);
 8000822:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000826:	2206      	movs	r2, #6
 8000828:	4905      	ldr	r1, [pc, #20]	@ (8000840 <main+0xb0>)
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <main+0xb4>)
 800082c:	f003 fca0 	bl	8004170 <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 8000830:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000834:	f000 faee 	bl	8000e14 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, "Hallo\n", 6, (unsigned int)-1);
 8000838:	bf00      	nop
 800083a:	e7f2      	b.n	8000822 <main+0x92>
 800083c:	58024400 	.word	0x58024400
 8000840:	08005414 	.word	0x08005414
 8000844:	2400002c 	.word	0x2400002c

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09c      	sub	sp, #112	@ 0x70
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000852:	224c      	movs	r2, #76	@ 0x4c
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fda4 	bl	80053a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2220      	movs	r2, #32
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f004 fd9e 	bl	80053a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000868:	2004      	movs	r0, #4
 800086a:	f000 fdc5 	bl	80013f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b28      	ldr	r3, [pc, #160]	@ (8000914 <SystemClock_Config+0xcc>)
 8000874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000876:	4a27      	ldr	r2, [pc, #156]	@ (8000914 <SystemClock_Config+0xcc>)
 8000878:	f023 0301 	bic.w	r3, r3, #1
 800087c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800087e:	4b25      	ldr	r3, [pc, #148]	@ (8000914 <SystemClock_Config+0xcc>)
 8000880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	4b23      	ldr	r3, [pc, #140]	@ (8000918 <SystemClock_Config+0xd0>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000890:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <SystemClock_Config+0xd0>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <SystemClock_Config+0xd0>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a4:	bf00      	nop
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <SystemClock_Config+0xd0>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008b2:	d1f8      	bne.n	80008a6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2340      	movs	r3, #64	@ 0x40
 80008be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 fdef 	bl	80014ac <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008d4:	f000 f926 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	233f      	movs	r3, #63	@ 0x3f
 80008da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2101      	movs	r1, #1
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 fa2f 	bl	8001d60 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000908:	f000 f90c 	bl	8000b24 <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3770      	adds	r7, #112	@ 0x70
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	58000400 	.word	0x58000400
 8000918:	58024800 	.word	0x58024800

0800091c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000920:	4b22      	ldr	r3, [pc, #136]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 8000922:	4a23      	ldr	r2, [pc, #140]	@ (80009b0 <MX_USART3_UART_Init+0x94>)
 8000924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000926:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b1d      	ldr	r3, [pc, #116]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000964:	4811      	ldr	r0, [pc, #68]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 8000966:	f003 fbb3 	bl	80040d0 <HAL_UART_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 f8d8 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	480d      	ldr	r0, [pc, #52]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 8000978:	f004 fc49 	bl	800520e <HAL_UARTEx_SetTxFifoThreshold>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000982:	f000 f8cf 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4808      	ldr	r0, [pc, #32]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 800098a:	f004 fc7e 	bl	800528a <HAL_UARTEx_SetRxFifoThreshold>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000994:	f000 f8c6 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	@ (80009ac <MX_USART3_UART_Init+0x90>)
 800099a:	f004 fbff 	bl	800519c <HAL_UARTEx_DisableFifoMode>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009a4:	f000 f8be 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2400002c 	.word	0x2400002c
 80009b0:	40004800 	.word	0x40004800

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	4b51      	ldr	r3, [pc, #324]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d0:	4a4f      	ldr	r2, [pc, #316]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009da:	4b4d      	ldr	r3, [pc, #308]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b49      	ldr	r3, [pc, #292]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ee:	4a48      	ldr	r2, [pc, #288]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f8:	4b45      	ldr	r3, [pc, #276]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b42      	ldr	r3, [pc, #264]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0c:	4a40      	ldr	r2, [pc, #256]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a16:	4b3e      	ldr	r3, [pc, #248]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a24:	4b3a      	ldr	r3, [pc, #232]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2a:	4a39      	ldr	r2, [pc, #228]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a34:	4b36      	ldr	r3, [pc, #216]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a42:	4b33      	ldr	r3, [pc, #204]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a48:	4a31      	ldr	r2, [pc, #196]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 8000a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a52:	4b2f      	ldr	r3, [pc, #188]	@ (8000b10 <MX_GPIO_Init+0x15c>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a60:	2332      	movs	r3, #50	@ 0x32
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a70:	230b      	movs	r3, #11
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4826      	ldr	r0, [pc, #152]	@ (8000b14 <MX_GPIO_Init+0x160>)
 8000a7c:	f000 fade 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a80:	2386      	movs	r3, #134	@ 0x86
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a90:	230b      	movs	r3, #11
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481f      	ldr	r0, [pc, #124]	@ (8000b18 <MX_GPIO_Init+0x164>)
 8000a9c:	f000 face 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab2:	230b      	movs	r3, #11
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4817      	ldr	r0, [pc, #92]	@ (8000b1c <MX_GPIO_Init+0x168>)
 8000abe:	f000 fabd 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ac2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ad4:	230a      	movs	r3, #10
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <MX_GPIO_Init+0x164>)
 8000ae0:	f000 faac 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ae4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af6:	230b      	movs	r3, #11
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4807      	ldr	r0, [pc, #28]	@ (8000b20 <MX_GPIO_Init+0x16c>)
 8000b02:	f000 fa9b 	bl	800103c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	@ 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	58024400 	.word	0x58024400
 8000b14:	58020800 	.word	0x58020800
 8000b18:	58020000 	.word	0x58020000
 8000b1c:	58020400 	.word	0x58020400
 8000b20:	58021800 	.word	0x58021800

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_MspInit+0x30>)
 8000b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b3c:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_MspInit+0x30>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_MspInit+0x30>)
 8000b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	58024400 	.word	0x58024400

08000b64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0ba      	sub	sp, #232	@ 0xe8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	22c0      	movs	r2, #192	@ 0xc0
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f004 fc0d 	bl	80053a4 <memset>
  if(huart->Instance==USART3)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a27      	ldr	r2, [pc, #156]	@ (8000c2c <HAL_UART_MspInit+0xc8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d146      	bne.n	8000c22 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b94:	f04f 0202 	mov.w	r2, #2
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fc64 	bl	8002478 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000bb6:	f7ff ffb5 	bl	8000b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bba:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <HAL_UART_MspInit+0xcc>)
 8000bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c30 <HAL_UART_MspInit+0xcc>)
 8000bc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_UART_MspInit+0xcc>)
 8000bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd8:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <HAL_UART_MspInit+0xcc>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bde:	4a14      	ldr	r2, [pc, #80]	@ (8000c30 <HAL_UART_MspInit+0xcc>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_UART_MspInit+0xcc>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bf6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c10:	2307      	movs	r3, #7
 8000c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <HAL_UART_MspInit+0xd0>)
 8000c1e:	f000 fa0d 	bl	800103c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c22:	bf00      	nop
 8000c24:	37e8      	adds	r7, #232	@ 0xe8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40004800 	.word	0x40004800
 8000c30:	58024400 	.word	0x58024400
 8000c34:	58020c00 	.word	0x58020c00

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <NMI_Handler+0x4>

08000c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <MemManage_Handler+0x4>

08000c50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8e:	f000 f8a1 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000cd4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000c9c:	f7ff fd60 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca0:	f7ff fcb0 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	@ (8000cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cca:	f004 fb73 	bl	80053b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fd5f 	bl	8000790 <main>
  bx  lr
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cdc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ce0:	08005464 	.word	0x08005464
  ldr r2, =_sbss
 8000ce4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ce8:	240000c4 	.word	0x240000c4

08000cec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC3_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f000 f96e 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cfc:	f001 f9e6 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8000d00:	4602      	mov	r2, r0
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <HAL_Init+0x68>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	0a1b      	lsrs	r3, r3, #8
 8000d08:	f003 030f 	and.w	r3, r3, #15
 8000d0c:	4913      	ldr	r1, [pc, #76]	@ (8000d5c <HAL_Init+0x6c>)
 8000d0e:	5ccb      	ldrb	r3, [r1, r3]
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	fa22 f303 	lsr.w	r3, r2, r3
 8000d18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <HAL_Init+0x68>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	4a0e      	ldr	r2, [pc, #56]	@ (8000d5c <HAL_Init+0x6c>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	f003 031f 	and.w	r3, r3, #31
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d30:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <HAL_Init+0x70>)
 8000d32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d34:	4a0b      	ldr	r2, [pc, #44]	@ (8000d64 <HAL_Init+0x74>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f814 	bl	8000d68 <HAL_InitTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e002      	b.n	8000d50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4a:	f7ff fef1 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	0800541c 	.word	0x0800541c
 8000d60:	24000004 	.word	0x24000004
 8000d64:	24000000 	.word	0x24000000

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d70:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_InitTick+0x60>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e021      	b.n	8000dc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <HAL_InitTick+0x64>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <HAL_InitTick+0x60>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f945 	bl	8001022 <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000db0:	f000 f91d 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	@ (8000dd0 <HAL_InitTick+0x68>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2400000c 	.word	0x2400000c
 8000dcc:	24000000 	.word	0x24000000
 8000dd0:	24000008 	.word	0x24000008

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2400000c 	.word	0x2400000c
 8000df8:	240000c0 	.word	0x240000c0

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	240000c0 	.word	0x240000c0

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2400000c 	.word	0x2400000c

08000e5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <HAL_GetREVID+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	0c1b      	lsrs	r3, r3, #16
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	5c001000 	.word	0x5c001000

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	05fa0000 	.word	0x05fa0000

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	@ 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff47 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff5e 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff90 	bl	8000f2c <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5f 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffb2 	bl	8000f94 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800104a:	4b89      	ldr	r3, [pc, #548]	@ (8001270 <HAL_GPIO_Init+0x234>)
 800104c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800104e:	e194      	b.n	800137a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8186 	beq.w	8001374 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d005      	beq.n	8001080 <HAL_GPIO_Init+0x44>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d130      	bne.n	80010e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b6:	2201      	movs	r2, #1
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 0201 	and.w	r2, r3, #1
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d017      	beq.n	800111e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d123      	bne.n	8001172 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	69b9      	ldr	r1, [r7, #24]
 800116e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0203 	and.w	r2, r3, #3
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80e0 	beq.w	8001374 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <HAL_GPIO_Init+0x238>)
 80011b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001274 <HAL_GPIO_Init+0x238>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <HAL_GPIO_Init+0x238>)
 80011c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a29      	ldr	r2, [pc, #164]	@ (8001278 <HAL_GPIO_Init+0x23c>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a20      	ldr	r2, [pc, #128]	@ (800127c <HAL_GPIO_Init+0x240>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d052      	beq.n	80012a4 <HAL_GPIO_Init+0x268>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a1f      	ldr	r2, [pc, #124]	@ (8001280 <HAL_GPIO_Init+0x244>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d031      	beq.n	800126a <HAL_GPIO_Init+0x22e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a1e      	ldr	r2, [pc, #120]	@ (8001284 <HAL_GPIO_Init+0x248>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_GPIO_Init+0x22a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a1d      	ldr	r2, [pc, #116]	@ (8001288 <HAL_GPIO_Init+0x24c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a1c      	ldr	r2, [pc, #112]	@ (800128c <HAL_GPIO_Init+0x250>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x222>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a1b      	ldr	r2, [pc, #108]	@ (8001290 <HAL_GPIO_Init+0x254>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a1a      	ldr	r2, [pc, #104]	@ (8001294 <HAL_GPIO_Init+0x258>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x21a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a19      	ldr	r2, [pc, #100]	@ (8001298 <HAL_GPIO_Init+0x25c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x216>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a18      	ldr	r2, [pc, #96]	@ (800129c <HAL_GPIO_Init+0x260>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x212>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <HAL_GPIO_Init+0x264>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x20e>
 8001246:	2309      	movs	r3, #9
 8001248:	e02d      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800124a:	230a      	movs	r3, #10
 800124c:	e02b      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800124e:	2308      	movs	r3, #8
 8001250:	e029      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 8001252:	2307      	movs	r3, #7
 8001254:	e027      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 8001256:	2306      	movs	r3, #6
 8001258:	e025      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800125a:	2305      	movs	r3, #5
 800125c:	e023      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800125e:	2304      	movs	r3, #4
 8001260:	e021      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 8001262:	2303      	movs	r3, #3
 8001264:	e01f      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 8001266:	2302      	movs	r3, #2
 8001268:	e01d      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800126a:	2301      	movs	r3, #1
 800126c:	e01b      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800126e:	bf00      	nop
 8001270:	58000080 	.word	0x58000080
 8001274:	58024400 	.word	0x58024400
 8001278:	58000400 	.word	0x58000400
 800127c:	58020000 	.word	0x58020000
 8001280:	58020400 	.word	0x58020400
 8001284:	58020800 	.word	0x58020800
 8001288:	58020c00 	.word	0x58020c00
 800128c:	58021000 	.word	0x58021000
 8001290:	58021400 	.word	0x58021400
 8001294:	58021800 	.word	0x58021800
 8001298:	58021c00 	.word	0x58021c00
 800129c:	58022000 	.word	0x58022000
 80012a0:	58022400 	.word	0x58022400
 80012a4:	2300      	movs	r3, #0
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	f002 0203 	and.w	r2, r2, #3
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	4093      	lsls	r3, r2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b6:	4938      	ldr	r1, [pc, #224]	@ (8001398 <HAL_GPIO_Init+0x35c>)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001318:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	3301      	adds	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	f47f ae63 	bne.w	8001050 <HAL_GPIO_Init+0x14>
  }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	3724      	adds	r7, #36	@ 0x24
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	58000400 	.word	0x58000400

0800139c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80013a4:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_HSEM_FastTake+0x2c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3320      	adds	r3, #32
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	4a07      	ldr	r2, [pc, #28]	@ (80013cc <HAL_HSEM_FastTake+0x30>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d101      	bne.n	80013b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e000      	b.n	80013ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	58026400 	.word	0x58026400
 80013cc:	80000300 	.word	0x80000300

080013d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80013da:	4906      	ldr	r1, [pc, #24]	@ (80013f4 <HAL_HSEM_Release+0x24>)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	58026400 	.word	0x58026400

080013f8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001400:	4b29      	ldr	r3, [pc, #164]	@ (80014a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	2b06      	cmp	r3, #6
 800140a:	d00a      	beq.n	8001422 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800140c:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	d001      	beq.n	800141e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e040      	b.n	80014a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e03e      	b.n	80014a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800142a:	491f      	ldr	r1, [pc, #124]	@ (80014a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4313      	orrs	r3, r2
 8001430:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001432:	f7ff fce3 	bl	8000dfc <HAL_GetTick>
 8001436:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001438:	e009      	b.n	800144e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800143a:	f7ff fcdf 	bl	8000dfc <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001448:	d901      	bls.n	800144e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e028      	b.n	80014a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800144e:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800145a:	d1ee      	bne.n	800143a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b1e      	cmp	r3, #30
 8001460:	d008      	beq.n	8001474 <HAL_PWREx_ConfigSupply+0x7c>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b2e      	cmp	r3, #46	@ 0x2e
 8001466:	d005      	beq.n	8001474 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b1d      	cmp	r3, #29
 800146c:	d002      	beq.n	8001474 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b2d      	cmp	r3, #45	@ 0x2d
 8001472:	d114      	bne.n	800149e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001474:	f7ff fcc2 	bl	8000dfc <HAL_GetTick>
 8001478:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800147a:	e009      	b.n	8001490 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800147c:	f7ff fcbe 	bl	8000dfc <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800148a:	d901      	bls.n	8001490 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e007      	b.n	80014a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800149c:	d1ee      	bne.n	800147c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	58024800 	.word	0x58024800

080014ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	@ 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f000 bc48 	b.w	8001d50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 8088 	beq.w	80015de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ce:	4b99      	ldr	r3, [pc, #612]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014d8:	4b96      	ldr	r3, [pc, #600]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e0:	2b10      	cmp	r3, #16
 80014e2:	d007      	beq.n	80014f4 <HAL_RCC_OscConfig+0x48>
 80014e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e6:	2b18      	cmp	r3, #24
 80014e8:	d111      	bne.n	800150e <HAL_RCC_OscConfig+0x62>
 80014ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d10c      	bne.n	800150e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d06d      	beq.n	80015dc <HAL_RCC_OscConfig+0x130>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d169      	bne.n	80015dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	f000 bc21 	b.w	8001d50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x7a>
 8001518:	4b86      	ldr	r3, [pc, #536]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a85      	ldr	r2, [pc, #532]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e02e      	b.n	8001584 <HAL_RCC_OscConfig+0xd8>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x9c>
 800152e:	4b81      	ldr	r3, [pc, #516]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a80      	ldr	r2, [pc, #512]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b7e      	ldr	r3, [pc, #504]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7d      	ldr	r2, [pc, #500]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01d      	b.n	8001584 <HAL_RCC_OscConfig+0xd8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0xc0>
 8001552:	4b78      	ldr	r3, [pc, #480]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a77      	ldr	r2, [pc, #476]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b75      	ldr	r3, [pc, #468]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a74      	ldr	r2, [pc, #464]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xd8>
 800156c:	4b71      	ldr	r3, [pc, #452]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a70      	ldr	r2, [pc, #448]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b6e      	ldr	r3, [pc, #440]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a6d      	ldr	r2, [pc, #436]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fc36 	bl	8000dfc <HAL_GetTick>
 8001590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fc32 	bl	8000dfc <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	@ 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e3d4      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015a6:	4b63      	ldr	r3, [pc, #396]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xe8>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fc22 	bl	8000dfc <HAL_GetTick>
 80015b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fc1e 	bl	8000dfc <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	@ 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e3c0      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ce:	4b59      	ldr	r3, [pc, #356]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x110>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80ca 	beq.w	8001780 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ec:	4b51      	ldr	r3, [pc, #324]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80015f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <HAL_RCC_OscConfig+0x166>
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	2b18      	cmp	r3, #24
 8001606:	d156      	bne.n	80016b6 <HAL_RCC_OscConfig+0x20a>
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d151      	bne.n	80016b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001612:	4b48      	ldr	r3, [pc, #288]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x17e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e392      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800162a:	4b42      	ldr	r3, [pc, #264]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 0219 	bic.w	r2, r3, #25
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	493f      	ldr	r1, [pc, #252]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fbde 	bl	8000dfc <HAL_GetTick>
 8001640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fbda 	bl	8000dfc <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e37c      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001656:	4b37      	ldr	r3, [pc, #220]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	f7ff fbfb 	bl	8000e5c <HAL_GetREVID>
 8001666:	4603      	mov	r3, r0
 8001668:	f241 0203 	movw	r2, #4099	@ 0x1003
 800166c:	4293      	cmp	r3, r2
 800166e:	d817      	bhi.n	80016a0 <HAL_RCC_OscConfig+0x1f4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	2b40      	cmp	r3, #64	@ 0x40
 8001676:	d108      	bne.n	800168a <HAL_RCC_OscConfig+0x1de>
 8001678:	4b2e      	ldr	r3, [pc, #184]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001680:	4a2c      	ldr	r2, [pc, #176]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001686:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001688:	e07a      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	031b      	lsls	r3, r3, #12
 8001698:	4926      	ldr	r1, [pc, #152]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800169a:	4313      	orrs	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800169e:	e06f      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	4921      	ldr	r1, [pc, #132]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b4:	e064      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d047      	beq.n	800174e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 0219 	bic.w	r2, r3, #25
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	491a      	ldr	r1, [pc, #104]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb94 	bl	8000dfc <HAL_GetTick>
 80016d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fb90 	bl	8000dfc <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e332      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ea:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	f7ff fbb1 	bl	8000e5c <HAL_GetREVID>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001700:	4293      	cmp	r3, r2
 8001702:	d819      	bhi.n	8001738 <HAL_RCC_OscConfig+0x28c>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	2b40      	cmp	r3, #64	@ 0x40
 800170a:	d108      	bne.n	800171e <HAL_RCC_OscConfig+0x272>
 800170c:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001714:	4a07      	ldr	r2, [pc, #28]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171a:	6053      	str	r3, [r2, #4]
 800171c:	e030      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	031b      	lsls	r3, r3, #12
 800172c:	4901      	ldr	r1, [pc, #4]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
 8001732:	e025      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
 8001734:	58024400 	.word	0x58024400
 8001738:	4b9a      	ldr	r3, [pc, #616]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	4997      	ldr	r1, [pc, #604]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
 800174c:	e018      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174e:	4b95      	ldr	r3, [pc, #596]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a94      	ldr	r2, [pc, #592]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff fb4f 	bl	8000dfc <HAL_GetTick>
 800175e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff fb4b 	bl	8000dfc <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e2ed      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001774:	4b8b      	ldr	r3, [pc, #556]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80a9 	beq.w	80018e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178e:	4b85      	ldr	r3, [pc, #532]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001796:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001798:	4b82      	ldr	r3, [pc, #520]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d007      	beq.n	80017b4 <HAL_RCC_OscConfig+0x308>
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2b18      	cmp	r3, #24
 80017a8:	d13a      	bne.n	8001820 <HAL_RCC_OscConfig+0x374>
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d135      	bne.n	8001820 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017b4:	4b7b      	ldr	r3, [pc, #492]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x320>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b80      	cmp	r3, #128	@ 0x80
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e2c1      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017cc:	f7ff fb46 	bl	8000e5c <HAL_GetREVID>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d817      	bhi.n	800180a <HAL_RCC_OscConfig+0x35e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	2b20      	cmp	r3, #32
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_OscConfig+0x348>
 80017e2:	4b70      	ldr	r3, [pc, #448]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80017ea:	4a6e      	ldr	r2, [pc, #440]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80017ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80017f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017f2:	e075      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017f4:	4b6b      	ldr	r3, [pc, #428]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	069b      	lsls	r3, r3, #26
 8001802:	4968      	ldr	r1, [pc, #416]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001808:	e06a      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800180a:	4b66      	ldr	r3, [pc, #408]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	061b      	lsls	r3, r3, #24
 8001818:	4962      	ldr	r1, [pc, #392]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800181a:	4313      	orrs	r3, r2
 800181c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800181e:	e05f      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d042      	beq.n	80018ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001828:	4b5e      	ldr	r3, [pc, #376]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a5d      	ldr	r2, [pc, #372]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800182e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff fae2 	bl	8000dfc <HAL_GetTick>
 8001838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800183c:	f7ff fade 	bl	8000dfc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e280      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800184e:	4b55      	ldr	r3, [pc, #340]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800185a:	f7ff faff 	bl	8000e5c <HAL_GetREVID>
 800185e:	4603      	mov	r3, r0
 8001860:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001864:	4293      	cmp	r3, r2
 8001866:	d817      	bhi.n	8001898 <HAL_RCC_OscConfig+0x3ec>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	2b20      	cmp	r3, #32
 800186e:	d108      	bne.n	8001882 <HAL_RCC_OscConfig+0x3d6>
 8001870:	4b4c      	ldr	r3, [pc, #304]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001878:	4a4a      	ldr	r2, [pc, #296]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800187a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800187e:	6053      	str	r3, [r2, #4]
 8001880:	e02e      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
 8001882:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	069b      	lsls	r3, r3, #26
 8001890:	4944      	ldr	r1, [pc, #272]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
 8001896:	e023      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
 8001898:	4b42      	ldr	r3, [pc, #264]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	493f      	ldr	r1, [pc, #252]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
 80018ac:	e018      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018ae:	4b3d      	ldr	r3, [pc, #244]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a3c      	ldr	r2, [pc, #240]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fa9f 	bl	8000dfc <HAL_GetTick>
 80018be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018c2:	f7ff fa9b 	bl	8000dfc <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e23d      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018d4:	4b33      	ldr	r3, [pc, #204]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d036      	beq.n	800195a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d019      	beq.n	8001928 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f4:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018f8:	4a2a      	ldr	r2, [pc, #168]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fa7c 	bl	8000dfc <HAL_GetTick>
 8001904:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fa78 	bl	8000dfc <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e21a      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800191a:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800191c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x45c>
 8001926:	e018      	b.n	800195a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001928:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800192a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800192c:	4a1d      	ldr	r2, [pc, #116]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7ff fa62 	bl	8000dfc <HAL_GetTick>
 8001938:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff fa5e 	bl	8000dfc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e200      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	2b00      	cmp	r3, #0
 8001964:	d039      	beq.n	80019da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01c      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001974:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001978:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800197a:	f7ff fa3f 	bl	8000dfc <HAL_GetTick>
 800197e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001982:	f7ff fa3b 	bl	8000dfc <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1dd      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x4d6>
 80019a0:	e01b      	b.n	80019da <HAL_RCC_OscConfig+0x52e>
 80019a2:	bf00      	nop
 80019a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019a8:	4b9b      	ldr	r3, [pc, #620]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a9a      	ldr	r2, [pc, #616]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 80019ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019b4:	f7ff fa22 	bl	8000dfc <HAL_GetTick>
 80019b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019bc:	f7ff fa1e 	bl	8000dfc <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1c0      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ce:	4b92      	ldr	r3, [pc, #584]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8081 	beq.w	8001aea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019e8:	4b8c      	ldr	r3, [pc, #560]	@ (8001c1c <HAL_RCC_OscConfig+0x770>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a8b      	ldr	r2, [pc, #556]	@ (8001c1c <HAL_RCC_OscConfig+0x770>)
 80019ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019f4:	f7ff fa02 	bl	8000dfc <HAL_GetTick>
 80019f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fc:	f7ff f9fe 	bl	8000dfc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	@ 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e1a0      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a0e:	4b83      	ldr	r3, [pc, #524]	@ (8001c1c <HAL_RCC_OscConfig+0x770>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d106      	bne.n	8001a30 <HAL_RCC_OscConfig+0x584>
 8001a22:	4b7d      	ldr	r3, [pc, #500]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a26:	4a7c      	ldr	r2, [pc, #496]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a2e:	e02d      	b.n	8001a8c <HAL_RCC_OscConfig+0x5e0>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5a6>
 8001a38:	4b77      	ldr	r3, [pc, #476]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3c:	4a76      	ldr	r2, [pc, #472]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a44:	4b74      	ldr	r3, [pc, #464]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a48:	4a73      	ldr	r2, [pc, #460]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a4a:	f023 0304 	bic.w	r3, r3, #4
 8001a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a50:	e01c      	b.n	8001a8c <HAL_RCC_OscConfig+0x5e0>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5c8>
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a66:	4b6c      	ldr	r3, [pc, #432]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6a:	4a6b      	ldr	r2, [pc, #428]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0x5e0>
 8001a74:	4b68      	ldr	r3, [pc, #416]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a78:	4a67      	ldr	r2, [pc, #412]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a80:	4b65      	ldr	r3, [pc, #404]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a84:	4a64      	ldr	r2, [pc, #400]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a86:	f023 0304 	bic.w	r3, r3, #4
 8001a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d015      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff f9b2 	bl	8000dfc <HAL_GetTick>
 8001a98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff f9ae 	bl	8000dfc <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e14e      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ab2:	4b59      	ldr	r3, [pc, #356]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ee      	beq.n	8001a9c <HAL_RCC_OscConfig+0x5f0>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f99c 	bl	8000dfc <HAL_GetTick>
 8001ac4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f998 	bl	8000dfc <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e138      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ade:	4b4e      	ldr	r3, [pc, #312]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ee      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 812d 	beq.w	8001d4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001af4:	4b48      	ldr	r3, [pc, #288]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001afc:	2b18      	cmp	r3, #24
 8001afe:	f000 80bd 	beq.w	8001c7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	f040 809e 	bne.w	8001c48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b42      	ldr	r3, [pc, #264]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a41      	ldr	r2, [pc, #260]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f970 	bl	8000dfc <HAL_GetTick>
 8001b1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f96c 	bl	8000dfc <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e10e      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b32:	4b39      	ldr	r3, [pc, #228]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3e:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b42:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <HAL_RCC_OscConfig+0x774>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	430a      	orrs	r2, r1
 8001b52:	4931      	ldr	r1, [pc, #196]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	628b      	str	r3, [r1, #40]	@ 0x28
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b66:	3b01      	subs	r3, #1
 8001b68:	025b      	lsls	r3, r3, #9
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	3b01      	subs	r3, #1
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b80:	3b01      	subs	r3, #1
 8001b82:	061b      	lsls	r3, r3, #24
 8001b84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001b88:	4923      	ldr	r1, [pc, #140]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b8e:	4b22      	ldr	r3, [pc, #136]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b92:	4a21      	ldr	r2, [pc, #132]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b9e:	4b21      	ldr	r3, [pc, #132]	@ (8001c24 <HAL_RCC_OscConfig+0x778>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ba6:	00d2      	lsls	r2, r2, #3
 8001ba8:	491b      	ldr	r1, [pc, #108]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb2:	f023 020c 	bic.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	4917      	ldr	r1, [pc, #92]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	f023 0202 	bic.w	r2, r3, #2
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bcc:	4912      	ldr	r1, [pc, #72]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	4a10      	ldr	r2, [pc, #64]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bde:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be2:	4a0d      	ldr	r2, [pc, #52]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001bea:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001bf6:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfa:	4a07      	ldr	r2, [pc, #28]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a04      	ldr	r2, [pc, #16]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001c08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f8f5 	bl	8000dfc <HAL_GetTick>
 8001c12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c14:	e011      	b.n	8001c3a <HAL_RCC_OscConfig+0x78e>
 8001c16:	bf00      	nop
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	58024800 	.word	0x58024800
 8001c20:	fffffc0c 	.word	0xfffffc0c
 8001c24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f8e8 	bl	8000dfc <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e08a      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c3a:	4b47      	ldr	r3, [pc, #284]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x77c>
 8001c46:	e082      	b.n	8001d4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b43      	ldr	r3, [pc, #268]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a42      	ldr	r2, [pc, #264]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff f8d2 	bl	8000dfc <HAL_GetTick>
 8001c58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff f8ce 	bl	8000dfc <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e070      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x7b0>
 8001c7a:	e068      	b.n	8001d4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c7c:	4b36      	ldr	r3, [pc, #216]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c82:	4b35      	ldr	r3, [pc, #212]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d031      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f003 0203 	and.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d12a      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d122      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d11a      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	0a5b      	lsrs	r3, r3, #9
 8001cc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d111      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	0c1b      	lsrs	r3, r3, #16
 8001cd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d108      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	0e1b      	lsrs	r3, r3, #24
 8001ce6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e02b      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfc:	08db      	lsrs	r3, r3, #3
 8001cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d01f      	beq.n	8001d4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d0e:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	4a11      	ldr	r2, [pc, #68]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d1a:	f7ff f86f 	bl	8000dfc <HAL_GetTick>
 8001d1e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d20:	bf00      	nop
 8001d22:	f7ff f86b 	bl	8000dfc <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d0f9      	beq.n	8001d22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <HAL_RCC_OscConfig+0x8b0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d3a:	00d2      	lsls	r2, r2, #3
 8001d3c:	4906      	ldr	r1, [pc, #24]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d42:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d46:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3730      	adds	r7, #48	@ 0x30
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	58024400 	.word	0x58024400
 8001d5c:	ffff0007 	.word	0xffff0007

08001d60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e19c      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b8a      	ldr	r3, [pc, #552]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d910      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b87      	ldr	r3, [pc, #540]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 020f 	bic.w	r2, r3, #15
 8001d8a:	4985      	ldr	r1, [pc, #532]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b83      	ldr	r3, [pc, #524]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e184      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d010      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d908      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dc0:	4b78      	ldr	r3, [pc, #480]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4975      	ldr	r1, [pc, #468]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	4b70      	ldr	r3, [pc, #448]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d908      	bls.n	8001e00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dee:	4b6d      	ldr	r3, [pc, #436]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	496a      	ldr	r1, [pc, #424]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d010      	beq.n	8001e2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699a      	ldr	r2, [r3, #24]
 8001e10:	4b64      	ldr	r3, [pc, #400]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d908      	bls.n	8001e2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e1c:	4b61      	ldr	r3, [pc, #388]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	495e      	ldr	r1, [pc, #376]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d010      	beq.n	8001e5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d908      	bls.n	8001e5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e4a:	4b56      	ldr	r3, [pc, #344]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4953      	ldr	r1, [pc, #332]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d908      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f023 020f 	bic.w	r2, r3, #15
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4947      	ldr	r1, [pc, #284]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d055      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e96:	4b43      	ldr	r3, [pc, #268]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4940      	ldr	r1, [pc, #256]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d121      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0f6      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ec8:	4b36      	ldr	r3, [pc, #216]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d115      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0ea      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ee0:	4b30      	ldr	r3, [pc, #192]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d109      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0de      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0d6      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f00:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	f023 0207 	bic.w	r2, r3, #7
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4925      	ldr	r1, [pc, #148]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f12:	f7fe ff73 	bl	8000dfc <HAL_GetTick>
 8001f16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1a:	f7fe ff6f 	bl	8000dfc <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0be      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f30:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d1eb      	bne.n	8001f1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d208      	bcs.n	8001f70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5e:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f023 020f 	bic.w	r2, r3, #15
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	490e      	ldr	r1, [pc, #56]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d214      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 020f 	bic.w	r2, r3, #15
 8001f86:	4906      	ldr	r1, [pc, #24]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e086      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
 8001fa0:	52002000 	.word	0x52002000
 8001fa4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d010      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d208      	bcs.n	8001fd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fc4:	4b3c      	ldr	r3, [pc, #240]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	4939      	ldr	r1, [pc, #228]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	4b34      	ldr	r3, [pc, #208]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d208      	bcs.n	8002004 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ff2:	4b31      	ldr	r3, [pc, #196]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	492e      	ldr	r1, [pc, #184]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002000:	4313      	orrs	r3, r2
 8002002:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d010      	beq.n	8002032 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800201c:	429a      	cmp	r2, r3
 800201e:	d208      	bcs.n	8002032 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4922      	ldr	r1, [pc, #136]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 800202e:	4313      	orrs	r3, r2
 8002030:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800204a:	429a      	cmp	r2, r3
 800204c:	d208      	bcs.n	8002060 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800204e:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4917      	ldr	r1, [pc, #92]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 800205c:	4313      	orrs	r3, r2
 800205e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002060:	f000 f834 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	4912      	ldr	r1, [pc, #72]	@ (80020bc <HAL_RCC_ClockConfig+0x35c>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	4a0d      	ldr	r2, [pc, #52]	@ (80020bc <HAL_RCC_ClockConfig+0x35c>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <HAL_RCC_ClockConfig+0x360>)
 8002096:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002098:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_RCC_ClockConfig+0x364>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800209e:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_RCC_ClockConfig+0x368>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fe60 	bl	8000d68 <HAL_InitTick>
 80020a8:	4603      	mov	r3, r0
 80020aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58024400 	.word	0x58024400
 80020bc:	0800541c 	.word	0x0800541c
 80020c0:	24000004 	.word	0x24000004
 80020c4:	24000000 	.word	0x24000000
 80020c8:	24000008 	.word	0x24000008

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d2:	4bb3      	ldr	r3, [pc, #716]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020da:	2b18      	cmp	r3, #24
 80020dc:	f200 8155 	bhi.w	800238a <HAL_RCC_GetSysClockFreq+0x2be>
 80020e0:	a201      	add	r2, pc, #4	@ (adr r2, 80020e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	0800214d 	.word	0x0800214d
 80020ec:	0800238b 	.word	0x0800238b
 80020f0:	0800238b 	.word	0x0800238b
 80020f4:	0800238b 	.word	0x0800238b
 80020f8:	0800238b 	.word	0x0800238b
 80020fc:	0800238b 	.word	0x0800238b
 8002100:	0800238b 	.word	0x0800238b
 8002104:	0800238b 	.word	0x0800238b
 8002108:	08002173 	.word	0x08002173
 800210c:	0800238b 	.word	0x0800238b
 8002110:	0800238b 	.word	0x0800238b
 8002114:	0800238b 	.word	0x0800238b
 8002118:	0800238b 	.word	0x0800238b
 800211c:	0800238b 	.word	0x0800238b
 8002120:	0800238b 	.word	0x0800238b
 8002124:	0800238b 	.word	0x0800238b
 8002128:	08002179 	.word	0x08002179
 800212c:	0800238b 	.word	0x0800238b
 8002130:	0800238b 	.word	0x0800238b
 8002134:	0800238b 	.word	0x0800238b
 8002138:	0800238b 	.word	0x0800238b
 800213c:	0800238b 	.word	0x0800238b
 8002140:	0800238b 	.word	0x0800238b
 8002144:	0800238b 	.word	0x0800238b
 8002148:	0800217f 	.word	0x0800217f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800214c:	4b94      	ldr	r3, [pc, #592]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d009      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002158:	4b91      	ldr	r3, [pc, #580]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	08db      	lsrs	r3, r3, #3
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	4a90      	ldr	r2, [pc, #576]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800216a:	e111      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800216c:	4b8d      	ldr	r3, [pc, #564]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800216e:	61bb      	str	r3, [r7, #24]
      break;
 8002170:	e10e      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002172:	4b8d      	ldr	r3, [pc, #564]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002174:	61bb      	str	r3, [r7, #24]
      break;
 8002176:	e10b      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002178:	4b8c      	ldr	r3, [pc, #560]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800217a:	61bb      	str	r3, [r7, #24]
      break;
 800217c:	e108      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800217e:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002188:	4b85      	ldr	r3, [pc, #532]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002192:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002194:	4b82      	ldr	r3, [pc, #520]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800219e:	4b80      	ldr	r3, [pc, #512]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a2:	08db      	lsrs	r3, r3, #3
 80021a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80e1 	beq.w	8002384 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	f000 8083 	beq.w	80022d0 <HAL_RCC_GetSysClockFreq+0x204>
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	f200 80a1 	bhi.w	8002314 <HAL_RCC_GetSysClockFreq+0x248>
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x114>
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d056      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x1c0>
 80021de:	e099      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021e0:	4b6f      	ldr	r3, [pc, #444]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d02d      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021ec:	4b6c      	ldr	r3, [pc, #432]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	4a6b      	ldr	r2, [pc, #428]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
 80021fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	ee07 3a90 	vmov	s15, r3
 800220e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002216:	4b62      	ldr	r3, [pc, #392]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002226:	ed97 6a02 	vldr	s12, [r7, #8]
 800222a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800222e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800223a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800223e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002242:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002246:	e087      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002252:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80023b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800225a:	4b51      	ldr	r3, [pc, #324]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800226a:	ed97 6a02 	vldr	s12, [r7, #8]
 800226e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800227a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800227e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002286:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800228a:	e065      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002296:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80023b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800229a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800229e:	4b40      	ldr	r3, [pc, #256]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80022b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ce:	e043      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80023bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80022de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022e2:	4b2f      	ldr	r3, [pc, #188]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800230a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002312:	e021      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80023b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002326:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002336:	ed97 6a02 	vldr	s12, [r7, #8]
 800233a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800233e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800234a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800234e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002352:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002356:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	0a5b      	lsrs	r3, r3, #9
 800235e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002362:	3301      	adds	r3, #1
 8002364:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002370:	edd7 6a07 	vldr	s13, [r7, #28]
 8002374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800237c:	ee17 3a90 	vmov	r3, s15
 8002380:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002382:	e005      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
      break;
 8002388:	e002      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800238a:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800238c:	61bb      	str	r3, [r7, #24]
      break;
 800238e:	bf00      	nop
  }

  return sysclockfreq;
 8002390:	69bb      	ldr	r3, [r7, #24]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	@ 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	58024400 	.word	0x58024400
 80023a4:	03d09000 	.word	0x03d09000
 80023a8:	003d0900 	.word	0x003d0900
 80023ac:	017d7840 	.word	0x017d7840
 80023b0:	46000000 	.word	0x46000000
 80023b4:	4c742400 	.word	0x4c742400
 80023b8:	4a742400 	.word	0x4a742400
 80023bc:	4bbebc20 	.word	0x4bbebc20

080023c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80023c6:	f7ff fe81 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 80023ca:	4602      	mov	r2, r0
 80023cc:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <HAL_RCC_GetHCLKFreq+0x50>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	490f      	ldr	r1, [pc, #60]	@ (8002414 <HAL_RCC_GetHCLKFreq+0x54>)
 80023d8:	5ccb      	ldrb	r3, [r1, r3]
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	fa22 f303 	lsr.w	r3, r2, r3
 80023e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <HAL_RCC_GetHCLKFreq+0x50>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	4a09      	ldr	r2, [pc, #36]	@ (8002414 <HAL_RCC_GetHCLKFreq+0x54>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	4a07      	ldr	r2, [pc, #28]	@ (8002418 <HAL_RCC_GetHCLKFreq+0x58>)
 80023fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023fe:	4a07      	ldr	r2, [pc, #28]	@ (800241c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <HAL_RCC_GetHCLKFreq+0x58>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	58024400 	.word	0x58024400
 8002414:	0800541c 	.word	0x0800541c
 8002418:	24000004 	.word	0x24000004
 800241c:	24000000 	.word	0x24000000

08002420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002424:	f7ff ffcc 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	4904      	ldr	r1, [pc, #16]	@ (8002448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	58024400 	.word	0x58024400
 8002448:	0800541c 	.word	0x0800541c

0800244c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002450:	f7ff ffb6 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4904      	ldr	r1, [pc, #16]	@ (8002474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}
 8002470:	58024400 	.word	0x58024400
 8002474:	0800541c 	.word	0x0800541c

08002478 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800247c:	b0ca      	sub	sp, #296	@ 0x128
 800247e:	af00      	add	r7, sp, #0
 8002480:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002484:	2300      	movs	r3, #0
 8002486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800248a:	2300      	movs	r3, #0
 800248c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800249c:	2500      	movs	r5, #0
 800249e:	ea54 0305 	orrs.w	r3, r4, r5
 80024a2:	d049      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80024a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80024ae:	d02f      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80024b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80024b4:	d828      	bhi.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024ba:	d01a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024c0:	d822      	bhi.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80024c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024ca:	d007      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024cc:	e01c      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ce:	4bb8      	ldr	r3, [pc, #736]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d2:	4ab7      	ldr	r2, [pc, #732]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024da:	e01a      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80024dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024e0:	3308      	adds	r3, #8
 80024e2:	2102      	movs	r1, #2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 fc8f 	bl	8003e08 <RCCEx_PLL2_Config>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024f0:	e00f      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80024f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024f6:	3328      	adds	r3, #40	@ 0x28
 80024f8:	2102      	movs	r1, #2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 fd36 	bl	8003f6c <RCCEx_PLL3_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002506:	e004      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800250e:	e000      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10a      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800251a:	4ba5      	ldr	r3, [pc, #660]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800251c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800251e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002526:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002528:	4aa1      	ldr	r2, [pc, #644]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800252a:	430b      	orrs	r3, r1
 800252c:	6513      	str	r3, [r2, #80]	@ 0x50
 800252e:	e003      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002544:	f04f 0900 	mov.w	r9, #0
 8002548:	ea58 0309 	orrs.w	r3, r8, r9
 800254c:	d047      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800254e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002554:	2b04      	cmp	r3, #4
 8002556:	d82a      	bhi.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002558:	a201      	add	r2, pc, #4	@ (adr r2, 8002560 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002575 	.word	0x08002575
 8002564:	08002583 	.word	0x08002583
 8002568:	08002599 	.word	0x08002599
 800256c:	080025b7 	.word	0x080025b7
 8002570:	080025b7 	.word	0x080025b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002574:	4b8e      	ldr	r3, [pc, #568]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002578:	4a8d      	ldr	r2, [pc, #564]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800257a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800257e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002580:	e01a      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002586:	3308      	adds	r3, #8
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f001 fc3c 	bl	8003e08 <RCCEx_PLL2_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002596:	e00f      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800259c:	3328      	adds	r3, #40	@ 0x28
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 fce3 	bl	8003f6c <RCCEx_PLL3_Config>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025ac:	e004      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80025b4:	e000      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80025b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10a      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025c0:	4b7b      	ldr	r3, [pc, #492]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025c4:	f023 0107 	bic.w	r1, r3, #7
 80025c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	4a78      	ldr	r2, [pc, #480]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025d0:	430b      	orrs	r3, r1
 80025d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80025d4:	e003      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80025de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80025ea:	f04f 0b00 	mov.w	fp, #0
 80025ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80025f2:	d04c      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80025f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025fe:	d030      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002604:	d829      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002606:	2bc0      	cmp	r3, #192	@ 0xc0
 8002608:	d02d      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800260a:	2bc0      	cmp	r3, #192	@ 0xc0
 800260c:	d825      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800260e:	2b80      	cmp	r3, #128	@ 0x80
 8002610:	d018      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002612:	2b80      	cmp	r3, #128	@ 0x80
 8002614:	d821      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800261a:	2b40      	cmp	r3, #64	@ 0x40
 800261c:	d007      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800261e:	e01c      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002620:	4b63      	ldr	r3, [pc, #396]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002624:	4a62      	ldr	r2, [pc, #392]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800262a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800262c:	e01c      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800262e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002632:	3308      	adds	r3, #8
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f001 fbe6 	bl	8003e08 <RCCEx_PLL2_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002642:	e011      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002648:	3328      	adds	r3, #40	@ 0x28
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f001 fc8d 	bl	8003f6c <RCCEx_PLL3_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002658:	e006      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002660:	e002      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002670:	4b4f      	ldr	r3, [pc, #316]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002674:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	4a4c      	ldr	r2, [pc, #304]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002680:	430b      	orrs	r3, r1
 8002682:	6513      	str	r3, [r2, #80]	@ 0x50
 8002684:	e003      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800268a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800268e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800269a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80026a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80026a8:	460b      	mov	r3, r1
 80026aa:	4313      	orrs	r3, r2
 80026ac:	d053      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80026ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80026b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026ba:	d035      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80026bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026c0:	d82e      	bhi.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80026c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80026c6:	d031      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80026c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80026cc:	d828      	bhi.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80026ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026d2:	d01a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80026d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026d8:	d822      	bhi.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80026de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026e2:	d007      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80026e4:	e01c      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e6:	4b32      	ldr	r3, [pc, #200]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ea:	4a31      	ldr	r2, [pc, #196]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026f2:	e01c      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026f8:	3308      	adds	r3, #8
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 fb83 	bl	8003e08 <RCCEx_PLL2_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002708:	e011      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800270a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800270e:	3328      	adds	r3, #40	@ 0x28
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f001 fc2a 	bl	8003f6c <RCCEx_PLL3_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800271e:	e006      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002726:	e002      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002728:	bf00      	nop
 800272a:	e000      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800272c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800272e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002736:	4b1e      	ldr	r3, [pc, #120]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800273e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002742:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002746:	4a1a      	ldr	r2, [pc, #104]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002748:	430b      	orrs	r3, r1
 800274a:	6593      	str	r3, [r2, #88]	@ 0x58
 800274c:	e003      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002762:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800276c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002770:	460b      	mov	r3, r1
 8002772:	4313      	orrs	r3, r2
 8002774:	d056      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800277a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800277e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002782:	d038      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002784:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002788:	d831      	bhi.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800278a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800278e:	d034      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002790:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002794:	d82b      	bhi.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002796:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800279a:	d01d      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800279c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027a0:	d825      	bhi.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d006      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80027a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80027ac:	e01f      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027ae:	bf00      	nop
 80027b0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027b4:	4ba2      	ldr	r3, [pc, #648]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	4aa1      	ldr	r2, [pc, #644]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027c0:	e01c      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027c6:	3308      	adds	r3, #8
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f001 fb1c 	bl	8003e08 <RCCEx_PLL2_Config>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80027d6:	e011      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027dc:	3328      	adds	r3, #40	@ 0x28
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 fbc3 	bl	8003f6c <RCCEx_PLL3_Config>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027ec:	e006      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027f4:	e002      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80027f6:	bf00      	nop
 80027f8:	e000      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80027fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002804:	4b8e      	ldr	r3, [pc, #568]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800280c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002810:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002814:	4a8a      	ldr	r2, [pc, #552]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002816:	430b      	orrs	r3, r1
 8002818:	6593      	str	r3, [r2, #88]	@ 0x58
 800281a:	e003      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800281c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002830:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800283a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800283e:	460b      	mov	r3, r1
 8002840:	4313      	orrs	r3, r2
 8002842:	d03a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284a:	2b30      	cmp	r3, #48	@ 0x30
 800284c:	d01f      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800284e:	2b30      	cmp	r3, #48	@ 0x30
 8002850:	d819      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002852:	2b20      	cmp	r3, #32
 8002854:	d00c      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002856:	2b20      	cmp	r3, #32
 8002858:	d815      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800285a:	2b00      	cmp	r3, #0
 800285c:	d019      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800285e:	2b10      	cmp	r3, #16
 8002860:	d111      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002862:	4b77      	ldr	r3, [pc, #476]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002866:	4a76      	ldr	r2, [pc, #472]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800286c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800286e:	e011      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002874:	3308      	adds	r3, #8
 8002876:	2102      	movs	r1, #2
 8002878:	4618      	mov	r0, r3
 800287a:	f001 fac5 	bl	8003e08 <RCCEx_PLL2_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002884:	e006      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800288c:	e002      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800288e:	bf00      	nop
 8002890:	e000      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800289c:	4b68      	ldr	r3, [pc, #416]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800289e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80028a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	4a65      	ldr	r2, [pc, #404]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028ac:	430b      	orrs	r3, r1
 80028ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028b0:	e003      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80028c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80028d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4313      	orrs	r3, r2
 80028d8:	d051      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80028da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028e4:	d035      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80028e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028ea:	d82e      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80028ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80028f0:	d031      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80028f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80028f6:	d828      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80028f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028fc:	d01a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80028fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002902:	d822      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800290c:	d007      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800290e:	e01c      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002910:	4b4b      	ldr	r3, [pc, #300]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002914:	4a4a      	ldr	r2, [pc, #296]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800291a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800291c:	e01c      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800291e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002922:	3308      	adds	r3, #8
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f001 fa6e 	bl	8003e08 <RCCEx_PLL2_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002932:	e011      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002938:	3328      	adds	r3, #40	@ 0x28
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f001 fb15 	bl	8003f6c <RCCEx_PLL3_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002948:	e006      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002950:	e002      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002960:	4b37      	ldr	r3, [pc, #220]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002964:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800296c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296e:	4a34      	ldr	r2, [pc, #208]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002970:	430b      	orrs	r3, r1
 8002972:	6513      	str	r3, [r2, #80]	@ 0x50
 8002974:	e003      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800297a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800297e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800298a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002994:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002998:	460b      	mov	r3, r1
 800299a:	4313      	orrs	r3, r2
 800299c:	d056      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800299e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029a8:	d033      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80029aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ae:	d82c      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029b4:	d02f      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80029b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029ba:	d826      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029c0:	d02b      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80029c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029c6:	d820      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029cc:	d012      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80029ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029d2:	d81a      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d022      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029dc:	d115      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029e2:	3308      	adds	r3, #8
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f001 fa0e 	bl	8003e08 <RCCEx_PLL2_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80029f2:	e015      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f8:	3328      	adds	r3, #40	@ 0x28
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 fab5 	bl	8003f6c <RCCEx_PLL3_Config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a08:	e00a      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a10:	e006      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a12:	bf00      	nop
 8002a14:	e004      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a16:	bf00      	nop
 8002a18:	e002      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10d      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a36:	4a02      	ldr	r2, [pc, #8]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a3c:	e006      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002a3e:	bf00      	nop
 8002a40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002a58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a62:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	d055      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a78:	d033      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a7e:	d82c      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a84:	d02f      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8a:	d826      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002a90:	d02b      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002a92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002a96:	d820      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a9c:	d012      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002aa2:	d81a      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d022      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002aa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aac:	d115      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 f9a6 	bl	8003e08 <RCCEx_PLL2_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ac2:	e015      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac8:	3328      	adds	r3, #40	@ 0x28
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f001 fa4d 	bl	8003f6c <RCCEx_PLL3_Config>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ae0:	e006      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ae2:	bf00      	nop
 8002ae4:	e004      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ae6:	bf00      	nop
 8002ae8:	e002      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002aea:	bf00      	nop
 8002aec:	e000      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002af8:	4ba3      	ldr	r3, [pc, #652]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b08:	4a9f      	ldr	r2, [pc, #636]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b0e:	e003      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002b24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002b2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b32:	460b      	mov	r3, r1
 8002b34:	4313      	orrs	r3, r2
 8002b36:	d037      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b42:	d00e      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b48:	d816      	bhi.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d018      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002b4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b52:	d111      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b54:	4b8c      	ldr	r3, [pc, #560]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	4a8b      	ldr	r2, [pc, #556]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b60:	e00f      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b66:	3308      	adds	r3, #8
 8002b68:	2101      	movs	r1, #1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 f94c 	bl	8003e08 <RCCEx_PLL2_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b76:	e004      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b7e:	e000      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b98:	4a7b      	ldr	r2, [pc, #492]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b9e:	e003      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002bbe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	d039      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d81c      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002c15 	.word	0x08002c15
 8002bdc:	08002be9 	.word	0x08002be9
 8002be0:	08002bf7 	.word	0x08002bf7
 8002be4:	08002c15 	.word	0x08002c15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002be8:	4b67      	ldr	r3, [pc, #412]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bec:	4a66      	ldr	r2, [pc, #408]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002bf4:	e00f      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bfa:	3308      	adds	r3, #8
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 f902 	bl	8003e08 <RCCEx_PLL2_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c0a:	e004      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c12:	e000      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10a      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c1e:	4b5a      	ldr	r3, [pc, #360]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c22:	f023 0103 	bic.w	r1, r3, #3
 8002c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c2c:	4a56      	ldr	r2, [pc, #344]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c2e:	430b      	orrs	r3, r1
 8002c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c32:	e003      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002c48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002c56:	460b      	mov	r3, r1
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f000 809f 	beq.w	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a4a      	ldr	r2, [pc, #296]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c6a:	f7fe f8c7 	bl	8000dfc <HAL_GetTick>
 8002c6e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c72:	e00b      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c74:	f7fe f8c2 	bl	8000dfc <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	@ 0x64
 8002c82:	d903      	bls.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c8a:	e005      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ed      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d179      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ca0:	4b39      	ldr	r3, [pc, #228]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ca2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002cac:	4053      	eors	r3, r2
 8002cae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d015      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cb6:	4b34      	ldr	r3, [pc, #208]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cbe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc2:	4b31      	ldr	r3, [pc, #196]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	4a30      	ldr	r2, [pc, #192]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ccc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cce:	4b2e      	ldr	r3, [pc, #184]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cd8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002cda:	4a2b      	ldr	r2, [pc, #172]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ce0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cee:	d118      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe f884 	bl	8000dfc <HAL_GetTick>
 8002cf4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf8:	e00d      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe f87f 	bl	8000dfc <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d04:	1ad2      	subs	r2, r2, r3
 8002d06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d903      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002d14:	e005      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d16:	4b1c      	ldr	r3, [pc, #112]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0eb      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d129      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d3a:	d10e      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002d3c:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d4c:	091a      	lsrs	r2, r3, #4
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	4a0d      	ldr	r2, [pc, #52]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d54:	430b      	orrs	r3, r1
 8002d56:	6113      	str	r3, [r2, #16]
 8002d58:	e005      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d64:	6113      	str	r3, [r2, #16]
 8002d66:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d68:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d76:	4a04      	ldr	r2, [pc, #16]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d7c:	e00e      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002d86:	e009      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002d88:	58024400 	.word	0x58024400
 8002d8c:	58024800 	.word	0x58024800
 8002d90:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f002 0301 	and.w	r3, r2, #1
 8002da8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002db2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f000 8089 	beq.w	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dc4:	2b28      	cmp	r3, #40	@ 0x28
 8002dc6:	d86b      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dce:	bf00      	nop
 8002dd0:	08002ea9 	.word	0x08002ea9
 8002dd4:	08002ea1 	.word	0x08002ea1
 8002dd8:	08002ea1 	.word	0x08002ea1
 8002ddc:	08002ea1 	.word	0x08002ea1
 8002de0:	08002ea1 	.word	0x08002ea1
 8002de4:	08002ea1 	.word	0x08002ea1
 8002de8:	08002ea1 	.word	0x08002ea1
 8002dec:	08002ea1 	.word	0x08002ea1
 8002df0:	08002e75 	.word	0x08002e75
 8002df4:	08002ea1 	.word	0x08002ea1
 8002df8:	08002ea1 	.word	0x08002ea1
 8002dfc:	08002ea1 	.word	0x08002ea1
 8002e00:	08002ea1 	.word	0x08002ea1
 8002e04:	08002ea1 	.word	0x08002ea1
 8002e08:	08002ea1 	.word	0x08002ea1
 8002e0c:	08002ea1 	.word	0x08002ea1
 8002e10:	08002e8b 	.word	0x08002e8b
 8002e14:	08002ea1 	.word	0x08002ea1
 8002e18:	08002ea1 	.word	0x08002ea1
 8002e1c:	08002ea1 	.word	0x08002ea1
 8002e20:	08002ea1 	.word	0x08002ea1
 8002e24:	08002ea1 	.word	0x08002ea1
 8002e28:	08002ea1 	.word	0x08002ea1
 8002e2c:	08002ea1 	.word	0x08002ea1
 8002e30:	08002ea9 	.word	0x08002ea9
 8002e34:	08002ea1 	.word	0x08002ea1
 8002e38:	08002ea1 	.word	0x08002ea1
 8002e3c:	08002ea1 	.word	0x08002ea1
 8002e40:	08002ea1 	.word	0x08002ea1
 8002e44:	08002ea1 	.word	0x08002ea1
 8002e48:	08002ea1 	.word	0x08002ea1
 8002e4c:	08002ea1 	.word	0x08002ea1
 8002e50:	08002ea9 	.word	0x08002ea9
 8002e54:	08002ea1 	.word	0x08002ea1
 8002e58:	08002ea1 	.word	0x08002ea1
 8002e5c:	08002ea1 	.word	0x08002ea1
 8002e60:	08002ea1 	.word	0x08002ea1
 8002e64:	08002ea1 	.word	0x08002ea1
 8002e68:	08002ea1 	.word	0x08002ea1
 8002e6c:	08002ea1 	.word	0x08002ea1
 8002e70:	08002ea9 	.word	0x08002ea9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e78:	3308      	adds	r3, #8
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 ffc3 	bl	8003e08 <RCCEx_PLL2_Config>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e88:	e00f      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8e:	3328      	adds	r3, #40	@ 0x28
 8002e90:	2101      	movs	r1, #1
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 f86a 	bl	8003f6c <RCCEx_PLL3_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e9e:	e004      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ea6:	e000      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002eb2:	4bbf      	ldr	r3, [pc, #764]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ebe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ec0:	4abb      	ldr	r2, [pc, #748]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	6553      	str	r3, [r2, #84]	@ 0x54
 8002ec6:	e003      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ecc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed8:	f002 0302 	and.w	r3, r2, #2
 8002edc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002ee6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002eea:	460b      	mov	r3, r1
 8002eec:	4313      	orrs	r3, r2
 8002eee:	d041      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d824      	bhi.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002efa:	a201      	add	r2, pc, #4	@ (adr r2, 8002f00 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f4d 	.word	0x08002f4d
 8002f04:	08002f19 	.word	0x08002f19
 8002f08:	08002f2f 	.word	0x08002f2f
 8002f0c:	08002f4d 	.word	0x08002f4d
 8002f10:	08002f4d 	.word	0x08002f4d
 8002f14:	08002f4d 	.word	0x08002f4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	2101      	movs	r1, #1
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 ff71 	bl	8003e08 <RCCEx_PLL2_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f2c:	e00f      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f32:	3328      	adds	r3, #40	@ 0x28
 8002f34:	2101      	movs	r1, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f001 f818 	bl	8003f6c <RCCEx_PLL3_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f42:	e004      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f4a:	e000      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f56:	4b96      	ldr	r3, [pc, #600]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5a:	f023 0107 	bic.w	r1, r3, #7
 8002f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f64:	4a92      	ldr	r2, [pc, #584]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f66:	430b      	orrs	r3, r1
 8002f68:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f6a:	e003      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	f002 0304 	and.w	r3, r2, #4
 8002f80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f84:	2300      	movs	r3, #0
 8002f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4313      	orrs	r3, r2
 8002f92:	d044      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f9c:	2b05      	cmp	r3, #5
 8002f9e:	d825      	bhi.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa6:	bf00      	nop
 8002fa8:	08002ff5 	.word	0x08002ff5
 8002fac:	08002fc1 	.word	0x08002fc1
 8002fb0:	08002fd7 	.word	0x08002fd7
 8002fb4:	08002ff5 	.word	0x08002ff5
 8002fb8:	08002ff5 	.word	0x08002ff5
 8002fbc:	08002ff5 	.word	0x08002ff5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 ff1d 	bl	8003e08 <RCCEx_PLL2_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fd4:	e00f      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fda:	3328      	adds	r3, #40	@ 0x28
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 ffc4 	bl	8003f6c <RCCEx_PLL3_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fea:	e004      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10b      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ffe:	4b6c      	ldr	r3, [pc, #432]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003002:	f023 0107 	bic.w	r1, r3, #7
 8003006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800300e:	4a68      	ldr	r2, [pc, #416]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003010:	430b      	orrs	r3, r1
 8003012:	6593      	str	r3, [r2, #88]	@ 0x58
 8003014:	e003      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800301a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800301e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	f002 0320 	and.w	r3, r2, #32
 800302a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003038:	460b      	mov	r3, r1
 800303a:	4313      	orrs	r3, r2
 800303c:	d055      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800303e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003046:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800304a:	d033      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800304c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003050:	d82c      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003056:	d02f      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800305c:	d826      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800305e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003062:	d02b      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003064:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003068:	d820      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800306a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800306e:	d012      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003074:	d81a      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d022      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800307a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800307e:	d115      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003084:	3308      	adds	r3, #8
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f000 febd 	bl	8003e08 <RCCEx_PLL2_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003094:	e015      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309a:	3328      	adds	r3, #40	@ 0x28
 800309c:	2102      	movs	r1, #2
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 ff64 	bl	8003f6c <RCCEx_PLL3_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030aa:	e00a      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030b2:	e006      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80030b4:	bf00      	nop
 80030b6:	e004      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80030b8:	bf00      	nop
 80030ba:	e002      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80030bc:	bf00      	nop
 80030be:	e000      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80030c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ca:	4b39      	ldr	r3, [pc, #228]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80030d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030da:	4a35      	ldr	r2, [pc, #212]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030dc:	430b      	orrs	r3, r1
 80030de:	6553      	str	r3, [r2, #84]	@ 0x54
 80030e0:	e003      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80030f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003100:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003104:	460b      	mov	r3, r1
 8003106:	4313      	orrs	r3, r2
 8003108:	d058      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800310a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003112:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003116:	d033      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003118:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800311c:	d82c      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003122:	d02f      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003128:	d826      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800312a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800312e:	d02b      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003130:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003134:	d820      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003136:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800313a:	d012      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800313c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003140:	d81a      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d022      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800314a:	d115      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800314c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003150:	3308      	adds	r3, #8
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fe57 	bl	8003e08 <RCCEx_PLL2_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003160:	e015      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003166:	3328      	adds	r3, #40	@ 0x28
 8003168:	2102      	movs	r1, #2
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fefe 	bl	8003f6c <RCCEx_PLL3_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003176:	e00a      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800317e:	e006      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003180:	bf00      	nop
 8003182:	e004      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003184:	bf00      	nop
 8003186:	e002      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003188:	bf00      	nop
 800318a:	e000      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800318c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800318e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10e      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031a6:	4a02      	ldr	r2, [pc, #8]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ac:	e006      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80031ae:	bf00      	nop
 80031b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80031c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80031d6:	460b      	mov	r3, r1
 80031d8:	4313      	orrs	r3, r2
 80031da:	d055      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80031dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80031e8:	d033      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80031ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80031ee:	d82c      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80031f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f4:	d02f      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80031f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031fa:	d826      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80031fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003200:	d02b      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003202:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003206:	d820      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800320c:	d012      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800320e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003212:	d81a      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d022      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321c:	d115      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800321e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003222:	3308      	adds	r3, #8
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fdee 	bl	8003e08 <RCCEx_PLL2_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003232:	e015      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003238:	3328      	adds	r3, #40	@ 0x28
 800323a:	2102      	movs	r1, #2
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fe95 	bl	8003f6c <RCCEx_PLL3_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003248:	e00a      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003250:	e006      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003252:	bf00      	nop
 8003254:	e004      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003256:	bf00      	nop
 8003258:	e002      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800325a:	bf00      	nop
 800325c:	e000      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800325e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003268:	4ba1      	ldr	r3, [pc, #644]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003274:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003278:	4a9d      	ldr	r2, [pc, #628]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800327a:	430b      	orrs	r3, r1
 800327c:	6593      	str	r3, [r2, #88]	@ 0x58
 800327e:	e003      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f002 0308 	and.w	r3, r2, #8
 8003294:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003298:	2300      	movs	r3, #0
 800329a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800329e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80032a2:	460b      	mov	r3, r1
 80032a4:	4313      	orrs	r3, r2
 80032a6:	d01e      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80032a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ba:	3328      	adds	r3, #40	@ 0x28
 80032bc:	2102      	movs	r1, #2
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fe54 	bl	8003f6c <RCCEx_PLL3_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032d0:	4b87      	ldr	r3, [pc, #540]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032e0:	4a83      	ldr	r2, [pc, #524]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032e2:	430b      	orrs	r3, r1
 80032e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	f002 0310 	and.w	r3, r2, #16
 80032f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032f6:	2300      	movs	r3, #0
 80032f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80032fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003300:	460b      	mov	r3, r1
 8003302:	4313      	orrs	r3, r2
 8003304:	d01e      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800330e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003312:	d10c      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003318:	3328      	adds	r3, #40	@ 0x28
 800331a:	2102      	movs	r1, #2
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fe25 	bl	8003f6c <RCCEx_PLL3_Config>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800332e:	4b70      	ldr	r3, [pc, #448]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800333e:	4a6c      	ldr	r2, [pc, #432]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003340:	430b      	orrs	r3, r1
 8003342:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800335a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800335e:	460b      	mov	r3, r1
 8003360:	4313      	orrs	r3, r2
 8003362:	d03e      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003368:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800336c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003370:	d022      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003372:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003376:	d81b      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003380:	d00b      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003382:	e015      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003388:	3308      	adds	r3, #8
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fd3b 	bl	8003e08 <RCCEx_PLL2_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003398:	e00f      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800339a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339e:	3328      	adds	r3, #40	@ 0x28
 80033a0:	2102      	movs	r1, #2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fde2 	bl	8003f6c <RCCEx_PLL3_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033ae:	e004      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b6:	e000      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80033b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10b      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033c2:	4b4b      	ldr	r3, [pc, #300]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80033ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033d2:	4a47      	ldr	r2, [pc, #284]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d8:	e003      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80033ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033f0:	2300      	movs	r3, #0
 80033f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80033f8:	460b      	mov	r3, r1
 80033fa:	4313      	orrs	r3, r2
 80033fc:	d03b      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003406:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800340a:	d01f      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800340c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003410:	d818      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003416:	d003      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003418:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800341c:	d007      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800341e:	e011      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003420:	4b33      	ldr	r3, [pc, #204]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	4a32      	ldr	r2, [pc, #200]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800342a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800342c:	e00f      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003432:	3328      	adds	r3, #40	@ 0x28
 8003434:	2101      	movs	r1, #1
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fd98 	bl	8003f6c <RCCEx_PLL3_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003442:	e004      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800344a:	e000      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800344c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800344e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10b      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003456:	4b26      	ldr	r3, [pc, #152]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003466:	4a22      	ldr	r2, [pc, #136]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003468:	430b      	orrs	r3, r1
 800346a:	6553      	str	r3, [r2, #84]	@ 0x54
 800346c:	e003      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003472:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003482:	673b      	str	r3, [r7, #112]	@ 0x70
 8003484:	2300      	movs	r3, #0
 8003486:	677b      	str	r3, [r7, #116]	@ 0x74
 8003488:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800348c:	460b      	mov	r3, r1
 800348e:	4313      	orrs	r3, r2
 8003490:	d034      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800349c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a0:	d007      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80034a2:	e011      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a4:	4b12      	ldr	r3, [pc, #72]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a8:	4a11      	ldr	r2, [pc, #68]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034b0:	e00e      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b6:	3308      	adds	r3, #8
 80034b8:	2102      	movs	r1, #2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fca4 	bl	8003e08 <RCCEx_PLL2_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034c6:	e003      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10d      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034d8:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e6:	4a02      	ldr	r2, [pc, #8]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034e8:	430b      	orrs	r3, r1
 80034ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034ec:	e006      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80034ee:	bf00      	nop
 80034f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800350a:	2300      	movs	r3, #0
 800350c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800350e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003512:	460b      	mov	r3, r1
 8003514:	4313      	orrs	r3, r2
 8003516:	d00c      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351c:	3328      	adds	r3, #40	@ 0x28
 800351e:	2102      	movs	r1, #2
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fd23 	bl	8003f6c <RCCEx_PLL3_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800353e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003540:	2300      	movs	r3, #0
 8003542:	667b      	str	r3, [r7, #100]	@ 0x64
 8003544:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003548:	460b      	mov	r3, r1
 800354a:	4313      	orrs	r3, r2
 800354c:	d038      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003556:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800355a:	d018      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800355c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003560:	d811      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003566:	d014      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800356c:	d80b      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d011      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003576:	d106      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003578:	4bc3      	ldr	r3, [pc, #780]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	4ac2      	ldr	r2, [pc, #776]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800357e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003584:	e008      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800358c:	e004      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10b      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035a0:	4bb9      	ldr	r3, [pc, #740]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035b0:	4ab5      	ldr	r2, [pc, #724]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80035b6:	e003      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80035cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035ce:	2300      	movs	r3, #0
 80035d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80035d6:	460b      	mov	r3, r1
 80035d8:	4313      	orrs	r3, r2
 80035da:	d009      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035dc:	4baa      	ldr	r3, [pc, #680]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ea:	4aa7      	ldr	r2, [pc, #668]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80035f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80035fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80035fe:	2300      	movs	r3, #0
 8003600:	657b      	str	r3, [r7, #84]	@ 0x54
 8003602:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003606:	460b      	mov	r3, r1
 8003608:	4313      	orrs	r3, r2
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800360c:	4b9e      	ldr	r3, [pc, #632]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800361c:	4a9a      	ldr	r2, [pc, #616]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800361e:	430b      	orrs	r3, r1
 8003620:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800362e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003630:	2300      	movs	r3, #0
 8003632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003634:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003638:	460b      	mov	r3, r1
 800363a:	4313      	orrs	r3, r2
 800363c:	d009      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800363e:	4b92      	ldr	r3, [pc, #584]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003642:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800364c:	4a8e      	ldr	r2, [pc, #568]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800364e:	430b      	orrs	r3, r1
 8003650:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800365e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003660:	2300      	movs	r3, #0
 8003662:	647b      	str	r3, [r7, #68]	@ 0x44
 8003664:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003668:	460b      	mov	r3, r1
 800366a:	4313      	orrs	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800366e:	4b86      	ldr	r3, [pc, #536]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	4a85      	ldr	r2, [pc, #532]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003674:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003678:	6113      	str	r3, [r2, #16]
 800367a:	4b83      	ldr	r3, [pc, #524]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800367c:	6919      	ldr	r1, [r3, #16]
 800367e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003682:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003686:	4a80      	ldr	r2, [pc, #512]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003688:	430b      	orrs	r3, r1
 800368a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003698:	63bb      	str	r3, [r7, #56]	@ 0x38
 800369a:	2300      	movs	r3, #0
 800369c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800369e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80036a2:	460b      	mov	r3, r1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	d009      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80036a8:	4b77      	ldr	r3, [pc, #476]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80036b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b6:	4a74      	ldr	r2, [pc, #464]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036b8:	430b      	orrs	r3, r1
 80036ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80036c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ca:	2300      	movs	r3, #0
 80036cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80036d2:	460b      	mov	r3, r1
 80036d4:	4313      	orrs	r3, r2
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036dc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036e8:	4a67      	ldr	r2, [pc, #412]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036ea:	430b      	orrs	r3, r1
 80036ec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	2100      	movs	r1, #0
 80036f8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003700:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003704:	460b      	mov	r3, r1
 8003706:	4313      	orrs	r3, r2
 8003708:	d011      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370e:	3308      	adds	r3, #8
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fb78 	bl	8003e08 <RCCEx_PLL2_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800371e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	2100      	movs	r1, #0
 8003738:	6239      	str	r1, [r7, #32]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003740:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003744:	460b      	mov	r3, r1
 8003746:	4313      	orrs	r3, r2
 8003748:	d011      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374e:	3308      	adds	r3, #8
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fb58 	bl	8003e08 <RCCEx_PLL2_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800375e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	2100      	movs	r1, #0
 8003778:	61b9      	str	r1, [r7, #24]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003784:	460b      	mov	r3, r1
 8003786:	4313      	orrs	r3, r2
 8003788:	d011      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378e:	3308      	adds	r3, #8
 8003790:	2102      	movs	r1, #2
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fb38 	bl	8003e08 <RCCEx_PLL2_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800379e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	2100      	movs	r1, #0
 80037b8:	6139      	str	r1, [r7, #16]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80037c4:	460b      	mov	r3, r1
 80037c6:	4313      	orrs	r3, r2
 80037c8:	d011      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ce:	3328      	adds	r3, #40	@ 0x28
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fbca 	bl	8003f6c <RCCEx_PLL3_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80037de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	2100      	movs	r1, #0
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003804:	460b      	mov	r3, r1
 8003806:	4313      	orrs	r3, r2
 8003808:	d011      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800380a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380e:	3328      	adds	r3, #40	@ 0x28
 8003810:	2101      	movs	r1, #1
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fbaa 	bl	8003f6c <RCCEx_PLL3_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800381e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800382a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800382e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	2100      	movs	r1, #0
 8003838:	6039      	str	r1, [r7, #0]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	607b      	str	r3, [r7, #4]
 8003840:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003844:	460b      	mov	r3, r1
 8003846:	4313      	orrs	r3, r2
 8003848:	d011      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	3328      	adds	r3, #40	@ 0x28
 8003850:	2102      	movs	r1, #2
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fb8a 	bl	8003f6c <RCCEx_PLL3_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800385e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800386a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800386e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	e000      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
}
 800387c:	4618      	mov	r0, r3
 800387e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003882:	46bd      	mov	sp, r7
 8003884:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003888:	58024400 	.word	0x58024400

0800388c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003890:	f7fe fd96 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4904      	ldr	r1, [pc, #16]	@ (80038b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	58024400 	.word	0x58024400
 80038b4:	0800541c 	.word	0x0800541c

080038b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	@ 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038c0:	4ba1      	ldr	r3, [pc, #644]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80038ca:	4b9f      	ldr	r3, [pc, #636]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ce:	0b1b      	lsrs	r3, r3, #12
 80038d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80038d6:	4b9c      	ldr	r3, [pc, #624]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80038e2:	4b99      	ldr	r3, [pc, #612]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e6:	08db      	lsrs	r3, r3, #3
 80038e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8111 	beq.w	8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	2b02      	cmp	r3, #2
 800390a:	f000 8083 	beq.w	8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b02      	cmp	r3, #2
 8003912:	f200 80a1 	bhi.w	8003a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d056      	beq.n	80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003922:	e099      	b.n	8003a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003924:	4b88      	ldr	r3, [pc, #544]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d02d      	beq.n	800398c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003930:	4b85      	ldr	r3, [pc, #532]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	08db      	lsrs	r3, r3, #3
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	4a84      	ldr	r2, [pc, #528]	@ (8003b4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
 8003940:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	ee07 3a90 	vmov	s15, r3
 8003948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800395a:	4b7b      	ldr	r3, [pc, #492]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800395c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800396a:	ed97 6a03 	vldr	s12, [r7, #12]
 800396e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800397a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800397e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003986:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800398a:	e087      	b.n	8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003996:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003b54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800399a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800399e:	4b6a      	ldr	r3, [pc, #424]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80039b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ce:	e065      	b.n	8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039e2:	4b59      	ldr	r3, [pc, #356]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ea:	ee07 3a90 	vmov	s15, r3
 80039ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a12:	e043      	b.n	8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003b5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a26:	4b48      	ldr	r3, [pc, #288]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a56:	e021      	b.n	8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a6a:	4b37      	ldr	r3, [pc, #220]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa0:	0a5b      	lsrs	r3, r3, #9
 8003aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ac2:	ee17 2a90 	vmov	r2, s15
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003aca:	4b1f      	ldr	r3, [pc, #124]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ace:	0c1b      	lsrs	r3, r3, #16
 8003ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003adc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ae0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003af0:	ee17 2a90 	vmov	r2, s15
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003af8:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afc:	0e1b      	lsrs	r3, r3, #24
 8003afe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b1e:	ee17 2a90 	vmov	r2, s15
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b26:	e008      	b.n	8003b3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
}
 8003b3a:	bf00      	nop
 8003b3c:	3724      	adds	r7, #36	@ 0x24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	58024400 	.word	0x58024400
 8003b4c:	03d09000 	.word	0x03d09000
 8003b50:	46000000 	.word	0x46000000
 8003b54:	4c742400 	.word	0x4c742400
 8003b58:	4a742400 	.word	0x4a742400
 8003b5c:	4bbebc20 	.word	0x4bbebc20

08003b60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b089      	sub	sp, #36	@ 0x24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b68:	4ba1      	ldr	r3, [pc, #644]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003b72:	4b9f      	ldr	r3, [pc, #636]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b76:	0d1b      	lsrs	r3, r3, #20
 8003b78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b7e:	4b9c      	ldr	r3, [pc, #624]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003b8a:	4b99      	ldr	r3, [pc, #612]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8e:	08db      	lsrs	r3, r3, #3
 8003b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8111 	beq.w	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	f000 8083 	beq.w	8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	f200 80a1 	bhi.w	8003d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d056      	beq.n	8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003bca:	e099      	b.n	8003d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bcc:	4b88      	ldr	r3, [pc, #544]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d02d      	beq.n	8003c34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bd8:	4b85      	ldr	r3, [pc, #532]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	08db      	lsrs	r3, r3, #3
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	4a84      	ldr	r2, [pc, #528]	@ (8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
 8003be8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	ee07 3a90 	vmov	s15, r3
 8003bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c02:	4b7b      	ldr	r3, [pc, #492]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c32:	e087      	b.n	8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c46:	4b6a      	ldr	r3, [pc, #424]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c76:	e065      	b.n	8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8a:	4b59      	ldr	r3, [pc, #356]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cba:	e043      	b.n	8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003e04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cce:	4b48      	ldr	r3, [pc, #288]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ce2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cfe:	e021      	b.n	8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d12:	4b37      	ldr	r3, [pc, #220]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d44:	4b2a      	ldr	r3, [pc, #168]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	0a5b      	lsrs	r3, r3, #9
 8003d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d6a:	ee17 2a90 	vmov	r2, s15
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003d72:	4b1f      	ldr	r3, [pc, #124]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	0c1b      	lsrs	r3, r3, #16
 8003d78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d7c:	ee07 3a90 	vmov	s15, r3
 8003d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d98:	ee17 2a90 	vmov	r2, s15
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003da0:	4b13      	ldr	r3, [pc, #76]	@ (8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	0e1b      	lsrs	r3, r3, #24
 8003da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003db6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dba:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc6:	ee17 2a90 	vmov	r2, s15
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003dce:	e008      	b.n	8003de2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]
}
 8003de2:	bf00      	nop
 8003de4:	3724      	adds	r7, #36	@ 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	58024400 	.word	0x58024400
 8003df4:	03d09000 	.word	0x03d09000
 8003df8:	46000000 	.word	0x46000000
 8003dfc:	4c742400 	.word	0x4c742400
 8003e00:	4a742400 	.word	0x4a742400
 8003e04:	4bbebc20 	.word	0x4bbebc20

08003e08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e16:	4b53      	ldr	r3, [pc, #332]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d101      	bne.n	8003e26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e099      	b.n	8003f5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e26:	4b4f      	ldr	r3, [pc, #316]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a4e      	ldr	r2, [pc, #312]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e2c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e32:	f7fc ffe3 	bl	8000dfc <HAL_GetTick>
 8003e36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e38:	e008      	b.n	8003e4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e3a:	f7fc ffdf 	bl	8000dfc <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e086      	b.n	8003f5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e4c:	4b45      	ldr	r3, [pc, #276]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f0      	bne.n	8003e3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e58:	4b42      	ldr	r3, [pc, #264]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	031b      	lsls	r3, r3, #12
 8003e66:	493f      	ldr	r1, [pc, #252]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	025b      	lsls	r3, r3, #9
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	061b      	lsls	r3, r3, #24
 8003e98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e9c:	4931      	ldr	r1, [pc, #196]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ea2:	4b30      	ldr	r3, [pc, #192]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	492d      	ldr	r1, [pc, #180]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	f023 0220 	bic.w	r2, r3, #32
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	4928      	ldr	r1, [pc, #160]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ec6:	4b27      	ldr	r3, [pc, #156]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eca:	4a26      	ldr	r2, [pc, #152]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ecc:	f023 0310 	bic.w	r3, r3, #16
 8003ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ed2:	4b24      	ldr	r3, [pc, #144]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ed4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ed6:	4b24      	ldr	r3, [pc, #144]	@ (8003f68 <RCCEx_PLL2_Config+0x160>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	69d2      	ldr	r2, [r2, #28]
 8003ede:	00d2      	lsls	r2, r2, #3
 8003ee0:	4920      	ldr	r1, [pc, #128]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eea:	4a1e      	ldr	r2, [pc, #120]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003eec:	f043 0310 	orr.w	r3, r3, #16
 8003ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d106      	bne.n	8003f06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	4a19      	ldr	r2, [pc, #100]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003efe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f04:	e00f      	b.n	8003f26 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d106      	bne.n	8003f1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f0c:	4b15      	ldr	r3, [pc, #84]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f10:	4a14      	ldr	r2, [pc, #80]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f18:	e005      	b.n	8003f26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f1a:	4b12      	ldr	r3, [pc, #72]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	4a11      	ldr	r2, [pc, #68]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f26:	4b0f      	ldr	r3, [pc, #60]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f32:	f7fc ff63 	bl	8000dfc <HAL_GetTick>
 8003f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f38:	e008      	b.n	8003f4c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f3a:	f7fc ff5f 	bl	8000dfc <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e006      	b.n	8003f5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f4c:	4b05      	ldr	r3, [pc, #20]	@ (8003f64 <RCCEx_PLL2_Config+0x15c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	58024400 	.word	0x58024400
 8003f68:	ffff0007 	.word	0xffff0007

08003f6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f7a:	4b53      	ldr	r3, [pc, #332]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d101      	bne.n	8003f8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e099      	b.n	80040be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a4e      	ldr	r2, [pc, #312]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8003f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f96:	f7fc ff31 	bl	8000dfc <HAL_GetTick>
 8003f9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f9c:	e008      	b.n	8003fb0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f9e:	f7fc ff2d 	bl	8000dfc <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e086      	b.n	80040be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fb0:	4b45      	ldr	r3, [pc, #276]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f0      	bne.n	8003f9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fbc:	4b42      	ldr	r3, [pc, #264]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	051b      	lsls	r3, r3, #20
 8003fca:	493f      	ldr	r1, [pc, #252]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	025b      	lsls	r3, r3, #9
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	061b      	lsls	r3, r3, #24
 8003ffc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004000:	4931      	ldr	r1, [pc, #196]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004002:	4313      	orrs	r3, r2
 8004004:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004006:	4b30      	ldr	r3, [pc, #192]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	492d      	ldr	r1, [pc, #180]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004014:	4313      	orrs	r3, r2
 8004016:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004018:	4b2b      	ldr	r3, [pc, #172]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	4928      	ldr	r1, [pc, #160]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004026:	4313      	orrs	r3, r2
 8004028:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800402a:	4b27      	ldr	r3, [pc, #156]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 800402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402e:	4a26      	ldr	r2, [pc, #152]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004034:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004036:	4b24      	ldr	r3, [pc, #144]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004038:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800403a:	4b24      	ldr	r3, [pc, #144]	@ (80040cc <RCCEx_PLL3_Config+0x160>)
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	69d2      	ldr	r2, [r2, #28]
 8004042:	00d2      	lsls	r2, r2, #3
 8004044:	4920      	ldr	r1, [pc, #128]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004046:	4313      	orrs	r3, r2
 8004048:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800404a:	4b1f      	ldr	r3, [pc, #124]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 800404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404e:	4a1e      	ldr	r2, [pc, #120]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004054:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800405c:	4b1a      	ldr	r3, [pc, #104]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 800405e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004060:	4a19      	ldr	r2, [pc, #100]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004062:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004066:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004068:	e00f      	b.n	800408a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d106      	bne.n	800407e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004070:	4b15      	ldr	r3, [pc, #84]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	4a14      	ldr	r2, [pc, #80]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004076:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800407a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800407c:	e005      	b.n	800408a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800407e:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	4a11      	ldr	r2, [pc, #68]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004084:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004088:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800408a:	4b0f      	ldr	r3, [pc, #60]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a0e      	ldr	r2, [pc, #56]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 8004090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004096:	f7fc feb1 	bl	8000dfc <HAL_GetTick>
 800409a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800409c:	e008      	b.n	80040b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800409e:	f7fc fead 	bl	8000dfc <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e006      	b.n	80040be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040b0:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <RCCEx_PLL3_Config+0x15c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	58024400 	.word	0x58024400
 80040cc:	ffff0007 	.word	0xffff0007

080040d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e042      	b.n	8004168 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7fc fd35 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2224      	movs	r2, #36	@ 0x24
 80040fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fe1e 	bl	8004d5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f8b3 	bl	800428c <UART_SetConfig>
 8004126:	4603      	mov	r3, r0
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e01b      	b.n	8004168 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800413e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800414e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fe9d 	bl	8004ea0 <UART_CheckIdleState>
 8004166:	4603      	mov	r3, r0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	@ 0x28
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	2b20      	cmp	r3, #32
 8004188:	d17b      	bne.n	8004282 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_UART_Transmit+0x26>
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e074      	b.n	8004284 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2221      	movs	r2, #33	@ 0x21
 80041a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041aa:	f7fc fe27 	bl	8000dfc <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	88fa      	ldrh	r2, [r7, #6]
 80041bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c8:	d108      	bne.n	80041dc <HAL_UART_Transmit+0x6c>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e003      	b.n	80041e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041e4:	e030      	b.n	8004248 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2200      	movs	r2, #0
 80041ee:	2180      	movs	r1, #128	@ 0x80
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 feff 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e03d      	b.n	8004284 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800421c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	3302      	adds	r3, #2
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e007      	b.n	8004236 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	3301      	adds	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1c8      	bne.n	80041e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2200      	movs	r2, #0
 800425c:	2140      	movs	r1, #64	@ 0x40
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fec8 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e006      	b.n	8004284 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b092      	sub	sp, #72	@ 0x48
 8004292:	af00      	add	r7, sp, #0
 8004294:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4bbe      	ldr	r3, [pc, #760]	@ (80045b4 <UART_SetConfig+0x328>)
 80042bc:	4013      	ands	r3, r2
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4ab3      	ldr	r2, [pc, #716]	@ (80045b8 <UART_SetConfig+0x32c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042f4:	4313      	orrs	r3, r2
 80042f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	4baf      	ldr	r3, [pc, #700]	@ (80045bc <UART_SetConfig+0x330>)
 8004300:	4013      	ands	r3, r2
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004308:	430b      	orrs	r3, r1
 800430a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004312:	f023 010f 	bic.w	r1, r3, #15
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4aa6      	ldr	r2, [pc, #664]	@ (80045c0 <UART_SetConfig+0x334>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d177      	bne.n	800441c <UART_SetConfig+0x190>
 800432c:	4ba5      	ldr	r3, [pc, #660]	@ (80045c4 <UART_SetConfig+0x338>)
 800432e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004330:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004334:	2b28      	cmp	r3, #40	@ 0x28
 8004336:	d86d      	bhi.n	8004414 <UART_SetConfig+0x188>
 8004338:	a201      	add	r2, pc, #4	@ (adr r2, 8004340 <UART_SetConfig+0xb4>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	080043e5 	.word	0x080043e5
 8004344:	08004415 	.word	0x08004415
 8004348:	08004415 	.word	0x08004415
 800434c:	08004415 	.word	0x08004415
 8004350:	08004415 	.word	0x08004415
 8004354:	08004415 	.word	0x08004415
 8004358:	08004415 	.word	0x08004415
 800435c:	08004415 	.word	0x08004415
 8004360:	080043ed 	.word	0x080043ed
 8004364:	08004415 	.word	0x08004415
 8004368:	08004415 	.word	0x08004415
 800436c:	08004415 	.word	0x08004415
 8004370:	08004415 	.word	0x08004415
 8004374:	08004415 	.word	0x08004415
 8004378:	08004415 	.word	0x08004415
 800437c:	08004415 	.word	0x08004415
 8004380:	080043f5 	.word	0x080043f5
 8004384:	08004415 	.word	0x08004415
 8004388:	08004415 	.word	0x08004415
 800438c:	08004415 	.word	0x08004415
 8004390:	08004415 	.word	0x08004415
 8004394:	08004415 	.word	0x08004415
 8004398:	08004415 	.word	0x08004415
 800439c:	08004415 	.word	0x08004415
 80043a0:	080043fd 	.word	0x080043fd
 80043a4:	08004415 	.word	0x08004415
 80043a8:	08004415 	.word	0x08004415
 80043ac:	08004415 	.word	0x08004415
 80043b0:	08004415 	.word	0x08004415
 80043b4:	08004415 	.word	0x08004415
 80043b8:	08004415 	.word	0x08004415
 80043bc:	08004415 	.word	0x08004415
 80043c0:	08004405 	.word	0x08004405
 80043c4:	08004415 	.word	0x08004415
 80043c8:	08004415 	.word	0x08004415
 80043cc:	08004415 	.word	0x08004415
 80043d0:	08004415 	.word	0x08004415
 80043d4:	08004415 	.word	0x08004415
 80043d8:	08004415 	.word	0x08004415
 80043dc:	08004415 	.word	0x08004415
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ea:	e222      	b.n	8004832 <UART_SetConfig+0x5a6>
 80043ec:	2304      	movs	r3, #4
 80043ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043f2:	e21e      	b.n	8004832 <UART_SetConfig+0x5a6>
 80043f4:	2308      	movs	r3, #8
 80043f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043fa:	e21a      	b.n	8004832 <UART_SetConfig+0x5a6>
 80043fc:	2310      	movs	r3, #16
 80043fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004402:	e216      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004404:	2320      	movs	r3, #32
 8004406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800440a:	e212      	b.n	8004832 <UART_SetConfig+0x5a6>
 800440c:	2340      	movs	r3, #64	@ 0x40
 800440e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004412:	e20e      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004414:	2380      	movs	r3, #128	@ 0x80
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800441a:	e20a      	b.n	8004832 <UART_SetConfig+0x5a6>
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a69      	ldr	r2, [pc, #420]	@ (80045c8 <UART_SetConfig+0x33c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d130      	bne.n	8004488 <UART_SetConfig+0x1fc>
 8004426:	4b67      	ldr	r3, [pc, #412]	@ (80045c4 <UART_SetConfig+0x338>)
 8004428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	2b05      	cmp	r3, #5
 8004430:	d826      	bhi.n	8004480 <UART_SetConfig+0x1f4>
 8004432:	a201      	add	r2, pc, #4	@ (adr r2, 8004438 <UART_SetConfig+0x1ac>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	08004451 	.word	0x08004451
 800443c:	08004459 	.word	0x08004459
 8004440:	08004461 	.word	0x08004461
 8004444:	08004469 	.word	0x08004469
 8004448:	08004471 	.word	0x08004471
 800444c:	08004479 	.word	0x08004479
 8004450:	2300      	movs	r3, #0
 8004452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004456:	e1ec      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004458:	2304      	movs	r3, #4
 800445a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800445e:	e1e8      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004460:	2308      	movs	r3, #8
 8004462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004466:	e1e4      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004468:	2310      	movs	r3, #16
 800446a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800446e:	e1e0      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004470:	2320      	movs	r3, #32
 8004472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004476:	e1dc      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004478:	2340      	movs	r3, #64	@ 0x40
 800447a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800447e:	e1d8      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004480:	2380      	movs	r3, #128	@ 0x80
 8004482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004486:	e1d4      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a4f      	ldr	r2, [pc, #316]	@ (80045cc <UART_SetConfig+0x340>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d130      	bne.n	80044f4 <UART_SetConfig+0x268>
 8004492:	4b4c      	ldr	r3, [pc, #304]	@ (80045c4 <UART_SetConfig+0x338>)
 8004494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	2b05      	cmp	r3, #5
 800449c:	d826      	bhi.n	80044ec <UART_SetConfig+0x260>
 800449e:	a201      	add	r2, pc, #4	@ (adr r2, 80044a4 <UART_SetConfig+0x218>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044bd 	.word	0x080044bd
 80044a8:	080044c5 	.word	0x080044c5
 80044ac:	080044cd 	.word	0x080044cd
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	080044dd 	.word	0x080044dd
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	2300      	movs	r3, #0
 80044be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044c2:	e1b6      	b.n	8004832 <UART_SetConfig+0x5a6>
 80044c4:	2304      	movs	r3, #4
 80044c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ca:	e1b2      	b.n	8004832 <UART_SetConfig+0x5a6>
 80044cc:	2308      	movs	r3, #8
 80044ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044d2:	e1ae      	b.n	8004832 <UART_SetConfig+0x5a6>
 80044d4:	2310      	movs	r3, #16
 80044d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044da:	e1aa      	b.n	8004832 <UART_SetConfig+0x5a6>
 80044dc:	2320      	movs	r3, #32
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044e2:	e1a6      	b.n	8004832 <UART_SetConfig+0x5a6>
 80044e4:	2340      	movs	r3, #64	@ 0x40
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ea:	e1a2      	b.n	8004832 <UART_SetConfig+0x5a6>
 80044ec:	2380      	movs	r3, #128	@ 0x80
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044f2:	e19e      	b.n	8004832 <UART_SetConfig+0x5a6>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a35      	ldr	r2, [pc, #212]	@ (80045d0 <UART_SetConfig+0x344>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d130      	bne.n	8004560 <UART_SetConfig+0x2d4>
 80044fe:	4b31      	ldr	r3, [pc, #196]	@ (80045c4 <UART_SetConfig+0x338>)
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	2b05      	cmp	r3, #5
 8004508:	d826      	bhi.n	8004558 <UART_SetConfig+0x2cc>
 800450a:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <UART_SetConfig+0x284>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004529 	.word	0x08004529
 8004514:	08004531 	.word	0x08004531
 8004518:	08004539 	.word	0x08004539
 800451c:	08004541 	.word	0x08004541
 8004520:	08004549 	.word	0x08004549
 8004524:	08004551 	.word	0x08004551
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800452e:	e180      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004530:	2304      	movs	r3, #4
 8004532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004536:	e17c      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004538:	2308      	movs	r3, #8
 800453a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800453e:	e178      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004540:	2310      	movs	r3, #16
 8004542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004546:	e174      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004548:	2320      	movs	r3, #32
 800454a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800454e:	e170      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004550:	2340      	movs	r3, #64	@ 0x40
 8004552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004556:	e16c      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004558:	2380      	movs	r3, #128	@ 0x80
 800455a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800455e:	e168      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1b      	ldr	r2, [pc, #108]	@ (80045d4 <UART_SetConfig+0x348>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d142      	bne.n	80045f0 <UART_SetConfig+0x364>
 800456a:	4b16      	ldr	r3, [pc, #88]	@ (80045c4 <UART_SetConfig+0x338>)
 800456c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	2b05      	cmp	r3, #5
 8004574:	d838      	bhi.n	80045e8 <UART_SetConfig+0x35c>
 8004576:	a201      	add	r2, pc, #4	@ (adr r2, 800457c <UART_SetConfig+0x2f0>)
 8004578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457c:	08004595 	.word	0x08004595
 8004580:	0800459d 	.word	0x0800459d
 8004584:	080045a5 	.word	0x080045a5
 8004588:	080045ad 	.word	0x080045ad
 800458c:	080045d9 	.word	0x080045d9
 8004590:	080045e1 	.word	0x080045e1
 8004594:	2300      	movs	r3, #0
 8004596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800459a:	e14a      	b.n	8004832 <UART_SetConfig+0x5a6>
 800459c:	2304      	movs	r3, #4
 800459e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045a2:	e146      	b.n	8004832 <UART_SetConfig+0x5a6>
 80045a4:	2308      	movs	r3, #8
 80045a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045aa:	e142      	b.n	8004832 <UART_SetConfig+0x5a6>
 80045ac:	2310      	movs	r3, #16
 80045ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045b2:	e13e      	b.n	8004832 <UART_SetConfig+0x5a6>
 80045b4:	cfff69f3 	.word	0xcfff69f3
 80045b8:	58000c00 	.word	0x58000c00
 80045bc:	11fff4ff 	.word	0x11fff4ff
 80045c0:	40011000 	.word	0x40011000
 80045c4:	58024400 	.word	0x58024400
 80045c8:	40004400 	.word	0x40004400
 80045cc:	40004800 	.word	0x40004800
 80045d0:	40004c00 	.word	0x40004c00
 80045d4:	40005000 	.word	0x40005000
 80045d8:	2320      	movs	r3, #32
 80045da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045de:	e128      	b.n	8004832 <UART_SetConfig+0x5a6>
 80045e0:	2340      	movs	r3, #64	@ 0x40
 80045e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045e6:	e124      	b.n	8004832 <UART_SetConfig+0x5a6>
 80045e8:	2380      	movs	r3, #128	@ 0x80
 80045ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ee:	e120      	b.n	8004832 <UART_SetConfig+0x5a6>
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4acb      	ldr	r2, [pc, #812]	@ (8004924 <UART_SetConfig+0x698>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d176      	bne.n	80046e8 <UART_SetConfig+0x45c>
 80045fa:	4bcb      	ldr	r3, [pc, #812]	@ (8004928 <UART_SetConfig+0x69c>)
 80045fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004602:	2b28      	cmp	r3, #40	@ 0x28
 8004604:	d86c      	bhi.n	80046e0 <UART_SetConfig+0x454>
 8004606:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <UART_SetConfig+0x380>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	080046b1 	.word	0x080046b1
 8004610:	080046e1 	.word	0x080046e1
 8004614:	080046e1 	.word	0x080046e1
 8004618:	080046e1 	.word	0x080046e1
 800461c:	080046e1 	.word	0x080046e1
 8004620:	080046e1 	.word	0x080046e1
 8004624:	080046e1 	.word	0x080046e1
 8004628:	080046e1 	.word	0x080046e1
 800462c:	080046b9 	.word	0x080046b9
 8004630:	080046e1 	.word	0x080046e1
 8004634:	080046e1 	.word	0x080046e1
 8004638:	080046e1 	.word	0x080046e1
 800463c:	080046e1 	.word	0x080046e1
 8004640:	080046e1 	.word	0x080046e1
 8004644:	080046e1 	.word	0x080046e1
 8004648:	080046e1 	.word	0x080046e1
 800464c:	080046c1 	.word	0x080046c1
 8004650:	080046e1 	.word	0x080046e1
 8004654:	080046e1 	.word	0x080046e1
 8004658:	080046e1 	.word	0x080046e1
 800465c:	080046e1 	.word	0x080046e1
 8004660:	080046e1 	.word	0x080046e1
 8004664:	080046e1 	.word	0x080046e1
 8004668:	080046e1 	.word	0x080046e1
 800466c:	080046c9 	.word	0x080046c9
 8004670:	080046e1 	.word	0x080046e1
 8004674:	080046e1 	.word	0x080046e1
 8004678:	080046e1 	.word	0x080046e1
 800467c:	080046e1 	.word	0x080046e1
 8004680:	080046e1 	.word	0x080046e1
 8004684:	080046e1 	.word	0x080046e1
 8004688:	080046e1 	.word	0x080046e1
 800468c:	080046d1 	.word	0x080046d1
 8004690:	080046e1 	.word	0x080046e1
 8004694:	080046e1 	.word	0x080046e1
 8004698:	080046e1 	.word	0x080046e1
 800469c:	080046e1 	.word	0x080046e1
 80046a0:	080046e1 	.word	0x080046e1
 80046a4:	080046e1 	.word	0x080046e1
 80046a8:	080046e1 	.word	0x080046e1
 80046ac:	080046d9 	.word	0x080046d9
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b6:	e0bc      	b.n	8004832 <UART_SetConfig+0x5a6>
 80046b8:	2304      	movs	r3, #4
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046be:	e0b8      	b.n	8004832 <UART_SetConfig+0x5a6>
 80046c0:	2308      	movs	r3, #8
 80046c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046c6:	e0b4      	b.n	8004832 <UART_SetConfig+0x5a6>
 80046c8:	2310      	movs	r3, #16
 80046ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ce:	e0b0      	b.n	8004832 <UART_SetConfig+0x5a6>
 80046d0:	2320      	movs	r3, #32
 80046d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d6:	e0ac      	b.n	8004832 <UART_SetConfig+0x5a6>
 80046d8:	2340      	movs	r3, #64	@ 0x40
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046de:	e0a8      	b.n	8004832 <UART_SetConfig+0x5a6>
 80046e0:	2380      	movs	r3, #128	@ 0x80
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e6:	e0a4      	b.n	8004832 <UART_SetConfig+0x5a6>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a8f      	ldr	r2, [pc, #572]	@ (800492c <UART_SetConfig+0x6a0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d130      	bne.n	8004754 <UART_SetConfig+0x4c8>
 80046f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004928 <UART_SetConfig+0x69c>)
 80046f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	2b05      	cmp	r3, #5
 80046fc:	d826      	bhi.n	800474c <UART_SetConfig+0x4c0>
 80046fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <UART_SetConfig+0x478>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	0800471d 	.word	0x0800471d
 8004708:	08004725 	.word	0x08004725
 800470c:	0800472d 	.word	0x0800472d
 8004710:	08004735 	.word	0x08004735
 8004714:	0800473d 	.word	0x0800473d
 8004718:	08004745 	.word	0x08004745
 800471c:	2300      	movs	r3, #0
 800471e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004722:	e086      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004724:	2304      	movs	r3, #4
 8004726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800472a:	e082      	b.n	8004832 <UART_SetConfig+0x5a6>
 800472c:	2308      	movs	r3, #8
 800472e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004732:	e07e      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004734:	2310      	movs	r3, #16
 8004736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473a:	e07a      	b.n	8004832 <UART_SetConfig+0x5a6>
 800473c:	2320      	movs	r3, #32
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004742:	e076      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004744:	2340      	movs	r3, #64	@ 0x40
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474a:	e072      	b.n	8004832 <UART_SetConfig+0x5a6>
 800474c:	2380      	movs	r3, #128	@ 0x80
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004752:	e06e      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a75      	ldr	r2, [pc, #468]	@ (8004930 <UART_SetConfig+0x6a4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d130      	bne.n	80047c0 <UART_SetConfig+0x534>
 800475e:	4b72      	ldr	r3, [pc, #456]	@ (8004928 <UART_SetConfig+0x69c>)
 8004760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	2b05      	cmp	r3, #5
 8004768:	d826      	bhi.n	80047b8 <UART_SetConfig+0x52c>
 800476a:	a201      	add	r2, pc, #4	@ (adr r2, 8004770 <UART_SetConfig+0x4e4>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	08004789 	.word	0x08004789
 8004774:	08004791 	.word	0x08004791
 8004778:	08004799 	.word	0x08004799
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047a9 	.word	0x080047a9
 8004784:	080047b1 	.word	0x080047b1
 8004788:	2300      	movs	r3, #0
 800478a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800478e:	e050      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004790:	2304      	movs	r3, #4
 8004792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004796:	e04c      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004798:	2308      	movs	r3, #8
 800479a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800479e:	e048      	b.n	8004832 <UART_SetConfig+0x5a6>
 80047a0:	2310      	movs	r3, #16
 80047a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047a6:	e044      	b.n	8004832 <UART_SetConfig+0x5a6>
 80047a8:	2320      	movs	r3, #32
 80047aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ae:	e040      	b.n	8004832 <UART_SetConfig+0x5a6>
 80047b0:	2340      	movs	r3, #64	@ 0x40
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047b6:	e03c      	b.n	8004832 <UART_SetConfig+0x5a6>
 80047b8:	2380      	movs	r3, #128	@ 0x80
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047be:	e038      	b.n	8004832 <UART_SetConfig+0x5a6>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a5b      	ldr	r2, [pc, #364]	@ (8004934 <UART_SetConfig+0x6a8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d130      	bne.n	800482c <UART_SetConfig+0x5a0>
 80047ca:	4b57      	ldr	r3, [pc, #348]	@ (8004928 <UART_SetConfig+0x69c>)
 80047cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	2b05      	cmp	r3, #5
 80047d4:	d826      	bhi.n	8004824 <UART_SetConfig+0x598>
 80047d6:	a201      	add	r2, pc, #4	@ (adr r2, 80047dc <UART_SetConfig+0x550>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	080047f5 	.word	0x080047f5
 80047e0:	080047fd 	.word	0x080047fd
 80047e4:	08004805 	.word	0x08004805
 80047e8:	0800480d 	.word	0x0800480d
 80047ec:	08004815 	.word	0x08004815
 80047f0:	0800481d 	.word	0x0800481d
 80047f4:	2302      	movs	r3, #2
 80047f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047fa:	e01a      	b.n	8004832 <UART_SetConfig+0x5a6>
 80047fc:	2304      	movs	r3, #4
 80047fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004802:	e016      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004804:	2308      	movs	r3, #8
 8004806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800480a:	e012      	b.n	8004832 <UART_SetConfig+0x5a6>
 800480c:	2310      	movs	r3, #16
 800480e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004812:	e00e      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004814:	2320      	movs	r3, #32
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481a:	e00a      	b.n	8004832 <UART_SetConfig+0x5a6>
 800481c:	2340      	movs	r3, #64	@ 0x40
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004822:	e006      	b.n	8004832 <UART_SetConfig+0x5a6>
 8004824:	2380      	movs	r3, #128	@ 0x80
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482a:	e002      	b.n	8004832 <UART_SetConfig+0x5a6>
 800482c:	2380      	movs	r3, #128	@ 0x80
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a3f      	ldr	r2, [pc, #252]	@ (8004934 <UART_SetConfig+0x6a8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	f040 80f8 	bne.w	8004a2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800483e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004842:	2b20      	cmp	r3, #32
 8004844:	dc46      	bgt.n	80048d4 <UART_SetConfig+0x648>
 8004846:	2b02      	cmp	r3, #2
 8004848:	f2c0 8082 	blt.w	8004950 <UART_SetConfig+0x6c4>
 800484c:	3b02      	subs	r3, #2
 800484e:	2b1e      	cmp	r3, #30
 8004850:	d87e      	bhi.n	8004950 <UART_SetConfig+0x6c4>
 8004852:	a201      	add	r2, pc, #4	@ (adr r2, 8004858 <UART_SetConfig+0x5cc>)
 8004854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004858:	080048db 	.word	0x080048db
 800485c:	08004951 	.word	0x08004951
 8004860:	080048e3 	.word	0x080048e3
 8004864:	08004951 	.word	0x08004951
 8004868:	08004951 	.word	0x08004951
 800486c:	08004951 	.word	0x08004951
 8004870:	080048f3 	.word	0x080048f3
 8004874:	08004951 	.word	0x08004951
 8004878:	08004951 	.word	0x08004951
 800487c:	08004951 	.word	0x08004951
 8004880:	08004951 	.word	0x08004951
 8004884:	08004951 	.word	0x08004951
 8004888:	08004951 	.word	0x08004951
 800488c:	08004951 	.word	0x08004951
 8004890:	08004903 	.word	0x08004903
 8004894:	08004951 	.word	0x08004951
 8004898:	08004951 	.word	0x08004951
 800489c:	08004951 	.word	0x08004951
 80048a0:	08004951 	.word	0x08004951
 80048a4:	08004951 	.word	0x08004951
 80048a8:	08004951 	.word	0x08004951
 80048ac:	08004951 	.word	0x08004951
 80048b0:	08004951 	.word	0x08004951
 80048b4:	08004951 	.word	0x08004951
 80048b8:	08004951 	.word	0x08004951
 80048bc:	08004951 	.word	0x08004951
 80048c0:	08004951 	.word	0x08004951
 80048c4:	08004951 	.word	0x08004951
 80048c8:	08004951 	.word	0x08004951
 80048cc:	08004951 	.word	0x08004951
 80048d0:	08004943 	.word	0x08004943
 80048d4:	2b40      	cmp	r3, #64	@ 0x40
 80048d6:	d037      	beq.n	8004948 <UART_SetConfig+0x6bc>
 80048d8:	e03a      	b.n	8004950 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80048da:	f7fe ffd7 	bl	800388c <HAL_RCCEx_GetD3PCLK1Freq>
 80048de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80048e0:	e03c      	b.n	800495c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe ffe6 	bl	80038b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048f0:	e034      	b.n	800495c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048f2:	f107 0318 	add.w	r3, r7, #24
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff f932 	bl	8003b60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004900:	e02c      	b.n	800495c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004902:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <UART_SetConfig+0x69c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <UART_SetConfig+0x69c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	08db      	lsrs	r3, r3, #3
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	4a07      	ldr	r2, [pc, #28]	@ (8004938 <UART_SetConfig+0x6ac>)
 800491a:	fa22 f303 	lsr.w	r3, r2, r3
 800491e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004920:	e01c      	b.n	800495c <UART_SetConfig+0x6d0>
 8004922:	bf00      	nop
 8004924:	40011400 	.word	0x40011400
 8004928:	58024400 	.word	0x58024400
 800492c:	40007800 	.word	0x40007800
 8004930:	40007c00 	.word	0x40007c00
 8004934:	58000c00 	.word	0x58000c00
 8004938:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800493c:	4b9d      	ldr	r3, [pc, #628]	@ (8004bb4 <UART_SetConfig+0x928>)
 800493e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004940:	e00c      	b.n	800495c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004942:	4b9d      	ldr	r3, [pc, #628]	@ (8004bb8 <UART_SetConfig+0x92c>)
 8004944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004946:	e009      	b.n	800495c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004948:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800494c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800494e:	e005      	b.n	800495c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800495a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800495c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 81de 	beq.w	8004d20 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	4a94      	ldr	r2, [pc, #592]	@ (8004bbc <UART_SetConfig+0x930>)
 800496a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800496e:	461a      	mov	r2, r3
 8004970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004972:	fbb3 f3f2 	udiv	r3, r3, r2
 8004976:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	4413      	add	r3, r2
 8004982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004984:	429a      	cmp	r2, r3
 8004986:	d305      	bcc.n	8004994 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800498e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004990:	429a      	cmp	r2, r3
 8004992:	d903      	bls.n	800499c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800499a:	e1c1      	b.n	8004d20 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800499c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800499e:	2200      	movs	r2, #0
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	60fa      	str	r2, [r7, #12]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	4a84      	ldr	r2, [pc, #528]	@ (8004bbc <UART_SetConfig+0x930>)
 80049aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2200      	movs	r2, #0
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049be:	f7fb fc8b 	bl	80002d8 <__aeabi_uldivmod>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4610      	mov	r0, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	020b      	lsls	r3, r1, #8
 80049d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049d8:	0202      	lsls	r2, r0, #8
 80049da:	6979      	ldr	r1, [r7, #20]
 80049dc:	6849      	ldr	r1, [r1, #4]
 80049de:	0849      	lsrs	r1, r1, #1
 80049e0:	2000      	movs	r0, #0
 80049e2:	460c      	mov	r4, r1
 80049e4:	4605      	mov	r5, r0
 80049e6:	eb12 0804 	adds.w	r8, r2, r4
 80049ea:	eb43 0905 	adc.w	r9, r3, r5
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	469a      	mov	sl, r3
 80049f6:	4693      	mov	fp, r2
 80049f8:	4652      	mov	r2, sl
 80049fa:	465b      	mov	r3, fp
 80049fc:	4640      	mov	r0, r8
 80049fe:	4649      	mov	r1, r9
 8004a00:	f7fb fc6a 	bl	80002d8 <__aeabi_uldivmod>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4613      	mov	r3, r2
 8004a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a12:	d308      	bcc.n	8004a26 <UART_SetConfig+0x79a>
 8004a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a1a:	d204      	bcs.n	8004a26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a22:	60da      	str	r2, [r3, #12]
 8004a24:	e17c      	b.n	8004d20 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004a2c:	e178      	b.n	8004d20 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a36:	f040 80c5 	bne.w	8004bc4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004a3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	dc48      	bgt.n	8004ad4 <UART_SetConfig+0x848>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	db7b      	blt.n	8004b3e <UART_SetConfig+0x8b2>
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d879      	bhi.n	8004b3e <UART_SetConfig+0x8b2>
 8004a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <UART_SetConfig+0x7c4>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004adb 	.word	0x08004adb
 8004a54:	08004ae3 	.word	0x08004ae3
 8004a58:	08004b3f 	.word	0x08004b3f
 8004a5c:	08004b3f 	.word	0x08004b3f
 8004a60:	08004aeb 	.word	0x08004aeb
 8004a64:	08004b3f 	.word	0x08004b3f
 8004a68:	08004b3f 	.word	0x08004b3f
 8004a6c:	08004b3f 	.word	0x08004b3f
 8004a70:	08004afb 	.word	0x08004afb
 8004a74:	08004b3f 	.word	0x08004b3f
 8004a78:	08004b3f 	.word	0x08004b3f
 8004a7c:	08004b3f 	.word	0x08004b3f
 8004a80:	08004b3f 	.word	0x08004b3f
 8004a84:	08004b3f 	.word	0x08004b3f
 8004a88:	08004b3f 	.word	0x08004b3f
 8004a8c:	08004b3f 	.word	0x08004b3f
 8004a90:	08004b0b 	.word	0x08004b0b
 8004a94:	08004b3f 	.word	0x08004b3f
 8004a98:	08004b3f 	.word	0x08004b3f
 8004a9c:	08004b3f 	.word	0x08004b3f
 8004aa0:	08004b3f 	.word	0x08004b3f
 8004aa4:	08004b3f 	.word	0x08004b3f
 8004aa8:	08004b3f 	.word	0x08004b3f
 8004aac:	08004b3f 	.word	0x08004b3f
 8004ab0:	08004b3f 	.word	0x08004b3f
 8004ab4:	08004b3f 	.word	0x08004b3f
 8004ab8:	08004b3f 	.word	0x08004b3f
 8004abc:	08004b3f 	.word	0x08004b3f
 8004ac0:	08004b3f 	.word	0x08004b3f
 8004ac4:	08004b3f 	.word	0x08004b3f
 8004ac8:	08004b3f 	.word	0x08004b3f
 8004acc:	08004b3f 	.word	0x08004b3f
 8004ad0:	08004b31 	.word	0x08004b31
 8004ad4:	2b40      	cmp	r3, #64	@ 0x40
 8004ad6:	d02e      	beq.n	8004b36 <UART_SetConfig+0x8aa>
 8004ad8:	e031      	b.n	8004b3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ada:	f7fd fca1 	bl	8002420 <HAL_RCC_GetPCLK1Freq>
 8004ade:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ae0:	e033      	b.n	8004b4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae2:	f7fd fcb3 	bl	800244c <HAL_RCC_GetPCLK2Freq>
 8004ae6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ae8:	e02f      	b.n	8004b4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe fee2 	bl	80038b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004af8:	e027      	b.n	8004b4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004afa:	f107 0318 	add.w	r3, r7, #24
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff f82e 	bl	8003b60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b08:	e01f      	b.n	8004b4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8004bc0 <UART_SetConfig+0x934>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b16:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc0 <UART_SetConfig+0x934>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	08db      	lsrs	r3, r3, #3
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	4a24      	ldr	r2, [pc, #144]	@ (8004bb4 <UART_SetConfig+0x928>)
 8004b22:	fa22 f303 	lsr.w	r3, r2, r3
 8004b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b28:	e00f      	b.n	8004b4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004b2a:	4b22      	ldr	r3, [pc, #136]	@ (8004bb4 <UART_SetConfig+0x928>)
 8004b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b2e:	e00c      	b.n	8004b4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b30:	4b21      	ldr	r3, [pc, #132]	@ (8004bb8 <UART_SetConfig+0x92c>)
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b34:	e009      	b.n	8004b4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b3c:	e005      	b.n	8004b4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004b48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80e7 	beq.w	8004d20 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	4a19      	ldr	r2, [pc, #100]	@ (8004bbc <UART_SetConfig+0x930>)
 8004b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b64:	005a      	lsls	r2, r3, #1
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	085b      	lsrs	r3, r3, #1
 8004b6c:	441a      	add	r2, r3
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7a:	2b0f      	cmp	r3, #15
 8004b7c:	d916      	bls.n	8004bac <UART_SetConfig+0x920>
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b84:	d212      	bcs.n	8004bac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f023 030f 	bic.w	r3, r3, #15
 8004b8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b92:	085b      	lsrs	r3, r3, #1
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004ba8:	60da      	str	r2, [r3, #12]
 8004baa:	e0b9      	b.n	8004d20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004bb2:	e0b5      	b.n	8004d20 <UART_SetConfig+0xa94>
 8004bb4:	03d09000 	.word	0x03d09000
 8004bb8:	003d0900 	.word	0x003d0900
 8004bbc:	0800542c 	.word	0x0800542c
 8004bc0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bc4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	dc49      	bgt.n	8004c60 <UART_SetConfig+0x9d4>
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	db7c      	blt.n	8004cca <UART_SetConfig+0xa3e>
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d87a      	bhi.n	8004cca <UART_SetConfig+0xa3e>
 8004bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <UART_SetConfig+0x950>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004c67 	.word	0x08004c67
 8004be0:	08004c6f 	.word	0x08004c6f
 8004be4:	08004ccb 	.word	0x08004ccb
 8004be8:	08004ccb 	.word	0x08004ccb
 8004bec:	08004c77 	.word	0x08004c77
 8004bf0:	08004ccb 	.word	0x08004ccb
 8004bf4:	08004ccb 	.word	0x08004ccb
 8004bf8:	08004ccb 	.word	0x08004ccb
 8004bfc:	08004c87 	.word	0x08004c87
 8004c00:	08004ccb 	.word	0x08004ccb
 8004c04:	08004ccb 	.word	0x08004ccb
 8004c08:	08004ccb 	.word	0x08004ccb
 8004c0c:	08004ccb 	.word	0x08004ccb
 8004c10:	08004ccb 	.word	0x08004ccb
 8004c14:	08004ccb 	.word	0x08004ccb
 8004c18:	08004ccb 	.word	0x08004ccb
 8004c1c:	08004c97 	.word	0x08004c97
 8004c20:	08004ccb 	.word	0x08004ccb
 8004c24:	08004ccb 	.word	0x08004ccb
 8004c28:	08004ccb 	.word	0x08004ccb
 8004c2c:	08004ccb 	.word	0x08004ccb
 8004c30:	08004ccb 	.word	0x08004ccb
 8004c34:	08004ccb 	.word	0x08004ccb
 8004c38:	08004ccb 	.word	0x08004ccb
 8004c3c:	08004ccb 	.word	0x08004ccb
 8004c40:	08004ccb 	.word	0x08004ccb
 8004c44:	08004ccb 	.word	0x08004ccb
 8004c48:	08004ccb 	.word	0x08004ccb
 8004c4c:	08004ccb 	.word	0x08004ccb
 8004c50:	08004ccb 	.word	0x08004ccb
 8004c54:	08004ccb 	.word	0x08004ccb
 8004c58:	08004ccb 	.word	0x08004ccb
 8004c5c:	08004cbd 	.word	0x08004cbd
 8004c60:	2b40      	cmp	r3, #64	@ 0x40
 8004c62:	d02e      	beq.n	8004cc2 <UART_SetConfig+0xa36>
 8004c64:	e031      	b.n	8004cca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c66:	f7fd fbdb 	bl	8002420 <HAL_RCC_GetPCLK1Freq>
 8004c6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c6c:	e033      	b.n	8004cd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c6e:	f7fd fbed 	bl	800244c <HAL_RCC_GetPCLK2Freq>
 8004c72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c74:	e02f      	b.n	8004cd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fe1c 	bl	80038b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c84:	e027      	b.n	8004cd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c86:	f107 0318 	add.w	r3, r7, #24
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fe ff68 	bl	8003b60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c94:	e01f      	b.n	8004cd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c96:	4b2d      	ldr	r3, [pc, #180]	@ (8004d4c <UART_SetConfig+0xac0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d4c <UART_SetConfig+0xac0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	08db      	lsrs	r3, r3, #3
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	4a28      	ldr	r2, [pc, #160]	@ (8004d50 <UART_SetConfig+0xac4>)
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004cb4:	e00f      	b.n	8004cd6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004cb6:	4b26      	ldr	r3, [pc, #152]	@ (8004d50 <UART_SetConfig+0xac4>)
 8004cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cba:	e00c      	b.n	8004cd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004cbc:	4b25      	ldr	r3, [pc, #148]	@ (8004d54 <UART_SetConfig+0xac8>)
 8004cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cc0:	e009      	b.n	8004cd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cc8:	e005      	b.n	8004cd6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004cd4:	bf00      	nop
    }

    if (pclk != 0U)
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d021      	beq.n	8004d20 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d58 <UART_SetConfig+0xacc>)
 8004ce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cea:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	441a      	add	r2, r3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d02:	2b0f      	cmp	r3, #15
 8004d04:	d909      	bls.n	8004d1a <UART_SetConfig+0xa8e>
 8004d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d0c:	d205      	bcs.n	8004d1a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60da      	str	r2, [r3, #12]
 8004d18:	e002      	b.n	8004d20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2200      	movs	r2, #0
 8004d34:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d3c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3748      	adds	r7, #72	@ 0x48
 8004d44:	46bd      	mov	sp, r7
 8004d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d4a:	bf00      	nop
 8004d4c:	58024400 	.word	0x58024400
 8004d50:	03d09000 	.word	0x03d09000
 8004d54:	003d0900 	.word	0x003d0900
 8004d58:	0800542c 	.word	0x0800542c

08004d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01a      	beq.n	8004e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e5a:	d10a      	bne.n	8004e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b098      	sub	sp, #96	@ 0x60
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eb0:	f7fb ffa4 	bl	8000dfc <HAL_GetTick>
 8004eb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d12f      	bne.n	8004f24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ec4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f88e 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d022      	beq.n	8004f24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee6:	e853 3f00 	ldrex	r3, [r3]
 8004eea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ef2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004efe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e6      	bne.n	8004ede <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e063      	b.n	8004fec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d149      	bne.n	8004fc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f857 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d03c      	beq.n	8004fc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	623b      	str	r3, [r7, #32]
   return(result);
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e6      	bne.n	8004f4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3308      	adds	r3, #8
 8004f84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f9e:	61fa      	str	r2, [r7, #28]
 8004fa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	69b9      	ldr	r1, [r7, #24]
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	617b      	str	r3, [r7, #20]
   return(result);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e012      	b.n	8004fec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3758      	adds	r7, #88	@ 0x58
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	4613      	mov	r3, r2
 8005002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005004:	e04f      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800500c:	d04b      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500e:	f7fb fef5 	bl	8000dfc <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	429a      	cmp	r2, r3
 800501c:	d302      	bcc.n	8005024 <UART_WaitOnFlagUntilTimeout+0x30>
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e04e      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d037      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b80      	cmp	r3, #128	@ 0x80
 800503a:	d034      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b40      	cmp	r3, #64	@ 0x40
 8005040:	d031      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b08      	cmp	r3, #8
 800504e:	d110      	bne.n	8005072 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2208      	movs	r2, #8
 8005056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f839 	bl	80050d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2208      	movs	r2, #8
 8005062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e029      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800507c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005080:	d111      	bne.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800508a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f81f 	bl	80050d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e00f      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4013      	ands	r3, r2
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	bf0c      	ite	eq
 80050b6:	2301      	moveq	r3, #1
 80050b8:	2300      	movne	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d0a0      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b095      	sub	sp, #84	@ 0x54
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80050f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e6      	bne.n	80050d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	61fb      	str	r3, [r7, #28]
   return(result);
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	4b1e      	ldr	r3, [pc, #120]	@ (8005198 <UART_EndRxTransfer+0xc8>)
 800511e:	4013      	ands	r3, r2
 8005120:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3308      	adds	r3, #8
 8005128:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800512a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800512c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005130:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e5      	bne.n	800510a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d118      	bne.n	8005178 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	60bb      	str	r3, [r7, #8]
   return(result);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f023 0310 	bic.w	r3, r3, #16
 800515a:	647b      	str	r3, [r7, #68]	@ 0x44
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6979      	ldr	r1, [r7, #20]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	613b      	str	r3, [r7, #16]
   return(result);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e6      	bne.n	8005146 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800518c:	bf00      	nop
 800518e:	3754      	adds	r7, #84	@ 0x54
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	effffffe 	.word	0xeffffffe

0800519c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e027      	b.n	8005202 <HAL_UARTEx_DisableFifoMode+0x66>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2224      	movs	r2, #36	@ 0x24
 80051be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80051e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005222:	2302      	movs	r3, #2
 8005224:	e02d      	b.n	8005282 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2224      	movs	r2, #36	@ 0x24
 8005232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f850 	bl	8005308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800529e:	2302      	movs	r3, #2
 80052a0:	e02d      	b.n	80052fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2224      	movs	r2, #36	@ 0x24
 80052ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0201 	bic.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f812 	bl	8005308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005314:	2b00      	cmp	r3, #0
 8005316:	d108      	bne.n	800532a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005328:	e031      	b.n	800538e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800532a:	2310      	movs	r3, #16
 800532c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800532e:	2310      	movs	r3, #16
 8005330:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	0e5b      	lsrs	r3, r3, #25
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	0f5b      	lsrs	r3, r3, #29
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005352:	7bbb      	ldrb	r3, [r7, #14]
 8005354:	7b3a      	ldrb	r2, [r7, #12]
 8005356:	4911      	ldr	r1, [pc, #68]	@ (800539c <UARTEx_SetNbDataToProcess+0x94>)
 8005358:	5c8a      	ldrb	r2, [r1, r2]
 800535a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800535e:	7b3a      	ldrb	r2, [r7, #12]
 8005360:	490f      	ldr	r1, [pc, #60]	@ (80053a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005362:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005364:	fb93 f3f2 	sdiv	r3, r3, r2
 8005368:	b29a      	uxth	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	7b7a      	ldrb	r2, [r7, #13]
 8005374:	4909      	ldr	r1, [pc, #36]	@ (800539c <UARTEx_SetNbDataToProcess+0x94>)
 8005376:	5c8a      	ldrb	r2, [r1, r2]
 8005378:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800537c:	7b7a      	ldrb	r2, [r7, #13]
 800537e:	4908      	ldr	r1, [pc, #32]	@ (80053a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005380:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005382:	fb93 f3f2 	sdiv	r3, r3, r2
 8005386:	b29a      	uxth	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	08005444 	.word	0x08005444
 80053a0:	0800544c 	.word	0x0800544c

080053a4 <memset>:
 80053a4:	4402      	add	r2, r0
 80053a6:	4603      	mov	r3, r0
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d100      	bne.n	80053ae <memset+0xa>
 80053ac:	4770      	bx	lr
 80053ae:	f803 1b01 	strb.w	r1, [r3], #1
 80053b2:	e7f9      	b.n	80053a8 <memset+0x4>

080053b4 <__libc_init_array>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	4d0d      	ldr	r5, [pc, #52]	@ (80053ec <__libc_init_array+0x38>)
 80053b8:	4c0d      	ldr	r4, [pc, #52]	@ (80053f0 <__libc_init_array+0x3c>)
 80053ba:	1b64      	subs	r4, r4, r5
 80053bc:	10a4      	asrs	r4, r4, #2
 80053be:	2600      	movs	r6, #0
 80053c0:	42a6      	cmp	r6, r4
 80053c2:	d109      	bne.n	80053d8 <__libc_init_array+0x24>
 80053c4:	4d0b      	ldr	r5, [pc, #44]	@ (80053f4 <__libc_init_array+0x40>)
 80053c6:	4c0c      	ldr	r4, [pc, #48]	@ (80053f8 <__libc_init_array+0x44>)
 80053c8:	f000 f818 	bl	80053fc <_init>
 80053cc:	1b64      	subs	r4, r4, r5
 80053ce:	10a4      	asrs	r4, r4, #2
 80053d0:	2600      	movs	r6, #0
 80053d2:	42a6      	cmp	r6, r4
 80053d4:	d105      	bne.n	80053e2 <__libc_init_array+0x2e>
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
 80053d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053dc:	4798      	blx	r3
 80053de:	3601      	adds	r6, #1
 80053e0:	e7ee      	b.n	80053c0 <__libc_init_array+0xc>
 80053e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e6:	4798      	blx	r3
 80053e8:	3601      	adds	r6, #1
 80053ea:	e7f2      	b.n	80053d2 <__libc_init_array+0x1e>
 80053ec:	0800545c 	.word	0x0800545c
 80053f0:	0800545c 	.word	0x0800545c
 80053f4:	0800545c 	.word	0x0800545c
 80053f8:	08005460 	.word	0x08005460

080053fc <_init>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr

08005408 <_fini>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr
