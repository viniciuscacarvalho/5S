
geral_test_h755zi-q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7b4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  0800fa58  0800fa58  00010a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010264  08010264  000121d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010264  08010264  00011264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801026c  0801026c  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801026c  0801026c  0001126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010270  08010270  00011270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  08010274  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000344c  240001d8  0801044c  000121d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24003624  0801044c  00012624  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed6c  00000000  00000000  00012206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004111  00000000  00000000  00030f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00035088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001112  00000000  00000000  000366f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f31a  00000000  00000000  00037802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021039  00000000  00000000  00076b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194d01  00000000  00000000  00097b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022c856  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007130  00000000  00000000  0022c89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  002339cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fa3c 	.word	0x0800fa3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800fa3c 	.word	0x0800fa3c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b49      	ldr	r3, [pc, #292]	@ (8000bd0 <SystemInit+0x12c>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a48      	ldr	r2, [pc, #288]	@ (8000bd0 <SystemInit+0x12c>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000ab8:	4b45      	ldr	r3, [pc, #276]	@ (8000bd0 <SystemInit+0x12c>)
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	4a44      	ldr	r2, [pc, #272]	@ (8000bd0 <SystemInit+0x12c>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac4:	4b43      	ldr	r3, [pc, #268]	@ (8000bd4 <SystemInit+0x130>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	2b06      	cmp	r3, #6
 8000ace:	d807      	bhi.n	8000ae0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad0:	4b40      	ldr	r3, [pc, #256]	@ (8000bd4 <SystemInit+0x130>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f023 030f 	bic.w	r3, r3, #15
 8000ad8:	4a3e      	ldr	r2, [pc, #248]	@ (8000bd4 <SystemInit+0x130>)
 8000ada:	f043 0307 	orr.w	r3, r3, #7
 8000ade:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <SystemInit+0x134>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd8 <SystemInit+0x134>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000aec:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd8 <SystemInit+0x134>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000af2:	4b39      	ldr	r3, [pc, #228]	@ (8000bd8 <SystemInit+0x134>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4938      	ldr	r1, [pc, #224]	@ (8000bd8 <SystemInit+0x134>)
 8000af8:	4b38      	ldr	r3, [pc, #224]	@ (8000bdc <SystemInit+0x138>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000afe:	4b35      	ldr	r3, [pc, #212]	@ (8000bd4 <SystemInit+0x130>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d007      	beq.n	8000b1a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b0a:	4b32      	ldr	r3, [pc, #200]	@ (8000bd4 <SystemInit+0x130>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f023 030f 	bic.w	r3, r3, #15
 8000b12:	4a30      	ldr	r2, [pc, #192]	@ (8000bd4 <SystemInit+0x130>)
 8000b14:	f043 0307 	orr.w	r3, r3, #7
 8000b18:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd8 <SystemInit+0x134>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b20:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <SystemInit+0x134>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b26:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd8 <SystemInit+0x134>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <SystemInit+0x134>)
 8000b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8000be0 <SystemInit+0x13c>)
 8000b30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b32:	4b29      	ldr	r3, [pc, #164]	@ (8000bd8 <SystemInit+0x134>)
 8000b34:	4a2b      	ldr	r2, [pc, #172]	@ (8000be4 <SystemInit+0x140>)
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <SystemInit+0x134>)
 8000b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000be8 <SystemInit+0x144>)
 8000b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b3e:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <SystemInit+0x134>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <SystemInit+0x134>)
 8000b46:	4a28      	ldr	r2, [pc, #160]	@ (8000be8 <SystemInit+0x144>)
 8000b48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b4a:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <SystemInit+0x134>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b50:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <SystemInit+0x134>)
 8000b52:	4a25      	ldr	r2, [pc, #148]	@ (8000be8 <SystemInit+0x144>)
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <SystemInit+0x134>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <SystemInit+0x134>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd8 <SystemInit+0x134>)
 8000b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <SystemInit+0x134>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <SystemInit+0x148>)
 8000b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b72:	4a1e      	ldr	r2, [pc, #120]	@ (8000bec <SystemInit+0x148>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <SystemInit+0x14c>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <SystemInit+0x150>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b86:	d202      	bcs.n	8000b8e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <SystemInit+0x154>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <SystemInit+0x134>)
 8000b90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d113      	bne.n	8000bc4 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <SystemInit+0x134>)
 8000b9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <SystemInit+0x134>)
 8000ba4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ba8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <SystemInit+0x158>)
 8000bae:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bb2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <SystemInit+0x134>)
 8000bb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bba:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <SystemInit+0x134>)
 8000bbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bc0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	52002000 	.word	0x52002000
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000be0:	02020200 	.word	0x02020200
 8000be4:	01ff0000 	.word	0x01ff0000
 8000be8:	01010280 	.word	0x01010280
 8000bec:	580000c0 	.word	0x580000c0
 8000bf0:	5c001000 	.word	0x5c001000
 8000bf4:	ffff0000 	.word	0xffff0000
 8000bf8:	51008108 	.word	0x51008108
 8000bfc:	52004000 	.word	0x52004000

08000c00 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <ExitRun0Mode+0x2c>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <ExitRun0Mode+0x2c>)
 8000c0a:	f023 0302 	bic.w	r3, r3, #2
 8000c0e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c10:	bf00      	nop
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <ExitRun0Mode+0x2c>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f9      	beq.n	8000c12 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	58024800 	.word	0x58024800

08000c30 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	615a      	str	r2, [r3, #20]
 8000c52:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c54:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c56:	4a32      	ldr	r2, [pc, #200]	@ (8000d20 <MX_ADC1_Init+0xf0>)
 8000c58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c5a:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c5c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c64:	2210      	movs	r2, #16
 8000c66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c74:	4b29      	ldr	r3, [pc, #164]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c80:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c92:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c98:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb8:	4818      	ldr	r0, [pc, #96]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cba:	f001 f84d 	bl	8001d58 <HAL_ADC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000cc4:	f000 face 	bl	8001264 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4812      	ldr	r0, [pc, #72]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cd4:	f001 ff66 	bl	8002ba4 <HAL_ADCEx_MultiModeConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cde:	f000 fac1 	bl	8001264 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_ADC1_Init+0xf4>)
 8000ce4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce6:	2306      	movs	r3, #6
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cee:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000d06:	f001 faa1 	bl	800224c <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d10:	f000 faa8 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	@ 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	240001f4 	.word	0x240001f4
 8000d20:	40022000 	.word	0x40022000
 8000d24:	3ef08000 	.word	0x3ef08000

08000d28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	22c0      	movs	r2, #192	@ 0xc0
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f00a ff68 	bl	800bc1e <memset>
  if(adcHandle->Instance==ADC1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a2b      	ldr	r2, [pc, #172]	@ (8000e00 <HAL_ADC_MspInit+0xd8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d14f      	bne.n	8000df8 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d58:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d64:	2304      	movs	r3, #4
 8000d66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000d68:	230a      	movs	r3, #10
 8000d6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d78:	23c0      	movs	r3, #192	@ 0xc0
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d7c:	2320      	movs	r3, #32
 8000d7e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 fe4c 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000d9a:	f000 fa63 	bl	8001264 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000da0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da4:	4a17      	ldr	r2, [pc, #92]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000da6:	f043 0320 	orr.w	r3, r3, #32
 8000daa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db4:	f003 0320 	and.w	r3, r3, #32
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	4a10      	ldr	r2, [pc, #64]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dda:	2308      	movs	r3, #8
 8000ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de0:	2303      	movs	r3, #3
 8000de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000df4:	f002 fe28 	bl	8003a48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000df8:	bf00      	nop
 8000dfa:	37e8      	adds	r7, #232	@ 0xe8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40022000 	.word	0x40022000
 8000e04:	58024400 	.word	0x58024400
 8000e08:	58020000 	.word	0x58020000

08000e0c <MX_GPIO_Init>:
     PG11   ------> ETH_TX_EN
     PG12   ------> USART6_RTS
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b59      	ldr	r3, [pc, #356]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e28:	4a57      	ldr	r2, [pc, #348]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e32:	4b55      	ldr	r3, [pc, #340]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b51      	ldr	r3, [pc, #324]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e46:	4a50      	ldr	r2, [pc, #320]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e50:	4b4d      	ldr	r3, [pc, #308]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e64:	4a48      	ldr	r2, [pc, #288]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6e:	4b46      	ldr	r3, [pc, #280]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7c:	4b42      	ldr	r3, [pc, #264]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e82:	4a41      	ldr	r2, [pc, #260]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea0:	4a39      	ldr	r2, [pc, #228]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eaa:	4b37      	ldr	r3, [pc, #220]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000eb8:	2332      	movs	r3, #50	@ 0x32
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec8:	230b      	movs	r3, #11
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	482e      	ldr	r0, [pc, #184]	@ (8000f8c <MX_GPIO_Init+0x180>)
 8000ed4:	f002 fdb8 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ed8:	2386      	movs	r3, #134	@ 0x86
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee8:	230b      	movs	r3, #11
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4827      	ldr	r0, [pc, #156]	@ (8000f90 <MX_GPIO_Init+0x184>)
 8000ef4:	f002 fda8 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ef8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0a:	230b      	movs	r3, #11
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	481f      	ldr	r0, [pc, #124]	@ (8000f94 <MX_GPIO_Init+0x188>)
 8000f16:	f002 fd97 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f1a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4816      	ldr	r0, [pc, #88]	@ (8000f90 <MX_GPIO_Init+0x184>)
 8000f38:	f002 fd86 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8000f3c:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	480f      	ldr	r0, [pc, #60]	@ (8000f98 <MX_GPIO_Init+0x18c>)
 8000f5a:	f002 fd75 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f5e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f70:	230b      	movs	r3, #11
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <MX_GPIO_Init+0x18c>)
 8000f7c:	f002 fd64 	bl	8003a48 <HAL_GPIO_Init>

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	@ 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020800 	.word	0x58020800
 8000f90:	58020000 	.word	0x58020000
 8000f94:	58020400 	.word	0x58020400
 8000f98:	58021800 	.word	0x58021800

08000f9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001014 <MX_I2C1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <MX_I2C1_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fd8:	f002 ff14 	bl	8003e04 <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 f93f 	bl	8001264 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4809      	ldr	r0, [pc, #36]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fea:	f003 fc47 	bl	800487c <HAL_I2CEx_ConfigAnalogFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 f936 	bl	8001264 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000ffc:	f003 fc89 	bl	8004912 <HAL_I2CEx_ConfigDigitalFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 f92d 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	24000258 	.word	0x24000258
 8001014:	40005400 	.word	0x40005400
 8001018:	00707cbb 	.word	0x00707cbb

0800101c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0ba      	sub	sp, #232	@ 0xe8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	22c0      	movs	r2, #192	@ 0xc0
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f00a fdee 	bl	800bc1e <memset>
  if(i2cHandle->Instance==I2C1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a27      	ldr	r2, [pc, #156]	@ (80010e4 <HAL_I2C_MspInit+0xc8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d146      	bne.n	80010da <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800104c:	f04f 0208 	mov.w	r2, #8
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fce2 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800106e:	f000 f8f9 	bl	8001264 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001090:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001094:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001098:	2312      	movs	r3, #18
 800109a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010aa:	2304      	movs	r3, #4
 80010ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	@ (80010ec <HAL_I2C_MspInit+0xd0>)
 80010b8:	f002 fcc6 	bl	8003a48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 80010be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010c2:	4a09      	ldr	r2, [pc, #36]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 80010c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 80010ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010da:	bf00      	nop
 80010dc:	37e8      	adds	r7, #232	@ 0xe8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40005400 	.word	0x40005400
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58020400 	.word	0x58020400

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80010f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010fa:	607b      	str	r3, [r7, #4]
  //}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f000 fb76 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 f83c 	bl	800117c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001104:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <main+0x88>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110a:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <main+0x88>)
 800110c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001114:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <main+0x88>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001122:	2000      	movs	r0, #0
 8001124:	f002 fe40 	bl	8003da8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001128:	2100      	movs	r1, #0
 800112a:	2000      	movs	r0, #0
 800112c:	f002 fe56 	bl	8003ddc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001130:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001134:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001136:	bf00      	nop
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <main+0x88>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d104      	bne.n	800114e <main+0x5e>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	1e5a      	subs	r2, r3, #1
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	dcf4      	bgt.n	8001138 <main+0x48>
if ( timeout < 0 )
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	da01      	bge.n	8001158 <main+0x68>
{
Error_Handler();
 8001154:	f000 f886 	bl	8001264 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f7ff fe58 	bl	8000e0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800115c:	f000 fa04 	bl	8001568 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001160:	f7ff fd66 	bl	8000c30 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001164:	f000 f9b4 	bl	80014d0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001168:	f7ff ff18 	bl	8000f9c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  manager_init();
 800116c:	f009 fb58 	bl	800a820 <manager_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  manager_update();
 8001170:	f009 fb66 	bl	800a840 <manager_update>
 8001174:	e7fc      	b.n	8001170 <main+0x80>
 8001176:	bf00      	nop
 8001178:	58024400 	.word	0x58024400

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b09c      	sub	sp, #112	@ 0x70
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001186:	224c      	movs	r2, #76	@ 0x4c
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f00a fd47 	bl	800bc1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2220      	movs	r2, #32
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f00a fd41 	bl	800bc1e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800119c:	2004      	movs	r0, #4
 800119e:	f003 fc05 	bl	80049ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001258 <SystemClock_Config+0xdc>)
 80011a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001258 <SystemClock_Config+0xdc>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <SystemClock_Config+0xdc>)
 80011b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	4b27      	ldr	r3, [pc, #156]	@ (800125c <SystemClock_Config+0xe0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011c4:	4a25      	ldr	r2, [pc, #148]	@ (800125c <SystemClock_Config+0xe0>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b23      	ldr	r3, [pc, #140]	@ (800125c <SystemClock_Config+0xe0>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011d8:	bf00      	nop
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <SystemClock_Config+0xe0>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011e6:	d1f8      	bne.n	80011da <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <SystemClock_Config+0xe4>)
 80011ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <SystemClock_Config+0xe4>)
 80011ee:	f023 0303 	bic.w	r3, r3, #3
 80011f2:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f4:	2302      	movs	r3, #2
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fc:	2340      	movs	r3, #64	@ 0x40
 80011fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001200:	2300      	movs	r3, #0
 8001202:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001208:	4618      	mov	r0, r3
 800120a:	f003 fc29 	bl	8004a60 <HAL_RCC_OscConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001214:	f000 f826 	bl	8001264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001218:	233f      	movs	r3, #63	@ 0x3f
 800121a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800122c:	2340      	movs	r3, #64	@ 0x40
 800122e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001230:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001234:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2101      	movs	r1, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f004 f868 	bl	8005314 <HAL_RCC_ClockConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800124a:	f000 f80b 	bl	8001264 <Error_Handler>
  }
}
 800124e:	bf00      	nop
 8001250:	3770      	adds	r7, #112	@ 0x70
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	58000400 	.word	0x58000400
 800125c:	58024800 	.word	0x58024800
 8001260:	58024400 	.word	0x58024400

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <Error_Handler+0x8>

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_MspInit+0x30>)
 8001278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800127c:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <HAL_MspInit+0x30>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_MspInit+0x30>)
 8001288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	58024400 	.word	0x58024400

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <NMI_Handler+0x4>

080012ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <MemManage_Handler+0x4>

080012bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <UsageFault_Handler+0x4>

080012cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extended_tick++;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <SysTick_Handler+0x20>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	1c50      	adds	r0, r2, #1
 8001304:	f143 0100 	adc.w	r1, r3, #0
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <SysTick_Handler+0x20>)
 800130a:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130e:	f000 fadf 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	240002b0 	.word	0x240002b0

0800131c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <USART1_IRQHandler+0x10>)
 8001322:	f007 fabb 	bl	800889c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	240002bc 	.word	0x240002bc

08001330 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <USART3_IRQHandler+0x10>)
 8001336:	f007 fab1 	bl	800889c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	24000350 	.word	0x24000350

08001344 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return 1;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_kill>:

int _kill(int pid, int sig)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800135e:	f00a fcb1 	bl	800bcc4 <__errno>
 8001362:	4603      	mov	r3, r0
 8001364:	2216      	movs	r2, #22
 8001366:	601a      	str	r2, [r3, #0]
  return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_exit>:

void _exit (int status)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800137c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ffe7 	bl	8001354 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001386:	bf00      	nop
 8001388:	e7fd      	b.n	8001386 <_exit+0x12>

0800138a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e00a      	b.n	80013b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800139c:	f3af 8000 	nop.w
 80013a0:	4601      	mov	r1, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	60ba      	str	r2, [r7, #8]
 80013a8:	b2ca      	uxtb	r2, r1
 80013aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	dbf0      	blt.n	800139c <_read+0x12>
  }

  return len;
 80013ba:	687b      	ldr	r3, [r7, #4]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	e009      	b.n	80013ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	60ba      	str	r2, [r7, #8]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf1      	blt.n	80013d6 <_write+0x12>
  }
  return len;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_close>:

int _close(int file)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001424:	605a      	str	r2, [r3, #4]
  return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_isatty>:

int _isatty(int file)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800143c:	2301      	movs	r3, #1
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800144a:	b480      	push	{r7}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800146c:	4a14      	ldr	r2, [pc, #80]	@ (80014c0 <_sbrk+0x5c>)
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <_sbrk+0x60>)
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001480:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <_sbrk+0x64>)
 8001482:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <_sbrk+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	429a      	cmp	r2, r3
 8001492:	d207      	bcs.n	80014a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001494:	f00a fc16 	bl	800bcc4 <__errno>
 8001498:	4603      	mov	r3, r0
 800149a:	220c      	movs	r2, #12
 800149c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a2:	e009      	b.n	80014b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014aa:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <_sbrk+0x64>)
 80014b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	24080000 	.word	0x24080000
 80014c4:	00000400 	.word	0x00000400
 80014c8:	240002b8 	.word	0x240002b8
 80014cc:	24003628 	.word	0x24003628

080014d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d4:	4b22      	ldr	r3, [pc, #136]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014d6:	4a23      	ldr	r2, [pc, #140]	@ (8001564 <MX_USART1_UART_Init+0x94>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80014da:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014dc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80014e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 800151a:	f006 ff85 	bl	8008428 <HAL_UART_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001524:	f7ff fe9e 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001528:	2100      	movs	r1, #0
 800152a:	480d      	ldr	r0, [pc, #52]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 800152c:	f008 ff6a 	bl	800a404 <HAL_UARTEx_SetTxFifoThreshold>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001536:	f7ff fe95 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800153a:	2100      	movs	r1, #0
 800153c:	4808      	ldr	r0, [pc, #32]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 800153e:	f008 ff9f 	bl	800a480 <HAL_UARTEx_SetRxFifoThreshold>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001548:	f7ff fe8c 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	@ (8001560 <MX_USART1_UART_Init+0x90>)
 800154e:	f008 ff20 	bl	800a392 <HAL_UARTEx_DisableFifoMode>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001558:	f7ff fe84 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	240002bc 	.word	0x240002bc
 8001564:	40011000 	.word	0x40011000

08001568 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 800156e:	4a23      	ldr	r2, [pc, #140]	@ (80015fc <MX_USART3_UART_Init+0x94>)
 8001570:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001572:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015b0:	4811      	ldr	r0, [pc, #68]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015b2:	f006 ff39 	bl	8008428 <HAL_UART_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015bc:	f7ff fe52 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015c4:	f008 ff1e 	bl	800a404 <HAL_UARTEx_SetTxFifoThreshold>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015ce:	f7ff fe49 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d2:	2100      	movs	r1, #0
 80015d4:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015d6:	f008 ff53 	bl	800a480 <HAL_UARTEx_SetRxFifoThreshold>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015e0:	f7ff fe40 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <MX_USART3_UART_Init+0x90>)
 80015e6:	f008 fed4 	bl	800a392 <HAL_UARTEx_DisableFifoMode>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015f0:	f7ff fe38 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	24000350 	.word	0x24000350
 80015fc:	40004800 	.word	0x40004800

08001600 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0bc      	sub	sp, #240	@ 0xf0
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	22c0      	movs	r2, #192	@ 0xc0
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f00a fafc 	bl	800bc1e <memset>
  if(uartHandle->Instance==USART1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a55      	ldr	r2, [pc, #340]	@ (8001780 <HAL_UART_MspInit+0x180>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d14e      	bne.n	80016ce <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001630:	f04f 0201 	mov.w	r2, #1
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 0318 	add.w	r3, r7, #24
 8001646:	4618      	mov	r0, r3
 8001648:	f004 f9f0 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001652:	f7ff fe07 	bl	8001264 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001656:	4b4b      	ldr	r3, [pc, #300]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800165c:	4a49      	ldr	r2, [pc, #292]	@ (8001784 <HAL_UART_MspInit+0x184>)
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001666:	4b47      	ldr	r3, [pc, #284]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b43      	ldr	r3, [pc, #268]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167a:	4a42      	ldr	r2, [pc, #264]	@ (8001784 <HAL_UART_MspInit+0x184>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001684:	4b3f      	ldr	r3, [pc, #252]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001692:	23c0      	movs	r3, #192	@ 0xc0
 8001694:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016aa:	2307      	movs	r3, #7
 80016ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016b4:	4619      	mov	r1, r3
 80016b6:	4834      	ldr	r0, [pc, #208]	@ (8001788 <HAL_UART_MspInit+0x188>)
 80016b8:	f002 f9c6 	bl	8003a48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2025      	movs	r0, #37	@ 0x25
 80016c2:	f001 fc28 	bl	8002f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016c6:	2025      	movs	r0, #37	@ 0x25
 80016c8:	f001 fc3f 	bl	8002f4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016cc:	e053      	b.n	8001776 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a2e      	ldr	r2, [pc, #184]	@ (800178c <HAL_UART_MspInit+0x18c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d14e      	bne.n	8001776 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016d8:	f04f 0202 	mov.w	r2, #2
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 f99c 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_UART_MspInit+0xfe>
      Error_Handler();
 80016fa:	f7ff fdb3 	bl	8001264 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001704:	4a1f      	ldr	r2, [pc, #124]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001706:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800170a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800170e:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171c:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_UART_MspInit+0x184>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001722:	4a18      	ldr	r2, [pc, #96]	@ (8001784 <HAL_UART_MspInit+0x184>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800172c:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_UART_MspInit+0x184>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800173a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800173e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001754:	2307      	movs	r3, #7
 8001756:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800175e:	4619      	mov	r1, r3
 8001760:	480b      	ldr	r0, [pc, #44]	@ (8001790 <HAL_UART_MspInit+0x190>)
 8001762:	f002 f971 	bl	8003a48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2027      	movs	r0, #39	@ 0x27
 800176c:	f001 fbd3 	bl	8002f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001770:	2027      	movs	r0, #39	@ 0x27
 8001772:	f001 fbea 	bl	8002f4a <HAL_NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	37f0      	adds	r7, #240	@ 0xf0
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40011000 	.word	0x40011000
 8001784:	58024400 	.word	0x58024400
 8001788:	58020400 	.word	0x58020400
 800178c:	40004800 	.word	0x40004800
 8001790:	58020c00 	.word	0x58020c00

08001794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001794:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80017d0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001798:	f7ff fa32 	bl	8000c00 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800179c:	f7ff f982 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a2:	490d      	ldr	r1, [pc, #52]	@ (80017d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b8:	4c0a      	ldr	r4, [pc, #40]	@ (80017e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017c6:	f00a fa83 	bl	800bcd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff fc91 	bl	80010f0 <main>
  bx  lr
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017d8:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80017dc:	08010274 	.word	0x08010274
  ldr r2, =_sbss
 80017e0:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80017e4:	24003624 	.word	0x24003624

080017e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC3_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f2:	2003      	movs	r0, #3
 80017f4:	f001 fb84 	bl	8002f00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017f8:	f003 ff42 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_Init+0x68>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	4913      	ldr	r1, [pc, #76]	@ (8001858 <HAL_Init+0x6c>)
 800180a:	5ccb      	ldrb	r3, [r1, r3]
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
 8001814:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001816:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <HAL_Init+0x68>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	4a0e      	ldr	r2, [pc, #56]	@ (8001858 <HAL_Init+0x6c>)
 8001820:	5cd3      	ldrb	r3, [r2, r3]
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
 800182c:	4a0b      	ldr	r2, [pc, #44]	@ (800185c <HAL_Init+0x70>)
 800182e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001830:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <HAL_Init+0x74>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001836:	200f      	movs	r0, #15
 8001838:	f000 f814 	bl	8001864 <HAL_InitTick>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e002      	b.n	800184c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001846:	f7ff fd13 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	58024400 	.word	0x58024400
 8001858:	0800fde8 	.word	0x0800fde8
 800185c:	24000004 	.word	0x24000004
 8001860:	24000000 	.word	0x24000000

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800186c:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <HAL_InitTick+0x60>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e021      	b.n	80018bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001878:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <HAL_InitTick+0x64>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <HAL_InitTick+0x60>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f001 fb69 	bl	8002f66 <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018ac:	f001 fb33 	bl	8002f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <HAL_InitTick+0x68>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	2400000c 	.word	0x2400000c
 80018c8:	24000000 	.word	0x24000000
 80018cc:	24000008 	.word	0x24000008

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2400000c 	.word	0x2400000c
 80018f4:	240003e4 	.word	0x240003e4

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	240003e4 	.word	0x240003e4

08001910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff ffee 	bl	80018f8 <HAL_GetTick>
 800191c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001928:	d005      	beq.n	8001936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_Delay+0x44>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001936:	bf00      	nop
 8001938:	f7ff ffde 	bl	80018f8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d8f7      	bhi.n	8001938 <HAL_Delay+0x28>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2400000c 	.word	0x2400000c

08001958 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <HAL_GetREVID+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	0c1b      	lsrs	r3, r3, #16
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	5c001000 	.word	0x5c001000

08001970 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	609a      	str	r2, [r3, #8]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	609a      	str	r2, [r3, #8]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <LL_ADC_SetChannelPreselection+0x24>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	0e9b      	lsrs	r3, r3, #26
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2201      	movs	r2, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	e015      	b.n	8001a28 <LL_ADC_SetChannelPreselection+0x50>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	fa93 f3a3 	rbit	r3, r3
 8001a06:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001a12:	2320      	movs	r3, #32
 8001a14:	e003      	b.n	8001a1e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2201      	movs	r2, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	69d2      	ldr	r2, [r2, #28]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b087      	sub	sp, #28
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3360      	adds	r3, #96	@ 0x60
 8001a50:	461a      	mov	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3360      	adds	r3, #96	@ 0x60
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	601a      	str	r2, [r3, #0]
  }
}
 8001ada:	bf00      	nop
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3330      	adds	r3, #48	@ 0x30
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	4413      	add	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	211f      	movs	r1, #31
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	401a      	ands	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	0e9b      	lsrs	r3, r3, #26
 8001b1e:	f003 011f 	and.w	r1, r3, #31
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b087      	sub	sp, #28
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3314      	adds	r3, #20
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	0e5b      	lsrs	r3, r3, #25
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	4413      	add	r3, r2
 8001b5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	0d1b      	lsrs	r3, r3, #20
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2107      	movs	r1, #7
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	401a      	ands	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	0d1b      	lsrs	r3, r3, #20
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b88:	bf00      	nop
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bac:	43db      	mvns	r3, r3
 8001bae:	401a      	ands	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0318 	and.w	r3, r3, #24
 8001bb6:	4908      	ldr	r1, [pc, #32]	@ (8001bd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bb8:	40d9      	lsrs	r1, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	000fffff 	.word	0x000fffff

08001bdc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 031f 	and.w	r3, r3, #31
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6093      	str	r3, [r2, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	5fffffc0 	.word	0x5fffffc0

08001c1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	6fffffc0 	.word	0x6fffffc0

08001c6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c80:	d101      	bne.n	8001c86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <LL_ADC_Enable+0x24>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	7fffffc0 	.word	0x7fffffc0

08001cbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <LL_ADC_IsEnabled+0x18>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <LL_ADC_IsEnabled+0x1a>
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <LL_ADC_REG_StartConversion+0x24>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	f043 0204 	orr.w	r2, r3, #4
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	7fffffc0 	.word	0x7fffffc0

08001d0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d101      	bne.n	8001d24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d101      	bne.n	8001d4a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b089      	sub	sp, #36	@ 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e18f      	b.n	8002092 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7fe ffd1 	bl	8000d28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff3f 	bl	8001c1c <LL_ADC_IsDeepPowerDownEnabled>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d004      	beq.n	8001dae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff25 	bl	8001bf8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff5a 	bl	8001c6c <LL_ADC_IsInternalRegulatorEnabled>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d114      	bne.n	8001de8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff3e 	bl	8001c44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dc8:	4b87      	ldr	r3, [pc, #540]	@ (8001fe8 <HAL_ADC_Init+0x290>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	099b      	lsrs	r3, r3, #6
 8001dce:	4a87      	ldr	r2, [pc, #540]	@ (8001fec <HAL_ADC_Init+0x294>)
 8001dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd4:	099b      	lsrs	r3, r3, #6
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dda:	e002      	b.n	8001de2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f9      	bne.n	8001ddc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff3d 	bl	8001c6c <LL_ADC_IsInternalRegulatorEnabled>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10d      	bne.n	8001e14 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	f043 0210 	orr.w	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff77 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 8001e1e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f040 8129 	bne.w	8002080 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f040 8125 	bne.w	8002080 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e3e:	f043 0202 	orr.w	r2, r3, #2
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff36 	bl	8001cbc <LL_ADC_IsEnabled>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d136      	bne.n	8001ec4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a65      	ldr	r2, [pc, #404]	@ (8001ff0 <HAL_ADC_Init+0x298>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d004      	beq.n	8001e6a <HAL_ADC_Init+0x112>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a63      	ldr	r2, [pc, #396]	@ (8001ff4 <HAL_ADC_Init+0x29c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10e      	bne.n	8001e88 <HAL_ADC_Init+0x130>
 8001e6a:	4861      	ldr	r0, [pc, #388]	@ (8001ff0 <HAL_ADC_Init+0x298>)
 8001e6c:	f7ff ff26 	bl	8001cbc <LL_ADC_IsEnabled>
 8001e70:	4604      	mov	r4, r0
 8001e72:	4860      	ldr	r0, [pc, #384]	@ (8001ff4 <HAL_ADC_Init+0x29c>)
 8001e74:	f7ff ff22 	bl	8001cbc <LL_ADC_IsEnabled>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4323      	orrs	r3, r4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e008      	b.n	8001e9a <HAL_ADC_Init+0x142>
 8001e88:	485b      	ldr	r0, [pc, #364]	@ (8001ff8 <HAL_ADC_Init+0x2a0>)
 8001e8a:	f7ff ff17 	bl	8001cbc <LL_ADC_IsEnabled>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d012      	beq.n	8001ec4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a53      	ldr	r2, [pc, #332]	@ (8001ff0 <HAL_ADC_Init+0x298>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_ADC_Init+0x15a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a51      	ldr	r2, [pc, #324]	@ (8001ff4 <HAL_ADC_Init+0x29c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_Init+0x15e>
 8001eb2:	4a52      	ldr	r2, [pc, #328]	@ (8001ffc <HAL_ADC_Init+0x2a4>)
 8001eb4:	e000      	b.n	8001eb8 <HAL_ADC_Init+0x160>
 8001eb6:	4a52      	ldr	r2, [pc, #328]	@ (8002000 <HAL_ADC_Init+0x2a8>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f7ff fd56 	bl	8001970 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001ec4:	f7ff fd48 	bl	8001958 <HAL_GetREVID>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d914      	bls.n	8001efc <HAL_ADC_Init+0x1a4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d110      	bne.n	8001efc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7d5b      	ldrb	r3, [r3, #21]
 8001ede:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ee4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001eea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7f1b      	ldrb	r3, [r3, #28]
 8001ef0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ef2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ef4:	f043 030c 	orr.w	r3, r3, #12
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	e00d      	b.n	8001f18 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7d5b      	ldrb	r3, [r3, #21]
 8001f00:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f06:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001f0c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7f1b      	ldrb	r3, [r3, #28]
 8001f12:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7f1b      	ldrb	r3, [r3, #28]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d106      	bne.n	8001f2e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	045b      	lsls	r3, r3, #17
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d009      	beq.n	8001f4a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f42:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	4b2c      	ldr	r3, [pc, #176]	@ (8002004 <HAL_ADC_Init+0x2ac>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	69b9      	ldr	r1, [r7, #24]
 8001f5a:	430b      	orrs	r3, r1
 8001f5c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fed2 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 8001f68:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fedf 	bl	8001d32 <LL_ADC_INJ_IsConversionOngoing>
 8001f74:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d15f      	bne.n	800203c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d15c      	bne.n	800203c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7d1b      	ldrb	r3, [r3, #20]
 8001f86:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <HAL_ADC_Init+0x2b0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d130      	bne.n	8002010 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	4b14      	ldr	r3, [pc, #80]	@ (800200c <HAL_ADC_Init+0x2b4>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fc2:	3a01      	subs	r2, #1
 8001fc4:	0411      	lsls	r1, r2, #16
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	611a      	str	r2, [r3, #16]
 8001fe4:	e01c      	b.n	8002020 <HAL_ADC_Init+0x2c8>
 8001fe6:	bf00      	nop
 8001fe8:	24000000 	.word	0x24000000
 8001fec:	053e2d63 	.word	0x053e2d63
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40022100 	.word	0x40022100
 8001ff8:	58026000 	.word	0x58026000
 8001ffc:	40022300 	.word	0x40022300
 8002000:	58026300 	.word	0x58026300
 8002004:	fff0c003 	.word	0xfff0c003
 8002008:	ffffbffc 	.word	0xffffbffc
 800200c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fc82 	bl	8002940 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10c      	bne.n	800205e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	f023 010f 	bic.w	r1, r3, #15
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	1e5a      	subs	r2, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30
 800205c:	e007      	b.n	800206e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 020f 	bic.w	r2, r2, #15
 800206c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	655a      	str	r2, [r3, #84]	@ 0x54
 800207e:	e007      	b.n	8002090 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002084:	f043 0210 	orr.w	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002090:	7ffb      	ldrb	r3, [r7, #31]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	@ 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd90      	pop	{r4, r7, pc}
 800209a:	bf00      	nop

0800209c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a5c      	ldr	r2, [pc, #368]	@ (800221c <HAL_ADC_Start+0x180>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_ADC_Start+0x1c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002220 <HAL_ADC_Start+0x184>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_Start+0x20>
 80020b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002224 <HAL_ADC_Start+0x188>)
 80020ba:	e000      	b.n	80020be <HAL_ADC_Start+0x22>
 80020bc:	4b5a      	ldr	r3, [pc, #360]	@ (8002228 <HAL_ADC_Start+0x18c>)
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fd8c 	bl	8001bdc <LL_ADC_GetMultimode>
 80020c4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fe1e 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 809a 	bne.w	800220c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_Start+0x4a>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e095      	b.n	8002212 <HAL_ADC_Start+0x176>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fb9c 	bl	800282c <ADC_Enable>
 80020f4:	4603      	mov	r3, r0
 80020f6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 8081 	bne.w	8002202 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002104:	4b49      	ldr	r3, [pc, #292]	@ (800222c <HAL_ADC_Start+0x190>)
 8002106:	4013      	ands	r3, r2
 8002108:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a42      	ldr	r2, [pc, #264]	@ (8002220 <HAL_ADC_Start+0x184>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d002      	beq.n	8002120 <HAL_ADC_Start+0x84>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	e000      	b.n	8002122 <HAL_ADC_Start+0x86>
 8002120:	4b3e      	ldr	r3, [pc, #248]	@ (800221c <HAL_ADC_Start+0x180>)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	4293      	cmp	r3, r2
 8002128:	d002      	beq.n	8002130 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002134:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002148:	d106      	bne.n	8002158 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	f023 0206 	bic.w	r2, r3, #6
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	659a      	str	r2, [r3, #88]	@ 0x58
 8002156:	e002      	b.n	800215e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	221c      	movs	r2, #28
 8002164:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a2b      	ldr	r2, [pc, #172]	@ (8002220 <HAL_ADC_Start+0x184>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d002      	beq.n	800217e <HAL_ADC_Start+0xe2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	e000      	b.n	8002180 <HAL_ADC_Start+0xe4>
 800217e:	4b27      	ldr	r3, [pc, #156]	@ (800221c <HAL_ADC_Start+0x180>)
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	4293      	cmp	r3, r2
 8002186:	d008      	beq.n	800219a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d002      	beq.n	800219a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b09      	cmp	r3, #9
 8002198:	d114      	bne.n	80021c4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fd91 	bl	8001ce4 <LL_ADC_REG_StartConversion>
 80021c2:	e025      	b.n	8002210 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <HAL_ADC_Start+0x184>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d002      	beq.n	80021e0 <HAL_ADC_Start+0x144>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	e000      	b.n	80021e2 <HAL_ADC_Start+0x146>
 80021e0:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <HAL_ADC_Start+0x180>)
 80021e2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00f      	beq.n	8002210 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8002200:	e006      	b.n	8002210 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800220a:	e001      	b.n	8002210 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800220c:	2302      	movs	r3, #2
 800220e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002210:	7dfb      	ldrb	r3, [r7, #23]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40022000 	.word	0x40022000
 8002220:	40022100 	.word	0x40022100
 8002224:	40022300 	.word	0x40022300
 8002228:	58026300 	.word	0x58026300
 800222c:	fffff0fe 	.word	0xfffff0fe

08002230 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b08d      	sub	sp, #52	@ 0x34
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a65      	ldr	r2, [pc, #404]	@ (80023fc <HAL_ADC_ConfigChannel+0x1b0>)
 8002266:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x2a>
 8002272:	2302      	movs	r3, #2
 8002274:	e2c7      	b.n	8002806 <HAL_ADC_ConfigChannel+0x5ba>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fd42 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 82ac 	bne.w	80027e8 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db2c      	blt.n	80022f2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d108      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x6a>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	2201      	movs	r2, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	e016      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x98>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	613b      	str	r3, [r7, #16]
  return result;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80022ce:	2320      	movs	r3, #32
 80022d0:	e003      	b.n	80022da <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2201      	movs	r2, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	69d1      	ldr	r1, [r2, #28]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	430b      	orrs	r3, r1
 80022f0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6859      	ldr	r1, [r3, #4]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	f7ff fbf1 	bl	8001ae6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fcff 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 800230e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fd0c 	bl	8001d32 <LL_ADC_INJ_IsConversionOngoing>
 800231a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800231c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 80b8 	bne.w	8002494 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80b4 	bne.w	8002494 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6819      	ldr	r1, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	461a      	mov	r2, r3
 800233a:	f7ff fc00 	bl	8001b3e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800233e:	4b30      	ldr	r3, [pc, #192]	@ (8002400 <HAL_ADC_ConfigChannel+0x1b4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800234a:	d10b      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x118>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	e01d      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x154>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10b      	bne.n	800238a <HAL_ADC_ConfigChannel+0x13e>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	e00a      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x154>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d02c      	beq.n	8002404 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6919      	ldr	r1, [r3, #16]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f7ff fb41 	bl	8001a3e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6919      	ldr	r1, [r3, #16]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	7e5b      	ldrb	r3, [r3, #25]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d102      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x186>
 80023cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80023d0:	e000      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x188>
 80023d2:	2300      	movs	r3, #0
 80023d4:	461a      	mov	r2, r3
 80023d6:	f7ff fb6b 	bl	8001ab0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	7e1b      	ldrb	r3, [r3, #24]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d102      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1a4>
 80023ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023ee:	e000      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x1a6>
 80023f0:	2300      	movs	r3, #0
 80023f2:	461a      	mov	r2, r3
 80023f4:	f7ff fb43 	bl	8001a7e <LL_ADC_SetDataRightShift>
 80023f8:	e04c      	b.n	8002494 <HAL_ADC_ConfigChannel+0x248>
 80023fa:	bf00      	nop
 80023fc:	47ff0000 	.word	0x47ff0000
 8002400:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800240a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	069b      	lsls	r3, r3, #26
 8002414:	429a      	cmp	r2, r3
 8002416:	d107      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002426:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800242e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	069b      	lsls	r3, r3, #26
 8002438:	429a      	cmp	r2, r3
 800243a:	d107      	bne.n	800244c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800244a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002452:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	069b      	lsls	r3, r3, #26
 800245c:	429a      	cmp	r2, r3
 800245e:	d107      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800246e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002476:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	069b      	lsls	r3, r3, #26
 8002480:	429a      	cmp	r2, r3
 8002482:	d107      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002492:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fc0f 	bl	8001cbc <LL_ADC_IsEnabled>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 81aa 	bne.w	80027fa <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f7ff fb6e 	bl	8001b94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a87      	ldr	r2, [pc, #540]	@ (80026dc <HAL_ADC_ConfigChannel+0x490>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	f040 809a 	bne.w	80025f8 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4984      	ldr	r1, [pc, #528]	@ (80026e0 <HAL_ADC_ConfigChannel+0x494>)
 80024ce:	428b      	cmp	r3, r1
 80024d0:	d147      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x316>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4983      	ldr	r1, [pc, #524]	@ (80026e4 <HAL_ADC_ConfigChannel+0x498>)
 80024d8:	428b      	cmp	r3, r1
 80024da:	d040      	beq.n	800255e <HAL_ADC_ConfigChannel+0x312>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4981      	ldr	r1, [pc, #516]	@ (80026e8 <HAL_ADC_ConfigChannel+0x49c>)
 80024e2:	428b      	cmp	r3, r1
 80024e4:	d039      	beq.n	800255a <HAL_ADC_ConfigChannel+0x30e>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4980      	ldr	r1, [pc, #512]	@ (80026ec <HAL_ADC_ConfigChannel+0x4a0>)
 80024ec:	428b      	cmp	r3, r1
 80024ee:	d032      	beq.n	8002556 <HAL_ADC_ConfigChannel+0x30a>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	497e      	ldr	r1, [pc, #504]	@ (80026f0 <HAL_ADC_ConfigChannel+0x4a4>)
 80024f6:	428b      	cmp	r3, r1
 80024f8:	d02b      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x306>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	497d      	ldr	r1, [pc, #500]	@ (80026f4 <HAL_ADC_ConfigChannel+0x4a8>)
 8002500:	428b      	cmp	r3, r1
 8002502:	d024      	beq.n	800254e <HAL_ADC_ConfigChannel+0x302>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	497b      	ldr	r1, [pc, #492]	@ (80026f8 <HAL_ADC_ConfigChannel+0x4ac>)
 800250a:	428b      	cmp	r3, r1
 800250c:	d01d      	beq.n	800254a <HAL_ADC_ConfigChannel+0x2fe>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	497a      	ldr	r1, [pc, #488]	@ (80026fc <HAL_ADC_ConfigChannel+0x4b0>)
 8002514:	428b      	cmp	r3, r1
 8002516:	d016      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x2fa>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4978      	ldr	r1, [pc, #480]	@ (8002700 <HAL_ADC_ConfigChannel+0x4b4>)
 800251e:	428b      	cmp	r3, r1
 8002520:	d00f      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x2f6>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4977      	ldr	r1, [pc, #476]	@ (8002704 <HAL_ADC_ConfigChannel+0x4b8>)
 8002528:	428b      	cmp	r3, r1
 800252a:	d008      	beq.n	800253e <HAL_ADC_ConfigChannel+0x2f2>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4975      	ldr	r1, [pc, #468]	@ (8002708 <HAL_ADC_ConfigChannel+0x4bc>)
 8002532:	428b      	cmp	r3, r1
 8002534:	d101      	bne.n	800253a <HAL_ADC_ConfigChannel+0x2ee>
 8002536:	4b75      	ldr	r3, [pc, #468]	@ (800270c <HAL_ADC_ConfigChannel+0x4c0>)
 8002538:	e05a      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 800253a:	2300      	movs	r3, #0
 800253c:	e058      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 800253e:	4b74      	ldr	r3, [pc, #464]	@ (8002710 <HAL_ADC_ConfigChannel+0x4c4>)
 8002540:	e056      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 8002542:	4b74      	ldr	r3, [pc, #464]	@ (8002714 <HAL_ADC_ConfigChannel+0x4c8>)
 8002544:	e054      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 8002546:	4b6e      	ldr	r3, [pc, #440]	@ (8002700 <HAL_ADC_ConfigChannel+0x4b4>)
 8002548:	e052      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 800254a:	4b6c      	ldr	r3, [pc, #432]	@ (80026fc <HAL_ADC_ConfigChannel+0x4b0>)
 800254c:	e050      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 800254e:	4b72      	ldr	r3, [pc, #456]	@ (8002718 <HAL_ADC_ConfigChannel+0x4cc>)
 8002550:	e04e      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 8002552:	4b72      	ldr	r3, [pc, #456]	@ (800271c <HAL_ADC_ConfigChannel+0x4d0>)
 8002554:	e04c      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 8002556:	4b72      	ldr	r3, [pc, #456]	@ (8002720 <HAL_ADC_ConfigChannel+0x4d4>)
 8002558:	e04a      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 800255a:	4b72      	ldr	r3, [pc, #456]	@ (8002724 <HAL_ADC_ConfigChannel+0x4d8>)
 800255c:	e048      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 800255e:	2301      	movs	r3, #1
 8002560:	e046      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4970      	ldr	r1, [pc, #448]	@ (8002728 <HAL_ADC_ConfigChannel+0x4dc>)
 8002568:	428b      	cmp	r3, r1
 800256a:	d140      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x3a2>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	495c      	ldr	r1, [pc, #368]	@ (80026e4 <HAL_ADC_ConfigChannel+0x498>)
 8002572:	428b      	cmp	r3, r1
 8002574:	d039      	beq.n	80025ea <HAL_ADC_ConfigChannel+0x39e>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	495b      	ldr	r1, [pc, #364]	@ (80026e8 <HAL_ADC_ConfigChannel+0x49c>)
 800257c:	428b      	cmp	r3, r1
 800257e:	d032      	beq.n	80025e6 <HAL_ADC_ConfigChannel+0x39a>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4959      	ldr	r1, [pc, #356]	@ (80026ec <HAL_ADC_ConfigChannel+0x4a0>)
 8002586:	428b      	cmp	r3, r1
 8002588:	d02b      	beq.n	80025e2 <HAL_ADC_ConfigChannel+0x396>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4958      	ldr	r1, [pc, #352]	@ (80026f0 <HAL_ADC_ConfigChannel+0x4a4>)
 8002590:	428b      	cmp	r3, r1
 8002592:	d024      	beq.n	80025de <HAL_ADC_ConfigChannel+0x392>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4956      	ldr	r1, [pc, #344]	@ (80026f4 <HAL_ADC_ConfigChannel+0x4a8>)
 800259a:	428b      	cmp	r3, r1
 800259c:	d01d      	beq.n	80025da <HAL_ADC_ConfigChannel+0x38e>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4955      	ldr	r1, [pc, #340]	@ (80026f8 <HAL_ADC_ConfigChannel+0x4ac>)
 80025a4:	428b      	cmp	r3, r1
 80025a6:	d016      	beq.n	80025d6 <HAL_ADC_ConfigChannel+0x38a>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4953      	ldr	r1, [pc, #332]	@ (80026fc <HAL_ADC_ConfigChannel+0x4b0>)
 80025ae:	428b      	cmp	r3, r1
 80025b0:	d00f      	beq.n	80025d2 <HAL_ADC_ConfigChannel+0x386>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4952      	ldr	r1, [pc, #328]	@ (8002700 <HAL_ADC_ConfigChannel+0x4b4>)
 80025b8:	428b      	cmp	r3, r1
 80025ba:	d008      	beq.n	80025ce <HAL_ADC_ConfigChannel+0x382>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4951      	ldr	r1, [pc, #324]	@ (8002708 <HAL_ADC_ConfigChannel+0x4bc>)
 80025c2:	428b      	cmp	r3, r1
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x37e>
 80025c6:	4b51      	ldr	r3, [pc, #324]	@ (800270c <HAL_ADC_ConfigChannel+0x4c0>)
 80025c8:	e012      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 80025ca:	2300      	movs	r3, #0
 80025cc:	e010      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 80025ce:	4b51      	ldr	r3, [pc, #324]	@ (8002714 <HAL_ADC_ConfigChannel+0x4c8>)
 80025d0:	e00e      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 80025d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002700 <HAL_ADC_ConfigChannel+0x4b4>)
 80025d4:	e00c      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 80025d6:	4b49      	ldr	r3, [pc, #292]	@ (80026fc <HAL_ADC_ConfigChannel+0x4b0>)
 80025d8:	e00a      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 80025da:	4b4f      	ldr	r3, [pc, #316]	@ (8002718 <HAL_ADC_ConfigChannel+0x4cc>)
 80025dc:	e008      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 80025de:	4b4f      	ldr	r3, [pc, #316]	@ (800271c <HAL_ADC_ConfigChannel+0x4d0>)
 80025e0:	e006      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 80025e2:	4b4f      	ldr	r3, [pc, #316]	@ (8002720 <HAL_ADC_ConfigChannel+0x4d4>)
 80025e4:	e004      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 80025e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002724 <HAL_ADC_ConfigChannel+0x4d8>)
 80025e8:	e002      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3a4>
 80025ee:	2300      	movs	r3, #0
 80025f0:	4619      	mov	r1, r3
 80025f2:	4610      	mov	r0, r2
 80025f4:	f7ff f9f0 	bl	80019d8 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f280 80fc 	bge.w	80027fa <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a36      	ldr	r2, [pc, #216]	@ (80026e0 <HAL_ADC_ConfigChannel+0x494>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x3ca>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a45      	ldr	r2, [pc, #276]	@ (8002728 <HAL_ADC_ConfigChannel+0x4dc>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_ADC_ConfigChannel+0x3ce>
 8002616:	4b45      	ldr	r3, [pc, #276]	@ (800272c <HAL_ADC_ConfigChannel+0x4e0>)
 8002618:	e000      	b.n	800261c <HAL_ADC_ConfigChannel+0x3d0>
 800261a:	4b45      	ldr	r3, [pc, #276]	@ (8002730 <HAL_ADC_ConfigChannel+0x4e4>)
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f9cd 	bl	80019bc <LL_ADC_GetCommonPathInternalCh>
 8002622:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2d      	ldr	r2, [pc, #180]	@ (80026e0 <HAL_ADC_ConfigChannel+0x494>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_ADC_ConfigChannel+0x3ec>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a3d      	ldr	r2, [pc, #244]	@ (8002728 <HAL_ADC_ConfigChannel+0x4dc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d10e      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x40a>
 8002638:	4829      	ldr	r0, [pc, #164]	@ (80026e0 <HAL_ADC_ConfigChannel+0x494>)
 800263a:	f7ff fb3f 	bl	8001cbc <LL_ADC_IsEnabled>
 800263e:	4604      	mov	r4, r0
 8002640:	4839      	ldr	r0, [pc, #228]	@ (8002728 <HAL_ADC_ConfigChannel+0x4dc>)
 8002642:	f7ff fb3b 	bl	8001cbc <LL_ADC_IsEnabled>
 8002646:	4603      	mov	r3, r0
 8002648:	4323      	orrs	r3, r4
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	e008      	b.n	8002668 <HAL_ADC_ConfigChannel+0x41c>
 8002656:	4837      	ldr	r0, [pc, #220]	@ (8002734 <HAL_ADC_ConfigChannel+0x4e8>)
 8002658:	f7ff fb30 	bl	8001cbc <LL_ADC_IsEnabled>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80b3 	beq.w	80027d4 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a31      	ldr	r2, [pc, #196]	@ (8002738 <HAL_ADC_ConfigChannel+0x4ec>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d165      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x4f8>
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d160      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a2b      	ldr	r2, [pc, #172]	@ (8002734 <HAL_ADC_ConfigChannel+0x4e8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	f040 80b6 	bne.w	80027fa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a13      	ldr	r2, [pc, #76]	@ (80026e0 <HAL_ADC_ConfigChannel+0x494>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d004      	beq.n	80026a2 <HAL_ADC_ConfigChannel+0x456>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a22      	ldr	r2, [pc, #136]	@ (8002728 <HAL_ADC_ConfigChannel+0x4dc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x45a>
 80026a2:	4a22      	ldr	r2, [pc, #136]	@ (800272c <HAL_ADC_ConfigChannel+0x4e0>)
 80026a4:	e000      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x45c>
 80026a6:	4a22      	ldr	r2, [pc, #136]	@ (8002730 <HAL_ADC_ConfigChannel+0x4e4>)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026ae:	4619      	mov	r1, r3
 80026b0:	4610      	mov	r0, r2
 80026b2:	f7ff f970 	bl	8001996 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026b6:	4b21      	ldr	r3, [pc, #132]	@ (800273c <HAL_ADC_ConfigChannel+0x4f0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	4a20      	ldr	r2, [pc, #128]	@ (8002740 <HAL_ADC_ConfigChannel+0x4f4>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	3301      	adds	r3, #1
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80026ca:	e002      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f9      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026d8:	e08f      	b.n	80027fa <HAL_ADC_ConfigChannel+0x5ae>
 80026da:	bf00      	nop
 80026dc:	47ff0000 	.word	0x47ff0000
 80026e0:	40022000 	.word	0x40022000
 80026e4:	04300002 	.word	0x04300002
 80026e8:	08600004 	.word	0x08600004
 80026ec:	0c900008 	.word	0x0c900008
 80026f0:	10c00010 	.word	0x10c00010
 80026f4:	14f00020 	.word	0x14f00020
 80026f8:	2a000400 	.word	0x2a000400
 80026fc:	2e300800 	.word	0x2e300800
 8002700:	32601000 	.word	0x32601000
 8002704:	43210000 	.word	0x43210000
 8002708:	4b840000 	.word	0x4b840000
 800270c:	4fb80000 	.word	0x4fb80000
 8002710:	47520000 	.word	0x47520000
 8002714:	36902000 	.word	0x36902000
 8002718:	25b00200 	.word	0x25b00200
 800271c:	21800100 	.word	0x21800100
 8002720:	1d500080 	.word	0x1d500080
 8002724:	19200040 	.word	0x19200040
 8002728:	40022100 	.word	0x40022100
 800272c:	40022300 	.word	0x40022300
 8002730:	58026300 	.word	0x58026300
 8002734:	58026000 	.word	0x58026000
 8002738:	cb840000 	.word	0xcb840000
 800273c:	24000000 	.word	0x24000000
 8002740:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a31      	ldr	r2, [pc, #196]	@ (8002810 <HAL_ADC_ConfigChannel+0x5c4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d11e      	bne.n	800278c <HAL_ADC_ConfigChannel+0x540>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d119      	bne.n	800278c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a2d      	ldr	r2, [pc, #180]	@ (8002814 <HAL_ADC_ConfigChannel+0x5c8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d14b      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a2c      	ldr	r2, [pc, #176]	@ (8002818 <HAL_ADC_ConfigChannel+0x5cc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d004      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x52a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2a      	ldr	r2, [pc, #168]	@ (800281c <HAL_ADC_ConfigChannel+0x5d0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_ADC_ConfigChannel+0x52e>
 8002776:	4a2a      	ldr	r2, [pc, #168]	@ (8002820 <HAL_ADC_ConfigChannel+0x5d4>)
 8002778:	e000      	b.n	800277c <HAL_ADC_ConfigChannel+0x530>
 800277a:	4a2a      	ldr	r2, [pc, #168]	@ (8002824 <HAL_ADC_ConfigChannel+0x5d8>)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f7ff f906 	bl	8001996 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800278a:	e036      	b.n	80027fa <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a25      	ldr	r2, [pc, #148]	@ (8002828 <HAL_ADC_ConfigChannel+0x5dc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d131      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x5ae>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d12c      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002814 <HAL_ADC_ConfigChannel+0x5c8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d127      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002818 <HAL_ADC_ConfigChannel+0x5cc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_ADC_ConfigChannel+0x572>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a18      	ldr	r2, [pc, #96]	@ (800281c <HAL_ADC_ConfigChannel+0x5d0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x576>
 80027be:	4a18      	ldr	r2, [pc, #96]	@ (8002820 <HAL_ADC_ConfigChannel+0x5d4>)
 80027c0:	e000      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x578>
 80027c2:	4a18      	ldr	r2, [pc, #96]	@ (8002824 <HAL_ADC_ConfigChannel+0x5d8>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027ca:	4619      	mov	r1, r3
 80027cc:	4610      	mov	r0, r2
 80027ce:	f7ff f8e2 	bl	8001996 <LL_ADC_SetCommonPathInternalCh>
 80027d2:	e012      	b.n	80027fa <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d8:	f043 0220 	orr.w	r2, r3, #32
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80027e6:	e008      	b.n	80027fa <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002806:	4618      	mov	r0, r3
 8002808:	3734      	adds	r7, #52	@ 0x34
 800280a:	46bd      	mov	sp, r7
 800280c:	bd90      	pop	{r4, r7, pc}
 800280e:	bf00      	nop
 8002810:	c7520000 	.word	0xc7520000
 8002814:	58026000 	.word	0x58026000
 8002818:	40022000 	.word	0x40022000
 800281c:	40022100 	.word	0x40022100
 8002820:	40022300 	.word	0x40022300
 8002824:	58026300 	.word	0x58026300
 8002828:	cfb80000 	.word	0xcfb80000

0800282c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fa3f 	bl	8001cbc <LL_ADC_IsEnabled>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d16e      	bne.n	8002922 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	4b38      	ldr	r3, [pc, #224]	@ (800292c <ADC_Enable+0x100>)
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002856:	f043 0210 	orr.w	r2, r3, #16
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e05a      	b.n	8002924 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fa0e 	bl	8001c94 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002878:	f7ff f83e 	bl	80018f8 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a2b      	ldr	r2, [pc, #172]	@ (8002930 <ADC_Enable+0x104>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <ADC_Enable+0x66>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a29      	ldr	r2, [pc, #164]	@ (8002934 <ADC_Enable+0x108>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <ADC_Enable+0x6a>
 8002892:	4b29      	ldr	r3, [pc, #164]	@ (8002938 <ADC_Enable+0x10c>)
 8002894:	e000      	b.n	8002898 <ADC_Enable+0x6c>
 8002896:	4b29      	ldr	r3, [pc, #164]	@ (800293c <ADC_Enable+0x110>)
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff f99f 	bl	8001bdc <LL_ADC_GetMultimode>
 800289e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a23      	ldr	r2, [pc, #140]	@ (8002934 <ADC_Enable+0x108>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d002      	beq.n	80028b0 <ADC_Enable+0x84>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	e000      	b.n	80028b2 <ADC_Enable+0x86>
 80028b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002930 <ADC_Enable+0x104>)
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d02c      	beq.n	8002914 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d130      	bne.n	8002922 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028c0:	e028      	b.n	8002914 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f9f8 	bl	8001cbc <LL_ADC_IsEnabled>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d104      	bne.n	80028dc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff f9dc 	bl	8001c94 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028dc:	f7ff f80c 	bl	80018f8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d914      	bls.n	8002914 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d00d      	beq.n	8002914 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fc:	f043 0210 	orr.w	r2, r3, #16
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e007      	b.n	8002924 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d1cf      	bne.n	80028c2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	8000003f 	.word	0x8000003f
 8002930:	40022000 	.word	0x40022000
 8002934:	40022100 	.word	0x40022100
 8002938:	40022300 	.word	0x40022300
 800293c:	58026300 	.word	0x58026300

08002940 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a7a      	ldr	r2, [pc, #488]	@ (8002b38 <ADC_ConfigureBoostMode+0x1f8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <ADC_ConfigureBoostMode+0x1c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a79      	ldr	r2, [pc, #484]	@ (8002b3c <ADC_ConfigureBoostMode+0x1fc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d109      	bne.n	8002970 <ADC_ConfigureBoostMode+0x30>
 800295c:	4b78      	ldr	r3, [pc, #480]	@ (8002b40 <ADC_ConfigureBoostMode+0x200>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	e008      	b.n	8002982 <ADC_ConfigureBoostMode+0x42>
 8002970:	4b74      	ldr	r3, [pc, #464]	@ (8002b44 <ADC_ConfigureBoostMode+0x204>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01c      	beq.n	80029c0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002986:	f002 fff5 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 800298a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002994:	d010      	beq.n	80029b8 <ADC_ConfigureBoostMode+0x78>
 8002996:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800299a:	d873      	bhi.n	8002a84 <ADC_ConfigureBoostMode+0x144>
 800299c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a0:	d002      	beq.n	80029a8 <ADC_ConfigureBoostMode+0x68>
 80029a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029a6:	d16d      	bne.n	8002a84 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b4:	60fb      	str	r3, [r7, #12]
        break;
 80029b6:	e068      	b.n	8002a8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	60fb      	str	r3, [r7, #12]
        break;
 80029be:	e064      	b.n	8002a8a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029c0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80029c4:	f04f 0100 	mov.w	r1, #0
 80029c8:	f004 fa3a 	bl	8006e40 <HAL_RCCEx_GetPeriphCLKFreq>
 80029cc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029d6:	d051      	beq.n	8002a7c <ADC_ConfigureBoostMode+0x13c>
 80029d8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029dc:	d854      	bhi.n	8002a88 <ADC_ConfigureBoostMode+0x148>
 80029de:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80029e2:	d047      	beq.n	8002a74 <ADC_ConfigureBoostMode+0x134>
 80029e4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80029e8:	d84e      	bhi.n	8002a88 <ADC_ConfigureBoostMode+0x148>
 80029ea:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80029ee:	d03d      	beq.n	8002a6c <ADC_ConfigureBoostMode+0x12c>
 80029f0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80029f4:	d848      	bhi.n	8002a88 <ADC_ConfigureBoostMode+0x148>
 80029f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029fa:	d033      	beq.n	8002a64 <ADC_ConfigureBoostMode+0x124>
 80029fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a00:	d842      	bhi.n	8002a88 <ADC_ConfigureBoostMode+0x148>
 8002a02:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a06:	d029      	beq.n	8002a5c <ADC_ConfigureBoostMode+0x11c>
 8002a08:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a0c:	d83c      	bhi.n	8002a88 <ADC_ConfigureBoostMode+0x148>
 8002a0e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a12:	d01a      	beq.n	8002a4a <ADC_ConfigureBoostMode+0x10a>
 8002a14:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a18:	d836      	bhi.n	8002a88 <ADC_ConfigureBoostMode+0x148>
 8002a1a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a1e:	d014      	beq.n	8002a4a <ADC_ConfigureBoostMode+0x10a>
 8002a20:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a24:	d830      	bhi.n	8002a88 <ADC_ConfigureBoostMode+0x148>
 8002a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a2a:	d00e      	beq.n	8002a4a <ADC_ConfigureBoostMode+0x10a>
 8002a2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a30:	d82a      	bhi.n	8002a88 <ADC_ConfigureBoostMode+0x148>
 8002a32:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a36:	d008      	beq.n	8002a4a <ADC_ConfigureBoostMode+0x10a>
 8002a38:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a3c:	d824      	bhi.n	8002a88 <ADC_ConfigureBoostMode+0x148>
 8002a3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a42:	d002      	beq.n	8002a4a <ADC_ConfigureBoostMode+0x10a>
 8002a44:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a48:	d11e      	bne.n	8002a88 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	0c9b      	lsrs	r3, r3, #18
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a58:	60fb      	str	r3, [r7, #12]
        break;
 8002a5a:	e016      	b.n	8002a8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]
        break;
 8002a62:	e012      	b.n	8002a8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	60fb      	str	r3, [r7, #12]
        break;
 8002a6a:	e00e      	b.n	8002a8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	60fb      	str	r3, [r7, #12]
        break;
 8002a72:	e00a      	b.n	8002a8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	09db      	lsrs	r3, r3, #7
 8002a78:	60fb      	str	r3, [r7, #12]
        break;
 8002a7a:	e006      	b.n	8002a8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	60fb      	str	r3, [r7, #12]
        break;
 8002a82:	e002      	b.n	8002a8a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002a84:	bf00      	nop
 8002a86:	e000      	b.n	8002a8a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002a88:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a8a:	f7fe ff65 	bl	8001958 <HAL_GetREVID>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d815      	bhi.n	8002ac4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8002b48 <ADC_ConfigureBoostMode+0x208>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d908      	bls.n	8002ab2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ab0:	e03e      	b.n	8002b30 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ac0:	609a      	str	r2, [r3, #8]
}
 8002ac2:	e035      	b.n	8002b30 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b4c <ADC_ConfigureBoostMode+0x20c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d808      	bhi.n	8002ae4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ae0:	609a      	str	r2, [r3, #8]
}
 8002ae2:	e025      	b.n	8002b30 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b50 <ADC_ConfigureBoostMode+0x210>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d80a      	bhi.n	8002b02 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002afe:	609a      	str	r2, [r3, #8]
}
 8002b00:	e016      	b.n	8002b30 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a13      	ldr	r2, [pc, #76]	@ (8002b54 <ADC_ConfigureBoostMode+0x214>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d80a      	bhi.n	8002b20 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1c:	609a      	str	r2, [r3, #8]
}
 8002b1e:	e007      	b.n	8002b30 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002b2e:	609a      	str	r2, [r3, #8]
}
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40022000 	.word	0x40022000
 8002b3c:	40022100 	.word	0x40022100
 8002b40:	40022300 	.word	0x40022300
 8002b44:	58026300 	.word	0x58026300
 8002b48:	01312d00 	.word	0x01312d00
 8002b4c:	005f5e10 	.word	0x005f5e10
 8002b50:	00bebc20 	.word	0x00bebc20
 8002b54:	017d7840 	.word	0x017d7840

08002b58 <LL_ADC_IsEnabled>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <LL_ADC_IsEnabled+0x18>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <LL_ADC_IsEnabled+0x1a>
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <LL_ADC_REG_IsConversionOngoing>:
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d101      	bne.n	8002b96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b09f      	sub	sp, #124	@ 0x7c
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e0be      	b.n	8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a5c      	ldr	r2, [pc, #368]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d102      	bne.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bdc:	4b5b      	ldr	r3, [pc, #364]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	e001      	b.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e09d      	b.n	8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ffb9 	bl	8002b7e <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ffb3 	bl	8002b7e <LL_ADC_REG_IsConversionOngoing>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d17f      	bne.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d17c      	bne.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a47      	ldr	r2, [pc, #284]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a46      	ldr	r2, [pc, #280]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002c38:	4b45      	ldr	r3, [pc, #276]	@ (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c3a:	e000      	b.n	8002c3e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002c3c:	4b45      	ldr	r3, [pc, #276]	@ (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c3e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d039      	beq.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c58:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a38      	ldr	r2, [pc, #224]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10e      	bne.n	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c6e:	4836      	ldr	r0, [pc, #216]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c70:	f7ff ff72 	bl	8002b58 <LL_ADC_IsEnabled>
 8002c74:	4604      	mov	r4, r0
 8002c76:	4835      	ldr	r0, [pc, #212]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c78:	f7ff ff6e 	bl	8002b58 <LL_ADC_IsEnabled>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4323      	orrs	r3, r4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e008      	b.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002c8c:	4832      	ldr	r0, [pc, #200]	@ (8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c8e:	f7ff ff63 	bl	8002b58 <LL_ADC_IsEnabled>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d047      	beq.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8002d5c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	6811      	ldr	r1, [r2, #0]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	6892      	ldr	r2, [r2, #8]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cb8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cba:	e03a      	b.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cc6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d10e      	bne.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002cdc:	481a      	ldr	r0, [pc, #104]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cde:	f7ff ff3b 	bl	8002b58 <LL_ADC_IsEnabled>
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	4819      	ldr	r0, [pc, #100]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ce6:	f7ff ff37 	bl	8002b58 <LL_ADC_IsEnabled>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4323      	orrs	r3, r4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	e008      	b.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002cfa:	4817      	ldr	r0, [pc, #92]	@ (8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002cfc:	f7ff ff2c 	bl	8002b58 <LL_ADC_IsEnabled>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf0c      	ite	eq
 8002d06:	2301      	moveq	r3, #1
 8002d08:	2300      	movne	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	4b11      	ldr	r3, [pc, #68]	@ (8002d5c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d1a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d1c:	e009      	b.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d22:	f043 0220 	orr.w	r2, r3, #32
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d30:	e000      	b.n	8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d32:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d3c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	377c      	adds	r7, #124	@ 0x7c
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd90      	pop	{r4, r7, pc}
 8002d48:	40022000 	.word	0x40022000
 8002d4c:	40022100 	.word	0x40022100
 8002d50:	40022300 	.word	0x40022300
 8002d54:	58026300 	.word	0x58026300
 8002d58:	58026000 	.word	0x58026000
 8002d5c:	fffff0e0 	.word	0xfffff0e0

08002d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <__NVIC_SetPriorityGrouping+0x40>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d88:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <__NVIC_SetPriorityGrouping+0x40>)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	60d3      	str	r3, [r2, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00
 8002da4:	05fa0000 	.word	0x05fa0000

08002da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	f003 0307 	and.w	r3, r3, #7
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	db0b      	blt.n	8002dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	4907      	ldr	r1, [pc, #28]	@ (8002dfc <__NVIC_EnableIRQ+0x38>)
 8002dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2001      	movs	r0, #1
 8002de6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e100 	.word	0xe000e100

08002e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db0a      	blt.n	8002e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	490c      	ldr	r1, [pc, #48]	@ (8002e4c <__NVIC_SetPriority+0x4c>)
 8002e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	440b      	add	r3, r1
 8002e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e28:	e00a      	b.n	8002e40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4908      	ldr	r1, [pc, #32]	@ (8002e50 <__NVIC_SetPriority+0x50>)
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	3b04      	subs	r3, #4
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	761a      	strb	r2, [r3, #24]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000e100 	.word	0xe000e100
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	@ 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f1c3 0307 	rsb	r3, r3, #7
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	bf28      	it	cs
 8002e72:	2304      	movcs	r3, #4
 8002e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d902      	bls.n	8002e84 <NVIC_EncodePriority+0x30>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3b03      	subs	r3, #3
 8002e82:	e000      	b.n	8002e86 <NVIC_EncodePriority+0x32>
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	401a      	ands	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	43d9      	mvns	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	4313      	orrs	r3, r2
         );
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	@ 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ecc:	d301      	bcc.n	8002ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00f      	b.n	8002ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <SysTick_Config+0x40>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eda:	210f      	movs	r1, #15
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ee0:	f7ff ff8e 	bl	8002e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee4:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <SysTick_Config+0x40>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eea:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <SysTick_Config+0x40>)
 8002eec:	2207      	movs	r2, #7
 8002eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	e000e010 	.word	0xe000e010

08002f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff29 	bl	8002d60 <__NVIC_SetPriorityGrouping>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f24:	f7ff ff40 	bl	8002da8 <__NVIC_GetPriorityGrouping>
 8002f28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	6978      	ldr	r0, [r7, #20]
 8002f30:	f7ff ff90 	bl	8002e54 <NVIC_EncodePriority>
 8002f34:	4602      	mov	r2, r0
 8002f36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff5f 	bl	8002e00 <__NVIC_SetPriority>
}
 8002f42:	bf00      	nop
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff33 	bl	8002dc4 <__NVIC_EnableIRQ>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ffa4 	bl	8002ebc <SysTick_Config>
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f88:	f7fe fcb6 	bl	80018f8 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e2dc      	b.n	8003552 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d008      	beq.n	8002fb6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2280      	movs	r2, #128	@ 0x80
 8002fa8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e2cd      	b.n	8003552 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a76      	ldr	r2, [pc, #472]	@ (8003194 <HAL_DMA_Abort+0x214>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d04a      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a74      	ldr	r2, [pc, #464]	@ (8003198 <HAL_DMA_Abort+0x218>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d045      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a73      	ldr	r2, [pc, #460]	@ (800319c <HAL_DMA_Abort+0x21c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d040      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a71      	ldr	r2, [pc, #452]	@ (80031a0 <HAL_DMA_Abort+0x220>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d03b      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a70      	ldr	r2, [pc, #448]	@ (80031a4 <HAL_DMA_Abort+0x224>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d036      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a6e      	ldr	r2, [pc, #440]	@ (80031a8 <HAL_DMA_Abort+0x228>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d031      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6d      	ldr	r2, [pc, #436]	@ (80031ac <HAL_DMA_Abort+0x22c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d02c      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a6b      	ldr	r2, [pc, #428]	@ (80031b0 <HAL_DMA_Abort+0x230>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d027      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a6a      	ldr	r2, [pc, #424]	@ (80031b4 <HAL_DMA_Abort+0x234>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d022      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a68      	ldr	r2, [pc, #416]	@ (80031b8 <HAL_DMA_Abort+0x238>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01d      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a67      	ldr	r2, [pc, #412]	@ (80031bc <HAL_DMA_Abort+0x23c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d018      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a65      	ldr	r2, [pc, #404]	@ (80031c0 <HAL_DMA_Abort+0x240>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a64      	ldr	r2, [pc, #400]	@ (80031c4 <HAL_DMA_Abort+0x244>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00e      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a62      	ldr	r2, [pc, #392]	@ (80031c8 <HAL_DMA_Abort+0x248>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a61      	ldr	r2, [pc, #388]	@ (80031cc <HAL_DMA_Abort+0x24c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_DMA_Abort+0xd6>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a5f      	ldr	r2, [pc, #380]	@ (80031d0 <HAL_DMA_Abort+0x250>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_DMA_Abort+0xda>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <HAL_DMA_Abort+0xdc>
 800305a:	2300      	movs	r3, #0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 021e 	bic.w	r2, r2, #30
 800306e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800307e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e00a      	b.n	800309e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 020e 	bic.w	r2, r2, #14
 8003096:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003194 <HAL_DMA_Abort+0x214>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d072      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003198 <HAL_DMA_Abort+0x218>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d06d      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a39      	ldr	r2, [pc, #228]	@ (800319c <HAL_DMA_Abort+0x21c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d068      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a37      	ldr	r2, [pc, #220]	@ (80031a0 <HAL_DMA_Abort+0x220>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d063      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a36      	ldr	r2, [pc, #216]	@ (80031a4 <HAL_DMA_Abort+0x224>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d05e      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a34      	ldr	r2, [pc, #208]	@ (80031a8 <HAL_DMA_Abort+0x228>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d059      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a33      	ldr	r2, [pc, #204]	@ (80031ac <HAL_DMA_Abort+0x22c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d054      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a31      	ldr	r2, [pc, #196]	@ (80031b0 <HAL_DMA_Abort+0x230>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d04f      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a30      	ldr	r2, [pc, #192]	@ (80031b4 <HAL_DMA_Abort+0x234>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d04a      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2e      	ldr	r2, [pc, #184]	@ (80031b8 <HAL_DMA_Abort+0x238>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d045      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2d      	ldr	r2, [pc, #180]	@ (80031bc <HAL_DMA_Abort+0x23c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d040      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2b      	ldr	r2, [pc, #172]	@ (80031c0 <HAL_DMA_Abort+0x240>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d03b      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2a      	ldr	r2, [pc, #168]	@ (80031c4 <HAL_DMA_Abort+0x244>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d036      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a28      	ldr	r2, [pc, #160]	@ (80031c8 <HAL_DMA_Abort+0x248>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d031      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a27      	ldr	r2, [pc, #156]	@ (80031cc <HAL_DMA_Abort+0x24c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d02c      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a25      	ldr	r2, [pc, #148]	@ (80031d0 <HAL_DMA_Abort+0x250>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d027      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a24      	ldr	r2, [pc, #144]	@ (80031d4 <HAL_DMA_Abort+0x254>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a22      	ldr	r2, [pc, #136]	@ (80031d8 <HAL_DMA_Abort+0x258>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01d      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a21      	ldr	r2, [pc, #132]	@ (80031dc <HAL_DMA_Abort+0x25c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d018      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1f      	ldr	r2, [pc, #124]	@ (80031e0 <HAL_DMA_Abort+0x260>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1e      	ldr	r2, [pc, #120]	@ (80031e4 <HAL_DMA_Abort+0x264>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1c      	ldr	r2, [pc, #112]	@ (80031e8 <HAL_DMA_Abort+0x268>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1b      	ldr	r2, [pc, #108]	@ (80031ec <HAL_DMA_Abort+0x26c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_DMA_Abort+0x20e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a19      	ldr	r2, [pc, #100]	@ (80031f0 <HAL_DMA_Abort+0x270>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d132      	bne.n	80031f4 <HAL_DMA_Abort+0x274>
 800318e:	2301      	movs	r3, #1
 8003190:	e031      	b.n	80031f6 <HAL_DMA_Abort+0x276>
 8003192:	bf00      	nop
 8003194:	40020010 	.word	0x40020010
 8003198:	40020028 	.word	0x40020028
 800319c:	40020040 	.word	0x40020040
 80031a0:	40020058 	.word	0x40020058
 80031a4:	40020070 	.word	0x40020070
 80031a8:	40020088 	.word	0x40020088
 80031ac:	400200a0 	.word	0x400200a0
 80031b0:	400200b8 	.word	0x400200b8
 80031b4:	40020410 	.word	0x40020410
 80031b8:	40020428 	.word	0x40020428
 80031bc:	40020440 	.word	0x40020440
 80031c0:	40020458 	.word	0x40020458
 80031c4:	40020470 	.word	0x40020470
 80031c8:	40020488 	.word	0x40020488
 80031cc:	400204a0 	.word	0x400204a0
 80031d0:	400204b8 	.word	0x400204b8
 80031d4:	58025408 	.word	0x58025408
 80031d8:	5802541c 	.word	0x5802541c
 80031dc:	58025430 	.word	0x58025430
 80031e0:	58025444 	.word	0x58025444
 80031e4:	58025458 	.word	0x58025458
 80031e8:	5802546c 	.word	0x5802546c
 80031ec:	58025480 	.word	0x58025480
 80031f0:	58025494 	.word	0x58025494
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003204:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003208:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6d      	ldr	r2, [pc, #436]	@ (80033c4 <HAL_DMA_Abort+0x444>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d04a      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a6b      	ldr	r2, [pc, #428]	@ (80033c8 <HAL_DMA_Abort+0x448>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d045      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6a      	ldr	r2, [pc, #424]	@ (80033cc <HAL_DMA_Abort+0x44c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d040      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a68      	ldr	r2, [pc, #416]	@ (80033d0 <HAL_DMA_Abort+0x450>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d03b      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a67      	ldr	r2, [pc, #412]	@ (80033d4 <HAL_DMA_Abort+0x454>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d036      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a65      	ldr	r2, [pc, #404]	@ (80033d8 <HAL_DMA_Abort+0x458>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d031      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a64      	ldr	r2, [pc, #400]	@ (80033dc <HAL_DMA_Abort+0x45c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d02c      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a62      	ldr	r2, [pc, #392]	@ (80033e0 <HAL_DMA_Abort+0x460>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d027      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a61      	ldr	r2, [pc, #388]	@ (80033e4 <HAL_DMA_Abort+0x464>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d022      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a5f      	ldr	r2, [pc, #380]	@ (80033e8 <HAL_DMA_Abort+0x468>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01d      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a5e      	ldr	r2, [pc, #376]	@ (80033ec <HAL_DMA_Abort+0x46c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d018      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a5c      	ldr	r2, [pc, #368]	@ (80033f0 <HAL_DMA_Abort+0x470>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a5b      	ldr	r2, [pc, #364]	@ (80033f4 <HAL_DMA_Abort+0x474>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00e      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a59      	ldr	r2, [pc, #356]	@ (80033f8 <HAL_DMA_Abort+0x478>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a58      	ldr	r2, [pc, #352]	@ (80033fc <HAL_DMA_Abort+0x47c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <HAL_DMA_Abort+0x32a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a56      	ldr	r2, [pc, #344]	@ (8003400 <HAL_DMA_Abort+0x480>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d108      	bne.n	80032bc <HAL_DMA_Abort+0x33c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e007      	b.n	80032cc <HAL_DMA_Abort+0x34c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032cc:	e013      	b.n	80032f6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ce:	f7fe fb13 	bl	80018f8 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d90c      	bls.n	80032f6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2203      	movs	r2, #3
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e12d      	b.n	8003552 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e5      	bne.n	80032ce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2f      	ldr	r2, [pc, #188]	@ (80033c4 <HAL_DMA_Abort+0x444>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d04a      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a2d      	ldr	r2, [pc, #180]	@ (80033c8 <HAL_DMA_Abort+0x448>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d045      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2c      	ldr	r2, [pc, #176]	@ (80033cc <HAL_DMA_Abort+0x44c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d040      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a2a      	ldr	r2, [pc, #168]	@ (80033d0 <HAL_DMA_Abort+0x450>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d03b      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a29      	ldr	r2, [pc, #164]	@ (80033d4 <HAL_DMA_Abort+0x454>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d036      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a27      	ldr	r2, [pc, #156]	@ (80033d8 <HAL_DMA_Abort+0x458>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d031      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a26      	ldr	r2, [pc, #152]	@ (80033dc <HAL_DMA_Abort+0x45c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d02c      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a24      	ldr	r2, [pc, #144]	@ (80033e0 <HAL_DMA_Abort+0x460>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d027      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a23      	ldr	r2, [pc, #140]	@ (80033e4 <HAL_DMA_Abort+0x464>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d022      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a21      	ldr	r2, [pc, #132]	@ (80033e8 <HAL_DMA_Abort+0x468>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d01d      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a20      	ldr	r2, [pc, #128]	@ (80033ec <HAL_DMA_Abort+0x46c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d018      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1e      	ldr	r2, [pc, #120]	@ (80033f0 <HAL_DMA_Abort+0x470>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1d      	ldr	r2, [pc, #116]	@ (80033f4 <HAL_DMA_Abort+0x474>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00e      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1b      	ldr	r2, [pc, #108]	@ (80033f8 <HAL_DMA_Abort+0x478>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d009      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1a      	ldr	r2, [pc, #104]	@ (80033fc <HAL_DMA_Abort+0x47c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <HAL_DMA_Abort+0x422>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a18      	ldr	r2, [pc, #96]	@ (8003400 <HAL_DMA_Abort+0x480>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_DMA_Abort+0x426>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_DMA_Abort+0x428>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02b      	beq.n	8003404 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	223f      	movs	r2, #63	@ 0x3f
 80033bc:	409a      	lsls	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	609a      	str	r2, [r3, #8]
 80033c2:	e02a      	b.n	800341a <HAL_DMA_Abort+0x49a>
 80033c4:	40020010 	.word	0x40020010
 80033c8:	40020028 	.word	0x40020028
 80033cc:	40020040 	.word	0x40020040
 80033d0:	40020058 	.word	0x40020058
 80033d4:	40020070 	.word	0x40020070
 80033d8:	40020088 	.word	0x40020088
 80033dc:	400200a0 	.word	0x400200a0
 80033e0:	400200b8 	.word	0x400200b8
 80033e4:	40020410 	.word	0x40020410
 80033e8:	40020428 	.word	0x40020428
 80033ec:	40020440 	.word	0x40020440
 80033f0:	40020458 	.word	0x40020458
 80033f4:	40020470 	.word	0x40020470
 80033f8:	40020488 	.word	0x40020488
 80033fc:	400204a0 	.word	0x400204a0
 8003400:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003408:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	2201      	movs	r2, #1
 8003414:	409a      	lsls	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a4f      	ldr	r2, [pc, #316]	@ (800355c <HAL_DMA_Abort+0x5dc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d072      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a4d      	ldr	r2, [pc, #308]	@ (8003560 <HAL_DMA_Abort+0x5e0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d06d      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a4c      	ldr	r2, [pc, #304]	@ (8003564 <HAL_DMA_Abort+0x5e4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d068      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a4a      	ldr	r2, [pc, #296]	@ (8003568 <HAL_DMA_Abort+0x5e8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d063      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a49      	ldr	r2, [pc, #292]	@ (800356c <HAL_DMA_Abort+0x5ec>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d05e      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a47      	ldr	r2, [pc, #284]	@ (8003570 <HAL_DMA_Abort+0x5f0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d059      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a46      	ldr	r2, [pc, #280]	@ (8003574 <HAL_DMA_Abort+0x5f4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d054      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a44      	ldr	r2, [pc, #272]	@ (8003578 <HAL_DMA_Abort+0x5f8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d04f      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a43      	ldr	r2, [pc, #268]	@ (800357c <HAL_DMA_Abort+0x5fc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d04a      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a41      	ldr	r2, [pc, #260]	@ (8003580 <HAL_DMA_Abort+0x600>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d045      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a40      	ldr	r2, [pc, #256]	@ (8003584 <HAL_DMA_Abort+0x604>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d040      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3e      	ldr	r2, [pc, #248]	@ (8003588 <HAL_DMA_Abort+0x608>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d03b      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a3d      	ldr	r2, [pc, #244]	@ (800358c <HAL_DMA_Abort+0x60c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d036      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003590 <HAL_DMA_Abort+0x610>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003594 <HAL_DMA_Abort+0x614>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02c      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a38      	ldr	r2, [pc, #224]	@ (8003598 <HAL_DMA_Abort+0x618>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d027      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a37      	ldr	r2, [pc, #220]	@ (800359c <HAL_DMA_Abort+0x61c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a35      	ldr	r2, [pc, #212]	@ (80035a0 <HAL_DMA_Abort+0x620>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a34      	ldr	r2, [pc, #208]	@ (80035a4 <HAL_DMA_Abort+0x624>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a32      	ldr	r2, [pc, #200]	@ (80035a8 <HAL_DMA_Abort+0x628>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a31      	ldr	r2, [pc, #196]	@ (80035ac <HAL_DMA_Abort+0x62c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a2f      	ldr	r2, [pc, #188]	@ (80035b0 <HAL_DMA_Abort+0x630>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a2e      	ldr	r2, [pc, #184]	@ (80035b4 <HAL_DMA_Abort+0x634>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_Abort+0x58a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2c      	ldr	r2, [pc, #176]	@ (80035b8 <HAL_DMA_Abort+0x638>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_DMA_Abort+0x58e>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_DMA_Abort+0x590>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800351c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00c      	beq.n	8003540 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003534:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800353e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40020010 	.word	0x40020010
 8003560:	40020028 	.word	0x40020028
 8003564:	40020040 	.word	0x40020040
 8003568:	40020058 	.word	0x40020058
 800356c:	40020070 	.word	0x40020070
 8003570:	40020088 	.word	0x40020088
 8003574:	400200a0 	.word	0x400200a0
 8003578:	400200b8 	.word	0x400200b8
 800357c:	40020410 	.word	0x40020410
 8003580:	40020428 	.word	0x40020428
 8003584:	40020440 	.word	0x40020440
 8003588:	40020458 	.word	0x40020458
 800358c:	40020470 	.word	0x40020470
 8003590:	40020488 	.word	0x40020488
 8003594:	400204a0 	.word	0x400204a0
 8003598:	400204b8 	.word	0x400204b8
 800359c:	58025408 	.word	0x58025408
 80035a0:	5802541c 	.word	0x5802541c
 80035a4:	58025430 	.word	0x58025430
 80035a8:	58025444 	.word	0x58025444
 80035ac:	58025458 	.word	0x58025458
 80035b0:	5802546c 	.word	0x5802546c
 80035b4:	58025480 	.word	0x58025480
 80035b8:	58025494 	.word	0x58025494

080035bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e237      	b.n	8003a3e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d004      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2280      	movs	r2, #128	@ 0x80
 80035de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e22c      	b.n	8003a3e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a5c      	ldr	r2, [pc, #368]	@ (800375c <HAL_DMA_Abort_IT+0x1a0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d04a      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003760 <HAL_DMA_Abort_IT+0x1a4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d045      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a59      	ldr	r2, [pc, #356]	@ (8003764 <HAL_DMA_Abort_IT+0x1a8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d040      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a58      	ldr	r2, [pc, #352]	@ (8003768 <HAL_DMA_Abort_IT+0x1ac>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d03b      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a56      	ldr	r2, [pc, #344]	@ (800376c <HAL_DMA_Abort_IT+0x1b0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d036      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a55      	ldr	r2, [pc, #340]	@ (8003770 <HAL_DMA_Abort_IT+0x1b4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d031      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a53      	ldr	r2, [pc, #332]	@ (8003774 <HAL_DMA_Abort_IT+0x1b8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d02c      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a52      	ldr	r2, [pc, #328]	@ (8003778 <HAL_DMA_Abort_IT+0x1bc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d027      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a50      	ldr	r2, [pc, #320]	@ (800377c <HAL_DMA_Abort_IT+0x1c0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d022      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a4f      	ldr	r2, [pc, #316]	@ (8003780 <HAL_DMA_Abort_IT+0x1c4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d01d      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a4d      	ldr	r2, [pc, #308]	@ (8003784 <HAL_DMA_Abort_IT+0x1c8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d018      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a4c      	ldr	r2, [pc, #304]	@ (8003788 <HAL_DMA_Abort_IT+0x1cc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a4a      	ldr	r2, [pc, #296]	@ (800378c <HAL_DMA_Abort_IT+0x1d0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00e      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a49      	ldr	r2, [pc, #292]	@ (8003790 <HAL_DMA_Abort_IT+0x1d4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d009      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a47      	ldr	r2, [pc, #284]	@ (8003794 <HAL_DMA_Abort_IT+0x1d8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_DMA_Abort_IT+0xc8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a46      	ldr	r2, [pc, #280]	@ (8003798 <HAL_DMA_Abort_IT+0x1dc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_DMA_Abort_IT+0xcc>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_DMA_Abort_IT+0xce>
 8003688:	2300      	movs	r3, #0
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8086 	beq.w	800379c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2204      	movs	r2, #4
 8003694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a2f      	ldr	r2, [pc, #188]	@ (800375c <HAL_DMA_Abort_IT+0x1a0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d04a      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003760 <HAL_DMA_Abort_IT+0x1a4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d045      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003764 <HAL_DMA_Abort_IT+0x1a8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d040      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003768 <HAL_DMA_Abort_IT+0x1ac>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d03b      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a29      	ldr	r2, [pc, #164]	@ (800376c <HAL_DMA_Abort_IT+0x1b0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d036      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a28      	ldr	r2, [pc, #160]	@ (8003770 <HAL_DMA_Abort_IT+0x1b4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d031      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a26      	ldr	r2, [pc, #152]	@ (8003774 <HAL_DMA_Abort_IT+0x1b8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02c      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a25      	ldr	r2, [pc, #148]	@ (8003778 <HAL_DMA_Abort_IT+0x1bc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d027      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a23      	ldr	r2, [pc, #140]	@ (800377c <HAL_DMA_Abort_IT+0x1c0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d022      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a22      	ldr	r2, [pc, #136]	@ (8003780 <HAL_DMA_Abort_IT+0x1c4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d01d      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a20      	ldr	r2, [pc, #128]	@ (8003784 <HAL_DMA_Abort_IT+0x1c8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1f      	ldr	r2, [pc, #124]	@ (8003788 <HAL_DMA_Abort_IT+0x1cc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1d      	ldr	r2, [pc, #116]	@ (800378c <HAL_DMA_Abort_IT+0x1d0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1c      	ldr	r2, [pc, #112]	@ (8003790 <HAL_DMA_Abort_IT+0x1d4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1a      	ldr	r2, [pc, #104]	@ (8003794 <HAL_DMA_Abort_IT+0x1d8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_DMA_Abort_IT+0x17c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a19      	ldr	r2, [pc, #100]	@ (8003798 <HAL_DMA_Abort_IT+0x1dc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <HAL_DMA_Abort_IT+0x18e>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e178      	b.n	8003a3c <HAL_DMA_Abort_IT+0x480>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e16f      	b.n	8003a3c <HAL_DMA_Abort_IT+0x480>
 800375c:	40020010 	.word	0x40020010
 8003760:	40020028 	.word	0x40020028
 8003764:	40020040 	.word	0x40020040
 8003768:	40020058 	.word	0x40020058
 800376c:	40020070 	.word	0x40020070
 8003770:	40020088 	.word	0x40020088
 8003774:	400200a0 	.word	0x400200a0
 8003778:	400200b8 	.word	0x400200b8
 800377c:	40020410 	.word	0x40020410
 8003780:	40020428 	.word	0x40020428
 8003784:	40020440 	.word	0x40020440
 8003788:	40020458 	.word	0x40020458
 800378c:	40020470 	.word	0x40020470
 8003790:	40020488 	.word	0x40020488
 8003794:	400204a0 	.word	0x400204a0
 8003798:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 020e 	bic.w	r2, r2, #14
 80037aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a6c      	ldr	r2, [pc, #432]	@ (8003964 <HAL_DMA_Abort_IT+0x3a8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d04a      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003968 <HAL_DMA_Abort_IT+0x3ac>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d045      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a69      	ldr	r2, [pc, #420]	@ (800396c <HAL_DMA_Abort_IT+0x3b0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d040      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a68      	ldr	r2, [pc, #416]	@ (8003970 <HAL_DMA_Abort_IT+0x3b4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d03b      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a66      	ldr	r2, [pc, #408]	@ (8003974 <HAL_DMA_Abort_IT+0x3b8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d036      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a65      	ldr	r2, [pc, #404]	@ (8003978 <HAL_DMA_Abort_IT+0x3bc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d031      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a63      	ldr	r2, [pc, #396]	@ (800397c <HAL_DMA_Abort_IT+0x3c0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02c      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a62      	ldr	r2, [pc, #392]	@ (8003980 <HAL_DMA_Abort_IT+0x3c4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d027      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a60      	ldr	r2, [pc, #384]	@ (8003984 <HAL_DMA_Abort_IT+0x3c8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d022      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a5f      	ldr	r2, [pc, #380]	@ (8003988 <HAL_DMA_Abort_IT+0x3cc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d01d      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a5d      	ldr	r2, [pc, #372]	@ (800398c <HAL_DMA_Abort_IT+0x3d0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a5c      	ldr	r2, [pc, #368]	@ (8003990 <HAL_DMA_Abort_IT+0x3d4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5a      	ldr	r2, [pc, #360]	@ (8003994 <HAL_DMA_Abort_IT+0x3d8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a59      	ldr	r2, [pc, #356]	@ (8003998 <HAL_DMA_Abort_IT+0x3dc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a57      	ldr	r2, [pc, #348]	@ (800399c <HAL_DMA_Abort_IT+0x3e0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_DMA_Abort_IT+0x290>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a56      	ldr	r2, [pc, #344]	@ (80039a0 <HAL_DMA_Abort_IT+0x3e4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <HAL_DMA_Abort_IT+0x2a2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e007      	b.n	800386e <HAL_DMA_Abort_IT+0x2b2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a3c      	ldr	r2, [pc, #240]	@ (8003964 <HAL_DMA_Abort_IT+0x3a8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d072      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a3a      	ldr	r2, [pc, #232]	@ (8003968 <HAL_DMA_Abort_IT+0x3ac>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d06d      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a39      	ldr	r2, [pc, #228]	@ (800396c <HAL_DMA_Abort_IT+0x3b0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d068      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a37      	ldr	r2, [pc, #220]	@ (8003970 <HAL_DMA_Abort_IT+0x3b4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d063      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a36      	ldr	r2, [pc, #216]	@ (8003974 <HAL_DMA_Abort_IT+0x3b8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d05e      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a34      	ldr	r2, [pc, #208]	@ (8003978 <HAL_DMA_Abort_IT+0x3bc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d059      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a33      	ldr	r2, [pc, #204]	@ (800397c <HAL_DMA_Abort_IT+0x3c0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d054      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a31      	ldr	r2, [pc, #196]	@ (8003980 <HAL_DMA_Abort_IT+0x3c4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d04f      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a30      	ldr	r2, [pc, #192]	@ (8003984 <HAL_DMA_Abort_IT+0x3c8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d04a      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003988 <HAL_DMA_Abort_IT+0x3cc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d045      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a2d      	ldr	r2, [pc, #180]	@ (800398c <HAL_DMA_Abort_IT+0x3d0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d040      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003990 <HAL_DMA_Abort_IT+0x3d4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d03b      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003994 <HAL_DMA_Abort_IT+0x3d8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d036      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a28      	ldr	r2, [pc, #160]	@ (8003998 <HAL_DMA_Abort_IT+0x3dc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d031      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a27      	ldr	r2, [pc, #156]	@ (800399c <HAL_DMA_Abort_IT+0x3e0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d02c      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a25      	ldr	r2, [pc, #148]	@ (80039a0 <HAL_DMA_Abort_IT+0x3e4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d027      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a24      	ldr	r2, [pc, #144]	@ (80039a4 <HAL_DMA_Abort_IT+0x3e8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d022      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a22      	ldr	r2, [pc, #136]	@ (80039a8 <HAL_DMA_Abort_IT+0x3ec>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d01d      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a21      	ldr	r2, [pc, #132]	@ (80039ac <HAL_DMA_Abort_IT+0x3f0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d018      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1f      	ldr	r2, [pc, #124]	@ (80039b0 <HAL_DMA_Abort_IT+0x3f4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1e      	ldr	r2, [pc, #120]	@ (80039b4 <HAL_DMA_Abort_IT+0x3f8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00e      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a1c      	ldr	r2, [pc, #112]	@ (80039b8 <HAL_DMA_Abort_IT+0x3fc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d009      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a1b      	ldr	r2, [pc, #108]	@ (80039bc <HAL_DMA_Abort_IT+0x400>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d004      	beq.n	800395e <HAL_DMA_Abort_IT+0x3a2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a19      	ldr	r2, [pc, #100]	@ (80039c0 <HAL_DMA_Abort_IT+0x404>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d132      	bne.n	80039c4 <HAL_DMA_Abort_IT+0x408>
 800395e:	2301      	movs	r3, #1
 8003960:	e031      	b.n	80039c6 <HAL_DMA_Abort_IT+0x40a>
 8003962:	bf00      	nop
 8003964:	40020010 	.word	0x40020010
 8003968:	40020028 	.word	0x40020028
 800396c:	40020040 	.word	0x40020040
 8003970:	40020058 	.word	0x40020058
 8003974:	40020070 	.word	0x40020070
 8003978:	40020088 	.word	0x40020088
 800397c:	400200a0 	.word	0x400200a0
 8003980:	400200b8 	.word	0x400200b8
 8003984:	40020410 	.word	0x40020410
 8003988:	40020428 	.word	0x40020428
 800398c:	40020440 	.word	0x40020440
 8003990:	40020458 	.word	0x40020458
 8003994:	40020470 	.word	0x40020470
 8003998:	40020488 	.word	0x40020488
 800399c:	400204a0 	.word	0x400204a0
 80039a0:	400204b8 	.word	0x400204b8
 80039a4:	58025408 	.word	0x58025408
 80039a8:	5802541c 	.word	0x5802541c
 80039ac:	58025430 	.word	0x58025430
 80039b0:	58025444 	.word	0x58025444
 80039b4:	58025458 	.word	0x58025458
 80039b8:	5802546c 	.word	0x5802546c
 80039bc:	58025480 	.word	0x58025480
 80039c0:	58025494 	.word	0x58025494
 80039c4:	2300      	movs	r3, #0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d028      	beq.n	8003a1c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	2201      	movs	r2, #1
 80039ea:	409a      	lsls	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00c      	beq.n	8003a1c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a10:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a1a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop

08003a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	@ 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a56:	4b89      	ldr	r3, [pc, #548]	@ (8003c7c <HAL_GPIO_Init+0x234>)
 8003a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a5a:	e194      	b.n	8003d86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	2101      	movs	r1, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 8186 	beq.w	8003d80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d005      	beq.n	8003a8c <HAL_GPIO_Init+0x44>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d130      	bne.n	8003aee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2203      	movs	r2, #3
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	f003 0201 	and.w	r2, r3, #1
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d017      	beq.n	8003b2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	2203      	movs	r2, #3
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d123      	bne.n	8003b7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	08da      	lsrs	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3208      	adds	r2, #8
 8003b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	220f      	movs	r2, #15
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	08da      	lsrs	r2, r3, #3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3208      	adds	r2, #8
 8003b78:	69b9      	ldr	r1, [r7, #24]
 8003b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	2203      	movs	r2, #3
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4013      	ands	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 0203 	and.w	r2, r3, #3
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 80e0 	beq.w	8003d80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8003c80 <HAL_GPIO_Init+0x238>)
 8003bc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8003c80 <HAL_GPIO_Init+0x238>)
 8003bc8:	f043 0302 	orr.w	r3, r3, #2
 8003bcc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c80 <HAL_GPIO_Init+0x238>)
 8003bd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bde:	4a29      	ldr	r2, [pc, #164]	@ (8003c84 <HAL_GPIO_Init+0x23c>)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	3302      	adds	r3, #2
 8003be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a20      	ldr	r2, [pc, #128]	@ (8003c88 <HAL_GPIO_Init+0x240>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d052      	beq.n	8003cb0 <HAL_GPIO_Init+0x268>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c8c <HAL_GPIO_Init+0x244>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d031      	beq.n	8003c76 <HAL_GPIO_Init+0x22e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a1e      	ldr	r2, [pc, #120]	@ (8003c90 <HAL_GPIO_Init+0x248>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d02b      	beq.n	8003c72 <HAL_GPIO_Init+0x22a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c94 <HAL_GPIO_Init+0x24c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d025      	beq.n	8003c6e <HAL_GPIO_Init+0x226>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1c      	ldr	r2, [pc, #112]	@ (8003c98 <HAL_GPIO_Init+0x250>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01f      	beq.n	8003c6a <HAL_GPIO_Init+0x222>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c9c <HAL_GPIO_Init+0x254>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d019      	beq.n	8003c66 <HAL_GPIO_Init+0x21e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a1a      	ldr	r2, [pc, #104]	@ (8003ca0 <HAL_GPIO_Init+0x258>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_GPIO_Init+0x21a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ca4 <HAL_GPIO_Init+0x25c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00d      	beq.n	8003c5e <HAL_GPIO_Init+0x216>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a18      	ldr	r2, [pc, #96]	@ (8003ca8 <HAL_GPIO_Init+0x260>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d007      	beq.n	8003c5a <HAL_GPIO_Init+0x212>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a17      	ldr	r2, [pc, #92]	@ (8003cac <HAL_GPIO_Init+0x264>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d101      	bne.n	8003c56 <HAL_GPIO_Init+0x20e>
 8003c52:	2309      	movs	r3, #9
 8003c54:	e02d      	b.n	8003cb2 <HAL_GPIO_Init+0x26a>
 8003c56:	230a      	movs	r3, #10
 8003c58:	e02b      	b.n	8003cb2 <HAL_GPIO_Init+0x26a>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	e029      	b.n	8003cb2 <HAL_GPIO_Init+0x26a>
 8003c5e:	2307      	movs	r3, #7
 8003c60:	e027      	b.n	8003cb2 <HAL_GPIO_Init+0x26a>
 8003c62:	2306      	movs	r3, #6
 8003c64:	e025      	b.n	8003cb2 <HAL_GPIO_Init+0x26a>
 8003c66:	2305      	movs	r3, #5
 8003c68:	e023      	b.n	8003cb2 <HAL_GPIO_Init+0x26a>
 8003c6a:	2304      	movs	r3, #4
 8003c6c:	e021      	b.n	8003cb2 <HAL_GPIO_Init+0x26a>
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e01f      	b.n	8003cb2 <HAL_GPIO_Init+0x26a>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e01d      	b.n	8003cb2 <HAL_GPIO_Init+0x26a>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e01b      	b.n	8003cb2 <HAL_GPIO_Init+0x26a>
 8003c7a:	bf00      	nop
 8003c7c:	58000080 	.word	0x58000080
 8003c80:	58024400 	.word	0x58024400
 8003c84:	58000400 	.word	0x58000400
 8003c88:	58020000 	.word	0x58020000
 8003c8c:	58020400 	.word	0x58020400
 8003c90:	58020800 	.word	0x58020800
 8003c94:	58020c00 	.word	0x58020c00
 8003c98:	58021000 	.word	0x58021000
 8003c9c:	58021400 	.word	0x58021400
 8003ca0:	58021800 	.word	0x58021800
 8003ca4:	58021c00 	.word	0x58021c00
 8003ca8:	58022000 	.word	0x58022000
 8003cac:	58022400 	.word	0x58022400
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	f002 0203 	and.w	r2, r2, #3
 8003cb8:	0092      	lsls	r2, r2, #2
 8003cba:	4093      	lsls	r3, r2
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cc2:	4938      	ldr	r1, [pc, #224]	@ (8003da4 <HAL_GPIO_Init+0x35c>)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	3302      	adds	r3, #2
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003cf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	3301      	adds	r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f47f ae63 	bne.w	8003a5c <HAL_GPIO_Init+0x14>
  }
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	3724      	adds	r7, #36	@ 0x24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	58000400 	.word	0x58000400

08003da8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003db0:	4a08      	ldr	r2, [pc, #32]	@ (8003dd4 <HAL_HSEM_FastTake+0x2c>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3320      	adds	r3, #32
 8003db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dba:	4a07      	ldr	r2, [pc, #28]	@ (8003dd8 <HAL_HSEM_FastTake+0x30>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d101      	bne.n	8003dc4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e000      	b.n	8003dc6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	58026400 	.word	0x58026400
 8003dd8:	80000300 	.word	0x80000300

08003ddc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003de6:	4906      	ldr	r1, [pc, #24]	@ (8003e00 <HAL_HSEM_Release+0x24>)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	58026400 	.word	0x58026400

08003e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e08b      	b.n	8003f2e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fd f8f6 	bl	800101c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2224      	movs	r2, #36	@ 0x24
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d107      	bne.n	8003e7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	e006      	b.n	8003e8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d108      	bne.n	8003ea6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	e007      	b.n	8003eb6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6859      	ldr	r1, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f38 <HAL_I2C_Init+0x134>)
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ed4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69d9      	ldr	r1, [r3, #28]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	02008000 	.word	0x02008000

08003f3c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	607a      	str	r2, [r7, #4]
 8003f46:	461a      	mov	r2, r3
 8003f48:	460b      	mov	r3, r1
 8003f4a:	817b      	strh	r3, [r7, #10]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	f040 80fd 	bne.w	8004158 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_I2C_Master_Transmit+0x30>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e0f6      	b.n	800415a <HAL_I2C_Master_Transmit+0x21e>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f74:	f7fd fcc0 	bl	80018f8 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2319      	movs	r3, #25
 8003f80:	2201      	movs	r2, #1
 8003f82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fa82 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0e1      	b.n	800415a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2221      	movs	r2, #33	@ 0x21
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	893a      	ldrh	r2, [r7, #8]
 8003fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2bff      	cmp	r3, #255	@ 0xff
 8003fc6:	d906      	bls.n	8003fd6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	22ff      	movs	r2, #255	@ 0xff
 8003fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003fce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	e007      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003fe0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fe4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d024      	beq.n	8004038 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	781a      	ldrb	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004022:	b2db      	uxtb	r3, r3
 8004024:	3301      	adds	r3, #1
 8004026:	b2da      	uxtb	r2, r3
 8004028:	8979      	ldrh	r1, [r7, #10]
 800402a:	4b4e      	ldr	r3, [pc, #312]	@ (8004164 <HAL_I2C_Master_Transmit+0x228>)
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 fbf1 	bl	8004818 <I2C_TransferConfig>
 8004036:	e066      	b.n	8004106 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403c:	b2da      	uxtb	r2, r3
 800403e:	8979      	ldrh	r1, [r7, #10]
 8004040:	4b48      	ldr	r3, [pc, #288]	@ (8004164 <HAL_I2C_Master_Transmit+0x228>)
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fbe6 	bl	8004818 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800404c:	e05b      	b.n	8004106 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	6a39      	ldr	r1, [r7, #32]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fa75 	bl	8004542 <I2C_WaitOnTXISFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07b      	b.n	800415a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d034      	beq.n	8004106 <HAL_I2C_Master_Transmit+0x1ca>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d130      	bne.n	8004106 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	2200      	movs	r2, #0
 80040ac:	2180      	movs	r1, #128	@ 0x80
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f9ee 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e04d      	b.n	800415a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2bff      	cmp	r3, #255	@ 0xff
 80040c6:	d90e      	bls.n	80040e6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	22ff      	movs	r2, #255	@ 0xff
 80040cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	8979      	ldrh	r1, [r7, #10]
 80040d6:	2300      	movs	r3, #0
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fb9a 	bl	8004818 <I2C_TransferConfig>
 80040e4:	e00f      	b.n	8004106 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	8979      	ldrh	r1, [r7, #10]
 80040f8:	2300      	movs	r3, #0
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fb89 	bl	8004818 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d19e      	bne.n	800404e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	6a39      	ldr	r1, [r7, #32]
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fa5b 	bl	80045d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e01a      	b.n	800415a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2220      	movs	r2, #32
 800412a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6859      	ldr	r1, [r3, #4]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <HAL_I2C_Master_Transmit+0x22c>)
 8004138:	400b      	ands	r3, r1
 800413a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	e000      	b.n	800415a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
  }
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	80002000 	.word	0x80002000
 8004168:	fe00e800 	.word	0xfe00e800

0800416c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	4608      	mov	r0, r1
 8004176:	4611      	mov	r1, r2
 8004178:	461a      	mov	r2, r3
 800417a:	4603      	mov	r3, r0
 800417c:	817b      	strh	r3, [r7, #10]
 800417e:	460b      	mov	r3, r1
 8004180:	813b      	strh	r3, [r7, #8]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b20      	cmp	r3, #32
 8004190:	f040 80fd 	bne.w	800438e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_I2C_Mem_Read+0x34>
 800419a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0f1      	b.n	8004390 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_I2C_Mem_Read+0x4e>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e0ea      	b.n	8004390 <HAL_I2C_Mem_Read+0x224>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041c2:	f7fd fb99 	bl	80018f8 <HAL_GetTick>
 80041c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	2319      	movs	r3, #25
 80041ce:	2201      	movs	r2, #1
 80041d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f95b 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0d5      	b.n	8004390 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2222      	movs	r2, #34	@ 0x22
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2240      	movs	r2, #64	@ 0x40
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a3a      	ldr	r2, [r7, #32]
 80041fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004204:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800420c:	88f8      	ldrh	r0, [r7, #6]
 800420e:	893a      	ldrh	r2, [r7, #8]
 8004210:	8979      	ldrh	r1, [r7, #10]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	4603      	mov	r3, r0
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f8bf 	bl	80043a0 <I2C_RequestMemoryRead>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0ad      	b.n	8004390 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2bff      	cmp	r3, #255	@ 0xff
 800423c:	d90e      	bls.n	800425c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	22ff      	movs	r2, #255	@ 0xff
 8004242:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004248:	b2da      	uxtb	r2, r3
 800424a:	8979      	ldrh	r1, [r7, #10]
 800424c:	4b52      	ldr	r3, [pc, #328]	@ (8004398 <HAL_I2C_Mem_Read+0x22c>)
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fadf 	bl	8004818 <I2C_TransferConfig>
 800425a:	e00f      	b.n	800427c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426a:	b2da      	uxtb	r2, r3
 800426c:	8979      	ldrh	r1, [r7, #10]
 800426e:	4b4a      	ldr	r3, [pc, #296]	@ (8004398 <HAL_I2C_Mem_Read+0x22c>)
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 face 	bl	8004818 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004282:	2200      	movs	r2, #0
 8004284:	2104      	movs	r1, #4
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f902 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e07c      	b.n	8004390 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d034      	beq.n	800433c <HAL_I2C_Mem_Read+0x1d0>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d130      	bne.n	800433c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e0:	2200      	movs	r2, #0
 80042e2:	2180      	movs	r1, #128	@ 0x80
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f8d3 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e04d      	b.n	8004390 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2bff      	cmp	r3, #255	@ 0xff
 80042fc:	d90e      	bls.n	800431c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	22ff      	movs	r2, #255	@ 0xff
 8004302:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004308:	b2da      	uxtb	r2, r3
 800430a:	8979      	ldrh	r1, [r7, #10]
 800430c:	2300      	movs	r3, #0
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fa7f 	bl	8004818 <I2C_TransferConfig>
 800431a:	e00f      	b.n	800433c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800432a:	b2da      	uxtb	r2, r3
 800432c:	8979      	ldrh	r1, [r7, #10]
 800432e:	2300      	movs	r3, #0
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fa6e 	bl	8004818 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d19a      	bne.n	800427c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f940 	bl	80045d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e01a      	b.n	8004390 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2220      	movs	r2, #32
 8004360:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6859      	ldr	r1, [r3, #4]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <HAL_I2C_Mem_Read+0x230>)
 800436e:	400b      	ands	r3, r1
 8004370:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	e000      	b.n	8004390 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
  }
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	80002400 	.word	0x80002400
 800439c:	fe00e800 	.word	0xfe00e800

080043a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	4608      	mov	r0, r1
 80043aa:	4611      	mov	r1, r2
 80043ac:	461a      	mov	r2, r3
 80043ae:	4603      	mov	r3, r0
 80043b0:	817b      	strh	r3, [r7, #10]
 80043b2:	460b      	mov	r3, r1
 80043b4:	813b      	strh	r3, [r7, #8]
 80043b6:	4613      	mov	r3, r2
 80043b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	8979      	ldrh	r1, [r7, #10]
 80043c0:	4b20      	ldr	r3, [pc, #128]	@ (8004444 <I2C_RequestMemoryRead+0xa4>)
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	2300      	movs	r3, #0
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 fa26 	bl	8004818 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	69b9      	ldr	r1, [r7, #24]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f8b6 	bl	8004542 <I2C_WaitOnTXISFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e02c      	b.n	800443a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d105      	bne.n	80043f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043e6:	893b      	ldrh	r3, [r7, #8]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80043f0:	e015      	b.n	800441e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043f2:	893b      	ldrh	r3, [r7, #8]
 80043f4:	0a1b      	lsrs	r3, r3, #8
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	69b9      	ldr	r1, [r7, #24]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f89c 	bl	8004542 <I2C_WaitOnTXISFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e012      	b.n	800443a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004414:	893b      	ldrh	r3, [r7, #8]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2200      	movs	r2, #0
 8004426:	2140      	movs	r1, #64	@ 0x40
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f831 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	80002000 	.word	0x80002000

08004448 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d103      	bne.n	8004466 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d007      	beq.n	8004484 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	619a      	str	r2, [r3, #24]
  }
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a0:	e03b      	b.n	800451a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	6839      	ldr	r1, [r7, #0]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f8d6 	bl	8004658 <I2C_IsErrorOccurred>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e041      	b.n	800453a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044bc:	d02d      	beq.n	800451a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044be:	f7fd fa1b 	bl	80018f8 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d122      	bne.n	800451a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4013      	ands	r3, r2
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d113      	bne.n	800451a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f6:	f043 0220 	orr.w	r2, r3, #32
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e00f      	b.n	800453a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699a      	ldr	r2, [r3, #24]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4013      	ands	r3, r2
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	429a      	cmp	r2, r3
 8004528:	bf0c      	ite	eq
 800452a:	2301      	moveq	r3, #1
 800452c:	2300      	movne	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	429a      	cmp	r2, r3
 8004536:	d0b4      	beq.n	80044a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800454e:	e033      	b.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f87f 	bl	8004658 <I2C_IsErrorOccurred>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e031      	b.n	80045c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800456a:	d025      	beq.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456c:	f7fd f9c4 	bl	80018f8 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	d302      	bcc.n	8004582 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11a      	bne.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b02      	cmp	r3, #2
 800458e:	d013      	beq.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e007      	b.n	80045c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d1c4      	bne.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045dc:	e02f      	b.n	800463e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f838 	bl	8004658 <I2C_IsErrorOccurred>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e02d      	b.n	800464e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fd f981 	bl	80018f8 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11a      	bne.n	800463e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b20      	cmp	r3, #32
 8004614:	d013      	beq.n	800463e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461a:	f043 0220 	orr.w	r2, r3, #32
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e007      	b.n	800464e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b20      	cmp	r3, #32
 800464a:	d1c8      	bne.n	80045de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	@ 0x28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	d068      	beq.n	8004756 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2210      	movs	r2, #16
 800468a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800468c:	e049      	b.n	8004722 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004694:	d045      	beq.n	8004722 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004696:	f7fd f92f 	bl	80018f8 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <I2C_IsErrorOccurred+0x54>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d13a      	bne.n	8004722 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ce:	d121      	bne.n	8004714 <I2C_IsErrorOccurred+0xbc>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046d6:	d01d      	beq.n	8004714 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d01a      	beq.n	8004714 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046ee:	f7fd f903 	bl	80018f8 <HAL_GetTick>
 80046f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f4:	e00e      	b.n	8004714 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046f6:	f7fd f8ff 	bl	80018f8 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b19      	cmp	r3, #25
 8004702:	d907      	bls.n	8004714 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f043 0320 	orr.w	r3, r3, #32
 800470a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004712:	e006      	b.n	8004722 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b20      	cmp	r3, #32
 8004720:	d1e9      	bne.n	80046f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b20      	cmp	r3, #32
 800472e:	d003      	beq.n	8004738 <I2C_IsErrorOccurred+0xe0>
 8004730:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0aa      	beq.n	800468e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2220      	movs	r2, #32
 8004746:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00b      	beq.n	8004780 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004778:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	f043 0308 	orr.w	r3, r3, #8
 8004790:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800479a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	f043 0302 	orr.w	r3, r3, #2
 80047b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80047c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01c      	beq.n	8004806 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7ff fe3b 	bl	8004448 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <I2C_IsErrorOccurred+0x1bc>)
 80047de:	400b      	ands	r3, r1
 80047e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800480a:	4618      	mov	r0, r3
 800480c:	3728      	adds	r7, #40	@ 0x28
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	fe00e800 	.word	0xfe00e800

08004818 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	460b      	mov	r3, r1
 8004824:	817b      	strh	r3, [r7, #10]
 8004826:	4613      	mov	r3, r2
 8004828:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800482a:	897b      	ldrh	r3, [r7, #10]
 800482c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004830:	7a7b      	ldrb	r3, [r7, #9]
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004838:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	4313      	orrs	r3, r2
 8004842:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004846:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	0d5b      	lsrs	r3, r3, #21
 8004852:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004856:	4b08      	ldr	r3, [pc, #32]	@ (8004878 <I2C_TransferConfig+0x60>)
 8004858:	430b      	orrs	r3, r1
 800485a:	43db      	mvns	r3, r3
 800485c:	ea02 0103 	and.w	r1, r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	03ff63ff 	.word	0x03ff63ff

0800487c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b20      	cmp	r3, #32
 8004890:	d138      	bne.n	8004904 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800489c:	2302      	movs	r3, #2
 800489e:	e032      	b.n	8004906 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2224      	movs	r2, #36	@ 0x24
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0201 	bic.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	e000      	b.n	8004906 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b20      	cmp	r3, #32
 8004926:	d139      	bne.n	800499c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004932:	2302      	movs	r3, #2
 8004934:	e033      	b.n	800499e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2224      	movs	r2, #36	@ 0x24
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0201 	bic.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004964:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e000      	b.n	800499e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
  }
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80049b4:	4b29      	ldr	r3, [pc, #164]	@ (8004a5c <HAL_PWREx_ConfigSupply+0xb0>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	2b06      	cmp	r3, #6
 80049be:	d00a      	beq.n	80049d6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049c0:	4b26      	ldr	r3, [pc, #152]	@ (8004a5c <HAL_PWREx_ConfigSupply+0xb0>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d001      	beq.n	80049d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e040      	b.n	8004a54 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e03e      	b.n	8004a54 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049d6:	4b21      	ldr	r3, [pc, #132]	@ (8004a5c <HAL_PWREx_ConfigSupply+0xb0>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80049de:	491f      	ldr	r1, [pc, #124]	@ (8004a5c <HAL_PWREx_ConfigSupply+0xb0>)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049e6:	f7fc ff87 	bl	80018f8 <HAL_GetTick>
 80049ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049ec:	e009      	b.n	8004a02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049ee:	f7fc ff83 	bl	80018f8 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049fc:	d901      	bls.n	8004a02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e028      	b.n	8004a54 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a02:	4b16      	ldr	r3, [pc, #88]	@ (8004a5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0e:	d1ee      	bne.n	80049ee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b1e      	cmp	r3, #30
 8004a14:	d008      	beq.n	8004a28 <HAL_PWREx_ConfigSupply+0x7c>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a1a:	d005      	beq.n	8004a28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b1d      	cmp	r3, #29
 8004a20:	d002      	beq.n	8004a28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b2d      	cmp	r3, #45	@ 0x2d
 8004a26:	d114      	bne.n	8004a52 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004a28:	f7fc ff66 	bl	80018f8 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a2e:	e009      	b.n	8004a44 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a30:	f7fc ff62 	bl	80018f8 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a3e:	d901      	bls.n	8004a44 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e007      	b.n	8004a54 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a44:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a50:	d1ee      	bne.n	8004a30 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	58024800 	.word	0x58024800

08004a60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08c      	sub	sp, #48	@ 0x30
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f000 bc48 	b.w	8005304 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8088 	beq.w	8004b92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a82:	4b99      	ldr	r3, [pc, #612]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a8c:	4b96      	ldr	r3, [pc, #600]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d007      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x48>
 8004a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9a:	2b18      	cmp	r3, #24
 8004a9c:	d111      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x62>
 8004a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d10c      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa8:	4b8f      	ldr	r3, [pc, #572]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d06d      	beq.n	8004b90 <HAL_RCC_OscConfig+0x130>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d169      	bne.n	8004b90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f000 bc21 	b.w	8005304 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aca:	d106      	bne.n	8004ada <HAL_RCC_OscConfig+0x7a>
 8004acc:	4b86      	ldr	r3, [pc, #536]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a85      	ldr	r2, [pc, #532]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e02e      	b.n	8004b38 <HAL_RCC_OscConfig+0xd8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCC_OscConfig+0x9c>
 8004ae2:	4b81      	ldr	r3, [pc, #516]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a80      	ldr	r2, [pc, #512]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	4b7e      	ldr	r3, [pc, #504]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a7d      	ldr	r2, [pc, #500]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004af4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e01d      	b.n	8004b38 <HAL_RCC_OscConfig+0xd8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCC_OscConfig+0xc0>
 8004b06:	4b78      	ldr	r3, [pc, #480]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a77      	ldr	r2, [pc, #476]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b75      	ldr	r3, [pc, #468]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a74      	ldr	r2, [pc, #464]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e00b      	b.n	8004b38 <HAL_RCC_OscConfig+0xd8>
 8004b20:	4b71      	ldr	r3, [pc, #452]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a70      	ldr	r2, [pc, #448]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	4b6e      	ldr	r3, [pc, #440]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a6d      	ldr	r2, [pc, #436]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d013      	beq.n	8004b68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fc feda 	bl	80018f8 <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b48:	f7fc fed6 	bl	80018f8 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	@ 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e3d4      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b5a:	4b63      	ldr	r3, [pc, #396]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0xe8>
 8004b66:	e014      	b.n	8004b92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fc fec6 	bl	80018f8 <HAL_GetTick>
 8004b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b70:	f7fc fec2 	bl	80018f8 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	@ 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e3c0      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b82:	4b59      	ldr	r3, [pc, #356]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x110>
 8004b8e:	e000      	b.n	8004b92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 80ca 	beq.w	8004d34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba0:	4b51      	ldr	r3, [pc, #324]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ba8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004baa:	4b4f      	ldr	r3, [pc, #316]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x166>
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	2b18      	cmp	r3, #24
 8004bba:	d156      	bne.n	8004c6a <HAL_RCC_OscConfig+0x20a>
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d151      	bne.n	8004c6a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc6:	4b48      	ldr	r3, [pc, #288]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_RCC_OscConfig+0x17e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e392      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bde:	4b42      	ldr	r3, [pc, #264]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 0219 	bic.w	r2, r3, #25
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	493f      	ldr	r1, [pc, #252]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fc fe82 	bl	80018f8 <HAL_GetTick>
 8004bf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf8:	f7fc fe7e 	bl	80018f8 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e37c      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c0a:	4b37      	ldr	r3, [pc, #220]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	f7fc fe9f 	bl	8001958 <HAL_GetREVID>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d817      	bhi.n	8004c54 <HAL_RCC_OscConfig+0x1f4>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	2b40      	cmp	r3, #64	@ 0x40
 8004c2a:	d108      	bne.n	8004c3e <HAL_RCC_OscConfig+0x1de>
 8004c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c34:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c3a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c3c:	e07a      	b.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	031b      	lsls	r3, r3, #12
 8004c4c:	4926      	ldr	r1, [pc, #152]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c52:	e06f      	b.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c54:	4b24      	ldr	r3, [pc, #144]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	061b      	lsls	r3, r3, #24
 8004c62:	4921      	ldr	r1, [pc, #132]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c68:	e064      	b.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d047      	beq.n	8004d02 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c72:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 0219 	bic.w	r2, r3, #25
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	491a      	ldr	r1, [pc, #104]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fc fe38 	bl	80018f8 <HAL_GetTick>
 8004c88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8c:	f7fc fe34 	bl	80018f8 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e332      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004caa:	f7fc fe55 	bl	8001958 <HAL_GetREVID>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d819      	bhi.n	8004cec <HAL_RCC_OscConfig+0x28c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b40      	cmp	r3, #64	@ 0x40
 8004cbe:	d108      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x272>
 8004cc0:	4b09      	ldr	r3, [pc, #36]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004cc8:	4a07      	ldr	r2, [pc, #28]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cce:	6053      	str	r3, [r2, #4]
 8004cd0:	e030      	b.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
 8004cd2:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	031b      	lsls	r3, r3, #12
 8004ce0:	4901      	ldr	r1, [pc, #4]	@ (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	604b      	str	r3, [r1, #4]
 8004ce6:	e025      	b.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
 8004ce8:	58024400 	.word	0x58024400
 8004cec:	4b9a      	ldr	r3, [pc, #616]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	061b      	lsls	r3, r3, #24
 8004cfa:	4997      	ldr	r1, [pc, #604]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
 8004d00:	e018      	b.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d02:	4b95      	ldr	r3, [pc, #596]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a94      	ldr	r2, [pc, #592]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0e:	f7fc fdf3 	bl	80018f8 <HAL_GetTick>
 8004d12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d16:	f7fc fdef 	bl	80018f8 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e2ed      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d28:	4b8b      	ldr	r3, [pc, #556]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f0      	bne.n	8004d16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80a9 	beq.w	8004e94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d42:	4b85      	ldr	r3, [pc, #532]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d4c:	4b82      	ldr	r3, [pc, #520]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d007      	beq.n	8004d68 <HAL_RCC_OscConfig+0x308>
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b18      	cmp	r3, #24
 8004d5c:	d13a      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x374>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d135      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d68:	4b7b      	ldr	r3, [pc, #492]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_OscConfig+0x320>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	2b80      	cmp	r3, #128	@ 0x80
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e2c1      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d80:	f7fc fdea 	bl	8001958 <HAL_GetREVID>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d817      	bhi.n	8004dbe <HAL_RCC_OscConfig+0x35e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d108      	bne.n	8004da8 <HAL_RCC_OscConfig+0x348>
 8004d96:	4b70      	ldr	r3, [pc, #448]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d9e:	4a6e      	ldr	r2, [pc, #440]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004da0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004da4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004da6:	e075      	b.n	8004e94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004da8:	4b6b      	ldr	r3, [pc, #428]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	069b      	lsls	r3, r3, #26
 8004db6:	4968      	ldr	r1, [pc, #416]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dbc:	e06a      	b.n	8004e94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dbe:	4b66      	ldr	r3, [pc, #408]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	061b      	lsls	r3, r3, #24
 8004dcc:	4962      	ldr	r1, [pc, #392]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dd2:	e05f      	b.n	8004e94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d042      	beq.n	8004e62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a5d      	ldr	r2, [pc, #372]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fc fd86 	bl	80018f8 <HAL_GetTick>
 8004dec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004df0:	f7fc fd82 	bl	80018f8 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e280      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e02:	4b55      	ldr	r3, [pc, #340]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e0e:	f7fc fda3 	bl	8001958 <HAL_GetREVID>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d817      	bhi.n	8004e4c <HAL_RCC_OscConfig+0x3ec>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d108      	bne.n	8004e36 <HAL_RCC_OscConfig+0x3d6>
 8004e24:	4b4c      	ldr	r3, [pc, #304]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e32:	6053      	str	r3, [r2, #4]
 8004e34:	e02e      	b.n	8004e94 <HAL_RCC_OscConfig+0x434>
 8004e36:	4b48      	ldr	r3, [pc, #288]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	069b      	lsls	r3, r3, #26
 8004e44:	4944      	ldr	r1, [pc, #272]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	604b      	str	r3, [r1, #4]
 8004e4a:	e023      	b.n	8004e94 <HAL_RCC_OscConfig+0x434>
 8004e4c:	4b42      	ldr	r3, [pc, #264]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	061b      	lsls	r3, r3, #24
 8004e5a:	493f      	ldr	r1, [pc, #252]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60cb      	str	r3, [r1, #12]
 8004e60:	e018      	b.n	8004e94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e62:	4b3d      	ldr	r3, [pc, #244]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a3c      	ldr	r2, [pc, #240]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6e:	f7fc fd43 	bl	80018f8 <HAL_GetTick>
 8004e72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e76:	f7fc fd3f 	bl	80018f8 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e23d      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e88:	4b33      	ldr	r3, [pc, #204]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f0      	bne.n	8004e76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d036      	beq.n	8004f0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d019      	beq.n	8004edc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eac:	4a2a      	ldr	r2, [pc, #168]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fc fd20 	bl	80018f8 <HAL_GetTick>
 8004eb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ebc:	f7fc fd1c 	bl	80018f8 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e21a      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ece:	4b22      	ldr	r3, [pc, #136]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x45c>
 8004eda:	e018      	b.n	8004f0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004edc:	4b1e      	ldr	r3, [pc, #120]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fc fd06 	bl	80018f8 <HAL_GetTick>
 8004eec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef0:	f7fc fd02 	bl	80018f8 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e200      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f02:	4b15      	ldr	r3, [pc, #84]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d039      	beq.n	8004f8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d01c      	beq.n	8004f5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f22:	4b0d      	ldr	r3, [pc, #52]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a0c      	ldr	r2, [pc, #48]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004f28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f2e:	f7fc fce3 	bl	80018f8 <HAL_GetTick>
 8004f32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f36:	f7fc fcdf 	bl	80018f8 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e1dd      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f48:	4b03      	ldr	r3, [pc, #12]	@ (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0f0      	beq.n	8004f36 <HAL_RCC_OscConfig+0x4d6>
 8004f54:	e01b      	b.n	8004f8e <HAL_RCC_OscConfig+0x52e>
 8004f56:	bf00      	nop
 8004f58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f5c:	4b9b      	ldr	r3, [pc, #620]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a9a      	ldr	r2, [pc, #616]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004f62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f68:	f7fc fcc6 	bl	80018f8 <HAL_GetTick>
 8004f6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f70:	f7fc fcc2 	bl	80018f8 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1c0      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f82:	4b92      	ldr	r3, [pc, #584]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f0      	bne.n	8004f70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8081 	beq.w	800509e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f9c:	4b8c      	ldr	r3, [pc, #560]	@ (80051d0 <HAL_RCC_OscConfig+0x770>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a8b      	ldr	r2, [pc, #556]	@ (80051d0 <HAL_RCC_OscConfig+0x770>)
 8004fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fa8:	f7fc fca6 	bl	80018f8 <HAL_GetTick>
 8004fac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb0:	f7fc fca2 	bl	80018f8 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	@ 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e1a0      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc2:	4b83      	ldr	r3, [pc, #524]	@ (80051d0 <HAL_RCC_OscConfig+0x770>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d106      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x584>
 8004fd6:	4b7d      	ldr	r3, [pc, #500]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	4a7c      	ldr	r2, [pc, #496]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fe2:	e02d      	b.n	8005040 <HAL_RCC_OscConfig+0x5e0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10c      	bne.n	8005006 <HAL_RCC_OscConfig+0x5a6>
 8004fec:	4b77      	ldr	r3, [pc, #476]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff0:	4a76      	ldr	r2, [pc, #472]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ff8:	4b74      	ldr	r3, [pc, #464]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffc:	4a73      	ldr	r2, [pc, #460]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004ffe:	f023 0304 	bic.w	r3, r3, #4
 8005002:	6713      	str	r3, [r2, #112]	@ 0x70
 8005004:	e01c      	b.n	8005040 <HAL_RCC_OscConfig+0x5e0>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b05      	cmp	r3, #5
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0x5c8>
 800500e:	4b6f      	ldr	r3, [pc, #444]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005012:	4a6e      	ldr	r2, [pc, #440]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	6713      	str	r3, [r2, #112]	@ 0x70
 800501a:	4b6c      	ldr	r3, [pc, #432]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501e:	4a6b      	ldr	r2, [pc, #428]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	6713      	str	r3, [r2, #112]	@ 0x70
 8005026:	e00b      	b.n	8005040 <HAL_RCC_OscConfig+0x5e0>
 8005028:	4b68      	ldr	r3, [pc, #416]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502c:	4a67      	ldr	r2, [pc, #412]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	6713      	str	r3, [r2, #112]	@ 0x70
 8005034:	4b65      	ldr	r3, [pc, #404]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005038:	4a64      	ldr	r2, [pc, #400]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 800503a:	f023 0304 	bic.w	r3, r3, #4
 800503e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d015      	beq.n	8005074 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005048:	f7fc fc56 	bl	80018f8 <HAL_GetTick>
 800504c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800504e:	e00a      	b.n	8005066 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005050:	f7fc fc52 	bl	80018f8 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e14e      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005066:	4b59      	ldr	r3, [pc, #356]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0ee      	beq.n	8005050 <HAL_RCC_OscConfig+0x5f0>
 8005072:	e014      	b.n	800509e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005074:	f7fc fc40 	bl	80018f8 <HAL_GetTick>
 8005078:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800507a:	e00a      	b.n	8005092 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507c:	f7fc fc3c 	bl	80018f8 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e138      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005092:	4b4e      	ldr	r3, [pc, #312]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1ee      	bne.n	800507c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 812d 	beq.w	8005302 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050a8:	4b48      	ldr	r3, [pc, #288]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050b0:	2b18      	cmp	r3, #24
 80050b2:	f000 80bd 	beq.w	8005230 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	f040 809e 	bne.w	80051fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c0:	4b42      	ldr	r3, [pc, #264]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a41      	ldr	r2, [pc, #260]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 80050c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fc fc14 	bl	80018f8 <HAL_GetTick>
 80050d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d4:	f7fc fc10 	bl	80018f8 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e10e      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050e6:	4b39      	ldr	r3, [pc, #228]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050f2:	4b36      	ldr	r3, [pc, #216]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 80050f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050f6:	4b37      	ldr	r3, [pc, #220]	@ (80051d4 <HAL_RCC_OscConfig+0x774>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005102:	0112      	lsls	r2, r2, #4
 8005104:	430a      	orrs	r2, r1
 8005106:	4931      	ldr	r1, [pc, #196]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005108:	4313      	orrs	r3, r2
 800510a:	628b      	str	r3, [r1, #40]	@ 0x28
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005110:	3b01      	subs	r3, #1
 8005112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511a:	3b01      	subs	r3, #1
 800511c:	025b      	lsls	r3, r3, #9
 800511e:	b29b      	uxth	r3, r3
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005126:	3b01      	subs	r3, #1
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005134:	3b01      	subs	r3, #1
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800513c:	4923      	ldr	r1, [pc, #140]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005142:	4b22      	ldr	r3, [pc, #136]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005146:	4a21      	ldr	r2, [pc, #132]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800514e:	4b1f      	ldr	r3, [pc, #124]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005152:	4b21      	ldr	r3, [pc, #132]	@ (80051d8 <HAL_RCC_OscConfig+0x778>)
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800515a:	00d2      	lsls	r2, r2, #3
 800515c:	491b      	ldr	r1, [pc, #108]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005162:	4b1a      	ldr	r3, [pc, #104]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	f023 020c 	bic.w	r2, r3, #12
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	4917      	ldr	r1, [pc, #92]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005170:	4313      	orrs	r3, r2
 8005172:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005174:	4b15      	ldr	r3, [pc, #84]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005178:	f023 0202 	bic.w	r2, r3, #2
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005180:	4912      	ldr	r1, [pc, #72]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005186:	4b11      	ldr	r3, [pc, #68]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518a:	4a10      	ldr	r2, [pc, #64]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 800518c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005190:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005192:	4b0e      	ldr	r3, [pc, #56]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	4a0d      	ldr	r2, [pc, #52]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800519c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800519e:	4b0b      	ldr	r3, [pc, #44]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	4a0a      	ldr	r2, [pc, #40]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 80051a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051aa:	4b08      	ldr	r3, [pc, #32]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	4a07      	ldr	r2, [pc, #28]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051b6:	4b05      	ldr	r3, [pc, #20]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a04      	ldr	r2, [pc, #16]	@ (80051cc <HAL_RCC_OscConfig+0x76c>)
 80051bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c2:	f7fc fb99 	bl	80018f8 <HAL_GetTick>
 80051c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051c8:	e011      	b.n	80051ee <HAL_RCC_OscConfig+0x78e>
 80051ca:	bf00      	nop
 80051cc:	58024400 	.word	0x58024400
 80051d0:	58024800 	.word	0x58024800
 80051d4:	fffffc0c 	.word	0xfffffc0c
 80051d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fc fb8c 	bl	80018f8 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e08a      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051ee:	4b47      	ldr	r3, [pc, #284]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f0      	beq.n	80051dc <HAL_RCC_OscConfig+0x77c>
 80051fa:	e082      	b.n	8005302 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fc:	4b43      	ldr	r3, [pc, #268]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a42      	ldr	r2, [pc, #264]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 8005202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fc fb76 	bl	80018f8 <HAL_GetTick>
 800520c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005210:	f7fc fb72 	bl	80018f8 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e070      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005222:	4b3a      	ldr	r3, [pc, #232]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x7b0>
 800522e:	e068      	b.n	8005302 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005230:	4b36      	ldr	r3, [pc, #216]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 8005232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005234:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005236:	4b35      	ldr	r3, [pc, #212]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005240:	2b01      	cmp	r3, #1
 8005242:	d031      	beq.n	80052a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f003 0203 	and.w	r2, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d12a      	bne.n	80052a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525e:	429a      	cmp	r2, r3
 8005260:	d122      	bne.n	80052a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d11a      	bne.n	80052a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	0a5b      	lsrs	r3, r3, #9
 8005276:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800527e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d111      	bne.n	80052a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	0c1b      	lsrs	r3, r3, #16
 8005288:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005292:	429a      	cmp	r2, r3
 8005294:	d108      	bne.n	80052a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	0e1b      	lsrs	r3, r3, #24
 800529a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e02b      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052ac:	4b17      	ldr	r3, [pc, #92]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b0:	08db      	lsrs	r3, r3, #3
 80052b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d01f      	beq.n	8005302 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80052c2:	4b12      	ldr	r3, [pc, #72]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c6:	4a11      	ldr	r2, [pc, #68]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052ce:	f7fc fb13 	bl	80018f8 <HAL_GetTick>
 80052d2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80052d4:	bf00      	nop
 80052d6:	f7fc fb0f 	bl	80018f8 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	4293      	cmp	r3, r2
 80052e0:	d0f9      	beq.n	80052d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052e2:	4b0a      	ldr	r3, [pc, #40]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <HAL_RCC_OscConfig+0x8b0>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80052ee:	00d2      	lsls	r2, r2, #3
 80052f0:	4906      	ldr	r1, [pc, #24]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80052f6:	4b05      	ldr	r3, [pc, #20]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fa:	4a04      	ldr	r2, [pc, #16]	@ (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3730      	adds	r7, #48	@ 0x30
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	58024400 	.word	0x58024400
 8005310:	ffff0007 	.word	0xffff0007

08005314 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e19c      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005328:	4b8a      	ldr	r3, [pc, #552]	@ (8005554 <HAL_RCC_ClockConfig+0x240>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d910      	bls.n	8005358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b87      	ldr	r3, [pc, #540]	@ (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 020f 	bic.w	r2, r3, #15
 800533e:	4985      	ldr	r1, [pc, #532]	@ (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b83      	ldr	r3, [pc, #524]	@ (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e184      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d010      	beq.n	8005386 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	4b7b      	ldr	r3, [pc, #492]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005370:	429a      	cmp	r2, r3
 8005372:	d908      	bls.n	8005386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005374:	4b78      	ldr	r3, [pc, #480]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	4975      	ldr	r1, [pc, #468]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005382:	4313      	orrs	r3, r2
 8005384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	4b70      	ldr	r3, [pc, #448]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800539e:	429a      	cmp	r2, r3
 80053a0:	d908      	bls.n	80053b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	496a      	ldr	r1, [pc, #424]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d010      	beq.n	80053e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	4b64      	ldr	r3, [pc, #400]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d908      	bls.n	80053e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053d0:	4b61      	ldr	r3, [pc, #388]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	495e      	ldr	r1, [pc, #376]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d010      	beq.n	8005410 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69da      	ldr	r2, [r3, #28]
 80053f2:	4b59      	ldr	r3, [pc, #356]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d908      	bls.n	8005410 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053fe:	4b56      	ldr	r3, [pc, #344]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	4953      	ldr	r1, [pc, #332]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 800540c:	4313      	orrs	r3, r2
 800540e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d010      	beq.n	800543e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	4b4d      	ldr	r3, [pc, #308]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	429a      	cmp	r2, r3
 800542a:	d908      	bls.n	800543e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800542c:	4b4a      	ldr	r3, [pc, #296]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f023 020f 	bic.w	r2, r3, #15
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	4947      	ldr	r1, [pc, #284]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 800543a:	4313      	orrs	r3, r2
 800543c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d055      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800544a:	4b43      	ldr	r3, [pc, #268]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	4940      	ldr	r1, [pc, #256]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005458:	4313      	orrs	r3, r2
 800545a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d107      	bne.n	8005474 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005464:	4b3c      	ldr	r3, [pc, #240]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d121      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0f6      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d107      	bne.n	800548c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800547c:	4b36      	ldr	r3, [pc, #216]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d115      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0ea      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d107      	bne.n	80054a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005494:	4b30      	ldr	r3, [pc, #192]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d109      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0de      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0d6      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054b4:	4b28      	ldr	r3, [pc, #160]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f023 0207 	bic.w	r2, r3, #7
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4925      	ldr	r1, [pc, #148]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c6:	f7fc fa17 	bl	80018f8 <HAL_GetTick>
 80054ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054cc:	e00a      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ce:	f7fc fa13 	bl	80018f8 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054dc:	4293      	cmp	r3, r2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e0be      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d1eb      	bne.n	80054ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d010      	beq.n	8005524 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	4b14      	ldr	r3, [pc, #80]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	429a      	cmp	r2, r3
 8005510:	d208      	bcs.n	8005524 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005512:	4b11      	ldr	r3, [pc, #68]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f023 020f 	bic.w	r2, r3, #15
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	490e      	ldr	r1, [pc, #56]	@ (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005520:	4313      	orrs	r3, r2
 8005522:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005524:	4b0b      	ldr	r3, [pc, #44]	@ (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d214      	bcs.n	800555c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005532:	4b08      	ldr	r3, [pc, #32]	@ (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 020f 	bic.w	r2, r3, #15
 800553a:	4906      	ldr	r1, [pc, #24]	@ (8005554 <HAL_RCC_ClockConfig+0x240>)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b04      	ldr	r3, [pc, #16]	@ (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d005      	beq.n	800555c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e086      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
 8005554:	52002000 	.word	0x52002000
 8005558:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d010      	beq.n	800558a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	4b3f      	ldr	r3, [pc, #252]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005574:	429a      	cmp	r2, r3
 8005576:	d208      	bcs.n	800558a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005578:	4b3c      	ldr	r3, [pc, #240]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	4939      	ldr	r1, [pc, #228]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 8005586:	4313      	orrs	r3, r2
 8005588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d010      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	4b34      	ldr	r3, [pc, #208]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d208      	bcs.n	80055b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055a6:	4b31      	ldr	r3, [pc, #196]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	492e      	ldr	r1, [pc, #184]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d010      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	4b28      	ldr	r3, [pc, #160]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d208      	bcs.n	80055e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055d4:	4b25      	ldr	r3, [pc, #148]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	4922      	ldr	r1, [pc, #136]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d010      	beq.n	8005614 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69da      	ldr	r2, [r3, #28]
 80055f6:	4b1d      	ldr	r3, [pc, #116]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055fe:	429a      	cmp	r2, r3
 8005600:	d208      	bcs.n	8005614 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005602:	4b1a      	ldr	r3, [pc, #104]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	4917      	ldr	r1, [pc, #92]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 8005610:	4313      	orrs	r3, r2
 8005612:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005614:	f000 f834 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	4b14      	ldr	r3, [pc, #80]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	4912      	ldr	r1, [pc, #72]	@ (8005670 <HAL_RCC_ClockConfig+0x35c>)
 8005626:	5ccb      	ldrb	r3, [r1, r3]
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
 8005630:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005632:	4b0e      	ldr	r3, [pc, #56]	@ (800566c <HAL_RCC_ClockConfig+0x358>)
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	4a0d      	ldr	r2, [pc, #52]	@ (8005670 <HAL_RCC_ClockConfig+0x35c>)
 800563c:	5cd3      	ldrb	r3, [r2, r3]
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
 8005648:	4a0a      	ldr	r2, [pc, #40]	@ (8005674 <HAL_RCC_ClockConfig+0x360>)
 800564a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800564c:	4a0a      	ldr	r2, [pc, #40]	@ (8005678 <HAL_RCC_ClockConfig+0x364>)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005652:	4b0a      	ldr	r3, [pc, #40]	@ (800567c <HAL_RCC_ClockConfig+0x368>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7fc f904 	bl	8001864 <HAL_InitTick>
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400
 8005670:	0800fde8 	.word	0x0800fde8
 8005674:	24000004 	.word	0x24000004
 8005678:	24000000 	.word	0x24000000
 800567c:	24000008 	.word	0x24000008

08005680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005680:	b480      	push	{r7}
 8005682:	b089      	sub	sp, #36	@ 0x24
 8005684:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005686:	4bb3      	ldr	r3, [pc, #716]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800568e:	2b18      	cmp	r3, #24
 8005690:	f200 8155 	bhi.w	800593e <HAL_RCC_GetSysClockFreq+0x2be>
 8005694:	a201      	add	r2, pc, #4	@ (adr r2, 800569c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	08005701 	.word	0x08005701
 80056a0:	0800593f 	.word	0x0800593f
 80056a4:	0800593f 	.word	0x0800593f
 80056a8:	0800593f 	.word	0x0800593f
 80056ac:	0800593f 	.word	0x0800593f
 80056b0:	0800593f 	.word	0x0800593f
 80056b4:	0800593f 	.word	0x0800593f
 80056b8:	0800593f 	.word	0x0800593f
 80056bc:	08005727 	.word	0x08005727
 80056c0:	0800593f 	.word	0x0800593f
 80056c4:	0800593f 	.word	0x0800593f
 80056c8:	0800593f 	.word	0x0800593f
 80056cc:	0800593f 	.word	0x0800593f
 80056d0:	0800593f 	.word	0x0800593f
 80056d4:	0800593f 	.word	0x0800593f
 80056d8:	0800593f 	.word	0x0800593f
 80056dc:	0800572d 	.word	0x0800572d
 80056e0:	0800593f 	.word	0x0800593f
 80056e4:	0800593f 	.word	0x0800593f
 80056e8:	0800593f 	.word	0x0800593f
 80056ec:	0800593f 	.word	0x0800593f
 80056f0:	0800593f 	.word	0x0800593f
 80056f4:	0800593f 	.word	0x0800593f
 80056f8:	0800593f 	.word	0x0800593f
 80056fc:	08005733 	.word	0x08005733
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005700:	4b94      	ldr	r3, [pc, #592]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800570c:	4b91      	ldr	r3, [pc, #580]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	08db      	lsrs	r3, r3, #3
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	4a90      	ldr	r2, [pc, #576]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
 800571c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800571e:	e111      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005720:	4b8d      	ldr	r3, [pc, #564]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005722:	61bb      	str	r3, [r7, #24]
      break;
 8005724:	e10e      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005726:	4b8d      	ldr	r3, [pc, #564]	@ (800595c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005728:	61bb      	str	r3, [r7, #24]
      break;
 800572a:	e10b      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800572c:	4b8c      	ldr	r3, [pc, #560]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800572e:	61bb      	str	r3, [r7, #24]
      break;
 8005730:	e108      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005732:	4b88      	ldr	r3, [pc, #544]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800573c:	4b85      	ldr	r3, [pc, #532]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005746:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005748:	4b82      	ldr	r3, [pc, #520]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005752:	4b80      	ldr	r3, [pc, #512]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005756:	08db      	lsrs	r3, r3, #3
 8005758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80e1 	beq.w	8005938 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b02      	cmp	r3, #2
 800577a:	f000 8083 	beq.w	8005884 <HAL_RCC_GetSysClockFreq+0x204>
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b02      	cmp	r3, #2
 8005782:	f200 80a1 	bhi.w	80058c8 <HAL_RCC_GetSysClockFreq+0x248>
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_RCC_GetSysClockFreq+0x114>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d056      	beq.n	8005840 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005792:	e099      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005794:	4b6f      	ldr	r3, [pc, #444]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02d      	beq.n	80057fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057a0:	4b6c      	ldr	r3, [pc, #432]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	08db      	lsrs	r3, r3, #3
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	4a6b      	ldr	r2, [pc, #428]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
 80057b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ca:	4b62      	ldr	r3, [pc, #392]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057da:	ed97 6a02 	vldr	s12, [r7, #8]
 80057de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80057fa:	e087      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005968 <HAL_RCC_GetSysClockFreq+0x2e8>
 800580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580e:	4b51      	ldr	r3, [pc, #324]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005822:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800583e:	e065      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800596c <HAL_RCC_GetSysClockFreq+0x2ec>
 800584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005852:	4b40      	ldr	r3, [pc, #256]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005862:	ed97 6a02 	vldr	s12, [r7, #8]
 8005866:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005882:	e043      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005970 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005896:	4b2f      	ldr	r3, [pc, #188]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058c6:	e021      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800596c <HAL_RCC_GetSysClockFreq+0x2ec>
 80058d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058da:	4b1e      	ldr	r3, [pc, #120]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800590a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800590c:	4b11      	ldr	r3, [pc, #68]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005910:	0a5b      	lsrs	r3, r3, #9
 8005912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005916:	3301      	adds	r3, #1
 8005918:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	ee07 3a90 	vmov	s15, r3
 8005920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005924:	edd7 6a07 	vldr	s13, [r7, #28]
 8005928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800592c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005930:	ee17 3a90 	vmov	r3, s15
 8005934:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005936:	e005      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	61bb      	str	r3, [r7, #24]
      break;
 800593c:	e002      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800593e:	4b07      	ldr	r3, [pc, #28]	@ (800595c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005940:	61bb      	str	r3, [r7, #24]
      break;
 8005942:	bf00      	nop
  }

  return sysclockfreq;
 8005944:	69bb      	ldr	r3, [r7, #24]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3724      	adds	r7, #36	@ 0x24
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	58024400 	.word	0x58024400
 8005958:	03d09000 	.word	0x03d09000
 800595c:	003d0900 	.word	0x003d0900
 8005960:	017d7840 	.word	0x017d7840
 8005964:	46000000 	.word	0x46000000
 8005968:	4c742400 	.word	0x4c742400
 800596c:	4a742400 	.word	0x4a742400
 8005970:	4bbebc20 	.word	0x4bbebc20

08005974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800597a:	f7ff fe81 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 800597e:	4602      	mov	r2, r0
 8005980:	4b10      	ldr	r3, [pc, #64]	@ (80059c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	490f      	ldr	r1, [pc, #60]	@ (80059c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800598c:	5ccb      	ldrb	r3, [r1, r3]
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005998:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	4a09      	ldr	r2, [pc, #36]	@ (80059c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80059a2:	5cd3      	ldrb	r3, [r2, r3]
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	4a07      	ldr	r2, [pc, #28]	@ (80059cc <HAL_RCC_GetHCLKFreq+0x58>)
 80059b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059b2:	4a07      	ldr	r2, [pc, #28]	@ (80059d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059b8:	4b04      	ldr	r3, [pc, #16]	@ (80059cc <HAL_RCC_GetHCLKFreq+0x58>)
 80059ba:	681b      	ldr	r3, [r3, #0]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	58024400 	.word	0x58024400
 80059c8:	0800fde8 	.word	0x0800fde8
 80059cc:	24000004 	.word	0x24000004
 80059d0:	24000000 	.word	0x24000000

080059d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059d8:	f7ff ffcc 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 80059dc:	4602      	mov	r2, r0
 80059de:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	4904      	ldr	r1, [pc, #16]	@ (80059fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ea:	5ccb      	ldrb	r3, [r1, r3]
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	58024400 	.word	0x58024400
 80059fc:	0800fde8 	.word	0x0800fde8

08005a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a04:	f7ff ffb6 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	4904      	ldr	r1, [pc, #16]	@ (8005a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a16:	5ccb      	ldrb	r3, [r1, r3]
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	58024400 	.word	0x58024400
 8005a28:	0800fde8 	.word	0x0800fde8

08005a2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a30:	b0ca      	sub	sp, #296	@ 0x128
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a50:	2500      	movs	r5, #0
 8005a52:	ea54 0305 	orrs.w	r3, r4, r5
 8005a56:	d049      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a62:	d02f      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a68:	d828      	bhi.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a6e:	d01a      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a74:	d822      	bhi.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a7e:	d007      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a80:	e01c      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a82:	4bb8      	ldr	r3, [pc, #736]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	4ab7      	ldr	r2, [pc, #732]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a8e:	e01a      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a94:	3308      	adds	r3, #8
 8005a96:	2102      	movs	r1, #2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f002 fb61 	bl	8008160 <RCCEx_PLL2_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aa4:	e00f      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aaa:	3328      	adds	r3, #40	@ 0x28
 8005aac:	2102      	movs	r1, #2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f002 fc08 	bl	80082c4 <RCCEx_PLL3_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aba:	e004      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ace:	4ba5      	ldr	r3, [pc, #660]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ada:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005adc:	4aa1      	ldr	r2, [pc, #644]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ae2:	e003      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005af8:	f04f 0900 	mov.w	r9, #0
 8005afc:	ea58 0309 	orrs.w	r3, r8, r9
 8005b00:	d047      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d82a      	bhi.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b29 	.word	0x08005b29
 8005b18:	08005b37 	.word	0x08005b37
 8005b1c:	08005b4d 	.word	0x08005b4d
 8005b20:	08005b6b 	.word	0x08005b6b
 8005b24:	08005b6b 	.word	0x08005b6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b28:	4b8e      	ldr	r3, [pc, #568]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	4a8d      	ldr	r2, [pc, #564]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b34:	e01a      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f002 fb0e 	bl	8008160 <RCCEx_PLL2_Config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b4a:	e00f      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b50:	3328      	adds	r3, #40	@ 0x28
 8005b52:	2100      	movs	r1, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	f002 fbb5 	bl	80082c4 <RCCEx_PLL3_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b60:	e004      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b68:	e000      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b74:	4b7b      	ldr	r3, [pc, #492]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b78:	f023 0107 	bic.w	r1, r3, #7
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b82:	4a78      	ldr	r2, [pc, #480]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b84:	430b      	orrs	r3, r1
 8005b86:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b88:	e003      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b9e:	f04f 0b00 	mov.w	fp, #0
 8005ba2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005ba6:	d04c      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb2:	d030      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005bb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb8:	d829      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bba:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bbc:	d02d      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bc0:	d825      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bc2:	2b80      	cmp	r3, #128	@ 0x80
 8005bc4:	d018      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005bc6:	2b80      	cmp	r3, #128	@ 0x80
 8005bc8:	d821      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005bce:	2b40      	cmp	r3, #64	@ 0x40
 8005bd0:	d007      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005bd2:	e01c      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd4:	4b63      	ldr	r3, [pc, #396]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	4a62      	ldr	r2, [pc, #392]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005be0:	e01c      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	3308      	adds	r3, #8
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f002 fab8 	bl	8008160 <RCCEx_PLL2_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bf6:	e011      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfc:	3328      	adds	r3, #40	@ 0x28
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f002 fb5f 	bl	80082c4 <RCCEx_PLL3_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c0c:	e006      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c14:	e002      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c16:	bf00      	nop
 8005c18:	e000      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c24:	4b4f      	ldr	r3, [pc, #316]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c28:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c32:	4a4c      	ldr	r2, [pc, #304]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c38:	e003      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005c52:	2300      	movs	r3, #0
 8005c54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c58:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	d053      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c6e:	d035      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c74:	d82e      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c7a:	d031      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c7c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c80:	d828      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c86:	d01a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c8c:	d822      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c96:	d007      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c98:	e01c      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9a:	4b32      	ldr	r3, [pc, #200]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9e:	4a31      	ldr	r2, [pc, #196]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ca6:	e01c      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cac:	3308      	adds	r3, #8
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f002 fa55 	bl	8008160 <RCCEx_PLL2_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cbc:	e011      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc2:	3328      	adds	r3, #40	@ 0x28
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f002 fafc 	bl	80082c4 <RCCEx_PLL3_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cd2:	e006      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cda:	e002      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cdc:	bf00      	nop
 8005cde:	e000      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cea:	4b1e      	ldr	r3, [pc, #120]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d00:	e003      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005d24:	460b      	mov	r3, r1
 8005d26:	4313      	orrs	r3, r2
 8005d28:	d056      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d36:	d038      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d3c:	d831      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d42:	d034      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d48:	d82b      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d4e:	d01d      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d54:	d825      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d006      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d5e:	d00a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d60:	e01f      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d62:	bf00      	nop
 8005d64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d68:	4ba2      	ldr	r3, [pc, #648]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6c:	4aa1      	ldr	r2, [pc, #644]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d74:	e01c      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f002 f9ee 	bl	8008160 <RCCEx_PLL2_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d8a:	e011      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d90:	3328      	adds	r3, #40	@ 0x28
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f002 fa95 	bl	80082c4 <RCCEx_PLL3_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005da0:	e006      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005da8:	e002      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005daa:	bf00      	nop
 8005dac:	e000      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10b      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005db8:	4b8e      	ldr	r3, [pc, #568]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005dc8:	4a8a      	ldr	r2, [pc, #552]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dce:	e003      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005de4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005dee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005df2:	460b      	mov	r3, r1
 8005df4:	4313      	orrs	r3, r2
 8005df6:	d03a      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfe:	2b30      	cmp	r3, #48	@ 0x30
 8005e00:	d01f      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005e02:	2b30      	cmp	r3, #48	@ 0x30
 8005e04:	d819      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d00c      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d815      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d019      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d111      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e16:	4b77      	ldr	r3, [pc, #476]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	4a76      	ldr	r2, [pc, #472]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e22:	e011      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e28:	3308      	adds	r3, #8
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f002 f997 	bl	8008160 <RCCEx_PLL2_Config>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e38:	e006      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e40:	e002      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e42:	bf00      	nop
 8005e44:	e000      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e50:	4b68      	ldr	r3, [pc, #416]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e5e:	4a65      	ldr	r2, [pc, #404]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e60:	430b      	orrs	r3, r1
 8005e62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e64:	e003      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	d051      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e98:	d035      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e9e:	d82e      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ea0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ea4:	d031      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005ea6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eaa:	d828      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb0:	d01a      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb6:	d822      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec0:	d007      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005ec2:	e01c      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec8:	4a4a      	ldr	r2, [pc, #296]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ed0:	e01c      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f002 f940 	bl	8008160 <RCCEx_PLL2_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ee6:	e011      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eec:	3328      	adds	r3, #40	@ 0x28
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f002 f9e7 	bl	80082c4 <RCCEx_PLL3_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005efc:	e006      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f14:	4b37      	ldr	r3, [pc, #220]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f22:	4a34      	ldr	r2, [pc, #208]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f28:	e003      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f42:	2300      	movs	r3, #0
 8005f44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d056      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f5c:	d033      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f62:	d82c      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f68:	d02f      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f6e:	d826      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f74:	d02b      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f7a:	d820      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f80:	d012      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f86:	d81a      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d022      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f90:	d115      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f96:	3308      	adds	r3, #8
 8005f98:	2101      	movs	r1, #1
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f002 f8e0 	bl	8008160 <RCCEx_PLL2_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fa6:	e015      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fac:	3328      	adds	r3, #40	@ 0x28
 8005fae:	2101      	movs	r1, #1
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f002 f987 	bl	80082c4 <RCCEx_PLL3_Config>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fbc:	e00a      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fc4:	e006      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fc6:	bf00      	nop
 8005fc8:	e004      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fca:	bf00      	nop
 8005fcc:	e002      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10d      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fdc:	4b05      	ldr	r3, [pc, #20]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fea:	4a02      	ldr	r2, [pc, #8]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ff0:	e006      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ff2:	bf00      	nop
 8005ff4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800600c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006010:	2300      	movs	r3, #0
 8006012:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006016:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800601a:	460b      	mov	r3, r1
 800601c:	4313      	orrs	r3, r2
 800601e:	d055      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800602c:	d033      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800602e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006032:	d82c      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006038:	d02f      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800603e:	d826      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006040:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006044:	d02b      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800604a:	d820      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800604c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006050:	d012      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006056:	d81a      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d022      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800605c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006060:	d115      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006066:	3308      	adds	r3, #8
 8006068:	2101      	movs	r1, #1
 800606a:	4618      	mov	r0, r3
 800606c:	f002 f878 	bl	8008160 <RCCEx_PLL2_Config>
 8006070:	4603      	mov	r3, r0
 8006072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006076:	e015      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607c:	3328      	adds	r3, #40	@ 0x28
 800607e:	2101      	movs	r1, #1
 8006080:	4618      	mov	r0, r3
 8006082:	f002 f91f 	bl	80082c4 <RCCEx_PLL3_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800608c:	e00a      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006094:	e006      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006096:	bf00      	nop
 8006098:	e004      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800609a:	bf00      	nop
 800609c:	e002      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800609e:	bf00      	nop
 80060a0:	e000      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10b      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060ac:	4ba3      	ldr	r3, [pc, #652]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060bc:	4a9f      	ldr	r2, [pc, #636]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060be:	430b      	orrs	r3, r1
 80060c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80060c2:	e003      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060e6:	460b      	mov	r3, r1
 80060e8:	4313      	orrs	r3, r2
 80060ea:	d037      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060f6:	d00e      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80060f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060fc:	d816      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d018      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006106:	d111      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006108:	4b8c      	ldr	r3, [pc, #560]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	4a8b      	ldr	r2, [pc, #556]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800610e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006114:	e00f      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611a:	3308      	adds	r3, #8
 800611c:	2101      	movs	r1, #1
 800611e:	4618      	mov	r0, r3
 8006120:	f002 f81e 	bl	8008160 <RCCEx_PLL2_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800612a:	e004      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006132:	e000      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800613e:	4b7f      	ldr	r3, [pc, #508]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006142:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614c:	4a7b      	ldr	r2, [pc, #492]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800614e:	430b      	orrs	r3, r1
 8006150:	6513      	str	r3, [r2, #80]	@ 0x50
 8006152:	e003      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006158:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800615c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800616c:	2300      	movs	r3, #0
 800616e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006172:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006176:	460b      	mov	r3, r1
 8006178:	4313      	orrs	r3, r2
 800617a:	d039      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006182:	2b03      	cmp	r3, #3
 8006184:	d81c      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006186:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061c9 	.word	0x080061c9
 8006190:	0800619d 	.word	0x0800619d
 8006194:	080061ab 	.word	0x080061ab
 8006198:	080061c9 	.word	0x080061c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800619c:	4b67      	ldr	r3, [pc, #412]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800619e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a0:	4a66      	ldr	r2, [pc, #408]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061a8:	e00f      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ae:	3308      	adds	r3, #8
 80061b0:	2102      	movs	r1, #2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 ffd4 	bl	8008160 <RCCEx_PLL2_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061be:	e004      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061c6:	e000      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80061c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061d2:	4b5a      	ldr	r3, [pc, #360]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d6:	f023 0103 	bic.w	r1, r3, #3
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e0:	4a56      	ldr	r2, [pc, #344]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061e2:	430b      	orrs	r3, r1
 80061e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061e6:	e003      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006200:	2300      	movs	r3, #0
 8006202:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006206:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800620a:	460b      	mov	r3, r1
 800620c:	4313      	orrs	r3, r2
 800620e:	f000 809f 	beq.w	8006350 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006212:	4b4b      	ldr	r3, [pc, #300]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a4a      	ldr	r2, [pc, #296]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800621c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800621e:	f7fb fb6b 	bl	80018f8 <HAL_GetTick>
 8006222:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006226:	e00b      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006228:	f7fb fb66 	bl	80018f8 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b64      	cmp	r3, #100	@ 0x64
 8006236:	d903      	bls.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800623e:	e005      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006240:	4b3f      	ldr	r3, [pc, #252]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0ed      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800624c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006250:	2b00      	cmp	r3, #0
 8006252:	d179      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006254:	4b39      	ldr	r3, [pc, #228]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006256:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006260:	4053      	eors	r3, r2
 8006262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006266:	2b00      	cmp	r3, #0
 8006268:	d015      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800626a:	4b34      	ldr	r3, [pc, #208]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800626c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006272:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006276:	4b31      	ldr	r3, [pc, #196]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627a:	4a30      	ldr	r2, [pc, #192]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800627c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006280:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006282:	4b2e      	ldr	r3, [pc, #184]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006286:	4a2d      	ldr	r2, [pc, #180]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800628c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800628e:	4a2b      	ldr	r2, [pc, #172]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006290:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006294:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800629e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a2:	d118      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fb fb28 	bl	80018f8 <HAL_GetTick>
 80062a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ac:	e00d      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ae:	f7fb fb23 	bl	80018f8 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80062b8:	1ad2      	subs	r2, r2, r3
 80062ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062be:	429a      	cmp	r2, r3
 80062c0:	d903      	bls.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80062c8:	e005      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ca:	4b1c      	ldr	r3, [pc, #112]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0eb      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80062d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d129      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ee:	d10e      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80062f0:	4b12      	ldr	r3, [pc, #72]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006300:	091a      	lsrs	r2, r3, #4
 8006302:	4b10      	ldr	r3, [pc, #64]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006304:	4013      	ands	r3, r2
 8006306:	4a0d      	ldr	r2, [pc, #52]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006308:	430b      	orrs	r3, r1
 800630a:	6113      	str	r3, [r2, #16]
 800630c:	e005      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800630e:	4b0b      	ldr	r3, [pc, #44]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	4a0a      	ldr	r2, [pc, #40]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006314:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006318:	6113      	str	r3, [r2, #16]
 800631a:	4b08      	ldr	r3, [pc, #32]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800631c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006322:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800632a:	4a04      	ldr	r2, [pc, #16]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800632c:	430b      	orrs	r3, r1
 800632e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006330:	e00e      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800633a:	e009      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800633c:	58024400 	.word	0x58024400
 8006340:	58024800 	.word	0x58024800
 8006344:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800634c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f002 0301 	and.w	r3, r2, #1
 800635c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006360:	2300      	movs	r3, #0
 8006362:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006366:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800636a:	460b      	mov	r3, r1
 800636c:	4313      	orrs	r3, r2
 800636e:	f000 8089 	beq.w	8006484 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006376:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006378:	2b28      	cmp	r3, #40	@ 0x28
 800637a:	d86b      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800637c:	a201      	add	r2, pc, #4	@ (adr r2, 8006384 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	0800645d 	.word	0x0800645d
 8006388:	08006455 	.word	0x08006455
 800638c:	08006455 	.word	0x08006455
 8006390:	08006455 	.word	0x08006455
 8006394:	08006455 	.word	0x08006455
 8006398:	08006455 	.word	0x08006455
 800639c:	08006455 	.word	0x08006455
 80063a0:	08006455 	.word	0x08006455
 80063a4:	08006429 	.word	0x08006429
 80063a8:	08006455 	.word	0x08006455
 80063ac:	08006455 	.word	0x08006455
 80063b0:	08006455 	.word	0x08006455
 80063b4:	08006455 	.word	0x08006455
 80063b8:	08006455 	.word	0x08006455
 80063bc:	08006455 	.word	0x08006455
 80063c0:	08006455 	.word	0x08006455
 80063c4:	0800643f 	.word	0x0800643f
 80063c8:	08006455 	.word	0x08006455
 80063cc:	08006455 	.word	0x08006455
 80063d0:	08006455 	.word	0x08006455
 80063d4:	08006455 	.word	0x08006455
 80063d8:	08006455 	.word	0x08006455
 80063dc:	08006455 	.word	0x08006455
 80063e0:	08006455 	.word	0x08006455
 80063e4:	0800645d 	.word	0x0800645d
 80063e8:	08006455 	.word	0x08006455
 80063ec:	08006455 	.word	0x08006455
 80063f0:	08006455 	.word	0x08006455
 80063f4:	08006455 	.word	0x08006455
 80063f8:	08006455 	.word	0x08006455
 80063fc:	08006455 	.word	0x08006455
 8006400:	08006455 	.word	0x08006455
 8006404:	0800645d 	.word	0x0800645d
 8006408:	08006455 	.word	0x08006455
 800640c:	08006455 	.word	0x08006455
 8006410:	08006455 	.word	0x08006455
 8006414:	08006455 	.word	0x08006455
 8006418:	08006455 	.word	0x08006455
 800641c:	08006455 	.word	0x08006455
 8006420:	08006455 	.word	0x08006455
 8006424:	0800645d 	.word	0x0800645d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642c:	3308      	adds	r3, #8
 800642e:	2101      	movs	r1, #1
 8006430:	4618      	mov	r0, r3
 8006432:	f001 fe95 	bl	8008160 <RCCEx_PLL2_Config>
 8006436:	4603      	mov	r3, r0
 8006438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800643c:	e00f      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800643e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006442:	3328      	adds	r3, #40	@ 0x28
 8006444:	2101      	movs	r1, #1
 8006446:	4618      	mov	r0, r3
 8006448:	f001 ff3c 	bl	80082c4 <RCCEx_PLL3_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006452:	e004      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800645a:	e000      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800645c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800645e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006466:	4bbf      	ldr	r3, [pc, #764]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006472:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006474:	4abb      	ldr	r2, [pc, #748]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006476:	430b      	orrs	r3, r1
 8006478:	6553      	str	r3, [r2, #84]	@ 0x54
 800647a:	e003      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f002 0302 	and.w	r3, r2, #2
 8006490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006494:	2300      	movs	r3, #0
 8006496:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800649a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800649e:	460b      	mov	r3, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	d041      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	d824      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80064ae:	a201      	add	r2, pc, #4	@ (adr r2, 80064b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	08006501 	.word	0x08006501
 80064b8:	080064cd 	.word	0x080064cd
 80064bc:	080064e3 	.word	0x080064e3
 80064c0:	08006501 	.word	0x08006501
 80064c4:	08006501 	.word	0x08006501
 80064c8:	08006501 	.word	0x08006501
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d0:	3308      	adds	r3, #8
 80064d2:	2101      	movs	r1, #1
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fe43 	bl	8008160 <RCCEx_PLL2_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064e0:	e00f      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	3328      	adds	r3, #40	@ 0x28
 80064e8:	2101      	movs	r1, #1
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 feea 	bl	80082c4 <RCCEx_PLL3_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064f6:	e004      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10a      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800650a:	4b96      	ldr	r3, [pc, #600]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800650c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650e:	f023 0107 	bic.w	r1, r3, #7
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006518:	4a92      	ldr	r2, [pc, #584]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800651a:	430b      	orrs	r3, r1
 800651c:	6553      	str	r3, [r2, #84]	@ 0x54
 800651e:	e003      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	f002 0304 	and.w	r3, r2, #4
 8006534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006538:	2300      	movs	r3, #0
 800653a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800653e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006542:	460b      	mov	r3, r1
 8006544:	4313      	orrs	r3, r2
 8006546:	d044      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006550:	2b05      	cmp	r3, #5
 8006552:	d825      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006554:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	080065a9 	.word	0x080065a9
 8006560:	08006575 	.word	0x08006575
 8006564:	0800658b 	.word	0x0800658b
 8006568:	080065a9 	.word	0x080065a9
 800656c:	080065a9 	.word	0x080065a9
 8006570:	080065a9 	.word	0x080065a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006578:	3308      	adds	r3, #8
 800657a:	2101      	movs	r1, #1
 800657c:	4618      	mov	r0, r3
 800657e:	f001 fdef 	bl	8008160 <RCCEx_PLL2_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006588:	e00f      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658e:	3328      	adds	r3, #40	@ 0x28
 8006590:	2101      	movs	r1, #1
 8006592:	4618      	mov	r0, r3
 8006594:	f001 fe96 	bl	80082c4 <RCCEx_PLL3_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800659e:	e004      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065a6:	e000      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80065a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065b2:	4b6c      	ldr	r3, [pc, #432]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b6:	f023 0107 	bic.w	r1, r3, #7
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065c2:	4a68      	ldr	r2, [pc, #416]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80065c8:	e003      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f002 0320 	and.w	r3, r2, #32
 80065de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065e2:	2300      	movs	r3, #0
 80065e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065ec:	460b      	mov	r3, r1
 80065ee:	4313      	orrs	r3, r2
 80065f0:	d055      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065fe:	d033      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006604:	d82c      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800660a:	d02f      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800660c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006610:	d826      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006612:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006616:	d02b      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006618:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800661c:	d820      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800661e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006622:	d012      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006628:	d81a      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d022      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800662e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006632:	d115      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006638:	3308      	adds	r3, #8
 800663a:	2100      	movs	r1, #0
 800663c:	4618      	mov	r0, r3
 800663e:	f001 fd8f 	bl	8008160 <RCCEx_PLL2_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006648:	e015      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	3328      	adds	r3, #40	@ 0x28
 8006650:	2102      	movs	r1, #2
 8006652:	4618      	mov	r0, r3
 8006654:	f001 fe36 	bl	80082c4 <RCCEx_PLL3_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800665e:	e00a      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006666:	e006      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006668:	bf00      	nop
 800666a:	e004      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800666c:	bf00      	nop
 800666e:	e002      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10b      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800667e:	4b39      	ldr	r3, [pc, #228]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006682:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668e:	4a35      	ldr	r2, [pc, #212]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006690:	430b      	orrs	r3, r1
 8006692:	6553      	str	r3, [r2, #84]	@ 0x54
 8006694:	e003      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800669a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80066aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066ae:	2300      	movs	r3, #0
 80066b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80066b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4313      	orrs	r3, r2
 80066bc:	d058      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066ca:	d033      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80066cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066d0:	d82c      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d6:	d02f      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066dc:	d826      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066e2:	d02b      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80066e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066e8:	d820      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ee:	d012      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80066f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f4:	d81a      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d022      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80066fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fe:	d115      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006704:	3308      	adds	r3, #8
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f001 fd29 	bl	8008160 <RCCEx_PLL2_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006714:	e015      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	3328      	adds	r3, #40	@ 0x28
 800671c:	2102      	movs	r1, #2
 800671e:	4618      	mov	r0, r3
 8006720:	f001 fdd0 	bl	80082c4 <RCCEx_PLL3_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800672a:	e00a      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006732:	e006      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006734:	bf00      	nop
 8006736:	e004      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006738:	bf00      	nop
 800673a:	e002      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800673c:	bf00      	nop
 800673e:	e000      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10e      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800674a:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800674c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006756:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800675a:	4a02      	ldr	r2, [pc, #8]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800675c:	430b      	orrs	r3, r1
 800675e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006760:	e006      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006762:	bf00      	nop
 8006764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800676c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800677c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006780:	2300      	movs	r3, #0
 8006782:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006786:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800678a:	460b      	mov	r3, r1
 800678c:	4313      	orrs	r3, r2
 800678e:	d055      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006798:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800679c:	d033      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800679e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067a2:	d82c      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a8:	d02f      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80067aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ae:	d826      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067b4:	d02b      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80067b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067ba:	d820      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067c0:	d012      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80067c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067c6:	d81a      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d022      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80067cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067d0:	d115      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d6:	3308      	adds	r3, #8
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 fcc0 	bl	8008160 <RCCEx_PLL2_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067e6:	e015      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	3328      	adds	r3, #40	@ 0x28
 80067ee:	2102      	movs	r1, #2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f001 fd67 	bl	80082c4 <RCCEx_PLL3_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067fc:	e00a      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006804:	e006      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006806:	bf00      	nop
 8006808:	e004      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800680a:	bf00      	nop
 800680c:	e002      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800680e:	bf00      	nop
 8006810:	e000      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10b      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800681c:	4ba1      	ldr	r3, [pc, #644]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800681e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006820:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006828:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800682c:	4a9d      	ldr	r2, [pc, #628]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800682e:	430b      	orrs	r3, r1
 8006830:	6593      	str	r3, [r2, #88]	@ 0x58
 8006832:	e003      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006838:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800683c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006844:	f002 0308 	and.w	r3, r2, #8
 8006848:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800684c:	2300      	movs	r3, #0
 800684e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006852:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006856:	460b      	mov	r3, r1
 8006858:	4313      	orrs	r3, r2
 800685a:	d01e      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800685c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006868:	d10c      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686e:	3328      	adds	r3, #40	@ 0x28
 8006870:	2102      	movs	r1, #2
 8006872:	4618      	mov	r0, r3
 8006874:	f001 fd26 	bl	80082c4 <RCCEx_PLL3_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006884:	4b87      	ldr	r3, [pc, #540]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006888:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006894:	4a83      	ldr	r2, [pc, #524]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006896:	430b      	orrs	r3, r1
 8006898:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800689a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	f002 0310 	and.w	r3, r2, #16
 80068a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80068b4:	460b      	mov	r3, r1
 80068b6:	4313      	orrs	r3, r2
 80068b8:	d01e      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c6:	d10c      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068cc:	3328      	adds	r3, #40	@ 0x28
 80068ce:	2102      	movs	r1, #2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 fcf7 	bl	80082c4 <RCCEx_PLL3_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068e2:	4b70      	ldr	r3, [pc, #448]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068f2:	4a6c      	ldr	r2, [pc, #432]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006904:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006908:	2300      	movs	r3, #0
 800690a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800690e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	d03e      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006924:	d022      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800692a:	d81b      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006934:	d00b      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006936:	e015      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693c:	3308      	adds	r3, #8
 800693e:	2100      	movs	r1, #0
 8006940:	4618      	mov	r0, r3
 8006942:	f001 fc0d 	bl	8008160 <RCCEx_PLL2_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800694c:	e00f      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006952:	3328      	adds	r3, #40	@ 0x28
 8006954:	2102      	movs	r1, #2
 8006956:	4618      	mov	r0, r3
 8006958:	f001 fcb4 	bl	80082c4 <RCCEx_PLL3_Config>
 800695c:	4603      	mov	r3, r0
 800695e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006962:	e004      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800696a:	e000      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800696c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006976:	4b4b      	ldr	r3, [pc, #300]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800697a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800697e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006986:	4a47      	ldr	r2, [pc, #284]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006988:	430b      	orrs	r3, r1
 800698a:	6593      	str	r3, [r2, #88]	@ 0x58
 800698c:	e003      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80069a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069a4:	2300      	movs	r3, #0
 80069a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80069ac:	460b      	mov	r3, r1
 80069ae:	4313      	orrs	r3, r2
 80069b0:	d03b      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069be:	d01f      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80069c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069c4:	d818      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80069c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069ca:	d003      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80069cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069d0:	d007      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80069d2:	e011      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d4:	4b33      	ldr	r3, [pc, #204]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d8:	4a32      	ldr	r2, [pc, #200]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069e0:	e00f      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e6:	3328      	adds	r3, #40	@ 0x28
 80069e8:	2101      	movs	r1, #1
 80069ea:	4618      	mov	r0, r3
 80069ec:	f001 fc6a 	bl	80082c4 <RCCEx_PLL3_Config>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80069f6:	e004      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069fe:	e000      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a0a:	4b26      	ldr	r3, [pc, #152]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1a:	4a22      	ldr	r2, [pc, #136]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a20:	e003      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a36:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a38:	2300      	movs	r3, #0
 8006a3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d034      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a54:	d007      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a56:	e011      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a58:	4b12      	ldr	r3, [pc, #72]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	4a11      	ldr	r2, [pc, #68]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a64:	e00e      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	2102      	movs	r1, #2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 fb76 	bl	8008160 <RCCEx_PLL2_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a7a:	e003      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10d      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a8c:	4b05      	ldr	r3, [pc, #20]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a9a:	4a02      	ldr	r2, [pc, #8]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006aa0:	e006      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006aa2:	bf00      	nop
 8006aa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006abe:	2300      	movs	r3, #0
 8006ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ac2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	d00c      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad0:	3328      	adds	r3, #40	@ 0x28
 8006ad2:	2102      	movs	r1, #2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 fbf5 	bl	80082c4 <RCCEx_PLL3_Config>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006af2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006af4:	2300      	movs	r3, #0
 8006af6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006af8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006afc:	460b      	mov	r3, r1
 8006afe:	4313      	orrs	r3, r2
 8006b00:	d038      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b0e:	d018      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006b10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b14:	d811      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b1a:	d014      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b20:	d80b      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d011      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b2a:	d106      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2c:	4bc3      	ldr	r3, [pc, #780]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b30:	4ac2      	ldr	r2, [pc, #776]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b38:	e008      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b40:	e004      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b42:	bf00      	nop
 8006b44:	e002      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b46:	bf00      	nop
 8006b48:	e000      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10b      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b54:	4bb9      	ldr	r3, [pc, #740]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b64:	4ab5      	ldr	r2, [pc, #724]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b66:	430b      	orrs	r3, r1
 8006b68:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b6a:	e003      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b82:	2300      	movs	r3, #0
 8006b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	d009      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b90:	4baa      	ldr	r3, [pc, #680]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b9e:	4aa7      	ldr	r2, [pc, #668]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006bb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bb6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	d00a      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006bc0:	4b9e      	ldr	r3, [pc, #632]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006bd0:	4a9a      	ldr	r2, [pc, #616]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006be4:	2300      	movs	r3, #0
 8006be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006be8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bec:	460b      	mov	r3, r1
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bf2:	4b92      	ldr	r3, [pc, #584]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c00:	4a8e      	ldr	r2, [pc, #568]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c02:	430b      	orrs	r3, r1
 8006c04:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c12:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c14:	2300      	movs	r3, #0
 8006c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c18:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	d00e      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c22:	4b86      	ldr	r3, [pc, #536]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	4a85      	ldr	r2, [pc, #532]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c2c:	6113      	str	r3, [r2, #16]
 8006c2e:	4b83      	ldr	r3, [pc, #524]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c30:	6919      	ldr	r1, [r3, #16]
 8006c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c3a:	4a80      	ldr	r2, [pc, #512]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c4e:	2300      	movs	r3, #0
 8006c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c52:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c56:	460b      	mov	r3, r1
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	d009      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c5c:	4b77      	ldr	r3, [pc, #476]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c60:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6a:	4a74      	ldr	r2, [pc, #464]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c6c:	430b      	orrs	r3, r1
 8006c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c7e:	2300      	movs	r3, #0
 8006c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c86:	460b      	mov	r3, r1
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	d00a      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c8c:	4b6b      	ldr	r3, [pc, #428]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c90:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c9c:	4a67      	ldr	r2, [pc, #412]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c9e:	430b      	orrs	r3, r1
 8006ca0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	2100      	movs	r1, #0
 8006cac:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cb4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	d011      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 fa4a 	bl	8008160 <RCCEx_PLL2_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	2100      	movs	r1, #0
 8006cec:	6239      	str	r1, [r7, #32]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cf4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	d011      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d02:	3308      	adds	r3, #8
 8006d04:	2101      	movs	r1, #1
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 fa2a 	bl	8008160 <RCCEx_PLL2_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	61b9      	str	r1, [r7, #24]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	d011      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d42:	3308      	adds	r3, #8
 8006d44:	2102      	movs	r1, #2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 fa0a 	bl	8008160 <RCCEx_PLL2_Config>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6139      	str	r1, [r7, #16]
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	d011      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d82:	3328      	adds	r3, #40	@ 0x28
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 fa9c 	bl	80082c4 <RCCEx_PLL3_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	2100      	movs	r1, #0
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	f003 0310 	and.w	r3, r3, #16
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006db8:	460b      	mov	r3, r1
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	d011      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc2:	3328      	adds	r3, #40	@ 0x28
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 fa7c 	bl	80082c4 <RCCEx_PLL3_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	2100      	movs	r1, #0
 8006dec:	6039      	str	r1, [r7, #0]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	607b      	str	r3, [r7, #4]
 8006df4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	d011      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e02:	3328      	adds	r3, #40	@ 0x28
 8006e04:	2102      	movs	r1, #2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 fa5c 	bl	80082c4 <RCCEx_PLL3_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006e22:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e000      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006e36:	46bd      	mov	sp, r7
 8006e38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e3c:	58024400 	.word	0x58024400

08006e40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b090      	sub	sp, #64	@ 0x40
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e4e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006e52:	430b      	orrs	r3, r1
 8006e54:	f040 8094 	bne.w	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006e58:	4b9e      	ldr	r3, [pc, #632]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	f200 8087 	bhi.w	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08006e85 	.word	0x08006e85
 8006e74:	08006ead 	.word	0x08006ead
 8006e78:	08006ed5 	.word	0x08006ed5
 8006e7c:	08006f71 	.word	0x08006f71
 8006e80:	08006efd 	.word	0x08006efd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e84:	4b93      	ldr	r3, [pc, #588]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e90:	d108      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 f810 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea0:	f000 bd45 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea8:	f000 bd41 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006eac:	4b89      	ldr	r3, [pc, #548]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eb8:	d108      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eba:	f107 0318 	add.w	r3, r7, #24
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fd54 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ec8:	f000 bd31 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed0:	f000 bd2d 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ed4:	4b7f      	ldr	r3, [pc, #508]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ee0:	d108      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ee2:	f107 030c 	add.w	r3, r7, #12
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 fe94 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ef0:	f000 bd1d 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef8:	f000 bd19 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006efc:	4b75      	ldr	r3, [pc, #468]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f04:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f06:	4b73      	ldr	r3, [pc, #460]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d10c      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d109      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f18:	4b6e      	ldr	r3, [pc, #440]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	08db      	lsrs	r3, r3, #3
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	4a6d      	ldr	r2, [pc, #436]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f24:	fa22 f303 	lsr.w	r3, r2, r3
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f2a:	e01f      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f2c:	4b69      	ldr	r3, [pc, #420]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f38:	d106      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f40:	d102      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f42:	4b66      	ldr	r3, [pc, #408]	@ (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f46:	e011      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f48:	4b62      	ldr	r3, [pc, #392]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f54:	d106      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f5c:	d102      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f5e:	4b60      	ldr	r3, [pc, #384]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f62:	e003      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f68:	f000 bce1 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f6c:	f000 bcdf 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f70:	4b5c      	ldr	r3, [pc, #368]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f74:	f000 bcdb 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f7c:	f000 bcd7 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f84:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	f040 80ad 	bne.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006f8e:	4b51      	ldr	r3, [pc, #324]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f92:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006f96:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f9e:	d056      	beq.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fa6:	f200 8090 	bhi.w	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fac:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fae:	f000 8088 	beq.w	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb4:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fb6:	f200 8088 	bhi.w	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbc:	2b80      	cmp	r3, #128	@ 0x80
 8006fbe:	d032      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	2b80      	cmp	r3, #128	@ 0x80
 8006fc4:	f200 8081 	bhi.w	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	2b40      	cmp	r3, #64	@ 0x40
 8006fd2:	d014      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006fd4:	e079      	b.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fe2:	d108      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 ff67 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ff2:	f000 bc9c 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ffa:	f000 bc98 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ffe:	4b35      	ldr	r3, [pc, #212]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800700a:	d108      	bne.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800700c:	f107 0318 	add.w	r3, r7, #24
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fcab 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800701a:	f000 bc88 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007022:	f000 bc84 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007026:	4b2b      	ldr	r3, [pc, #172]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800702e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007032:	d108      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007034:	f107 030c 	add.w	r3, r7, #12
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fdeb 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007042:	f000 bc74 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800704a:	f000 bc70 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800704e:	4b21      	ldr	r3, [pc, #132]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007052:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007058:	4b1e      	ldr	r3, [pc, #120]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b04      	cmp	r3, #4
 8007062:	d10c      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007066:	2b00      	cmp	r3, #0
 8007068:	d109      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800706a:	4b1a      	ldr	r3, [pc, #104]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	08db      	lsrs	r3, r3, #3
 8007070:	f003 0303 	and.w	r3, r3, #3
 8007074:	4a18      	ldr	r2, [pc, #96]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007076:	fa22 f303 	lsr.w	r3, r2, r3
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800707c:	e01f      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800707e:	4b15      	ldr	r3, [pc, #84]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800708a:	d106      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800708c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007092:	d102      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007094:	4b11      	ldr	r3, [pc, #68]	@ (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007098:	e011      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800709a:	4b0e      	ldr	r3, [pc, #56]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070a6:	d106      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80070a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070ae:	d102      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070b0:	4b0b      	ldr	r3, [pc, #44]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070b4:	e003      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80070ba:	f000 bc38 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070be:	f000 bc36 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80070c2:	4b08      	ldr	r3, [pc, #32]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80070c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c6:	f000 bc32 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ce:	f000 bc2e 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070d2:	bf00      	nop
 80070d4:	58024400 	.word	0x58024400
 80070d8:	03d09000 	.word	0x03d09000
 80070dc:	003d0900 	.word	0x003d0900
 80070e0:	017d7840 	.word	0x017d7840
 80070e4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80070e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ec:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80070f0:	430b      	orrs	r3, r1
 80070f2:	f040 809c 	bne.w	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80070f6:	4b9e      	ldr	r3, [pc, #632]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070fa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80070fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007106:	d054      	beq.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800710e:	f200 808b 	bhi.w	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007118:	f000 8083 	beq.w	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007122:	f200 8081 	bhi.w	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800712c:	d02f      	beq.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007134:	d878      	bhi.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007142:	d012      	beq.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007144:	e070      	b.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007146:	4b8a      	ldr	r3, [pc, #552]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800714e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007152:	d107      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007158:	4618      	mov	r0, r3
 800715a:	f000 feaf 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800715e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007162:	e3e4      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007168:	e3e1      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800716a:	4b81      	ldr	r3, [pc, #516]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007176:	d107      	bne.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007178:	f107 0318 	add.w	r3, r7, #24
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fbf5 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007186:	e3d2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800718c:	e3cf      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800718e:	4b78      	ldr	r3, [pc, #480]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007196:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800719a:	d107      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800719c:	f107 030c 	add.w	r3, r7, #12
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fd37 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071aa:	e3c0      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b0:	e3bd      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071b2:	4b6f      	ldr	r3, [pc, #444]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80071ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071bc:	4b6c      	ldr	r3, [pc, #432]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d10c      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80071c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d109      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071ce:	4b68      	ldr	r3, [pc, #416]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	08db      	lsrs	r3, r3, #3
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	4a66      	ldr	r2, [pc, #408]	@ (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80071da:	fa22 f303 	lsr.w	r3, r2, r3
 80071de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071e0:	e01e      	b.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071e2:	4b63      	ldr	r3, [pc, #396]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ee:	d106      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80071f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071f6:	d102      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071f8:	4b5f      	ldr	r3, [pc, #380]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80071fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071fc:	e010      	b.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071fe:	4b5c      	ldr	r3, [pc, #368]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800720a:	d106      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800720c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800720e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007212:	d102      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007214:	4b59      	ldr	r3, [pc, #356]	@ (800737c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007218:	e002      	b.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800721e:	e386      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007220:	e385      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007222:	4b57      	ldr	r3, [pc, #348]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007226:	e382      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007228:	2300      	movs	r3, #0
 800722a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800722c:	e37f      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800722e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007232:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007236:	430b      	orrs	r3, r1
 8007238:	f040 80a7 	bne.w	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800723c:	4b4c      	ldr	r3, [pc, #304]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800723e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007240:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007244:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800724c:	d055      	beq.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007254:	f200 8096 	bhi.w	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800725e:	f000 8084 	beq.w	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007264:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007268:	f200 808c 	bhi.w	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007272:	d030      	beq.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800727a:	f200 8083 	bhi.w	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	2b00      	cmp	r3, #0
 8007282:	d004      	beq.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800728a:	d012      	beq.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800728c:	e07a      	b.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800728e:	4b38      	ldr	r3, [pc, #224]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007296:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800729a:	d107      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800729c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fe0b 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072aa:	e340      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b0:	e33d      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072be:	d107      	bne.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072c0:	f107 0318 	add.w	r3, r7, #24
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fb51 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072ce:	e32e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d4:	e32b      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072d6:	4b26      	ldr	r3, [pc, #152]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e2:	d107      	bne.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072e4:	f107 030c 	add.w	r3, r7, #12
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 fc93 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072f2:	e31c      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072f8:	e319      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007302:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007304:	4b1a      	ldr	r3, [pc, #104]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b04      	cmp	r3, #4
 800730e:	d10c      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007316:	4b16      	ldr	r3, [pc, #88]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	08db      	lsrs	r3, r3, #3
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	4a14      	ldr	r2, [pc, #80]	@ (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007322:	fa22 f303 	lsr.w	r3, r2, r3
 8007326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007328:	e01e      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800732a:	4b11      	ldr	r3, [pc, #68]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007336:	d106      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800733e:	d102      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007340:	4b0d      	ldr	r3, [pc, #52]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007344:	e010      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007346:	4b0a      	ldr	r3, [pc, #40]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800734e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007352:	d106      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800735a:	d102      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800735c:	4b07      	ldr	r3, [pc, #28]	@ (800737c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800735e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007360:	e002      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007362:	2300      	movs	r3, #0
 8007364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007366:	e2e2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007368:	e2e1      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800736a:	4b05      	ldr	r3, [pc, #20]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800736c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800736e:	e2de      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007370:	58024400 	.word	0x58024400
 8007374:	03d09000 	.word	0x03d09000
 8007378:	003d0900 	.word	0x003d0900
 800737c:	017d7840 	.word	0x017d7840
 8007380:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007388:	e2d1      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800738a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800738e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007392:	430b      	orrs	r3, r1
 8007394:	f040 809c 	bne.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007398:	4b93      	ldr	r3, [pc, #588]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800739a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800739c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80073a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80073a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073a8:	d054      	beq.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80073aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073b0:	f200 808b 	bhi.w	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073ba:	f000 8083 	beq.w	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80073be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073c4:	f200 8081 	bhi.w	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80073c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ce:	d02f      	beq.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80073d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073d6:	d878      	bhi.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80073d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d004      	beq.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80073de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073e4:	d012      	beq.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80073e6:	e070      	b.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073e8:	4b7f      	ldr	r3, [pc, #508]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073f4:	d107      	bne.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fd5e 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007404:	e293      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800740a:	e290      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800740c:	4b76      	ldr	r3, [pc, #472]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007414:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007418:	d107      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800741a:	f107 0318 	add.w	r3, r7, #24
 800741e:	4618      	mov	r0, r3
 8007420:	f000 faa4 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007428:	e281      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800742e:	e27e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007430:	4b6d      	ldr	r3, [pc, #436]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800743c:	d107      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800743e:	f107 030c 	add.w	r3, r7, #12
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fbe6 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800744c:	e26f      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007452:	e26c      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007454:	4b64      	ldr	r3, [pc, #400]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007458:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800745c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800745e:	4b62      	ldr	r3, [pc, #392]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b04      	cmp	r3, #4
 8007468:	d10c      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800746a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746c:	2b00      	cmp	r3, #0
 800746e:	d109      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007470:	4b5d      	ldr	r3, [pc, #372]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	08db      	lsrs	r3, r3, #3
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	4a5c      	ldr	r2, [pc, #368]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
 8007480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007482:	e01e      	b.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007484:	4b58      	ldr	r3, [pc, #352]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800748c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007490:	d106      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007498:	d102      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800749a:	4b55      	ldr	r3, [pc, #340]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800749c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800749e:	e010      	b.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074a0:	4b51      	ldr	r3, [pc, #324]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ac:	d106      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80074ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b4:	d102      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074b6:	4b4f      	ldr	r3, [pc, #316]	@ (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80074b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074ba:	e002      	b.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80074c0:	e235      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80074c2:	e234      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80074c4:	4b4c      	ldr	r3, [pc, #304]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80074c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074c8:	e231      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ce:	e22e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80074d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80074d8:	430b      	orrs	r3, r1
 80074da:	f040 808f 	bne.w	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80074de:	4b42      	ldr	r3, [pc, #264]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80074e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80074e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074ee:	d06b      	beq.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80074f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074f6:	d874      	bhi.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074fe:	d056      	beq.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007502:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007506:	d86c      	bhi.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800750e:	d03b      	beq.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007512:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007516:	d864      	bhi.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800751e:	d021      	beq.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007526:	d85c      	bhi.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752a:	2b00      	cmp	r3, #0
 800752c:	d004      	beq.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800752e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007534:	d004      	beq.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007536:	e054      	b.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007538:	f7fe fa4c 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 800753c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800753e:	e1f6      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007540:	4b29      	ldr	r3, [pc, #164]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007548:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800754c:	d107      	bne.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800754e:	f107 0318 	add.w	r3, r7, #24
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fa0a 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800755c:	e1e7      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007562:	e1e4      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007564:	4b20      	ldr	r3, [pc, #128]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800756c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007570:	d107      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007572:	f107 030c 	add.w	r3, r7, #12
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fb4c 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007580:	e1d5      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007586:	e1d2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007588:	4b17      	ldr	r3, [pc, #92]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b04      	cmp	r3, #4
 8007592:	d109      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007594:	4b14      	ldr	r3, [pc, #80]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	08db      	lsrs	r3, r3, #3
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	4a13      	ldr	r2, [pc, #76]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
 80075a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075a6:	e1c2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ac:	e1bf      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80075ae:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075ba:	d102      	bne.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80075bc:	4b0c      	ldr	r3, [pc, #48]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80075be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075c0:	e1b5      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c6:	e1b2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80075c8:	4b07      	ldr	r3, [pc, #28]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075d4:	d102      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80075d6:	4b07      	ldr	r3, [pc, #28]	@ (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075da:	e1a8      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e0:	e1a5      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e6:	e1a2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075e8:	58024400 	.word	0x58024400
 80075ec:	03d09000 	.word	0x03d09000
 80075f0:	003d0900 	.word	0x003d0900
 80075f4:	017d7840 	.word	0x017d7840
 80075f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80075fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007600:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007604:	430b      	orrs	r3, r1
 8007606:	d173      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007608:	4b9c      	ldr	r3, [pc, #624]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800760a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007610:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007618:	d02f      	beq.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800761a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007620:	d863      	bhi.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800762e:	d012      	beq.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007630:	e05b      	b.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007632:	4b92      	ldr	r3, [pc, #584]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800763a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800763e:	d107      	bne.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007640:	f107 0318 	add.w	r3, r7, #24
 8007644:	4618      	mov	r0, r3
 8007646:	f000 f991 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800764e:	e16e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007654:	e16b      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007656:	4b89      	ldr	r3, [pc, #548]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800765e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007662:	d107      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007664:	f107 030c 	add.w	r3, r7, #12
 8007668:	4618      	mov	r0, r3
 800766a:	f000 fad3 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007672:	e15c      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007678:	e159      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800767a:	4b80      	ldr	r3, [pc, #512]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800767c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800767e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007682:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007684:	4b7d      	ldr	r3, [pc, #500]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b04      	cmp	r3, #4
 800768e:	d10c      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007696:	4b79      	ldr	r3, [pc, #484]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	08db      	lsrs	r3, r3, #3
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	4a77      	ldr	r2, [pc, #476]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80076a2:	fa22 f303 	lsr.w	r3, r2, r3
 80076a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076a8:	e01e      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076aa:	4b74      	ldr	r3, [pc, #464]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076b6:	d106      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80076b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076be:	d102      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076c0:	4b70      	ldr	r3, [pc, #448]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80076c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076c4:	e010      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076c6:	4b6d      	ldr	r3, [pc, #436]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076d2:	d106      	bne.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80076d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076da:	d102      	bne.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076dc:	4b6a      	ldr	r3, [pc, #424]	@ (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076e0:	e002      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80076e6:	e122      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076e8:	e121      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ee:	e11e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80076f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80076f8:	430b      	orrs	r3, r1
 80076fa:	d133      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80076fc:	4b5f      	ldr	r3, [pc, #380]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007704:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800770c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007712:	d012      	beq.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007714:	e023      	b.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007716:	4b59      	ldr	r3, [pc, #356]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800771e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007722:	d107      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007728:	4618      	mov	r0, r3
 800772a:	f000 fbc7 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800772e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007732:	e0fc      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007738:	e0f9      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800773a:	4b50      	ldr	r3, [pc, #320]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007742:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007746:	d107      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007748:	f107 0318 	add.w	r3, r7, #24
 800774c:	4618      	mov	r0, r3
 800774e:	f000 f90d 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007756:	e0ea      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800775c:	e0e7      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007762:	e0e4      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007768:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800776c:	430b      	orrs	r3, r1
 800776e:	f040 808d 	bne.w	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007772:	4b42      	ldr	r3, [pc, #264]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007776:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800777a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800777c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007782:	d06b      	beq.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007786:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800778a:	d874      	bhi.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800778c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007792:	d056      	beq.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800779a:	d86c      	bhi.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077a2:	d03b      	beq.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80077a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077aa:	d864      	bhi.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80077ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077b2:	d021      	beq.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80077b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077ba:	d85c      	bhi.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80077bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d004      	beq.n	80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80077c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077c8:	d004      	beq.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80077ca:	e054      	b.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80077cc:	f000 f8b8 	bl	8007940 <HAL_RCCEx_GetD3PCLK1Freq>
 80077d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077d2:	e0ac      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077d4:	4b29      	ldr	r3, [pc, #164]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077e0:	d107      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077e2:	f107 0318 	add.w	r3, r7, #24
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 f8c0 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077f0:	e09d      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077f6:	e09a      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077f8:	4b20      	ldr	r3, [pc, #128]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007804:	d107      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007806:	f107 030c 	add.w	r3, r7, #12
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fa02 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007814:	e08b      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800781a:	e088      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800781c:	4b17      	ldr	r3, [pc, #92]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b04      	cmp	r3, #4
 8007826:	d109      	bne.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007828:	4b14      	ldr	r3, [pc, #80]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	08db      	lsrs	r3, r3, #3
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	4a13      	ldr	r2, [pc, #76]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007834:	fa22 f303 	lsr.w	r3, r2, r3
 8007838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800783a:	e078      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007840:	e075      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007842:	4b0e      	ldr	r3, [pc, #56]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800784a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800784e:	d102      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007850:	4b0c      	ldr	r3, [pc, #48]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007854:	e06b      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800785a:	e068      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800785c:	4b07      	ldr	r3, [pc, #28]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007868:	d102      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800786a:	4b07      	ldr	r3, [pc, #28]	@ (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800786c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800786e:	e05e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007874:	e05b      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800787a:	e058      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800787c:	58024400 	.word	0x58024400
 8007880:	03d09000 	.word	0x03d09000
 8007884:	003d0900 	.word	0x003d0900
 8007888:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800788c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007890:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007894:	430b      	orrs	r3, r1
 8007896:	d148      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007898:	4b27      	ldr	r3, [pc, #156]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800789a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800789c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80078a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078a8:	d02a      	beq.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80078aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078b0:	d838      	bhi.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80078b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d004      	beq.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80078b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078be:	d00d      	beq.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80078c0:	e030      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80078c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078ce:	d102      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80078d0:	4b1a      	ldr	r3, [pc, #104]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80078d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078d4:	e02b      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078da:	e028      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078dc:	4b16      	ldr	r3, [pc, #88]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078e8:	d107      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 fae4 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078f8:	e019      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078fe:	e016      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007900:	4b0d      	ldr	r3, [pc, #52]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800790c:	d107      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800790e:	f107 0318 	add.w	r3, r7, #24
 8007912:	4618      	mov	r0, r3
 8007914:	f000 f82a 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800791c:	e007      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007922:	e004      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007928:	e001      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800792e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007930:	4618      	mov	r0, r3
 8007932:	3740      	adds	r7, #64	@ 0x40
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	58024400 	.word	0x58024400
 800793c:	017d7840 	.word	0x017d7840

08007940 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007944:	f7fe f816 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8007948:	4602      	mov	r2, r0
 800794a:	4b06      	ldr	r3, [pc, #24]	@ (8007964 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	091b      	lsrs	r3, r3, #4
 8007950:	f003 0307 	and.w	r3, r3, #7
 8007954:	4904      	ldr	r1, [pc, #16]	@ (8007968 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007956:	5ccb      	ldrb	r3, [r1, r3]
 8007958:	f003 031f 	and.w	r3, r3, #31
 800795c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007960:	4618      	mov	r0, r3
 8007962:	bd80      	pop	{r7, pc}
 8007964:	58024400 	.word	0x58024400
 8007968:	0800fde8 	.word	0x0800fde8

0800796c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800796c:	b480      	push	{r7}
 800796e:	b089      	sub	sp, #36	@ 0x24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007974:	4ba1      	ldr	r3, [pc, #644]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007978:	f003 0303 	and.w	r3, r3, #3
 800797c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800797e:	4b9f      	ldr	r3, [pc, #636]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007982:	0b1b      	lsrs	r3, r3, #12
 8007984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007988:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800798a:	4b9c      	ldr	r3, [pc, #624]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	091b      	lsrs	r3, r3, #4
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007996:	4b99      	ldr	r3, [pc, #612]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799a:	08db      	lsrs	r3, r3, #3
 800799c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	fb02 f303 	mul.w	r3, r2, r3
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 8111 	beq.w	8007bdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	f000 8083 	beq.w	8007ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	f200 80a1 	bhi.w	8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d056      	beq.n	8007a84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80079d6:	e099      	b.n	8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079d8:	4b88      	ldr	r3, [pc, #544]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d02d      	beq.n	8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079e4:	4b85      	ldr	r3, [pc, #532]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	08db      	lsrs	r3, r3, #3
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	4a84      	ldr	r2, [pc, #528]	@ (8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80079f0:	fa22 f303 	lsr.w	r3, r2, r3
 80079f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	ee07 3a90 	vmov	s15, r3
 80079fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a0e:	4b7b      	ldr	r3, [pc, #492]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a3e:	e087      	b.n	8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	ee07 3a90 	vmov	s15, r3
 8007a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a52:	4b6a      	ldr	r3, [pc, #424]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a82:	e065      	b.n	8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a96:	4b59      	ldr	r3, [pc, #356]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9e:	ee07 3a90 	vmov	s15, r3
 8007aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aaa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ac6:	e043      	b.n	8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ada:	4b48      	ldr	r3, [pc, #288]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b0a:	e021      	b.n	8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1e:	4b37      	ldr	r3, [pc, #220]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b50:	4b2a      	ldr	r3, [pc, #168]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b54:	0a5b      	lsrs	r3, r3, #9
 8007b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b76:	ee17 2a90 	vmov	r2, s15
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b82:	0c1b      	lsrs	r3, r3, #16
 8007b84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b88:	ee07 3a90 	vmov	s15, r3
 8007b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b98:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ba4:	ee17 2a90 	vmov	r2, s15
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007bac:	4b13      	ldr	r3, [pc, #76]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb0:	0e1b      	lsrs	r3, r3, #24
 8007bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bd2:	ee17 2a90 	vmov	r2, s15
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007bda:	e008      	b.n	8007bee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	609a      	str	r2, [r3, #8]
}
 8007bee:	bf00      	nop
 8007bf0:	3724      	adds	r7, #36	@ 0x24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	58024400 	.word	0x58024400
 8007c00:	03d09000 	.word	0x03d09000
 8007c04:	46000000 	.word	0x46000000
 8007c08:	4c742400 	.word	0x4c742400
 8007c0c:	4a742400 	.word	0x4a742400
 8007c10:	4bbebc20 	.word	0x4bbebc20

08007c14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b089      	sub	sp, #36	@ 0x24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c1c:	4ba1      	ldr	r3, [pc, #644]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c20:	f003 0303 	and.w	r3, r3, #3
 8007c24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c26:	4b9f      	ldr	r3, [pc, #636]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	0d1b      	lsrs	r3, r3, #20
 8007c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c32:	4b9c      	ldr	r3, [pc, #624]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c3e:	4b99      	ldr	r3, [pc, #612]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c42:	08db      	lsrs	r3, r3, #3
 8007c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	fb02 f303 	mul.w	r3, r2, r3
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8111 	beq.w	8007e84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	f000 8083 	beq.w	8007d70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	f200 80a1 	bhi.w	8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d003      	beq.n	8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d056      	beq.n	8007d2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c7e:	e099      	b.n	8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c80:	4b88      	ldr	r3, [pc, #544]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0320 	and.w	r3, r3, #32
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d02d      	beq.n	8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c8c:	4b85      	ldr	r3, [pc, #532]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	08db      	lsrs	r3, r3, #3
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	4a84      	ldr	r2, [pc, #528]	@ (8007ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c98:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	ee07 3a90 	vmov	s15, r3
 8007ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	ee07 3a90 	vmov	s15, r3
 8007cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ce6:	e087      	b.n	8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d2a:	e065      	b.n	8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3e:	4b59      	ldr	r3, [pc, #356]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d6e:	e043      	b.n	8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d82:	4b48      	ldr	r3, [pc, #288]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d8a:	ee07 3a90 	vmov	s15, r3
 8007d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007db2:	e021      	b.n	8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc6:	4b37      	ldr	r3, [pc, #220]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dce:	ee07 3a90 	vmov	s15, r3
 8007dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007df6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007df8:	4b2a      	ldr	r3, [pc, #168]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfc:	0a5b      	lsrs	r3, r3, #9
 8007dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e1e:	ee17 2a90 	vmov	r2, s15
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e26:	4b1f      	ldr	r3, [pc, #124]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2a:	0c1b      	lsrs	r3, r3, #16
 8007e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e30:	ee07 3a90 	vmov	s15, r3
 8007e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e4c:	ee17 2a90 	vmov	r2, s15
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e54:	4b13      	ldr	r3, [pc, #76]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e58:	0e1b      	lsrs	r3, r3, #24
 8007e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e7a:	ee17 2a90 	vmov	r2, s15
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e82:	e008      	b.n	8007e96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	609a      	str	r2, [r3, #8]
}
 8007e96:	bf00      	nop
 8007e98:	3724      	adds	r7, #36	@ 0x24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	58024400 	.word	0x58024400
 8007ea8:	03d09000 	.word	0x03d09000
 8007eac:	46000000 	.word	0x46000000
 8007eb0:	4c742400 	.word	0x4c742400
 8007eb4:	4a742400 	.word	0x4a742400
 8007eb8:	4bbebc20 	.word	0x4bbebc20

08007ebc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b089      	sub	sp, #36	@ 0x24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ec4:	4ba0      	ldr	r3, [pc, #640]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec8:	f003 0303 	and.w	r3, r3, #3
 8007ecc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007ece:	4b9e      	ldr	r3, [pc, #632]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed2:	091b      	lsrs	r3, r3, #4
 8007ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ed8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007eda:	4b9b      	ldr	r3, [pc, #620]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ee4:	4b98      	ldr	r3, [pc, #608]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee8:	08db      	lsrs	r3, r3, #3
 8007eea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	fb02 f303 	mul.w	r3, r2, r3
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 8111 	beq.w	800812a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	f000 8083 	beq.w	8008016 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	f200 80a1 	bhi.w	800805a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d056      	beq.n	8007fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007f24:	e099      	b.n	800805a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f26:	4b88      	ldr	r3, [pc, #544]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0320 	and.w	r3, r3, #32
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d02d      	beq.n	8007f8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f32:	4b85      	ldr	r3, [pc, #532]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	08db      	lsrs	r3, r3, #3
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	4a83      	ldr	r2, [pc, #524]	@ (800814c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	ee07 3a90 	vmov	s15, r3
 8007f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5c:	4b7a      	ldr	r3, [pc, #488]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f64:	ee07 3a90 	vmov	s15, r3
 8007f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f70:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f8c:	e087      	b.n	800809e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	ee07 3a90 	vmov	s15, r3
 8007f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f98:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008154 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa0:	4b69      	ldr	r3, [pc, #420]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa8:	ee07 3a90 	vmov	s15, r3
 8007fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fd0:	e065      	b.n	800809e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	ee07 3a90 	vmov	s15, r3
 8007fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fdc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008158 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007fe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe4:	4b58      	ldr	r3, [pc, #352]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fec:	ee07 3a90 	vmov	s15, r3
 8007ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008004:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008010:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008014:	e043      	b.n	800809e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	ee07 3a90 	vmov	s15, r3
 800801c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008020:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800815c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008028:	4b47      	ldr	r3, [pc, #284]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800802a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008030:	ee07 3a90 	vmov	s15, r3
 8008034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008038:	ed97 6a03 	vldr	s12, [r7, #12]
 800803c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008048:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800804c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008054:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008058:	e021      	b.n	800809e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	ee07 3a90 	vmov	s15, r3
 8008060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008064:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008154 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800806c:	4b36      	ldr	r3, [pc, #216]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800806e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008074:	ee07 3a90 	vmov	s15, r3
 8008078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008080:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008098:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800809c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800809e:	4b2a      	ldr	r3, [pc, #168]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a2:	0a5b      	lsrs	r3, r3, #9
 80080a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080a8:	ee07 3a90 	vmov	s15, r3
 80080ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80080bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080c4:	ee17 2a90 	vmov	r2, s15
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80080cc:	4b1e      	ldr	r3, [pc, #120]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d0:	0c1b      	lsrs	r3, r3, #16
 80080d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f2:	ee17 2a90 	vmov	r2, s15
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80080fa:	4b13      	ldr	r3, [pc, #76]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fe:	0e1b      	lsrs	r3, r3, #24
 8008100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008104:	ee07 3a90 	vmov	s15, r3
 8008108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008110:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008114:	edd7 6a07 	vldr	s13, [r7, #28]
 8008118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800811c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008120:	ee17 2a90 	vmov	r2, s15
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008128:	e008      	b.n	800813c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	609a      	str	r2, [r3, #8]
}
 800813c:	bf00      	nop
 800813e:	3724      	adds	r7, #36	@ 0x24
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	58024400 	.word	0x58024400
 800814c:	03d09000 	.word	0x03d09000
 8008150:	46000000 	.word	0x46000000
 8008154:	4c742400 	.word	0x4c742400
 8008158:	4a742400 	.word	0x4a742400
 800815c:	4bbebc20 	.word	0x4bbebc20

08008160 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800816e:	4b53      	ldr	r3, [pc, #332]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	2b03      	cmp	r3, #3
 8008178:	d101      	bne.n	800817e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e099      	b.n	80082b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800817e:	4b4f      	ldr	r3, [pc, #316]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a4e      	ldr	r2, [pc, #312]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008184:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800818a:	f7f9 fbb5 	bl	80018f8 <HAL_GetTick>
 800818e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008190:	e008      	b.n	80081a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008192:	f7f9 fbb1 	bl	80018f8 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e086      	b.n	80082b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081a4:	4b45      	ldr	r3, [pc, #276]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1f0      	bne.n	8008192 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081b0:	4b42      	ldr	r3, [pc, #264]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 80081b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	031b      	lsls	r3, r3, #12
 80081be:	493f      	ldr	r1, [pc, #252]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	025b      	lsls	r3, r3, #9
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	431a      	orrs	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	3b01      	subs	r3, #1
 80081e0:	041b      	lsls	r3, r3, #16
 80081e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081e6:	431a      	orrs	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	061b      	lsls	r3, r3, #24
 80081f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081f4:	4931      	ldr	r1, [pc, #196]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081fa:	4b30      	ldr	r3, [pc, #192]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 80081fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	492d      	ldr	r1, [pc, #180]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008208:	4313      	orrs	r3, r2
 800820a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800820c:	4b2b      	ldr	r3, [pc, #172]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 800820e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008210:	f023 0220 	bic.w	r2, r3, #32
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	4928      	ldr	r1, [pc, #160]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 800821a:	4313      	orrs	r3, r2
 800821c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800821e:	4b27      	ldr	r3, [pc, #156]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008222:	4a26      	ldr	r2, [pc, #152]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008224:	f023 0310 	bic.w	r3, r3, #16
 8008228:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800822a:	4b24      	ldr	r3, [pc, #144]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 800822c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800822e:	4b24      	ldr	r3, [pc, #144]	@ (80082c0 <RCCEx_PLL2_Config+0x160>)
 8008230:	4013      	ands	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	69d2      	ldr	r2, [r2, #28]
 8008236:	00d2      	lsls	r2, r2, #3
 8008238:	4920      	ldr	r1, [pc, #128]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 800823a:	4313      	orrs	r3, r2
 800823c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800823e:	4b1f      	ldr	r3, [pc, #124]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008242:	4a1e      	ldr	r2, [pc, #120]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008244:	f043 0310 	orr.w	r3, r3, #16
 8008248:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d106      	bne.n	800825e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008250:	4b1a      	ldr	r3, [pc, #104]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008254:	4a19      	ldr	r2, [pc, #100]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008256:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800825a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800825c:	e00f      	b.n	800827e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d106      	bne.n	8008272 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008264:	4b15      	ldr	r3, [pc, #84]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008268:	4a14      	ldr	r2, [pc, #80]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 800826a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800826e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008270:	e005      	b.n	800827e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008272:	4b12      	ldr	r3, [pc, #72]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008276:	4a11      	ldr	r2, [pc, #68]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008278:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800827c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800827e:	4b0f      	ldr	r3, [pc, #60]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a0e      	ldr	r2, [pc, #56]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008284:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800828a:	f7f9 fb35 	bl	80018f8 <HAL_GetTick>
 800828e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008290:	e008      	b.n	80082a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008292:	f7f9 fb31 	bl	80018f8 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	2b02      	cmp	r3, #2
 800829e:	d901      	bls.n	80082a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e006      	b.n	80082b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082a4:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0f0      	beq.n	8008292 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	58024400 	.word	0x58024400
 80082c0:	ffff0007 	.word	0xffff0007

080082c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082d2:	4b53      	ldr	r3, [pc, #332]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80082d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d101      	bne.n	80082e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e099      	b.n	8008416 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082e2:	4b4f      	ldr	r3, [pc, #316]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a4e      	ldr	r2, [pc, #312]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80082e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ee:	f7f9 fb03 	bl	80018f8 <HAL_GetTick>
 80082f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082f4:	e008      	b.n	8008308 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082f6:	f7f9 faff 	bl	80018f8 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d901      	bls.n	8008308 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e086      	b.n	8008416 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008308:	4b45      	ldr	r3, [pc, #276]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1f0      	bne.n	80082f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008314:	4b42      	ldr	r3, [pc, #264]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008318:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	051b      	lsls	r3, r3, #20
 8008322:	493f      	ldr	r1, [pc, #252]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008324:	4313      	orrs	r3, r2
 8008326:	628b      	str	r3, [r1, #40]	@ 0x28
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	3b01      	subs	r3, #1
 800832e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	3b01      	subs	r3, #1
 8008338:	025b      	lsls	r3, r3, #9
 800833a:	b29b      	uxth	r3, r3
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	3b01      	subs	r3, #1
 8008344:	041b      	lsls	r3, r3, #16
 8008346:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800834a:	431a      	orrs	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	3b01      	subs	r3, #1
 8008352:	061b      	lsls	r3, r3, #24
 8008354:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008358:	4931      	ldr	r1, [pc, #196]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 800835a:	4313      	orrs	r3, r2
 800835c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800835e:	4b30      	ldr	r3, [pc, #192]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008362:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	492d      	ldr	r1, [pc, #180]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 800836c:	4313      	orrs	r3, r2
 800836e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008370:	4b2b      	ldr	r3, [pc, #172]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	4928      	ldr	r1, [pc, #160]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 800837e:	4313      	orrs	r3, r2
 8008380:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008382:	4b27      	ldr	r3, [pc, #156]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008386:	4a26      	ldr	r2, [pc, #152]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800838c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800838e:	4b24      	ldr	r3, [pc, #144]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008392:	4b24      	ldr	r3, [pc, #144]	@ (8008424 <RCCEx_PLL3_Config+0x160>)
 8008394:	4013      	ands	r3, r2
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	69d2      	ldr	r2, [r2, #28]
 800839a:	00d2      	lsls	r2, r2, #3
 800839c:	4920      	ldr	r1, [pc, #128]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80083a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a6:	4a1e      	ldr	r2, [pc, #120]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d106      	bne.n	80083c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	4a19      	ldr	r2, [pc, #100]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80083be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083c0:	e00f      	b.n	80083e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d106      	bne.n	80083d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083c8:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083cc:	4a14      	ldr	r2, [pc, #80]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083d4:	e005      	b.n	80083e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083d6:	4b12      	ldr	r3, [pc, #72]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083da:	4a11      	ldr	r2, [pc, #68]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a0e      	ldr	r2, [pc, #56]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ee:	f7f9 fa83 	bl	80018f8 <HAL_GetTick>
 80083f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083f4:	e008      	b.n	8008408 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083f6:	f7f9 fa7f 	bl	80018f8 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d901      	bls.n	8008408 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e006      	b.n	8008416 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008408:	4b05      	ldr	r3, [pc, #20]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0f0      	beq.n	80083f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	58024400 	.word	0x58024400
 8008424:	ffff0007 	.word	0xffff0007

08008428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e042      	b.n	80084c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008440:	2b00      	cmp	r3, #0
 8008442:	d106      	bne.n	8008452 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7f9 f8d7 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2224      	movs	r2, #36	@ 0x24
 8008456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0201 	bic.w	r2, r2, #1
 8008468:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846e:	2b00      	cmp	r3, #0
 8008470:	d002      	beq.n	8008478 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 fb70 	bl	8009b58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fe05 	bl	8009088 <UART_SetConfig>
 800847e:	4603      	mov	r3, r0
 8008480:	2b01      	cmp	r3, #1
 8008482:	d101      	bne.n	8008488 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e01b      	b.n	80084c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689a      	ldr	r2, [r3, #8]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0201 	orr.w	r2, r2, #1
 80084b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 fbef 	bl	8009c9c <UART_CheckIdleState>
 80084be:	4603      	mov	r3, r0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08a      	sub	sp, #40	@ 0x28
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	4613      	mov	r3, r2
 80084d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084de:	2b20      	cmp	r3, #32
 80084e0:	d17b      	bne.n	80085da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <HAL_UART_Transmit+0x26>
 80084e8:	88fb      	ldrh	r3, [r7, #6]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e074      	b.n	80085dc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2221      	movs	r2, #33	@ 0x21
 80084fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008502:	f7f9 f9f9 	bl	80018f8 <HAL_GetTick>
 8008506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	88fa      	ldrh	r2, [r7, #6]
 800850c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	88fa      	ldrh	r2, [r7, #6]
 8008514:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008520:	d108      	bne.n	8008534 <HAL_UART_Transmit+0x6c>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d104      	bne.n	8008534 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	61bb      	str	r3, [r7, #24]
 8008532:	e003      	b.n	800853c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008538:	2300      	movs	r3, #0
 800853a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800853c:	e030      	b.n	80085a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2200      	movs	r2, #0
 8008546:	2180      	movs	r1, #128	@ 0x80
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f001 fc51 	bl	8009df0 <UART_WaitOnFlagUntilTimeout>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d005      	beq.n	8008560 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2220      	movs	r2, #32
 8008558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800855c:	2303      	movs	r3, #3
 800855e:	e03d      	b.n	80085dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10b      	bne.n	800857e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008574:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	3302      	adds	r3, #2
 800857a:	61bb      	str	r3, [r7, #24]
 800857c:	e007      	b.n	800858e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	781a      	ldrb	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	3301      	adds	r3, #1
 800858c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008594:	b29b      	uxth	r3, r3
 8008596:	3b01      	subs	r3, #1
 8008598:	b29a      	uxth	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1c8      	bne.n	800853e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2200      	movs	r2, #0
 80085b4:	2140      	movs	r1, #64	@ 0x40
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f001 fc1a 	bl	8009df0 <UART_WaitOnFlagUntilTimeout>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d005      	beq.n	80085ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2220      	movs	r2, #32
 80085c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e006      	b.n	80085dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	e000      	b.n	80085dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80085da:	2302      	movs	r3, #2
  }
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08a      	sub	sp, #40	@ 0x28
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	603b      	str	r3, [r7, #0]
 80085f0:	4613      	mov	r3, r2
 80085f2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	f040 80b5 	bne.w	800876a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <HAL_UART_Receive+0x28>
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e0ad      	b.n	800876c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2222      	movs	r2, #34	@ 0x22
 800861c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008626:	f7f9 f967 	bl	80018f8 <HAL_GetTick>
 800862a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	88fa      	ldrh	r2, [r7, #6]
 8008630:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	88fa      	ldrh	r2, [r7, #6]
 8008638:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008644:	d10e      	bne.n	8008664 <HAL_UART_Receive+0x80>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d105      	bne.n	800865a <HAL_UART_Receive+0x76>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008654:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008658:	e02d      	b.n	80086b6 <HAL_UART_Receive+0xd2>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	22ff      	movs	r2, #255	@ 0xff
 800865e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008662:	e028      	b.n	80086b6 <HAL_UART_Receive+0xd2>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10d      	bne.n	8008688 <HAL_UART_Receive+0xa4>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d104      	bne.n	800867e <HAL_UART_Receive+0x9a>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	22ff      	movs	r2, #255	@ 0xff
 8008678:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800867c:	e01b      	b.n	80086b6 <HAL_UART_Receive+0xd2>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	227f      	movs	r2, #127	@ 0x7f
 8008682:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008686:	e016      	b.n	80086b6 <HAL_UART_Receive+0xd2>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008690:	d10d      	bne.n	80086ae <HAL_UART_Receive+0xca>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d104      	bne.n	80086a4 <HAL_UART_Receive+0xc0>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	227f      	movs	r2, #127	@ 0x7f
 800869e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086a2:	e008      	b.n	80086b6 <HAL_UART_Receive+0xd2>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	223f      	movs	r2, #63	@ 0x3f
 80086a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086ac:	e003      	b.n	80086b6 <HAL_UART_Receive+0xd2>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80086bc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086c6:	d108      	bne.n	80086da <HAL_UART_Receive+0xf6>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d104      	bne.n	80086da <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80086d0:	2300      	movs	r3, #0
 80086d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	61bb      	str	r3, [r7, #24]
 80086d8:	e003      	b.n	80086e2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086de:	2300      	movs	r3, #0
 80086e0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80086e2:	e036      	b.n	8008752 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2200      	movs	r2, #0
 80086ec:	2120      	movs	r1, #32
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f001 fb7e 	bl	8009df0 <UART_WaitOnFlagUntilTimeout>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d005      	beq.n	8008706 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e032      	b.n	800876c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10c      	bne.n	8008726 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008712:	b29a      	uxth	r2, r3
 8008714:	8a7b      	ldrh	r3, [r7, #18]
 8008716:	4013      	ands	r3, r2
 8008718:	b29a      	uxth	r2, r3
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	3302      	adds	r3, #2
 8008722:	61bb      	str	r3, [r7, #24]
 8008724:	e00c      	b.n	8008740 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872c:	b2da      	uxtb	r2, r3
 800872e:	8a7b      	ldrh	r3, [r7, #18]
 8008730:	b2db      	uxtb	r3, r3
 8008732:	4013      	ands	r3, r2
 8008734:	b2da      	uxtb	r2, r3
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	3301      	adds	r3, #1
 800873e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008746:	b29b      	uxth	r3, r3
 8008748:	3b01      	subs	r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1c2      	bne.n	80086e4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2220      	movs	r2, #32
 8008762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	e000      	b.n	800876c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800876a:	2302      	movs	r3, #2
  }
}
 800876c:	4618      	mov	r0, r3
 800876e:	3720      	adds	r7, #32
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008774:	b480      	push	{r7}
 8008776:	b091      	sub	sp, #68	@ 0x44
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008788:	2b20      	cmp	r3, #32
 800878a:	d178      	bne.n	800887e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <HAL_UART_Transmit_IT+0x24>
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e071      	b.n	8008880 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	88fa      	ldrh	r2, [r7, #6]
 80087a6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	88fa      	ldrh	r2, [r7, #6]
 80087ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2221      	movs	r2, #33	@ 0x21
 80087c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087d0:	d12a      	bne.n	8008828 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087da:	d107      	bne.n	80087ec <HAL_UART_Transmit_IT+0x78>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d103      	bne.n	80087ec <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4a29      	ldr	r2, [pc, #164]	@ (800888c <HAL_UART_Transmit_IT+0x118>)
 80087e8:	679a      	str	r2, [r3, #120]	@ 0x78
 80087ea:	e002      	b.n	80087f2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4a28      	ldr	r2, [pc, #160]	@ (8008890 <HAL_UART_Transmit_IT+0x11c>)
 80087f0:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008808:	63bb      	str	r3, [r7, #56]	@ 0x38
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008812:	637a      	str	r2, [r7, #52]	@ 0x34
 8008814:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e5      	bne.n	80087f2 <HAL_UART_Transmit_IT+0x7e>
 8008826:	e028      	b.n	800887a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008830:	d107      	bne.n	8008842 <HAL_UART_Transmit_IT+0xce>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d103      	bne.n	8008842 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4a15      	ldr	r2, [pc, #84]	@ (8008894 <HAL_UART_Transmit_IT+0x120>)
 800883e:	679a      	str	r2, [r3, #120]	@ 0x78
 8008840:	e002      	b.n	8008848 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4a14      	ldr	r2, [pc, #80]	@ (8008898 <HAL_UART_Transmit_IT+0x124>)
 8008846:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	e853 3f00 	ldrex	r3, [r3]
 8008854:	613b      	str	r3, [r7, #16]
   return(result);
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800885c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008866:	623b      	str	r3, [r7, #32]
 8008868:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886a:	69f9      	ldr	r1, [r7, #28]
 800886c:	6a3a      	ldr	r2, [r7, #32]
 800886e:	e841 2300 	strex	r3, r2, [r1]
 8008872:	61bb      	str	r3, [r7, #24]
   return(result);
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1e6      	bne.n	8008848 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	e000      	b.n	8008880 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800887e:	2302      	movs	r3, #2
  }
}
 8008880:	4618      	mov	r0, r3
 8008882:	3744      	adds	r7, #68	@ 0x44
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	0800a217 	.word	0x0800a217
 8008890:	0800a137 	.word	0x0800a137
 8008894:	0800a075 	.word	0x0800a075
 8008898:	08009fbd 	.word	0x08009fbd

0800889c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b0ba      	sub	sp, #232	@ 0xe8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80088c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80088ca:	4013      	ands	r3, r2
 80088cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80088d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d11b      	bne.n	8008910 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088dc:	f003 0320 	and.w	r3, r3, #32
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d015      	beq.n	8008910 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088e8:	f003 0320 	and.w	r3, r3, #32
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d105      	bne.n	80088fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8393 	beq.w	800902c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
      }
      return;
 800890e:	e38d      	b.n	800902c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 8123 	beq.w	8008b60 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800891a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800891e:	4b8d      	ldr	r3, [pc, #564]	@ (8008b54 <HAL_UART_IRQHandler+0x2b8>)
 8008920:	4013      	ands	r3, r2
 8008922:	2b00      	cmp	r3, #0
 8008924:	d106      	bne.n	8008934 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008926:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800892a:	4b8b      	ldr	r3, [pc, #556]	@ (8008b58 <HAL_UART_IRQHandler+0x2bc>)
 800892c:	4013      	ands	r3, r2
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 8116 	beq.w	8008b60 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	2b00      	cmp	r3, #0
 800893e:	d011      	beq.n	8008964 <HAL_UART_IRQHandler+0xc8>
 8008940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00b      	beq.n	8008964 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2201      	movs	r2, #1
 8008952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800895a:	f043 0201 	orr.w	r2, r3, #1
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d011      	beq.n	8008994 <HAL_UART_IRQHandler+0xf8>
 8008970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00b      	beq.n	8008994 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2202      	movs	r2, #2
 8008982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800898a:	f043 0204 	orr.w	r2, r3, #4
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008998:	f003 0304 	and.w	r3, r3, #4
 800899c:	2b00      	cmp	r3, #0
 800899e:	d011      	beq.n	80089c4 <HAL_UART_IRQHandler+0x128>
 80089a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00b      	beq.n	80089c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2204      	movs	r2, #4
 80089b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089ba:	f043 0202 	orr.w	r2, r3, #2
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c8:	f003 0308 	and.w	r3, r3, #8
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d017      	beq.n	8008a00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089d4:	f003 0320 	and.w	r3, r3, #32
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d105      	bne.n	80089e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80089dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80089e0:	4b5c      	ldr	r3, [pc, #368]	@ (8008b54 <HAL_UART_IRQHandler+0x2b8>)
 80089e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2208      	movs	r2, #8
 80089ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f6:	f043 0208 	orr.w	r2, r3, #8
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d012      	beq.n	8008a32 <HAL_UART_IRQHandler+0x196>
 8008a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00c      	beq.n	8008a32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a28:	f043 0220 	orr.w	r2, r3, #32
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 82f9 	beq.w	8009030 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a42:	f003 0320 	and.w	r3, r3, #32
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d013      	beq.n	8008a72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a4e:	f003 0320 	and.w	r3, r3, #32
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d105      	bne.n	8008a62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d007      	beq.n	8008a72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a86:	2b40      	cmp	r3, #64	@ 0x40
 8008a88:	d005      	beq.n	8008a96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008a8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d054      	beq.n	8008b40 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f001 fa18 	bl	8009ecc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aa6:	2b40      	cmp	r3, #64	@ 0x40
 8008aa8:	d146      	bne.n	8008b38 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3308      	adds	r3, #8
 8008ab0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1d9      	bne.n	8008aaa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d017      	beq.n	8008b30 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b06:	4a15      	ldr	r2, [pc, #84]	@ (8008b5c <HAL_UART_IRQHandler+0x2c0>)
 8008b08:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fa fd53 	bl	80035bc <HAL_DMA_Abort_IT>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d019      	beq.n	8008b50 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b2e:	e00f      	b.n	8008b50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fa93 	bl	800905c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b36:	e00b      	b.n	8008b50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fa8f 	bl	800905c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b3e:	e007      	b.n	8008b50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fa8b 	bl	800905c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008b4e:	e26f      	b.n	8009030 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b50:	bf00      	nop
    return;
 8008b52:	e26d      	b.n	8009030 <HAL_UART_IRQHandler+0x794>
 8008b54:	10000001 	.word	0x10000001
 8008b58:	04000120 	.word	0x04000120
 8008b5c:	08009f99 	.word	0x08009f99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	f040 8203 	bne.w	8008f70 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b6e:	f003 0310 	and.w	r3, r3, #16
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 81fc 	beq.w	8008f70 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b7c:	f003 0310 	and.w	r3, r3, #16
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 81f5 	beq.w	8008f70 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2210      	movs	r2, #16
 8008b8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b98:	2b40      	cmp	r3, #64	@ 0x40
 8008b9a:	f040 816d 	bne.w	8008e78 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4aa4      	ldr	r2, [pc, #656]	@ (8008e38 <HAL_UART_IRQHandler+0x59c>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d068      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4aa1      	ldr	r2, [pc, #644]	@ (8008e3c <HAL_UART_IRQHandler+0x5a0>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d061      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a9f      	ldr	r2, [pc, #636]	@ (8008e40 <HAL_UART_IRQHandler+0x5a4>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d05a      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a9c      	ldr	r2, [pc, #624]	@ (8008e44 <HAL_UART_IRQHandler+0x5a8>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d053      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a9a      	ldr	r2, [pc, #616]	@ (8008e48 <HAL_UART_IRQHandler+0x5ac>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d04c      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a97      	ldr	r2, [pc, #604]	@ (8008e4c <HAL_UART_IRQHandler+0x5b0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d045      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a95      	ldr	r2, [pc, #596]	@ (8008e50 <HAL_UART_IRQHandler+0x5b4>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d03e      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a92      	ldr	r2, [pc, #584]	@ (8008e54 <HAL_UART_IRQHandler+0x5b8>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d037      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a90      	ldr	r2, [pc, #576]	@ (8008e58 <HAL_UART_IRQHandler+0x5bc>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d030      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a8d      	ldr	r2, [pc, #564]	@ (8008e5c <HAL_UART_IRQHandler+0x5c0>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d029      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a8b      	ldr	r2, [pc, #556]	@ (8008e60 <HAL_UART_IRQHandler+0x5c4>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d022      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a88      	ldr	r2, [pc, #544]	@ (8008e64 <HAL_UART_IRQHandler+0x5c8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d01b      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a86      	ldr	r2, [pc, #536]	@ (8008e68 <HAL_UART_IRQHandler+0x5cc>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d014      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a83      	ldr	r2, [pc, #524]	@ (8008e6c <HAL_UART_IRQHandler+0x5d0>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d00d      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a81      	ldr	r2, [pc, #516]	@ (8008e70 <HAL_UART_IRQHandler+0x5d4>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d006      	beq.n	8008c7e <HAL_UART_IRQHandler+0x3e2>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a7e      	ldr	r2, [pc, #504]	@ (8008e74 <HAL_UART_IRQHandler+0x5d8>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d106      	bne.n	8008c8c <HAL_UART_IRQHandler+0x3f0>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	e005      	b.n	8008c98 <HAL_UART_IRQHandler+0x3fc>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 80ad 	beq.w	8008e00 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008cac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	f080 80a5 	bcs.w	8008e00 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ccc:	f000 8087 	beq.w	8008dde <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008cdc:	e853 3f00 	ldrex	r3, [r3]
 8008ce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008cfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008cfe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1da      	bne.n	8008cd0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3308      	adds	r3, #8
 8008d20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d2c:	f023 0301 	bic.w	r3, r3, #1
 8008d30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3308      	adds	r3, #8
 8008d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e1      	bne.n	8008d1a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3308      	adds	r3, #8
 8008d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e3      	bne.n	8008d56 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dac:	f023 0310 	bic.w	r3, r3, #16
 8008db0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	461a      	mov	r2, r3
 8008dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008dc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dc6:	e841 2300 	strex	r3, r2, [r1]
 8008dca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1e4      	bne.n	8008d9c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fa f8d1 	bl	8002f80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2202      	movs	r2, #2
 8008de2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f939 	bl	8009070 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008dfe:	e119      	b.n	8009034 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	f040 8112 	bne.w	8009034 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e1c:	f040 810a 	bne.w	8009034 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f91e 	bl	8009070 <HAL_UARTEx_RxEventCallback>
      return;
 8008e34:	e0fe      	b.n	8009034 <HAL_UART_IRQHandler+0x798>
 8008e36:	bf00      	nop
 8008e38:	40020010 	.word	0x40020010
 8008e3c:	40020028 	.word	0x40020028
 8008e40:	40020040 	.word	0x40020040
 8008e44:	40020058 	.word	0x40020058
 8008e48:	40020070 	.word	0x40020070
 8008e4c:	40020088 	.word	0x40020088
 8008e50:	400200a0 	.word	0x400200a0
 8008e54:	400200b8 	.word	0x400200b8
 8008e58:	40020410 	.word	0x40020410
 8008e5c:	40020428 	.word	0x40020428
 8008e60:	40020440 	.word	0x40020440
 8008e64:	40020458 	.word	0x40020458
 8008e68:	40020470 	.word	0x40020470
 8008e6c:	40020488 	.word	0x40020488
 8008e70:	400204a0 	.word	0x400204a0
 8008e74:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 80cf 	beq.w	8009038 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008e9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f000 80ca 	beq.w	8009038 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ec6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ec8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ecc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e4      	bne.n	8008ea4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3308      	adds	r3, #8
 8008ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	4b55      	ldr	r3, [pc, #340]	@ (8009044 <HAL_UART_IRQHandler+0x7a8>)
 8008eee:	4013      	ands	r3, r2
 8008ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3308      	adds	r3, #8
 8008efa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008efe:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e3      	bne.n	8008eda <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0310 	bic.w	r3, r3, #16
 8008f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008f48:	61fb      	str	r3, [r7, #28]
 8008f4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4c:	69b9      	ldr	r1, [r7, #24]
 8008f4e:	69fa      	ldr	r2, [r7, #28]
 8008f50:	e841 2300 	strex	r3, r2, [r1]
 8008f54:	617b      	str	r3, [r7, #20]
   return(result);
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1e4      	bne.n	8008f26 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f881 	bl	8009070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f6e:	e063      	b.n	8009038 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00e      	beq.n	8008f9a <HAL_UART_IRQHandler+0x6fe>
 8008f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d008      	beq.n	8008f9a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008f90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f001 f9df 	bl	800a356 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f98:	e051      	b.n	800903e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d014      	beq.n	8008fd0 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d105      	bne.n	8008fbe <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d008      	beq.n	8008fd0 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d03a      	beq.n	800903c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	4798      	blx	r3
    }
    return;
 8008fce:	e035      	b.n	800903c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d009      	beq.n	8008ff0 <HAL_UART_IRQHandler+0x754>
 8008fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 f989 	bl	800a300 <UART_EndTransmit_IT>
    return;
 8008fee:	e026      	b.n	800903e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ff4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d009      	beq.n	8009010 <HAL_UART_IRQHandler+0x774>
 8008ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009000:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d003      	beq.n	8009010 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f001 f9b8 	bl	800a37e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800900e:	e016      	b.n	800903e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009014:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d010      	beq.n	800903e <HAL_UART_IRQHandler+0x7a2>
 800901c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009020:	2b00      	cmp	r3, #0
 8009022:	da0c      	bge.n	800903e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 f9a0 	bl	800a36a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800902a:	e008      	b.n	800903e <HAL_UART_IRQHandler+0x7a2>
      return;
 800902c:	bf00      	nop
 800902e:	e006      	b.n	800903e <HAL_UART_IRQHandler+0x7a2>
    return;
 8009030:	bf00      	nop
 8009032:	e004      	b.n	800903e <HAL_UART_IRQHandler+0x7a2>
      return;
 8009034:	bf00      	nop
 8009036:	e002      	b.n	800903e <HAL_UART_IRQHandler+0x7a2>
      return;
 8009038:	bf00      	nop
 800903a:	e000      	b.n	800903e <HAL_UART_IRQHandler+0x7a2>
    return;
 800903c:	bf00      	nop
  }
}
 800903e:	37e8      	adds	r7, #232	@ 0xe8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	effffffe 	.word	0xeffffffe

08009048 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800908c:	b092      	sub	sp, #72	@ 0x48
 800908e:	af00      	add	r7, sp, #0
 8009090:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	431a      	orrs	r2, r3
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	695b      	ldr	r3, [r3, #20]
 80090a6:	431a      	orrs	r2, r3
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	4bbe      	ldr	r3, [pc, #760]	@ (80093b0 <UART_SetConfig+0x328>)
 80090b8:	4013      	ands	r3, r2
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	6812      	ldr	r2, [r2, #0]
 80090be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80090c0:	430b      	orrs	r3, r1
 80090c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4ab3      	ldr	r2, [pc, #716]	@ (80093b4 <UART_SetConfig+0x32c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d004      	beq.n	80090f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090f0:	4313      	orrs	r3, r2
 80090f2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689a      	ldr	r2, [r3, #8]
 80090fa:	4baf      	ldr	r3, [pc, #700]	@ (80093b8 <UART_SetConfig+0x330>)
 80090fc:	4013      	ands	r3, r2
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	6812      	ldr	r2, [r2, #0]
 8009102:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009104:	430b      	orrs	r3, r1
 8009106:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910e:	f023 010f 	bic.w	r1, r3, #15
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	430a      	orrs	r2, r1
 800911c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4aa6      	ldr	r2, [pc, #664]	@ (80093bc <UART_SetConfig+0x334>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d177      	bne.n	8009218 <UART_SetConfig+0x190>
 8009128:	4ba5      	ldr	r3, [pc, #660]	@ (80093c0 <UART_SetConfig+0x338>)
 800912a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800912c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009130:	2b28      	cmp	r3, #40	@ 0x28
 8009132:	d86d      	bhi.n	8009210 <UART_SetConfig+0x188>
 8009134:	a201      	add	r2, pc, #4	@ (adr r2, 800913c <UART_SetConfig+0xb4>)
 8009136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913a:	bf00      	nop
 800913c:	080091e1 	.word	0x080091e1
 8009140:	08009211 	.word	0x08009211
 8009144:	08009211 	.word	0x08009211
 8009148:	08009211 	.word	0x08009211
 800914c:	08009211 	.word	0x08009211
 8009150:	08009211 	.word	0x08009211
 8009154:	08009211 	.word	0x08009211
 8009158:	08009211 	.word	0x08009211
 800915c:	080091e9 	.word	0x080091e9
 8009160:	08009211 	.word	0x08009211
 8009164:	08009211 	.word	0x08009211
 8009168:	08009211 	.word	0x08009211
 800916c:	08009211 	.word	0x08009211
 8009170:	08009211 	.word	0x08009211
 8009174:	08009211 	.word	0x08009211
 8009178:	08009211 	.word	0x08009211
 800917c:	080091f1 	.word	0x080091f1
 8009180:	08009211 	.word	0x08009211
 8009184:	08009211 	.word	0x08009211
 8009188:	08009211 	.word	0x08009211
 800918c:	08009211 	.word	0x08009211
 8009190:	08009211 	.word	0x08009211
 8009194:	08009211 	.word	0x08009211
 8009198:	08009211 	.word	0x08009211
 800919c:	080091f9 	.word	0x080091f9
 80091a0:	08009211 	.word	0x08009211
 80091a4:	08009211 	.word	0x08009211
 80091a8:	08009211 	.word	0x08009211
 80091ac:	08009211 	.word	0x08009211
 80091b0:	08009211 	.word	0x08009211
 80091b4:	08009211 	.word	0x08009211
 80091b8:	08009211 	.word	0x08009211
 80091bc:	08009201 	.word	0x08009201
 80091c0:	08009211 	.word	0x08009211
 80091c4:	08009211 	.word	0x08009211
 80091c8:	08009211 	.word	0x08009211
 80091cc:	08009211 	.word	0x08009211
 80091d0:	08009211 	.word	0x08009211
 80091d4:	08009211 	.word	0x08009211
 80091d8:	08009211 	.word	0x08009211
 80091dc:	08009209 	.word	0x08009209
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091e6:	e222      	b.n	800962e <UART_SetConfig+0x5a6>
 80091e8:	2304      	movs	r3, #4
 80091ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ee:	e21e      	b.n	800962e <UART_SetConfig+0x5a6>
 80091f0:	2308      	movs	r3, #8
 80091f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f6:	e21a      	b.n	800962e <UART_SetConfig+0x5a6>
 80091f8:	2310      	movs	r3, #16
 80091fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fe:	e216      	b.n	800962e <UART_SetConfig+0x5a6>
 8009200:	2320      	movs	r3, #32
 8009202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009206:	e212      	b.n	800962e <UART_SetConfig+0x5a6>
 8009208:	2340      	movs	r3, #64	@ 0x40
 800920a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920e:	e20e      	b.n	800962e <UART_SetConfig+0x5a6>
 8009210:	2380      	movs	r3, #128	@ 0x80
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009216:	e20a      	b.n	800962e <UART_SetConfig+0x5a6>
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a69      	ldr	r2, [pc, #420]	@ (80093c4 <UART_SetConfig+0x33c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d130      	bne.n	8009284 <UART_SetConfig+0x1fc>
 8009222:	4b67      	ldr	r3, [pc, #412]	@ (80093c0 <UART_SetConfig+0x338>)
 8009224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009226:	f003 0307 	and.w	r3, r3, #7
 800922a:	2b05      	cmp	r3, #5
 800922c:	d826      	bhi.n	800927c <UART_SetConfig+0x1f4>
 800922e:	a201      	add	r2, pc, #4	@ (adr r2, 8009234 <UART_SetConfig+0x1ac>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	0800924d 	.word	0x0800924d
 8009238:	08009255 	.word	0x08009255
 800923c:	0800925d 	.word	0x0800925d
 8009240:	08009265 	.word	0x08009265
 8009244:	0800926d 	.word	0x0800926d
 8009248:	08009275 	.word	0x08009275
 800924c:	2300      	movs	r3, #0
 800924e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009252:	e1ec      	b.n	800962e <UART_SetConfig+0x5a6>
 8009254:	2304      	movs	r3, #4
 8009256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925a:	e1e8      	b.n	800962e <UART_SetConfig+0x5a6>
 800925c:	2308      	movs	r3, #8
 800925e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009262:	e1e4      	b.n	800962e <UART_SetConfig+0x5a6>
 8009264:	2310      	movs	r3, #16
 8009266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926a:	e1e0      	b.n	800962e <UART_SetConfig+0x5a6>
 800926c:	2320      	movs	r3, #32
 800926e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009272:	e1dc      	b.n	800962e <UART_SetConfig+0x5a6>
 8009274:	2340      	movs	r3, #64	@ 0x40
 8009276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927a:	e1d8      	b.n	800962e <UART_SetConfig+0x5a6>
 800927c:	2380      	movs	r3, #128	@ 0x80
 800927e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009282:	e1d4      	b.n	800962e <UART_SetConfig+0x5a6>
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a4f      	ldr	r2, [pc, #316]	@ (80093c8 <UART_SetConfig+0x340>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d130      	bne.n	80092f0 <UART_SetConfig+0x268>
 800928e:	4b4c      	ldr	r3, [pc, #304]	@ (80093c0 <UART_SetConfig+0x338>)
 8009290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009292:	f003 0307 	and.w	r3, r3, #7
 8009296:	2b05      	cmp	r3, #5
 8009298:	d826      	bhi.n	80092e8 <UART_SetConfig+0x260>
 800929a:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <UART_SetConfig+0x218>)
 800929c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a0:	080092b9 	.word	0x080092b9
 80092a4:	080092c1 	.word	0x080092c1
 80092a8:	080092c9 	.word	0x080092c9
 80092ac:	080092d1 	.word	0x080092d1
 80092b0:	080092d9 	.word	0x080092d9
 80092b4:	080092e1 	.word	0x080092e1
 80092b8:	2300      	movs	r3, #0
 80092ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092be:	e1b6      	b.n	800962e <UART_SetConfig+0x5a6>
 80092c0:	2304      	movs	r3, #4
 80092c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c6:	e1b2      	b.n	800962e <UART_SetConfig+0x5a6>
 80092c8:	2308      	movs	r3, #8
 80092ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ce:	e1ae      	b.n	800962e <UART_SetConfig+0x5a6>
 80092d0:	2310      	movs	r3, #16
 80092d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092d6:	e1aa      	b.n	800962e <UART_SetConfig+0x5a6>
 80092d8:	2320      	movs	r3, #32
 80092da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092de:	e1a6      	b.n	800962e <UART_SetConfig+0x5a6>
 80092e0:	2340      	movs	r3, #64	@ 0x40
 80092e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e6:	e1a2      	b.n	800962e <UART_SetConfig+0x5a6>
 80092e8:	2380      	movs	r3, #128	@ 0x80
 80092ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ee:	e19e      	b.n	800962e <UART_SetConfig+0x5a6>
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a35      	ldr	r2, [pc, #212]	@ (80093cc <UART_SetConfig+0x344>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d130      	bne.n	800935c <UART_SetConfig+0x2d4>
 80092fa:	4b31      	ldr	r3, [pc, #196]	@ (80093c0 <UART_SetConfig+0x338>)
 80092fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092fe:	f003 0307 	and.w	r3, r3, #7
 8009302:	2b05      	cmp	r3, #5
 8009304:	d826      	bhi.n	8009354 <UART_SetConfig+0x2cc>
 8009306:	a201      	add	r2, pc, #4	@ (adr r2, 800930c <UART_SetConfig+0x284>)
 8009308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930c:	08009325 	.word	0x08009325
 8009310:	0800932d 	.word	0x0800932d
 8009314:	08009335 	.word	0x08009335
 8009318:	0800933d 	.word	0x0800933d
 800931c:	08009345 	.word	0x08009345
 8009320:	0800934d 	.word	0x0800934d
 8009324:	2300      	movs	r3, #0
 8009326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932a:	e180      	b.n	800962e <UART_SetConfig+0x5a6>
 800932c:	2304      	movs	r3, #4
 800932e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009332:	e17c      	b.n	800962e <UART_SetConfig+0x5a6>
 8009334:	2308      	movs	r3, #8
 8009336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933a:	e178      	b.n	800962e <UART_SetConfig+0x5a6>
 800933c:	2310      	movs	r3, #16
 800933e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009342:	e174      	b.n	800962e <UART_SetConfig+0x5a6>
 8009344:	2320      	movs	r3, #32
 8009346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934a:	e170      	b.n	800962e <UART_SetConfig+0x5a6>
 800934c:	2340      	movs	r3, #64	@ 0x40
 800934e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009352:	e16c      	b.n	800962e <UART_SetConfig+0x5a6>
 8009354:	2380      	movs	r3, #128	@ 0x80
 8009356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935a:	e168      	b.n	800962e <UART_SetConfig+0x5a6>
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a1b      	ldr	r2, [pc, #108]	@ (80093d0 <UART_SetConfig+0x348>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d142      	bne.n	80093ec <UART_SetConfig+0x364>
 8009366:	4b16      	ldr	r3, [pc, #88]	@ (80093c0 <UART_SetConfig+0x338>)
 8009368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800936a:	f003 0307 	and.w	r3, r3, #7
 800936e:	2b05      	cmp	r3, #5
 8009370:	d838      	bhi.n	80093e4 <UART_SetConfig+0x35c>
 8009372:	a201      	add	r2, pc, #4	@ (adr r2, 8009378 <UART_SetConfig+0x2f0>)
 8009374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009378:	08009391 	.word	0x08009391
 800937c:	08009399 	.word	0x08009399
 8009380:	080093a1 	.word	0x080093a1
 8009384:	080093a9 	.word	0x080093a9
 8009388:	080093d5 	.word	0x080093d5
 800938c:	080093dd 	.word	0x080093dd
 8009390:	2300      	movs	r3, #0
 8009392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009396:	e14a      	b.n	800962e <UART_SetConfig+0x5a6>
 8009398:	2304      	movs	r3, #4
 800939a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939e:	e146      	b.n	800962e <UART_SetConfig+0x5a6>
 80093a0:	2308      	movs	r3, #8
 80093a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a6:	e142      	b.n	800962e <UART_SetConfig+0x5a6>
 80093a8:	2310      	movs	r3, #16
 80093aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ae:	e13e      	b.n	800962e <UART_SetConfig+0x5a6>
 80093b0:	cfff69f3 	.word	0xcfff69f3
 80093b4:	58000c00 	.word	0x58000c00
 80093b8:	11fff4ff 	.word	0x11fff4ff
 80093bc:	40011000 	.word	0x40011000
 80093c0:	58024400 	.word	0x58024400
 80093c4:	40004400 	.word	0x40004400
 80093c8:	40004800 	.word	0x40004800
 80093cc:	40004c00 	.word	0x40004c00
 80093d0:	40005000 	.word	0x40005000
 80093d4:	2320      	movs	r3, #32
 80093d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093da:	e128      	b.n	800962e <UART_SetConfig+0x5a6>
 80093dc:	2340      	movs	r3, #64	@ 0x40
 80093de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e2:	e124      	b.n	800962e <UART_SetConfig+0x5a6>
 80093e4:	2380      	movs	r3, #128	@ 0x80
 80093e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ea:	e120      	b.n	800962e <UART_SetConfig+0x5a6>
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4acb      	ldr	r2, [pc, #812]	@ (8009720 <UART_SetConfig+0x698>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d176      	bne.n	80094e4 <UART_SetConfig+0x45c>
 80093f6:	4bcb      	ldr	r3, [pc, #812]	@ (8009724 <UART_SetConfig+0x69c>)
 80093f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093fe:	2b28      	cmp	r3, #40	@ 0x28
 8009400:	d86c      	bhi.n	80094dc <UART_SetConfig+0x454>
 8009402:	a201      	add	r2, pc, #4	@ (adr r2, 8009408 <UART_SetConfig+0x380>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	080094ad 	.word	0x080094ad
 800940c:	080094dd 	.word	0x080094dd
 8009410:	080094dd 	.word	0x080094dd
 8009414:	080094dd 	.word	0x080094dd
 8009418:	080094dd 	.word	0x080094dd
 800941c:	080094dd 	.word	0x080094dd
 8009420:	080094dd 	.word	0x080094dd
 8009424:	080094dd 	.word	0x080094dd
 8009428:	080094b5 	.word	0x080094b5
 800942c:	080094dd 	.word	0x080094dd
 8009430:	080094dd 	.word	0x080094dd
 8009434:	080094dd 	.word	0x080094dd
 8009438:	080094dd 	.word	0x080094dd
 800943c:	080094dd 	.word	0x080094dd
 8009440:	080094dd 	.word	0x080094dd
 8009444:	080094dd 	.word	0x080094dd
 8009448:	080094bd 	.word	0x080094bd
 800944c:	080094dd 	.word	0x080094dd
 8009450:	080094dd 	.word	0x080094dd
 8009454:	080094dd 	.word	0x080094dd
 8009458:	080094dd 	.word	0x080094dd
 800945c:	080094dd 	.word	0x080094dd
 8009460:	080094dd 	.word	0x080094dd
 8009464:	080094dd 	.word	0x080094dd
 8009468:	080094c5 	.word	0x080094c5
 800946c:	080094dd 	.word	0x080094dd
 8009470:	080094dd 	.word	0x080094dd
 8009474:	080094dd 	.word	0x080094dd
 8009478:	080094dd 	.word	0x080094dd
 800947c:	080094dd 	.word	0x080094dd
 8009480:	080094dd 	.word	0x080094dd
 8009484:	080094dd 	.word	0x080094dd
 8009488:	080094cd 	.word	0x080094cd
 800948c:	080094dd 	.word	0x080094dd
 8009490:	080094dd 	.word	0x080094dd
 8009494:	080094dd 	.word	0x080094dd
 8009498:	080094dd 	.word	0x080094dd
 800949c:	080094dd 	.word	0x080094dd
 80094a0:	080094dd 	.word	0x080094dd
 80094a4:	080094dd 	.word	0x080094dd
 80094a8:	080094d5 	.word	0x080094d5
 80094ac:	2301      	movs	r3, #1
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b2:	e0bc      	b.n	800962e <UART_SetConfig+0x5a6>
 80094b4:	2304      	movs	r3, #4
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ba:	e0b8      	b.n	800962e <UART_SetConfig+0x5a6>
 80094bc:	2308      	movs	r3, #8
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c2:	e0b4      	b.n	800962e <UART_SetConfig+0x5a6>
 80094c4:	2310      	movs	r3, #16
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ca:	e0b0      	b.n	800962e <UART_SetConfig+0x5a6>
 80094cc:	2320      	movs	r3, #32
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d2:	e0ac      	b.n	800962e <UART_SetConfig+0x5a6>
 80094d4:	2340      	movs	r3, #64	@ 0x40
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094da:	e0a8      	b.n	800962e <UART_SetConfig+0x5a6>
 80094dc:	2380      	movs	r3, #128	@ 0x80
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e2:	e0a4      	b.n	800962e <UART_SetConfig+0x5a6>
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a8f      	ldr	r2, [pc, #572]	@ (8009728 <UART_SetConfig+0x6a0>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d130      	bne.n	8009550 <UART_SetConfig+0x4c8>
 80094ee:	4b8d      	ldr	r3, [pc, #564]	@ (8009724 <UART_SetConfig+0x69c>)
 80094f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f2:	f003 0307 	and.w	r3, r3, #7
 80094f6:	2b05      	cmp	r3, #5
 80094f8:	d826      	bhi.n	8009548 <UART_SetConfig+0x4c0>
 80094fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009500 <UART_SetConfig+0x478>)
 80094fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009500:	08009519 	.word	0x08009519
 8009504:	08009521 	.word	0x08009521
 8009508:	08009529 	.word	0x08009529
 800950c:	08009531 	.word	0x08009531
 8009510:	08009539 	.word	0x08009539
 8009514:	08009541 	.word	0x08009541
 8009518:	2300      	movs	r3, #0
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951e:	e086      	b.n	800962e <UART_SetConfig+0x5a6>
 8009520:	2304      	movs	r3, #4
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009526:	e082      	b.n	800962e <UART_SetConfig+0x5a6>
 8009528:	2308      	movs	r3, #8
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952e:	e07e      	b.n	800962e <UART_SetConfig+0x5a6>
 8009530:	2310      	movs	r3, #16
 8009532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009536:	e07a      	b.n	800962e <UART_SetConfig+0x5a6>
 8009538:	2320      	movs	r3, #32
 800953a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953e:	e076      	b.n	800962e <UART_SetConfig+0x5a6>
 8009540:	2340      	movs	r3, #64	@ 0x40
 8009542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009546:	e072      	b.n	800962e <UART_SetConfig+0x5a6>
 8009548:	2380      	movs	r3, #128	@ 0x80
 800954a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954e:	e06e      	b.n	800962e <UART_SetConfig+0x5a6>
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a75      	ldr	r2, [pc, #468]	@ (800972c <UART_SetConfig+0x6a4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d130      	bne.n	80095bc <UART_SetConfig+0x534>
 800955a:	4b72      	ldr	r3, [pc, #456]	@ (8009724 <UART_SetConfig+0x69c>)
 800955c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800955e:	f003 0307 	and.w	r3, r3, #7
 8009562:	2b05      	cmp	r3, #5
 8009564:	d826      	bhi.n	80095b4 <UART_SetConfig+0x52c>
 8009566:	a201      	add	r2, pc, #4	@ (adr r2, 800956c <UART_SetConfig+0x4e4>)
 8009568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956c:	08009585 	.word	0x08009585
 8009570:	0800958d 	.word	0x0800958d
 8009574:	08009595 	.word	0x08009595
 8009578:	0800959d 	.word	0x0800959d
 800957c:	080095a5 	.word	0x080095a5
 8009580:	080095ad 	.word	0x080095ad
 8009584:	2300      	movs	r3, #0
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958a:	e050      	b.n	800962e <UART_SetConfig+0x5a6>
 800958c:	2304      	movs	r3, #4
 800958e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009592:	e04c      	b.n	800962e <UART_SetConfig+0x5a6>
 8009594:	2308      	movs	r3, #8
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959a:	e048      	b.n	800962e <UART_SetConfig+0x5a6>
 800959c:	2310      	movs	r3, #16
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a2:	e044      	b.n	800962e <UART_SetConfig+0x5a6>
 80095a4:	2320      	movs	r3, #32
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095aa:	e040      	b.n	800962e <UART_SetConfig+0x5a6>
 80095ac:	2340      	movs	r3, #64	@ 0x40
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b2:	e03c      	b.n	800962e <UART_SetConfig+0x5a6>
 80095b4:	2380      	movs	r3, #128	@ 0x80
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ba:	e038      	b.n	800962e <UART_SetConfig+0x5a6>
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a5b      	ldr	r2, [pc, #364]	@ (8009730 <UART_SetConfig+0x6a8>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d130      	bne.n	8009628 <UART_SetConfig+0x5a0>
 80095c6:	4b57      	ldr	r3, [pc, #348]	@ (8009724 <UART_SetConfig+0x69c>)
 80095c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ca:	f003 0307 	and.w	r3, r3, #7
 80095ce:	2b05      	cmp	r3, #5
 80095d0:	d826      	bhi.n	8009620 <UART_SetConfig+0x598>
 80095d2:	a201      	add	r2, pc, #4	@ (adr r2, 80095d8 <UART_SetConfig+0x550>)
 80095d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d8:	080095f1 	.word	0x080095f1
 80095dc:	080095f9 	.word	0x080095f9
 80095e0:	08009601 	.word	0x08009601
 80095e4:	08009609 	.word	0x08009609
 80095e8:	08009611 	.word	0x08009611
 80095ec:	08009619 	.word	0x08009619
 80095f0:	2302      	movs	r3, #2
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f6:	e01a      	b.n	800962e <UART_SetConfig+0x5a6>
 80095f8:	2304      	movs	r3, #4
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fe:	e016      	b.n	800962e <UART_SetConfig+0x5a6>
 8009600:	2308      	movs	r3, #8
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009606:	e012      	b.n	800962e <UART_SetConfig+0x5a6>
 8009608:	2310      	movs	r3, #16
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960e:	e00e      	b.n	800962e <UART_SetConfig+0x5a6>
 8009610:	2320      	movs	r3, #32
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009616:	e00a      	b.n	800962e <UART_SetConfig+0x5a6>
 8009618:	2340      	movs	r3, #64	@ 0x40
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961e:	e006      	b.n	800962e <UART_SetConfig+0x5a6>
 8009620:	2380      	movs	r3, #128	@ 0x80
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009626:	e002      	b.n	800962e <UART_SetConfig+0x5a6>
 8009628:	2380      	movs	r3, #128	@ 0x80
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a3f      	ldr	r2, [pc, #252]	@ (8009730 <UART_SetConfig+0x6a8>)
 8009634:	4293      	cmp	r3, r2
 8009636:	f040 80f8 	bne.w	800982a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800963a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800963e:	2b20      	cmp	r3, #32
 8009640:	dc46      	bgt.n	80096d0 <UART_SetConfig+0x648>
 8009642:	2b02      	cmp	r3, #2
 8009644:	f2c0 8082 	blt.w	800974c <UART_SetConfig+0x6c4>
 8009648:	3b02      	subs	r3, #2
 800964a:	2b1e      	cmp	r3, #30
 800964c:	d87e      	bhi.n	800974c <UART_SetConfig+0x6c4>
 800964e:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <UART_SetConfig+0x5cc>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	080096d7 	.word	0x080096d7
 8009658:	0800974d 	.word	0x0800974d
 800965c:	080096df 	.word	0x080096df
 8009660:	0800974d 	.word	0x0800974d
 8009664:	0800974d 	.word	0x0800974d
 8009668:	0800974d 	.word	0x0800974d
 800966c:	080096ef 	.word	0x080096ef
 8009670:	0800974d 	.word	0x0800974d
 8009674:	0800974d 	.word	0x0800974d
 8009678:	0800974d 	.word	0x0800974d
 800967c:	0800974d 	.word	0x0800974d
 8009680:	0800974d 	.word	0x0800974d
 8009684:	0800974d 	.word	0x0800974d
 8009688:	0800974d 	.word	0x0800974d
 800968c:	080096ff 	.word	0x080096ff
 8009690:	0800974d 	.word	0x0800974d
 8009694:	0800974d 	.word	0x0800974d
 8009698:	0800974d 	.word	0x0800974d
 800969c:	0800974d 	.word	0x0800974d
 80096a0:	0800974d 	.word	0x0800974d
 80096a4:	0800974d 	.word	0x0800974d
 80096a8:	0800974d 	.word	0x0800974d
 80096ac:	0800974d 	.word	0x0800974d
 80096b0:	0800974d 	.word	0x0800974d
 80096b4:	0800974d 	.word	0x0800974d
 80096b8:	0800974d 	.word	0x0800974d
 80096bc:	0800974d 	.word	0x0800974d
 80096c0:	0800974d 	.word	0x0800974d
 80096c4:	0800974d 	.word	0x0800974d
 80096c8:	0800974d 	.word	0x0800974d
 80096cc:	0800973f 	.word	0x0800973f
 80096d0:	2b40      	cmp	r3, #64	@ 0x40
 80096d2:	d037      	beq.n	8009744 <UART_SetConfig+0x6bc>
 80096d4:	e03a      	b.n	800974c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80096d6:	f7fe f933 	bl	8007940 <HAL_RCCEx_GetD3PCLK1Freq>
 80096da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096dc:	e03c      	b.n	8009758 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe f942 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ec:	e034      	b.n	8009758 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096ee:	f107 0318 	add.w	r3, r7, #24
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe fa8e 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096fc:	e02c      	b.n	8009758 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096fe:	4b09      	ldr	r3, [pc, #36]	@ (8009724 <UART_SetConfig+0x69c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0320 	and.w	r3, r3, #32
 8009706:	2b00      	cmp	r3, #0
 8009708:	d016      	beq.n	8009738 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800970a:	4b06      	ldr	r3, [pc, #24]	@ (8009724 <UART_SetConfig+0x69c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	08db      	lsrs	r3, r3, #3
 8009710:	f003 0303 	and.w	r3, r3, #3
 8009714:	4a07      	ldr	r2, [pc, #28]	@ (8009734 <UART_SetConfig+0x6ac>)
 8009716:	fa22 f303 	lsr.w	r3, r2, r3
 800971a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800971c:	e01c      	b.n	8009758 <UART_SetConfig+0x6d0>
 800971e:	bf00      	nop
 8009720:	40011400 	.word	0x40011400
 8009724:	58024400 	.word	0x58024400
 8009728:	40007800 	.word	0x40007800
 800972c:	40007c00 	.word	0x40007c00
 8009730:	58000c00 	.word	0x58000c00
 8009734:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009738:	4b9d      	ldr	r3, [pc, #628]	@ (80099b0 <UART_SetConfig+0x928>)
 800973a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800973c:	e00c      	b.n	8009758 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800973e:	4b9d      	ldr	r3, [pc, #628]	@ (80099b4 <UART_SetConfig+0x92c>)
 8009740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009742:	e009      	b.n	8009758 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009744:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800974a:	e005      	b.n	8009758 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800974c:	2300      	movs	r3, #0
 800974e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009756:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 81de 	beq.w	8009b1c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009764:	4a94      	ldr	r2, [pc, #592]	@ (80099b8 <UART_SetConfig+0x930>)
 8009766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800976a:	461a      	mov	r2, r3
 800976c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800976e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009772:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	4613      	mov	r3, r2
 800977a:	005b      	lsls	r3, r3, #1
 800977c:	4413      	add	r3, r2
 800977e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009780:	429a      	cmp	r2, r3
 8009782:	d305      	bcc.n	8009790 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800978a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800978c:	429a      	cmp	r2, r3
 800978e:	d903      	bls.n	8009798 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009796:	e1c1      	b.n	8009b1c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800979a:	2200      	movs	r2, #0
 800979c:	60bb      	str	r3, [r7, #8]
 800979e:	60fa      	str	r2, [r7, #12]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a4:	4a84      	ldr	r2, [pc, #528]	@ (80099b8 <UART_SetConfig+0x930>)
 80097a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	2200      	movs	r2, #0
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	607a      	str	r2, [r7, #4]
 80097b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097ba:	f7f6 ffa5 	bl	8000708 <__aeabi_uldivmod>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4610      	mov	r0, r2
 80097c4:	4619      	mov	r1, r3
 80097c6:	f04f 0200 	mov.w	r2, #0
 80097ca:	f04f 0300 	mov.w	r3, #0
 80097ce:	020b      	lsls	r3, r1, #8
 80097d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097d4:	0202      	lsls	r2, r0, #8
 80097d6:	6979      	ldr	r1, [r7, #20]
 80097d8:	6849      	ldr	r1, [r1, #4]
 80097da:	0849      	lsrs	r1, r1, #1
 80097dc:	2000      	movs	r0, #0
 80097de:	460c      	mov	r4, r1
 80097e0:	4605      	mov	r5, r0
 80097e2:	eb12 0804 	adds.w	r8, r2, r4
 80097e6:	eb43 0905 	adc.w	r9, r3, r5
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	469a      	mov	sl, r3
 80097f2:	4693      	mov	fp, r2
 80097f4:	4652      	mov	r2, sl
 80097f6:	465b      	mov	r3, fp
 80097f8:	4640      	mov	r0, r8
 80097fa:	4649      	mov	r1, r9
 80097fc:	f7f6 ff84 	bl	8000708 <__aeabi_uldivmod>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4613      	mov	r3, r2
 8009806:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800980e:	d308      	bcc.n	8009822 <UART_SetConfig+0x79a>
 8009810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009816:	d204      	bcs.n	8009822 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800981e:	60da      	str	r2, [r3, #12]
 8009820:	e17c      	b.n	8009b1c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009828:	e178      	b.n	8009b1c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009832:	f040 80c5 	bne.w	80099c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009836:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800983a:	2b20      	cmp	r3, #32
 800983c:	dc48      	bgt.n	80098d0 <UART_SetConfig+0x848>
 800983e:	2b00      	cmp	r3, #0
 8009840:	db7b      	blt.n	800993a <UART_SetConfig+0x8b2>
 8009842:	2b20      	cmp	r3, #32
 8009844:	d879      	bhi.n	800993a <UART_SetConfig+0x8b2>
 8009846:	a201      	add	r2, pc, #4	@ (adr r2, 800984c <UART_SetConfig+0x7c4>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	080098d7 	.word	0x080098d7
 8009850:	080098df 	.word	0x080098df
 8009854:	0800993b 	.word	0x0800993b
 8009858:	0800993b 	.word	0x0800993b
 800985c:	080098e7 	.word	0x080098e7
 8009860:	0800993b 	.word	0x0800993b
 8009864:	0800993b 	.word	0x0800993b
 8009868:	0800993b 	.word	0x0800993b
 800986c:	080098f7 	.word	0x080098f7
 8009870:	0800993b 	.word	0x0800993b
 8009874:	0800993b 	.word	0x0800993b
 8009878:	0800993b 	.word	0x0800993b
 800987c:	0800993b 	.word	0x0800993b
 8009880:	0800993b 	.word	0x0800993b
 8009884:	0800993b 	.word	0x0800993b
 8009888:	0800993b 	.word	0x0800993b
 800988c:	08009907 	.word	0x08009907
 8009890:	0800993b 	.word	0x0800993b
 8009894:	0800993b 	.word	0x0800993b
 8009898:	0800993b 	.word	0x0800993b
 800989c:	0800993b 	.word	0x0800993b
 80098a0:	0800993b 	.word	0x0800993b
 80098a4:	0800993b 	.word	0x0800993b
 80098a8:	0800993b 	.word	0x0800993b
 80098ac:	0800993b 	.word	0x0800993b
 80098b0:	0800993b 	.word	0x0800993b
 80098b4:	0800993b 	.word	0x0800993b
 80098b8:	0800993b 	.word	0x0800993b
 80098bc:	0800993b 	.word	0x0800993b
 80098c0:	0800993b 	.word	0x0800993b
 80098c4:	0800993b 	.word	0x0800993b
 80098c8:	0800993b 	.word	0x0800993b
 80098cc:	0800992d 	.word	0x0800992d
 80098d0:	2b40      	cmp	r3, #64	@ 0x40
 80098d2:	d02e      	beq.n	8009932 <UART_SetConfig+0x8aa>
 80098d4:	e031      	b.n	800993a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098d6:	f7fc f87d 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 80098da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098dc:	e033      	b.n	8009946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098de:	f7fc f88f 	bl	8005a00 <HAL_RCC_GetPCLK2Freq>
 80098e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098e4:	e02f      	b.n	8009946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe f83e 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f4:	e027      	b.n	8009946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098f6:	f107 0318 	add.w	r3, r7, #24
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe f98a 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009904:	e01f      	b.n	8009946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009906:	4b2d      	ldr	r3, [pc, #180]	@ (80099bc <UART_SetConfig+0x934>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 0320 	and.w	r3, r3, #32
 800990e:	2b00      	cmp	r3, #0
 8009910:	d009      	beq.n	8009926 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009912:	4b2a      	ldr	r3, [pc, #168]	@ (80099bc <UART_SetConfig+0x934>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	08db      	lsrs	r3, r3, #3
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	4a24      	ldr	r2, [pc, #144]	@ (80099b0 <UART_SetConfig+0x928>)
 800991e:	fa22 f303 	lsr.w	r3, r2, r3
 8009922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009924:	e00f      	b.n	8009946 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009926:	4b22      	ldr	r3, [pc, #136]	@ (80099b0 <UART_SetConfig+0x928>)
 8009928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992a:	e00c      	b.n	8009946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800992c:	4b21      	ldr	r3, [pc, #132]	@ (80099b4 <UART_SetConfig+0x92c>)
 800992e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009930:	e009      	b.n	8009946 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009938:	e005      	b.n	8009946 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800993a:	2300      	movs	r3, #0
 800993c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009944:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 80e7 	beq.w	8009b1c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009952:	4a19      	ldr	r2, [pc, #100]	@ (80099b8 <UART_SetConfig+0x930>)
 8009954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009958:	461a      	mov	r2, r3
 800995a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800995c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009960:	005a      	lsls	r2, r3, #1
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	085b      	lsrs	r3, r3, #1
 8009968:	441a      	add	r2, r3
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009972:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009976:	2b0f      	cmp	r3, #15
 8009978:	d916      	bls.n	80099a8 <UART_SetConfig+0x920>
 800997a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009980:	d212      	bcs.n	80099a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009984:	b29b      	uxth	r3, r3
 8009986:	f023 030f 	bic.w	r3, r3, #15
 800998a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800998c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998e:	085b      	lsrs	r3, r3, #1
 8009990:	b29b      	uxth	r3, r3
 8009992:	f003 0307 	and.w	r3, r3, #7
 8009996:	b29a      	uxth	r2, r3
 8009998:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800999a:	4313      	orrs	r3, r2
 800999c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80099a4:	60da      	str	r2, [r3, #12]
 80099a6:	e0b9      	b.n	8009b1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099ae:	e0b5      	b.n	8009b1c <UART_SetConfig+0xa94>
 80099b0:	03d09000 	.word	0x03d09000
 80099b4:	003d0900 	.word	0x003d0900
 80099b8:	0800fdf8 	.word	0x0800fdf8
 80099bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80099c0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099c4:	2b20      	cmp	r3, #32
 80099c6:	dc49      	bgt.n	8009a5c <UART_SetConfig+0x9d4>
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	db7c      	blt.n	8009ac6 <UART_SetConfig+0xa3e>
 80099cc:	2b20      	cmp	r3, #32
 80099ce:	d87a      	bhi.n	8009ac6 <UART_SetConfig+0xa3e>
 80099d0:	a201      	add	r2, pc, #4	@ (adr r2, 80099d8 <UART_SetConfig+0x950>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	08009a63 	.word	0x08009a63
 80099dc:	08009a6b 	.word	0x08009a6b
 80099e0:	08009ac7 	.word	0x08009ac7
 80099e4:	08009ac7 	.word	0x08009ac7
 80099e8:	08009a73 	.word	0x08009a73
 80099ec:	08009ac7 	.word	0x08009ac7
 80099f0:	08009ac7 	.word	0x08009ac7
 80099f4:	08009ac7 	.word	0x08009ac7
 80099f8:	08009a83 	.word	0x08009a83
 80099fc:	08009ac7 	.word	0x08009ac7
 8009a00:	08009ac7 	.word	0x08009ac7
 8009a04:	08009ac7 	.word	0x08009ac7
 8009a08:	08009ac7 	.word	0x08009ac7
 8009a0c:	08009ac7 	.word	0x08009ac7
 8009a10:	08009ac7 	.word	0x08009ac7
 8009a14:	08009ac7 	.word	0x08009ac7
 8009a18:	08009a93 	.word	0x08009a93
 8009a1c:	08009ac7 	.word	0x08009ac7
 8009a20:	08009ac7 	.word	0x08009ac7
 8009a24:	08009ac7 	.word	0x08009ac7
 8009a28:	08009ac7 	.word	0x08009ac7
 8009a2c:	08009ac7 	.word	0x08009ac7
 8009a30:	08009ac7 	.word	0x08009ac7
 8009a34:	08009ac7 	.word	0x08009ac7
 8009a38:	08009ac7 	.word	0x08009ac7
 8009a3c:	08009ac7 	.word	0x08009ac7
 8009a40:	08009ac7 	.word	0x08009ac7
 8009a44:	08009ac7 	.word	0x08009ac7
 8009a48:	08009ac7 	.word	0x08009ac7
 8009a4c:	08009ac7 	.word	0x08009ac7
 8009a50:	08009ac7 	.word	0x08009ac7
 8009a54:	08009ac7 	.word	0x08009ac7
 8009a58:	08009ab9 	.word	0x08009ab9
 8009a5c:	2b40      	cmp	r3, #64	@ 0x40
 8009a5e:	d02e      	beq.n	8009abe <UART_SetConfig+0xa36>
 8009a60:	e031      	b.n	8009ac6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a62:	f7fb ffb7 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 8009a66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a68:	e033      	b.n	8009ad2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a6a:	f7fb ffc9 	bl	8005a00 <HAL_RCC_GetPCLK2Freq>
 8009a6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a70:	e02f      	b.n	8009ad2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fd ff78 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a80:	e027      	b.n	8009ad2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a82:	f107 0318 	add.w	r3, r7, #24
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe f8c4 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a90:	e01f      	b.n	8009ad2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a92:	4b2d      	ldr	r3, [pc, #180]	@ (8009b48 <UART_SetConfig+0xac0>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0320 	and.w	r3, r3, #32
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d009      	beq.n	8009ab2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8009b48 <UART_SetConfig+0xac0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	08db      	lsrs	r3, r3, #3
 8009aa4:	f003 0303 	and.w	r3, r3, #3
 8009aa8:	4a28      	ldr	r2, [pc, #160]	@ (8009b4c <UART_SetConfig+0xac4>)
 8009aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8009aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ab0:	e00f      	b.n	8009ad2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009ab2:	4b26      	ldr	r3, [pc, #152]	@ (8009b4c <UART_SetConfig+0xac4>)
 8009ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab6:	e00c      	b.n	8009ad2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ab8:	4b25      	ldr	r3, [pc, #148]	@ (8009b50 <UART_SetConfig+0xac8>)
 8009aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009abc:	e009      	b.n	8009ad2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac4:	e005      	b.n	8009ad2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ad0:	bf00      	nop
    }

    if (pclk != 0U)
 8009ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d021      	beq.n	8009b1c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009adc:	4a1d      	ldr	r2, [pc, #116]	@ (8009b54 <UART_SetConfig+0xacc>)
 8009ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	085b      	lsrs	r3, r3, #1
 8009af0:	441a      	add	r2, r3
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009afa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	2b0f      	cmp	r3, #15
 8009b00:	d909      	bls.n	8009b16 <UART_SetConfig+0xa8e>
 8009b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b08:	d205      	bcs.n	8009b16 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	60da      	str	r2, [r3, #12]
 8009b14:	e002      	b.n	8009b1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	2200      	movs	r2, #0
 8009b36:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b38:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3748      	adds	r7, #72	@ 0x48
 8009b40:	46bd      	mov	sp, r7
 8009b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b46:	bf00      	nop
 8009b48:	58024400 	.word	0x58024400
 8009b4c:	03d09000 	.word	0x03d09000
 8009b50:	003d0900 	.word	0x003d0900
 8009b54:	0800fdf8 	.word	0x0800fdf8

08009b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b64:	f003 0308 	and.w	r3, r3, #8
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00a      	beq.n	8009b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00a      	beq.n	8009bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bca:	f003 0304 	and.w	r3, r3, #4
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00a      	beq.n	8009be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bec:	f003 0310 	and.w	r3, r3, #16
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00a      	beq.n	8009c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	430a      	orrs	r2, r1
 8009c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0e:	f003 0320 	and.w	r3, r3, #32
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d01a      	beq.n	8009c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c56:	d10a      	bne.n	8009c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00a      	beq.n	8009c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	605a      	str	r2, [r3, #4]
  }
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b098      	sub	sp, #96	@ 0x60
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cac:	f7f7 fe24 	bl	80018f8 <HAL_GetTick>
 8009cb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0308 	and.w	r3, r3, #8
 8009cbc:	2b08      	cmp	r3, #8
 8009cbe:	d12f      	bne.n	8009d20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f88e 	bl	8009df0 <UART_WaitOnFlagUntilTimeout>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d022      	beq.n	8009d20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce2:	e853 3f00 	ldrex	r3, [r3]
 8009ce6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d00:	e841 2300 	strex	r3, r2, [r1]
 8009d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e6      	bne.n	8009cda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2220      	movs	r2, #32
 8009d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e063      	b.n	8009de8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0304 	and.w	r3, r3, #4
 8009d2a:	2b04      	cmp	r3, #4
 8009d2c:	d149      	bne.n	8009dc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d36:	2200      	movs	r2, #0
 8009d38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f857 	bl	8009df0 <UART_WaitOnFlagUntilTimeout>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d03c      	beq.n	8009dc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d50:	e853 3f00 	ldrex	r3, [r3]
 8009d54:	623b      	str	r3, [r7, #32]
   return(result);
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	461a      	mov	r2, r3
 8009d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d66:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d6e:	e841 2300 	strex	r3, r2, [r1]
 8009d72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1e6      	bne.n	8009d48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	3308      	adds	r3, #8
 8009d80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	e853 3f00 	ldrex	r3, [r3]
 8009d88:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f023 0301 	bic.w	r3, r3, #1
 8009d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3308      	adds	r3, #8
 8009d98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d9a:	61fa      	str	r2, [r7, #28]
 8009d9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9e:	69b9      	ldr	r1, [r7, #24]
 8009da0:	69fa      	ldr	r2, [r7, #28]
 8009da2:	e841 2300 	strex	r3, r2, [r1]
 8009da6:	617b      	str	r3, [r7, #20]
   return(result);
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1e5      	bne.n	8009d7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2220      	movs	r2, #32
 8009db2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e012      	b.n	8009de8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2220      	movs	r2, #32
 8009dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2220      	movs	r2, #32
 8009dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3758      	adds	r7, #88	@ 0x58
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	603b      	str	r3, [r7, #0]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e00:	e04f      	b.n	8009ea2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e08:	d04b      	beq.n	8009ea2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e0a:	f7f7 fd75 	bl	80018f8 <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d302      	bcc.n	8009e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d101      	bne.n	8009e24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e04e      	b.n	8009ec2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f003 0304 	and.w	r3, r3, #4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d037      	beq.n	8009ea2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2b80      	cmp	r3, #128	@ 0x80
 8009e36:	d034      	beq.n	8009ea2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b40      	cmp	r3, #64	@ 0x40
 8009e3c:	d031      	beq.n	8009ea2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	f003 0308 	and.w	r3, r3, #8
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d110      	bne.n	8009e6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2208      	movs	r2, #8
 8009e52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 f839 	bl	8009ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2208      	movs	r2, #8
 8009e5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e029      	b.n	8009ec2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	69db      	ldr	r3, [r3, #28]
 8009e74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e7c:	d111      	bne.n	8009ea2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f000 f81f 	bl	8009ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2220      	movs	r2, #32
 8009e92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e00f      	b.n	8009ec2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	69da      	ldr	r2, [r3, #28]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	4013      	ands	r3, r2
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	bf0c      	ite	eq
 8009eb2:	2301      	moveq	r3, #1
 8009eb4:	2300      	movne	r3, #0
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	79fb      	ldrb	r3, [r7, #7]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d0a0      	beq.n	8009e02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b095      	sub	sp, #84	@ 0x54
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ef2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ef4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ef8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009efa:	e841 2300 	strex	r3, r2, [r1]
 8009efe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e6      	bne.n	8009ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	3308      	adds	r3, #8
 8009f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	e853 3f00 	ldrex	r3, [r3]
 8009f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f16:	69fa      	ldr	r2, [r7, #28]
 8009f18:	4b1e      	ldr	r3, [pc, #120]	@ (8009f94 <UART_EndRxTransfer+0xc8>)
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	3308      	adds	r3, #8
 8009f24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f2e:	e841 2300 	strex	r3, r2, [r1]
 8009f32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1e5      	bne.n	8009f06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d118      	bne.n	8009f74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f023 0310 	bic.w	r3, r3, #16
 8009f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	6979      	ldr	r1, [r7, #20]
 8009f66:	69ba      	ldr	r2, [r7, #24]
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e6      	bne.n	8009f42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2220      	movs	r2, #32
 8009f78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f88:	bf00      	nop
 8009f8a:	3754      	adds	r7, #84	@ 0x54
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	effffffe 	.word	0xeffffffe

08009f98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f7ff f854 	bl	800905c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fb4:	bf00      	nop
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b08f      	sub	sp, #60	@ 0x3c
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fca:	2b21      	cmp	r3, #33	@ 0x21
 8009fcc:	d14c      	bne.n	800a068 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d132      	bne.n	800a040 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe0:	6a3b      	ldr	r3, [r7, #32]
 8009fe2:	e853 3f00 	ldrex	r3, [r3]
 8009fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ffa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a000:	e841 2300 	strex	r3, r2, [r1]
 800a004:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1e6      	bne.n	8009fda <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	60bb      	str	r3, [r7, #8]
   return(result);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a020:	633b      	str	r3, [r7, #48]	@ 0x30
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	461a      	mov	r2, r3
 800a028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02a:	61bb      	str	r3, [r7, #24]
 800a02c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	6979      	ldr	r1, [r7, #20]
 800a030:	69ba      	ldr	r2, [r7, #24]
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	613b      	str	r3, [r7, #16]
   return(result);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e6      	bne.n	800a00c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a03e:	e013      	b.n	800a068 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a044:	781a      	ldrb	r2, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a050:	1c5a      	adds	r2, r3, #1
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	3b01      	subs	r3, #1
 800a060:	b29a      	uxth	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a068:	bf00      	nop
 800a06a:	373c      	adds	r7, #60	@ 0x3c
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a074:	b480      	push	{r7}
 800a076:	b091      	sub	sp, #68	@ 0x44
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a082:	2b21      	cmp	r3, #33	@ 0x21
 800a084:	d151      	bne.n	800a12a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d132      	bne.n	800a0f8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09a:	e853 3f00 	ldrex	r3, [r3]
 800a09e:	623b      	str	r3, [r7, #32]
   return(result);
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0b8:	e841 2300 	strex	r3, r2, [r1]
 800a0bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1e6      	bne.n	800a092 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	e853 3f00 	ldrex	r3, [r3]
 800a0d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0e2:	61fb      	str	r3, [r7, #28]
 800a0e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	69b9      	ldr	r1, [r7, #24]
 800a0e8:	69fa      	ldr	r2, [r7, #28]
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	617b      	str	r3, [r7, #20]
   return(result);
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e6      	bne.n	800a0c4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a0f6:	e018      	b.n	800a12a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a0fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a10c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a112:	1c9a      	adds	r2, r3, #2
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a11e:	b29b      	uxth	r3, r3
 800a120:	3b01      	subs	r3, #1
 800a122:	b29a      	uxth	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a12a:	bf00      	nop
 800a12c:	3744      	adds	r7, #68	@ 0x44
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a136:	b480      	push	{r7}
 800a138:	b091      	sub	sp, #68	@ 0x44
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a144:	2b21      	cmp	r3, #33	@ 0x21
 800a146:	d160      	bne.n	800a20a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a14e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a150:	e057      	b.n	800a202 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a158:	b29b      	uxth	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d133      	bne.n	800a1c6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3308      	adds	r3, #8
 800a164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	623b      	str	r3, [r7, #32]
   return(result);
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a174:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3308      	adds	r3, #8
 800a17c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a17e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a180:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e5      	bne.n	800a15e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	e853 3f00 	ldrex	r3, [r3]
 800a19e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b0:	61fb      	str	r3, [r7, #28]
 800a1b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b4:	69b9      	ldr	r1, [r7, #24]
 800a1b6:	69fa      	ldr	r2, [r7, #28]
 800a1b8:	e841 2300 	strex	r3, r2, [r1]
 800a1bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1e6      	bne.n	800a192 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a1c4:	e021      	b.n	800a20a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	69db      	ldr	r3, [r3, #28]
 800a1cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d013      	beq.n	800a1fc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1d8:	781a      	ldrb	r2, [r3, #0]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a1fc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a1fe:	3b01      	subs	r3, #1
 800a200:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a202:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1a4      	bne.n	800a152 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a208:	e7ff      	b.n	800a20a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a20a:	bf00      	nop
 800a20c:	3744      	adds	r7, #68	@ 0x44
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a216:	b480      	push	{r7}
 800a218:	b091      	sub	sp, #68	@ 0x44
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a224:	2b21      	cmp	r3, #33	@ 0x21
 800a226:	d165      	bne.n	800a2f4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a22e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a230:	e05c      	b.n	800a2ec <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a238:	b29b      	uxth	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d133      	bne.n	800a2a6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3308      	adds	r3, #8
 800a244:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	e853 3f00 	ldrex	r3, [r3]
 800a24c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a254:	637b      	str	r3, [r7, #52]	@ 0x34
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3308      	adds	r3, #8
 800a25c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a25e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a260:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a262:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1e5      	bne.n	800a23e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	e853 3f00 	ldrex	r3, [r3]
 800a27e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a286:	633b      	str	r3, [r7, #48]	@ 0x30
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	461a      	mov	r2, r3
 800a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a294:	6979      	ldr	r1, [r7, #20]
 800a296:	69ba      	ldr	r2, [r7, #24]
 800a298:	e841 2300 	strex	r3, r2, [r1]
 800a29c:	613b      	str	r3, [r7, #16]
   return(result);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e6      	bne.n	800a272 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a2a4:	e026      	b.n	800a2f4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	69db      	ldr	r3, [r3, #28]
 800a2ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d018      	beq.n	800a2e6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2b8:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2c8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2ce:	1c9a      	adds	r2, r3, #2
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a2e6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a2ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d19f      	bne.n	800a232 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a2f2:	e7ff      	b.n	800a2f4 <UART_TxISR_16BIT_FIFOEN+0xde>
 800a2f4:	bf00      	nop
 800a2f6:	3744      	adds	r7, #68	@ 0x44
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b088      	sub	sp, #32
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	60bb      	str	r3, [r7, #8]
   return(result);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a31c:	61fb      	str	r3, [r7, #28]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	61bb      	str	r3, [r7, #24]
 800a328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32a:	6979      	ldr	r1, [r7, #20]
 800a32c:	69ba      	ldr	r2, [r7, #24]
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	613b      	str	r3, [r7, #16]
   return(result);
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e6      	bne.n	800a308 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7fe fe7d 	bl	8009048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a34e:	bf00      	nop
 800a350:	3720      	adds	r7, #32
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a35e:	bf00      	nop
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a372:	bf00      	nop
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a386:	bf00      	nop
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a392:	b480      	push	{r7}
 800a394:	b085      	sub	sp, #20
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d101      	bne.n	800a3a8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	e027      	b.n	800a3f8 <HAL_UARTEx_DisableFifoMode+0x66>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2224      	movs	r2, #36	@ 0x24
 800a3b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f022 0201 	bic.w	r2, r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a3d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a414:	2b01      	cmp	r3, #1
 800a416:	d101      	bne.n	800a41c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a418:	2302      	movs	r3, #2
 800a41a:	e02d      	b.n	800a478 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2224      	movs	r2, #36	@ 0x24
 800a428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f022 0201 	bic.w	r2, r2, #1
 800a442:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	430a      	orrs	r2, r1
 800a456:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f84f 	bl	800a4fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2220      	movs	r2, #32
 800a46a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a490:	2b01      	cmp	r3, #1
 800a492:	d101      	bne.n	800a498 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a494:	2302      	movs	r3, #2
 800a496:	e02d      	b.n	800a4f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2224      	movs	r2, #36	@ 0x24
 800a4a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0201 	bic.w	r2, r2, #1
 800a4be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f811 	bl	800a4fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d108      	bne.n	800a51e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a51c:	e031      	b.n	800a582 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a51e:	2310      	movs	r3, #16
 800a520:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a522:	2310      	movs	r3, #16
 800a524:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	0e5b      	lsrs	r3, r3, #25
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	f003 0307 	and.w	r3, r3, #7
 800a534:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	0f5b      	lsrs	r3, r3, #29
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	f003 0307 	and.w	r3, r3, #7
 800a544:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a546:	7bbb      	ldrb	r3, [r7, #14]
 800a548:	7b3a      	ldrb	r2, [r7, #12]
 800a54a:	4911      	ldr	r1, [pc, #68]	@ (800a590 <UARTEx_SetNbDataToProcess+0x94>)
 800a54c:	5c8a      	ldrb	r2, [r1, r2]
 800a54e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a552:	7b3a      	ldrb	r2, [r7, #12]
 800a554:	490f      	ldr	r1, [pc, #60]	@ (800a594 <UARTEx_SetNbDataToProcess+0x98>)
 800a556:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a558:	fb93 f3f2 	sdiv	r3, r3, r2
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a564:	7bfb      	ldrb	r3, [r7, #15]
 800a566:	7b7a      	ldrb	r2, [r7, #13]
 800a568:	4909      	ldr	r1, [pc, #36]	@ (800a590 <UARTEx_SetNbDataToProcess+0x94>)
 800a56a:	5c8a      	ldrb	r2, [r1, r2]
 800a56c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a570:	7b7a      	ldrb	r2, [r7, #13]
 800a572:	4908      	ldr	r1, [pc, #32]	@ (800a594 <UARTEx_SetNbDataToProcess+0x98>)
 800a574:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a576:	fb93 f3f2 	sdiv	r3, r3, r2
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a582:	bf00      	nop
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	0800fe10 	.word	0x0800fe10
 800a594:	0800fe18 	.word	0x0800fe18

0800a598 <at_echo_off>:
{
	mobile_sendCommand("\r\nATE1\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_echo_off (char* recived)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nATE0\r\n", COMMAND_GENERAL_DELAY, recived);
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	f240 5114 	movw	r1, #1300	@ 0x514
 800a5a6:	4803      	ldr	r0, [pc, #12]	@ (800a5b4 <at_echo_off+0x1c>)
 800a5a8:	f000 f8d8 	bl	800a75c <mobile_sendCommand>
}
 800a5ac:	bf00      	nop
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	0800fa78 	.word	0x0800fa78

0800a5b8 <at_power_on>:
	fprintf(buffer,"\r\nAT@GPIOGET=%d\r\n",gpio);
	mobile_sendCommand(buffer, COMMAND_GENERAL_DELAY, recived);
}

void at_power_on (char* recived)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
	gnss_sendCommand("\r\nAT+CGNSPWR=1\r\n", COMMAND_GENERAL_DELAY, recived);
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	f240 5114 	movw	r1, #1300	@ 0x514
 800a5c6:	4803      	ldr	r0, [pc, #12]	@ (800a5d4 <at_power_on+0x1c>)
 800a5c8:	f000 f8e4 	bl	800a794 <gnss_sendCommand>
}
 800a5cc:	bf00      	nop
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	0800fab0 	.word	0x0800fab0

0800a5d8 <at_power_state>:
void at_power_state (char* recived)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
	gnss_sendCommand("\r\nAT+CGNSPWR?\r\n", COMMAND_GENERAL_DELAY, recived);
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	f240 5114 	movw	r1, #1300	@ 0x514
 800a5e6:	4803      	ldr	r0, [pc, #12]	@ (800a5f4 <at_power_state+0x1c>)
 800a5e8:	f000 f8d4 	bl	800a794 <gnss_sendCommand>
}
 800a5ec:	bf00      	nop
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	0800fac4 	.word	0x0800fac4

0800a5f8 <at_power_off>:

void at_power_off (char* recived)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
	gnss_sendCommand("\r\nAT+CGNSPWR=0\r\n", COMMAND_GENERAL_DELAY, recived);
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	f240 5114 	movw	r1, #1300	@ 0x514
 800a606:	4803      	ldr	r0, [pc, #12]	@ (800a614 <at_power_off+0x1c>)
 800a608:	f000 f8c4 	bl	800a794 <gnss_sendCommand>
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	0800fad4 	.word	0x0800fad4

0800a618 <at_gnss_signal>:
}



void at_gnss_signal (char* recived)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
	gnss_sendCommand("\r\nAT+CGNSINF\r\n", COMMAND_GENERAL_DELAY, recived);
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	f240 5114 	movw	r1, #1300	@ 0x514
 800a626:	4803      	ldr	r0, [pc, #12]	@ (800a634 <at_gnss_signal+0x1c>)
 800a628:	f000 f8b4 	bl	800a794 <gnss_sendCommand>
}
 800a62c:	bf00      	nop
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	0800faf0 	.word	0x0800faf0

0800a638 <at_network_mode>:
{
	mobile_sendCommand("\r\nAT+CPIN?\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_network_mode (char* recived)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CNMP=38\r\n", COMMAND_GENERAL_DELAY, recived);
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	f240 5114 	movw	r1, #1300	@ 0x514
 800a646:	4803      	ldr	r0, [pc, #12]	@ (800a654 <at_network_mode+0x1c>)
 800a648:	f000 f888 	bl	800a75c <mobile_sendCommand>
}
 800a64c:	bf00      	nop
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	0800fb10 	.word	0x0800fb10

0800a658 <at_set_band>:

void at_set_band(char* recived)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CMNB=3\r\n", COMMAND_GENERAL_DELAY, recived);
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	f240 5114 	movw	r1, #1300	@ 0x514
 800a666:	4803      	ldr	r0, [pc, #12]	@ (800a674 <at_set_band+0x1c>)
 800a668:	f000 f878 	bl	800a75c <mobile_sendCommand>
}
 800a66c:	bf00      	nop
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	0800fb20 	.word	0x0800fb20

0800a678 <at_gprs_init>:
{
	mobile_sendCommand("\r\nAT+CBANDCFG=\"CAT-M\",3,20\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_gprs_init (char* recived)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CGACT=1,1\r\n", COMMAND_GENERAL_DELAY, recived);
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	f240 5114 	movw	r1, #1300	@ 0x514
 800a686:	4803      	ldr	r0, [pc, #12]	@ (800a694 <at_gprs_init+0x1c>)
 800a688:	f000 f868 	bl	800a75c <mobile_sendCommand>
}
 800a68c:	bf00      	nop
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	0800fb60 	.word	0x0800fb60

0800a698 <at_network_attach_request>:
	fprintf(buffer,"\r\nAT%PINGCMD=0,%s,%d\r\n",MONGO_DB_IP,count);
	mobile_sendCommand(buffer, COMMAND_GENERAL_DELAY, recived);
}

void at_network_attach_request (char* recived)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
	mobile_sendCommand("\r\nAT+CGATT=1\r\n", COMMAND_GENERAL_DELAY, recived);
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	f240 5114 	movw	r1, #1300	@ 0x514
 800a6a6:	4803      	ldr	r0, [pc, #12]	@ (800a6b4 <at_network_attach_request+0x1c>)
 800a6a8:	f000 f858 	bl	800a75c <mobile_sendCommand>
}
 800a6ac:	bf00      	nop
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	0800fbac 	.word	0x0800fbac

0800a6b8 <at_init_http_connection>:
{
	mobile_sendCommand("\r\nAT+CIPSRIP=1\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_init_http_connection (char* recived)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]

	//mobile_sendCommand("\r\nAT+SAPBR=1,1\r\n", COMMAND_GENERAL_DELAY, recived);

	//mobile_sendCommand("\r\nAT+SAPBR=2,1\r\n", COMMAND_GENERAL_DELAY, recived);

	mobile_sendCommand("\r\nAT+HTTPINIT\r\n", COMMAND_GENERAL_DELAY, recived);
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	f240 5114 	movw	r1, #1300	@ 0x514
 800a6c6:	4806      	ldr	r0, [pc, #24]	@ (800a6e0 <at_init_http_connection+0x28>)
 800a6c8:	f000 f848 	bl	800a75c <mobile_sendCommand>

	mobile_sendCommand("\r\nAT+HTTPPARA=\"CID\",1\r\n", COMMAND_GENERAL_DELAY, recived);
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	f240 5114 	movw	r1, #1300	@ 0x514
 800a6d2:	4804      	ldr	r0, [pc, #16]	@ (800a6e4 <at_init_http_connection+0x2c>)
 800a6d4:	f000 f842 	bl	800a75c <mobile_sendCommand>

}
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	0800fbec 	.word	0x0800fbec
 800a6e4:	0800fbfc 	.word	0x0800fbfc

0800a6e8 <at_lte_send>:
{
	mobile_sendCommand("\r\nAT+CIPHEAD=1\r\n", COMMAND_GENERAL_DELAY, recived);
}

void at_lte_send(char* site, char* to_send,char* recived)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b0a4      	sub	sp, #144	@ 0x90
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
	char buffer[MAX_LTE_MSG_LEN];
	sprintf(buffer,"AT+HTTPPARA=\"URL\",\"%s%s\"",site,to_send);
 800a6f4:	f107 0010 	add.w	r0, r7, #16
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4907      	ldr	r1, [pc, #28]	@ (800a71c <at_lte_send+0x34>)
 800a6fe:	f001 f9fb 	bl	800baf8 <siprintf>
	mobile_sendCommand(buffer, 5000, recived);
 800a702:	f107 0310 	add.w	r3, r7, #16
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a70c:	4618      	mov	r0, r3
 800a70e:	f000 f825 	bl	800a75c <mobile_sendCommand>
}
 800a712:	bf00      	nop
 800a714:	3790      	adds	r7, #144	@ 0x90
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	0800fc28 	.word	0x0800fc28

0800a720 <at_network_pdp_activate>:


//nbiot
void at_network_pdp_activate(char* recived)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b092      	sub	sp, #72	@ 0x48
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
	char buffer[64];
	fprintf(buffer,"\r\nAT+CGDCONT=1,\"%s\",\"%s\"\r\n",MONGO_DB_PDP_TYPE,SIMBASE_APN);
 800a728:	f107 0008 	add.w	r0, r7, #8
 800a72c:	4b08      	ldr	r3, [pc, #32]	@ (800a750 <at_network_pdp_activate+0x30>)
 800a72e:	4a09      	ldr	r2, [pc, #36]	@ (800a754 <at_network_pdp_activate+0x34>)
 800a730:	4909      	ldr	r1, [pc, #36]	@ (800a758 <at_network_pdp_activate+0x38>)
 800a732:	f001 f9b1 	bl	800ba98 <fiprintf>
	mobile_sendCommand(buffer, COMMAND_GENERAL_DELAY, recived);
 800a736:	f107 0308 	add.w	r3, r7, #8
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	f240 5114 	movw	r1, #1300	@ 0x514
 800a740:	4618      	mov	r0, r3
 800a742:	f000 f80b 	bl	800a75c <mobile_sendCommand>

}
 800a746:	bf00      	nop
 800a748:	3748      	adds	r7, #72	@ 0x48
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	0800fbbc 	.word	0x0800fbbc
 800a754:	0800fc44 	.word	0x0800fc44
 800a758:	0800fc48 	.word	0x0800fc48

0800a75c <mobile_sendCommand>:
}

//----------------------------------------------------------------------------------------

void mobile_sendCommand(char * command, unsigned int timeout, char * recived)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(MOBILE_COMMS_UART, command, strlen(command)); //Transmits
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7f5 fe09 	bl	8000380 <strlen>
 800a76e:	4603      	mov	r3, r0
 800a770:	b29b      	uxth	r3, r3
 800a772:	461a      	mov	r2, r3
 800a774:	68f9      	ldr	r1, [r7, #12]
 800a776:	4806      	ldr	r0, [pc, #24]	@ (800a790 <mobile_sendCommand+0x34>)
 800a778:	f7fd fffc 	bl	8008774 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(MOBILE_COMMS_UART, recived, 32, timeout); //Reads the module
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2220      	movs	r2, #32
 800a780:	6879      	ldr	r1, [r7, #4]
 800a782:	4803      	ldr	r0, [pc, #12]	@ (800a790 <mobile_sendCommand+0x34>)
 800a784:	f7fd ff2e 	bl	80085e4 <HAL_UART_Receive>
}
 800a788:	bf00      	nop
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	240002bc 	.word	0x240002bc

0800a794 <gnss_sendCommand>:

void gnss_sendCommand(char * command, unsigned int timeout, char * recived)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(GNSS_UART, command, strlen(command)); //Transmits
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f7f5 fded 	bl	8000380 <strlen>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	68f9      	ldr	r1, [r7, #12]
 800a7ae:	4806      	ldr	r0, [pc, #24]	@ (800a7c8 <gnss_sendCommand+0x34>)
 800a7b0:	f7fd ffe0 	bl	8008774 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(GNSS_UART, recived, 32, timeout); //Reads the module
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	4803      	ldr	r0, [pc, #12]	@ (800a7c8 <gnss_sendCommand+0x34>)
 800a7bc:	f7fd ff12 	bl	80085e4 <HAL_UART_Receive>
}
 800a7c0:	bf00      	nop
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	240002bc 	.word	0x240002bc

0800a7cc <init_package_data>:
package_data_t package_data[2];
char package_data_index = 0;


void init_package_data(void)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	af00      	add	r7, sp, #0
	package_data[0].packege_number = 0;
 800a7d0:	4b08      	ldr	r3, [pc, #32]	@ (800a7f4 <init_package_data+0x28>)
 800a7d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f8a3 27ac 	strh.w	r2, [r3, #1964]	@ 0x7ac
	package_data[1].packege_number = 0;
 800a7dc:	4b05      	ldr	r3, [pc, #20]	@ (800a7f4 <init_package_data+0x28>)
 800a7de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f8a3 2f5c 	strh.w	r2, [r3, #3932]	@ 0xf5c
}
 800a7e8:	bf00      	nop
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	240003e8 	.word	0x240003e8

0800a7f8 <write_package_data>:

package_data_t* write_package_data()
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	af00      	add	r7, sp, #0
    return &package_data[package_data_index];
 800a7fc:	4b06      	ldr	r3, [pc, #24]	@ (800a818 <write_package_data+0x20>)
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	461a      	mov	r2, r3
 800a802:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 800a806:	fb02 f303 	mul.w	r3, r2, r3
 800a80a:	4a04      	ldr	r2, [pc, #16]	@ (800a81c <write_package_data+0x24>)
 800a80c:	4413      	add	r3, r2
}
 800a80e:	4618      	mov	r0, r3
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	24003348 	.word	0x24003348
 800a81c:	240003e8 	.word	0x240003e8

0800a820 <manager_init>:
uint64_t prev_imu_timer = 0;
uint64_t prev_temperature_timer = 0;
uint64_t prev_send_timer = 0;

void manager_init(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
	//Memory
	init_package_data();
 800a824:	f7ff ffd2 	bl	800a7cc <init_package_data>
	//Batteries
	battery_init();
 800a828:	f000 f868 	bl	800a8fc <battery_init>
	//Temperature
	temperature_init();
 800a82c:	f000 fa46 	bl	800acbc <temperature_init>
	//CNSS
	//cnss_init();
	//IMU
	imu_init();
 800a830:	f000 f99a 	bl	800ab68 <imu_init>
	//NB_IoT
	nb_iot_init();
 800a834:	f000 f9f4 	bl	800ac20 <nb_iot_init>
	//SD_CARD
	sd_card_init();
 800a838:	f000 fa32 	bl	800aca0 <sd_card_init>

}
 800a83c:	bf00      	nop
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <manager_update>:
void manager_update(void)
{
 800a840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	af00      	add	r7, sp, #0
	current_time = extended_tick;
 800a846:	4927      	ldr	r1, [pc, #156]	@ (800a8e4 <manager_update+0xa4>)
 800a848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a84c:	4e26      	ldr	r6, [pc, #152]	@ (800a8e8 <manager_update+0xa8>)
 800a84e:	e9c6 0100 	strd	r0, r1, [r6]

	if (current_time - prev_imu_timer >= IMU_SAMPLE_PERIOD_UC)
 800a852:	4925      	ldr	r1, [pc, #148]	@ (800a8e8 <manager_update+0xa8>)
 800a854:	e9d1 ab00 	ldrd	sl, fp, [r1]
 800a858:	4924      	ldr	r1, [pc, #144]	@ (800a8ec <manager_update+0xac>)
 800a85a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a85e:	ebba 0200 	subs.w	r2, sl, r0
 800a862:	eb6b 0301 	sbc.w	r3, fp, r1
 800a866:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800a86a:	428a      	cmp	r2, r1
 800a86c:	f173 0300 	sbcs.w	r3, r3, #0
 800a870:	d307      	bcc.n	800a882 <manager_update+0x42>
	{
		//IMU
		imu_update(); //not tested
 800a872:	f000 f9a7 	bl	800abc4 <imu_update>
		prev_imu_timer = current_time;
 800a876:	4b1c      	ldr	r3, [pc, #112]	@ (800a8e8 <manager_update+0xa8>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	491b      	ldr	r1, [pc, #108]	@ (800a8ec <manager_update+0xac>)
 800a87e:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (current_time - prev_temperature_timer >= TEMP_SAMPLE_PERIOD_UC)
 800a882:	4b19      	ldr	r3, [pc, #100]	@ (800a8e8 <manager_update+0xa8>)
 800a884:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a888:	4b19      	ldr	r3, [pc, #100]	@ (800a8f0 <manager_update+0xb0>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	ebb0 0802 	subs.w	r8, r0, r2
 800a892:	eb61 0903 	sbc.w	r9, r1, r3
 800a896:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800a89a:	4598      	cmp	r8, r3
 800a89c:	f179 0300 	sbcs.w	r3, r9, #0
 800a8a0:	d307      	bcc.n	800a8b2 <manager_update+0x72>
	{
		//Temperature
		temperature_update();
 800a8a2:	f000 fa12 	bl	800acca <temperature_update>
		prev_temperature_timer = current_time;
 800a8a6:	4b10      	ldr	r3, [pc, #64]	@ (800a8e8 <manager_update+0xa8>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	4910      	ldr	r1, [pc, #64]	@ (800a8f0 <manager_update+0xb0>)
 800a8ae:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (current_time - prev_send_timer >= SEND_SAMPLE_PERIOD_UC)
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e8 <manager_update+0xa8>)
 800a8b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f4 <manager_update+0xb4>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	1a84      	subs	r4, r0, r2
 800a8c0:	eb61 0503 	sbc.w	r5, r1, r3
 800a8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a8f8 <manager_update+0xb8>)
 800a8c6:	429c      	cmp	r4, r3
 800a8c8:	f175 0300 	sbcs.w	r3, r5, #0
 800a8cc:	d307      	bcc.n	800a8de <manager_update+0x9e>
	{
		//Batteries
		battery_update(); //verified
 800a8ce:	f000 f81d 	bl	800a90c <battery_update>
		//CNSS
		cnss_update(); //working but not tested
 800a8d2:	f000 f849 	bl	800a968 <cnss_update>
		//NB_IoT
		nb_iot_update(); //not working
 800a8d6:	f000 f9cf 	bl	800ac78 <nb_iot_update>
		//SD_CARD
		sd_card_update();
 800a8da:	f000 f9e8 	bl	800acae <sd_card_update>
	}

}
 800a8de:	bf00      	nop
 800a8e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e4:	240002b0 	.word	0x240002b0
 800a8e8:	24003350 	.word	0x24003350
 800a8ec:	24003358 	.word	0x24003358
 800a8f0:	24003360 	.word	0x24003360
 800a8f4:	24003368 	.word	0x24003368
 800a8f8:	000927c0 	.word	0x000927c0

0800a8fc <battery_init>:
 *      Author: viny
 */
#include "battery_behavior.h"

void battery_init (void)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	af00      	add	r7, sp, #0

}
 800a900:	bf00      	nop
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
	...

0800a90c <battery_update>:

void battery_update (void)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af00      	add	r7, sp, #0
	//Start Conversion
	HAL_ADC_Start(&hadc1);
 800a912:	4812      	ldr	r0, [pc, #72]	@ (800a95c <battery_update+0x50>)
 800a914:	f7f7 fbc2 	bl	800209c <HAL_ADC_Start>

	//Get and Store Conversion
	package_data_t* temp = write_package_data();
 800a918:	f7ff ff6e 	bl	800a7f8 <write_package_data>
 800a91c:	6178      	str	r0, [r7, #20]
	temp->power_level=
			BATTERY_MAX_VOLTAGE_OVER_10BIT * HAL_ADC_GetValue(&hadc1) * 100;
 800a91e:	480f      	ldr	r0, [pc, #60]	@ (800a95c <battery_update+0x50>)
 800a920:	f7f7 fc86 	bl	8002230 <HAL_ADC_GetValue>
	temp->power_level=
 800a924:	f04f 0200 	mov.w	r2, #0
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	601a      	str	r2, [r3, #0]
	char buffer[16];
	sprintf(buffer,"Batt:%d\n\n",(int)temp->power_level);
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	edd3 7a00 	vldr	s15, [r3]
 800a932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a936:	1d3b      	adds	r3, r7, #4
 800a938:	ee17 2a90 	vmov	r2, s15
 800a93c:	4908      	ldr	r1, [pc, #32]	@ (800a960 <battery_update+0x54>)
 800a93e:	4618      	mov	r0, r3
 800a940:	f001 f8da 	bl	800baf8 <siprintf>
	HAL_UART_Transmit(&huart3, buffer, 8, -1);
 800a944:	1d39      	adds	r1, r7, #4
 800a946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a94a:	2208      	movs	r2, #8
 800a94c:	4805      	ldr	r0, [pc, #20]	@ (800a964 <battery_update+0x58>)
 800a94e:	f7fd fdbb 	bl	80084c8 <HAL_UART_Transmit>
}
 800a952:	bf00      	nop
 800a954:	3718      	adds	r7, #24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	240001f4 	.word	0x240001f4
 800a960:	0800fc7c 	.word	0x0800fc7c
 800a964:	24000350 	.word	0x24000350

0800a968 <cnss_update>:


}

void cnss_update (void)
{
 800a968:	b5b0      	push	{r4, r5, r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af04      	add	r7, sp, #16


	do{
		memset(recived_buffer_debug, 0, DEBUG_ANSWER_LEN);
 800a96e:	2240      	movs	r2, #64	@ 0x40
 800a970:	2100      	movs	r1, #0
 800a972:	4845      	ldr	r0, [pc, #276]	@ (800aa88 <cnss_update+0x120>)
 800a974:	f001 f953 	bl	800bc1e <memset>
		at_power_state(recived_buffer_debug); //ask if the module is ready
 800a978:	4843      	ldr	r0, [pc, #268]	@ (800aa88 <cnss_update+0x120>)
 800a97a:	f7ff fe2d 	bl	800a5d8 <at_power_state>
		HAL_Delay(100);
 800a97e:	2064      	movs	r0, #100	@ 0x64
 800a980:	f7f6 ffc6 	bl	8001910 <HAL_Delay>
		memset(buffer, 0, sizeof buffer);
 800a984:	2240      	movs	r2, #64	@ 0x40
 800a986:	2100      	movs	r1, #0
 800a988:	4840      	ldr	r0, [pc, #256]	@ (800aa8c <cnss_update+0x124>)
 800a98a:	f001 f948 	bl	800bc1e <memset>
		sprintf(buffer,"\r\nVerification:%s\r\n",recived_buffer_debug);
 800a98e:	4a3e      	ldr	r2, [pc, #248]	@ (800aa88 <cnss_update+0x120>)
 800a990:	493f      	ldr	r1, [pc, #252]	@ (800aa90 <cnss_update+0x128>)
 800a992:	483e      	ldr	r0, [pc, #248]	@ (800aa8c <cnss_update+0x124>)
 800a994:	f001 f8b0 	bl	800baf8 <siprintf>

		HAL_UART_Transmit(DEBUG_UART, buffer, 32,-1);
 800a998:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a99c:	2220      	movs	r2, #32
 800a99e:	493b      	ldr	r1, [pc, #236]	@ (800aa8c <cnss_update+0x124>)
 800a9a0:	483c      	ldr	r0, [pc, #240]	@ (800aa94 <cnss_update+0x12c>)
 800a9a2:	f7fd fd91 	bl	80084c8 <HAL_UART_Transmit>

		sscanf(recived_buffer_debug,"\r\n+CGNSPWR: %d",&gnss_run_status);
 800a9a6:	4a3c      	ldr	r2, [pc, #240]	@ (800aa98 <cnss_update+0x130>)
 800a9a8:	493c      	ldr	r1, [pc, #240]	@ (800aa9c <cnss_update+0x134>)
 800a9aa:	4837      	ldr	r0, [pc, #220]	@ (800aa88 <cnss_update+0x120>)
 800a9ac:	f001 f8c6 	bl	800bb3c <siscanf>
	}while(!(gnss_run_status || retry_delay()));
 800a9b0:	4b39      	ldr	r3, [pc, #228]	@ (800aa98 <cnss_update+0x130>)
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d104      	bne.n	800a9c2 <cnss_update+0x5a>
 800a9b8:	f000 f87c 	bl	800aab4 <retry_delay>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0d5      	beq.n	800a96e <cnss_update+0x6>

	memset(recived_buffer_gnss, 0, GNSS_ANSWER_LEN);
 800a9c2:	2260      	movs	r2, #96	@ 0x60
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	4836      	ldr	r0, [pc, #216]	@ (800aaa0 <cnss_update+0x138>)
 800a9c8:	f001 f929 	bl	800bc1e <memset>

	at_gnss_signal(recived_buffer_gnss);
 800a9cc:	4834      	ldr	r0, [pc, #208]	@ (800aaa0 <cnss_update+0x138>)
 800a9ce:	f7ff fe23 	bl	800a618 <at_gnss_signal>

	package_data_t * gnss_info = write_package_data();
 800a9d2:	f7ff ff11 	bl	800a7f8 <write_package_data>
 800a9d6:	6078      	str	r0, [r7, #4]
	char dummy;
	sscanf(recived_buffer_gnss,
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	f241 73a4 	movw	r3, #6052	@ 0x17a4
 800a9de:	4413      	add	r3, r2
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	f502 52bd 	add.w	r2, r2, #6048	@ 0x17a0
 800a9e6:	1cf9      	adds	r1, r7, #3
 800a9e8:	9202      	str	r2, [sp, #8]
 800a9ea:	9301      	str	r3, [sp, #4]
 800a9ec:	4b2d      	ldr	r3, [pc, #180]	@ (800aaa4 <cnss_update+0x13c>)
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4a29      	ldr	r2, [pc, #164]	@ (800aa98 <cnss_update+0x130>)
 800a9f4:	492c      	ldr	r1, [pc, #176]	@ (800aaa8 <cnss_update+0x140>)
 800a9f6:	482a      	ldr	r0, [pc, #168]	@ (800aaa0 <cnss_update+0x138>)
 800a9f8:	f001 f8a0 	bl	800bb3c <siscanf>
			,&dummy
			,utc_temp
			,&gnss_info->gnss.latitude
			,&gnss_info->gnss.longitude);

	sscanf(utc_temp, "%4d%2d%2d%2d%2d%2d"
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	1d1c      	adds	r4, r3, #4
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f103 0508 	add.w	r5, r3, #8
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	330c      	adds	r3, #12
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	3210      	adds	r2, #16
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	3114      	adds	r1, #20
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	3018      	adds	r0, #24
 800aa16:	9003      	str	r0, [sp, #12]
 800aa18:	9102      	str	r1, [sp, #8]
 800aa1a:	9201      	str	r2, [sp, #4]
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	462b      	mov	r3, r5
 800aa20:	4622      	mov	r2, r4
 800aa22:	4922      	ldr	r1, [pc, #136]	@ (800aaac <cnss_update+0x144>)
 800aa24:	481f      	ldr	r0, [pc, #124]	@ (800aaa4 <cnss_update+0x13c>)
 800aa26:	f001 f889 	bl	800bb3c <siscanf>
			, &gnss_info->utc.minute
			, &gnss_info->utc.second);

	//debug
	//HAL_Delay(1000);
	memset(recived_buffer_gnss, 0, GNSS_ANSWER_LEN);
 800aa2a:	2260      	movs	r2, #96	@ 0x60
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	481c      	ldr	r0, [pc, #112]	@ (800aaa0 <cnss_update+0x138>)
 800aa30:	f001 f8f5 	bl	800bc1e <memset>
	memset(buffer, 0, sizeof (buffer));
 800aa34:	2240      	movs	r2, #64	@ 0x40
 800aa36:	2100      	movs	r1, #0
 800aa38:	4814      	ldr	r0, [pc, #80]	@ (800aa8c <cnss_update+0x124>)
 800aa3a:	f001 f8f0 	bl	800bc1e <memset>
	sprintf(buffer,"\r\nGNSS:\n\tLat:%f\n\tLong:%f\r\n"
			,gnss_info->gnss.latitude
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa44:	f203 73a4 	addw	r3, r3, #1956	@ 0x7a4
 800aa48:	edd3 7a00 	vldr	s15, [r3]
	sprintf(buffer,"\r\nGNSS:\n\tLat:%f\n\tLong:%f\r\n"
 800aa4c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			,gnss_info->gnss.longitude);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa56:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 800aa5a:	edd3 7a00 	vldr	s15, [r3]
	sprintf(buffer,"\r\nGNSS:\n\tLat:%f\n\tLong:%f\r\n"
 800aa5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800aa62:	ed8d 7b00 	vstr	d7, [sp]
 800aa66:	ec53 2b16 	vmov	r2, r3, d6
 800aa6a:	4911      	ldr	r1, [pc, #68]	@ (800aab0 <cnss_update+0x148>)
 800aa6c:	4807      	ldr	r0, [pc, #28]	@ (800aa8c <cnss_update+0x124>)
 800aa6e:	f001 f843 	bl	800baf8 <siprintf>

	HAL_UART_Transmit(DEBUG_UART, buffer,GNSS_ANSWER_LEN,1000);
 800aa72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800aa76:	2260      	movs	r2, #96	@ 0x60
 800aa78:	4904      	ldr	r1, [pc, #16]	@ (800aa8c <cnss_update+0x124>)
 800aa7a:	4806      	ldr	r0, [pc, #24]	@ (800aa94 <cnss_update+0x12c>)
 800aa7c:	f7fd fd24 	bl	80084c8 <HAL_UART_Transmit>

}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bdb0      	pop	{r4, r5, r7, pc}
 800aa88:	240033d0 	.word	0x240033d0
 800aa8c:	24003410 	.word	0x24003410
 800aa90:	0800fcc4 	.word	0x0800fcc4
 800aa94:	24000350 	.word	0x24000350
 800aa98:	24003450 	.word	0x24003450
 800aa9c:	0800fcd8 	.word	0x0800fcd8
 800aaa0:	24003370 	.word	0x24003370
 800aaa4:	24003454 	.word	0x24003454
 800aaa8:	0800fce8 	.word	0x0800fce8
 800aaac:	0800fd08 	.word	0x0800fd08
 800aab0:	0800fd1c 	.word	0x0800fd1c

0800aab4 <retry_delay>:

char retry_delay()
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(DEBUG_UART, CONNECTION_FAILED_MSG, sizeof(CONNECTION_FAILED_MSG),-1);
 800aab8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aabc:	2213      	movs	r2, #19
 800aabe:	4923      	ldr	r1, [pc, #140]	@ (800ab4c <retry_delay+0x98>)
 800aac0:	4823      	ldr	r0, [pc, #140]	@ (800ab50 <retry_delay+0x9c>)
 800aac2:	f7fd fd01 	bl	80084c8 <HAL_UART_Transmit>
	HAL_Delay(100);
 800aac6:	2064      	movs	r0, #100	@ 0x64
 800aac8:	f7f6 ff22 	bl	8001910 <HAL_Delay>
	HAL_UART_Transmit(DEBUG_UART, "Retrying GNSS data\n",sizeof("Retrying GNSS data\n"),-1);
 800aacc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aad0:	2214      	movs	r2, #20
 800aad2:	4920      	ldr	r1, [pc, #128]	@ (800ab54 <retry_delay+0xa0>)
 800aad4:	481e      	ldr	r0, [pc, #120]	@ (800ab50 <retry_delay+0x9c>)
 800aad6:	f7fd fcf7 	bl	80084c8 <HAL_UART_Transmit>


	memset(buffer, 0, sizeof buffer);
 800aada:	2240      	movs	r2, #64	@ 0x40
 800aadc:	2100      	movs	r1, #0
 800aade:	481e      	ldr	r0, [pc, #120]	@ (800ab58 <retry_delay+0xa4>)
 800aae0:	f001 f89d 	bl	800bc1e <memset>
	memset(recived_buffer_debug, 0, DEBUG_ANSWER_LEN);
 800aae4:	2240      	movs	r2, #64	@ 0x40
 800aae6:	2100      	movs	r1, #0
 800aae8:	481c      	ldr	r0, [pc, #112]	@ (800ab5c <retry_delay+0xa8>)
 800aaea:	f001 f898 	bl	800bc1e <memset>
	at_power_off(recived_buffer_debug); // turn on the GNSS
 800aaee:	481b      	ldr	r0, [pc, #108]	@ (800ab5c <retry_delay+0xa8>)
 800aaf0:	f7ff fd82 	bl	800a5f8 <at_power_off>
	sprintf(buffer,"Turning OFF:%s\n",recived_buffer_debug);
 800aaf4:	4a19      	ldr	r2, [pc, #100]	@ (800ab5c <retry_delay+0xa8>)
 800aaf6:	491a      	ldr	r1, [pc, #104]	@ (800ab60 <retry_delay+0xac>)
 800aaf8:	4817      	ldr	r0, [pc, #92]	@ (800ab58 <retry_delay+0xa4>)
 800aafa:	f000 fffd 	bl	800baf8 <siprintf>
	HAL_UART_Transmit(DEBUG_UART, buffer, 32, -1);
 800aafe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab02:	2220      	movs	r2, #32
 800ab04:	4914      	ldr	r1, [pc, #80]	@ (800ab58 <retry_delay+0xa4>)
 800ab06:	4812      	ldr	r0, [pc, #72]	@ (800ab50 <retry_delay+0x9c>)
 800ab08:	f7fd fcde 	bl	80084c8 <HAL_UART_Transmit>

	HAL_Delay(GNSS_RETRY_CONNECTION_DELAY);
 800ab0c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800ab10:	f7f6 fefe 	bl	8001910 <HAL_Delay>

	memset(buffer, 0, sizeof buffer);
 800ab14:	2240      	movs	r2, #64	@ 0x40
 800ab16:	2100      	movs	r1, #0
 800ab18:	480f      	ldr	r0, [pc, #60]	@ (800ab58 <retry_delay+0xa4>)
 800ab1a:	f001 f880 	bl	800bc1e <memset>
	memset(recived_buffer_debug, 0, DEBUG_ANSWER_LEN);
 800ab1e:	2240      	movs	r2, #64	@ 0x40
 800ab20:	2100      	movs	r1, #0
 800ab22:	480e      	ldr	r0, [pc, #56]	@ (800ab5c <retry_delay+0xa8>)
 800ab24:	f001 f87b 	bl	800bc1e <memset>
	at_power_on(recived_buffer_debug); // turn on the GNSS
 800ab28:	480c      	ldr	r0, [pc, #48]	@ (800ab5c <retry_delay+0xa8>)
 800ab2a:	f7ff fd45 	bl	800a5b8 <at_power_on>
	sprintf(buffer,"Turning ON:%s\n",recived_buffer_debug);
 800ab2e:	4a0b      	ldr	r2, [pc, #44]	@ (800ab5c <retry_delay+0xa8>)
 800ab30:	490c      	ldr	r1, [pc, #48]	@ (800ab64 <retry_delay+0xb0>)
 800ab32:	4809      	ldr	r0, [pc, #36]	@ (800ab58 <retry_delay+0xa4>)
 800ab34:	f000 ffe0 	bl	800baf8 <siprintf>
	HAL_UART_Transmit(DEBUG_UART, buffer, 32, -1);
 800ab38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab3c:	2220      	movs	r2, #32
 800ab3e:	4906      	ldr	r1, [pc, #24]	@ (800ab58 <retry_delay+0xa4>)
 800ab40:	4803      	ldr	r0, [pc, #12]	@ (800ab50 <retry_delay+0x9c>)
 800ab42:	f7fd fcc1 	bl	80084c8 <HAL_UART_Transmit>

	return 0;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	0800fd38 	.word	0x0800fd38
 800ab50:	24000350 	.word	0x24000350
 800ab54:	0800fd4c 	.word	0x0800fd4c
 800ab58:	24003410 	.word	0x24003410
 800ab5c:	240033d0 	.word	0x240033d0
 800ab60:	0800fd60 	.word	0x0800fd60
 800ab64:	0800fd70 	.word	0x0800fd70

0800ab68 <imu_init>:

#include "imu_behavior.h"
unsigned int sample_count = 0;

void imu_init (void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af02      	add	r7, sp, #8
	//buf[0] = 0x2D; buf[1] = 0x08;
	//HAL_I2C_Master_Transmit(hi2c, ADXL345_ADDR, buf, 2, 100);

	//GYRO
	// Set sample rate divider to reduce power (e.g., 125Hz)
	buf[0] = 0x15; buf[1] = 0x07; // Divider = 7 → Fs = 1kHz / (7+1) = 125Hz
 800ab6e:	2315      	movs	r3, #21
 800ab70:	713b      	strb	r3, [r7, #4]
 800ab72:	2307      	movs	r3, #7
 800ab74:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(IMU_I2C, ITG3205_ADDR, buf, 2, 100);
 800ab76:	1d3a      	adds	r2, r7, #4
 800ab78:	2364      	movs	r3, #100	@ 0x64
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	21d0      	movs	r1, #208	@ 0xd0
 800ab80:	480f      	ldr	r0, [pc, #60]	@ (800abc0 <imu_init+0x58>)
 800ab82:	f7f9 f9db 	bl	8003f3c <HAL_I2C_Master_Transmit>

	// Set DLPF and Full Scale: 0x18 = FS ±2000°/s, low-pass filter at 42Hz
	buf[0] = 0x16; buf[1] = 0x1B;
 800ab86:	2316      	movs	r3, #22
 800ab88:	713b      	strb	r3, [r7, #4]
 800ab8a:	231b      	movs	r3, #27
 800ab8c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(IMU_I2C, ITG3205_ADDR, buf, 2, 100);
 800ab8e:	1d3a      	adds	r2, r7, #4
 800ab90:	2364      	movs	r3, #100	@ 0x64
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	2302      	movs	r3, #2
 800ab96:	21d0      	movs	r1, #208	@ 0xd0
 800ab98:	4809      	ldr	r0, [pc, #36]	@ (800abc0 <imu_init+0x58>)
 800ab9a:	f7f9 f9cf 	bl	8003f3c <HAL_I2C_Master_Transmit>

	// Power management: select Z gyro as PLL source (low-power + stability)
	buf[0] = 0x3E; buf[1] = 0x03;
 800ab9e:	233e      	movs	r3, #62	@ 0x3e
 800aba0:	713b      	strb	r3, [r7, #4]
 800aba2:	2303      	movs	r3, #3
 800aba4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(IMU_I2C, ITG3205_ADDR, buf, 2, 100);
 800aba6:	1d3a      	adds	r2, r7, #4
 800aba8:	2364      	movs	r3, #100	@ 0x64
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	2302      	movs	r3, #2
 800abae:	21d0      	movs	r1, #208	@ 0xd0
 800abb0:	4803      	ldr	r0, [pc, #12]	@ (800abc0 <imu_init+0x58>)
 800abb2:	f7f9 f9c3 	bl	8003f3c <HAL_I2C_Master_Transmit>
	// HMC5883L: configure for continuous measurement
	//buf[0]=0x02; buf[1]=0x00; HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDR, buf, 2, 100);
	//buf[0]=0x00; buf[1]=0x70; HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDR, buf, 2, 100);
	//buf[0]=0x01; buf[1]=0xA0; HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDR, buf, 2, 100);

}
 800abb6:	bf00      	nop
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	24000258 	.word	0x24000258

0800abc4 <imu_update>:

void imu_update (void)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b086      	sub	sp, #24
 800abc8:	af04      	add	r7, sp, #16

    if (sample_count < IMU_NUMBER_OF_SAMPLES)
 800abca:	4b13      	ldr	r3, [pc, #76]	@ (800ac18 <imu_update+0x54>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d81c      	bhi.n	800ac10 <imu_update+0x4c>
    {
        uint8_t buf[2];
        HAL_I2C_Mem_Read(IMU_I2C, ITG3205_ADDR, 0x21, 1, buf, 2, 100); // ZOUT_H, ZOUT_L
 800abd6:	2364      	movs	r3, #100	@ 0x64
 800abd8:	9302      	str	r3, [sp, #8]
 800abda:	2302      	movs	r3, #2
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	463b      	mov	r3, r7
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	2301      	movs	r3, #1
 800abe4:	2221      	movs	r2, #33	@ 0x21
 800abe6:	21d0      	movs	r1, #208	@ 0xd0
 800abe8:	480c      	ldr	r0, [pc, #48]	@ (800ac1c <imu_update+0x58>)
 800abea:	f7f9 fabf 	bl	800416c <HAL_I2C_Mem_Read>

    	package_data_t* imu_data = write_package_data();
 800abee:	f7ff fe03 	bl	800a7f8 <write_package_data>
 800abf2:	6078      	str	r0, [r7, #4]
    	imu_data->imu[sample_count] = (int16_t)((int16_t)buf[0] << 8 | buf[1]);
 800abf4:	783b      	ldrb	r3, [r7, #0]
 800abf6:	b21b      	sxth	r3, r3
 800abf8:	021b      	lsls	r3, r3, #8
 800abfa:	b219      	sxth	r1, r3
 800abfc:	787b      	ldrb	r3, [r7, #1]
 800abfe:	b21b      	sxth	r3, r3
 800ac00:	4a05      	ldr	r2, [pc, #20]	@ (800ac18 <imu_update+0x54>)
 800ac02:	6812      	ldr	r2, [r2, #0]
 800ac04:	430b      	orrs	r3, r1
 800ac06:	b219      	sxth	r1, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3218      	adds	r2, #24
 800ac0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    }
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	24003474 	.word	0x24003474
 800ac1c:	24000258 	.word	0x24000258

0800ac20 <nb_iot_init>:

char recived_at_msg[MOBILE_COMMS_ANSWER_LEN];
char msg_buffer[32];

void nb_iot_init (void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(DEBUG_UART, MOBILE_COMMS_INIT_MSG, sizeof MOBILE_COMMS_INIT_MSG);
 800ac24:	2216      	movs	r2, #22
 800ac26:	4910      	ldr	r1, [pc, #64]	@ (800ac68 <nb_iot_init+0x48>)
 800ac28:	4810      	ldr	r0, [pc, #64]	@ (800ac6c <nb_iot_init+0x4c>)
 800ac2a:	f7fd fda3 	bl	8008774 <HAL_UART_Transmit_IT>

	at_echo_off(recived_at_msg);
 800ac2e:	4810      	ldr	r0, [pc, #64]	@ (800ac70 <nb_iot_init+0x50>)
 800ac30:	f7ff fcb2 	bl	800a598 <at_echo_off>
	at_network_mode(recived_at_msg);
 800ac34:	480e      	ldr	r0, [pc, #56]	@ (800ac70 <nb_iot_init+0x50>)
 800ac36:	f7ff fcff 	bl	800a638 <at_network_mode>
	at_set_band(recived_at_msg);
 800ac3a:	480d      	ldr	r0, [pc, #52]	@ (800ac70 <nb_iot_init+0x50>)
 800ac3c:	f7ff fd0c 	bl	800a658 <at_set_band>
	//at_setup_lte(recived_at_msg);
	at_network_pdp_activate(recived_at_msg);
 800ac40:	480b      	ldr	r0, [pc, #44]	@ (800ac70 <nb_iot_init+0x50>)
 800ac42:	f7ff fd6d 	bl	800a720 <at_network_pdp_activate>
	at_gprs_init(recived_at_msg);
 800ac46:	480a      	ldr	r0, [pc, #40]	@ (800ac70 <nb_iot_init+0x50>)
 800ac48:	f7ff fd16 	bl	800a678 <at_gprs_init>
	at_network_attach_request (recived_at_msg);
 800ac4c:	4808      	ldr	r0, [pc, #32]	@ (800ac70 <nb_iot_init+0x50>)
 800ac4e:	f7ff fd23 	bl	800a698 <at_network_attach_request>
	//at_set_ip_config(recived_at_msg);
	//at_set_ip_headers(recived_at_msg);
	at_init_http_connection(recived_at_msg);
 800ac52:	4807      	ldr	r0, [pc, #28]	@ (800ac70 <nb_iot_init+0x50>)
 800ac54:	f7ff fd30 	bl	800a6b8 <at_init_http_connection>

	HAL_UART_Transmit_IT(DEBUG_UART, MOBILE_COMMS_END_INIT_MSG, sizeof MOBILE_COMMS_END_INIT_MSG);
 800ac58:	221a      	movs	r2, #26
 800ac5a:	4906      	ldr	r1, [pc, #24]	@ (800ac74 <nb_iot_init+0x54>)
 800ac5c:	4803      	ldr	r0, [pc, #12]	@ (800ac6c <nb_iot_init+0x4c>)
 800ac5e:	f7fd fd89 	bl	8008774 <HAL_UART_Transmit_IT>

}
 800ac62:	bf00      	nop
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	0800fd80 	.word	0x0800fd80
 800ac6c:	24000350 	.word	0x24000350
 800ac70:	24003478 	.word	0x24003478
 800ac74:	0800fd98 	.word	0x0800fd98

0800ac78 <nb_iot_update>:

void nb_iot_update (void)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	af00      	add	r7, sp, #0
	at_lte_send(TESTE_SITE, "Teste", recived_at_msg);
 800ac7c:	4a05      	ldr	r2, [pc, #20]	@ (800ac94 <nb_iot_update+0x1c>)
 800ac7e:	4906      	ldr	r1, [pc, #24]	@ (800ac98 <nb_iot_update+0x20>)
 800ac80:	4806      	ldr	r0, [pc, #24]	@ (800ac9c <nb_iot_update+0x24>)
 800ac82:	f7ff fd31 	bl	800a6e8 <at_lte_send>
	HAL_Delay(1000);
 800ac86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ac8a:	f7f6 fe41 	bl	8001910 <HAL_Delay>
}
 800ac8e:	bf00      	nop
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	24003478 	.word	0x24003478
 800ac98:	0800fdb4 	.word	0x0800fdb4
 800ac9c:	0800fdbc 	.word	0x0800fdbc

0800aca0 <sd_card_init>:
 */

#include "sd_card_behavior.h"

void sd_card_init (void)
{
 800aca0:	b480      	push	{r7}
 800aca2:	af00      	add	r7, sp, #0

}
 800aca4:	bf00      	nop
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <sd_card_update>:

void sd_card_update (void)
{
 800acae:	b480      	push	{r7}
 800acb0:	af00      	add	r7, sp, #0

}
 800acb2:	bf00      	nop
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <temperature_init>:
 */

#include "temperature_behavior.h"

void temperature_init (void)
{
 800acbc:	b480      	push	{r7}
 800acbe:	af00      	add	r7, sp, #0

}
 800acc0:	bf00      	nop
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <temperature_update>:

void temperature_update (void)
{
 800acca:	b480      	push	{r7}
 800accc:	af00      	add	r7, sp, #0

}
 800acce:	bf00      	nop
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <__cvt>:
 800acd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acda:	ed2d 8b02 	vpush	{d8}
 800acde:	eeb0 8b40 	vmov.f64	d8, d0
 800ace2:	b085      	sub	sp, #20
 800ace4:	4617      	mov	r7, r2
 800ace6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ace8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800acea:	ee18 2a90 	vmov	r2, s17
 800acee:	f025 0520 	bic.w	r5, r5, #32
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	bfb6      	itet	lt
 800acf6:	222d      	movlt	r2, #45	@ 0x2d
 800acf8:	2200      	movge	r2, #0
 800acfa:	eeb1 8b40 	vneglt.f64	d8, d0
 800acfe:	2d46      	cmp	r5, #70	@ 0x46
 800ad00:	460c      	mov	r4, r1
 800ad02:	701a      	strb	r2, [r3, #0]
 800ad04:	d004      	beq.n	800ad10 <__cvt+0x38>
 800ad06:	2d45      	cmp	r5, #69	@ 0x45
 800ad08:	d100      	bne.n	800ad0c <__cvt+0x34>
 800ad0a:	3401      	adds	r4, #1
 800ad0c:	2102      	movs	r1, #2
 800ad0e:	e000      	b.n	800ad12 <__cvt+0x3a>
 800ad10:	2103      	movs	r1, #3
 800ad12:	ab03      	add	r3, sp, #12
 800ad14:	9301      	str	r3, [sp, #4]
 800ad16:	ab02      	add	r3, sp, #8
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	4633      	mov	r3, r6
 800ad1e:	eeb0 0b48 	vmov.f64	d0, d8
 800ad22:	f001 f88d 	bl	800be40 <_dtoa_r>
 800ad26:	2d47      	cmp	r5, #71	@ 0x47
 800ad28:	d114      	bne.n	800ad54 <__cvt+0x7c>
 800ad2a:	07fb      	lsls	r3, r7, #31
 800ad2c:	d50a      	bpl.n	800ad44 <__cvt+0x6c>
 800ad2e:	1902      	adds	r2, r0, r4
 800ad30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad38:	bf08      	it	eq
 800ad3a:	9203      	streq	r2, [sp, #12]
 800ad3c:	2130      	movs	r1, #48	@ 0x30
 800ad3e:	9b03      	ldr	r3, [sp, #12]
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d319      	bcc.n	800ad78 <__cvt+0xa0>
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad48:	1a1b      	subs	r3, r3, r0
 800ad4a:	6013      	str	r3, [r2, #0]
 800ad4c:	b005      	add	sp, #20
 800ad4e:	ecbd 8b02 	vpop	{d8}
 800ad52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad54:	2d46      	cmp	r5, #70	@ 0x46
 800ad56:	eb00 0204 	add.w	r2, r0, r4
 800ad5a:	d1e9      	bne.n	800ad30 <__cvt+0x58>
 800ad5c:	7803      	ldrb	r3, [r0, #0]
 800ad5e:	2b30      	cmp	r3, #48	@ 0x30
 800ad60:	d107      	bne.n	800ad72 <__cvt+0x9a>
 800ad62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6a:	bf1c      	itt	ne
 800ad6c:	f1c4 0401 	rsbne	r4, r4, #1
 800ad70:	6034      	strne	r4, [r6, #0]
 800ad72:	6833      	ldr	r3, [r6, #0]
 800ad74:	441a      	add	r2, r3
 800ad76:	e7db      	b.n	800ad30 <__cvt+0x58>
 800ad78:	1c5c      	adds	r4, r3, #1
 800ad7a:	9403      	str	r4, [sp, #12]
 800ad7c:	7019      	strb	r1, [r3, #0]
 800ad7e:	e7de      	b.n	800ad3e <__cvt+0x66>

0800ad80 <__exponent>:
 800ad80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad82:	2900      	cmp	r1, #0
 800ad84:	bfba      	itte	lt
 800ad86:	4249      	neglt	r1, r1
 800ad88:	232d      	movlt	r3, #45	@ 0x2d
 800ad8a:	232b      	movge	r3, #43	@ 0x2b
 800ad8c:	2909      	cmp	r1, #9
 800ad8e:	7002      	strb	r2, [r0, #0]
 800ad90:	7043      	strb	r3, [r0, #1]
 800ad92:	dd29      	ble.n	800ade8 <__exponent+0x68>
 800ad94:	f10d 0307 	add.w	r3, sp, #7
 800ad98:	461d      	mov	r5, r3
 800ad9a:	270a      	movs	r7, #10
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	fbb1 f6f7 	udiv	r6, r1, r7
 800ada2:	fb07 1416 	mls	r4, r7, r6, r1
 800ada6:	3430      	adds	r4, #48	@ 0x30
 800ada8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800adac:	460c      	mov	r4, r1
 800adae:	2c63      	cmp	r4, #99	@ 0x63
 800adb0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800adb4:	4631      	mov	r1, r6
 800adb6:	dcf1      	bgt.n	800ad9c <__exponent+0x1c>
 800adb8:	3130      	adds	r1, #48	@ 0x30
 800adba:	1e94      	subs	r4, r2, #2
 800adbc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800adc0:	1c41      	adds	r1, r0, #1
 800adc2:	4623      	mov	r3, r4
 800adc4:	42ab      	cmp	r3, r5
 800adc6:	d30a      	bcc.n	800adde <__exponent+0x5e>
 800adc8:	f10d 0309 	add.w	r3, sp, #9
 800adcc:	1a9b      	subs	r3, r3, r2
 800adce:	42ac      	cmp	r4, r5
 800add0:	bf88      	it	hi
 800add2:	2300      	movhi	r3, #0
 800add4:	3302      	adds	r3, #2
 800add6:	4403      	add	r3, r0
 800add8:	1a18      	subs	r0, r3, r0
 800adda:	b003      	add	sp, #12
 800addc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adde:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ade2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ade6:	e7ed      	b.n	800adc4 <__exponent+0x44>
 800ade8:	2330      	movs	r3, #48	@ 0x30
 800adea:	3130      	adds	r1, #48	@ 0x30
 800adec:	7083      	strb	r3, [r0, #2]
 800adee:	70c1      	strb	r1, [r0, #3]
 800adf0:	1d03      	adds	r3, r0, #4
 800adf2:	e7f1      	b.n	800add8 <__exponent+0x58>
 800adf4:	0000      	movs	r0, r0
	...

0800adf8 <_printf_float>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	b08d      	sub	sp, #52	@ 0x34
 800adfe:	460c      	mov	r4, r1
 800ae00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae04:	4616      	mov	r6, r2
 800ae06:	461f      	mov	r7, r3
 800ae08:	4605      	mov	r5, r0
 800ae0a:	f000 ff11 	bl	800bc30 <_localeconv_r>
 800ae0e:	f8d0 b000 	ldr.w	fp, [r0]
 800ae12:	4658      	mov	r0, fp
 800ae14:	f7f5 fab4 	bl	8000380 <strlen>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ae20:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ae24:	6822      	ldr	r2, [r4, #0]
 800ae26:	9005      	str	r0, [sp, #20]
 800ae28:	3307      	adds	r3, #7
 800ae2a:	f023 0307 	bic.w	r3, r3, #7
 800ae2e:	f103 0108 	add.w	r1, r3, #8
 800ae32:	f8c8 1000 	str.w	r1, [r8]
 800ae36:	ed93 0b00 	vldr	d0, [r3]
 800ae3a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b098 <_printf_float+0x2a0>
 800ae3e:	eeb0 7bc0 	vabs.f64	d7, d0
 800ae42:	eeb4 7b46 	vcmp.f64	d7, d6
 800ae46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae4a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ae4e:	dd24      	ble.n	800ae9a <_printf_float+0xa2>
 800ae50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ae54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae58:	d502      	bpl.n	800ae60 <_printf_float+0x68>
 800ae5a:	232d      	movs	r3, #45	@ 0x2d
 800ae5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae60:	498f      	ldr	r1, [pc, #572]	@ (800b0a0 <_printf_float+0x2a8>)
 800ae62:	4b90      	ldr	r3, [pc, #576]	@ (800b0a4 <_printf_float+0x2ac>)
 800ae64:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ae68:	bf8c      	ite	hi
 800ae6a:	4688      	movhi	r8, r1
 800ae6c:	4698      	movls	r8, r3
 800ae6e:	f022 0204 	bic.w	r2, r2, #4
 800ae72:	2303      	movs	r3, #3
 800ae74:	6123      	str	r3, [r4, #16]
 800ae76:	6022      	str	r2, [r4, #0]
 800ae78:	f04f 0a00 	mov.w	sl, #0
 800ae7c:	9700      	str	r7, [sp, #0]
 800ae7e:	4633      	mov	r3, r6
 800ae80:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ae82:	4621      	mov	r1, r4
 800ae84:	4628      	mov	r0, r5
 800ae86:	f000 f9d1 	bl	800b22c <_printf_common>
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	f040 8089 	bne.w	800afa2 <_printf_float+0x1aa>
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae94:	b00d      	add	sp, #52	@ 0x34
 800ae96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ae9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea2:	d709      	bvc.n	800aeb8 <_printf_float+0xc0>
 800aea4:	ee10 3a90 	vmov	r3, s1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bfbc      	itt	lt
 800aeac:	232d      	movlt	r3, #45	@ 0x2d
 800aeae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aeb2:	497d      	ldr	r1, [pc, #500]	@ (800b0a8 <_printf_float+0x2b0>)
 800aeb4:	4b7d      	ldr	r3, [pc, #500]	@ (800b0ac <_printf_float+0x2b4>)
 800aeb6:	e7d5      	b.n	800ae64 <_printf_float+0x6c>
 800aeb8:	6863      	ldr	r3, [r4, #4]
 800aeba:	1c59      	adds	r1, r3, #1
 800aebc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800aec0:	d139      	bne.n	800af36 <_printf_float+0x13e>
 800aec2:	2306      	movs	r3, #6
 800aec4:	6063      	str	r3, [r4, #4]
 800aec6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aeca:	2300      	movs	r3, #0
 800aecc:	6022      	str	r2, [r4, #0]
 800aece:	9303      	str	r3, [sp, #12]
 800aed0:	ab0a      	add	r3, sp, #40	@ 0x28
 800aed2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800aed6:	ab09      	add	r3, sp, #36	@ 0x24
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	6861      	ldr	r1, [r4, #4]
 800aedc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aee0:	4628      	mov	r0, r5
 800aee2:	f7ff fef9 	bl	800acd8 <__cvt>
 800aee6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aeea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aeec:	4680      	mov	r8, r0
 800aeee:	d129      	bne.n	800af44 <_printf_float+0x14c>
 800aef0:	1cc8      	adds	r0, r1, #3
 800aef2:	db02      	blt.n	800aefa <_printf_float+0x102>
 800aef4:	6863      	ldr	r3, [r4, #4]
 800aef6:	4299      	cmp	r1, r3
 800aef8:	dd41      	ble.n	800af7e <_printf_float+0x186>
 800aefa:	f1a9 0902 	sub.w	r9, r9, #2
 800aefe:	fa5f f989 	uxtb.w	r9, r9
 800af02:	3901      	subs	r1, #1
 800af04:	464a      	mov	r2, r9
 800af06:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800af0c:	f7ff ff38 	bl	800ad80 <__exponent>
 800af10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af12:	1813      	adds	r3, r2, r0
 800af14:	2a01      	cmp	r2, #1
 800af16:	4682      	mov	sl, r0
 800af18:	6123      	str	r3, [r4, #16]
 800af1a:	dc02      	bgt.n	800af22 <_printf_float+0x12a>
 800af1c:	6822      	ldr	r2, [r4, #0]
 800af1e:	07d2      	lsls	r2, r2, #31
 800af20:	d501      	bpl.n	800af26 <_printf_float+0x12e>
 800af22:	3301      	adds	r3, #1
 800af24:	6123      	str	r3, [r4, #16]
 800af26:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d0a6      	beq.n	800ae7c <_printf_float+0x84>
 800af2e:	232d      	movs	r3, #45	@ 0x2d
 800af30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af34:	e7a2      	b.n	800ae7c <_printf_float+0x84>
 800af36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af3a:	d1c4      	bne.n	800aec6 <_printf_float+0xce>
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1c2      	bne.n	800aec6 <_printf_float+0xce>
 800af40:	2301      	movs	r3, #1
 800af42:	e7bf      	b.n	800aec4 <_printf_float+0xcc>
 800af44:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800af48:	d9db      	bls.n	800af02 <_printf_float+0x10a>
 800af4a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800af4e:	d118      	bne.n	800af82 <_printf_float+0x18a>
 800af50:	2900      	cmp	r1, #0
 800af52:	6863      	ldr	r3, [r4, #4]
 800af54:	dd0b      	ble.n	800af6e <_printf_float+0x176>
 800af56:	6121      	str	r1, [r4, #16]
 800af58:	b913      	cbnz	r3, 800af60 <_printf_float+0x168>
 800af5a:	6822      	ldr	r2, [r4, #0]
 800af5c:	07d0      	lsls	r0, r2, #31
 800af5e:	d502      	bpl.n	800af66 <_printf_float+0x16e>
 800af60:	3301      	adds	r3, #1
 800af62:	440b      	add	r3, r1
 800af64:	6123      	str	r3, [r4, #16]
 800af66:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af68:	f04f 0a00 	mov.w	sl, #0
 800af6c:	e7db      	b.n	800af26 <_printf_float+0x12e>
 800af6e:	b913      	cbnz	r3, 800af76 <_printf_float+0x17e>
 800af70:	6822      	ldr	r2, [r4, #0]
 800af72:	07d2      	lsls	r2, r2, #31
 800af74:	d501      	bpl.n	800af7a <_printf_float+0x182>
 800af76:	3302      	adds	r3, #2
 800af78:	e7f4      	b.n	800af64 <_printf_float+0x16c>
 800af7a:	2301      	movs	r3, #1
 800af7c:	e7f2      	b.n	800af64 <_printf_float+0x16c>
 800af7e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800af82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af84:	4299      	cmp	r1, r3
 800af86:	db05      	blt.n	800af94 <_printf_float+0x19c>
 800af88:	6823      	ldr	r3, [r4, #0]
 800af8a:	6121      	str	r1, [r4, #16]
 800af8c:	07d8      	lsls	r0, r3, #31
 800af8e:	d5ea      	bpl.n	800af66 <_printf_float+0x16e>
 800af90:	1c4b      	adds	r3, r1, #1
 800af92:	e7e7      	b.n	800af64 <_printf_float+0x16c>
 800af94:	2900      	cmp	r1, #0
 800af96:	bfd4      	ite	le
 800af98:	f1c1 0202 	rsble	r2, r1, #2
 800af9c:	2201      	movgt	r2, #1
 800af9e:	4413      	add	r3, r2
 800afa0:	e7e0      	b.n	800af64 <_printf_float+0x16c>
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	055a      	lsls	r2, r3, #21
 800afa6:	d407      	bmi.n	800afb8 <_printf_float+0x1c0>
 800afa8:	6923      	ldr	r3, [r4, #16]
 800afaa:	4642      	mov	r2, r8
 800afac:	4631      	mov	r1, r6
 800afae:	4628      	mov	r0, r5
 800afb0:	47b8      	blx	r7
 800afb2:	3001      	adds	r0, #1
 800afb4:	d12a      	bne.n	800b00c <_printf_float+0x214>
 800afb6:	e76b      	b.n	800ae90 <_printf_float+0x98>
 800afb8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800afbc:	f240 80e0 	bls.w	800b180 <_printf_float+0x388>
 800afc0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800afc4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afcc:	d133      	bne.n	800b036 <_printf_float+0x23e>
 800afce:	4a38      	ldr	r2, [pc, #224]	@ (800b0b0 <_printf_float+0x2b8>)
 800afd0:	2301      	movs	r3, #1
 800afd2:	4631      	mov	r1, r6
 800afd4:	4628      	mov	r0, r5
 800afd6:	47b8      	blx	r7
 800afd8:	3001      	adds	r0, #1
 800afda:	f43f af59 	beq.w	800ae90 <_printf_float+0x98>
 800afde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800afe2:	4543      	cmp	r3, r8
 800afe4:	db02      	blt.n	800afec <_printf_float+0x1f4>
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	07d8      	lsls	r0, r3, #31
 800afea:	d50f      	bpl.n	800b00c <_printf_float+0x214>
 800afec:	9b05      	ldr	r3, [sp, #20]
 800afee:	465a      	mov	r2, fp
 800aff0:	4631      	mov	r1, r6
 800aff2:	4628      	mov	r0, r5
 800aff4:	47b8      	blx	r7
 800aff6:	3001      	adds	r0, #1
 800aff8:	f43f af4a 	beq.w	800ae90 <_printf_float+0x98>
 800affc:	f04f 0900 	mov.w	r9, #0
 800b000:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b004:	f104 0a1a 	add.w	sl, r4, #26
 800b008:	45c8      	cmp	r8, r9
 800b00a:	dc09      	bgt.n	800b020 <_printf_float+0x228>
 800b00c:	6823      	ldr	r3, [r4, #0]
 800b00e:	079b      	lsls	r3, r3, #30
 800b010:	f100 8107 	bmi.w	800b222 <_printf_float+0x42a>
 800b014:	68e0      	ldr	r0, [r4, #12]
 800b016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b018:	4298      	cmp	r0, r3
 800b01a:	bfb8      	it	lt
 800b01c:	4618      	movlt	r0, r3
 800b01e:	e739      	b.n	800ae94 <_printf_float+0x9c>
 800b020:	2301      	movs	r3, #1
 800b022:	4652      	mov	r2, sl
 800b024:	4631      	mov	r1, r6
 800b026:	4628      	mov	r0, r5
 800b028:	47b8      	blx	r7
 800b02a:	3001      	adds	r0, #1
 800b02c:	f43f af30 	beq.w	800ae90 <_printf_float+0x98>
 800b030:	f109 0901 	add.w	r9, r9, #1
 800b034:	e7e8      	b.n	800b008 <_printf_float+0x210>
 800b036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b038:	2b00      	cmp	r3, #0
 800b03a:	dc3b      	bgt.n	800b0b4 <_printf_float+0x2bc>
 800b03c:	4a1c      	ldr	r2, [pc, #112]	@ (800b0b0 <_printf_float+0x2b8>)
 800b03e:	2301      	movs	r3, #1
 800b040:	4631      	mov	r1, r6
 800b042:	4628      	mov	r0, r5
 800b044:	47b8      	blx	r7
 800b046:	3001      	adds	r0, #1
 800b048:	f43f af22 	beq.w	800ae90 <_printf_float+0x98>
 800b04c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b050:	ea59 0303 	orrs.w	r3, r9, r3
 800b054:	d102      	bne.n	800b05c <_printf_float+0x264>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	07d9      	lsls	r1, r3, #31
 800b05a:	d5d7      	bpl.n	800b00c <_printf_float+0x214>
 800b05c:	9b05      	ldr	r3, [sp, #20]
 800b05e:	465a      	mov	r2, fp
 800b060:	4631      	mov	r1, r6
 800b062:	4628      	mov	r0, r5
 800b064:	47b8      	blx	r7
 800b066:	3001      	adds	r0, #1
 800b068:	f43f af12 	beq.w	800ae90 <_printf_float+0x98>
 800b06c:	f04f 0a00 	mov.w	sl, #0
 800b070:	f104 0b1a 	add.w	fp, r4, #26
 800b074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b076:	425b      	negs	r3, r3
 800b078:	4553      	cmp	r3, sl
 800b07a:	dc01      	bgt.n	800b080 <_printf_float+0x288>
 800b07c:	464b      	mov	r3, r9
 800b07e:	e794      	b.n	800afaa <_printf_float+0x1b2>
 800b080:	2301      	movs	r3, #1
 800b082:	465a      	mov	r2, fp
 800b084:	4631      	mov	r1, r6
 800b086:	4628      	mov	r0, r5
 800b088:	47b8      	blx	r7
 800b08a:	3001      	adds	r0, #1
 800b08c:	f43f af00 	beq.w	800ae90 <_printf_float+0x98>
 800b090:	f10a 0a01 	add.w	sl, sl, #1
 800b094:	e7ee      	b.n	800b074 <_printf_float+0x27c>
 800b096:	bf00      	nop
 800b098:	ffffffff 	.word	0xffffffff
 800b09c:	7fefffff 	.word	0x7fefffff
 800b0a0:	0800fe24 	.word	0x0800fe24
 800b0a4:	0800fe20 	.word	0x0800fe20
 800b0a8:	0800fe2c 	.word	0x0800fe2c
 800b0ac:	0800fe28 	.word	0x0800fe28
 800b0b0:	0800ff66 	.word	0x0800ff66
 800b0b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b0ba:	4553      	cmp	r3, sl
 800b0bc:	bfa8      	it	ge
 800b0be:	4653      	movge	r3, sl
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	4699      	mov	r9, r3
 800b0c4:	dc37      	bgt.n	800b136 <_printf_float+0x33e>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	9307      	str	r3, [sp, #28]
 800b0ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0ce:	f104 021a 	add.w	r2, r4, #26
 800b0d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0d4:	9907      	ldr	r1, [sp, #28]
 800b0d6:	9306      	str	r3, [sp, #24]
 800b0d8:	eba3 0309 	sub.w	r3, r3, r9
 800b0dc:	428b      	cmp	r3, r1
 800b0de:	dc31      	bgt.n	800b144 <_printf_float+0x34c>
 800b0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e2:	459a      	cmp	sl, r3
 800b0e4:	dc3b      	bgt.n	800b15e <_printf_float+0x366>
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	07da      	lsls	r2, r3, #31
 800b0ea:	d438      	bmi.n	800b15e <_printf_float+0x366>
 800b0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ee:	ebaa 0903 	sub.w	r9, sl, r3
 800b0f2:	9b06      	ldr	r3, [sp, #24]
 800b0f4:	ebaa 0303 	sub.w	r3, sl, r3
 800b0f8:	4599      	cmp	r9, r3
 800b0fa:	bfa8      	it	ge
 800b0fc:	4699      	movge	r9, r3
 800b0fe:	f1b9 0f00 	cmp.w	r9, #0
 800b102:	dc34      	bgt.n	800b16e <_printf_float+0x376>
 800b104:	f04f 0800 	mov.w	r8, #0
 800b108:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b10c:	f104 0b1a 	add.w	fp, r4, #26
 800b110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b112:	ebaa 0303 	sub.w	r3, sl, r3
 800b116:	eba3 0309 	sub.w	r3, r3, r9
 800b11a:	4543      	cmp	r3, r8
 800b11c:	f77f af76 	ble.w	800b00c <_printf_float+0x214>
 800b120:	2301      	movs	r3, #1
 800b122:	465a      	mov	r2, fp
 800b124:	4631      	mov	r1, r6
 800b126:	4628      	mov	r0, r5
 800b128:	47b8      	blx	r7
 800b12a:	3001      	adds	r0, #1
 800b12c:	f43f aeb0 	beq.w	800ae90 <_printf_float+0x98>
 800b130:	f108 0801 	add.w	r8, r8, #1
 800b134:	e7ec      	b.n	800b110 <_printf_float+0x318>
 800b136:	4642      	mov	r2, r8
 800b138:	4631      	mov	r1, r6
 800b13a:	4628      	mov	r0, r5
 800b13c:	47b8      	blx	r7
 800b13e:	3001      	adds	r0, #1
 800b140:	d1c1      	bne.n	800b0c6 <_printf_float+0x2ce>
 800b142:	e6a5      	b.n	800ae90 <_printf_float+0x98>
 800b144:	2301      	movs	r3, #1
 800b146:	4631      	mov	r1, r6
 800b148:	4628      	mov	r0, r5
 800b14a:	9206      	str	r2, [sp, #24]
 800b14c:	47b8      	blx	r7
 800b14e:	3001      	adds	r0, #1
 800b150:	f43f ae9e 	beq.w	800ae90 <_printf_float+0x98>
 800b154:	9b07      	ldr	r3, [sp, #28]
 800b156:	9a06      	ldr	r2, [sp, #24]
 800b158:	3301      	adds	r3, #1
 800b15a:	9307      	str	r3, [sp, #28]
 800b15c:	e7b9      	b.n	800b0d2 <_printf_float+0x2da>
 800b15e:	9b05      	ldr	r3, [sp, #20]
 800b160:	465a      	mov	r2, fp
 800b162:	4631      	mov	r1, r6
 800b164:	4628      	mov	r0, r5
 800b166:	47b8      	blx	r7
 800b168:	3001      	adds	r0, #1
 800b16a:	d1bf      	bne.n	800b0ec <_printf_float+0x2f4>
 800b16c:	e690      	b.n	800ae90 <_printf_float+0x98>
 800b16e:	9a06      	ldr	r2, [sp, #24]
 800b170:	464b      	mov	r3, r9
 800b172:	4442      	add	r2, r8
 800b174:	4631      	mov	r1, r6
 800b176:	4628      	mov	r0, r5
 800b178:	47b8      	blx	r7
 800b17a:	3001      	adds	r0, #1
 800b17c:	d1c2      	bne.n	800b104 <_printf_float+0x30c>
 800b17e:	e687      	b.n	800ae90 <_printf_float+0x98>
 800b180:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b184:	f1b9 0f01 	cmp.w	r9, #1
 800b188:	dc01      	bgt.n	800b18e <_printf_float+0x396>
 800b18a:	07db      	lsls	r3, r3, #31
 800b18c:	d536      	bpl.n	800b1fc <_printf_float+0x404>
 800b18e:	2301      	movs	r3, #1
 800b190:	4642      	mov	r2, r8
 800b192:	4631      	mov	r1, r6
 800b194:	4628      	mov	r0, r5
 800b196:	47b8      	blx	r7
 800b198:	3001      	adds	r0, #1
 800b19a:	f43f ae79 	beq.w	800ae90 <_printf_float+0x98>
 800b19e:	9b05      	ldr	r3, [sp, #20]
 800b1a0:	465a      	mov	r2, fp
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	47b8      	blx	r7
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	f43f ae71 	beq.w	800ae90 <_printf_float+0x98>
 800b1ae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b1b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ba:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800b1be:	d018      	beq.n	800b1f2 <_printf_float+0x3fa>
 800b1c0:	464b      	mov	r3, r9
 800b1c2:	f108 0201 	add.w	r2, r8, #1
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	47b8      	blx	r7
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d10c      	bne.n	800b1ea <_printf_float+0x3f2>
 800b1d0:	e65e      	b.n	800ae90 <_printf_float+0x98>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	465a      	mov	r2, fp
 800b1d6:	4631      	mov	r1, r6
 800b1d8:	4628      	mov	r0, r5
 800b1da:	47b8      	blx	r7
 800b1dc:	3001      	adds	r0, #1
 800b1de:	f43f ae57 	beq.w	800ae90 <_printf_float+0x98>
 800b1e2:	f108 0801 	add.w	r8, r8, #1
 800b1e6:	45c8      	cmp	r8, r9
 800b1e8:	dbf3      	blt.n	800b1d2 <_printf_float+0x3da>
 800b1ea:	4653      	mov	r3, sl
 800b1ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b1f0:	e6dc      	b.n	800afac <_printf_float+0x1b4>
 800b1f2:	f04f 0800 	mov.w	r8, #0
 800b1f6:	f104 0b1a 	add.w	fp, r4, #26
 800b1fa:	e7f4      	b.n	800b1e6 <_printf_float+0x3ee>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	4642      	mov	r2, r8
 800b200:	e7e1      	b.n	800b1c6 <_printf_float+0x3ce>
 800b202:	2301      	movs	r3, #1
 800b204:	464a      	mov	r2, r9
 800b206:	4631      	mov	r1, r6
 800b208:	4628      	mov	r0, r5
 800b20a:	47b8      	blx	r7
 800b20c:	3001      	adds	r0, #1
 800b20e:	f43f ae3f 	beq.w	800ae90 <_printf_float+0x98>
 800b212:	f108 0801 	add.w	r8, r8, #1
 800b216:	68e3      	ldr	r3, [r4, #12]
 800b218:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b21a:	1a5b      	subs	r3, r3, r1
 800b21c:	4543      	cmp	r3, r8
 800b21e:	dcf0      	bgt.n	800b202 <_printf_float+0x40a>
 800b220:	e6f8      	b.n	800b014 <_printf_float+0x21c>
 800b222:	f04f 0800 	mov.w	r8, #0
 800b226:	f104 0919 	add.w	r9, r4, #25
 800b22a:	e7f4      	b.n	800b216 <_printf_float+0x41e>

0800b22c <_printf_common>:
 800b22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b230:	4616      	mov	r6, r2
 800b232:	4698      	mov	r8, r3
 800b234:	688a      	ldr	r2, [r1, #8]
 800b236:	690b      	ldr	r3, [r1, #16]
 800b238:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b23c:	4293      	cmp	r3, r2
 800b23e:	bfb8      	it	lt
 800b240:	4613      	movlt	r3, r2
 800b242:	6033      	str	r3, [r6, #0]
 800b244:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b248:	4607      	mov	r7, r0
 800b24a:	460c      	mov	r4, r1
 800b24c:	b10a      	cbz	r2, 800b252 <_printf_common+0x26>
 800b24e:	3301      	adds	r3, #1
 800b250:	6033      	str	r3, [r6, #0]
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	0699      	lsls	r1, r3, #26
 800b256:	bf42      	ittt	mi
 800b258:	6833      	ldrmi	r3, [r6, #0]
 800b25a:	3302      	addmi	r3, #2
 800b25c:	6033      	strmi	r3, [r6, #0]
 800b25e:	6825      	ldr	r5, [r4, #0]
 800b260:	f015 0506 	ands.w	r5, r5, #6
 800b264:	d106      	bne.n	800b274 <_printf_common+0x48>
 800b266:	f104 0a19 	add.w	sl, r4, #25
 800b26a:	68e3      	ldr	r3, [r4, #12]
 800b26c:	6832      	ldr	r2, [r6, #0]
 800b26e:	1a9b      	subs	r3, r3, r2
 800b270:	42ab      	cmp	r3, r5
 800b272:	dc26      	bgt.n	800b2c2 <_printf_common+0x96>
 800b274:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b278:	6822      	ldr	r2, [r4, #0]
 800b27a:	3b00      	subs	r3, #0
 800b27c:	bf18      	it	ne
 800b27e:	2301      	movne	r3, #1
 800b280:	0692      	lsls	r2, r2, #26
 800b282:	d42b      	bmi.n	800b2dc <_printf_common+0xb0>
 800b284:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b288:	4641      	mov	r1, r8
 800b28a:	4638      	mov	r0, r7
 800b28c:	47c8      	blx	r9
 800b28e:	3001      	adds	r0, #1
 800b290:	d01e      	beq.n	800b2d0 <_printf_common+0xa4>
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	6922      	ldr	r2, [r4, #16]
 800b296:	f003 0306 	and.w	r3, r3, #6
 800b29a:	2b04      	cmp	r3, #4
 800b29c:	bf02      	ittt	eq
 800b29e:	68e5      	ldreq	r5, [r4, #12]
 800b2a0:	6833      	ldreq	r3, [r6, #0]
 800b2a2:	1aed      	subeq	r5, r5, r3
 800b2a4:	68a3      	ldr	r3, [r4, #8]
 800b2a6:	bf0c      	ite	eq
 800b2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2ac:	2500      	movne	r5, #0
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	bfc4      	itt	gt
 800b2b2:	1a9b      	subgt	r3, r3, r2
 800b2b4:	18ed      	addgt	r5, r5, r3
 800b2b6:	2600      	movs	r6, #0
 800b2b8:	341a      	adds	r4, #26
 800b2ba:	42b5      	cmp	r5, r6
 800b2bc:	d11a      	bne.n	800b2f4 <_printf_common+0xc8>
 800b2be:	2000      	movs	r0, #0
 800b2c0:	e008      	b.n	800b2d4 <_printf_common+0xa8>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	4652      	mov	r2, sl
 800b2c6:	4641      	mov	r1, r8
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	47c8      	blx	r9
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	d103      	bne.n	800b2d8 <_printf_common+0xac>
 800b2d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d8:	3501      	adds	r5, #1
 800b2da:	e7c6      	b.n	800b26a <_printf_common+0x3e>
 800b2dc:	18e1      	adds	r1, r4, r3
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	2030      	movs	r0, #48	@ 0x30
 800b2e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2e6:	4422      	add	r2, r4
 800b2e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2f0:	3302      	adds	r3, #2
 800b2f2:	e7c7      	b.n	800b284 <_printf_common+0x58>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	4622      	mov	r2, r4
 800b2f8:	4641      	mov	r1, r8
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	47c8      	blx	r9
 800b2fe:	3001      	adds	r0, #1
 800b300:	d0e6      	beq.n	800b2d0 <_printf_common+0xa4>
 800b302:	3601      	adds	r6, #1
 800b304:	e7d9      	b.n	800b2ba <_printf_common+0x8e>
	...

0800b308 <_printf_i>:
 800b308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b30c:	7e0f      	ldrb	r7, [r1, #24]
 800b30e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b310:	2f78      	cmp	r7, #120	@ 0x78
 800b312:	4691      	mov	r9, r2
 800b314:	4680      	mov	r8, r0
 800b316:	460c      	mov	r4, r1
 800b318:	469a      	mov	sl, r3
 800b31a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b31e:	d807      	bhi.n	800b330 <_printf_i+0x28>
 800b320:	2f62      	cmp	r7, #98	@ 0x62
 800b322:	d80a      	bhi.n	800b33a <_printf_i+0x32>
 800b324:	2f00      	cmp	r7, #0
 800b326:	f000 80d1 	beq.w	800b4cc <_printf_i+0x1c4>
 800b32a:	2f58      	cmp	r7, #88	@ 0x58
 800b32c:	f000 80b8 	beq.w	800b4a0 <_printf_i+0x198>
 800b330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b334:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b338:	e03a      	b.n	800b3b0 <_printf_i+0xa8>
 800b33a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b33e:	2b15      	cmp	r3, #21
 800b340:	d8f6      	bhi.n	800b330 <_printf_i+0x28>
 800b342:	a101      	add	r1, pc, #4	@ (adr r1, 800b348 <_printf_i+0x40>)
 800b344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b348:	0800b3a1 	.word	0x0800b3a1
 800b34c:	0800b3b5 	.word	0x0800b3b5
 800b350:	0800b331 	.word	0x0800b331
 800b354:	0800b331 	.word	0x0800b331
 800b358:	0800b331 	.word	0x0800b331
 800b35c:	0800b331 	.word	0x0800b331
 800b360:	0800b3b5 	.word	0x0800b3b5
 800b364:	0800b331 	.word	0x0800b331
 800b368:	0800b331 	.word	0x0800b331
 800b36c:	0800b331 	.word	0x0800b331
 800b370:	0800b331 	.word	0x0800b331
 800b374:	0800b4b3 	.word	0x0800b4b3
 800b378:	0800b3df 	.word	0x0800b3df
 800b37c:	0800b46d 	.word	0x0800b46d
 800b380:	0800b331 	.word	0x0800b331
 800b384:	0800b331 	.word	0x0800b331
 800b388:	0800b4d5 	.word	0x0800b4d5
 800b38c:	0800b331 	.word	0x0800b331
 800b390:	0800b3df 	.word	0x0800b3df
 800b394:	0800b331 	.word	0x0800b331
 800b398:	0800b331 	.word	0x0800b331
 800b39c:	0800b475 	.word	0x0800b475
 800b3a0:	6833      	ldr	r3, [r6, #0]
 800b3a2:	1d1a      	adds	r2, r3, #4
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6032      	str	r2, [r6, #0]
 800b3a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e09c      	b.n	800b4ee <_printf_i+0x1e6>
 800b3b4:	6833      	ldr	r3, [r6, #0]
 800b3b6:	6820      	ldr	r0, [r4, #0]
 800b3b8:	1d19      	adds	r1, r3, #4
 800b3ba:	6031      	str	r1, [r6, #0]
 800b3bc:	0606      	lsls	r6, r0, #24
 800b3be:	d501      	bpl.n	800b3c4 <_printf_i+0xbc>
 800b3c0:	681d      	ldr	r5, [r3, #0]
 800b3c2:	e003      	b.n	800b3cc <_printf_i+0xc4>
 800b3c4:	0645      	lsls	r5, r0, #25
 800b3c6:	d5fb      	bpl.n	800b3c0 <_printf_i+0xb8>
 800b3c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3cc:	2d00      	cmp	r5, #0
 800b3ce:	da03      	bge.n	800b3d8 <_printf_i+0xd0>
 800b3d0:	232d      	movs	r3, #45	@ 0x2d
 800b3d2:	426d      	negs	r5, r5
 800b3d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3d8:	4858      	ldr	r0, [pc, #352]	@ (800b53c <_printf_i+0x234>)
 800b3da:	230a      	movs	r3, #10
 800b3dc:	e011      	b.n	800b402 <_printf_i+0xfa>
 800b3de:	6821      	ldr	r1, [r4, #0]
 800b3e0:	6833      	ldr	r3, [r6, #0]
 800b3e2:	0608      	lsls	r0, r1, #24
 800b3e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3e8:	d402      	bmi.n	800b3f0 <_printf_i+0xe8>
 800b3ea:	0649      	lsls	r1, r1, #25
 800b3ec:	bf48      	it	mi
 800b3ee:	b2ad      	uxthmi	r5, r5
 800b3f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3f2:	4852      	ldr	r0, [pc, #328]	@ (800b53c <_printf_i+0x234>)
 800b3f4:	6033      	str	r3, [r6, #0]
 800b3f6:	bf14      	ite	ne
 800b3f8:	230a      	movne	r3, #10
 800b3fa:	2308      	moveq	r3, #8
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b402:	6866      	ldr	r6, [r4, #4]
 800b404:	60a6      	str	r6, [r4, #8]
 800b406:	2e00      	cmp	r6, #0
 800b408:	db05      	blt.n	800b416 <_printf_i+0x10e>
 800b40a:	6821      	ldr	r1, [r4, #0]
 800b40c:	432e      	orrs	r6, r5
 800b40e:	f021 0104 	bic.w	r1, r1, #4
 800b412:	6021      	str	r1, [r4, #0]
 800b414:	d04b      	beq.n	800b4ae <_printf_i+0x1a6>
 800b416:	4616      	mov	r6, r2
 800b418:	fbb5 f1f3 	udiv	r1, r5, r3
 800b41c:	fb03 5711 	mls	r7, r3, r1, r5
 800b420:	5dc7      	ldrb	r7, [r0, r7]
 800b422:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b426:	462f      	mov	r7, r5
 800b428:	42bb      	cmp	r3, r7
 800b42a:	460d      	mov	r5, r1
 800b42c:	d9f4      	bls.n	800b418 <_printf_i+0x110>
 800b42e:	2b08      	cmp	r3, #8
 800b430:	d10b      	bne.n	800b44a <_printf_i+0x142>
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	07df      	lsls	r7, r3, #31
 800b436:	d508      	bpl.n	800b44a <_printf_i+0x142>
 800b438:	6923      	ldr	r3, [r4, #16]
 800b43a:	6861      	ldr	r1, [r4, #4]
 800b43c:	4299      	cmp	r1, r3
 800b43e:	bfde      	ittt	le
 800b440:	2330      	movle	r3, #48	@ 0x30
 800b442:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b446:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b44a:	1b92      	subs	r2, r2, r6
 800b44c:	6122      	str	r2, [r4, #16]
 800b44e:	f8cd a000 	str.w	sl, [sp]
 800b452:	464b      	mov	r3, r9
 800b454:	aa03      	add	r2, sp, #12
 800b456:	4621      	mov	r1, r4
 800b458:	4640      	mov	r0, r8
 800b45a:	f7ff fee7 	bl	800b22c <_printf_common>
 800b45e:	3001      	adds	r0, #1
 800b460:	d14a      	bne.n	800b4f8 <_printf_i+0x1f0>
 800b462:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b466:	b004      	add	sp, #16
 800b468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46c:	6823      	ldr	r3, [r4, #0]
 800b46e:	f043 0320 	orr.w	r3, r3, #32
 800b472:	6023      	str	r3, [r4, #0]
 800b474:	4832      	ldr	r0, [pc, #200]	@ (800b540 <_printf_i+0x238>)
 800b476:	2778      	movs	r7, #120	@ 0x78
 800b478:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	6831      	ldr	r1, [r6, #0]
 800b480:	061f      	lsls	r7, r3, #24
 800b482:	f851 5b04 	ldr.w	r5, [r1], #4
 800b486:	d402      	bmi.n	800b48e <_printf_i+0x186>
 800b488:	065f      	lsls	r7, r3, #25
 800b48a:	bf48      	it	mi
 800b48c:	b2ad      	uxthmi	r5, r5
 800b48e:	6031      	str	r1, [r6, #0]
 800b490:	07d9      	lsls	r1, r3, #31
 800b492:	bf44      	itt	mi
 800b494:	f043 0320 	orrmi.w	r3, r3, #32
 800b498:	6023      	strmi	r3, [r4, #0]
 800b49a:	b11d      	cbz	r5, 800b4a4 <_printf_i+0x19c>
 800b49c:	2310      	movs	r3, #16
 800b49e:	e7ad      	b.n	800b3fc <_printf_i+0xf4>
 800b4a0:	4826      	ldr	r0, [pc, #152]	@ (800b53c <_printf_i+0x234>)
 800b4a2:	e7e9      	b.n	800b478 <_printf_i+0x170>
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	f023 0320 	bic.w	r3, r3, #32
 800b4aa:	6023      	str	r3, [r4, #0]
 800b4ac:	e7f6      	b.n	800b49c <_printf_i+0x194>
 800b4ae:	4616      	mov	r6, r2
 800b4b0:	e7bd      	b.n	800b42e <_printf_i+0x126>
 800b4b2:	6833      	ldr	r3, [r6, #0]
 800b4b4:	6825      	ldr	r5, [r4, #0]
 800b4b6:	6961      	ldr	r1, [r4, #20]
 800b4b8:	1d18      	adds	r0, r3, #4
 800b4ba:	6030      	str	r0, [r6, #0]
 800b4bc:	062e      	lsls	r6, r5, #24
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	d501      	bpl.n	800b4c6 <_printf_i+0x1be>
 800b4c2:	6019      	str	r1, [r3, #0]
 800b4c4:	e002      	b.n	800b4cc <_printf_i+0x1c4>
 800b4c6:	0668      	lsls	r0, r5, #25
 800b4c8:	d5fb      	bpl.n	800b4c2 <_printf_i+0x1ba>
 800b4ca:	8019      	strh	r1, [r3, #0]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	6123      	str	r3, [r4, #16]
 800b4d0:	4616      	mov	r6, r2
 800b4d2:	e7bc      	b.n	800b44e <_printf_i+0x146>
 800b4d4:	6833      	ldr	r3, [r6, #0]
 800b4d6:	1d1a      	adds	r2, r3, #4
 800b4d8:	6032      	str	r2, [r6, #0]
 800b4da:	681e      	ldr	r6, [r3, #0]
 800b4dc:	6862      	ldr	r2, [r4, #4]
 800b4de:	2100      	movs	r1, #0
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	f7f4 fefd 	bl	80002e0 <memchr>
 800b4e6:	b108      	cbz	r0, 800b4ec <_printf_i+0x1e4>
 800b4e8:	1b80      	subs	r0, r0, r6
 800b4ea:	6060      	str	r0, [r4, #4]
 800b4ec:	6863      	ldr	r3, [r4, #4]
 800b4ee:	6123      	str	r3, [r4, #16]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4f6:	e7aa      	b.n	800b44e <_printf_i+0x146>
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	4632      	mov	r2, r6
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	4640      	mov	r0, r8
 800b500:	47d0      	blx	sl
 800b502:	3001      	adds	r0, #1
 800b504:	d0ad      	beq.n	800b462 <_printf_i+0x15a>
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	079b      	lsls	r3, r3, #30
 800b50a:	d413      	bmi.n	800b534 <_printf_i+0x22c>
 800b50c:	68e0      	ldr	r0, [r4, #12]
 800b50e:	9b03      	ldr	r3, [sp, #12]
 800b510:	4298      	cmp	r0, r3
 800b512:	bfb8      	it	lt
 800b514:	4618      	movlt	r0, r3
 800b516:	e7a6      	b.n	800b466 <_printf_i+0x15e>
 800b518:	2301      	movs	r3, #1
 800b51a:	4632      	mov	r2, r6
 800b51c:	4649      	mov	r1, r9
 800b51e:	4640      	mov	r0, r8
 800b520:	47d0      	blx	sl
 800b522:	3001      	adds	r0, #1
 800b524:	d09d      	beq.n	800b462 <_printf_i+0x15a>
 800b526:	3501      	adds	r5, #1
 800b528:	68e3      	ldr	r3, [r4, #12]
 800b52a:	9903      	ldr	r1, [sp, #12]
 800b52c:	1a5b      	subs	r3, r3, r1
 800b52e:	42ab      	cmp	r3, r5
 800b530:	dcf2      	bgt.n	800b518 <_printf_i+0x210>
 800b532:	e7eb      	b.n	800b50c <_printf_i+0x204>
 800b534:	2500      	movs	r5, #0
 800b536:	f104 0619 	add.w	r6, r4, #25
 800b53a:	e7f5      	b.n	800b528 <_printf_i+0x220>
 800b53c:	0800fe30 	.word	0x0800fe30
 800b540:	0800fe41 	.word	0x0800fe41

0800b544 <_scanf_float>:
 800b544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b548:	b087      	sub	sp, #28
 800b54a:	4691      	mov	r9, r2
 800b54c:	9303      	str	r3, [sp, #12]
 800b54e:	688b      	ldr	r3, [r1, #8]
 800b550:	1e5a      	subs	r2, r3, #1
 800b552:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b556:	bf81      	itttt	hi
 800b558:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b55c:	eb03 0b05 	addhi.w	fp, r3, r5
 800b560:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b564:	608b      	strhi	r3, [r1, #8]
 800b566:	680b      	ldr	r3, [r1, #0]
 800b568:	460a      	mov	r2, r1
 800b56a:	f04f 0500 	mov.w	r5, #0
 800b56e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b572:	f842 3b1c 	str.w	r3, [r2], #28
 800b576:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b57a:	4680      	mov	r8, r0
 800b57c:	460c      	mov	r4, r1
 800b57e:	bf98      	it	ls
 800b580:	f04f 0b00 	movls.w	fp, #0
 800b584:	9201      	str	r2, [sp, #4]
 800b586:	4616      	mov	r6, r2
 800b588:	46aa      	mov	sl, r5
 800b58a:	462f      	mov	r7, r5
 800b58c:	9502      	str	r5, [sp, #8]
 800b58e:	68a2      	ldr	r2, [r4, #8]
 800b590:	b15a      	cbz	r2, 800b5aa <_scanf_float+0x66>
 800b592:	f8d9 3000 	ldr.w	r3, [r9]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b4e      	cmp	r3, #78	@ 0x4e
 800b59a:	d863      	bhi.n	800b664 <_scanf_float+0x120>
 800b59c:	2b40      	cmp	r3, #64	@ 0x40
 800b59e:	d83b      	bhi.n	800b618 <_scanf_float+0xd4>
 800b5a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b5a4:	b2c8      	uxtb	r0, r1
 800b5a6:	280e      	cmp	r0, #14
 800b5a8:	d939      	bls.n	800b61e <_scanf_float+0xda>
 800b5aa:	b11f      	cbz	r7, 800b5b4 <_scanf_float+0x70>
 800b5ac:	6823      	ldr	r3, [r4, #0]
 800b5ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5b2:	6023      	str	r3, [r4, #0]
 800b5b4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b5b8:	f1ba 0f01 	cmp.w	sl, #1
 800b5bc:	f200 8114 	bhi.w	800b7e8 <_scanf_float+0x2a4>
 800b5c0:	9b01      	ldr	r3, [sp, #4]
 800b5c2:	429e      	cmp	r6, r3
 800b5c4:	f200 8105 	bhi.w	800b7d2 <_scanf_float+0x28e>
 800b5c8:	2001      	movs	r0, #1
 800b5ca:	b007      	add	sp, #28
 800b5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b5d4:	2a0d      	cmp	r2, #13
 800b5d6:	d8e8      	bhi.n	800b5aa <_scanf_float+0x66>
 800b5d8:	a101      	add	r1, pc, #4	@ (adr r1, 800b5e0 <_scanf_float+0x9c>)
 800b5da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b5de:	bf00      	nop
 800b5e0:	0800b729 	.word	0x0800b729
 800b5e4:	0800b5ab 	.word	0x0800b5ab
 800b5e8:	0800b5ab 	.word	0x0800b5ab
 800b5ec:	0800b5ab 	.word	0x0800b5ab
 800b5f0:	0800b785 	.word	0x0800b785
 800b5f4:	0800b75f 	.word	0x0800b75f
 800b5f8:	0800b5ab 	.word	0x0800b5ab
 800b5fc:	0800b5ab 	.word	0x0800b5ab
 800b600:	0800b737 	.word	0x0800b737
 800b604:	0800b5ab 	.word	0x0800b5ab
 800b608:	0800b5ab 	.word	0x0800b5ab
 800b60c:	0800b5ab 	.word	0x0800b5ab
 800b610:	0800b5ab 	.word	0x0800b5ab
 800b614:	0800b6f3 	.word	0x0800b6f3
 800b618:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b61c:	e7da      	b.n	800b5d4 <_scanf_float+0x90>
 800b61e:	290e      	cmp	r1, #14
 800b620:	d8c3      	bhi.n	800b5aa <_scanf_float+0x66>
 800b622:	a001      	add	r0, pc, #4	@ (adr r0, 800b628 <_scanf_float+0xe4>)
 800b624:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b628:	0800b6e3 	.word	0x0800b6e3
 800b62c:	0800b5ab 	.word	0x0800b5ab
 800b630:	0800b6e3 	.word	0x0800b6e3
 800b634:	0800b773 	.word	0x0800b773
 800b638:	0800b5ab 	.word	0x0800b5ab
 800b63c:	0800b685 	.word	0x0800b685
 800b640:	0800b6c9 	.word	0x0800b6c9
 800b644:	0800b6c9 	.word	0x0800b6c9
 800b648:	0800b6c9 	.word	0x0800b6c9
 800b64c:	0800b6c9 	.word	0x0800b6c9
 800b650:	0800b6c9 	.word	0x0800b6c9
 800b654:	0800b6c9 	.word	0x0800b6c9
 800b658:	0800b6c9 	.word	0x0800b6c9
 800b65c:	0800b6c9 	.word	0x0800b6c9
 800b660:	0800b6c9 	.word	0x0800b6c9
 800b664:	2b6e      	cmp	r3, #110	@ 0x6e
 800b666:	d809      	bhi.n	800b67c <_scanf_float+0x138>
 800b668:	2b60      	cmp	r3, #96	@ 0x60
 800b66a:	d8b1      	bhi.n	800b5d0 <_scanf_float+0x8c>
 800b66c:	2b54      	cmp	r3, #84	@ 0x54
 800b66e:	d07b      	beq.n	800b768 <_scanf_float+0x224>
 800b670:	2b59      	cmp	r3, #89	@ 0x59
 800b672:	d19a      	bne.n	800b5aa <_scanf_float+0x66>
 800b674:	2d07      	cmp	r5, #7
 800b676:	d198      	bne.n	800b5aa <_scanf_float+0x66>
 800b678:	2508      	movs	r5, #8
 800b67a:	e02f      	b.n	800b6dc <_scanf_float+0x198>
 800b67c:	2b74      	cmp	r3, #116	@ 0x74
 800b67e:	d073      	beq.n	800b768 <_scanf_float+0x224>
 800b680:	2b79      	cmp	r3, #121	@ 0x79
 800b682:	e7f6      	b.n	800b672 <_scanf_float+0x12e>
 800b684:	6821      	ldr	r1, [r4, #0]
 800b686:	05c8      	lsls	r0, r1, #23
 800b688:	d51e      	bpl.n	800b6c8 <_scanf_float+0x184>
 800b68a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b68e:	6021      	str	r1, [r4, #0]
 800b690:	3701      	adds	r7, #1
 800b692:	f1bb 0f00 	cmp.w	fp, #0
 800b696:	d003      	beq.n	800b6a0 <_scanf_float+0x15c>
 800b698:	3201      	adds	r2, #1
 800b69a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800b69e:	60a2      	str	r2, [r4, #8]
 800b6a0:	68a3      	ldr	r3, [r4, #8]
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	60a3      	str	r3, [r4, #8]
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	6123      	str	r3, [r4, #16]
 800b6ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f8c9 3004 	str.w	r3, [r9, #4]
 800b6b8:	f340 8082 	ble.w	800b7c0 <_scanf_float+0x27c>
 800b6bc:	f8d9 3000 	ldr.w	r3, [r9]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	f8c9 3000 	str.w	r3, [r9]
 800b6c6:	e762      	b.n	800b58e <_scanf_float+0x4a>
 800b6c8:	eb1a 0105 	adds.w	r1, sl, r5
 800b6cc:	f47f af6d 	bne.w	800b5aa <_scanf_float+0x66>
 800b6d0:	6822      	ldr	r2, [r4, #0]
 800b6d2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b6d6:	6022      	str	r2, [r4, #0]
 800b6d8:	460d      	mov	r5, r1
 800b6da:	468a      	mov	sl, r1
 800b6dc:	f806 3b01 	strb.w	r3, [r6], #1
 800b6e0:	e7de      	b.n	800b6a0 <_scanf_float+0x15c>
 800b6e2:	6822      	ldr	r2, [r4, #0]
 800b6e4:	0610      	lsls	r0, r2, #24
 800b6e6:	f57f af60 	bpl.w	800b5aa <_scanf_float+0x66>
 800b6ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b6ee:	6022      	str	r2, [r4, #0]
 800b6f0:	e7f4      	b.n	800b6dc <_scanf_float+0x198>
 800b6f2:	f1ba 0f00 	cmp.w	sl, #0
 800b6f6:	d10c      	bne.n	800b712 <_scanf_float+0x1ce>
 800b6f8:	b977      	cbnz	r7, 800b718 <_scanf_float+0x1d4>
 800b6fa:	6822      	ldr	r2, [r4, #0]
 800b6fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b700:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b704:	d108      	bne.n	800b718 <_scanf_float+0x1d4>
 800b706:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b70a:	6022      	str	r2, [r4, #0]
 800b70c:	f04f 0a01 	mov.w	sl, #1
 800b710:	e7e4      	b.n	800b6dc <_scanf_float+0x198>
 800b712:	f1ba 0f02 	cmp.w	sl, #2
 800b716:	d050      	beq.n	800b7ba <_scanf_float+0x276>
 800b718:	2d01      	cmp	r5, #1
 800b71a:	d002      	beq.n	800b722 <_scanf_float+0x1de>
 800b71c:	2d04      	cmp	r5, #4
 800b71e:	f47f af44 	bne.w	800b5aa <_scanf_float+0x66>
 800b722:	3501      	adds	r5, #1
 800b724:	b2ed      	uxtb	r5, r5
 800b726:	e7d9      	b.n	800b6dc <_scanf_float+0x198>
 800b728:	f1ba 0f01 	cmp.w	sl, #1
 800b72c:	f47f af3d 	bne.w	800b5aa <_scanf_float+0x66>
 800b730:	f04f 0a02 	mov.w	sl, #2
 800b734:	e7d2      	b.n	800b6dc <_scanf_float+0x198>
 800b736:	b975      	cbnz	r5, 800b756 <_scanf_float+0x212>
 800b738:	2f00      	cmp	r7, #0
 800b73a:	f47f af37 	bne.w	800b5ac <_scanf_float+0x68>
 800b73e:	6822      	ldr	r2, [r4, #0]
 800b740:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b744:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b748:	f040 80fc 	bne.w	800b944 <_scanf_float+0x400>
 800b74c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b750:	6022      	str	r2, [r4, #0]
 800b752:	2501      	movs	r5, #1
 800b754:	e7c2      	b.n	800b6dc <_scanf_float+0x198>
 800b756:	2d03      	cmp	r5, #3
 800b758:	d0e3      	beq.n	800b722 <_scanf_float+0x1de>
 800b75a:	2d05      	cmp	r5, #5
 800b75c:	e7df      	b.n	800b71e <_scanf_float+0x1da>
 800b75e:	2d02      	cmp	r5, #2
 800b760:	f47f af23 	bne.w	800b5aa <_scanf_float+0x66>
 800b764:	2503      	movs	r5, #3
 800b766:	e7b9      	b.n	800b6dc <_scanf_float+0x198>
 800b768:	2d06      	cmp	r5, #6
 800b76a:	f47f af1e 	bne.w	800b5aa <_scanf_float+0x66>
 800b76e:	2507      	movs	r5, #7
 800b770:	e7b4      	b.n	800b6dc <_scanf_float+0x198>
 800b772:	6822      	ldr	r2, [r4, #0]
 800b774:	0591      	lsls	r1, r2, #22
 800b776:	f57f af18 	bpl.w	800b5aa <_scanf_float+0x66>
 800b77a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b77e:	6022      	str	r2, [r4, #0]
 800b780:	9702      	str	r7, [sp, #8]
 800b782:	e7ab      	b.n	800b6dc <_scanf_float+0x198>
 800b784:	6822      	ldr	r2, [r4, #0]
 800b786:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b78a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b78e:	d005      	beq.n	800b79c <_scanf_float+0x258>
 800b790:	0550      	lsls	r0, r2, #21
 800b792:	f57f af0a 	bpl.w	800b5aa <_scanf_float+0x66>
 800b796:	2f00      	cmp	r7, #0
 800b798:	f000 80d4 	beq.w	800b944 <_scanf_float+0x400>
 800b79c:	0591      	lsls	r1, r2, #22
 800b79e:	bf58      	it	pl
 800b7a0:	9902      	ldrpl	r1, [sp, #8]
 800b7a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b7a6:	bf58      	it	pl
 800b7a8:	1a79      	subpl	r1, r7, r1
 800b7aa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b7ae:	bf58      	it	pl
 800b7b0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b7b4:	6022      	str	r2, [r4, #0]
 800b7b6:	2700      	movs	r7, #0
 800b7b8:	e790      	b.n	800b6dc <_scanf_float+0x198>
 800b7ba:	f04f 0a03 	mov.w	sl, #3
 800b7be:	e78d      	b.n	800b6dc <_scanf_float+0x198>
 800b7c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	4798      	blx	r3
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	f43f aedf 	beq.w	800b58e <_scanf_float+0x4a>
 800b7d0:	e6eb      	b.n	800b5aa <_scanf_float+0x66>
 800b7d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7da:	464a      	mov	r2, r9
 800b7dc:	4640      	mov	r0, r8
 800b7de:	4798      	blx	r3
 800b7e0:	6923      	ldr	r3, [r4, #16]
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	6123      	str	r3, [r4, #16]
 800b7e6:	e6eb      	b.n	800b5c0 <_scanf_float+0x7c>
 800b7e8:	1e6b      	subs	r3, r5, #1
 800b7ea:	2b06      	cmp	r3, #6
 800b7ec:	d824      	bhi.n	800b838 <_scanf_float+0x2f4>
 800b7ee:	2d02      	cmp	r5, #2
 800b7f0:	d836      	bhi.n	800b860 <_scanf_float+0x31c>
 800b7f2:	9b01      	ldr	r3, [sp, #4]
 800b7f4:	429e      	cmp	r6, r3
 800b7f6:	f67f aee7 	bls.w	800b5c8 <_scanf_float+0x84>
 800b7fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b802:	464a      	mov	r2, r9
 800b804:	4640      	mov	r0, r8
 800b806:	4798      	blx	r3
 800b808:	6923      	ldr	r3, [r4, #16]
 800b80a:	3b01      	subs	r3, #1
 800b80c:	6123      	str	r3, [r4, #16]
 800b80e:	e7f0      	b.n	800b7f2 <_scanf_float+0x2ae>
 800b810:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b814:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b818:	464a      	mov	r2, r9
 800b81a:	4640      	mov	r0, r8
 800b81c:	4798      	blx	r3
 800b81e:	6923      	ldr	r3, [r4, #16]
 800b820:	3b01      	subs	r3, #1
 800b822:	6123      	str	r3, [r4, #16]
 800b824:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b828:	fa5f fa8a 	uxtb.w	sl, sl
 800b82c:	f1ba 0f02 	cmp.w	sl, #2
 800b830:	d1ee      	bne.n	800b810 <_scanf_float+0x2cc>
 800b832:	3d03      	subs	r5, #3
 800b834:	b2ed      	uxtb	r5, r5
 800b836:	1b76      	subs	r6, r6, r5
 800b838:	6823      	ldr	r3, [r4, #0]
 800b83a:	05da      	lsls	r2, r3, #23
 800b83c:	d530      	bpl.n	800b8a0 <_scanf_float+0x35c>
 800b83e:	055b      	lsls	r3, r3, #21
 800b840:	d511      	bpl.n	800b866 <_scanf_float+0x322>
 800b842:	9b01      	ldr	r3, [sp, #4]
 800b844:	429e      	cmp	r6, r3
 800b846:	f67f aebf 	bls.w	800b5c8 <_scanf_float+0x84>
 800b84a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b84e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b852:	464a      	mov	r2, r9
 800b854:	4640      	mov	r0, r8
 800b856:	4798      	blx	r3
 800b858:	6923      	ldr	r3, [r4, #16]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	6123      	str	r3, [r4, #16]
 800b85e:	e7f0      	b.n	800b842 <_scanf_float+0x2fe>
 800b860:	46aa      	mov	sl, r5
 800b862:	46b3      	mov	fp, r6
 800b864:	e7de      	b.n	800b824 <_scanf_float+0x2e0>
 800b866:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	2965      	cmp	r1, #101	@ 0x65
 800b86e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b872:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800b876:	6123      	str	r3, [r4, #16]
 800b878:	d00c      	beq.n	800b894 <_scanf_float+0x350>
 800b87a:	2945      	cmp	r1, #69	@ 0x45
 800b87c:	d00a      	beq.n	800b894 <_scanf_float+0x350>
 800b87e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b882:	464a      	mov	r2, r9
 800b884:	4640      	mov	r0, r8
 800b886:	4798      	blx	r3
 800b888:	6923      	ldr	r3, [r4, #16]
 800b88a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b88e:	3b01      	subs	r3, #1
 800b890:	1eb5      	subs	r5, r6, #2
 800b892:	6123      	str	r3, [r4, #16]
 800b894:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b898:	464a      	mov	r2, r9
 800b89a:	4640      	mov	r0, r8
 800b89c:	4798      	blx	r3
 800b89e:	462e      	mov	r6, r5
 800b8a0:	6822      	ldr	r2, [r4, #0]
 800b8a2:	f012 0210 	ands.w	r2, r2, #16
 800b8a6:	d001      	beq.n	800b8ac <_scanf_float+0x368>
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	e68e      	b.n	800b5ca <_scanf_float+0x86>
 800b8ac:	7032      	strb	r2, [r6, #0]
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b8b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8b8:	d123      	bne.n	800b902 <_scanf_float+0x3be>
 800b8ba:	9b02      	ldr	r3, [sp, #8]
 800b8bc:	429f      	cmp	r7, r3
 800b8be:	d00a      	beq.n	800b8d6 <_scanf_float+0x392>
 800b8c0:	1bda      	subs	r2, r3, r7
 800b8c2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b8c6:	429e      	cmp	r6, r3
 800b8c8:	bf28      	it	cs
 800b8ca:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b8ce:	491e      	ldr	r1, [pc, #120]	@ (800b948 <_scanf_float+0x404>)
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f000 f911 	bl	800baf8 <siprintf>
 800b8d6:	9901      	ldr	r1, [sp, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	4640      	mov	r0, r8
 800b8dc:	f002 fb6a 	bl	800dfb4 <_strtod_r>
 800b8e0:	9b03      	ldr	r3, [sp, #12]
 800b8e2:	6821      	ldr	r1, [r4, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f011 0f02 	tst.w	r1, #2
 800b8ea:	f103 0204 	add.w	r2, r3, #4
 800b8ee:	d015      	beq.n	800b91c <_scanf_float+0x3d8>
 800b8f0:	9903      	ldr	r1, [sp, #12]
 800b8f2:	600a      	str	r2, [r1, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	ed83 0b00 	vstr	d0, [r3]
 800b8fa:	68e3      	ldr	r3, [r4, #12]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	60e3      	str	r3, [r4, #12]
 800b900:	e7d2      	b.n	800b8a8 <_scanf_float+0x364>
 800b902:	9b04      	ldr	r3, [sp, #16]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d0e6      	beq.n	800b8d6 <_scanf_float+0x392>
 800b908:	9905      	ldr	r1, [sp, #20]
 800b90a:	230a      	movs	r3, #10
 800b90c:	3101      	adds	r1, #1
 800b90e:	4640      	mov	r0, r8
 800b910:	f002 fbd0 	bl	800e0b4 <_strtol_r>
 800b914:	9b04      	ldr	r3, [sp, #16]
 800b916:	9e05      	ldr	r6, [sp, #20]
 800b918:	1ac2      	subs	r2, r0, r3
 800b91a:	e7d2      	b.n	800b8c2 <_scanf_float+0x37e>
 800b91c:	f011 0f04 	tst.w	r1, #4
 800b920:	9903      	ldr	r1, [sp, #12]
 800b922:	600a      	str	r2, [r1, #0]
 800b924:	d1e6      	bne.n	800b8f4 <_scanf_float+0x3b0>
 800b926:	eeb4 0b40 	vcmp.f64	d0, d0
 800b92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b92e:	681d      	ldr	r5, [r3, #0]
 800b930:	d705      	bvc.n	800b93e <_scanf_float+0x3fa>
 800b932:	4806      	ldr	r0, [pc, #24]	@ (800b94c <_scanf_float+0x408>)
 800b934:	f000 f9f4 	bl	800bd20 <nanf>
 800b938:	ed85 0a00 	vstr	s0, [r5]
 800b93c:	e7dd      	b.n	800b8fa <_scanf_float+0x3b6>
 800b93e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b942:	e7f9      	b.n	800b938 <_scanf_float+0x3f4>
 800b944:	2700      	movs	r7, #0
 800b946:	e635      	b.n	800b5b4 <_scanf_float+0x70>
 800b948:	0800fe52 	.word	0x0800fe52
 800b94c:	0800ffae 	.word	0x0800ffae

0800b950 <std>:
 800b950:	2300      	movs	r3, #0
 800b952:	b510      	push	{r4, lr}
 800b954:	4604      	mov	r4, r0
 800b956:	e9c0 3300 	strd	r3, r3, [r0]
 800b95a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b95e:	6083      	str	r3, [r0, #8]
 800b960:	8181      	strh	r1, [r0, #12]
 800b962:	6643      	str	r3, [r0, #100]	@ 0x64
 800b964:	81c2      	strh	r2, [r0, #14]
 800b966:	6183      	str	r3, [r0, #24]
 800b968:	4619      	mov	r1, r3
 800b96a:	2208      	movs	r2, #8
 800b96c:	305c      	adds	r0, #92	@ 0x5c
 800b96e:	f000 f956 	bl	800bc1e <memset>
 800b972:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a8 <std+0x58>)
 800b974:	6263      	str	r3, [r4, #36]	@ 0x24
 800b976:	4b0d      	ldr	r3, [pc, #52]	@ (800b9ac <std+0x5c>)
 800b978:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b97a:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b0 <std+0x60>)
 800b97c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b97e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b4 <std+0x64>)
 800b980:	6323      	str	r3, [r4, #48]	@ 0x30
 800b982:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b8 <std+0x68>)
 800b984:	6224      	str	r4, [r4, #32]
 800b986:	429c      	cmp	r4, r3
 800b988:	d006      	beq.n	800b998 <std+0x48>
 800b98a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b98e:	4294      	cmp	r4, r2
 800b990:	d002      	beq.n	800b998 <std+0x48>
 800b992:	33d0      	adds	r3, #208	@ 0xd0
 800b994:	429c      	cmp	r4, r3
 800b996:	d105      	bne.n	800b9a4 <std+0x54>
 800b998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9a0:	f000 b9ba 	b.w	800bd18 <__retarget_lock_init_recursive>
 800b9a4:	bd10      	pop	{r4, pc}
 800b9a6:	bf00      	nop
 800b9a8:	0800bb95 	.word	0x0800bb95
 800b9ac:	0800bbbb 	.word	0x0800bbbb
 800b9b0:	0800bbf3 	.word	0x0800bbf3
 800b9b4:	0800bc17 	.word	0x0800bc17
 800b9b8:	240034d8 	.word	0x240034d8

0800b9bc <stdio_exit_handler>:
 800b9bc:	4a02      	ldr	r2, [pc, #8]	@ (800b9c8 <stdio_exit_handler+0xc>)
 800b9be:	4903      	ldr	r1, [pc, #12]	@ (800b9cc <stdio_exit_handler+0x10>)
 800b9c0:	4803      	ldr	r0, [pc, #12]	@ (800b9d0 <stdio_exit_handler+0x14>)
 800b9c2:	f000 b87b 	b.w	800babc <_fwalk_sglue>
 800b9c6:	bf00      	nop
 800b9c8:	24000010 	.word	0x24000010
 800b9cc:	0800ed31 	.word	0x0800ed31
 800b9d0:	24000020 	.word	0x24000020

0800b9d4 <cleanup_stdio>:
 800b9d4:	6841      	ldr	r1, [r0, #4]
 800b9d6:	4b0c      	ldr	r3, [pc, #48]	@ (800ba08 <cleanup_stdio+0x34>)
 800b9d8:	4299      	cmp	r1, r3
 800b9da:	b510      	push	{r4, lr}
 800b9dc:	4604      	mov	r4, r0
 800b9de:	d001      	beq.n	800b9e4 <cleanup_stdio+0x10>
 800b9e0:	f003 f9a6 	bl	800ed30 <_fflush_r>
 800b9e4:	68a1      	ldr	r1, [r4, #8]
 800b9e6:	4b09      	ldr	r3, [pc, #36]	@ (800ba0c <cleanup_stdio+0x38>)
 800b9e8:	4299      	cmp	r1, r3
 800b9ea:	d002      	beq.n	800b9f2 <cleanup_stdio+0x1e>
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f003 f99f 	bl	800ed30 <_fflush_r>
 800b9f2:	68e1      	ldr	r1, [r4, #12]
 800b9f4:	4b06      	ldr	r3, [pc, #24]	@ (800ba10 <cleanup_stdio+0x3c>)
 800b9f6:	4299      	cmp	r1, r3
 800b9f8:	d004      	beq.n	800ba04 <cleanup_stdio+0x30>
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba00:	f003 b996 	b.w	800ed30 <_fflush_r>
 800ba04:	bd10      	pop	{r4, pc}
 800ba06:	bf00      	nop
 800ba08:	240034d8 	.word	0x240034d8
 800ba0c:	24003540 	.word	0x24003540
 800ba10:	240035a8 	.word	0x240035a8

0800ba14 <global_stdio_init.part.0>:
 800ba14:	b510      	push	{r4, lr}
 800ba16:	4b0b      	ldr	r3, [pc, #44]	@ (800ba44 <global_stdio_init.part.0+0x30>)
 800ba18:	4c0b      	ldr	r4, [pc, #44]	@ (800ba48 <global_stdio_init.part.0+0x34>)
 800ba1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ba4c <global_stdio_init.part.0+0x38>)
 800ba1c:	601a      	str	r2, [r3, #0]
 800ba1e:	4620      	mov	r0, r4
 800ba20:	2200      	movs	r2, #0
 800ba22:	2104      	movs	r1, #4
 800ba24:	f7ff ff94 	bl	800b950 <std>
 800ba28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	2109      	movs	r1, #9
 800ba30:	f7ff ff8e 	bl	800b950 <std>
 800ba34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba38:	2202      	movs	r2, #2
 800ba3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba3e:	2112      	movs	r1, #18
 800ba40:	f7ff bf86 	b.w	800b950 <std>
 800ba44:	24003610 	.word	0x24003610
 800ba48:	240034d8 	.word	0x240034d8
 800ba4c:	0800b9bd 	.word	0x0800b9bd

0800ba50 <__sfp_lock_acquire>:
 800ba50:	4801      	ldr	r0, [pc, #4]	@ (800ba58 <__sfp_lock_acquire+0x8>)
 800ba52:	f000 b962 	b.w	800bd1a <__retarget_lock_acquire_recursive>
 800ba56:	bf00      	nop
 800ba58:	24003619 	.word	0x24003619

0800ba5c <__sfp_lock_release>:
 800ba5c:	4801      	ldr	r0, [pc, #4]	@ (800ba64 <__sfp_lock_release+0x8>)
 800ba5e:	f000 b95d 	b.w	800bd1c <__retarget_lock_release_recursive>
 800ba62:	bf00      	nop
 800ba64:	24003619 	.word	0x24003619

0800ba68 <__sinit>:
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	f7ff fff0 	bl	800ba50 <__sfp_lock_acquire>
 800ba70:	6a23      	ldr	r3, [r4, #32]
 800ba72:	b11b      	cbz	r3, 800ba7c <__sinit+0x14>
 800ba74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba78:	f7ff bff0 	b.w	800ba5c <__sfp_lock_release>
 800ba7c:	4b04      	ldr	r3, [pc, #16]	@ (800ba90 <__sinit+0x28>)
 800ba7e:	6223      	str	r3, [r4, #32]
 800ba80:	4b04      	ldr	r3, [pc, #16]	@ (800ba94 <__sinit+0x2c>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1f5      	bne.n	800ba74 <__sinit+0xc>
 800ba88:	f7ff ffc4 	bl	800ba14 <global_stdio_init.part.0>
 800ba8c:	e7f2      	b.n	800ba74 <__sinit+0xc>
 800ba8e:	bf00      	nop
 800ba90:	0800b9d5 	.word	0x0800b9d5
 800ba94:	24003610 	.word	0x24003610

0800ba98 <fiprintf>:
 800ba98:	b40e      	push	{r1, r2, r3}
 800ba9a:	b503      	push	{r0, r1, lr}
 800ba9c:	4601      	mov	r1, r0
 800ba9e:	ab03      	add	r3, sp, #12
 800baa0:	4805      	ldr	r0, [pc, #20]	@ (800bab8 <fiprintf+0x20>)
 800baa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800baa6:	6800      	ldr	r0, [r0, #0]
 800baa8:	9301      	str	r3, [sp, #4]
 800baaa:	f002 fe57 	bl	800e75c <_vfiprintf_r>
 800baae:	b002      	add	sp, #8
 800bab0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bab4:	b003      	add	sp, #12
 800bab6:	4770      	bx	lr
 800bab8:	2400001c 	.word	0x2400001c

0800babc <_fwalk_sglue>:
 800babc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bac0:	4607      	mov	r7, r0
 800bac2:	4688      	mov	r8, r1
 800bac4:	4614      	mov	r4, r2
 800bac6:	2600      	movs	r6, #0
 800bac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bacc:	f1b9 0901 	subs.w	r9, r9, #1
 800bad0:	d505      	bpl.n	800bade <_fwalk_sglue+0x22>
 800bad2:	6824      	ldr	r4, [r4, #0]
 800bad4:	2c00      	cmp	r4, #0
 800bad6:	d1f7      	bne.n	800bac8 <_fwalk_sglue+0xc>
 800bad8:	4630      	mov	r0, r6
 800bada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bade:	89ab      	ldrh	r3, [r5, #12]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d907      	bls.n	800baf4 <_fwalk_sglue+0x38>
 800bae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bae8:	3301      	adds	r3, #1
 800baea:	d003      	beq.n	800baf4 <_fwalk_sglue+0x38>
 800baec:	4629      	mov	r1, r5
 800baee:	4638      	mov	r0, r7
 800baf0:	47c0      	blx	r8
 800baf2:	4306      	orrs	r6, r0
 800baf4:	3568      	adds	r5, #104	@ 0x68
 800baf6:	e7e9      	b.n	800bacc <_fwalk_sglue+0x10>

0800baf8 <siprintf>:
 800baf8:	b40e      	push	{r1, r2, r3}
 800bafa:	b510      	push	{r4, lr}
 800bafc:	b09d      	sub	sp, #116	@ 0x74
 800bafe:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bb00:	9002      	str	r0, [sp, #8]
 800bb02:	9006      	str	r0, [sp, #24]
 800bb04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb08:	480a      	ldr	r0, [pc, #40]	@ (800bb34 <siprintf+0x3c>)
 800bb0a:	9107      	str	r1, [sp, #28]
 800bb0c:	9104      	str	r1, [sp, #16]
 800bb0e:	490a      	ldr	r1, [pc, #40]	@ (800bb38 <siprintf+0x40>)
 800bb10:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb14:	9105      	str	r1, [sp, #20]
 800bb16:	2400      	movs	r4, #0
 800bb18:	a902      	add	r1, sp, #8
 800bb1a:	6800      	ldr	r0, [r0, #0]
 800bb1c:	9301      	str	r3, [sp, #4]
 800bb1e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bb20:	f002 fb26 	bl	800e170 <_svfiprintf_r>
 800bb24:	9b02      	ldr	r3, [sp, #8]
 800bb26:	701c      	strb	r4, [r3, #0]
 800bb28:	b01d      	add	sp, #116	@ 0x74
 800bb2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb2e:	b003      	add	sp, #12
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	2400001c 	.word	0x2400001c
 800bb38:	ffff0208 	.word	0xffff0208

0800bb3c <siscanf>:
 800bb3c:	b40e      	push	{r1, r2, r3}
 800bb3e:	b570      	push	{r4, r5, r6, lr}
 800bb40:	b09d      	sub	sp, #116	@ 0x74
 800bb42:	ac21      	add	r4, sp, #132	@ 0x84
 800bb44:	2500      	movs	r5, #0
 800bb46:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800bb4a:	f854 6b04 	ldr.w	r6, [r4], #4
 800bb4e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bb52:	951b      	str	r5, [sp, #108]	@ 0x6c
 800bb54:	9002      	str	r0, [sp, #8]
 800bb56:	9006      	str	r0, [sp, #24]
 800bb58:	f7f4 fc12 	bl	8000380 <strlen>
 800bb5c:	4b0b      	ldr	r3, [pc, #44]	@ (800bb8c <siscanf+0x50>)
 800bb5e:	9003      	str	r0, [sp, #12]
 800bb60:	9007      	str	r0, [sp, #28]
 800bb62:	480b      	ldr	r0, [pc, #44]	@ (800bb90 <siscanf+0x54>)
 800bb64:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb6a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb6e:	4632      	mov	r2, r6
 800bb70:	4623      	mov	r3, r4
 800bb72:	a902      	add	r1, sp, #8
 800bb74:	6800      	ldr	r0, [r0, #0]
 800bb76:	950f      	str	r5, [sp, #60]	@ 0x3c
 800bb78:	9514      	str	r5, [sp, #80]	@ 0x50
 800bb7a:	9401      	str	r4, [sp, #4]
 800bb7c:	f002 fc4e 	bl	800e41c <__ssvfiscanf_r>
 800bb80:	b01d      	add	sp, #116	@ 0x74
 800bb82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb86:	b003      	add	sp, #12
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	0800bbb7 	.word	0x0800bbb7
 800bb90:	2400001c 	.word	0x2400001c

0800bb94 <__sread>:
 800bb94:	b510      	push	{r4, lr}
 800bb96:	460c      	mov	r4, r1
 800bb98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb9c:	f000 f86e 	bl	800bc7c <_read_r>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	bfab      	itete	ge
 800bba4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bba6:	89a3      	ldrhlt	r3, [r4, #12]
 800bba8:	181b      	addge	r3, r3, r0
 800bbaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bbae:	bfac      	ite	ge
 800bbb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bbb2:	81a3      	strhlt	r3, [r4, #12]
 800bbb4:	bd10      	pop	{r4, pc}

0800bbb6 <__seofread>:
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	4770      	bx	lr

0800bbba <__swrite>:
 800bbba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbbe:	461f      	mov	r7, r3
 800bbc0:	898b      	ldrh	r3, [r1, #12]
 800bbc2:	05db      	lsls	r3, r3, #23
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	4616      	mov	r6, r2
 800bbca:	d505      	bpl.n	800bbd8 <__swrite+0x1e>
 800bbcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f000 f840 	bl	800bc58 <_lseek_r>
 800bbd8:	89a3      	ldrh	r3, [r4, #12]
 800bbda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bbe2:	81a3      	strh	r3, [r4, #12]
 800bbe4:	4632      	mov	r2, r6
 800bbe6:	463b      	mov	r3, r7
 800bbe8:	4628      	mov	r0, r5
 800bbea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbee:	f000 b857 	b.w	800bca0 <_write_r>

0800bbf2 <__sseek>:
 800bbf2:	b510      	push	{r4, lr}
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbfa:	f000 f82d 	bl	800bc58 <_lseek_r>
 800bbfe:	1c43      	adds	r3, r0, #1
 800bc00:	89a3      	ldrh	r3, [r4, #12]
 800bc02:	bf15      	itete	ne
 800bc04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc0e:	81a3      	strheq	r3, [r4, #12]
 800bc10:	bf18      	it	ne
 800bc12:	81a3      	strhne	r3, [r4, #12]
 800bc14:	bd10      	pop	{r4, pc}

0800bc16 <__sclose>:
 800bc16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc1a:	f000 b80d 	b.w	800bc38 <_close_r>

0800bc1e <memset>:
 800bc1e:	4402      	add	r2, r0
 800bc20:	4603      	mov	r3, r0
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d100      	bne.n	800bc28 <memset+0xa>
 800bc26:	4770      	bx	lr
 800bc28:	f803 1b01 	strb.w	r1, [r3], #1
 800bc2c:	e7f9      	b.n	800bc22 <memset+0x4>
	...

0800bc30 <_localeconv_r>:
 800bc30:	4800      	ldr	r0, [pc, #0]	@ (800bc34 <_localeconv_r+0x4>)
 800bc32:	4770      	bx	lr
 800bc34:	2400015c 	.word	0x2400015c

0800bc38 <_close_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	4d06      	ldr	r5, [pc, #24]	@ (800bc54 <_close_r+0x1c>)
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	4604      	mov	r4, r0
 800bc40:	4608      	mov	r0, r1
 800bc42:	602b      	str	r3, [r5, #0]
 800bc44:	f7f5 fbda 	bl	80013fc <_close>
 800bc48:	1c43      	adds	r3, r0, #1
 800bc4a:	d102      	bne.n	800bc52 <_close_r+0x1a>
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	b103      	cbz	r3, 800bc52 <_close_r+0x1a>
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	bd38      	pop	{r3, r4, r5, pc}
 800bc54:	24003614 	.word	0x24003614

0800bc58 <_lseek_r>:
 800bc58:	b538      	push	{r3, r4, r5, lr}
 800bc5a:	4d07      	ldr	r5, [pc, #28]	@ (800bc78 <_lseek_r+0x20>)
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	4608      	mov	r0, r1
 800bc60:	4611      	mov	r1, r2
 800bc62:	2200      	movs	r2, #0
 800bc64:	602a      	str	r2, [r5, #0]
 800bc66:	461a      	mov	r2, r3
 800bc68:	f7f5 fbef 	bl	800144a <_lseek>
 800bc6c:	1c43      	adds	r3, r0, #1
 800bc6e:	d102      	bne.n	800bc76 <_lseek_r+0x1e>
 800bc70:	682b      	ldr	r3, [r5, #0]
 800bc72:	b103      	cbz	r3, 800bc76 <_lseek_r+0x1e>
 800bc74:	6023      	str	r3, [r4, #0]
 800bc76:	bd38      	pop	{r3, r4, r5, pc}
 800bc78:	24003614 	.word	0x24003614

0800bc7c <_read_r>:
 800bc7c:	b538      	push	{r3, r4, r5, lr}
 800bc7e:	4d07      	ldr	r5, [pc, #28]	@ (800bc9c <_read_r+0x20>)
 800bc80:	4604      	mov	r4, r0
 800bc82:	4608      	mov	r0, r1
 800bc84:	4611      	mov	r1, r2
 800bc86:	2200      	movs	r2, #0
 800bc88:	602a      	str	r2, [r5, #0]
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	f7f5 fb7d 	bl	800138a <_read>
 800bc90:	1c43      	adds	r3, r0, #1
 800bc92:	d102      	bne.n	800bc9a <_read_r+0x1e>
 800bc94:	682b      	ldr	r3, [r5, #0]
 800bc96:	b103      	cbz	r3, 800bc9a <_read_r+0x1e>
 800bc98:	6023      	str	r3, [r4, #0]
 800bc9a:	bd38      	pop	{r3, r4, r5, pc}
 800bc9c:	24003614 	.word	0x24003614

0800bca0 <_write_r>:
 800bca0:	b538      	push	{r3, r4, r5, lr}
 800bca2:	4d07      	ldr	r5, [pc, #28]	@ (800bcc0 <_write_r+0x20>)
 800bca4:	4604      	mov	r4, r0
 800bca6:	4608      	mov	r0, r1
 800bca8:	4611      	mov	r1, r2
 800bcaa:	2200      	movs	r2, #0
 800bcac:	602a      	str	r2, [r5, #0]
 800bcae:	461a      	mov	r2, r3
 800bcb0:	f7f5 fb88 	bl	80013c4 <_write>
 800bcb4:	1c43      	adds	r3, r0, #1
 800bcb6:	d102      	bne.n	800bcbe <_write_r+0x1e>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	b103      	cbz	r3, 800bcbe <_write_r+0x1e>
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	bd38      	pop	{r3, r4, r5, pc}
 800bcc0:	24003614 	.word	0x24003614

0800bcc4 <__errno>:
 800bcc4:	4b01      	ldr	r3, [pc, #4]	@ (800bccc <__errno+0x8>)
 800bcc6:	6818      	ldr	r0, [r3, #0]
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	2400001c 	.word	0x2400001c

0800bcd0 <__libc_init_array>:
 800bcd0:	b570      	push	{r4, r5, r6, lr}
 800bcd2:	4d0d      	ldr	r5, [pc, #52]	@ (800bd08 <__libc_init_array+0x38>)
 800bcd4:	4c0d      	ldr	r4, [pc, #52]	@ (800bd0c <__libc_init_array+0x3c>)
 800bcd6:	1b64      	subs	r4, r4, r5
 800bcd8:	10a4      	asrs	r4, r4, #2
 800bcda:	2600      	movs	r6, #0
 800bcdc:	42a6      	cmp	r6, r4
 800bcde:	d109      	bne.n	800bcf4 <__libc_init_array+0x24>
 800bce0:	4d0b      	ldr	r5, [pc, #44]	@ (800bd10 <__libc_init_array+0x40>)
 800bce2:	4c0c      	ldr	r4, [pc, #48]	@ (800bd14 <__libc_init_array+0x44>)
 800bce4:	f003 feaa 	bl	800fa3c <_init>
 800bce8:	1b64      	subs	r4, r4, r5
 800bcea:	10a4      	asrs	r4, r4, #2
 800bcec:	2600      	movs	r6, #0
 800bcee:	42a6      	cmp	r6, r4
 800bcf0:	d105      	bne.n	800bcfe <__libc_init_array+0x2e>
 800bcf2:	bd70      	pop	{r4, r5, r6, pc}
 800bcf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcf8:	4798      	blx	r3
 800bcfa:	3601      	adds	r6, #1
 800bcfc:	e7ee      	b.n	800bcdc <__libc_init_array+0xc>
 800bcfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd02:	4798      	blx	r3
 800bd04:	3601      	adds	r6, #1
 800bd06:	e7f2      	b.n	800bcee <__libc_init_array+0x1e>
 800bd08:	0801026c 	.word	0x0801026c
 800bd0c:	0801026c 	.word	0x0801026c
 800bd10:	0801026c 	.word	0x0801026c
 800bd14:	08010270 	.word	0x08010270

0800bd18 <__retarget_lock_init_recursive>:
 800bd18:	4770      	bx	lr

0800bd1a <__retarget_lock_acquire_recursive>:
 800bd1a:	4770      	bx	lr

0800bd1c <__retarget_lock_release_recursive>:
 800bd1c:	4770      	bx	lr
	...

0800bd20 <nanf>:
 800bd20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bd28 <nanf+0x8>
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	7fc00000 	.word	0x7fc00000

0800bd2c <quorem>:
 800bd2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd30:	6903      	ldr	r3, [r0, #16]
 800bd32:	690c      	ldr	r4, [r1, #16]
 800bd34:	42a3      	cmp	r3, r4
 800bd36:	4607      	mov	r7, r0
 800bd38:	db7e      	blt.n	800be38 <quorem+0x10c>
 800bd3a:	3c01      	subs	r4, #1
 800bd3c:	f101 0814 	add.w	r8, r1, #20
 800bd40:	00a3      	lsls	r3, r4, #2
 800bd42:	f100 0514 	add.w	r5, r0, #20
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd56:	3301      	adds	r3, #1
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd5e:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd62:	d32e      	bcc.n	800bdc2 <quorem+0x96>
 800bd64:	f04f 0a00 	mov.w	sl, #0
 800bd68:	46c4      	mov	ip, r8
 800bd6a:	46ae      	mov	lr, r5
 800bd6c:	46d3      	mov	fp, sl
 800bd6e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd72:	b298      	uxth	r0, r3
 800bd74:	fb06 a000 	mla	r0, r6, r0, sl
 800bd78:	0c02      	lsrs	r2, r0, #16
 800bd7a:	0c1b      	lsrs	r3, r3, #16
 800bd7c:	fb06 2303 	mla	r3, r6, r3, r2
 800bd80:	f8de 2000 	ldr.w	r2, [lr]
 800bd84:	b280      	uxth	r0, r0
 800bd86:	b292      	uxth	r2, r2
 800bd88:	1a12      	subs	r2, r2, r0
 800bd8a:	445a      	add	r2, fp
 800bd8c:	f8de 0000 	ldr.w	r0, [lr]
 800bd90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd9a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bd9e:	b292      	uxth	r2, r2
 800bda0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bda4:	45e1      	cmp	r9, ip
 800bda6:	f84e 2b04 	str.w	r2, [lr], #4
 800bdaa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bdae:	d2de      	bcs.n	800bd6e <quorem+0x42>
 800bdb0:	9b00      	ldr	r3, [sp, #0]
 800bdb2:	58eb      	ldr	r3, [r5, r3]
 800bdb4:	b92b      	cbnz	r3, 800bdc2 <quorem+0x96>
 800bdb6:	9b01      	ldr	r3, [sp, #4]
 800bdb8:	3b04      	subs	r3, #4
 800bdba:	429d      	cmp	r5, r3
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	d32f      	bcc.n	800be20 <quorem+0xf4>
 800bdc0:	613c      	str	r4, [r7, #16]
 800bdc2:	4638      	mov	r0, r7
 800bdc4:	f001 f956 	bl	800d074 <__mcmp>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	db25      	blt.n	800be18 <quorem+0xec>
 800bdcc:	4629      	mov	r1, r5
 800bdce:	2000      	movs	r0, #0
 800bdd0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bdd4:	f8d1 c000 	ldr.w	ip, [r1]
 800bdd8:	fa1f fe82 	uxth.w	lr, r2
 800bddc:	fa1f f38c 	uxth.w	r3, ip
 800bde0:	eba3 030e 	sub.w	r3, r3, lr
 800bde4:	4403      	add	r3, r0
 800bde6:	0c12      	lsrs	r2, r2, #16
 800bde8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bdec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdf6:	45c1      	cmp	r9, r8
 800bdf8:	f841 3b04 	str.w	r3, [r1], #4
 800bdfc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be00:	d2e6      	bcs.n	800bdd0 <quorem+0xa4>
 800be02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be0a:	b922      	cbnz	r2, 800be16 <quorem+0xea>
 800be0c:	3b04      	subs	r3, #4
 800be0e:	429d      	cmp	r5, r3
 800be10:	461a      	mov	r2, r3
 800be12:	d30b      	bcc.n	800be2c <quorem+0x100>
 800be14:	613c      	str	r4, [r7, #16]
 800be16:	3601      	adds	r6, #1
 800be18:	4630      	mov	r0, r6
 800be1a:	b003      	add	sp, #12
 800be1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be20:	6812      	ldr	r2, [r2, #0]
 800be22:	3b04      	subs	r3, #4
 800be24:	2a00      	cmp	r2, #0
 800be26:	d1cb      	bne.n	800bdc0 <quorem+0x94>
 800be28:	3c01      	subs	r4, #1
 800be2a:	e7c6      	b.n	800bdba <quorem+0x8e>
 800be2c:	6812      	ldr	r2, [r2, #0]
 800be2e:	3b04      	subs	r3, #4
 800be30:	2a00      	cmp	r2, #0
 800be32:	d1ef      	bne.n	800be14 <quorem+0xe8>
 800be34:	3c01      	subs	r4, #1
 800be36:	e7ea      	b.n	800be0e <quorem+0xe2>
 800be38:	2000      	movs	r0, #0
 800be3a:	e7ee      	b.n	800be1a <quorem+0xee>
 800be3c:	0000      	movs	r0, r0
	...

0800be40 <_dtoa_r>:
 800be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	ed2d 8b02 	vpush	{d8}
 800be48:	69c7      	ldr	r7, [r0, #28]
 800be4a:	b091      	sub	sp, #68	@ 0x44
 800be4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800be50:	ec55 4b10 	vmov	r4, r5, d0
 800be54:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800be56:	9107      	str	r1, [sp, #28]
 800be58:	4681      	mov	r9, r0
 800be5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800be5c:	930d      	str	r3, [sp, #52]	@ 0x34
 800be5e:	b97f      	cbnz	r7, 800be80 <_dtoa_r+0x40>
 800be60:	2010      	movs	r0, #16
 800be62:	f000 fd95 	bl	800c990 <malloc>
 800be66:	4602      	mov	r2, r0
 800be68:	f8c9 001c 	str.w	r0, [r9, #28]
 800be6c:	b920      	cbnz	r0, 800be78 <_dtoa_r+0x38>
 800be6e:	4ba0      	ldr	r3, [pc, #640]	@ (800c0f0 <_dtoa_r+0x2b0>)
 800be70:	21ef      	movs	r1, #239	@ 0xef
 800be72:	48a0      	ldr	r0, [pc, #640]	@ (800c0f4 <_dtoa_r+0x2b4>)
 800be74:	f003 f8e0 	bl	800f038 <__assert_func>
 800be78:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800be7c:	6007      	str	r7, [r0, #0]
 800be7e:	60c7      	str	r7, [r0, #12]
 800be80:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800be84:	6819      	ldr	r1, [r3, #0]
 800be86:	b159      	cbz	r1, 800bea0 <_dtoa_r+0x60>
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	604a      	str	r2, [r1, #4]
 800be8c:	2301      	movs	r3, #1
 800be8e:	4093      	lsls	r3, r2
 800be90:	608b      	str	r3, [r1, #8]
 800be92:	4648      	mov	r0, r9
 800be94:	f000 fe72 	bl	800cb7c <_Bfree>
 800be98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800be9c:	2200      	movs	r2, #0
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	1e2b      	subs	r3, r5, #0
 800bea2:	bfbb      	ittet	lt
 800bea4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bea8:	9303      	strlt	r3, [sp, #12]
 800beaa:	2300      	movge	r3, #0
 800beac:	2201      	movlt	r2, #1
 800beae:	bfac      	ite	ge
 800beb0:	6033      	strge	r3, [r6, #0]
 800beb2:	6032      	strlt	r2, [r6, #0]
 800beb4:	4b90      	ldr	r3, [pc, #576]	@ (800c0f8 <_dtoa_r+0x2b8>)
 800beb6:	9e03      	ldr	r6, [sp, #12]
 800beb8:	43b3      	bics	r3, r6
 800beba:	d110      	bne.n	800bede <_dtoa_r+0x9e>
 800bebc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bebe:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bec2:	6013      	str	r3, [r2, #0]
 800bec4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800bec8:	4323      	orrs	r3, r4
 800beca:	f000 84e6 	beq.w	800c89a <_dtoa_r+0xa5a>
 800bece:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bed0:	4f8a      	ldr	r7, [pc, #552]	@ (800c0fc <_dtoa_r+0x2bc>)
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f000 84e8 	beq.w	800c8a8 <_dtoa_r+0xa68>
 800bed8:	1cfb      	adds	r3, r7, #3
 800beda:	f000 bce3 	b.w	800c8a4 <_dtoa_r+0xa64>
 800bede:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bee2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beea:	d10a      	bne.n	800bf02 <_dtoa_r+0xc2>
 800beec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800beee:	2301      	movs	r3, #1
 800bef0:	6013      	str	r3, [r2, #0]
 800bef2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bef4:	b113      	cbz	r3, 800befc <_dtoa_r+0xbc>
 800bef6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bef8:	4b81      	ldr	r3, [pc, #516]	@ (800c100 <_dtoa_r+0x2c0>)
 800befa:	6013      	str	r3, [r2, #0]
 800befc:	4f81      	ldr	r7, [pc, #516]	@ (800c104 <_dtoa_r+0x2c4>)
 800befe:	f000 bcd3 	b.w	800c8a8 <_dtoa_r+0xa68>
 800bf02:	aa0e      	add	r2, sp, #56	@ 0x38
 800bf04:	a90f      	add	r1, sp, #60	@ 0x3c
 800bf06:	4648      	mov	r0, r9
 800bf08:	eeb0 0b48 	vmov.f64	d0, d8
 800bf0c:	f001 f9d2 	bl	800d2b4 <__d2b>
 800bf10:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800bf14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf16:	9001      	str	r0, [sp, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d045      	beq.n	800bfa8 <_dtoa_r+0x168>
 800bf1c:	eeb0 7b48 	vmov.f64	d7, d8
 800bf20:	ee18 1a90 	vmov	r1, s17
 800bf24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bf28:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800bf2c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bf30:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bf34:	2500      	movs	r5, #0
 800bf36:	ee07 1a90 	vmov	s15, r1
 800bf3a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800bf3e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c0d8 <_dtoa_r+0x298>
 800bf42:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bf46:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c0e0 <_dtoa_r+0x2a0>
 800bf4a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bf4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c0e8 <_dtoa_r+0x2a8>
 800bf52:	ee07 3a90 	vmov	s15, r3
 800bf56:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bf5a:	eeb0 7b46 	vmov.f64	d7, d6
 800bf5e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bf62:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bf66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bf6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf6e:	ee16 8a90 	vmov	r8, s13
 800bf72:	d508      	bpl.n	800bf86 <_dtoa_r+0x146>
 800bf74:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bf78:	eeb4 6b47 	vcmp.f64	d6, d7
 800bf7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf80:	bf18      	it	ne
 800bf82:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800bf86:	f1b8 0f16 	cmp.w	r8, #22
 800bf8a:	d82b      	bhi.n	800bfe4 <_dtoa_r+0x1a4>
 800bf8c:	495e      	ldr	r1, [pc, #376]	@ (800c108 <_dtoa_r+0x2c8>)
 800bf8e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800bf92:	ed91 7b00 	vldr	d7, [r1]
 800bf96:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bf9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf9e:	d501      	bpl.n	800bfa4 <_dtoa_r+0x164>
 800bfa0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	e01e      	b.n	800bfe6 <_dtoa_r+0x1a6>
 800bfa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfaa:	4413      	add	r3, r2
 800bfac:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800bfb0:	2920      	cmp	r1, #32
 800bfb2:	bfc1      	itttt	gt
 800bfb4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800bfb8:	408e      	lslgt	r6, r1
 800bfba:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800bfbe:	fa24 f101 	lsrgt.w	r1, r4, r1
 800bfc2:	bfd6      	itet	le
 800bfc4:	f1c1 0120 	rsble	r1, r1, #32
 800bfc8:	4331      	orrgt	r1, r6
 800bfca:	fa04 f101 	lslle.w	r1, r4, r1
 800bfce:	ee07 1a90 	vmov	s15, r1
 800bfd2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	ee17 1a90 	vmov	r1, s15
 800bfdc:	2501      	movs	r5, #1
 800bfde:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800bfe2:	e7a8      	b.n	800bf36 <_dtoa_r+0xf6>
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	1ad2      	subs	r2, r2, r3
 800bfe8:	1e53      	subs	r3, r2, #1
 800bfea:	9306      	str	r3, [sp, #24]
 800bfec:	bf45      	ittet	mi
 800bfee:	f1c2 0301 	rsbmi	r3, r2, #1
 800bff2:	9304      	strmi	r3, [sp, #16]
 800bff4:	2300      	movpl	r3, #0
 800bff6:	2300      	movmi	r3, #0
 800bff8:	bf4c      	ite	mi
 800bffa:	9306      	strmi	r3, [sp, #24]
 800bffc:	9304      	strpl	r3, [sp, #16]
 800bffe:	f1b8 0f00 	cmp.w	r8, #0
 800c002:	910c      	str	r1, [sp, #48]	@ 0x30
 800c004:	db18      	blt.n	800c038 <_dtoa_r+0x1f8>
 800c006:	9b06      	ldr	r3, [sp, #24]
 800c008:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c00c:	4443      	add	r3, r8
 800c00e:	9306      	str	r3, [sp, #24]
 800c010:	2300      	movs	r3, #0
 800c012:	9a07      	ldr	r2, [sp, #28]
 800c014:	2a09      	cmp	r2, #9
 800c016:	d845      	bhi.n	800c0a4 <_dtoa_r+0x264>
 800c018:	2a05      	cmp	r2, #5
 800c01a:	bfc4      	itt	gt
 800c01c:	3a04      	subgt	r2, #4
 800c01e:	9207      	strgt	r2, [sp, #28]
 800c020:	9a07      	ldr	r2, [sp, #28]
 800c022:	f1a2 0202 	sub.w	r2, r2, #2
 800c026:	bfcc      	ite	gt
 800c028:	2400      	movgt	r4, #0
 800c02a:	2401      	movle	r4, #1
 800c02c:	2a03      	cmp	r2, #3
 800c02e:	d844      	bhi.n	800c0ba <_dtoa_r+0x27a>
 800c030:	e8df f002 	tbb	[pc, r2]
 800c034:	0b173634 	.word	0x0b173634
 800c038:	9b04      	ldr	r3, [sp, #16]
 800c03a:	2200      	movs	r2, #0
 800c03c:	eba3 0308 	sub.w	r3, r3, r8
 800c040:	9304      	str	r3, [sp, #16]
 800c042:	920a      	str	r2, [sp, #40]	@ 0x28
 800c044:	f1c8 0300 	rsb	r3, r8, #0
 800c048:	e7e3      	b.n	800c012 <_dtoa_r+0x1d2>
 800c04a:	2201      	movs	r2, #1
 800c04c:	9208      	str	r2, [sp, #32]
 800c04e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c050:	eb08 0b02 	add.w	fp, r8, r2
 800c054:	f10b 0a01 	add.w	sl, fp, #1
 800c058:	4652      	mov	r2, sl
 800c05a:	2a01      	cmp	r2, #1
 800c05c:	bfb8      	it	lt
 800c05e:	2201      	movlt	r2, #1
 800c060:	e006      	b.n	800c070 <_dtoa_r+0x230>
 800c062:	2201      	movs	r2, #1
 800c064:	9208      	str	r2, [sp, #32]
 800c066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c068:	2a00      	cmp	r2, #0
 800c06a:	dd29      	ble.n	800c0c0 <_dtoa_r+0x280>
 800c06c:	4693      	mov	fp, r2
 800c06e:	4692      	mov	sl, r2
 800c070:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c074:	2100      	movs	r1, #0
 800c076:	2004      	movs	r0, #4
 800c078:	f100 0614 	add.w	r6, r0, #20
 800c07c:	4296      	cmp	r6, r2
 800c07e:	d926      	bls.n	800c0ce <_dtoa_r+0x28e>
 800c080:	6079      	str	r1, [r7, #4]
 800c082:	4648      	mov	r0, r9
 800c084:	9305      	str	r3, [sp, #20]
 800c086:	f000 fd39 	bl	800cafc <_Balloc>
 800c08a:	9b05      	ldr	r3, [sp, #20]
 800c08c:	4607      	mov	r7, r0
 800c08e:	2800      	cmp	r0, #0
 800c090:	d13e      	bne.n	800c110 <_dtoa_r+0x2d0>
 800c092:	4b1e      	ldr	r3, [pc, #120]	@ (800c10c <_dtoa_r+0x2cc>)
 800c094:	4602      	mov	r2, r0
 800c096:	f240 11af 	movw	r1, #431	@ 0x1af
 800c09a:	e6ea      	b.n	800be72 <_dtoa_r+0x32>
 800c09c:	2200      	movs	r2, #0
 800c09e:	e7e1      	b.n	800c064 <_dtoa_r+0x224>
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	e7d3      	b.n	800c04c <_dtoa_r+0x20c>
 800c0a4:	2401      	movs	r4, #1
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c0ac:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	46da      	mov	sl, fp
 800c0b4:	2212      	movs	r2, #18
 800c0b6:	9109      	str	r1, [sp, #36]	@ 0x24
 800c0b8:	e7da      	b.n	800c070 <_dtoa_r+0x230>
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	9208      	str	r2, [sp, #32]
 800c0be:	e7f5      	b.n	800c0ac <_dtoa_r+0x26c>
 800c0c0:	f04f 0b01 	mov.w	fp, #1
 800c0c4:	46da      	mov	sl, fp
 800c0c6:	465a      	mov	r2, fp
 800c0c8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c0cc:	e7d0      	b.n	800c070 <_dtoa_r+0x230>
 800c0ce:	3101      	adds	r1, #1
 800c0d0:	0040      	lsls	r0, r0, #1
 800c0d2:	e7d1      	b.n	800c078 <_dtoa_r+0x238>
 800c0d4:	f3af 8000 	nop.w
 800c0d8:	636f4361 	.word	0x636f4361
 800c0dc:	3fd287a7 	.word	0x3fd287a7
 800c0e0:	8b60c8b3 	.word	0x8b60c8b3
 800c0e4:	3fc68a28 	.word	0x3fc68a28
 800c0e8:	509f79fb 	.word	0x509f79fb
 800c0ec:	3fd34413 	.word	0x3fd34413
 800c0f0:	0800fe64 	.word	0x0800fe64
 800c0f4:	0800fe7b 	.word	0x0800fe7b
 800c0f8:	7ff00000 	.word	0x7ff00000
 800c0fc:	0800fe60 	.word	0x0800fe60
 800c100:	0800ff67 	.word	0x0800ff67
 800c104:	0800ff66 	.word	0x0800ff66
 800c108:	08010048 	.word	0x08010048
 800c10c:	0800fed3 	.word	0x0800fed3
 800c110:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c114:	f1ba 0f0e 	cmp.w	sl, #14
 800c118:	6010      	str	r0, [r2, #0]
 800c11a:	d86e      	bhi.n	800c1fa <_dtoa_r+0x3ba>
 800c11c:	2c00      	cmp	r4, #0
 800c11e:	d06c      	beq.n	800c1fa <_dtoa_r+0x3ba>
 800c120:	f1b8 0f00 	cmp.w	r8, #0
 800c124:	f340 80b4 	ble.w	800c290 <_dtoa_r+0x450>
 800c128:	4ac8      	ldr	r2, [pc, #800]	@ (800c44c <_dtoa_r+0x60c>)
 800c12a:	f008 010f 	and.w	r1, r8, #15
 800c12e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c132:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c136:	ed92 7b00 	vldr	d7, [r2]
 800c13a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c13e:	f000 809b 	beq.w	800c278 <_dtoa_r+0x438>
 800c142:	4ac3      	ldr	r2, [pc, #780]	@ (800c450 <_dtoa_r+0x610>)
 800c144:	ed92 6b08 	vldr	d6, [r2, #32]
 800c148:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c14c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c150:	f001 010f 	and.w	r1, r1, #15
 800c154:	2203      	movs	r2, #3
 800c156:	48be      	ldr	r0, [pc, #760]	@ (800c450 <_dtoa_r+0x610>)
 800c158:	2900      	cmp	r1, #0
 800c15a:	f040 808f 	bne.w	800c27c <_dtoa_r+0x43c>
 800c15e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c162:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c166:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c16a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c16c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c170:	2900      	cmp	r1, #0
 800c172:	f000 80b3 	beq.w	800c2dc <_dtoa_r+0x49c>
 800c176:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c17a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c182:	f140 80ab 	bpl.w	800c2dc <_dtoa_r+0x49c>
 800c186:	f1ba 0f00 	cmp.w	sl, #0
 800c18a:	f000 80a7 	beq.w	800c2dc <_dtoa_r+0x49c>
 800c18e:	f1bb 0f00 	cmp.w	fp, #0
 800c192:	dd30      	ble.n	800c1f6 <_dtoa_r+0x3b6>
 800c194:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c198:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c19c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c1a0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800c1a4:	9105      	str	r1, [sp, #20]
 800c1a6:	3201      	adds	r2, #1
 800c1a8:	465c      	mov	r4, fp
 800c1aa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c1ae:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c1b2:	ee07 2a90 	vmov	s15, r2
 800c1b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c1ba:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c1be:	ee15 2a90 	vmov	r2, s11
 800c1c2:	ec51 0b15 	vmov	r0, r1, d5
 800c1c6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c1ca:	2c00      	cmp	r4, #0
 800c1cc:	f040 808a 	bne.w	800c2e4 <_dtoa_r+0x4a4>
 800c1d0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c1d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c1d8:	ec41 0b17 	vmov	d7, r0, r1
 800c1dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e4:	f300 826a 	bgt.w	800c6bc <_dtoa_r+0x87c>
 800c1e8:	eeb1 7b47 	vneg.f64	d7, d7
 800c1ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f4:	d423      	bmi.n	800c23e <_dtoa_r+0x3fe>
 800c1f6:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c1fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c1fc:	2a00      	cmp	r2, #0
 800c1fe:	f2c0 8129 	blt.w	800c454 <_dtoa_r+0x614>
 800c202:	f1b8 0f0e 	cmp.w	r8, #14
 800c206:	f300 8125 	bgt.w	800c454 <_dtoa_r+0x614>
 800c20a:	4b90      	ldr	r3, [pc, #576]	@ (800c44c <_dtoa_r+0x60c>)
 800c20c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c210:	ed93 6b00 	vldr	d6, [r3]
 800c214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c216:	2b00      	cmp	r3, #0
 800c218:	f280 80c8 	bge.w	800c3ac <_dtoa_r+0x56c>
 800c21c:	f1ba 0f00 	cmp.w	sl, #0
 800c220:	f300 80c4 	bgt.w	800c3ac <_dtoa_r+0x56c>
 800c224:	d10b      	bne.n	800c23e <_dtoa_r+0x3fe>
 800c226:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c22a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c22e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c232:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c23a:	f2c0 823c 	blt.w	800c6b6 <_dtoa_r+0x876>
 800c23e:	2400      	movs	r4, #0
 800c240:	4625      	mov	r5, r4
 800c242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c244:	43db      	mvns	r3, r3
 800c246:	9305      	str	r3, [sp, #20]
 800c248:	463e      	mov	r6, r7
 800c24a:	f04f 0800 	mov.w	r8, #0
 800c24e:	4621      	mov	r1, r4
 800c250:	4648      	mov	r0, r9
 800c252:	f000 fc93 	bl	800cb7c <_Bfree>
 800c256:	2d00      	cmp	r5, #0
 800c258:	f000 80a2 	beq.w	800c3a0 <_dtoa_r+0x560>
 800c25c:	f1b8 0f00 	cmp.w	r8, #0
 800c260:	d005      	beq.n	800c26e <_dtoa_r+0x42e>
 800c262:	45a8      	cmp	r8, r5
 800c264:	d003      	beq.n	800c26e <_dtoa_r+0x42e>
 800c266:	4641      	mov	r1, r8
 800c268:	4648      	mov	r0, r9
 800c26a:	f000 fc87 	bl	800cb7c <_Bfree>
 800c26e:	4629      	mov	r1, r5
 800c270:	4648      	mov	r0, r9
 800c272:	f000 fc83 	bl	800cb7c <_Bfree>
 800c276:	e093      	b.n	800c3a0 <_dtoa_r+0x560>
 800c278:	2202      	movs	r2, #2
 800c27a:	e76c      	b.n	800c156 <_dtoa_r+0x316>
 800c27c:	07cc      	lsls	r4, r1, #31
 800c27e:	d504      	bpl.n	800c28a <_dtoa_r+0x44a>
 800c280:	ed90 6b00 	vldr	d6, [r0]
 800c284:	3201      	adds	r2, #1
 800c286:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c28a:	1049      	asrs	r1, r1, #1
 800c28c:	3008      	adds	r0, #8
 800c28e:	e763      	b.n	800c158 <_dtoa_r+0x318>
 800c290:	d022      	beq.n	800c2d8 <_dtoa_r+0x498>
 800c292:	f1c8 0100 	rsb	r1, r8, #0
 800c296:	4a6d      	ldr	r2, [pc, #436]	@ (800c44c <_dtoa_r+0x60c>)
 800c298:	f001 000f 	and.w	r0, r1, #15
 800c29c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c2a0:	ed92 7b00 	vldr	d7, [r2]
 800c2a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c2a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2ac:	4868      	ldr	r0, [pc, #416]	@ (800c450 <_dtoa_r+0x610>)
 800c2ae:	1109      	asrs	r1, r1, #4
 800c2b0:	2400      	movs	r4, #0
 800c2b2:	2202      	movs	r2, #2
 800c2b4:	b929      	cbnz	r1, 800c2c2 <_dtoa_r+0x482>
 800c2b6:	2c00      	cmp	r4, #0
 800c2b8:	f43f af57 	beq.w	800c16a <_dtoa_r+0x32a>
 800c2bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2c0:	e753      	b.n	800c16a <_dtoa_r+0x32a>
 800c2c2:	07ce      	lsls	r6, r1, #31
 800c2c4:	d505      	bpl.n	800c2d2 <_dtoa_r+0x492>
 800c2c6:	ed90 6b00 	vldr	d6, [r0]
 800c2ca:	3201      	adds	r2, #1
 800c2cc:	2401      	movs	r4, #1
 800c2ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c2d2:	1049      	asrs	r1, r1, #1
 800c2d4:	3008      	adds	r0, #8
 800c2d6:	e7ed      	b.n	800c2b4 <_dtoa_r+0x474>
 800c2d8:	2202      	movs	r2, #2
 800c2da:	e746      	b.n	800c16a <_dtoa_r+0x32a>
 800c2dc:	f8cd 8014 	str.w	r8, [sp, #20]
 800c2e0:	4654      	mov	r4, sl
 800c2e2:	e762      	b.n	800c1aa <_dtoa_r+0x36a>
 800c2e4:	4a59      	ldr	r2, [pc, #356]	@ (800c44c <_dtoa_r+0x60c>)
 800c2e6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c2ea:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c2ee:	9a08      	ldr	r2, [sp, #32]
 800c2f0:	ec41 0b17 	vmov	d7, r0, r1
 800c2f4:	443c      	add	r4, r7
 800c2f6:	b34a      	cbz	r2, 800c34c <_dtoa_r+0x50c>
 800c2f8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c2fc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c300:	463e      	mov	r6, r7
 800c302:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c306:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c30a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c30e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c312:	ee14 2a90 	vmov	r2, s9
 800c316:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c31a:	3230      	adds	r2, #48	@ 0x30
 800c31c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c320:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c328:	f806 2b01 	strb.w	r2, [r6], #1
 800c32c:	d438      	bmi.n	800c3a0 <_dtoa_r+0x560>
 800c32e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c332:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c33a:	d46e      	bmi.n	800c41a <_dtoa_r+0x5da>
 800c33c:	42a6      	cmp	r6, r4
 800c33e:	f43f af5a 	beq.w	800c1f6 <_dtoa_r+0x3b6>
 800c342:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c346:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c34a:	e7e0      	b.n	800c30e <_dtoa_r+0x4ce>
 800c34c:	4621      	mov	r1, r4
 800c34e:	463e      	mov	r6, r7
 800c350:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c354:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c358:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c35c:	ee14 2a90 	vmov	r2, s9
 800c360:	3230      	adds	r2, #48	@ 0x30
 800c362:	f806 2b01 	strb.w	r2, [r6], #1
 800c366:	42a6      	cmp	r6, r4
 800c368:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c36c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c370:	d119      	bne.n	800c3a6 <_dtoa_r+0x566>
 800c372:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c376:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c37a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c382:	dc4a      	bgt.n	800c41a <_dtoa_r+0x5da>
 800c384:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c388:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c390:	f57f af31 	bpl.w	800c1f6 <_dtoa_r+0x3b6>
 800c394:	460e      	mov	r6, r1
 800c396:	3901      	subs	r1, #1
 800c398:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c39c:	2b30      	cmp	r3, #48	@ 0x30
 800c39e:	d0f9      	beq.n	800c394 <_dtoa_r+0x554>
 800c3a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c3a4:	e027      	b.n	800c3f6 <_dtoa_r+0x5b6>
 800c3a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c3aa:	e7d5      	b.n	800c358 <_dtoa_r+0x518>
 800c3ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3b0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c3b4:	463e      	mov	r6, r7
 800c3b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c3ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c3be:	ee15 3a10 	vmov	r3, s10
 800c3c2:	3330      	adds	r3, #48	@ 0x30
 800c3c4:	f806 3b01 	strb.w	r3, [r6], #1
 800c3c8:	1bf3      	subs	r3, r6, r7
 800c3ca:	459a      	cmp	sl, r3
 800c3cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c3d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c3d4:	d132      	bne.n	800c43c <_dtoa_r+0x5fc>
 800c3d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c3da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e2:	dc18      	bgt.n	800c416 <_dtoa_r+0x5d6>
 800c3e4:	eeb4 7b46 	vcmp.f64	d7, d6
 800c3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ec:	d103      	bne.n	800c3f6 <_dtoa_r+0x5b6>
 800c3ee:	ee15 3a10 	vmov	r3, s10
 800c3f2:	07db      	lsls	r3, r3, #31
 800c3f4:	d40f      	bmi.n	800c416 <_dtoa_r+0x5d6>
 800c3f6:	9901      	ldr	r1, [sp, #4]
 800c3f8:	4648      	mov	r0, r9
 800c3fa:	f000 fbbf 	bl	800cb7c <_Bfree>
 800c3fe:	2300      	movs	r3, #0
 800c400:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c402:	7033      	strb	r3, [r6, #0]
 800c404:	f108 0301 	add.w	r3, r8, #1
 800c408:	6013      	str	r3, [r2, #0]
 800c40a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 824b 	beq.w	800c8a8 <_dtoa_r+0xa68>
 800c412:	601e      	str	r6, [r3, #0]
 800c414:	e248      	b.n	800c8a8 <_dtoa_r+0xa68>
 800c416:	f8cd 8014 	str.w	r8, [sp, #20]
 800c41a:	4633      	mov	r3, r6
 800c41c:	461e      	mov	r6, r3
 800c41e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c422:	2a39      	cmp	r2, #57	@ 0x39
 800c424:	d106      	bne.n	800c434 <_dtoa_r+0x5f4>
 800c426:	429f      	cmp	r7, r3
 800c428:	d1f8      	bne.n	800c41c <_dtoa_r+0x5dc>
 800c42a:	9a05      	ldr	r2, [sp, #20]
 800c42c:	3201      	adds	r2, #1
 800c42e:	9205      	str	r2, [sp, #20]
 800c430:	2230      	movs	r2, #48	@ 0x30
 800c432:	703a      	strb	r2, [r7, #0]
 800c434:	781a      	ldrb	r2, [r3, #0]
 800c436:	3201      	adds	r2, #1
 800c438:	701a      	strb	r2, [r3, #0]
 800c43a:	e7b1      	b.n	800c3a0 <_dtoa_r+0x560>
 800c43c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c440:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c448:	d1b5      	bne.n	800c3b6 <_dtoa_r+0x576>
 800c44a:	e7d4      	b.n	800c3f6 <_dtoa_r+0x5b6>
 800c44c:	08010048 	.word	0x08010048
 800c450:	08010020 	.word	0x08010020
 800c454:	9908      	ldr	r1, [sp, #32]
 800c456:	2900      	cmp	r1, #0
 800c458:	f000 80e9 	beq.w	800c62e <_dtoa_r+0x7ee>
 800c45c:	9907      	ldr	r1, [sp, #28]
 800c45e:	2901      	cmp	r1, #1
 800c460:	f300 80cb 	bgt.w	800c5fa <_dtoa_r+0x7ba>
 800c464:	2d00      	cmp	r5, #0
 800c466:	f000 80c4 	beq.w	800c5f2 <_dtoa_r+0x7b2>
 800c46a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c46e:	9e04      	ldr	r6, [sp, #16]
 800c470:	461c      	mov	r4, r3
 800c472:	9305      	str	r3, [sp, #20]
 800c474:	9b04      	ldr	r3, [sp, #16]
 800c476:	4413      	add	r3, r2
 800c478:	9304      	str	r3, [sp, #16]
 800c47a:	9b06      	ldr	r3, [sp, #24]
 800c47c:	2101      	movs	r1, #1
 800c47e:	4413      	add	r3, r2
 800c480:	4648      	mov	r0, r9
 800c482:	9306      	str	r3, [sp, #24]
 800c484:	f000 fc78 	bl	800cd78 <__i2b>
 800c488:	9b05      	ldr	r3, [sp, #20]
 800c48a:	4605      	mov	r5, r0
 800c48c:	b166      	cbz	r6, 800c4a8 <_dtoa_r+0x668>
 800c48e:	9a06      	ldr	r2, [sp, #24]
 800c490:	2a00      	cmp	r2, #0
 800c492:	dd09      	ble.n	800c4a8 <_dtoa_r+0x668>
 800c494:	42b2      	cmp	r2, r6
 800c496:	9904      	ldr	r1, [sp, #16]
 800c498:	bfa8      	it	ge
 800c49a:	4632      	movge	r2, r6
 800c49c:	1a89      	subs	r1, r1, r2
 800c49e:	9104      	str	r1, [sp, #16]
 800c4a0:	9906      	ldr	r1, [sp, #24]
 800c4a2:	1ab6      	subs	r6, r6, r2
 800c4a4:	1a8a      	subs	r2, r1, r2
 800c4a6:	9206      	str	r2, [sp, #24]
 800c4a8:	b30b      	cbz	r3, 800c4ee <_dtoa_r+0x6ae>
 800c4aa:	9a08      	ldr	r2, [sp, #32]
 800c4ac:	2a00      	cmp	r2, #0
 800c4ae:	f000 80c5 	beq.w	800c63c <_dtoa_r+0x7fc>
 800c4b2:	2c00      	cmp	r4, #0
 800c4b4:	f000 80bf 	beq.w	800c636 <_dtoa_r+0x7f6>
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	4648      	mov	r0, r9
 800c4be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4c0:	f000 fd12 	bl	800cee8 <__pow5mult>
 800c4c4:	9a01      	ldr	r2, [sp, #4]
 800c4c6:	4601      	mov	r1, r0
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	4648      	mov	r0, r9
 800c4cc:	f000 fc6a 	bl	800cda4 <__multiply>
 800c4d0:	9901      	ldr	r1, [sp, #4]
 800c4d2:	9005      	str	r0, [sp, #20]
 800c4d4:	4648      	mov	r0, r9
 800c4d6:	f000 fb51 	bl	800cb7c <_Bfree>
 800c4da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4dc:	1b1b      	subs	r3, r3, r4
 800c4de:	f000 80b0 	beq.w	800c642 <_dtoa_r+0x802>
 800c4e2:	9905      	ldr	r1, [sp, #20]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	4648      	mov	r0, r9
 800c4e8:	f000 fcfe 	bl	800cee8 <__pow5mult>
 800c4ec:	9001      	str	r0, [sp, #4]
 800c4ee:	2101      	movs	r1, #1
 800c4f0:	4648      	mov	r0, r9
 800c4f2:	f000 fc41 	bl	800cd78 <__i2b>
 800c4f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 81da 	beq.w	800c8b4 <_dtoa_r+0xa74>
 800c500:	461a      	mov	r2, r3
 800c502:	4601      	mov	r1, r0
 800c504:	4648      	mov	r0, r9
 800c506:	f000 fcef 	bl	800cee8 <__pow5mult>
 800c50a:	9b07      	ldr	r3, [sp, #28]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	4604      	mov	r4, r0
 800c510:	f300 80a0 	bgt.w	800c654 <_dtoa_r+0x814>
 800c514:	9b02      	ldr	r3, [sp, #8]
 800c516:	2b00      	cmp	r3, #0
 800c518:	f040 8096 	bne.w	800c648 <_dtoa_r+0x808>
 800c51c:	9b03      	ldr	r3, [sp, #12]
 800c51e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c522:	2a00      	cmp	r2, #0
 800c524:	f040 8092 	bne.w	800c64c <_dtoa_r+0x80c>
 800c528:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c52c:	0d12      	lsrs	r2, r2, #20
 800c52e:	0512      	lsls	r2, r2, #20
 800c530:	2a00      	cmp	r2, #0
 800c532:	f000 808d 	beq.w	800c650 <_dtoa_r+0x810>
 800c536:	9b04      	ldr	r3, [sp, #16]
 800c538:	3301      	adds	r3, #1
 800c53a:	9304      	str	r3, [sp, #16]
 800c53c:	9b06      	ldr	r3, [sp, #24]
 800c53e:	3301      	adds	r3, #1
 800c540:	9306      	str	r3, [sp, #24]
 800c542:	2301      	movs	r3, #1
 800c544:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c546:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f000 81b9 	beq.w	800c8c0 <_dtoa_r+0xa80>
 800c54e:	6922      	ldr	r2, [r4, #16]
 800c550:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c554:	6910      	ldr	r0, [r2, #16]
 800c556:	f000 fbc3 	bl	800cce0 <__hi0bits>
 800c55a:	f1c0 0020 	rsb	r0, r0, #32
 800c55e:	9b06      	ldr	r3, [sp, #24]
 800c560:	4418      	add	r0, r3
 800c562:	f010 001f 	ands.w	r0, r0, #31
 800c566:	f000 8081 	beq.w	800c66c <_dtoa_r+0x82c>
 800c56a:	f1c0 0220 	rsb	r2, r0, #32
 800c56e:	2a04      	cmp	r2, #4
 800c570:	dd73      	ble.n	800c65a <_dtoa_r+0x81a>
 800c572:	9b04      	ldr	r3, [sp, #16]
 800c574:	f1c0 001c 	rsb	r0, r0, #28
 800c578:	4403      	add	r3, r0
 800c57a:	9304      	str	r3, [sp, #16]
 800c57c:	9b06      	ldr	r3, [sp, #24]
 800c57e:	4406      	add	r6, r0
 800c580:	4403      	add	r3, r0
 800c582:	9306      	str	r3, [sp, #24]
 800c584:	9b04      	ldr	r3, [sp, #16]
 800c586:	2b00      	cmp	r3, #0
 800c588:	dd05      	ble.n	800c596 <_dtoa_r+0x756>
 800c58a:	9901      	ldr	r1, [sp, #4]
 800c58c:	461a      	mov	r2, r3
 800c58e:	4648      	mov	r0, r9
 800c590:	f000 fd04 	bl	800cf9c <__lshift>
 800c594:	9001      	str	r0, [sp, #4]
 800c596:	9b06      	ldr	r3, [sp, #24]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	dd05      	ble.n	800c5a8 <_dtoa_r+0x768>
 800c59c:	4621      	mov	r1, r4
 800c59e:	461a      	mov	r2, r3
 800c5a0:	4648      	mov	r0, r9
 800c5a2:	f000 fcfb 	bl	800cf9c <__lshift>
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d060      	beq.n	800c670 <_dtoa_r+0x830>
 800c5ae:	9801      	ldr	r0, [sp, #4]
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	f000 fd5f 	bl	800d074 <__mcmp>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	da5a      	bge.n	800c670 <_dtoa_r+0x830>
 800c5ba:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800c5be:	9305      	str	r3, [sp, #20]
 800c5c0:	9901      	ldr	r1, [sp, #4]
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	220a      	movs	r2, #10
 800c5c6:	4648      	mov	r0, r9
 800c5c8:	f000 fafa 	bl	800cbc0 <__multadd>
 800c5cc:	9b08      	ldr	r3, [sp, #32]
 800c5ce:	9001      	str	r0, [sp, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 8177 	beq.w	800c8c4 <_dtoa_r+0xa84>
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	2300      	movs	r3, #0
 800c5da:	220a      	movs	r2, #10
 800c5dc:	4648      	mov	r0, r9
 800c5de:	f000 faef 	bl	800cbc0 <__multadd>
 800c5e2:	f1bb 0f00 	cmp.w	fp, #0
 800c5e6:	4605      	mov	r5, r0
 800c5e8:	dc6e      	bgt.n	800c6c8 <_dtoa_r+0x888>
 800c5ea:	9b07      	ldr	r3, [sp, #28]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	dc48      	bgt.n	800c682 <_dtoa_r+0x842>
 800c5f0:	e06a      	b.n	800c6c8 <_dtoa_r+0x888>
 800c5f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c5f8:	e739      	b.n	800c46e <_dtoa_r+0x62e>
 800c5fa:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800c5fe:	42a3      	cmp	r3, r4
 800c600:	db07      	blt.n	800c612 <_dtoa_r+0x7d2>
 800c602:	f1ba 0f00 	cmp.w	sl, #0
 800c606:	eba3 0404 	sub.w	r4, r3, r4
 800c60a:	db0b      	blt.n	800c624 <_dtoa_r+0x7e4>
 800c60c:	9e04      	ldr	r6, [sp, #16]
 800c60e:	4652      	mov	r2, sl
 800c610:	e72f      	b.n	800c472 <_dtoa_r+0x632>
 800c612:	1ae2      	subs	r2, r4, r3
 800c614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c616:	9e04      	ldr	r6, [sp, #16]
 800c618:	4413      	add	r3, r2
 800c61a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c61c:	4652      	mov	r2, sl
 800c61e:	4623      	mov	r3, r4
 800c620:	2400      	movs	r4, #0
 800c622:	e726      	b.n	800c472 <_dtoa_r+0x632>
 800c624:	9a04      	ldr	r2, [sp, #16]
 800c626:	eba2 060a 	sub.w	r6, r2, sl
 800c62a:	2200      	movs	r2, #0
 800c62c:	e721      	b.n	800c472 <_dtoa_r+0x632>
 800c62e:	9e04      	ldr	r6, [sp, #16]
 800c630:	9d08      	ldr	r5, [sp, #32]
 800c632:	461c      	mov	r4, r3
 800c634:	e72a      	b.n	800c48c <_dtoa_r+0x64c>
 800c636:	9a01      	ldr	r2, [sp, #4]
 800c638:	9205      	str	r2, [sp, #20]
 800c63a:	e752      	b.n	800c4e2 <_dtoa_r+0x6a2>
 800c63c:	9901      	ldr	r1, [sp, #4]
 800c63e:	461a      	mov	r2, r3
 800c640:	e751      	b.n	800c4e6 <_dtoa_r+0x6a6>
 800c642:	9b05      	ldr	r3, [sp, #20]
 800c644:	9301      	str	r3, [sp, #4]
 800c646:	e752      	b.n	800c4ee <_dtoa_r+0x6ae>
 800c648:	2300      	movs	r3, #0
 800c64a:	e77b      	b.n	800c544 <_dtoa_r+0x704>
 800c64c:	9b02      	ldr	r3, [sp, #8]
 800c64e:	e779      	b.n	800c544 <_dtoa_r+0x704>
 800c650:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c652:	e778      	b.n	800c546 <_dtoa_r+0x706>
 800c654:	2300      	movs	r3, #0
 800c656:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c658:	e779      	b.n	800c54e <_dtoa_r+0x70e>
 800c65a:	d093      	beq.n	800c584 <_dtoa_r+0x744>
 800c65c:	9b04      	ldr	r3, [sp, #16]
 800c65e:	321c      	adds	r2, #28
 800c660:	4413      	add	r3, r2
 800c662:	9304      	str	r3, [sp, #16]
 800c664:	9b06      	ldr	r3, [sp, #24]
 800c666:	4416      	add	r6, r2
 800c668:	4413      	add	r3, r2
 800c66a:	e78a      	b.n	800c582 <_dtoa_r+0x742>
 800c66c:	4602      	mov	r2, r0
 800c66e:	e7f5      	b.n	800c65c <_dtoa_r+0x81c>
 800c670:	f1ba 0f00 	cmp.w	sl, #0
 800c674:	f8cd 8014 	str.w	r8, [sp, #20]
 800c678:	46d3      	mov	fp, sl
 800c67a:	dc21      	bgt.n	800c6c0 <_dtoa_r+0x880>
 800c67c:	9b07      	ldr	r3, [sp, #28]
 800c67e:	2b02      	cmp	r3, #2
 800c680:	dd1e      	ble.n	800c6c0 <_dtoa_r+0x880>
 800c682:	f1bb 0f00 	cmp.w	fp, #0
 800c686:	f47f addc 	bne.w	800c242 <_dtoa_r+0x402>
 800c68a:	4621      	mov	r1, r4
 800c68c:	465b      	mov	r3, fp
 800c68e:	2205      	movs	r2, #5
 800c690:	4648      	mov	r0, r9
 800c692:	f000 fa95 	bl	800cbc0 <__multadd>
 800c696:	4601      	mov	r1, r0
 800c698:	4604      	mov	r4, r0
 800c69a:	9801      	ldr	r0, [sp, #4]
 800c69c:	f000 fcea 	bl	800d074 <__mcmp>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	f77f adce 	ble.w	800c242 <_dtoa_r+0x402>
 800c6a6:	463e      	mov	r6, r7
 800c6a8:	2331      	movs	r3, #49	@ 0x31
 800c6aa:	f806 3b01 	strb.w	r3, [r6], #1
 800c6ae:	9b05      	ldr	r3, [sp, #20]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	9305      	str	r3, [sp, #20]
 800c6b4:	e5c9      	b.n	800c24a <_dtoa_r+0x40a>
 800c6b6:	f8cd 8014 	str.w	r8, [sp, #20]
 800c6ba:	4654      	mov	r4, sl
 800c6bc:	4625      	mov	r5, r4
 800c6be:	e7f2      	b.n	800c6a6 <_dtoa_r+0x866>
 800c6c0:	9b08      	ldr	r3, [sp, #32]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f000 8102 	beq.w	800c8cc <_dtoa_r+0xa8c>
 800c6c8:	2e00      	cmp	r6, #0
 800c6ca:	dd05      	ble.n	800c6d8 <_dtoa_r+0x898>
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	4632      	mov	r2, r6
 800c6d0:	4648      	mov	r0, r9
 800c6d2:	f000 fc63 	bl	800cf9c <__lshift>
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d058      	beq.n	800c790 <_dtoa_r+0x950>
 800c6de:	6869      	ldr	r1, [r5, #4]
 800c6e0:	4648      	mov	r0, r9
 800c6e2:	f000 fa0b 	bl	800cafc <_Balloc>
 800c6e6:	4606      	mov	r6, r0
 800c6e8:	b928      	cbnz	r0, 800c6f6 <_dtoa_r+0x8b6>
 800c6ea:	4b82      	ldr	r3, [pc, #520]	@ (800c8f4 <_dtoa_r+0xab4>)
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c6f2:	f7ff bbbe 	b.w	800be72 <_dtoa_r+0x32>
 800c6f6:	692a      	ldr	r2, [r5, #16]
 800c6f8:	3202      	adds	r2, #2
 800c6fa:	0092      	lsls	r2, r2, #2
 800c6fc:	f105 010c 	add.w	r1, r5, #12
 800c700:	300c      	adds	r0, #12
 800c702:	f002 fc81 	bl	800f008 <memcpy>
 800c706:	2201      	movs	r2, #1
 800c708:	4631      	mov	r1, r6
 800c70a:	4648      	mov	r0, r9
 800c70c:	f000 fc46 	bl	800cf9c <__lshift>
 800c710:	1c7b      	adds	r3, r7, #1
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	eb07 030b 	add.w	r3, r7, fp
 800c718:	9309      	str	r3, [sp, #36]	@ 0x24
 800c71a:	9b02      	ldr	r3, [sp, #8]
 800c71c:	f003 0301 	and.w	r3, r3, #1
 800c720:	46a8      	mov	r8, r5
 800c722:	9308      	str	r3, [sp, #32]
 800c724:	4605      	mov	r5, r0
 800c726:	9b04      	ldr	r3, [sp, #16]
 800c728:	9801      	ldr	r0, [sp, #4]
 800c72a:	4621      	mov	r1, r4
 800c72c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800c730:	f7ff fafc 	bl	800bd2c <quorem>
 800c734:	4641      	mov	r1, r8
 800c736:	9002      	str	r0, [sp, #8]
 800c738:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c73c:	9801      	ldr	r0, [sp, #4]
 800c73e:	f000 fc99 	bl	800d074 <__mcmp>
 800c742:	462a      	mov	r2, r5
 800c744:	9006      	str	r0, [sp, #24]
 800c746:	4621      	mov	r1, r4
 800c748:	4648      	mov	r0, r9
 800c74a:	f000 fcaf 	bl	800d0ac <__mdiff>
 800c74e:	68c2      	ldr	r2, [r0, #12]
 800c750:	4606      	mov	r6, r0
 800c752:	b9fa      	cbnz	r2, 800c794 <_dtoa_r+0x954>
 800c754:	4601      	mov	r1, r0
 800c756:	9801      	ldr	r0, [sp, #4]
 800c758:	f000 fc8c 	bl	800d074 <__mcmp>
 800c75c:	4602      	mov	r2, r0
 800c75e:	4631      	mov	r1, r6
 800c760:	4648      	mov	r0, r9
 800c762:	920a      	str	r2, [sp, #40]	@ 0x28
 800c764:	f000 fa0a 	bl	800cb7c <_Bfree>
 800c768:	9b07      	ldr	r3, [sp, #28]
 800c76a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c76c:	9e04      	ldr	r6, [sp, #16]
 800c76e:	ea42 0103 	orr.w	r1, r2, r3
 800c772:	9b08      	ldr	r3, [sp, #32]
 800c774:	4319      	orrs	r1, r3
 800c776:	d10f      	bne.n	800c798 <_dtoa_r+0x958>
 800c778:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c77c:	d028      	beq.n	800c7d0 <_dtoa_r+0x990>
 800c77e:	9b06      	ldr	r3, [sp, #24]
 800c780:	2b00      	cmp	r3, #0
 800c782:	dd02      	ble.n	800c78a <_dtoa_r+0x94a>
 800c784:	9b02      	ldr	r3, [sp, #8]
 800c786:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c78a:	f88b a000 	strb.w	sl, [fp]
 800c78e:	e55e      	b.n	800c24e <_dtoa_r+0x40e>
 800c790:	4628      	mov	r0, r5
 800c792:	e7bd      	b.n	800c710 <_dtoa_r+0x8d0>
 800c794:	2201      	movs	r2, #1
 800c796:	e7e2      	b.n	800c75e <_dtoa_r+0x91e>
 800c798:	9b06      	ldr	r3, [sp, #24]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	db04      	blt.n	800c7a8 <_dtoa_r+0x968>
 800c79e:	9907      	ldr	r1, [sp, #28]
 800c7a0:	430b      	orrs	r3, r1
 800c7a2:	9908      	ldr	r1, [sp, #32]
 800c7a4:	430b      	orrs	r3, r1
 800c7a6:	d120      	bne.n	800c7ea <_dtoa_r+0x9aa>
 800c7a8:	2a00      	cmp	r2, #0
 800c7aa:	ddee      	ble.n	800c78a <_dtoa_r+0x94a>
 800c7ac:	9901      	ldr	r1, [sp, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	4648      	mov	r0, r9
 800c7b2:	f000 fbf3 	bl	800cf9c <__lshift>
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	9001      	str	r0, [sp, #4]
 800c7ba:	f000 fc5b 	bl	800d074 <__mcmp>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	dc03      	bgt.n	800c7ca <_dtoa_r+0x98a>
 800c7c2:	d1e2      	bne.n	800c78a <_dtoa_r+0x94a>
 800c7c4:	f01a 0f01 	tst.w	sl, #1
 800c7c8:	d0df      	beq.n	800c78a <_dtoa_r+0x94a>
 800c7ca:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c7ce:	d1d9      	bne.n	800c784 <_dtoa_r+0x944>
 800c7d0:	2339      	movs	r3, #57	@ 0x39
 800c7d2:	f88b 3000 	strb.w	r3, [fp]
 800c7d6:	4633      	mov	r3, r6
 800c7d8:	461e      	mov	r6, r3
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c7e0:	2a39      	cmp	r2, #57	@ 0x39
 800c7e2:	d052      	beq.n	800c88a <_dtoa_r+0xa4a>
 800c7e4:	3201      	adds	r2, #1
 800c7e6:	701a      	strb	r2, [r3, #0]
 800c7e8:	e531      	b.n	800c24e <_dtoa_r+0x40e>
 800c7ea:	2a00      	cmp	r2, #0
 800c7ec:	dd07      	ble.n	800c7fe <_dtoa_r+0x9be>
 800c7ee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c7f2:	d0ed      	beq.n	800c7d0 <_dtoa_r+0x990>
 800c7f4:	f10a 0301 	add.w	r3, sl, #1
 800c7f8:	f88b 3000 	strb.w	r3, [fp]
 800c7fc:	e527      	b.n	800c24e <_dtoa_r+0x40e>
 800c7fe:	9b04      	ldr	r3, [sp, #16]
 800c800:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c802:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c806:	4293      	cmp	r3, r2
 800c808:	d029      	beq.n	800c85e <_dtoa_r+0xa1e>
 800c80a:	9901      	ldr	r1, [sp, #4]
 800c80c:	2300      	movs	r3, #0
 800c80e:	220a      	movs	r2, #10
 800c810:	4648      	mov	r0, r9
 800c812:	f000 f9d5 	bl	800cbc0 <__multadd>
 800c816:	45a8      	cmp	r8, r5
 800c818:	9001      	str	r0, [sp, #4]
 800c81a:	f04f 0300 	mov.w	r3, #0
 800c81e:	f04f 020a 	mov.w	r2, #10
 800c822:	4641      	mov	r1, r8
 800c824:	4648      	mov	r0, r9
 800c826:	d107      	bne.n	800c838 <_dtoa_r+0x9f8>
 800c828:	f000 f9ca 	bl	800cbc0 <__multadd>
 800c82c:	4680      	mov	r8, r0
 800c82e:	4605      	mov	r5, r0
 800c830:	9b04      	ldr	r3, [sp, #16]
 800c832:	3301      	adds	r3, #1
 800c834:	9304      	str	r3, [sp, #16]
 800c836:	e776      	b.n	800c726 <_dtoa_r+0x8e6>
 800c838:	f000 f9c2 	bl	800cbc0 <__multadd>
 800c83c:	4629      	mov	r1, r5
 800c83e:	4680      	mov	r8, r0
 800c840:	2300      	movs	r3, #0
 800c842:	220a      	movs	r2, #10
 800c844:	4648      	mov	r0, r9
 800c846:	f000 f9bb 	bl	800cbc0 <__multadd>
 800c84a:	4605      	mov	r5, r0
 800c84c:	e7f0      	b.n	800c830 <_dtoa_r+0x9f0>
 800c84e:	f1bb 0f00 	cmp.w	fp, #0
 800c852:	bfcc      	ite	gt
 800c854:	465e      	movgt	r6, fp
 800c856:	2601      	movle	r6, #1
 800c858:	443e      	add	r6, r7
 800c85a:	f04f 0800 	mov.w	r8, #0
 800c85e:	9901      	ldr	r1, [sp, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	4648      	mov	r0, r9
 800c864:	f000 fb9a 	bl	800cf9c <__lshift>
 800c868:	4621      	mov	r1, r4
 800c86a:	9001      	str	r0, [sp, #4]
 800c86c:	f000 fc02 	bl	800d074 <__mcmp>
 800c870:	2800      	cmp	r0, #0
 800c872:	dcb0      	bgt.n	800c7d6 <_dtoa_r+0x996>
 800c874:	d102      	bne.n	800c87c <_dtoa_r+0xa3c>
 800c876:	f01a 0f01 	tst.w	sl, #1
 800c87a:	d1ac      	bne.n	800c7d6 <_dtoa_r+0x996>
 800c87c:	4633      	mov	r3, r6
 800c87e:	461e      	mov	r6, r3
 800c880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c884:	2a30      	cmp	r2, #48	@ 0x30
 800c886:	d0fa      	beq.n	800c87e <_dtoa_r+0xa3e>
 800c888:	e4e1      	b.n	800c24e <_dtoa_r+0x40e>
 800c88a:	429f      	cmp	r7, r3
 800c88c:	d1a4      	bne.n	800c7d8 <_dtoa_r+0x998>
 800c88e:	9b05      	ldr	r3, [sp, #20]
 800c890:	3301      	adds	r3, #1
 800c892:	9305      	str	r3, [sp, #20]
 800c894:	2331      	movs	r3, #49	@ 0x31
 800c896:	703b      	strb	r3, [r7, #0]
 800c898:	e4d9      	b.n	800c24e <_dtoa_r+0x40e>
 800c89a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c89c:	4f16      	ldr	r7, [pc, #88]	@ (800c8f8 <_dtoa_r+0xab8>)
 800c89e:	b11b      	cbz	r3, 800c8a8 <_dtoa_r+0xa68>
 800c8a0:	f107 0308 	add.w	r3, r7, #8
 800c8a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c8a6:	6013      	str	r3, [r2, #0]
 800c8a8:	4638      	mov	r0, r7
 800c8aa:	b011      	add	sp, #68	@ 0x44
 800c8ac:	ecbd 8b02 	vpop	{d8}
 800c8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b4:	9b07      	ldr	r3, [sp, #28]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	f77f ae2c 	ble.w	800c514 <_dtoa_r+0x6d4>
 800c8bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8c0:	2001      	movs	r0, #1
 800c8c2:	e64c      	b.n	800c55e <_dtoa_r+0x71e>
 800c8c4:	f1bb 0f00 	cmp.w	fp, #0
 800c8c8:	f77f aed8 	ble.w	800c67c <_dtoa_r+0x83c>
 800c8cc:	463e      	mov	r6, r7
 800c8ce:	9801      	ldr	r0, [sp, #4]
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	f7ff fa2b 	bl	800bd2c <quorem>
 800c8d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c8da:	f806 ab01 	strb.w	sl, [r6], #1
 800c8de:	1bf2      	subs	r2, r6, r7
 800c8e0:	4593      	cmp	fp, r2
 800c8e2:	ddb4      	ble.n	800c84e <_dtoa_r+0xa0e>
 800c8e4:	9901      	ldr	r1, [sp, #4]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	220a      	movs	r2, #10
 800c8ea:	4648      	mov	r0, r9
 800c8ec:	f000 f968 	bl	800cbc0 <__multadd>
 800c8f0:	9001      	str	r0, [sp, #4]
 800c8f2:	e7ec      	b.n	800c8ce <_dtoa_r+0xa8e>
 800c8f4:	0800fed3 	.word	0x0800fed3
 800c8f8:	0800fe57 	.word	0x0800fe57

0800c8fc <_free_r>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	4605      	mov	r5, r0
 800c900:	2900      	cmp	r1, #0
 800c902:	d041      	beq.n	800c988 <_free_r+0x8c>
 800c904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c908:	1f0c      	subs	r4, r1, #4
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	bfb8      	it	lt
 800c90e:	18e4      	addlt	r4, r4, r3
 800c910:	f000 f8e8 	bl	800cae4 <__malloc_lock>
 800c914:	4a1d      	ldr	r2, [pc, #116]	@ (800c98c <_free_r+0x90>)
 800c916:	6813      	ldr	r3, [r2, #0]
 800c918:	b933      	cbnz	r3, 800c928 <_free_r+0x2c>
 800c91a:	6063      	str	r3, [r4, #4]
 800c91c:	6014      	str	r4, [r2, #0]
 800c91e:	4628      	mov	r0, r5
 800c920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c924:	f000 b8e4 	b.w	800caf0 <__malloc_unlock>
 800c928:	42a3      	cmp	r3, r4
 800c92a:	d908      	bls.n	800c93e <_free_r+0x42>
 800c92c:	6820      	ldr	r0, [r4, #0]
 800c92e:	1821      	adds	r1, r4, r0
 800c930:	428b      	cmp	r3, r1
 800c932:	bf01      	itttt	eq
 800c934:	6819      	ldreq	r1, [r3, #0]
 800c936:	685b      	ldreq	r3, [r3, #4]
 800c938:	1809      	addeq	r1, r1, r0
 800c93a:	6021      	streq	r1, [r4, #0]
 800c93c:	e7ed      	b.n	800c91a <_free_r+0x1e>
 800c93e:	461a      	mov	r2, r3
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	b10b      	cbz	r3, 800c948 <_free_r+0x4c>
 800c944:	42a3      	cmp	r3, r4
 800c946:	d9fa      	bls.n	800c93e <_free_r+0x42>
 800c948:	6811      	ldr	r1, [r2, #0]
 800c94a:	1850      	adds	r0, r2, r1
 800c94c:	42a0      	cmp	r0, r4
 800c94e:	d10b      	bne.n	800c968 <_free_r+0x6c>
 800c950:	6820      	ldr	r0, [r4, #0]
 800c952:	4401      	add	r1, r0
 800c954:	1850      	adds	r0, r2, r1
 800c956:	4283      	cmp	r3, r0
 800c958:	6011      	str	r1, [r2, #0]
 800c95a:	d1e0      	bne.n	800c91e <_free_r+0x22>
 800c95c:	6818      	ldr	r0, [r3, #0]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	6053      	str	r3, [r2, #4]
 800c962:	4408      	add	r0, r1
 800c964:	6010      	str	r0, [r2, #0]
 800c966:	e7da      	b.n	800c91e <_free_r+0x22>
 800c968:	d902      	bls.n	800c970 <_free_r+0x74>
 800c96a:	230c      	movs	r3, #12
 800c96c:	602b      	str	r3, [r5, #0]
 800c96e:	e7d6      	b.n	800c91e <_free_r+0x22>
 800c970:	6820      	ldr	r0, [r4, #0]
 800c972:	1821      	adds	r1, r4, r0
 800c974:	428b      	cmp	r3, r1
 800c976:	bf04      	itt	eq
 800c978:	6819      	ldreq	r1, [r3, #0]
 800c97a:	685b      	ldreq	r3, [r3, #4]
 800c97c:	6063      	str	r3, [r4, #4]
 800c97e:	bf04      	itt	eq
 800c980:	1809      	addeq	r1, r1, r0
 800c982:	6021      	streq	r1, [r4, #0]
 800c984:	6054      	str	r4, [r2, #4]
 800c986:	e7ca      	b.n	800c91e <_free_r+0x22>
 800c988:	bd38      	pop	{r3, r4, r5, pc}
 800c98a:	bf00      	nop
 800c98c:	24003620 	.word	0x24003620

0800c990 <malloc>:
 800c990:	4b02      	ldr	r3, [pc, #8]	@ (800c99c <malloc+0xc>)
 800c992:	4601      	mov	r1, r0
 800c994:	6818      	ldr	r0, [r3, #0]
 800c996:	f000 b825 	b.w	800c9e4 <_malloc_r>
 800c99a:	bf00      	nop
 800c99c:	2400001c 	.word	0x2400001c

0800c9a0 <sbrk_aligned>:
 800c9a0:	b570      	push	{r4, r5, r6, lr}
 800c9a2:	4e0f      	ldr	r6, [pc, #60]	@ (800c9e0 <sbrk_aligned+0x40>)
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	6831      	ldr	r1, [r6, #0]
 800c9a8:	4605      	mov	r5, r0
 800c9aa:	b911      	cbnz	r1, 800c9b2 <sbrk_aligned+0x12>
 800c9ac:	f002 fb1c 	bl	800efe8 <_sbrk_r>
 800c9b0:	6030      	str	r0, [r6, #0]
 800c9b2:	4621      	mov	r1, r4
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	f002 fb17 	bl	800efe8 <_sbrk_r>
 800c9ba:	1c43      	adds	r3, r0, #1
 800c9bc:	d103      	bne.n	800c9c6 <sbrk_aligned+0x26>
 800c9be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	bd70      	pop	{r4, r5, r6, pc}
 800c9c6:	1cc4      	adds	r4, r0, #3
 800c9c8:	f024 0403 	bic.w	r4, r4, #3
 800c9cc:	42a0      	cmp	r0, r4
 800c9ce:	d0f8      	beq.n	800c9c2 <sbrk_aligned+0x22>
 800c9d0:	1a21      	subs	r1, r4, r0
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	f002 fb08 	bl	800efe8 <_sbrk_r>
 800c9d8:	3001      	adds	r0, #1
 800c9da:	d1f2      	bne.n	800c9c2 <sbrk_aligned+0x22>
 800c9dc:	e7ef      	b.n	800c9be <sbrk_aligned+0x1e>
 800c9de:	bf00      	nop
 800c9e0:	2400361c 	.word	0x2400361c

0800c9e4 <_malloc_r>:
 800c9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9e8:	1ccd      	adds	r5, r1, #3
 800c9ea:	f025 0503 	bic.w	r5, r5, #3
 800c9ee:	3508      	adds	r5, #8
 800c9f0:	2d0c      	cmp	r5, #12
 800c9f2:	bf38      	it	cc
 800c9f4:	250c      	movcc	r5, #12
 800c9f6:	2d00      	cmp	r5, #0
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	db01      	blt.n	800ca00 <_malloc_r+0x1c>
 800c9fc:	42a9      	cmp	r1, r5
 800c9fe:	d904      	bls.n	800ca0a <_malloc_r+0x26>
 800ca00:	230c      	movs	r3, #12
 800ca02:	6033      	str	r3, [r6, #0]
 800ca04:	2000      	movs	r0, #0
 800ca06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cae0 <_malloc_r+0xfc>
 800ca0e:	f000 f869 	bl	800cae4 <__malloc_lock>
 800ca12:	f8d8 3000 	ldr.w	r3, [r8]
 800ca16:	461c      	mov	r4, r3
 800ca18:	bb44      	cbnz	r4, 800ca6c <_malloc_r+0x88>
 800ca1a:	4629      	mov	r1, r5
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	f7ff ffbf 	bl	800c9a0 <sbrk_aligned>
 800ca22:	1c43      	adds	r3, r0, #1
 800ca24:	4604      	mov	r4, r0
 800ca26:	d158      	bne.n	800cada <_malloc_r+0xf6>
 800ca28:	f8d8 4000 	ldr.w	r4, [r8]
 800ca2c:	4627      	mov	r7, r4
 800ca2e:	2f00      	cmp	r7, #0
 800ca30:	d143      	bne.n	800caba <_malloc_r+0xd6>
 800ca32:	2c00      	cmp	r4, #0
 800ca34:	d04b      	beq.n	800cace <_malloc_r+0xea>
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	4639      	mov	r1, r7
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	eb04 0903 	add.w	r9, r4, r3
 800ca40:	f002 fad2 	bl	800efe8 <_sbrk_r>
 800ca44:	4581      	cmp	r9, r0
 800ca46:	d142      	bne.n	800cace <_malloc_r+0xea>
 800ca48:	6821      	ldr	r1, [r4, #0]
 800ca4a:	1a6d      	subs	r5, r5, r1
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	4630      	mov	r0, r6
 800ca50:	f7ff ffa6 	bl	800c9a0 <sbrk_aligned>
 800ca54:	3001      	adds	r0, #1
 800ca56:	d03a      	beq.n	800cace <_malloc_r+0xea>
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	442b      	add	r3, r5
 800ca5c:	6023      	str	r3, [r4, #0]
 800ca5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca62:	685a      	ldr	r2, [r3, #4]
 800ca64:	bb62      	cbnz	r2, 800cac0 <_malloc_r+0xdc>
 800ca66:	f8c8 7000 	str.w	r7, [r8]
 800ca6a:	e00f      	b.n	800ca8c <_malloc_r+0xa8>
 800ca6c:	6822      	ldr	r2, [r4, #0]
 800ca6e:	1b52      	subs	r2, r2, r5
 800ca70:	d420      	bmi.n	800cab4 <_malloc_r+0xd0>
 800ca72:	2a0b      	cmp	r2, #11
 800ca74:	d917      	bls.n	800caa6 <_malloc_r+0xc2>
 800ca76:	1961      	adds	r1, r4, r5
 800ca78:	42a3      	cmp	r3, r4
 800ca7a:	6025      	str	r5, [r4, #0]
 800ca7c:	bf18      	it	ne
 800ca7e:	6059      	strne	r1, [r3, #4]
 800ca80:	6863      	ldr	r3, [r4, #4]
 800ca82:	bf08      	it	eq
 800ca84:	f8c8 1000 	streq.w	r1, [r8]
 800ca88:	5162      	str	r2, [r4, r5]
 800ca8a:	604b      	str	r3, [r1, #4]
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f000 f82f 	bl	800caf0 <__malloc_unlock>
 800ca92:	f104 000b 	add.w	r0, r4, #11
 800ca96:	1d23      	adds	r3, r4, #4
 800ca98:	f020 0007 	bic.w	r0, r0, #7
 800ca9c:	1ac2      	subs	r2, r0, r3
 800ca9e:	bf1c      	itt	ne
 800caa0:	1a1b      	subne	r3, r3, r0
 800caa2:	50a3      	strne	r3, [r4, r2]
 800caa4:	e7af      	b.n	800ca06 <_malloc_r+0x22>
 800caa6:	6862      	ldr	r2, [r4, #4]
 800caa8:	42a3      	cmp	r3, r4
 800caaa:	bf0c      	ite	eq
 800caac:	f8c8 2000 	streq.w	r2, [r8]
 800cab0:	605a      	strne	r2, [r3, #4]
 800cab2:	e7eb      	b.n	800ca8c <_malloc_r+0xa8>
 800cab4:	4623      	mov	r3, r4
 800cab6:	6864      	ldr	r4, [r4, #4]
 800cab8:	e7ae      	b.n	800ca18 <_malloc_r+0x34>
 800caba:	463c      	mov	r4, r7
 800cabc:	687f      	ldr	r7, [r7, #4]
 800cabe:	e7b6      	b.n	800ca2e <_malloc_r+0x4a>
 800cac0:	461a      	mov	r2, r3
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	42a3      	cmp	r3, r4
 800cac6:	d1fb      	bne.n	800cac0 <_malloc_r+0xdc>
 800cac8:	2300      	movs	r3, #0
 800caca:	6053      	str	r3, [r2, #4]
 800cacc:	e7de      	b.n	800ca8c <_malloc_r+0xa8>
 800cace:	230c      	movs	r3, #12
 800cad0:	6033      	str	r3, [r6, #0]
 800cad2:	4630      	mov	r0, r6
 800cad4:	f000 f80c 	bl	800caf0 <__malloc_unlock>
 800cad8:	e794      	b.n	800ca04 <_malloc_r+0x20>
 800cada:	6005      	str	r5, [r0, #0]
 800cadc:	e7d6      	b.n	800ca8c <_malloc_r+0xa8>
 800cade:	bf00      	nop
 800cae0:	24003620 	.word	0x24003620

0800cae4 <__malloc_lock>:
 800cae4:	4801      	ldr	r0, [pc, #4]	@ (800caec <__malloc_lock+0x8>)
 800cae6:	f7ff b918 	b.w	800bd1a <__retarget_lock_acquire_recursive>
 800caea:	bf00      	nop
 800caec:	24003618 	.word	0x24003618

0800caf0 <__malloc_unlock>:
 800caf0:	4801      	ldr	r0, [pc, #4]	@ (800caf8 <__malloc_unlock+0x8>)
 800caf2:	f7ff b913 	b.w	800bd1c <__retarget_lock_release_recursive>
 800caf6:	bf00      	nop
 800caf8:	24003618 	.word	0x24003618

0800cafc <_Balloc>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	69c6      	ldr	r6, [r0, #28]
 800cb00:	4604      	mov	r4, r0
 800cb02:	460d      	mov	r5, r1
 800cb04:	b976      	cbnz	r6, 800cb24 <_Balloc+0x28>
 800cb06:	2010      	movs	r0, #16
 800cb08:	f7ff ff42 	bl	800c990 <malloc>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	61e0      	str	r0, [r4, #28]
 800cb10:	b920      	cbnz	r0, 800cb1c <_Balloc+0x20>
 800cb12:	4b18      	ldr	r3, [pc, #96]	@ (800cb74 <_Balloc+0x78>)
 800cb14:	4818      	ldr	r0, [pc, #96]	@ (800cb78 <_Balloc+0x7c>)
 800cb16:	216b      	movs	r1, #107	@ 0x6b
 800cb18:	f002 fa8e 	bl	800f038 <__assert_func>
 800cb1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb20:	6006      	str	r6, [r0, #0]
 800cb22:	60c6      	str	r6, [r0, #12]
 800cb24:	69e6      	ldr	r6, [r4, #28]
 800cb26:	68f3      	ldr	r3, [r6, #12]
 800cb28:	b183      	cbz	r3, 800cb4c <_Balloc+0x50>
 800cb2a:	69e3      	ldr	r3, [r4, #28]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb32:	b9b8      	cbnz	r0, 800cb64 <_Balloc+0x68>
 800cb34:	2101      	movs	r1, #1
 800cb36:	fa01 f605 	lsl.w	r6, r1, r5
 800cb3a:	1d72      	adds	r2, r6, #5
 800cb3c:	0092      	lsls	r2, r2, #2
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f002 fa98 	bl	800f074 <_calloc_r>
 800cb44:	b160      	cbz	r0, 800cb60 <_Balloc+0x64>
 800cb46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb4a:	e00e      	b.n	800cb6a <_Balloc+0x6e>
 800cb4c:	2221      	movs	r2, #33	@ 0x21
 800cb4e:	2104      	movs	r1, #4
 800cb50:	4620      	mov	r0, r4
 800cb52:	f002 fa8f 	bl	800f074 <_calloc_r>
 800cb56:	69e3      	ldr	r3, [r4, #28]
 800cb58:	60f0      	str	r0, [r6, #12]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d1e4      	bne.n	800cb2a <_Balloc+0x2e>
 800cb60:	2000      	movs	r0, #0
 800cb62:	bd70      	pop	{r4, r5, r6, pc}
 800cb64:	6802      	ldr	r2, [r0, #0]
 800cb66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb70:	e7f7      	b.n	800cb62 <_Balloc+0x66>
 800cb72:	bf00      	nop
 800cb74:	0800fe64 	.word	0x0800fe64
 800cb78:	0800fee4 	.word	0x0800fee4

0800cb7c <_Bfree>:
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	69c6      	ldr	r6, [r0, #28]
 800cb80:	4605      	mov	r5, r0
 800cb82:	460c      	mov	r4, r1
 800cb84:	b976      	cbnz	r6, 800cba4 <_Bfree+0x28>
 800cb86:	2010      	movs	r0, #16
 800cb88:	f7ff ff02 	bl	800c990 <malloc>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	61e8      	str	r0, [r5, #28]
 800cb90:	b920      	cbnz	r0, 800cb9c <_Bfree+0x20>
 800cb92:	4b09      	ldr	r3, [pc, #36]	@ (800cbb8 <_Bfree+0x3c>)
 800cb94:	4809      	ldr	r0, [pc, #36]	@ (800cbbc <_Bfree+0x40>)
 800cb96:	218f      	movs	r1, #143	@ 0x8f
 800cb98:	f002 fa4e 	bl	800f038 <__assert_func>
 800cb9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cba0:	6006      	str	r6, [r0, #0]
 800cba2:	60c6      	str	r6, [r0, #12]
 800cba4:	b13c      	cbz	r4, 800cbb6 <_Bfree+0x3a>
 800cba6:	69eb      	ldr	r3, [r5, #28]
 800cba8:	6862      	ldr	r2, [r4, #4]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbb0:	6021      	str	r1, [r4, #0]
 800cbb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}
 800cbb8:	0800fe64 	.word	0x0800fe64
 800cbbc:	0800fee4 	.word	0x0800fee4

0800cbc0 <__multadd>:
 800cbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc4:	690d      	ldr	r5, [r1, #16]
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	460c      	mov	r4, r1
 800cbca:	461e      	mov	r6, r3
 800cbcc:	f101 0c14 	add.w	ip, r1, #20
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	f8dc 3000 	ldr.w	r3, [ip]
 800cbd6:	b299      	uxth	r1, r3
 800cbd8:	fb02 6101 	mla	r1, r2, r1, r6
 800cbdc:	0c1e      	lsrs	r6, r3, #16
 800cbde:	0c0b      	lsrs	r3, r1, #16
 800cbe0:	fb02 3306 	mla	r3, r2, r6, r3
 800cbe4:	b289      	uxth	r1, r1
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbec:	4285      	cmp	r5, r0
 800cbee:	f84c 1b04 	str.w	r1, [ip], #4
 800cbf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbf6:	dcec      	bgt.n	800cbd2 <__multadd+0x12>
 800cbf8:	b30e      	cbz	r6, 800cc3e <__multadd+0x7e>
 800cbfa:	68a3      	ldr	r3, [r4, #8]
 800cbfc:	42ab      	cmp	r3, r5
 800cbfe:	dc19      	bgt.n	800cc34 <__multadd+0x74>
 800cc00:	6861      	ldr	r1, [r4, #4]
 800cc02:	4638      	mov	r0, r7
 800cc04:	3101      	adds	r1, #1
 800cc06:	f7ff ff79 	bl	800cafc <_Balloc>
 800cc0a:	4680      	mov	r8, r0
 800cc0c:	b928      	cbnz	r0, 800cc1a <__multadd+0x5a>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	4b0c      	ldr	r3, [pc, #48]	@ (800cc44 <__multadd+0x84>)
 800cc12:	480d      	ldr	r0, [pc, #52]	@ (800cc48 <__multadd+0x88>)
 800cc14:	21ba      	movs	r1, #186	@ 0xba
 800cc16:	f002 fa0f 	bl	800f038 <__assert_func>
 800cc1a:	6922      	ldr	r2, [r4, #16]
 800cc1c:	3202      	adds	r2, #2
 800cc1e:	f104 010c 	add.w	r1, r4, #12
 800cc22:	0092      	lsls	r2, r2, #2
 800cc24:	300c      	adds	r0, #12
 800cc26:	f002 f9ef 	bl	800f008 <memcpy>
 800cc2a:	4621      	mov	r1, r4
 800cc2c:	4638      	mov	r0, r7
 800cc2e:	f7ff ffa5 	bl	800cb7c <_Bfree>
 800cc32:	4644      	mov	r4, r8
 800cc34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc38:	3501      	adds	r5, #1
 800cc3a:	615e      	str	r6, [r3, #20]
 800cc3c:	6125      	str	r5, [r4, #16]
 800cc3e:	4620      	mov	r0, r4
 800cc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc44:	0800fed3 	.word	0x0800fed3
 800cc48:	0800fee4 	.word	0x0800fee4

0800cc4c <__s2b>:
 800cc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc50:	460c      	mov	r4, r1
 800cc52:	4615      	mov	r5, r2
 800cc54:	461f      	mov	r7, r3
 800cc56:	2209      	movs	r2, #9
 800cc58:	3308      	adds	r3, #8
 800cc5a:	4606      	mov	r6, r0
 800cc5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc60:	2100      	movs	r1, #0
 800cc62:	2201      	movs	r2, #1
 800cc64:	429a      	cmp	r2, r3
 800cc66:	db09      	blt.n	800cc7c <__s2b+0x30>
 800cc68:	4630      	mov	r0, r6
 800cc6a:	f7ff ff47 	bl	800cafc <_Balloc>
 800cc6e:	b940      	cbnz	r0, 800cc82 <__s2b+0x36>
 800cc70:	4602      	mov	r2, r0
 800cc72:	4b19      	ldr	r3, [pc, #100]	@ (800ccd8 <__s2b+0x8c>)
 800cc74:	4819      	ldr	r0, [pc, #100]	@ (800ccdc <__s2b+0x90>)
 800cc76:	21d3      	movs	r1, #211	@ 0xd3
 800cc78:	f002 f9de 	bl	800f038 <__assert_func>
 800cc7c:	0052      	lsls	r2, r2, #1
 800cc7e:	3101      	adds	r1, #1
 800cc80:	e7f0      	b.n	800cc64 <__s2b+0x18>
 800cc82:	9b08      	ldr	r3, [sp, #32]
 800cc84:	6143      	str	r3, [r0, #20]
 800cc86:	2d09      	cmp	r5, #9
 800cc88:	f04f 0301 	mov.w	r3, #1
 800cc8c:	6103      	str	r3, [r0, #16]
 800cc8e:	dd16      	ble.n	800ccbe <__s2b+0x72>
 800cc90:	f104 0909 	add.w	r9, r4, #9
 800cc94:	46c8      	mov	r8, r9
 800cc96:	442c      	add	r4, r5
 800cc98:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc9c:	4601      	mov	r1, r0
 800cc9e:	3b30      	subs	r3, #48	@ 0x30
 800cca0:	220a      	movs	r2, #10
 800cca2:	4630      	mov	r0, r6
 800cca4:	f7ff ff8c 	bl	800cbc0 <__multadd>
 800cca8:	45a0      	cmp	r8, r4
 800ccaa:	d1f5      	bne.n	800cc98 <__s2b+0x4c>
 800ccac:	f1a5 0408 	sub.w	r4, r5, #8
 800ccb0:	444c      	add	r4, r9
 800ccb2:	1b2d      	subs	r5, r5, r4
 800ccb4:	1963      	adds	r3, r4, r5
 800ccb6:	42bb      	cmp	r3, r7
 800ccb8:	db04      	blt.n	800ccc4 <__s2b+0x78>
 800ccba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccbe:	340a      	adds	r4, #10
 800ccc0:	2509      	movs	r5, #9
 800ccc2:	e7f6      	b.n	800ccb2 <__s2b+0x66>
 800ccc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccc8:	4601      	mov	r1, r0
 800ccca:	3b30      	subs	r3, #48	@ 0x30
 800cccc:	220a      	movs	r2, #10
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f7ff ff76 	bl	800cbc0 <__multadd>
 800ccd4:	e7ee      	b.n	800ccb4 <__s2b+0x68>
 800ccd6:	bf00      	nop
 800ccd8:	0800fed3 	.word	0x0800fed3
 800ccdc:	0800fee4 	.word	0x0800fee4

0800cce0 <__hi0bits>:
 800cce0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cce4:	4603      	mov	r3, r0
 800cce6:	bf36      	itet	cc
 800cce8:	0403      	lslcc	r3, r0, #16
 800ccea:	2000      	movcs	r0, #0
 800ccec:	2010      	movcc	r0, #16
 800ccee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ccf2:	bf3c      	itt	cc
 800ccf4:	021b      	lslcc	r3, r3, #8
 800ccf6:	3008      	addcc	r0, #8
 800ccf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccfc:	bf3c      	itt	cc
 800ccfe:	011b      	lslcc	r3, r3, #4
 800cd00:	3004      	addcc	r0, #4
 800cd02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd06:	bf3c      	itt	cc
 800cd08:	009b      	lslcc	r3, r3, #2
 800cd0a:	3002      	addcc	r0, #2
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	db05      	blt.n	800cd1c <__hi0bits+0x3c>
 800cd10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd14:	f100 0001 	add.w	r0, r0, #1
 800cd18:	bf08      	it	eq
 800cd1a:	2020      	moveq	r0, #32
 800cd1c:	4770      	bx	lr

0800cd1e <__lo0bits>:
 800cd1e:	6803      	ldr	r3, [r0, #0]
 800cd20:	4602      	mov	r2, r0
 800cd22:	f013 0007 	ands.w	r0, r3, #7
 800cd26:	d00b      	beq.n	800cd40 <__lo0bits+0x22>
 800cd28:	07d9      	lsls	r1, r3, #31
 800cd2a:	d421      	bmi.n	800cd70 <__lo0bits+0x52>
 800cd2c:	0798      	lsls	r0, r3, #30
 800cd2e:	bf49      	itett	mi
 800cd30:	085b      	lsrmi	r3, r3, #1
 800cd32:	089b      	lsrpl	r3, r3, #2
 800cd34:	2001      	movmi	r0, #1
 800cd36:	6013      	strmi	r3, [r2, #0]
 800cd38:	bf5c      	itt	pl
 800cd3a:	6013      	strpl	r3, [r2, #0]
 800cd3c:	2002      	movpl	r0, #2
 800cd3e:	4770      	bx	lr
 800cd40:	b299      	uxth	r1, r3
 800cd42:	b909      	cbnz	r1, 800cd48 <__lo0bits+0x2a>
 800cd44:	0c1b      	lsrs	r3, r3, #16
 800cd46:	2010      	movs	r0, #16
 800cd48:	b2d9      	uxtb	r1, r3
 800cd4a:	b909      	cbnz	r1, 800cd50 <__lo0bits+0x32>
 800cd4c:	3008      	adds	r0, #8
 800cd4e:	0a1b      	lsrs	r3, r3, #8
 800cd50:	0719      	lsls	r1, r3, #28
 800cd52:	bf04      	itt	eq
 800cd54:	091b      	lsreq	r3, r3, #4
 800cd56:	3004      	addeq	r0, #4
 800cd58:	0799      	lsls	r1, r3, #30
 800cd5a:	bf04      	itt	eq
 800cd5c:	089b      	lsreq	r3, r3, #2
 800cd5e:	3002      	addeq	r0, #2
 800cd60:	07d9      	lsls	r1, r3, #31
 800cd62:	d403      	bmi.n	800cd6c <__lo0bits+0x4e>
 800cd64:	085b      	lsrs	r3, r3, #1
 800cd66:	f100 0001 	add.w	r0, r0, #1
 800cd6a:	d003      	beq.n	800cd74 <__lo0bits+0x56>
 800cd6c:	6013      	str	r3, [r2, #0]
 800cd6e:	4770      	bx	lr
 800cd70:	2000      	movs	r0, #0
 800cd72:	4770      	bx	lr
 800cd74:	2020      	movs	r0, #32
 800cd76:	4770      	bx	lr

0800cd78 <__i2b>:
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	2101      	movs	r1, #1
 800cd7e:	f7ff febd 	bl	800cafc <_Balloc>
 800cd82:	4602      	mov	r2, r0
 800cd84:	b928      	cbnz	r0, 800cd92 <__i2b+0x1a>
 800cd86:	4b05      	ldr	r3, [pc, #20]	@ (800cd9c <__i2b+0x24>)
 800cd88:	4805      	ldr	r0, [pc, #20]	@ (800cda0 <__i2b+0x28>)
 800cd8a:	f240 1145 	movw	r1, #325	@ 0x145
 800cd8e:	f002 f953 	bl	800f038 <__assert_func>
 800cd92:	2301      	movs	r3, #1
 800cd94:	6144      	str	r4, [r0, #20]
 800cd96:	6103      	str	r3, [r0, #16]
 800cd98:	bd10      	pop	{r4, pc}
 800cd9a:	bf00      	nop
 800cd9c:	0800fed3 	.word	0x0800fed3
 800cda0:	0800fee4 	.word	0x0800fee4

0800cda4 <__multiply>:
 800cda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda8:	4617      	mov	r7, r2
 800cdaa:	690a      	ldr	r2, [r1, #16]
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	bfa8      	it	ge
 800cdb2:	463b      	movge	r3, r7
 800cdb4:	4689      	mov	r9, r1
 800cdb6:	bfa4      	itt	ge
 800cdb8:	460f      	movge	r7, r1
 800cdba:	4699      	movge	r9, r3
 800cdbc:	693d      	ldr	r5, [r7, #16]
 800cdbe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	6879      	ldr	r1, [r7, #4]
 800cdc6:	eb05 060a 	add.w	r6, r5, sl
 800cdca:	42b3      	cmp	r3, r6
 800cdcc:	b085      	sub	sp, #20
 800cdce:	bfb8      	it	lt
 800cdd0:	3101      	addlt	r1, #1
 800cdd2:	f7ff fe93 	bl	800cafc <_Balloc>
 800cdd6:	b930      	cbnz	r0, 800cde6 <__multiply+0x42>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	4b41      	ldr	r3, [pc, #260]	@ (800cee0 <__multiply+0x13c>)
 800cddc:	4841      	ldr	r0, [pc, #260]	@ (800cee4 <__multiply+0x140>)
 800cdde:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cde2:	f002 f929 	bl	800f038 <__assert_func>
 800cde6:	f100 0414 	add.w	r4, r0, #20
 800cdea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cdee:	4623      	mov	r3, r4
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	4573      	cmp	r3, lr
 800cdf4:	d320      	bcc.n	800ce38 <__multiply+0x94>
 800cdf6:	f107 0814 	add.w	r8, r7, #20
 800cdfa:	f109 0114 	add.w	r1, r9, #20
 800cdfe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ce02:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ce06:	9302      	str	r3, [sp, #8]
 800ce08:	1beb      	subs	r3, r5, r7
 800ce0a:	3b15      	subs	r3, #21
 800ce0c:	f023 0303 	bic.w	r3, r3, #3
 800ce10:	3304      	adds	r3, #4
 800ce12:	3715      	adds	r7, #21
 800ce14:	42bd      	cmp	r5, r7
 800ce16:	bf38      	it	cc
 800ce18:	2304      	movcc	r3, #4
 800ce1a:	9301      	str	r3, [sp, #4]
 800ce1c:	9b02      	ldr	r3, [sp, #8]
 800ce1e:	9103      	str	r1, [sp, #12]
 800ce20:	428b      	cmp	r3, r1
 800ce22:	d80c      	bhi.n	800ce3e <__multiply+0x9a>
 800ce24:	2e00      	cmp	r6, #0
 800ce26:	dd03      	ble.n	800ce30 <__multiply+0x8c>
 800ce28:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d055      	beq.n	800cedc <__multiply+0x138>
 800ce30:	6106      	str	r6, [r0, #16]
 800ce32:	b005      	add	sp, #20
 800ce34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce38:	f843 2b04 	str.w	r2, [r3], #4
 800ce3c:	e7d9      	b.n	800cdf2 <__multiply+0x4e>
 800ce3e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce42:	f1ba 0f00 	cmp.w	sl, #0
 800ce46:	d01f      	beq.n	800ce88 <__multiply+0xe4>
 800ce48:	46c4      	mov	ip, r8
 800ce4a:	46a1      	mov	r9, r4
 800ce4c:	2700      	movs	r7, #0
 800ce4e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce52:	f8d9 3000 	ldr.w	r3, [r9]
 800ce56:	fa1f fb82 	uxth.w	fp, r2
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce60:	443b      	add	r3, r7
 800ce62:	f8d9 7000 	ldr.w	r7, [r9]
 800ce66:	0c12      	lsrs	r2, r2, #16
 800ce68:	0c3f      	lsrs	r7, r7, #16
 800ce6a:	fb0a 7202 	mla	r2, sl, r2, r7
 800ce6e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce78:	4565      	cmp	r5, ip
 800ce7a:	f849 3b04 	str.w	r3, [r9], #4
 800ce7e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ce82:	d8e4      	bhi.n	800ce4e <__multiply+0xaa>
 800ce84:	9b01      	ldr	r3, [sp, #4]
 800ce86:	50e7      	str	r7, [r4, r3]
 800ce88:	9b03      	ldr	r3, [sp, #12]
 800ce8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce8e:	3104      	adds	r1, #4
 800ce90:	f1b9 0f00 	cmp.w	r9, #0
 800ce94:	d020      	beq.n	800ced8 <__multiply+0x134>
 800ce96:	6823      	ldr	r3, [r4, #0]
 800ce98:	4647      	mov	r7, r8
 800ce9a:	46a4      	mov	ip, r4
 800ce9c:	f04f 0a00 	mov.w	sl, #0
 800cea0:	f8b7 b000 	ldrh.w	fp, [r7]
 800cea4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cea8:	fb09 220b 	mla	r2, r9, fp, r2
 800ceac:	4452      	add	r2, sl
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ceb4:	f84c 3b04 	str.w	r3, [ip], #4
 800ceb8:	f857 3b04 	ldr.w	r3, [r7], #4
 800cebc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cec0:	f8bc 3000 	ldrh.w	r3, [ip]
 800cec4:	fb09 330a 	mla	r3, r9, sl, r3
 800cec8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cecc:	42bd      	cmp	r5, r7
 800cece:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ced2:	d8e5      	bhi.n	800cea0 <__multiply+0xfc>
 800ced4:	9a01      	ldr	r2, [sp, #4]
 800ced6:	50a3      	str	r3, [r4, r2]
 800ced8:	3404      	adds	r4, #4
 800ceda:	e79f      	b.n	800ce1c <__multiply+0x78>
 800cedc:	3e01      	subs	r6, #1
 800cede:	e7a1      	b.n	800ce24 <__multiply+0x80>
 800cee0:	0800fed3 	.word	0x0800fed3
 800cee4:	0800fee4 	.word	0x0800fee4

0800cee8 <__pow5mult>:
 800cee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceec:	4615      	mov	r5, r2
 800ceee:	f012 0203 	ands.w	r2, r2, #3
 800cef2:	4607      	mov	r7, r0
 800cef4:	460e      	mov	r6, r1
 800cef6:	d007      	beq.n	800cf08 <__pow5mult+0x20>
 800cef8:	4c25      	ldr	r4, [pc, #148]	@ (800cf90 <__pow5mult+0xa8>)
 800cefa:	3a01      	subs	r2, #1
 800cefc:	2300      	movs	r3, #0
 800cefe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf02:	f7ff fe5d 	bl	800cbc0 <__multadd>
 800cf06:	4606      	mov	r6, r0
 800cf08:	10ad      	asrs	r5, r5, #2
 800cf0a:	d03d      	beq.n	800cf88 <__pow5mult+0xa0>
 800cf0c:	69fc      	ldr	r4, [r7, #28]
 800cf0e:	b97c      	cbnz	r4, 800cf30 <__pow5mult+0x48>
 800cf10:	2010      	movs	r0, #16
 800cf12:	f7ff fd3d 	bl	800c990 <malloc>
 800cf16:	4602      	mov	r2, r0
 800cf18:	61f8      	str	r0, [r7, #28]
 800cf1a:	b928      	cbnz	r0, 800cf28 <__pow5mult+0x40>
 800cf1c:	4b1d      	ldr	r3, [pc, #116]	@ (800cf94 <__pow5mult+0xac>)
 800cf1e:	481e      	ldr	r0, [pc, #120]	@ (800cf98 <__pow5mult+0xb0>)
 800cf20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf24:	f002 f888 	bl	800f038 <__assert_func>
 800cf28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf2c:	6004      	str	r4, [r0, #0]
 800cf2e:	60c4      	str	r4, [r0, #12]
 800cf30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf38:	b94c      	cbnz	r4, 800cf4e <__pow5mult+0x66>
 800cf3a:	f240 2171 	movw	r1, #625	@ 0x271
 800cf3e:	4638      	mov	r0, r7
 800cf40:	f7ff ff1a 	bl	800cd78 <__i2b>
 800cf44:	2300      	movs	r3, #0
 800cf46:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	6003      	str	r3, [r0, #0]
 800cf4e:	f04f 0900 	mov.w	r9, #0
 800cf52:	07eb      	lsls	r3, r5, #31
 800cf54:	d50a      	bpl.n	800cf6c <__pow5mult+0x84>
 800cf56:	4631      	mov	r1, r6
 800cf58:	4622      	mov	r2, r4
 800cf5a:	4638      	mov	r0, r7
 800cf5c:	f7ff ff22 	bl	800cda4 <__multiply>
 800cf60:	4631      	mov	r1, r6
 800cf62:	4680      	mov	r8, r0
 800cf64:	4638      	mov	r0, r7
 800cf66:	f7ff fe09 	bl	800cb7c <_Bfree>
 800cf6a:	4646      	mov	r6, r8
 800cf6c:	106d      	asrs	r5, r5, #1
 800cf6e:	d00b      	beq.n	800cf88 <__pow5mult+0xa0>
 800cf70:	6820      	ldr	r0, [r4, #0]
 800cf72:	b938      	cbnz	r0, 800cf84 <__pow5mult+0x9c>
 800cf74:	4622      	mov	r2, r4
 800cf76:	4621      	mov	r1, r4
 800cf78:	4638      	mov	r0, r7
 800cf7a:	f7ff ff13 	bl	800cda4 <__multiply>
 800cf7e:	6020      	str	r0, [r4, #0]
 800cf80:	f8c0 9000 	str.w	r9, [r0]
 800cf84:	4604      	mov	r4, r0
 800cf86:	e7e4      	b.n	800cf52 <__pow5mult+0x6a>
 800cf88:	4630      	mov	r0, r6
 800cf8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf8e:	bf00      	nop
 800cf90:	08010010 	.word	0x08010010
 800cf94:	0800fe64 	.word	0x0800fe64
 800cf98:	0800fee4 	.word	0x0800fee4

0800cf9c <__lshift>:
 800cf9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfa0:	460c      	mov	r4, r1
 800cfa2:	6849      	ldr	r1, [r1, #4]
 800cfa4:	6923      	ldr	r3, [r4, #16]
 800cfa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfaa:	68a3      	ldr	r3, [r4, #8]
 800cfac:	4607      	mov	r7, r0
 800cfae:	4691      	mov	r9, r2
 800cfb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfb4:	f108 0601 	add.w	r6, r8, #1
 800cfb8:	42b3      	cmp	r3, r6
 800cfba:	db0b      	blt.n	800cfd4 <__lshift+0x38>
 800cfbc:	4638      	mov	r0, r7
 800cfbe:	f7ff fd9d 	bl	800cafc <_Balloc>
 800cfc2:	4605      	mov	r5, r0
 800cfc4:	b948      	cbnz	r0, 800cfda <__lshift+0x3e>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	4b28      	ldr	r3, [pc, #160]	@ (800d06c <__lshift+0xd0>)
 800cfca:	4829      	ldr	r0, [pc, #164]	@ (800d070 <__lshift+0xd4>)
 800cfcc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cfd0:	f002 f832 	bl	800f038 <__assert_func>
 800cfd4:	3101      	adds	r1, #1
 800cfd6:	005b      	lsls	r3, r3, #1
 800cfd8:	e7ee      	b.n	800cfb8 <__lshift+0x1c>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	f100 0114 	add.w	r1, r0, #20
 800cfe0:	f100 0210 	add.w	r2, r0, #16
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	4553      	cmp	r3, sl
 800cfe8:	db33      	blt.n	800d052 <__lshift+0xb6>
 800cfea:	6920      	ldr	r0, [r4, #16]
 800cfec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cff0:	f104 0314 	add.w	r3, r4, #20
 800cff4:	f019 091f 	ands.w	r9, r9, #31
 800cff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cffc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d000:	d02b      	beq.n	800d05a <__lshift+0xbe>
 800d002:	f1c9 0e20 	rsb	lr, r9, #32
 800d006:	468a      	mov	sl, r1
 800d008:	2200      	movs	r2, #0
 800d00a:	6818      	ldr	r0, [r3, #0]
 800d00c:	fa00 f009 	lsl.w	r0, r0, r9
 800d010:	4310      	orrs	r0, r2
 800d012:	f84a 0b04 	str.w	r0, [sl], #4
 800d016:	f853 2b04 	ldr.w	r2, [r3], #4
 800d01a:	459c      	cmp	ip, r3
 800d01c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d020:	d8f3      	bhi.n	800d00a <__lshift+0x6e>
 800d022:	ebac 0304 	sub.w	r3, ip, r4
 800d026:	3b15      	subs	r3, #21
 800d028:	f023 0303 	bic.w	r3, r3, #3
 800d02c:	3304      	adds	r3, #4
 800d02e:	f104 0015 	add.w	r0, r4, #21
 800d032:	4560      	cmp	r0, ip
 800d034:	bf88      	it	hi
 800d036:	2304      	movhi	r3, #4
 800d038:	50ca      	str	r2, [r1, r3]
 800d03a:	b10a      	cbz	r2, 800d040 <__lshift+0xa4>
 800d03c:	f108 0602 	add.w	r6, r8, #2
 800d040:	3e01      	subs	r6, #1
 800d042:	4638      	mov	r0, r7
 800d044:	612e      	str	r6, [r5, #16]
 800d046:	4621      	mov	r1, r4
 800d048:	f7ff fd98 	bl	800cb7c <_Bfree>
 800d04c:	4628      	mov	r0, r5
 800d04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d052:	f842 0f04 	str.w	r0, [r2, #4]!
 800d056:	3301      	adds	r3, #1
 800d058:	e7c5      	b.n	800cfe6 <__lshift+0x4a>
 800d05a:	3904      	subs	r1, #4
 800d05c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d060:	f841 2f04 	str.w	r2, [r1, #4]!
 800d064:	459c      	cmp	ip, r3
 800d066:	d8f9      	bhi.n	800d05c <__lshift+0xc0>
 800d068:	e7ea      	b.n	800d040 <__lshift+0xa4>
 800d06a:	bf00      	nop
 800d06c:	0800fed3 	.word	0x0800fed3
 800d070:	0800fee4 	.word	0x0800fee4

0800d074 <__mcmp>:
 800d074:	690a      	ldr	r2, [r1, #16]
 800d076:	4603      	mov	r3, r0
 800d078:	6900      	ldr	r0, [r0, #16]
 800d07a:	1a80      	subs	r0, r0, r2
 800d07c:	b530      	push	{r4, r5, lr}
 800d07e:	d10e      	bne.n	800d09e <__mcmp+0x2a>
 800d080:	3314      	adds	r3, #20
 800d082:	3114      	adds	r1, #20
 800d084:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d088:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d08c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d090:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d094:	4295      	cmp	r5, r2
 800d096:	d003      	beq.n	800d0a0 <__mcmp+0x2c>
 800d098:	d205      	bcs.n	800d0a6 <__mcmp+0x32>
 800d09a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d09e:	bd30      	pop	{r4, r5, pc}
 800d0a0:	42a3      	cmp	r3, r4
 800d0a2:	d3f3      	bcc.n	800d08c <__mcmp+0x18>
 800d0a4:	e7fb      	b.n	800d09e <__mcmp+0x2a>
 800d0a6:	2001      	movs	r0, #1
 800d0a8:	e7f9      	b.n	800d09e <__mcmp+0x2a>
	...

0800d0ac <__mdiff>:
 800d0ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b0:	4689      	mov	r9, r1
 800d0b2:	4606      	mov	r6, r0
 800d0b4:	4611      	mov	r1, r2
 800d0b6:	4648      	mov	r0, r9
 800d0b8:	4614      	mov	r4, r2
 800d0ba:	f7ff ffdb 	bl	800d074 <__mcmp>
 800d0be:	1e05      	subs	r5, r0, #0
 800d0c0:	d112      	bne.n	800d0e8 <__mdiff+0x3c>
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f7ff fd19 	bl	800cafc <_Balloc>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	b928      	cbnz	r0, 800d0da <__mdiff+0x2e>
 800d0ce:	4b3f      	ldr	r3, [pc, #252]	@ (800d1cc <__mdiff+0x120>)
 800d0d0:	f240 2137 	movw	r1, #567	@ 0x237
 800d0d4:	483e      	ldr	r0, [pc, #248]	@ (800d1d0 <__mdiff+0x124>)
 800d0d6:	f001 ffaf 	bl	800f038 <__assert_func>
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0e0:	4610      	mov	r0, r2
 800d0e2:	b003      	add	sp, #12
 800d0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e8:	bfbc      	itt	lt
 800d0ea:	464b      	movlt	r3, r9
 800d0ec:	46a1      	movlt	r9, r4
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0f4:	bfba      	itte	lt
 800d0f6:	461c      	movlt	r4, r3
 800d0f8:	2501      	movlt	r5, #1
 800d0fa:	2500      	movge	r5, #0
 800d0fc:	f7ff fcfe 	bl	800cafc <_Balloc>
 800d100:	4602      	mov	r2, r0
 800d102:	b918      	cbnz	r0, 800d10c <__mdiff+0x60>
 800d104:	4b31      	ldr	r3, [pc, #196]	@ (800d1cc <__mdiff+0x120>)
 800d106:	f240 2145 	movw	r1, #581	@ 0x245
 800d10a:	e7e3      	b.n	800d0d4 <__mdiff+0x28>
 800d10c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d110:	6926      	ldr	r6, [r4, #16]
 800d112:	60c5      	str	r5, [r0, #12]
 800d114:	f109 0310 	add.w	r3, r9, #16
 800d118:	f109 0514 	add.w	r5, r9, #20
 800d11c:	f104 0e14 	add.w	lr, r4, #20
 800d120:	f100 0b14 	add.w	fp, r0, #20
 800d124:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d128:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	46d9      	mov	r9, fp
 800d130:	f04f 0c00 	mov.w	ip, #0
 800d134:	9b01      	ldr	r3, [sp, #4]
 800d136:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d13a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d13e:	9301      	str	r3, [sp, #4]
 800d140:	fa1f f38a 	uxth.w	r3, sl
 800d144:	4619      	mov	r1, r3
 800d146:	b283      	uxth	r3, r0
 800d148:	1acb      	subs	r3, r1, r3
 800d14a:	0c00      	lsrs	r0, r0, #16
 800d14c:	4463      	add	r3, ip
 800d14e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d152:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d156:	b29b      	uxth	r3, r3
 800d158:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d15c:	4576      	cmp	r6, lr
 800d15e:	f849 3b04 	str.w	r3, [r9], #4
 800d162:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d166:	d8e5      	bhi.n	800d134 <__mdiff+0x88>
 800d168:	1b33      	subs	r3, r6, r4
 800d16a:	3b15      	subs	r3, #21
 800d16c:	f023 0303 	bic.w	r3, r3, #3
 800d170:	3415      	adds	r4, #21
 800d172:	3304      	adds	r3, #4
 800d174:	42a6      	cmp	r6, r4
 800d176:	bf38      	it	cc
 800d178:	2304      	movcc	r3, #4
 800d17a:	441d      	add	r5, r3
 800d17c:	445b      	add	r3, fp
 800d17e:	461e      	mov	r6, r3
 800d180:	462c      	mov	r4, r5
 800d182:	4544      	cmp	r4, r8
 800d184:	d30e      	bcc.n	800d1a4 <__mdiff+0xf8>
 800d186:	f108 0103 	add.w	r1, r8, #3
 800d18a:	1b49      	subs	r1, r1, r5
 800d18c:	f021 0103 	bic.w	r1, r1, #3
 800d190:	3d03      	subs	r5, #3
 800d192:	45a8      	cmp	r8, r5
 800d194:	bf38      	it	cc
 800d196:	2100      	movcc	r1, #0
 800d198:	440b      	add	r3, r1
 800d19a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d19e:	b191      	cbz	r1, 800d1c6 <__mdiff+0x11a>
 800d1a0:	6117      	str	r7, [r2, #16]
 800d1a2:	e79d      	b.n	800d0e0 <__mdiff+0x34>
 800d1a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1a8:	46e6      	mov	lr, ip
 800d1aa:	0c08      	lsrs	r0, r1, #16
 800d1ac:	fa1c fc81 	uxtah	ip, ip, r1
 800d1b0:	4471      	add	r1, lr
 800d1b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d1b6:	b289      	uxth	r1, r1
 800d1b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1bc:	f846 1b04 	str.w	r1, [r6], #4
 800d1c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1c4:	e7dd      	b.n	800d182 <__mdiff+0xd6>
 800d1c6:	3f01      	subs	r7, #1
 800d1c8:	e7e7      	b.n	800d19a <__mdiff+0xee>
 800d1ca:	bf00      	nop
 800d1cc:	0800fed3 	.word	0x0800fed3
 800d1d0:	0800fee4 	.word	0x0800fee4

0800d1d4 <__ulp>:
 800d1d4:	b082      	sub	sp, #8
 800d1d6:	ed8d 0b00 	vstr	d0, [sp]
 800d1da:	9a01      	ldr	r2, [sp, #4]
 800d1dc:	4b0f      	ldr	r3, [pc, #60]	@ (800d21c <__ulp+0x48>)
 800d1de:	4013      	ands	r3, r2
 800d1e0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	dc08      	bgt.n	800d1fa <__ulp+0x26>
 800d1e8:	425b      	negs	r3, r3
 800d1ea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d1ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d1f2:	da04      	bge.n	800d1fe <__ulp+0x2a>
 800d1f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d1f8:	4113      	asrs	r3, r2
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	e008      	b.n	800d210 <__ulp+0x3c>
 800d1fe:	f1a2 0314 	sub.w	r3, r2, #20
 800d202:	2b1e      	cmp	r3, #30
 800d204:	bfda      	itte	le
 800d206:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d20a:	40da      	lsrle	r2, r3
 800d20c:	2201      	movgt	r2, #1
 800d20e:	2300      	movs	r3, #0
 800d210:	4619      	mov	r1, r3
 800d212:	4610      	mov	r0, r2
 800d214:	ec41 0b10 	vmov	d0, r0, r1
 800d218:	b002      	add	sp, #8
 800d21a:	4770      	bx	lr
 800d21c:	7ff00000 	.word	0x7ff00000

0800d220 <__b2d>:
 800d220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d224:	6906      	ldr	r6, [r0, #16]
 800d226:	f100 0814 	add.w	r8, r0, #20
 800d22a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d22e:	1f37      	subs	r7, r6, #4
 800d230:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d234:	4610      	mov	r0, r2
 800d236:	f7ff fd53 	bl	800cce0 <__hi0bits>
 800d23a:	f1c0 0320 	rsb	r3, r0, #32
 800d23e:	280a      	cmp	r0, #10
 800d240:	600b      	str	r3, [r1, #0]
 800d242:	491b      	ldr	r1, [pc, #108]	@ (800d2b0 <__b2d+0x90>)
 800d244:	dc15      	bgt.n	800d272 <__b2d+0x52>
 800d246:	f1c0 0c0b 	rsb	ip, r0, #11
 800d24a:	fa22 f30c 	lsr.w	r3, r2, ip
 800d24e:	45b8      	cmp	r8, r7
 800d250:	ea43 0501 	orr.w	r5, r3, r1
 800d254:	bf34      	ite	cc
 800d256:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d25a:	2300      	movcs	r3, #0
 800d25c:	3015      	adds	r0, #21
 800d25e:	fa02 f000 	lsl.w	r0, r2, r0
 800d262:	fa23 f30c 	lsr.w	r3, r3, ip
 800d266:	4303      	orrs	r3, r0
 800d268:	461c      	mov	r4, r3
 800d26a:	ec45 4b10 	vmov	d0, r4, r5
 800d26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d272:	45b8      	cmp	r8, r7
 800d274:	bf3a      	itte	cc
 800d276:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d27a:	f1a6 0708 	subcc.w	r7, r6, #8
 800d27e:	2300      	movcs	r3, #0
 800d280:	380b      	subs	r0, #11
 800d282:	d012      	beq.n	800d2aa <__b2d+0x8a>
 800d284:	f1c0 0120 	rsb	r1, r0, #32
 800d288:	fa23 f401 	lsr.w	r4, r3, r1
 800d28c:	4082      	lsls	r2, r0
 800d28e:	4322      	orrs	r2, r4
 800d290:	4547      	cmp	r7, r8
 800d292:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d296:	bf8c      	ite	hi
 800d298:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d29c:	2200      	movls	r2, #0
 800d29e:	4083      	lsls	r3, r0
 800d2a0:	40ca      	lsrs	r2, r1
 800d2a2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	e7de      	b.n	800d268 <__b2d+0x48>
 800d2aa:	ea42 0501 	orr.w	r5, r2, r1
 800d2ae:	e7db      	b.n	800d268 <__b2d+0x48>
 800d2b0:	3ff00000 	.word	0x3ff00000

0800d2b4 <__d2b>:
 800d2b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2b8:	460f      	mov	r7, r1
 800d2ba:	2101      	movs	r1, #1
 800d2bc:	ec59 8b10 	vmov	r8, r9, d0
 800d2c0:	4616      	mov	r6, r2
 800d2c2:	f7ff fc1b 	bl	800cafc <_Balloc>
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	b930      	cbnz	r0, 800d2d8 <__d2b+0x24>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	4b23      	ldr	r3, [pc, #140]	@ (800d35c <__d2b+0xa8>)
 800d2ce:	4824      	ldr	r0, [pc, #144]	@ (800d360 <__d2b+0xac>)
 800d2d0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2d4:	f001 feb0 	bl	800f038 <__assert_func>
 800d2d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2e0:	b10d      	cbz	r5, 800d2e6 <__d2b+0x32>
 800d2e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2e6:	9301      	str	r3, [sp, #4]
 800d2e8:	f1b8 0300 	subs.w	r3, r8, #0
 800d2ec:	d023      	beq.n	800d336 <__d2b+0x82>
 800d2ee:	4668      	mov	r0, sp
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	f7ff fd14 	bl	800cd1e <__lo0bits>
 800d2f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2fa:	b1d0      	cbz	r0, 800d332 <__d2b+0x7e>
 800d2fc:	f1c0 0320 	rsb	r3, r0, #32
 800d300:	fa02 f303 	lsl.w	r3, r2, r3
 800d304:	430b      	orrs	r3, r1
 800d306:	40c2      	lsrs	r2, r0
 800d308:	6163      	str	r3, [r4, #20]
 800d30a:	9201      	str	r2, [sp, #4]
 800d30c:	9b01      	ldr	r3, [sp, #4]
 800d30e:	61a3      	str	r3, [r4, #24]
 800d310:	2b00      	cmp	r3, #0
 800d312:	bf0c      	ite	eq
 800d314:	2201      	moveq	r2, #1
 800d316:	2202      	movne	r2, #2
 800d318:	6122      	str	r2, [r4, #16]
 800d31a:	b1a5      	cbz	r5, 800d346 <__d2b+0x92>
 800d31c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d320:	4405      	add	r5, r0
 800d322:	603d      	str	r5, [r7, #0]
 800d324:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d328:	6030      	str	r0, [r6, #0]
 800d32a:	4620      	mov	r0, r4
 800d32c:	b003      	add	sp, #12
 800d32e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d332:	6161      	str	r1, [r4, #20]
 800d334:	e7ea      	b.n	800d30c <__d2b+0x58>
 800d336:	a801      	add	r0, sp, #4
 800d338:	f7ff fcf1 	bl	800cd1e <__lo0bits>
 800d33c:	9b01      	ldr	r3, [sp, #4]
 800d33e:	6163      	str	r3, [r4, #20]
 800d340:	3020      	adds	r0, #32
 800d342:	2201      	movs	r2, #1
 800d344:	e7e8      	b.n	800d318 <__d2b+0x64>
 800d346:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d34a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d34e:	6038      	str	r0, [r7, #0]
 800d350:	6918      	ldr	r0, [r3, #16]
 800d352:	f7ff fcc5 	bl	800cce0 <__hi0bits>
 800d356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d35a:	e7e5      	b.n	800d328 <__d2b+0x74>
 800d35c:	0800fed3 	.word	0x0800fed3
 800d360:	0800fee4 	.word	0x0800fee4

0800d364 <__ratio>:
 800d364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d368:	4688      	mov	r8, r1
 800d36a:	4669      	mov	r1, sp
 800d36c:	4681      	mov	r9, r0
 800d36e:	f7ff ff57 	bl	800d220 <__b2d>
 800d372:	a901      	add	r1, sp, #4
 800d374:	4640      	mov	r0, r8
 800d376:	ec55 4b10 	vmov	r4, r5, d0
 800d37a:	f7ff ff51 	bl	800d220 <__b2d>
 800d37e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d382:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d386:	1ad2      	subs	r2, r2, r3
 800d388:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d38c:	1a5b      	subs	r3, r3, r1
 800d38e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d392:	ec57 6b10 	vmov	r6, r7, d0
 800d396:	2b00      	cmp	r3, #0
 800d398:	bfd6      	itet	le
 800d39a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d39e:	462a      	movgt	r2, r5
 800d3a0:	463a      	movle	r2, r7
 800d3a2:	46ab      	mov	fp, r5
 800d3a4:	46a2      	mov	sl, r4
 800d3a6:	bfce      	itee	gt
 800d3a8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d3ac:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d3b0:	ee00 3a90 	vmovle	s1, r3
 800d3b4:	ec4b ab17 	vmov	d7, sl, fp
 800d3b8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d3bc:	b003      	add	sp, #12
 800d3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3c2 <__copybits>:
 800d3c2:	3901      	subs	r1, #1
 800d3c4:	b570      	push	{r4, r5, r6, lr}
 800d3c6:	1149      	asrs	r1, r1, #5
 800d3c8:	6914      	ldr	r4, [r2, #16]
 800d3ca:	3101      	adds	r1, #1
 800d3cc:	f102 0314 	add.w	r3, r2, #20
 800d3d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d3d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d3d8:	1f05      	subs	r5, r0, #4
 800d3da:	42a3      	cmp	r3, r4
 800d3dc:	d30c      	bcc.n	800d3f8 <__copybits+0x36>
 800d3de:	1aa3      	subs	r3, r4, r2
 800d3e0:	3b11      	subs	r3, #17
 800d3e2:	f023 0303 	bic.w	r3, r3, #3
 800d3e6:	3211      	adds	r2, #17
 800d3e8:	42a2      	cmp	r2, r4
 800d3ea:	bf88      	it	hi
 800d3ec:	2300      	movhi	r3, #0
 800d3ee:	4418      	add	r0, r3
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	4288      	cmp	r0, r1
 800d3f4:	d305      	bcc.n	800d402 <__copybits+0x40>
 800d3f6:	bd70      	pop	{r4, r5, r6, pc}
 800d3f8:	f853 6b04 	ldr.w	r6, [r3], #4
 800d3fc:	f845 6f04 	str.w	r6, [r5, #4]!
 800d400:	e7eb      	b.n	800d3da <__copybits+0x18>
 800d402:	f840 3b04 	str.w	r3, [r0], #4
 800d406:	e7f4      	b.n	800d3f2 <__copybits+0x30>

0800d408 <__any_on>:
 800d408:	f100 0214 	add.w	r2, r0, #20
 800d40c:	6900      	ldr	r0, [r0, #16]
 800d40e:	114b      	asrs	r3, r1, #5
 800d410:	4298      	cmp	r0, r3
 800d412:	b510      	push	{r4, lr}
 800d414:	db11      	blt.n	800d43a <__any_on+0x32>
 800d416:	dd0a      	ble.n	800d42e <__any_on+0x26>
 800d418:	f011 011f 	ands.w	r1, r1, #31
 800d41c:	d007      	beq.n	800d42e <__any_on+0x26>
 800d41e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d422:	fa24 f001 	lsr.w	r0, r4, r1
 800d426:	fa00 f101 	lsl.w	r1, r0, r1
 800d42a:	428c      	cmp	r4, r1
 800d42c:	d10b      	bne.n	800d446 <__any_on+0x3e>
 800d42e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d432:	4293      	cmp	r3, r2
 800d434:	d803      	bhi.n	800d43e <__any_on+0x36>
 800d436:	2000      	movs	r0, #0
 800d438:	bd10      	pop	{r4, pc}
 800d43a:	4603      	mov	r3, r0
 800d43c:	e7f7      	b.n	800d42e <__any_on+0x26>
 800d43e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d442:	2900      	cmp	r1, #0
 800d444:	d0f5      	beq.n	800d432 <__any_on+0x2a>
 800d446:	2001      	movs	r0, #1
 800d448:	e7f6      	b.n	800d438 <__any_on+0x30>

0800d44a <sulp>:
 800d44a:	b570      	push	{r4, r5, r6, lr}
 800d44c:	4604      	mov	r4, r0
 800d44e:	460d      	mov	r5, r1
 800d450:	4616      	mov	r6, r2
 800d452:	ec45 4b10 	vmov	d0, r4, r5
 800d456:	f7ff febd 	bl	800d1d4 <__ulp>
 800d45a:	b17e      	cbz	r6, 800d47c <sulp+0x32>
 800d45c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d460:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d464:	2b00      	cmp	r3, #0
 800d466:	dd09      	ble.n	800d47c <sulp+0x32>
 800d468:	051b      	lsls	r3, r3, #20
 800d46a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d46e:	2000      	movs	r0, #0
 800d470:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d474:	ec41 0b17 	vmov	d7, r0, r1
 800d478:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d47c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d480 <_strtod_l>:
 800d480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d484:	ed2d 8b0a 	vpush	{d8-d12}
 800d488:	b097      	sub	sp, #92	@ 0x5c
 800d48a:	4688      	mov	r8, r1
 800d48c:	920e      	str	r2, [sp, #56]	@ 0x38
 800d48e:	2200      	movs	r2, #0
 800d490:	9212      	str	r2, [sp, #72]	@ 0x48
 800d492:	9005      	str	r0, [sp, #20]
 800d494:	f04f 0a00 	mov.w	sl, #0
 800d498:	f04f 0b00 	mov.w	fp, #0
 800d49c:	460a      	mov	r2, r1
 800d49e:	9211      	str	r2, [sp, #68]	@ 0x44
 800d4a0:	7811      	ldrb	r1, [r2, #0]
 800d4a2:	292b      	cmp	r1, #43	@ 0x2b
 800d4a4:	d04c      	beq.n	800d540 <_strtod_l+0xc0>
 800d4a6:	d839      	bhi.n	800d51c <_strtod_l+0x9c>
 800d4a8:	290d      	cmp	r1, #13
 800d4aa:	d833      	bhi.n	800d514 <_strtod_l+0x94>
 800d4ac:	2908      	cmp	r1, #8
 800d4ae:	d833      	bhi.n	800d518 <_strtod_l+0x98>
 800d4b0:	2900      	cmp	r1, #0
 800d4b2:	d03c      	beq.n	800d52e <_strtod_l+0xae>
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	9208      	str	r2, [sp, #32]
 800d4b8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800d4ba:	782a      	ldrb	r2, [r5, #0]
 800d4bc:	2a30      	cmp	r2, #48	@ 0x30
 800d4be:	f040 80b7 	bne.w	800d630 <_strtod_l+0x1b0>
 800d4c2:	786a      	ldrb	r2, [r5, #1]
 800d4c4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d4c8:	2a58      	cmp	r2, #88	@ 0x58
 800d4ca:	d170      	bne.n	800d5ae <_strtod_l+0x12e>
 800d4cc:	9302      	str	r3, [sp, #8]
 800d4ce:	9b08      	ldr	r3, [sp, #32]
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	ab12      	add	r3, sp, #72	@ 0x48
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	4a90      	ldr	r2, [pc, #576]	@ (800d718 <_strtod_l+0x298>)
 800d4d8:	9805      	ldr	r0, [sp, #20]
 800d4da:	ab13      	add	r3, sp, #76	@ 0x4c
 800d4dc:	a911      	add	r1, sp, #68	@ 0x44
 800d4de:	f001 fe45 	bl	800f16c <__gethex>
 800d4e2:	f010 060f 	ands.w	r6, r0, #15
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	d005      	beq.n	800d4f6 <_strtod_l+0x76>
 800d4ea:	2e06      	cmp	r6, #6
 800d4ec:	d12a      	bne.n	800d544 <_strtod_l+0xc4>
 800d4ee:	3501      	adds	r5, #1
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	9511      	str	r5, [sp, #68]	@ 0x44
 800d4f4:	9308      	str	r3, [sp, #32]
 800d4f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f040 8537 	bne.w	800df6c <_strtod_l+0xaec>
 800d4fe:	9b08      	ldr	r3, [sp, #32]
 800d500:	ec4b ab10 	vmov	d0, sl, fp
 800d504:	b1cb      	cbz	r3, 800d53a <_strtod_l+0xba>
 800d506:	eeb1 0b40 	vneg.f64	d0, d0
 800d50a:	b017      	add	sp, #92	@ 0x5c
 800d50c:	ecbd 8b0a 	vpop	{d8-d12}
 800d510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d514:	2920      	cmp	r1, #32
 800d516:	d1cd      	bne.n	800d4b4 <_strtod_l+0x34>
 800d518:	3201      	adds	r2, #1
 800d51a:	e7c0      	b.n	800d49e <_strtod_l+0x1e>
 800d51c:	292d      	cmp	r1, #45	@ 0x2d
 800d51e:	d1c9      	bne.n	800d4b4 <_strtod_l+0x34>
 800d520:	2101      	movs	r1, #1
 800d522:	9108      	str	r1, [sp, #32]
 800d524:	1c51      	adds	r1, r2, #1
 800d526:	9111      	str	r1, [sp, #68]	@ 0x44
 800d528:	7852      	ldrb	r2, [r2, #1]
 800d52a:	2a00      	cmp	r2, #0
 800d52c:	d1c4      	bne.n	800d4b8 <_strtod_l+0x38>
 800d52e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d530:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d534:	2b00      	cmp	r3, #0
 800d536:	f040 8517 	bne.w	800df68 <_strtod_l+0xae8>
 800d53a:	ec4b ab10 	vmov	d0, sl, fp
 800d53e:	e7e4      	b.n	800d50a <_strtod_l+0x8a>
 800d540:	2100      	movs	r1, #0
 800d542:	e7ee      	b.n	800d522 <_strtod_l+0xa2>
 800d544:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d546:	b13a      	cbz	r2, 800d558 <_strtod_l+0xd8>
 800d548:	2135      	movs	r1, #53	@ 0x35
 800d54a:	a814      	add	r0, sp, #80	@ 0x50
 800d54c:	f7ff ff39 	bl	800d3c2 <__copybits>
 800d550:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d552:	9805      	ldr	r0, [sp, #20]
 800d554:	f7ff fb12 	bl	800cb7c <_Bfree>
 800d558:	1e73      	subs	r3, r6, #1
 800d55a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d55c:	2b04      	cmp	r3, #4
 800d55e:	d806      	bhi.n	800d56e <_strtod_l+0xee>
 800d560:	e8df f003 	tbb	[pc, r3]
 800d564:	201d0314 	.word	0x201d0314
 800d568:	14          	.byte	0x14
 800d569:	00          	.byte	0x00
 800d56a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800d56e:	05e3      	lsls	r3, r4, #23
 800d570:	bf48      	it	mi
 800d572:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d576:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d57a:	0d1b      	lsrs	r3, r3, #20
 800d57c:	051b      	lsls	r3, r3, #20
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1b9      	bne.n	800d4f6 <_strtod_l+0x76>
 800d582:	f7fe fb9f 	bl	800bcc4 <__errno>
 800d586:	2322      	movs	r3, #34	@ 0x22
 800d588:	6003      	str	r3, [r0, #0]
 800d58a:	e7b4      	b.n	800d4f6 <_strtod_l+0x76>
 800d58c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800d590:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d594:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d598:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d59c:	e7e7      	b.n	800d56e <_strtod_l+0xee>
 800d59e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d720 <_strtod_l+0x2a0>
 800d5a2:	e7e4      	b.n	800d56e <_strtod_l+0xee>
 800d5a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d5a8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d5ac:	e7df      	b.n	800d56e <_strtod_l+0xee>
 800d5ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5b0:	1c5a      	adds	r2, r3, #1
 800d5b2:	9211      	str	r2, [sp, #68]	@ 0x44
 800d5b4:	785b      	ldrb	r3, [r3, #1]
 800d5b6:	2b30      	cmp	r3, #48	@ 0x30
 800d5b8:	d0f9      	beq.n	800d5ae <_strtod_l+0x12e>
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d09b      	beq.n	800d4f6 <_strtod_l+0x76>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	9307      	str	r3, [sp, #28]
 800d5c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	9306      	str	r3, [sp, #24]
 800d5ca:	4699      	mov	r9, r3
 800d5cc:	461d      	mov	r5, r3
 800d5ce:	220a      	movs	r2, #10
 800d5d0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d5d2:	7804      	ldrb	r4, [r0, #0]
 800d5d4:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800d5d8:	b2d9      	uxtb	r1, r3
 800d5da:	2909      	cmp	r1, #9
 800d5dc:	d92a      	bls.n	800d634 <_strtod_l+0x1b4>
 800d5de:	494f      	ldr	r1, [pc, #316]	@ (800d71c <_strtod_l+0x29c>)
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f001 fcef 	bl	800efc4 <strncmp>
 800d5e6:	b398      	cbz	r0, 800d650 <_strtod_l+0x1d0>
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	4622      	mov	r2, r4
 800d5ec:	462b      	mov	r3, r5
 800d5ee:	4607      	mov	r7, r0
 800d5f0:	4601      	mov	r1, r0
 800d5f2:	2a65      	cmp	r2, #101	@ 0x65
 800d5f4:	d001      	beq.n	800d5fa <_strtod_l+0x17a>
 800d5f6:	2a45      	cmp	r2, #69	@ 0x45
 800d5f8:	d118      	bne.n	800d62c <_strtod_l+0x1ac>
 800d5fa:	b91b      	cbnz	r3, 800d604 <_strtod_l+0x184>
 800d5fc:	9b07      	ldr	r3, [sp, #28]
 800d5fe:	4303      	orrs	r3, r0
 800d600:	d095      	beq.n	800d52e <_strtod_l+0xae>
 800d602:	2300      	movs	r3, #0
 800d604:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800d608:	f108 0201 	add.w	r2, r8, #1
 800d60c:	9211      	str	r2, [sp, #68]	@ 0x44
 800d60e:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d612:	2a2b      	cmp	r2, #43	@ 0x2b
 800d614:	d074      	beq.n	800d700 <_strtod_l+0x280>
 800d616:	2a2d      	cmp	r2, #45	@ 0x2d
 800d618:	d07a      	beq.n	800d710 <_strtod_l+0x290>
 800d61a:	f04f 0e00 	mov.w	lr, #0
 800d61e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d622:	2c09      	cmp	r4, #9
 800d624:	f240 8082 	bls.w	800d72c <_strtod_l+0x2ac>
 800d628:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d62c:	2400      	movs	r4, #0
 800d62e:	e09d      	b.n	800d76c <_strtod_l+0x2ec>
 800d630:	2300      	movs	r3, #0
 800d632:	e7c5      	b.n	800d5c0 <_strtod_l+0x140>
 800d634:	2d08      	cmp	r5, #8
 800d636:	bfc8      	it	gt
 800d638:	9906      	ldrgt	r1, [sp, #24]
 800d63a:	f100 0001 	add.w	r0, r0, #1
 800d63e:	bfca      	itet	gt
 800d640:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d644:	fb02 3909 	mlale	r9, r2, r9, r3
 800d648:	9306      	strgt	r3, [sp, #24]
 800d64a:	3501      	adds	r5, #1
 800d64c:	9011      	str	r0, [sp, #68]	@ 0x44
 800d64e:	e7bf      	b.n	800d5d0 <_strtod_l+0x150>
 800d650:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d652:	1c5a      	adds	r2, r3, #1
 800d654:	9211      	str	r2, [sp, #68]	@ 0x44
 800d656:	785a      	ldrb	r2, [r3, #1]
 800d658:	b3bd      	cbz	r5, 800d6ca <_strtod_l+0x24a>
 800d65a:	4607      	mov	r7, r0
 800d65c:	462b      	mov	r3, r5
 800d65e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d662:	2909      	cmp	r1, #9
 800d664:	d912      	bls.n	800d68c <_strtod_l+0x20c>
 800d666:	2101      	movs	r1, #1
 800d668:	e7c3      	b.n	800d5f2 <_strtod_l+0x172>
 800d66a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d66c:	1c5a      	adds	r2, r3, #1
 800d66e:	9211      	str	r2, [sp, #68]	@ 0x44
 800d670:	785a      	ldrb	r2, [r3, #1]
 800d672:	3001      	adds	r0, #1
 800d674:	2a30      	cmp	r2, #48	@ 0x30
 800d676:	d0f8      	beq.n	800d66a <_strtod_l+0x1ea>
 800d678:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d67c:	2b08      	cmp	r3, #8
 800d67e:	f200 847a 	bhi.w	800df76 <_strtod_l+0xaf6>
 800d682:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d684:	930a      	str	r3, [sp, #40]	@ 0x28
 800d686:	4607      	mov	r7, r0
 800d688:	2000      	movs	r0, #0
 800d68a:	4603      	mov	r3, r0
 800d68c:	3a30      	subs	r2, #48	@ 0x30
 800d68e:	f100 0101 	add.w	r1, r0, #1
 800d692:	d014      	beq.n	800d6be <_strtod_l+0x23e>
 800d694:	440f      	add	r7, r1
 800d696:	469c      	mov	ip, r3
 800d698:	f04f 0e0a 	mov.w	lr, #10
 800d69c:	f10c 0401 	add.w	r4, ip, #1
 800d6a0:	1ae6      	subs	r6, r4, r3
 800d6a2:	42b1      	cmp	r1, r6
 800d6a4:	dc13      	bgt.n	800d6ce <_strtod_l+0x24e>
 800d6a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d6aa:	1819      	adds	r1, r3, r0
 800d6ac:	2908      	cmp	r1, #8
 800d6ae:	f103 0301 	add.w	r3, r3, #1
 800d6b2:	4403      	add	r3, r0
 800d6b4:	dc19      	bgt.n	800d6ea <_strtod_l+0x26a>
 800d6b6:	210a      	movs	r1, #10
 800d6b8:	fb01 2909 	mla	r9, r1, r9, r2
 800d6bc:	2100      	movs	r1, #0
 800d6be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d6c0:	1c50      	adds	r0, r2, #1
 800d6c2:	9011      	str	r0, [sp, #68]	@ 0x44
 800d6c4:	7852      	ldrb	r2, [r2, #1]
 800d6c6:	4608      	mov	r0, r1
 800d6c8:	e7c9      	b.n	800d65e <_strtod_l+0x1de>
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	e7d2      	b.n	800d674 <_strtod_l+0x1f4>
 800d6ce:	f1bc 0f08 	cmp.w	ip, #8
 800d6d2:	dc03      	bgt.n	800d6dc <_strtod_l+0x25c>
 800d6d4:	fb0e f909 	mul.w	r9, lr, r9
 800d6d8:	46a4      	mov	ip, r4
 800d6da:	e7df      	b.n	800d69c <_strtod_l+0x21c>
 800d6dc:	2c10      	cmp	r4, #16
 800d6de:	bfde      	ittt	le
 800d6e0:	9e06      	ldrle	r6, [sp, #24]
 800d6e2:	fb0e f606 	mulle.w	r6, lr, r6
 800d6e6:	9606      	strle	r6, [sp, #24]
 800d6e8:	e7f6      	b.n	800d6d8 <_strtod_l+0x258>
 800d6ea:	290f      	cmp	r1, #15
 800d6ec:	bfdf      	itttt	le
 800d6ee:	9806      	ldrle	r0, [sp, #24]
 800d6f0:	210a      	movle	r1, #10
 800d6f2:	fb01 2200 	mlale	r2, r1, r0, r2
 800d6f6:	9206      	strle	r2, [sp, #24]
 800d6f8:	e7e0      	b.n	800d6bc <_strtod_l+0x23c>
 800d6fa:	2700      	movs	r7, #0
 800d6fc:	2101      	movs	r1, #1
 800d6fe:	e77d      	b.n	800d5fc <_strtod_l+0x17c>
 800d700:	f04f 0e00 	mov.w	lr, #0
 800d704:	f108 0202 	add.w	r2, r8, #2
 800d708:	9211      	str	r2, [sp, #68]	@ 0x44
 800d70a:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d70e:	e786      	b.n	800d61e <_strtod_l+0x19e>
 800d710:	f04f 0e01 	mov.w	lr, #1
 800d714:	e7f6      	b.n	800d704 <_strtod_l+0x284>
 800d716:	bf00      	nop
 800d718:	08010124 	.word	0x08010124
 800d71c:	0800ff3d 	.word	0x0800ff3d
 800d720:	7ff00000 	.word	0x7ff00000
 800d724:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d726:	1c54      	adds	r4, r2, #1
 800d728:	9411      	str	r4, [sp, #68]	@ 0x44
 800d72a:	7852      	ldrb	r2, [r2, #1]
 800d72c:	2a30      	cmp	r2, #48	@ 0x30
 800d72e:	d0f9      	beq.n	800d724 <_strtod_l+0x2a4>
 800d730:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800d734:	2c08      	cmp	r4, #8
 800d736:	f63f af79 	bhi.w	800d62c <_strtod_l+0x1ac>
 800d73a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800d73e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d740:	9209      	str	r2, [sp, #36]	@ 0x24
 800d742:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d744:	1c54      	adds	r4, r2, #1
 800d746:	9411      	str	r4, [sp, #68]	@ 0x44
 800d748:	7852      	ldrb	r2, [r2, #1]
 800d74a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800d74e:	2e09      	cmp	r6, #9
 800d750:	d937      	bls.n	800d7c2 <_strtod_l+0x342>
 800d752:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800d754:	1ba4      	subs	r4, r4, r6
 800d756:	2c08      	cmp	r4, #8
 800d758:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800d75c:	dc02      	bgt.n	800d764 <_strtod_l+0x2e4>
 800d75e:	4564      	cmp	r4, ip
 800d760:	bfa8      	it	ge
 800d762:	4664      	movge	r4, ip
 800d764:	f1be 0f00 	cmp.w	lr, #0
 800d768:	d000      	beq.n	800d76c <_strtod_l+0x2ec>
 800d76a:	4264      	negs	r4, r4
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d14d      	bne.n	800d80c <_strtod_l+0x38c>
 800d770:	9b07      	ldr	r3, [sp, #28]
 800d772:	4318      	orrs	r0, r3
 800d774:	f47f aebf 	bne.w	800d4f6 <_strtod_l+0x76>
 800d778:	2900      	cmp	r1, #0
 800d77a:	f47f aed8 	bne.w	800d52e <_strtod_l+0xae>
 800d77e:	2a69      	cmp	r2, #105	@ 0x69
 800d780:	d027      	beq.n	800d7d2 <_strtod_l+0x352>
 800d782:	dc24      	bgt.n	800d7ce <_strtod_l+0x34e>
 800d784:	2a49      	cmp	r2, #73	@ 0x49
 800d786:	d024      	beq.n	800d7d2 <_strtod_l+0x352>
 800d788:	2a4e      	cmp	r2, #78	@ 0x4e
 800d78a:	f47f aed0 	bne.w	800d52e <_strtod_l+0xae>
 800d78e:	4997      	ldr	r1, [pc, #604]	@ (800d9ec <_strtod_l+0x56c>)
 800d790:	a811      	add	r0, sp, #68	@ 0x44
 800d792:	f001 ff0d 	bl	800f5b0 <__match>
 800d796:	2800      	cmp	r0, #0
 800d798:	f43f aec9 	beq.w	800d52e <_strtod_l+0xae>
 800d79c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	2b28      	cmp	r3, #40	@ 0x28
 800d7a2:	d12d      	bne.n	800d800 <_strtod_l+0x380>
 800d7a4:	4992      	ldr	r1, [pc, #584]	@ (800d9f0 <_strtod_l+0x570>)
 800d7a6:	aa14      	add	r2, sp, #80	@ 0x50
 800d7a8:	a811      	add	r0, sp, #68	@ 0x44
 800d7aa:	f001 ff15 	bl	800f5d8 <__hexnan>
 800d7ae:	2805      	cmp	r0, #5
 800d7b0:	d126      	bne.n	800d800 <_strtod_l+0x380>
 800d7b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d7b4:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800d7b8:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d7bc:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d7c0:	e699      	b.n	800d4f6 <_strtod_l+0x76>
 800d7c2:	240a      	movs	r4, #10
 800d7c4:	fb04 2c0c 	mla	ip, r4, ip, r2
 800d7c8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800d7cc:	e7b9      	b.n	800d742 <_strtod_l+0x2c2>
 800d7ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800d7d0:	e7db      	b.n	800d78a <_strtod_l+0x30a>
 800d7d2:	4988      	ldr	r1, [pc, #544]	@ (800d9f4 <_strtod_l+0x574>)
 800d7d4:	a811      	add	r0, sp, #68	@ 0x44
 800d7d6:	f001 feeb 	bl	800f5b0 <__match>
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	f43f aea7 	beq.w	800d52e <_strtod_l+0xae>
 800d7e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7e2:	4985      	ldr	r1, [pc, #532]	@ (800d9f8 <_strtod_l+0x578>)
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	a811      	add	r0, sp, #68	@ 0x44
 800d7e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d7ea:	f001 fee1 	bl	800f5b0 <__match>
 800d7ee:	b910      	cbnz	r0, 800d7f6 <_strtod_l+0x376>
 800d7f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	9311      	str	r3, [sp, #68]	@ 0x44
 800d7f6:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800da0c <_strtod_l+0x58c>
 800d7fa:	f04f 0a00 	mov.w	sl, #0
 800d7fe:	e67a      	b.n	800d4f6 <_strtod_l+0x76>
 800d800:	487e      	ldr	r0, [pc, #504]	@ (800d9fc <_strtod_l+0x57c>)
 800d802:	f001 fc11 	bl	800f028 <nan>
 800d806:	ec5b ab10 	vmov	sl, fp, d0
 800d80a:	e674      	b.n	800d4f6 <_strtod_l+0x76>
 800d80c:	ee07 9a90 	vmov	s15, r9
 800d810:	1be2      	subs	r2, r4, r7
 800d812:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d816:	2d00      	cmp	r5, #0
 800d818:	bf08      	it	eq
 800d81a:	461d      	moveq	r5, r3
 800d81c:	2b10      	cmp	r3, #16
 800d81e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d820:	461a      	mov	r2, r3
 800d822:	bfa8      	it	ge
 800d824:	2210      	movge	r2, #16
 800d826:	2b09      	cmp	r3, #9
 800d828:	ec5b ab17 	vmov	sl, fp, d7
 800d82c:	dc15      	bgt.n	800d85a <_strtod_l+0x3da>
 800d82e:	1be1      	subs	r1, r4, r7
 800d830:	2900      	cmp	r1, #0
 800d832:	f43f ae60 	beq.w	800d4f6 <_strtod_l+0x76>
 800d836:	eba4 0107 	sub.w	r1, r4, r7
 800d83a:	dd72      	ble.n	800d922 <_strtod_l+0x4a2>
 800d83c:	2916      	cmp	r1, #22
 800d83e:	dc59      	bgt.n	800d8f4 <_strtod_l+0x474>
 800d840:	4b6f      	ldr	r3, [pc, #444]	@ (800da00 <_strtod_l+0x580>)
 800d842:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d848:	ed93 7b00 	vldr	d7, [r3]
 800d84c:	ec4b ab16 	vmov	d6, sl, fp
 800d850:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d854:	ec5b ab17 	vmov	sl, fp, d7
 800d858:	e64d      	b.n	800d4f6 <_strtod_l+0x76>
 800d85a:	4969      	ldr	r1, [pc, #420]	@ (800da00 <_strtod_l+0x580>)
 800d85c:	eddd 6a06 	vldr	s13, [sp, #24]
 800d860:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d864:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800d868:	2b0f      	cmp	r3, #15
 800d86a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d86e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d872:	ec5b ab16 	vmov	sl, fp, d6
 800d876:	ddda      	ble.n	800d82e <_strtod_l+0x3ae>
 800d878:	1a9a      	subs	r2, r3, r2
 800d87a:	1be1      	subs	r1, r4, r7
 800d87c:	440a      	add	r2, r1
 800d87e:	2a00      	cmp	r2, #0
 800d880:	f340 8094 	ble.w	800d9ac <_strtod_l+0x52c>
 800d884:	f012 000f 	ands.w	r0, r2, #15
 800d888:	d00a      	beq.n	800d8a0 <_strtod_l+0x420>
 800d88a:	495d      	ldr	r1, [pc, #372]	@ (800da00 <_strtod_l+0x580>)
 800d88c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d890:	ed91 7b00 	vldr	d7, [r1]
 800d894:	ec4b ab16 	vmov	d6, sl, fp
 800d898:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d89c:	ec5b ab17 	vmov	sl, fp, d7
 800d8a0:	f032 020f 	bics.w	r2, r2, #15
 800d8a4:	d073      	beq.n	800d98e <_strtod_l+0x50e>
 800d8a6:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800d8aa:	dd47      	ble.n	800d93c <_strtod_l+0x4bc>
 800d8ac:	2400      	movs	r4, #0
 800d8ae:	4625      	mov	r5, r4
 800d8b0:	9407      	str	r4, [sp, #28]
 800d8b2:	4626      	mov	r6, r4
 800d8b4:	9a05      	ldr	r2, [sp, #20]
 800d8b6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800da0c <_strtod_l+0x58c>
 800d8ba:	2322      	movs	r3, #34	@ 0x22
 800d8bc:	6013      	str	r3, [r2, #0]
 800d8be:	f04f 0a00 	mov.w	sl, #0
 800d8c2:	9b07      	ldr	r3, [sp, #28]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f43f ae16 	beq.w	800d4f6 <_strtod_l+0x76>
 800d8ca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d8cc:	9805      	ldr	r0, [sp, #20]
 800d8ce:	f7ff f955 	bl	800cb7c <_Bfree>
 800d8d2:	9805      	ldr	r0, [sp, #20]
 800d8d4:	4631      	mov	r1, r6
 800d8d6:	f7ff f951 	bl	800cb7c <_Bfree>
 800d8da:	9805      	ldr	r0, [sp, #20]
 800d8dc:	4629      	mov	r1, r5
 800d8de:	f7ff f94d 	bl	800cb7c <_Bfree>
 800d8e2:	9907      	ldr	r1, [sp, #28]
 800d8e4:	9805      	ldr	r0, [sp, #20]
 800d8e6:	f7ff f949 	bl	800cb7c <_Bfree>
 800d8ea:	9805      	ldr	r0, [sp, #20]
 800d8ec:	4621      	mov	r1, r4
 800d8ee:	f7ff f945 	bl	800cb7c <_Bfree>
 800d8f2:	e600      	b.n	800d4f6 <_strtod_l+0x76>
 800d8f4:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800d8f8:	1be0      	subs	r0, r4, r7
 800d8fa:	4281      	cmp	r1, r0
 800d8fc:	dbbc      	blt.n	800d878 <_strtod_l+0x3f8>
 800d8fe:	4a40      	ldr	r2, [pc, #256]	@ (800da00 <_strtod_l+0x580>)
 800d900:	f1c3 030f 	rsb	r3, r3, #15
 800d904:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d908:	ed91 7b00 	vldr	d7, [r1]
 800d90c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d90e:	ec4b ab16 	vmov	d6, sl, fp
 800d912:	1acb      	subs	r3, r1, r3
 800d914:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d918:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d91c:	ed92 6b00 	vldr	d6, [r2]
 800d920:	e796      	b.n	800d850 <_strtod_l+0x3d0>
 800d922:	3116      	adds	r1, #22
 800d924:	dba8      	blt.n	800d878 <_strtod_l+0x3f8>
 800d926:	4b36      	ldr	r3, [pc, #216]	@ (800da00 <_strtod_l+0x580>)
 800d928:	1b3c      	subs	r4, r7, r4
 800d92a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d92e:	ed94 7b00 	vldr	d7, [r4]
 800d932:	ec4b ab16 	vmov	d6, sl, fp
 800d936:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d93a:	e78b      	b.n	800d854 <_strtod_l+0x3d4>
 800d93c:	2000      	movs	r0, #0
 800d93e:	ec4b ab17 	vmov	d7, sl, fp
 800d942:	4e30      	ldr	r6, [pc, #192]	@ (800da04 <_strtod_l+0x584>)
 800d944:	1112      	asrs	r2, r2, #4
 800d946:	4601      	mov	r1, r0
 800d948:	2a01      	cmp	r2, #1
 800d94a:	dc23      	bgt.n	800d994 <_strtod_l+0x514>
 800d94c:	b108      	cbz	r0, 800d952 <_strtod_l+0x4d2>
 800d94e:	ec5b ab17 	vmov	sl, fp, d7
 800d952:	4a2c      	ldr	r2, [pc, #176]	@ (800da04 <_strtod_l+0x584>)
 800d954:	482c      	ldr	r0, [pc, #176]	@ (800da08 <_strtod_l+0x588>)
 800d956:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d95a:	ed92 7b00 	vldr	d7, [r2]
 800d95e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d962:	ec4b ab16 	vmov	d6, sl, fp
 800d966:	4a29      	ldr	r2, [pc, #164]	@ (800da0c <_strtod_l+0x58c>)
 800d968:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d96c:	ee17 1a90 	vmov	r1, s15
 800d970:	400a      	ands	r2, r1
 800d972:	4282      	cmp	r2, r0
 800d974:	ec5b ab17 	vmov	sl, fp, d7
 800d978:	d898      	bhi.n	800d8ac <_strtod_l+0x42c>
 800d97a:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800d97e:	4282      	cmp	r2, r0
 800d980:	bf86      	itte	hi
 800d982:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800da10 <_strtod_l+0x590>
 800d986:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800d98a:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800d98e:	2200      	movs	r2, #0
 800d990:	9206      	str	r2, [sp, #24]
 800d992:	e076      	b.n	800da82 <_strtod_l+0x602>
 800d994:	f012 0f01 	tst.w	r2, #1
 800d998:	d004      	beq.n	800d9a4 <_strtod_l+0x524>
 800d99a:	ed96 6b00 	vldr	d6, [r6]
 800d99e:	2001      	movs	r0, #1
 800d9a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9a4:	3101      	adds	r1, #1
 800d9a6:	1052      	asrs	r2, r2, #1
 800d9a8:	3608      	adds	r6, #8
 800d9aa:	e7cd      	b.n	800d948 <_strtod_l+0x4c8>
 800d9ac:	d0ef      	beq.n	800d98e <_strtod_l+0x50e>
 800d9ae:	4252      	negs	r2, r2
 800d9b0:	f012 000f 	ands.w	r0, r2, #15
 800d9b4:	d00a      	beq.n	800d9cc <_strtod_l+0x54c>
 800d9b6:	4912      	ldr	r1, [pc, #72]	@ (800da00 <_strtod_l+0x580>)
 800d9b8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d9bc:	ed91 7b00 	vldr	d7, [r1]
 800d9c0:	ec4b ab16 	vmov	d6, sl, fp
 800d9c4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d9c8:	ec5b ab17 	vmov	sl, fp, d7
 800d9cc:	1112      	asrs	r2, r2, #4
 800d9ce:	d0de      	beq.n	800d98e <_strtod_l+0x50e>
 800d9d0:	2a1f      	cmp	r2, #31
 800d9d2:	dd1f      	ble.n	800da14 <_strtod_l+0x594>
 800d9d4:	2400      	movs	r4, #0
 800d9d6:	4625      	mov	r5, r4
 800d9d8:	9407      	str	r4, [sp, #28]
 800d9da:	4626      	mov	r6, r4
 800d9dc:	9a05      	ldr	r2, [sp, #20]
 800d9de:	2322      	movs	r3, #34	@ 0x22
 800d9e0:	f04f 0a00 	mov.w	sl, #0
 800d9e4:	f04f 0b00 	mov.w	fp, #0
 800d9e8:	6013      	str	r3, [r2, #0]
 800d9ea:	e76a      	b.n	800d8c2 <_strtod_l+0x442>
 800d9ec:	0800fe2d 	.word	0x0800fe2d
 800d9f0:	08010110 	.word	0x08010110
 800d9f4:	0800fe25 	.word	0x0800fe25
 800d9f8:	0800fe5a 	.word	0x0800fe5a
 800d9fc:	0800ffae 	.word	0x0800ffae
 800da00:	08010048 	.word	0x08010048
 800da04:	08010020 	.word	0x08010020
 800da08:	7ca00000 	.word	0x7ca00000
 800da0c:	7ff00000 	.word	0x7ff00000
 800da10:	7fefffff 	.word	0x7fefffff
 800da14:	f012 0110 	ands.w	r1, r2, #16
 800da18:	bf18      	it	ne
 800da1a:	216a      	movne	r1, #106	@ 0x6a
 800da1c:	9106      	str	r1, [sp, #24]
 800da1e:	ec4b ab17 	vmov	d7, sl, fp
 800da22:	49af      	ldr	r1, [pc, #700]	@ (800dce0 <_strtod_l+0x860>)
 800da24:	2000      	movs	r0, #0
 800da26:	07d6      	lsls	r6, r2, #31
 800da28:	d504      	bpl.n	800da34 <_strtod_l+0x5b4>
 800da2a:	ed91 6b00 	vldr	d6, [r1]
 800da2e:	2001      	movs	r0, #1
 800da30:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da34:	1052      	asrs	r2, r2, #1
 800da36:	f101 0108 	add.w	r1, r1, #8
 800da3a:	d1f4      	bne.n	800da26 <_strtod_l+0x5a6>
 800da3c:	b108      	cbz	r0, 800da42 <_strtod_l+0x5c2>
 800da3e:	ec5b ab17 	vmov	sl, fp, d7
 800da42:	9a06      	ldr	r2, [sp, #24]
 800da44:	b1b2      	cbz	r2, 800da74 <_strtod_l+0x5f4>
 800da46:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800da4a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800da4e:	2a00      	cmp	r2, #0
 800da50:	4658      	mov	r0, fp
 800da52:	dd0f      	ble.n	800da74 <_strtod_l+0x5f4>
 800da54:	2a1f      	cmp	r2, #31
 800da56:	dd55      	ble.n	800db04 <_strtod_l+0x684>
 800da58:	2a34      	cmp	r2, #52	@ 0x34
 800da5a:	bfde      	ittt	le
 800da5c:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 800da60:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800da64:	408a      	lslle	r2, r1
 800da66:	f04f 0a00 	mov.w	sl, #0
 800da6a:	bfcc      	ite	gt
 800da6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800da70:	ea02 0b00 	andle.w	fp, r2, r0
 800da74:	ec4b ab17 	vmov	d7, sl, fp
 800da78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da80:	d0a8      	beq.n	800d9d4 <_strtod_l+0x554>
 800da82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800da84:	9805      	ldr	r0, [sp, #20]
 800da86:	f8cd 9000 	str.w	r9, [sp]
 800da8a:	462a      	mov	r2, r5
 800da8c:	f7ff f8de 	bl	800cc4c <__s2b>
 800da90:	9007      	str	r0, [sp, #28]
 800da92:	2800      	cmp	r0, #0
 800da94:	f43f af0a 	beq.w	800d8ac <_strtod_l+0x42c>
 800da98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da9a:	1b3f      	subs	r7, r7, r4
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	bfb4      	ite	lt
 800daa0:	463b      	movlt	r3, r7
 800daa2:	2300      	movge	r3, #0
 800daa4:	930a      	str	r3, [sp, #40]	@ 0x28
 800daa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daa8:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800dcd0 <_strtod_l+0x850>
 800daac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dab0:	2400      	movs	r4, #0
 800dab2:	930d      	str	r3, [sp, #52]	@ 0x34
 800dab4:	4625      	mov	r5, r4
 800dab6:	9b07      	ldr	r3, [sp, #28]
 800dab8:	9805      	ldr	r0, [sp, #20]
 800daba:	6859      	ldr	r1, [r3, #4]
 800dabc:	f7ff f81e 	bl	800cafc <_Balloc>
 800dac0:	4606      	mov	r6, r0
 800dac2:	2800      	cmp	r0, #0
 800dac4:	f43f aef6 	beq.w	800d8b4 <_strtod_l+0x434>
 800dac8:	9b07      	ldr	r3, [sp, #28]
 800daca:	691a      	ldr	r2, [r3, #16]
 800dacc:	ec4b ab19 	vmov	d9, sl, fp
 800dad0:	3202      	adds	r2, #2
 800dad2:	f103 010c 	add.w	r1, r3, #12
 800dad6:	0092      	lsls	r2, r2, #2
 800dad8:	300c      	adds	r0, #12
 800dada:	f001 fa95 	bl	800f008 <memcpy>
 800dade:	eeb0 0b49 	vmov.f64	d0, d9
 800dae2:	9805      	ldr	r0, [sp, #20]
 800dae4:	aa14      	add	r2, sp, #80	@ 0x50
 800dae6:	a913      	add	r1, sp, #76	@ 0x4c
 800dae8:	f7ff fbe4 	bl	800d2b4 <__d2b>
 800daec:	9012      	str	r0, [sp, #72]	@ 0x48
 800daee:	2800      	cmp	r0, #0
 800daf0:	f43f aee0 	beq.w	800d8b4 <_strtod_l+0x434>
 800daf4:	9805      	ldr	r0, [sp, #20]
 800daf6:	2101      	movs	r1, #1
 800daf8:	f7ff f93e 	bl	800cd78 <__i2b>
 800dafc:	4605      	mov	r5, r0
 800dafe:	b940      	cbnz	r0, 800db12 <_strtod_l+0x692>
 800db00:	2500      	movs	r5, #0
 800db02:	e6d7      	b.n	800d8b4 <_strtod_l+0x434>
 800db04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800db08:	fa01 f202 	lsl.w	r2, r1, r2
 800db0c:	ea02 0a0a 	and.w	sl, r2, sl
 800db10:	e7b0      	b.n	800da74 <_strtod_l+0x5f4>
 800db12:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800db14:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db16:	2f00      	cmp	r7, #0
 800db18:	bfab      	itete	ge
 800db1a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800db1c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800db1e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800db22:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800db26:	bfac      	ite	ge
 800db28:	eb07 0903 	addge.w	r9, r7, r3
 800db2c:	eba3 0807 	sublt.w	r8, r3, r7
 800db30:	9b06      	ldr	r3, [sp, #24]
 800db32:	1aff      	subs	r7, r7, r3
 800db34:	4417      	add	r7, r2
 800db36:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800db3a:	4a6a      	ldr	r2, [pc, #424]	@ (800dce4 <_strtod_l+0x864>)
 800db3c:	3f01      	subs	r7, #1
 800db3e:	4297      	cmp	r7, r2
 800db40:	da51      	bge.n	800dbe6 <_strtod_l+0x766>
 800db42:	1bd1      	subs	r1, r2, r7
 800db44:	291f      	cmp	r1, #31
 800db46:	eba3 0301 	sub.w	r3, r3, r1
 800db4a:	f04f 0201 	mov.w	r2, #1
 800db4e:	dc3e      	bgt.n	800dbce <_strtod_l+0x74e>
 800db50:	408a      	lsls	r2, r1
 800db52:	920c      	str	r2, [sp, #48]	@ 0x30
 800db54:	2200      	movs	r2, #0
 800db56:	920b      	str	r2, [sp, #44]	@ 0x2c
 800db58:	eb09 0703 	add.w	r7, r9, r3
 800db5c:	4498      	add	r8, r3
 800db5e:	9b06      	ldr	r3, [sp, #24]
 800db60:	45b9      	cmp	r9, r7
 800db62:	4498      	add	r8, r3
 800db64:	464b      	mov	r3, r9
 800db66:	bfa8      	it	ge
 800db68:	463b      	movge	r3, r7
 800db6a:	4543      	cmp	r3, r8
 800db6c:	bfa8      	it	ge
 800db6e:	4643      	movge	r3, r8
 800db70:	2b00      	cmp	r3, #0
 800db72:	bfc2      	ittt	gt
 800db74:	1aff      	subgt	r7, r7, r3
 800db76:	eba8 0803 	subgt.w	r8, r8, r3
 800db7a:	eba9 0903 	subgt.w	r9, r9, r3
 800db7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db80:	2b00      	cmp	r3, #0
 800db82:	dd16      	ble.n	800dbb2 <_strtod_l+0x732>
 800db84:	4629      	mov	r1, r5
 800db86:	9805      	ldr	r0, [sp, #20]
 800db88:	461a      	mov	r2, r3
 800db8a:	f7ff f9ad 	bl	800cee8 <__pow5mult>
 800db8e:	4605      	mov	r5, r0
 800db90:	2800      	cmp	r0, #0
 800db92:	d0b5      	beq.n	800db00 <_strtod_l+0x680>
 800db94:	4601      	mov	r1, r0
 800db96:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800db98:	9805      	ldr	r0, [sp, #20]
 800db9a:	f7ff f903 	bl	800cda4 <__multiply>
 800db9e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800dba0:	2800      	cmp	r0, #0
 800dba2:	f43f ae87 	beq.w	800d8b4 <_strtod_l+0x434>
 800dba6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dba8:	9805      	ldr	r0, [sp, #20]
 800dbaa:	f7fe ffe7 	bl	800cb7c <_Bfree>
 800dbae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbb0:	9312      	str	r3, [sp, #72]	@ 0x48
 800dbb2:	2f00      	cmp	r7, #0
 800dbb4:	dc1b      	bgt.n	800dbee <_strtod_l+0x76e>
 800dbb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	dd21      	ble.n	800dc00 <_strtod_l+0x780>
 800dbbc:	4631      	mov	r1, r6
 800dbbe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dbc0:	9805      	ldr	r0, [sp, #20]
 800dbc2:	f7ff f991 	bl	800cee8 <__pow5mult>
 800dbc6:	4606      	mov	r6, r0
 800dbc8:	b9d0      	cbnz	r0, 800dc00 <_strtod_l+0x780>
 800dbca:	2600      	movs	r6, #0
 800dbcc:	e672      	b.n	800d8b4 <_strtod_l+0x434>
 800dbce:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800dbd2:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800dbd6:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800dbda:	37e2      	adds	r7, #226	@ 0xe2
 800dbdc:	fa02 f107 	lsl.w	r1, r2, r7
 800dbe0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dbe2:	920c      	str	r2, [sp, #48]	@ 0x30
 800dbe4:	e7b8      	b.n	800db58 <_strtod_l+0x6d8>
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dbea:	2201      	movs	r2, #1
 800dbec:	e7f9      	b.n	800dbe2 <_strtod_l+0x762>
 800dbee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dbf0:	9805      	ldr	r0, [sp, #20]
 800dbf2:	463a      	mov	r2, r7
 800dbf4:	f7ff f9d2 	bl	800cf9c <__lshift>
 800dbf8:	9012      	str	r0, [sp, #72]	@ 0x48
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d1db      	bne.n	800dbb6 <_strtod_l+0x736>
 800dbfe:	e659      	b.n	800d8b4 <_strtod_l+0x434>
 800dc00:	f1b8 0f00 	cmp.w	r8, #0
 800dc04:	dd07      	ble.n	800dc16 <_strtod_l+0x796>
 800dc06:	4631      	mov	r1, r6
 800dc08:	9805      	ldr	r0, [sp, #20]
 800dc0a:	4642      	mov	r2, r8
 800dc0c:	f7ff f9c6 	bl	800cf9c <__lshift>
 800dc10:	4606      	mov	r6, r0
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d0d9      	beq.n	800dbca <_strtod_l+0x74a>
 800dc16:	f1b9 0f00 	cmp.w	r9, #0
 800dc1a:	dd08      	ble.n	800dc2e <_strtod_l+0x7ae>
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	9805      	ldr	r0, [sp, #20]
 800dc20:	464a      	mov	r2, r9
 800dc22:	f7ff f9bb 	bl	800cf9c <__lshift>
 800dc26:	4605      	mov	r5, r0
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	f43f ae43 	beq.w	800d8b4 <_strtod_l+0x434>
 800dc2e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dc30:	9805      	ldr	r0, [sp, #20]
 800dc32:	4632      	mov	r2, r6
 800dc34:	f7ff fa3a 	bl	800d0ac <__mdiff>
 800dc38:	4604      	mov	r4, r0
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	f43f ae3a 	beq.w	800d8b4 <_strtod_l+0x434>
 800dc40:	2300      	movs	r3, #0
 800dc42:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800dc46:	60c3      	str	r3, [r0, #12]
 800dc48:	4629      	mov	r1, r5
 800dc4a:	f7ff fa13 	bl	800d074 <__mcmp>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	da4c      	bge.n	800dcec <_strtod_l+0x86c>
 800dc52:	ea58 080a 	orrs.w	r8, r8, sl
 800dc56:	d172      	bne.n	800dd3e <_strtod_l+0x8be>
 800dc58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d16e      	bne.n	800dd3e <_strtod_l+0x8be>
 800dc60:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc64:	0d1b      	lsrs	r3, r3, #20
 800dc66:	051b      	lsls	r3, r3, #20
 800dc68:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc6c:	d967      	bls.n	800dd3e <_strtod_l+0x8be>
 800dc6e:	6963      	ldr	r3, [r4, #20]
 800dc70:	b913      	cbnz	r3, 800dc78 <_strtod_l+0x7f8>
 800dc72:	6923      	ldr	r3, [r4, #16]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	dd62      	ble.n	800dd3e <_strtod_l+0x8be>
 800dc78:	4621      	mov	r1, r4
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	9805      	ldr	r0, [sp, #20]
 800dc7e:	f7ff f98d 	bl	800cf9c <__lshift>
 800dc82:	4629      	mov	r1, r5
 800dc84:	4604      	mov	r4, r0
 800dc86:	f7ff f9f5 	bl	800d074 <__mcmp>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	dd57      	ble.n	800dd3e <_strtod_l+0x8be>
 800dc8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc92:	9a06      	ldr	r2, [sp, #24]
 800dc94:	0d1b      	lsrs	r3, r3, #20
 800dc96:	051b      	lsls	r3, r3, #20
 800dc98:	2a00      	cmp	r2, #0
 800dc9a:	d06e      	beq.n	800dd7a <_strtod_l+0x8fa>
 800dc9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dca0:	d86b      	bhi.n	800dd7a <_strtod_l+0x8fa>
 800dca2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dca6:	f67f ae99 	bls.w	800d9dc <_strtod_l+0x55c>
 800dcaa:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800dcd8 <_strtod_l+0x858>
 800dcae:	ec4b ab16 	vmov	d6, sl, fp
 800dcb2:	4b0d      	ldr	r3, [pc, #52]	@ (800dce8 <_strtod_l+0x868>)
 800dcb4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dcb8:	ee17 2a90 	vmov	r2, s15
 800dcbc:	4013      	ands	r3, r2
 800dcbe:	ec5b ab17 	vmov	sl, fp, d7
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	f47f ae01 	bne.w	800d8ca <_strtod_l+0x44a>
 800dcc8:	9a05      	ldr	r2, [sp, #20]
 800dcca:	2322      	movs	r3, #34	@ 0x22
 800dccc:	6013      	str	r3, [r2, #0]
 800dcce:	e5fc      	b.n	800d8ca <_strtod_l+0x44a>
 800dcd0:	ffc00000 	.word	0xffc00000
 800dcd4:	41dfffff 	.word	0x41dfffff
 800dcd8:	00000000 	.word	0x00000000
 800dcdc:	39500000 	.word	0x39500000
 800dce0:	08010138 	.word	0x08010138
 800dce4:	fffffc02 	.word	0xfffffc02
 800dce8:	7ff00000 	.word	0x7ff00000
 800dcec:	46d9      	mov	r9, fp
 800dcee:	d15d      	bne.n	800ddac <_strtod_l+0x92c>
 800dcf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dcf4:	f1b8 0f00 	cmp.w	r8, #0
 800dcf8:	d02a      	beq.n	800dd50 <_strtod_l+0x8d0>
 800dcfa:	4aa9      	ldr	r2, [pc, #676]	@ (800dfa0 <_strtod_l+0xb20>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d12a      	bne.n	800dd56 <_strtod_l+0x8d6>
 800dd00:	9b06      	ldr	r3, [sp, #24]
 800dd02:	4652      	mov	r2, sl
 800dd04:	b1fb      	cbz	r3, 800dd46 <_strtod_l+0x8c6>
 800dd06:	4ba7      	ldr	r3, [pc, #668]	@ (800dfa4 <_strtod_l+0xb24>)
 800dd08:	ea0b 0303 	and.w	r3, fp, r3
 800dd0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dd10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800dd14:	d81a      	bhi.n	800dd4c <_strtod_l+0x8cc>
 800dd16:	0d1b      	lsrs	r3, r3, #20
 800dd18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd1c:	fa01 f303 	lsl.w	r3, r1, r3
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d118      	bne.n	800dd56 <_strtod_l+0x8d6>
 800dd24:	4ba0      	ldr	r3, [pc, #640]	@ (800dfa8 <_strtod_l+0xb28>)
 800dd26:	4599      	cmp	r9, r3
 800dd28:	d102      	bne.n	800dd30 <_strtod_l+0x8b0>
 800dd2a:	3201      	adds	r2, #1
 800dd2c:	f43f adc2 	beq.w	800d8b4 <_strtod_l+0x434>
 800dd30:	4b9c      	ldr	r3, [pc, #624]	@ (800dfa4 <_strtod_l+0xb24>)
 800dd32:	ea09 0303 	and.w	r3, r9, r3
 800dd36:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800dd3a:	f04f 0a00 	mov.w	sl, #0
 800dd3e:	9b06      	ldr	r3, [sp, #24]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d1b2      	bne.n	800dcaa <_strtod_l+0x82a>
 800dd44:	e5c1      	b.n	800d8ca <_strtod_l+0x44a>
 800dd46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd4a:	e7e9      	b.n	800dd20 <_strtod_l+0x8a0>
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	e7e7      	b.n	800dd20 <_strtod_l+0x8a0>
 800dd50:	ea53 030a 	orrs.w	r3, r3, sl
 800dd54:	d09b      	beq.n	800dc8e <_strtod_l+0x80e>
 800dd56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd58:	b1c3      	cbz	r3, 800dd8c <_strtod_l+0x90c>
 800dd5a:	ea13 0f09 	tst.w	r3, r9
 800dd5e:	d0ee      	beq.n	800dd3e <_strtod_l+0x8be>
 800dd60:	9a06      	ldr	r2, [sp, #24]
 800dd62:	4650      	mov	r0, sl
 800dd64:	4659      	mov	r1, fp
 800dd66:	f1b8 0f00 	cmp.w	r8, #0
 800dd6a:	d013      	beq.n	800dd94 <_strtod_l+0x914>
 800dd6c:	f7ff fb6d 	bl	800d44a <sulp>
 800dd70:	ee39 7b00 	vadd.f64	d7, d9, d0
 800dd74:	ec5b ab17 	vmov	sl, fp, d7
 800dd78:	e7e1      	b.n	800dd3e <_strtod_l+0x8be>
 800dd7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dd7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd86:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800dd8a:	e7d8      	b.n	800dd3e <_strtod_l+0x8be>
 800dd8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd8e:	ea13 0f0a 	tst.w	r3, sl
 800dd92:	e7e4      	b.n	800dd5e <_strtod_l+0x8de>
 800dd94:	f7ff fb59 	bl	800d44a <sulp>
 800dd98:	ee39 0b40 	vsub.f64	d0, d9, d0
 800dd9c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800dda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda4:	ec5b ab10 	vmov	sl, fp, d0
 800dda8:	d1c9      	bne.n	800dd3e <_strtod_l+0x8be>
 800ddaa:	e617      	b.n	800d9dc <_strtod_l+0x55c>
 800ddac:	4629      	mov	r1, r5
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f7ff fad8 	bl	800d364 <__ratio>
 800ddb4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ddb8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ddbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddc0:	d85d      	bhi.n	800de7e <_strtod_l+0x9fe>
 800ddc2:	f1b8 0f00 	cmp.w	r8, #0
 800ddc6:	d164      	bne.n	800de92 <_strtod_l+0xa12>
 800ddc8:	f1ba 0f00 	cmp.w	sl, #0
 800ddcc:	d14b      	bne.n	800de66 <_strtod_l+0x9e6>
 800ddce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddd2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d160      	bne.n	800de9c <_strtod_l+0xa1c>
 800ddda:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ddde:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800dde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde6:	d401      	bmi.n	800ddec <_strtod_l+0x96c>
 800dde8:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ddec:	eeb1 ab48 	vneg.f64	d10, d8
 800ddf0:	486c      	ldr	r0, [pc, #432]	@ (800dfa4 <_strtod_l+0xb24>)
 800ddf2:	496e      	ldr	r1, [pc, #440]	@ (800dfac <_strtod_l+0xb2c>)
 800ddf4:	ea09 0700 	and.w	r7, r9, r0
 800ddf8:	428f      	cmp	r7, r1
 800ddfa:	ec53 2b1a 	vmov	r2, r3, d10
 800ddfe:	d17d      	bne.n	800defc <_strtod_l+0xa7c>
 800de00:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800de04:	ec4b ab1c 	vmov	d12, sl, fp
 800de08:	eeb0 0b4c 	vmov.f64	d0, d12
 800de0c:	f7ff f9e2 	bl	800d1d4 <__ulp>
 800de10:	4864      	ldr	r0, [pc, #400]	@ (800dfa4 <_strtod_l+0xb24>)
 800de12:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800de16:	ee1c 3a90 	vmov	r3, s25
 800de1a:	4a65      	ldr	r2, [pc, #404]	@ (800dfb0 <_strtod_l+0xb30>)
 800de1c:	ea03 0100 	and.w	r1, r3, r0
 800de20:	4291      	cmp	r1, r2
 800de22:	ec5b ab1c 	vmov	sl, fp, d12
 800de26:	d93c      	bls.n	800dea2 <_strtod_l+0xa22>
 800de28:	ee19 2a90 	vmov	r2, s19
 800de2c:	4b5e      	ldr	r3, [pc, #376]	@ (800dfa8 <_strtod_l+0xb28>)
 800de2e:	429a      	cmp	r2, r3
 800de30:	d104      	bne.n	800de3c <_strtod_l+0x9bc>
 800de32:	ee19 3a10 	vmov	r3, s18
 800de36:	3301      	adds	r3, #1
 800de38:	f43f ad3c 	beq.w	800d8b4 <_strtod_l+0x434>
 800de3c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800dfa8 <_strtod_l+0xb28>
 800de40:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800de44:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800de46:	9805      	ldr	r0, [sp, #20]
 800de48:	f7fe fe98 	bl	800cb7c <_Bfree>
 800de4c:	9805      	ldr	r0, [sp, #20]
 800de4e:	4631      	mov	r1, r6
 800de50:	f7fe fe94 	bl	800cb7c <_Bfree>
 800de54:	9805      	ldr	r0, [sp, #20]
 800de56:	4629      	mov	r1, r5
 800de58:	f7fe fe90 	bl	800cb7c <_Bfree>
 800de5c:	9805      	ldr	r0, [sp, #20]
 800de5e:	4621      	mov	r1, r4
 800de60:	f7fe fe8c 	bl	800cb7c <_Bfree>
 800de64:	e627      	b.n	800dab6 <_strtod_l+0x636>
 800de66:	f1ba 0f01 	cmp.w	sl, #1
 800de6a:	d103      	bne.n	800de74 <_strtod_l+0x9f4>
 800de6c:	f1bb 0f00 	cmp.w	fp, #0
 800de70:	f43f adb4 	beq.w	800d9dc <_strtod_l+0x55c>
 800de74:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800de78:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800de7c:	e7b8      	b.n	800ddf0 <_strtod_l+0x970>
 800de7e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800de82:	ee20 8b08 	vmul.f64	d8, d0, d8
 800de86:	f1b8 0f00 	cmp.w	r8, #0
 800de8a:	d0af      	beq.n	800ddec <_strtod_l+0x96c>
 800de8c:	eeb0 ab48 	vmov.f64	d10, d8
 800de90:	e7ae      	b.n	800ddf0 <_strtod_l+0x970>
 800de92:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800de96:	eeb0 8b4a 	vmov.f64	d8, d10
 800de9a:	e7a9      	b.n	800ddf0 <_strtod_l+0x970>
 800de9c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800dea0:	e7a6      	b.n	800ddf0 <_strtod_l+0x970>
 800dea2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dea6:	9b06      	ldr	r3, [sp, #24]
 800dea8:	46d9      	mov	r9, fp
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d1ca      	bne.n	800de44 <_strtod_l+0x9c4>
 800deae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800deb2:	0d1b      	lsrs	r3, r3, #20
 800deb4:	051b      	lsls	r3, r3, #20
 800deb6:	429f      	cmp	r7, r3
 800deb8:	d1c4      	bne.n	800de44 <_strtod_l+0x9c4>
 800deba:	ec51 0b18 	vmov	r0, r1, d8
 800debe:	f7f2 fc3b 	bl	8000738 <__aeabi_d2lz>
 800dec2:	f7f2 fbf3 	bl	80006ac <__aeabi_l2d>
 800dec6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800deca:	ec41 0b17 	vmov	d7, r0, r1
 800dece:	ea49 090a 	orr.w	r9, r9, sl
 800ded2:	ea59 0908 	orrs.w	r9, r9, r8
 800ded6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800deda:	d03c      	beq.n	800df56 <_strtod_l+0xad6>
 800dedc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800df88 <_strtod_l+0xb08>
 800dee0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee8:	f53f acef 	bmi.w	800d8ca <_strtod_l+0x44a>
 800deec:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800df90 <_strtod_l+0xb10>
 800def0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800def4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800def8:	dda4      	ble.n	800de44 <_strtod_l+0x9c4>
 800defa:	e4e6      	b.n	800d8ca <_strtod_l+0x44a>
 800defc:	9906      	ldr	r1, [sp, #24]
 800defe:	b1e1      	cbz	r1, 800df3a <_strtod_l+0xaba>
 800df00:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800df04:	d819      	bhi.n	800df3a <_strtod_l+0xaba>
 800df06:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800df0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df0e:	d811      	bhi.n	800df34 <_strtod_l+0xab4>
 800df10:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800df14:	ee18 3a10 	vmov	r3, s16
 800df18:	2b01      	cmp	r3, #1
 800df1a:	bf38      	it	cc
 800df1c:	2301      	movcc	r3, #1
 800df1e:	ee08 3a10 	vmov	s16, r3
 800df22:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800df26:	f1b8 0f00 	cmp.w	r8, #0
 800df2a:	d111      	bne.n	800df50 <_strtod_l+0xad0>
 800df2c:	eeb1 7b48 	vneg.f64	d7, d8
 800df30:	ec53 2b17 	vmov	r2, r3, d7
 800df34:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800df38:	1bcb      	subs	r3, r1, r7
 800df3a:	eeb0 0b49 	vmov.f64	d0, d9
 800df3e:	ec43 2b1a 	vmov	d10, r2, r3
 800df42:	f7ff f947 	bl	800d1d4 <__ulp>
 800df46:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800df4a:	ec5b ab19 	vmov	sl, fp, d9
 800df4e:	e7aa      	b.n	800dea6 <_strtod_l+0xa26>
 800df50:	eeb0 7b48 	vmov.f64	d7, d8
 800df54:	e7ec      	b.n	800df30 <_strtod_l+0xab0>
 800df56:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800df98 <_strtod_l+0xb18>
 800df5a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800df5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df62:	f57f af6f 	bpl.w	800de44 <_strtod_l+0x9c4>
 800df66:	e4b0      	b.n	800d8ca <_strtod_l+0x44a>
 800df68:	2300      	movs	r3, #0
 800df6a:	9308      	str	r3, [sp, #32]
 800df6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df70:	6013      	str	r3, [r2, #0]
 800df72:	f7ff bac4 	b.w	800d4fe <_strtod_l+0x7e>
 800df76:	2a65      	cmp	r2, #101	@ 0x65
 800df78:	f43f abbf 	beq.w	800d6fa <_strtod_l+0x27a>
 800df7c:	2a45      	cmp	r2, #69	@ 0x45
 800df7e:	f43f abbc 	beq.w	800d6fa <_strtod_l+0x27a>
 800df82:	2101      	movs	r1, #1
 800df84:	f7ff bbf4 	b.w	800d770 <_strtod_l+0x2f0>
 800df88:	94a03595 	.word	0x94a03595
 800df8c:	3fdfffff 	.word	0x3fdfffff
 800df90:	35afe535 	.word	0x35afe535
 800df94:	3fe00000 	.word	0x3fe00000
 800df98:	94a03595 	.word	0x94a03595
 800df9c:	3fcfffff 	.word	0x3fcfffff
 800dfa0:	000fffff 	.word	0x000fffff
 800dfa4:	7ff00000 	.word	0x7ff00000
 800dfa8:	7fefffff 	.word	0x7fefffff
 800dfac:	7fe00000 	.word	0x7fe00000
 800dfb0:	7c9fffff 	.word	0x7c9fffff

0800dfb4 <_strtod_r>:
 800dfb4:	4b01      	ldr	r3, [pc, #4]	@ (800dfbc <_strtod_r+0x8>)
 800dfb6:	f7ff ba63 	b.w	800d480 <_strtod_l>
 800dfba:	bf00      	nop
 800dfbc:	2400006c 	.word	0x2400006c

0800dfc0 <_strtol_l.isra.0>:
 800dfc0:	2b24      	cmp	r3, #36	@ 0x24
 800dfc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc6:	4686      	mov	lr, r0
 800dfc8:	4690      	mov	r8, r2
 800dfca:	d801      	bhi.n	800dfd0 <_strtol_l.isra.0+0x10>
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d106      	bne.n	800dfde <_strtol_l.isra.0+0x1e>
 800dfd0:	f7fd fe78 	bl	800bcc4 <__errno>
 800dfd4:	2316      	movs	r3, #22
 800dfd6:	6003      	str	r3, [r0, #0]
 800dfd8:	2000      	movs	r0, #0
 800dfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfde:	4834      	ldr	r0, [pc, #208]	@ (800e0b0 <_strtol_l.isra.0+0xf0>)
 800dfe0:	460d      	mov	r5, r1
 800dfe2:	462a      	mov	r2, r5
 800dfe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfe8:	5d06      	ldrb	r6, [r0, r4]
 800dfea:	f016 0608 	ands.w	r6, r6, #8
 800dfee:	d1f8      	bne.n	800dfe2 <_strtol_l.isra.0+0x22>
 800dff0:	2c2d      	cmp	r4, #45	@ 0x2d
 800dff2:	d110      	bne.n	800e016 <_strtol_l.isra.0+0x56>
 800dff4:	782c      	ldrb	r4, [r5, #0]
 800dff6:	2601      	movs	r6, #1
 800dff8:	1c95      	adds	r5, r2, #2
 800dffa:	f033 0210 	bics.w	r2, r3, #16
 800dffe:	d115      	bne.n	800e02c <_strtol_l.isra.0+0x6c>
 800e000:	2c30      	cmp	r4, #48	@ 0x30
 800e002:	d10d      	bne.n	800e020 <_strtol_l.isra.0+0x60>
 800e004:	782a      	ldrb	r2, [r5, #0]
 800e006:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e00a:	2a58      	cmp	r2, #88	@ 0x58
 800e00c:	d108      	bne.n	800e020 <_strtol_l.isra.0+0x60>
 800e00e:	786c      	ldrb	r4, [r5, #1]
 800e010:	3502      	adds	r5, #2
 800e012:	2310      	movs	r3, #16
 800e014:	e00a      	b.n	800e02c <_strtol_l.isra.0+0x6c>
 800e016:	2c2b      	cmp	r4, #43	@ 0x2b
 800e018:	bf04      	itt	eq
 800e01a:	782c      	ldrbeq	r4, [r5, #0]
 800e01c:	1c95      	addeq	r5, r2, #2
 800e01e:	e7ec      	b.n	800dffa <_strtol_l.isra.0+0x3a>
 800e020:	2b00      	cmp	r3, #0
 800e022:	d1f6      	bne.n	800e012 <_strtol_l.isra.0+0x52>
 800e024:	2c30      	cmp	r4, #48	@ 0x30
 800e026:	bf14      	ite	ne
 800e028:	230a      	movne	r3, #10
 800e02a:	2308      	moveq	r3, #8
 800e02c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e030:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800e034:	2200      	movs	r2, #0
 800e036:	fbbc f9f3 	udiv	r9, ip, r3
 800e03a:	4610      	mov	r0, r2
 800e03c:	fb03 ca19 	mls	sl, r3, r9, ip
 800e040:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e044:	2f09      	cmp	r7, #9
 800e046:	d80f      	bhi.n	800e068 <_strtol_l.isra.0+0xa8>
 800e048:	463c      	mov	r4, r7
 800e04a:	42a3      	cmp	r3, r4
 800e04c:	dd1b      	ble.n	800e086 <_strtol_l.isra.0+0xc6>
 800e04e:	1c57      	adds	r7, r2, #1
 800e050:	d007      	beq.n	800e062 <_strtol_l.isra.0+0xa2>
 800e052:	4581      	cmp	r9, r0
 800e054:	d314      	bcc.n	800e080 <_strtol_l.isra.0+0xc0>
 800e056:	d101      	bne.n	800e05c <_strtol_l.isra.0+0x9c>
 800e058:	45a2      	cmp	sl, r4
 800e05a:	db11      	blt.n	800e080 <_strtol_l.isra.0+0xc0>
 800e05c:	fb00 4003 	mla	r0, r0, r3, r4
 800e060:	2201      	movs	r2, #1
 800e062:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e066:	e7eb      	b.n	800e040 <_strtol_l.isra.0+0x80>
 800e068:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e06c:	2f19      	cmp	r7, #25
 800e06e:	d801      	bhi.n	800e074 <_strtol_l.isra.0+0xb4>
 800e070:	3c37      	subs	r4, #55	@ 0x37
 800e072:	e7ea      	b.n	800e04a <_strtol_l.isra.0+0x8a>
 800e074:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e078:	2f19      	cmp	r7, #25
 800e07a:	d804      	bhi.n	800e086 <_strtol_l.isra.0+0xc6>
 800e07c:	3c57      	subs	r4, #87	@ 0x57
 800e07e:	e7e4      	b.n	800e04a <_strtol_l.isra.0+0x8a>
 800e080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e084:	e7ed      	b.n	800e062 <_strtol_l.isra.0+0xa2>
 800e086:	1c53      	adds	r3, r2, #1
 800e088:	d108      	bne.n	800e09c <_strtol_l.isra.0+0xdc>
 800e08a:	2322      	movs	r3, #34	@ 0x22
 800e08c:	f8ce 3000 	str.w	r3, [lr]
 800e090:	4660      	mov	r0, ip
 800e092:	f1b8 0f00 	cmp.w	r8, #0
 800e096:	d0a0      	beq.n	800dfda <_strtol_l.isra.0+0x1a>
 800e098:	1e69      	subs	r1, r5, #1
 800e09a:	e006      	b.n	800e0aa <_strtol_l.isra.0+0xea>
 800e09c:	b106      	cbz	r6, 800e0a0 <_strtol_l.isra.0+0xe0>
 800e09e:	4240      	negs	r0, r0
 800e0a0:	f1b8 0f00 	cmp.w	r8, #0
 800e0a4:	d099      	beq.n	800dfda <_strtol_l.isra.0+0x1a>
 800e0a6:	2a00      	cmp	r2, #0
 800e0a8:	d1f6      	bne.n	800e098 <_strtol_l.isra.0+0xd8>
 800e0aa:	f8c8 1000 	str.w	r1, [r8]
 800e0ae:	e794      	b.n	800dfda <_strtol_l.isra.0+0x1a>
 800e0b0:	08010161 	.word	0x08010161

0800e0b4 <_strtol_r>:
 800e0b4:	f7ff bf84 	b.w	800dfc0 <_strtol_l.isra.0>

0800e0b8 <__ssputs_r>:
 800e0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0bc:	688e      	ldr	r6, [r1, #8]
 800e0be:	461f      	mov	r7, r3
 800e0c0:	42be      	cmp	r6, r7
 800e0c2:	680b      	ldr	r3, [r1, #0]
 800e0c4:	4682      	mov	sl, r0
 800e0c6:	460c      	mov	r4, r1
 800e0c8:	4690      	mov	r8, r2
 800e0ca:	d82d      	bhi.n	800e128 <__ssputs_r+0x70>
 800e0cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e0d4:	d026      	beq.n	800e124 <__ssputs_r+0x6c>
 800e0d6:	6965      	ldr	r5, [r4, #20]
 800e0d8:	6909      	ldr	r1, [r1, #16]
 800e0da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0de:	eba3 0901 	sub.w	r9, r3, r1
 800e0e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0e6:	1c7b      	adds	r3, r7, #1
 800e0e8:	444b      	add	r3, r9
 800e0ea:	106d      	asrs	r5, r5, #1
 800e0ec:	429d      	cmp	r5, r3
 800e0ee:	bf38      	it	cc
 800e0f0:	461d      	movcc	r5, r3
 800e0f2:	0553      	lsls	r3, r2, #21
 800e0f4:	d527      	bpl.n	800e146 <__ssputs_r+0x8e>
 800e0f6:	4629      	mov	r1, r5
 800e0f8:	f7fe fc74 	bl	800c9e4 <_malloc_r>
 800e0fc:	4606      	mov	r6, r0
 800e0fe:	b360      	cbz	r0, 800e15a <__ssputs_r+0xa2>
 800e100:	6921      	ldr	r1, [r4, #16]
 800e102:	464a      	mov	r2, r9
 800e104:	f000 ff80 	bl	800f008 <memcpy>
 800e108:	89a3      	ldrh	r3, [r4, #12]
 800e10a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e10e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e112:	81a3      	strh	r3, [r4, #12]
 800e114:	6126      	str	r6, [r4, #16]
 800e116:	6165      	str	r5, [r4, #20]
 800e118:	444e      	add	r6, r9
 800e11a:	eba5 0509 	sub.w	r5, r5, r9
 800e11e:	6026      	str	r6, [r4, #0]
 800e120:	60a5      	str	r5, [r4, #8]
 800e122:	463e      	mov	r6, r7
 800e124:	42be      	cmp	r6, r7
 800e126:	d900      	bls.n	800e12a <__ssputs_r+0x72>
 800e128:	463e      	mov	r6, r7
 800e12a:	6820      	ldr	r0, [r4, #0]
 800e12c:	4632      	mov	r2, r6
 800e12e:	4641      	mov	r1, r8
 800e130:	f000 ff2e 	bl	800ef90 <memmove>
 800e134:	68a3      	ldr	r3, [r4, #8]
 800e136:	1b9b      	subs	r3, r3, r6
 800e138:	60a3      	str	r3, [r4, #8]
 800e13a:	6823      	ldr	r3, [r4, #0]
 800e13c:	4433      	add	r3, r6
 800e13e:	6023      	str	r3, [r4, #0]
 800e140:	2000      	movs	r0, #0
 800e142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e146:	462a      	mov	r2, r5
 800e148:	f001 faf3 	bl	800f732 <_realloc_r>
 800e14c:	4606      	mov	r6, r0
 800e14e:	2800      	cmp	r0, #0
 800e150:	d1e0      	bne.n	800e114 <__ssputs_r+0x5c>
 800e152:	6921      	ldr	r1, [r4, #16]
 800e154:	4650      	mov	r0, sl
 800e156:	f7fe fbd1 	bl	800c8fc <_free_r>
 800e15a:	230c      	movs	r3, #12
 800e15c:	f8ca 3000 	str.w	r3, [sl]
 800e160:	89a3      	ldrh	r3, [r4, #12]
 800e162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e166:	81a3      	strh	r3, [r4, #12]
 800e168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e16c:	e7e9      	b.n	800e142 <__ssputs_r+0x8a>
	...

0800e170 <_svfiprintf_r>:
 800e170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e174:	4698      	mov	r8, r3
 800e176:	898b      	ldrh	r3, [r1, #12]
 800e178:	061b      	lsls	r3, r3, #24
 800e17a:	b09d      	sub	sp, #116	@ 0x74
 800e17c:	4607      	mov	r7, r0
 800e17e:	460d      	mov	r5, r1
 800e180:	4614      	mov	r4, r2
 800e182:	d510      	bpl.n	800e1a6 <_svfiprintf_r+0x36>
 800e184:	690b      	ldr	r3, [r1, #16]
 800e186:	b973      	cbnz	r3, 800e1a6 <_svfiprintf_r+0x36>
 800e188:	2140      	movs	r1, #64	@ 0x40
 800e18a:	f7fe fc2b 	bl	800c9e4 <_malloc_r>
 800e18e:	6028      	str	r0, [r5, #0]
 800e190:	6128      	str	r0, [r5, #16]
 800e192:	b930      	cbnz	r0, 800e1a2 <_svfiprintf_r+0x32>
 800e194:	230c      	movs	r3, #12
 800e196:	603b      	str	r3, [r7, #0]
 800e198:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e19c:	b01d      	add	sp, #116	@ 0x74
 800e19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a2:	2340      	movs	r3, #64	@ 0x40
 800e1a4:	616b      	str	r3, [r5, #20]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1aa:	2320      	movs	r3, #32
 800e1ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1b4:	2330      	movs	r3, #48	@ 0x30
 800e1b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e354 <_svfiprintf_r+0x1e4>
 800e1ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1be:	f04f 0901 	mov.w	r9, #1
 800e1c2:	4623      	mov	r3, r4
 800e1c4:	469a      	mov	sl, r3
 800e1c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1ca:	b10a      	cbz	r2, 800e1d0 <_svfiprintf_r+0x60>
 800e1cc:	2a25      	cmp	r2, #37	@ 0x25
 800e1ce:	d1f9      	bne.n	800e1c4 <_svfiprintf_r+0x54>
 800e1d0:	ebba 0b04 	subs.w	fp, sl, r4
 800e1d4:	d00b      	beq.n	800e1ee <_svfiprintf_r+0x7e>
 800e1d6:	465b      	mov	r3, fp
 800e1d8:	4622      	mov	r2, r4
 800e1da:	4629      	mov	r1, r5
 800e1dc:	4638      	mov	r0, r7
 800e1de:	f7ff ff6b 	bl	800e0b8 <__ssputs_r>
 800e1e2:	3001      	adds	r0, #1
 800e1e4:	f000 80a7 	beq.w	800e336 <_svfiprintf_r+0x1c6>
 800e1e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1ea:	445a      	add	r2, fp
 800e1ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f000 809f 	beq.w	800e336 <_svfiprintf_r+0x1c6>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e1fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e202:	f10a 0a01 	add.w	sl, sl, #1
 800e206:	9304      	str	r3, [sp, #16]
 800e208:	9307      	str	r3, [sp, #28]
 800e20a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e20e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e210:	4654      	mov	r4, sl
 800e212:	2205      	movs	r2, #5
 800e214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e218:	484e      	ldr	r0, [pc, #312]	@ (800e354 <_svfiprintf_r+0x1e4>)
 800e21a:	f7f2 f861 	bl	80002e0 <memchr>
 800e21e:	9a04      	ldr	r2, [sp, #16]
 800e220:	b9d8      	cbnz	r0, 800e25a <_svfiprintf_r+0xea>
 800e222:	06d0      	lsls	r0, r2, #27
 800e224:	bf44      	itt	mi
 800e226:	2320      	movmi	r3, #32
 800e228:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e22c:	0711      	lsls	r1, r2, #28
 800e22e:	bf44      	itt	mi
 800e230:	232b      	movmi	r3, #43	@ 0x2b
 800e232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e236:	f89a 3000 	ldrb.w	r3, [sl]
 800e23a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e23c:	d015      	beq.n	800e26a <_svfiprintf_r+0xfa>
 800e23e:	9a07      	ldr	r2, [sp, #28]
 800e240:	4654      	mov	r4, sl
 800e242:	2000      	movs	r0, #0
 800e244:	f04f 0c0a 	mov.w	ip, #10
 800e248:	4621      	mov	r1, r4
 800e24a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e24e:	3b30      	subs	r3, #48	@ 0x30
 800e250:	2b09      	cmp	r3, #9
 800e252:	d94b      	bls.n	800e2ec <_svfiprintf_r+0x17c>
 800e254:	b1b0      	cbz	r0, 800e284 <_svfiprintf_r+0x114>
 800e256:	9207      	str	r2, [sp, #28]
 800e258:	e014      	b.n	800e284 <_svfiprintf_r+0x114>
 800e25a:	eba0 0308 	sub.w	r3, r0, r8
 800e25e:	fa09 f303 	lsl.w	r3, r9, r3
 800e262:	4313      	orrs	r3, r2
 800e264:	9304      	str	r3, [sp, #16]
 800e266:	46a2      	mov	sl, r4
 800e268:	e7d2      	b.n	800e210 <_svfiprintf_r+0xa0>
 800e26a:	9b03      	ldr	r3, [sp, #12]
 800e26c:	1d19      	adds	r1, r3, #4
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	9103      	str	r1, [sp, #12]
 800e272:	2b00      	cmp	r3, #0
 800e274:	bfbb      	ittet	lt
 800e276:	425b      	neglt	r3, r3
 800e278:	f042 0202 	orrlt.w	r2, r2, #2
 800e27c:	9307      	strge	r3, [sp, #28]
 800e27e:	9307      	strlt	r3, [sp, #28]
 800e280:	bfb8      	it	lt
 800e282:	9204      	strlt	r2, [sp, #16]
 800e284:	7823      	ldrb	r3, [r4, #0]
 800e286:	2b2e      	cmp	r3, #46	@ 0x2e
 800e288:	d10a      	bne.n	800e2a0 <_svfiprintf_r+0x130>
 800e28a:	7863      	ldrb	r3, [r4, #1]
 800e28c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e28e:	d132      	bne.n	800e2f6 <_svfiprintf_r+0x186>
 800e290:	9b03      	ldr	r3, [sp, #12]
 800e292:	1d1a      	adds	r2, r3, #4
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	9203      	str	r2, [sp, #12]
 800e298:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e29c:	3402      	adds	r4, #2
 800e29e:	9305      	str	r3, [sp, #20]
 800e2a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e364 <_svfiprintf_r+0x1f4>
 800e2a4:	7821      	ldrb	r1, [r4, #0]
 800e2a6:	2203      	movs	r2, #3
 800e2a8:	4650      	mov	r0, sl
 800e2aa:	f7f2 f819 	bl	80002e0 <memchr>
 800e2ae:	b138      	cbz	r0, 800e2c0 <_svfiprintf_r+0x150>
 800e2b0:	9b04      	ldr	r3, [sp, #16]
 800e2b2:	eba0 000a 	sub.w	r0, r0, sl
 800e2b6:	2240      	movs	r2, #64	@ 0x40
 800e2b8:	4082      	lsls	r2, r0
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	3401      	adds	r4, #1
 800e2be:	9304      	str	r3, [sp, #16]
 800e2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2c4:	4824      	ldr	r0, [pc, #144]	@ (800e358 <_svfiprintf_r+0x1e8>)
 800e2c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2ca:	2206      	movs	r2, #6
 800e2cc:	f7f2 f808 	bl	80002e0 <memchr>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d036      	beq.n	800e342 <_svfiprintf_r+0x1d2>
 800e2d4:	4b21      	ldr	r3, [pc, #132]	@ (800e35c <_svfiprintf_r+0x1ec>)
 800e2d6:	bb1b      	cbnz	r3, 800e320 <_svfiprintf_r+0x1b0>
 800e2d8:	9b03      	ldr	r3, [sp, #12]
 800e2da:	3307      	adds	r3, #7
 800e2dc:	f023 0307 	bic.w	r3, r3, #7
 800e2e0:	3308      	adds	r3, #8
 800e2e2:	9303      	str	r3, [sp, #12]
 800e2e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e6:	4433      	add	r3, r6
 800e2e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2ea:	e76a      	b.n	800e1c2 <_svfiprintf_r+0x52>
 800e2ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	2001      	movs	r0, #1
 800e2f4:	e7a8      	b.n	800e248 <_svfiprintf_r+0xd8>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	3401      	adds	r4, #1
 800e2fa:	9305      	str	r3, [sp, #20]
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	f04f 0c0a 	mov.w	ip, #10
 800e302:	4620      	mov	r0, r4
 800e304:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e308:	3a30      	subs	r2, #48	@ 0x30
 800e30a:	2a09      	cmp	r2, #9
 800e30c:	d903      	bls.n	800e316 <_svfiprintf_r+0x1a6>
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d0c6      	beq.n	800e2a0 <_svfiprintf_r+0x130>
 800e312:	9105      	str	r1, [sp, #20]
 800e314:	e7c4      	b.n	800e2a0 <_svfiprintf_r+0x130>
 800e316:	fb0c 2101 	mla	r1, ip, r1, r2
 800e31a:	4604      	mov	r4, r0
 800e31c:	2301      	movs	r3, #1
 800e31e:	e7f0      	b.n	800e302 <_svfiprintf_r+0x192>
 800e320:	ab03      	add	r3, sp, #12
 800e322:	9300      	str	r3, [sp, #0]
 800e324:	462a      	mov	r2, r5
 800e326:	4b0e      	ldr	r3, [pc, #56]	@ (800e360 <_svfiprintf_r+0x1f0>)
 800e328:	a904      	add	r1, sp, #16
 800e32a:	4638      	mov	r0, r7
 800e32c:	f7fc fd64 	bl	800adf8 <_printf_float>
 800e330:	1c42      	adds	r2, r0, #1
 800e332:	4606      	mov	r6, r0
 800e334:	d1d6      	bne.n	800e2e4 <_svfiprintf_r+0x174>
 800e336:	89ab      	ldrh	r3, [r5, #12]
 800e338:	065b      	lsls	r3, r3, #25
 800e33a:	f53f af2d 	bmi.w	800e198 <_svfiprintf_r+0x28>
 800e33e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e340:	e72c      	b.n	800e19c <_svfiprintf_r+0x2c>
 800e342:	ab03      	add	r3, sp, #12
 800e344:	9300      	str	r3, [sp, #0]
 800e346:	462a      	mov	r2, r5
 800e348:	4b05      	ldr	r3, [pc, #20]	@ (800e360 <_svfiprintf_r+0x1f0>)
 800e34a:	a904      	add	r1, sp, #16
 800e34c:	4638      	mov	r0, r7
 800e34e:	f7fc ffdb 	bl	800b308 <_printf_i>
 800e352:	e7ed      	b.n	800e330 <_svfiprintf_r+0x1c0>
 800e354:	0800ff3f 	.word	0x0800ff3f
 800e358:	0800ff49 	.word	0x0800ff49
 800e35c:	0800adf9 	.word	0x0800adf9
 800e360:	0800e0b9 	.word	0x0800e0b9
 800e364:	0800ff45 	.word	0x0800ff45

0800e368 <_sungetc_r>:
 800e368:	b538      	push	{r3, r4, r5, lr}
 800e36a:	1c4b      	adds	r3, r1, #1
 800e36c:	4614      	mov	r4, r2
 800e36e:	d103      	bne.n	800e378 <_sungetc_r+0x10>
 800e370:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e374:	4628      	mov	r0, r5
 800e376:	bd38      	pop	{r3, r4, r5, pc}
 800e378:	8993      	ldrh	r3, [r2, #12]
 800e37a:	f023 0320 	bic.w	r3, r3, #32
 800e37e:	8193      	strh	r3, [r2, #12]
 800e380:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e382:	6852      	ldr	r2, [r2, #4]
 800e384:	b2cd      	uxtb	r5, r1
 800e386:	b18b      	cbz	r3, 800e3ac <_sungetc_r+0x44>
 800e388:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e38a:	4293      	cmp	r3, r2
 800e38c:	dd08      	ble.n	800e3a0 <_sungetc_r+0x38>
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	1e5a      	subs	r2, r3, #1
 800e392:	6022      	str	r2, [r4, #0]
 800e394:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e398:	6863      	ldr	r3, [r4, #4]
 800e39a:	3301      	adds	r3, #1
 800e39c:	6063      	str	r3, [r4, #4]
 800e39e:	e7e9      	b.n	800e374 <_sungetc_r+0xc>
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	f000 fd26 	bl	800edf2 <__submore>
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d0f1      	beq.n	800e38e <_sungetc_r+0x26>
 800e3aa:	e7e1      	b.n	800e370 <_sungetc_r+0x8>
 800e3ac:	6921      	ldr	r1, [r4, #16]
 800e3ae:	6823      	ldr	r3, [r4, #0]
 800e3b0:	b151      	cbz	r1, 800e3c8 <_sungetc_r+0x60>
 800e3b2:	4299      	cmp	r1, r3
 800e3b4:	d208      	bcs.n	800e3c8 <_sungetc_r+0x60>
 800e3b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e3ba:	42a9      	cmp	r1, r5
 800e3bc:	d104      	bne.n	800e3c8 <_sungetc_r+0x60>
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	3201      	adds	r2, #1
 800e3c2:	6023      	str	r3, [r4, #0]
 800e3c4:	6062      	str	r2, [r4, #4]
 800e3c6:	e7d5      	b.n	800e374 <_sungetc_r+0xc>
 800e3c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800e3cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3d2:	2303      	movs	r3, #3
 800e3d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e3d6:	4623      	mov	r3, r4
 800e3d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e3dc:	6023      	str	r3, [r4, #0]
 800e3de:	2301      	movs	r3, #1
 800e3e0:	e7dc      	b.n	800e39c <_sungetc_r+0x34>

0800e3e2 <__ssrefill_r>:
 800e3e2:	b510      	push	{r4, lr}
 800e3e4:	460c      	mov	r4, r1
 800e3e6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e3e8:	b169      	cbz	r1, 800e406 <__ssrefill_r+0x24>
 800e3ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3ee:	4299      	cmp	r1, r3
 800e3f0:	d001      	beq.n	800e3f6 <__ssrefill_r+0x14>
 800e3f2:	f7fe fa83 	bl	800c8fc <_free_r>
 800e3f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e3f8:	6063      	str	r3, [r4, #4]
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	6360      	str	r0, [r4, #52]	@ 0x34
 800e3fe:	b113      	cbz	r3, 800e406 <__ssrefill_r+0x24>
 800e400:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e402:	6023      	str	r3, [r4, #0]
 800e404:	bd10      	pop	{r4, pc}
 800e406:	6923      	ldr	r3, [r4, #16]
 800e408:	6023      	str	r3, [r4, #0]
 800e40a:	2300      	movs	r3, #0
 800e40c:	6063      	str	r3, [r4, #4]
 800e40e:	89a3      	ldrh	r3, [r4, #12]
 800e410:	f043 0320 	orr.w	r3, r3, #32
 800e414:	81a3      	strh	r3, [r4, #12]
 800e416:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e41a:	e7f3      	b.n	800e404 <__ssrefill_r+0x22>

0800e41c <__ssvfiscanf_r>:
 800e41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e420:	460c      	mov	r4, r1
 800e422:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800e426:	2100      	movs	r1, #0
 800e428:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e42c:	49a6      	ldr	r1, [pc, #664]	@ (800e6c8 <__ssvfiscanf_r+0x2ac>)
 800e42e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e430:	f10d 0804 	add.w	r8, sp, #4
 800e434:	49a5      	ldr	r1, [pc, #660]	@ (800e6cc <__ssvfiscanf_r+0x2b0>)
 800e436:	4fa6      	ldr	r7, [pc, #664]	@ (800e6d0 <__ssvfiscanf_r+0x2b4>)
 800e438:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e43c:	4606      	mov	r6, r0
 800e43e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e440:	9300      	str	r3, [sp, #0]
 800e442:	f892 9000 	ldrb.w	r9, [r2]
 800e446:	f1b9 0f00 	cmp.w	r9, #0
 800e44a:	f000 8158 	beq.w	800e6fe <__ssvfiscanf_r+0x2e2>
 800e44e:	f817 3009 	ldrb.w	r3, [r7, r9]
 800e452:	f013 0308 	ands.w	r3, r3, #8
 800e456:	f102 0501 	add.w	r5, r2, #1
 800e45a:	d019      	beq.n	800e490 <__ssvfiscanf_r+0x74>
 800e45c:	6863      	ldr	r3, [r4, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	dd0f      	ble.n	800e482 <__ssvfiscanf_r+0x66>
 800e462:	6823      	ldr	r3, [r4, #0]
 800e464:	781a      	ldrb	r2, [r3, #0]
 800e466:	5cba      	ldrb	r2, [r7, r2]
 800e468:	0712      	lsls	r2, r2, #28
 800e46a:	d401      	bmi.n	800e470 <__ssvfiscanf_r+0x54>
 800e46c:	462a      	mov	r2, r5
 800e46e:	e7e8      	b.n	800e442 <__ssvfiscanf_r+0x26>
 800e470:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e472:	3201      	adds	r2, #1
 800e474:	9245      	str	r2, [sp, #276]	@ 0x114
 800e476:	6862      	ldr	r2, [r4, #4]
 800e478:	3301      	adds	r3, #1
 800e47a:	3a01      	subs	r2, #1
 800e47c:	6062      	str	r2, [r4, #4]
 800e47e:	6023      	str	r3, [r4, #0]
 800e480:	e7ec      	b.n	800e45c <__ssvfiscanf_r+0x40>
 800e482:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e484:	4621      	mov	r1, r4
 800e486:	4630      	mov	r0, r6
 800e488:	4798      	blx	r3
 800e48a:	2800      	cmp	r0, #0
 800e48c:	d0e9      	beq.n	800e462 <__ssvfiscanf_r+0x46>
 800e48e:	e7ed      	b.n	800e46c <__ssvfiscanf_r+0x50>
 800e490:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800e494:	f040 8085 	bne.w	800e5a2 <__ssvfiscanf_r+0x186>
 800e498:	9341      	str	r3, [sp, #260]	@ 0x104
 800e49a:	9343      	str	r3, [sp, #268]	@ 0x10c
 800e49c:	7853      	ldrb	r3, [r2, #1]
 800e49e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4a0:	bf02      	ittt	eq
 800e4a2:	2310      	moveq	r3, #16
 800e4a4:	1c95      	addeq	r5, r2, #2
 800e4a6:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e4a8:	220a      	movs	r2, #10
 800e4aa:	46aa      	mov	sl, r5
 800e4ac:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e4b0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e4b4:	2b09      	cmp	r3, #9
 800e4b6:	d91e      	bls.n	800e4f6 <__ssvfiscanf_r+0xda>
 800e4b8:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800e6d4 <__ssvfiscanf_r+0x2b8>
 800e4bc:	2203      	movs	r2, #3
 800e4be:	4658      	mov	r0, fp
 800e4c0:	f7f1 ff0e 	bl	80002e0 <memchr>
 800e4c4:	b138      	cbz	r0, 800e4d6 <__ssvfiscanf_r+0xba>
 800e4c6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e4c8:	eba0 000b 	sub.w	r0, r0, fp
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	4083      	lsls	r3, r0
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	9341      	str	r3, [sp, #260]	@ 0x104
 800e4d4:	4655      	mov	r5, sl
 800e4d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e4da:	2b78      	cmp	r3, #120	@ 0x78
 800e4dc:	d806      	bhi.n	800e4ec <__ssvfiscanf_r+0xd0>
 800e4de:	2b57      	cmp	r3, #87	@ 0x57
 800e4e0:	d810      	bhi.n	800e504 <__ssvfiscanf_r+0xe8>
 800e4e2:	2b25      	cmp	r3, #37	@ 0x25
 800e4e4:	d05d      	beq.n	800e5a2 <__ssvfiscanf_r+0x186>
 800e4e6:	d857      	bhi.n	800e598 <__ssvfiscanf_r+0x17c>
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d075      	beq.n	800e5d8 <__ssvfiscanf_r+0x1bc>
 800e4ec:	2303      	movs	r3, #3
 800e4ee:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e4f0:	230a      	movs	r3, #10
 800e4f2:	9342      	str	r3, [sp, #264]	@ 0x108
 800e4f4:	e088      	b.n	800e608 <__ssvfiscanf_r+0x1ec>
 800e4f6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e4f8:	fb02 1103 	mla	r1, r2, r3, r1
 800e4fc:	3930      	subs	r1, #48	@ 0x30
 800e4fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e500:	4655      	mov	r5, sl
 800e502:	e7d2      	b.n	800e4aa <__ssvfiscanf_r+0x8e>
 800e504:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e508:	2a20      	cmp	r2, #32
 800e50a:	d8ef      	bhi.n	800e4ec <__ssvfiscanf_r+0xd0>
 800e50c:	a101      	add	r1, pc, #4	@ (adr r1, 800e514 <__ssvfiscanf_r+0xf8>)
 800e50e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e512:	bf00      	nop
 800e514:	0800e5e7 	.word	0x0800e5e7
 800e518:	0800e4ed 	.word	0x0800e4ed
 800e51c:	0800e4ed 	.word	0x0800e4ed
 800e520:	0800e641 	.word	0x0800e641
 800e524:	0800e4ed 	.word	0x0800e4ed
 800e528:	0800e4ed 	.word	0x0800e4ed
 800e52c:	0800e4ed 	.word	0x0800e4ed
 800e530:	0800e4ed 	.word	0x0800e4ed
 800e534:	0800e4ed 	.word	0x0800e4ed
 800e538:	0800e4ed 	.word	0x0800e4ed
 800e53c:	0800e4ed 	.word	0x0800e4ed
 800e540:	0800e657 	.word	0x0800e657
 800e544:	0800e63d 	.word	0x0800e63d
 800e548:	0800e59f 	.word	0x0800e59f
 800e54c:	0800e59f 	.word	0x0800e59f
 800e550:	0800e59f 	.word	0x0800e59f
 800e554:	0800e4ed 	.word	0x0800e4ed
 800e558:	0800e5f9 	.word	0x0800e5f9
 800e55c:	0800e4ed 	.word	0x0800e4ed
 800e560:	0800e4ed 	.word	0x0800e4ed
 800e564:	0800e4ed 	.word	0x0800e4ed
 800e568:	0800e4ed 	.word	0x0800e4ed
 800e56c:	0800e667 	.word	0x0800e667
 800e570:	0800e601 	.word	0x0800e601
 800e574:	0800e5df 	.word	0x0800e5df
 800e578:	0800e4ed 	.word	0x0800e4ed
 800e57c:	0800e4ed 	.word	0x0800e4ed
 800e580:	0800e663 	.word	0x0800e663
 800e584:	0800e4ed 	.word	0x0800e4ed
 800e588:	0800e63d 	.word	0x0800e63d
 800e58c:	0800e4ed 	.word	0x0800e4ed
 800e590:	0800e4ed 	.word	0x0800e4ed
 800e594:	0800e5e7 	.word	0x0800e5e7
 800e598:	3b45      	subs	r3, #69	@ 0x45
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d8a6      	bhi.n	800e4ec <__ssvfiscanf_r+0xd0>
 800e59e:	2305      	movs	r3, #5
 800e5a0:	e031      	b.n	800e606 <__ssvfiscanf_r+0x1ea>
 800e5a2:	6863      	ldr	r3, [r4, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	dd0d      	ble.n	800e5c4 <__ssvfiscanf_r+0x1a8>
 800e5a8:	6823      	ldr	r3, [r4, #0]
 800e5aa:	781a      	ldrb	r2, [r3, #0]
 800e5ac:	454a      	cmp	r2, r9
 800e5ae:	f040 80a6 	bne.w	800e6fe <__ssvfiscanf_r+0x2e2>
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	6862      	ldr	r2, [r4, #4]
 800e5b6:	6023      	str	r3, [r4, #0]
 800e5b8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e5ba:	3a01      	subs	r2, #1
 800e5bc:	3301      	adds	r3, #1
 800e5be:	6062      	str	r2, [r4, #4]
 800e5c0:	9345      	str	r3, [sp, #276]	@ 0x114
 800e5c2:	e753      	b.n	800e46c <__ssvfiscanf_r+0x50>
 800e5c4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e5c6:	4621      	mov	r1, r4
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	4798      	blx	r3
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	d0eb      	beq.n	800e5a8 <__ssvfiscanf_r+0x18c>
 800e5d0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	f040 808b 	bne.w	800e6ee <__ssvfiscanf_r+0x2d2>
 800e5d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5dc:	e08b      	b.n	800e6f6 <__ssvfiscanf_r+0x2da>
 800e5de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e5e0:	f042 0220 	orr.w	r2, r2, #32
 800e5e4:	9241      	str	r2, [sp, #260]	@ 0x104
 800e5e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e5e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5ec:	9241      	str	r2, [sp, #260]	@ 0x104
 800e5ee:	2210      	movs	r2, #16
 800e5f0:	2b6e      	cmp	r3, #110	@ 0x6e
 800e5f2:	9242      	str	r2, [sp, #264]	@ 0x108
 800e5f4:	d902      	bls.n	800e5fc <__ssvfiscanf_r+0x1e0>
 800e5f6:	e005      	b.n	800e604 <__ssvfiscanf_r+0x1e8>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	9342      	str	r3, [sp, #264]	@ 0x108
 800e5fc:	2303      	movs	r3, #3
 800e5fe:	e002      	b.n	800e606 <__ssvfiscanf_r+0x1ea>
 800e600:	2308      	movs	r3, #8
 800e602:	9342      	str	r3, [sp, #264]	@ 0x108
 800e604:	2304      	movs	r3, #4
 800e606:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e608:	6863      	ldr	r3, [r4, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	dd39      	ble.n	800e682 <__ssvfiscanf_r+0x266>
 800e60e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e610:	0659      	lsls	r1, r3, #25
 800e612:	d404      	bmi.n	800e61e <__ssvfiscanf_r+0x202>
 800e614:	6823      	ldr	r3, [r4, #0]
 800e616:	781a      	ldrb	r2, [r3, #0]
 800e618:	5cba      	ldrb	r2, [r7, r2]
 800e61a:	0712      	lsls	r2, r2, #28
 800e61c:	d438      	bmi.n	800e690 <__ssvfiscanf_r+0x274>
 800e61e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e620:	2b02      	cmp	r3, #2
 800e622:	dc47      	bgt.n	800e6b4 <__ssvfiscanf_r+0x298>
 800e624:	466b      	mov	r3, sp
 800e626:	4622      	mov	r2, r4
 800e628:	a941      	add	r1, sp, #260	@ 0x104
 800e62a:	4630      	mov	r0, r6
 800e62c:	f000 f9ae 	bl	800e98c <_scanf_chars>
 800e630:	2801      	cmp	r0, #1
 800e632:	d064      	beq.n	800e6fe <__ssvfiscanf_r+0x2e2>
 800e634:	2802      	cmp	r0, #2
 800e636:	f47f af19 	bne.w	800e46c <__ssvfiscanf_r+0x50>
 800e63a:	e7c9      	b.n	800e5d0 <__ssvfiscanf_r+0x1b4>
 800e63c:	220a      	movs	r2, #10
 800e63e:	e7d7      	b.n	800e5f0 <__ssvfiscanf_r+0x1d4>
 800e640:	4629      	mov	r1, r5
 800e642:	4640      	mov	r0, r8
 800e644:	f000 fb9c 	bl	800ed80 <__sccl>
 800e648:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e64a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e64e:	9341      	str	r3, [sp, #260]	@ 0x104
 800e650:	4605      	mov	r5, r0
 800e652:	2301      	movs	r3, #1
 800e654:	e7d7      	b.n	800e606 <__ssvfiscanf_r+0x1ea>
 800e656:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e65c:	9341      	str	r3, [sp, #260]	@ 0x104
 800e65e:	2300      	movs	r3, #0
 800e660:	e7d1      	b.n	800e606 <__ssvfiscanf_r+0x1ea>
 800e662:	2302      	movs	r3, #2
 800e664:	e7cf      	b.n	800e606 <__ssvfiscanf_r+0x1ea>
 800e666:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e668:	06c3      	lsls	r3, r0, #27
 800e66a:	f53f aeff 	bmi.w	800e46c <__ssvfiscanf_r+0x50>
 800e66e:	9b00      	ldr	r3, [sp, #0]
 800e670:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e672:	1d19      	adds	r1, r3, #4
 800e674:	9100      	str	r1, [sp, #0]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	07c0      	lsls	r0, r0, #31
 800e67a:	bf4c      	ite	mi
 800e67c:	801a      	strhmi	r2, [r3, #0]
 800e67e:	601a      	strpl	r2, [r3, #0]
 800e680:	e6f4      	b.n	800e46c <__ssvfiscanf_r+0x50>
 800e682:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e684:	4621      	mov	r1, r4
 800e686:	4630      	mov	r0, r6
 800e688:	4798      	blx	r3
 800e68a:	2800      	cmp	r0, #0
 800e68c:	d0bf      	beq.n	800e60e <__ssvfiscanf_r+0x1f2>
 800e68e:	e79f      	b.n	800e5d0 <__ssvfiscanf_r+0x1b4>
 800e690:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e692:	3201      	adds	r2, #1
 800e694:	9245      	str	r2, [sp, #276]	@ 0x114
 800e696:	6862      	ldr	r2, [r4, #4]
 800e698:	3a01      	subs	r2, #1
 800e69a:	2a00      	cmp	r2, #0
 800e69c:	6062      	str	r2, [r4, #4]
 800e69e:	dd02      	ble.n	800e6a6 <__ssvfiscanf_r+0x28a>
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	6023      	str	r3, [r4, #0]
 800e6a4:	e7b6      	b.n	800e614 <__ssvfiscanf_r+0x1f8>
 800e6a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e6a8:	4621      	mov	r1, r4
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	4798      	blx	r3
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d0b0      	beq.n	800e614 <__ssvfiscanf_r+0x1f8>
 800e6b2:	e78d      	b.n	800e5d0 <__ssvfiscanf_r+0x1b4>
 800e6b4:	2b04      	cmp	r3, #4
 800e6b6:	dc0f      	bgt.n	800e6d8 <__ssvfiscanf_r+0x2bc>
 800e6b8:	466b      	mov	r3, sp
 800e6ba:	4622      	mov	r2, r4
 800e6bc:	a941      	add	r1, sp, #260	@ 0x104
 800e6be:	4630      	mov	r0, r6
 800e6c0:	f000 f9be 	bl	800ea40 <_scanf_i>
 800e6c4:	e7b4      	b.n	800e630 <__ssvfiscanf_r+0x214>
 800e6c6:	bf00      	nop
 800e6c8:	0800e369 	.word	0x0800e369
 800e6cc:	0800e3e3 	.word	0x0800e3e3
 800e6d0:	08010161 	.word	0x08010161
 800e6d4:	0800ff45 	.word	0x0800ff45
 800e6d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e704 <__ssvfiscanf_r+0x2e8>)
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f43f aec6 	beq.w	800e46c <__ssvfiscanf_r+0x50>
 800e6e0:	466b      	mov	r3, sp
 800e6e2:	4622      	mov	r2, r4
 800e6e4:	a941      	add	r1, sp, #260	@ 0x104
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f7fc ff2c 	bl	800b544 <_scanf_float>
 800e6ec:	e7a0      	b.n	800e630 <__ssvfiscanf_r+0x214>
 800e6ee:	89a3      	ldrh	r3, [r4, #12]
 800e6f0:	065b      	lsls	r3, r3, #25
 800e6f2:	f53f af71 	bmi.w	800e5d8 <__ssvfiscanf_r+0x1bc>
 800e6f6:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800e6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6fe:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e700:	e7f9      	b.n	800e6f6 <__ssvfiscanf_r+0x2da>
 800e702:	bf00      	nop
 800e704:	0800b545 	.word	0x0800b545

0800e708 <__sfputc_r>:
 800e708:	6893      	ldr	r3, [r2, #8]
 800e70a:	3b01      	subs	r3, #1
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	b410      	push	{r4}
 800e710:	6093      	str	r3, [r2, #8]
 800e712:	da08      	bge.n	800e726 <__sfputc_r+0x1e>
 800e714:	6994      	ldr	r4, [r2, #24]
 800e716:	42a3      	cmp	r3, r4
 800e718:	db01      	blt.n	800e71e <__sfputc_r+0x16>
 800e71a:	290a      	cmp	r1, #10
 800e71c:	d103      	bne.n	800e726 <__sfputc_r+0x1e>
 800e71e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e722:	f000 bba0 	b.w	800ee66 <__swbuf_r>
 800e726:	6813      	ldr	r3, [r2, #0]
 800e728:	1c58      	adds	r0, r3, #1
 800e72a:	6010      	str	r0, [r2, #0]
 800e72c:	7019      	strb	r1, [r3, #0]
 800e72e:	4608      	mov	r0, r1
 800e730:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e734:	4770      	bx	lr

0800e736 <__sfputs_r>:
 800e736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e738:	4606      	mov	r6, r0
 800e73a:	460f      	mov	r7, r1
 800e73c:	4614      	mov	r4, r2
 800e73e:	18d5      	adds	r5, r2, r3
 800e740:	42ac      	cmp	r4, r5
 800e742:	d101      	bne.n	800e748 <__sfputs_r+0x12>
 800e744:	2000      	movs	r0, #0
 800e746:	e007      	b.n	800e758 <__sfputs_r+0x22>
 800e748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e74c:	463a      	mov	r2, r7
 800e74e:	4630      	mov	r0, r6
 800e750:	f7ff ffda 	bl	800e708 <__sfputc_r>
 800e754:	1c43      	adds	r3, r0, #1
 800e756:	d1f3      	bne.n	800e740 <__sfputs_r+0xa>
 800e758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e75c <_vfiprintf_r>:
 800e75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e760:	460d      	mov	r5, r1
 800e762:	b09d      	sub	sp, #116	@ 0x74
 800e764:	4614      	mov	r4, r2
 800e766:	4698      	mov	r8, r3
 800e768:	4606      	mov	r6, r0
 800e76a:	b118      	cbz	r0, 800e774 <_vfiprintf_r+0x18>
 800e76c:	6a03      	ldr	r3, [r0, #32]
 800e76e:	b90b      	cbnz	r3, 800e774 <_vfiprintf_r+0x18>
 800e770:	f7fd f97a 	bl	800ba68 <__sinit>
 800e774:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e776:	07d9      	lsls	r1, r3, #31
 800e778:	d405      	bmi.n	800e786 <_vfiprintf_r+0x2a>
 800e77a:	89ab      	ldrh	r3, [r5, #12]
 800e77c:	059a      	lsls	r2, r3, #22
 800e77e:	d402      	bmi.n	800e786 <_vfiprintf_r+0x2a>
 800e780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e782:	f7fd faca 	bl	800bd1a <__retarget_lock_acquire_recursive>
 800e786:	89ab      	ldrh	r3, [r5, #12]
 800e788:	071b      	lsls	r3, r3, #28
 800e78a:	d501      	bpl.n	800e790 <_vfiprintf_r+0x34>
 800e78c:	692b      	ldr	r3, [r5, #16]
 800e78e:	b99b      	cbnz	r3, 800e7b8 <_vfiprintf_r+0x5c>
 800e790:	4629      	mov	r1, r5
 800e792:	4630      	mov	r0, r6
 800e794:	f000 fba6 	bl	800eee4 <__swsetup_r>
 800e798:	b170      	cbz	r0, 800e7b8 <_vfiprintf_r+0x5c>
 800e79a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e79c:	07dc      	lsls	r4, r3, #31
 800e79e:	d504      	bpl.n	800e7aa <_vfiprintf_r+0x4e>
 800e7a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e7a4:	b01d      	add	sp, #116	@ 0x74
 800e7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7aa:	89ab      	ldrh	r3, [r5, #12]
 800e7ac:	0598      	lsls	r0, r3, #22
 800e7ae:	d4f7      	bmi.n	800e7a0 <_vfiprintf_r+0x44>
 800e7b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7b2:	f7fd fab3 	bl	800bd1c <__retarget_lock_release_recursive>
 800e7b6:	e7f3      	b.n	800e7a0 <_vfiprintf_r+0x44>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7bc:	2320      	movs	r3, #32
 800e7be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e7c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7c6:	2330      	movs	r3, #48	@ 0x30
 800e7c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e978 <_vfiprintf_r+0x21c>
 800e7cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e7d0:	f04f 0901 	mov.w	r9, #1
 800e7d4:	4623      	mov	r3, r4
 800e7d6:	469a      	mov	sl, r3
 800e7d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7dc:	b10a      	cbz	r2, 800e7e2 <_vfiprintf_r+0x86>
 800e7de:	2a25      	cmp	r2, #37	@ 0x25
 800e7e0:	d1f9      	bne.n	800e7d6 <_vfiprintf_r+0x7a>
 800e7e2:	ebba 0b04 	subs.w	fp, sl, r4
 800e7e6:	d00b      	beq.n	800e800 <_vfiprintf_r+0xa4>
 800e7e8:	465b      	mov	r3, fp
 800e7ea:	4622      	mov	r2, r4
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	f7ff ffa1 	bl	800e736 <__sfputs_r>
 800e7f4:	3001      	adds	r0, #1
 800e7f6:	f000 80a7 	beq.w	800e948 <_vfiprintf_r+0x1ec>
 800e7fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7fc:	445a      	add	r2, fp
 800e7fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800e800:	f89a 3000 	ldrb.w	r3, [sl]
 800e804:	2b00      	cmp	r3, #0
 800e806:	f000 809f 	beq.w	800e948 <_vfiprintf_r+0x1ec>
 800e80a:	2300      	movs	r3, #0
 800e80c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e814:	f10a 0a01 	add.w	sl, sl, #1
 800e818:	9304      	str	r3, [sp, #16]
 800e81a:	9307      	str	r3, [sp, #28]
 800e81c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e820:	931a      	str	r3, [sp, #104]	@ 0x68
 800e822:	4654      	mov	r4, sl
 800e824:	2205      	movs	r2, #5
 800e826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e82a:	4853      	ldr	r0, [pc, #332]	@ (800e978 <_vfiprintf_r+0x21c>)
 800e82c:	f7f1 fd58 	bl	80002e0 <memchr>
 800e830:	9a04      	ldr	r2, [sp, #16]
 800e832:	b9d8      	cbnz	r0, 800e86c <_vfiprintf_r+0x110>
 800e834:	06d1      	lsls	r1, r2, #27
 800e836:	bf44      	itt	mi
 800e838:	2320      	movmi	r3, #32
 800e83a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e83e:	0713      	lsls	r3, r2, #28
 800e840:	bf44      	itt	mi
 800e842:	232b      	movmi	r3, #43	@ 0x2b
 800e844:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e848:	f89a 3000 	ldrb.w	r3, [sl]
 800e84c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e84e:	d015      	beq.n	800e87c <_vfiprintf_r+0x120>
 800e850:	9a07      	ldr	r2, [sp, #28]
 800e852:	4654      	mov	r4, sl
 800e854:	2000      	movs	r0, #0
 800e856:	f04f 0c0a 	mov.w	ip, #10
 800e85a:	4621      	mov	r1, r4
 800e85c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e860:	3b30      	subs	r3, #48	@ 0x30
 800e862:	2b09      	cmp	r3, #9
 800e864:	d94b      	bls.n	800e8fe <_vfiprintf_r+0x1a2>
 800e866:	b1b0      	cbz	r0, 800e896 <_vfiprintf_r+0x13a>
 800e868:	9207      	str	r2, [sp, #28]
 800e86a:	e014      	b.n	800e896 <_vfiprintf_r+0x13a>
 800e86c:	eba0 0308 	sub.w	r3, r0, r8
 800e870:	fa09 f303 	lsl.w	r3, r9, r3
 800e874:	4313      	orrs	r3, r2
 800e876:	9304      	str	r3, [sp, #16]
 800e878:	46a2      	mov	sl, r4
 800e87a:	e7d2      	b.n	800e822 <_vfiprintf_r+0xc6>
 800e87c:	9b03      	ldr	r3, [sp, #12]
 800e87e:	1d19      	adds	r1, r3, #4
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	9103      	str	r1, [sp, #12]
 800e884:	2b00      	cmp	r3, #0
 800e886:	bfbb      	ittet	lt
 800e888:	425b      	neglt	r3, r3
 800e88a:	f042 0202 	orrlt.w	r2, r2, #2
 800e88e:	9307      	strge	r3, [sp, #28]
 800e890:	9307      	strlt	r3, [sp, #28]
 800e892:	bfb8      	it	lt
 800e894:	9204      	strlt	r2, [sp, #16]
 800e896:	7823      	ldrb	r3, [r4, #0]
 800e898:	2b2e      	cmp	r3, #46	@ 0x2e
 800e89a:	d10a      	bne.n	800e8b2 <_vfiprintf_r+0x156>
 800e89c:	7863      	ldrb	r3, [r4, #1]
 800e89e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8a0:	d132      	bne.n	800e908 <_vfiprintf_r+0x1ac>
 800e8a2:	9b03      	ldr	r3, [sp, #12]
 800e8a4:	1d1a      	adds	r2, r3, #4
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	9203      	str	r2, [sp, #12]
 800e8aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8ae:	3402      	adds	r4, #2
 800e8b0:	9305      	str	r3, [sp, #20]
 800e8b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e988 <_vfiprintf_r+0x22c>
 800e8b6:	7821      	ldrb	r1, [r4, #0]
 800e8b8:	2203      	movs	r2, #3
 800e8ba:	4650      	mov	r0, sl
 800e8bc:	f7f1 fd10 	bl	80002e0 <memchr>
 800e8c0:	b138      	cbz	r0, 800e8d2 <_vfiprintf_r+0x176>
 800e8c2:	9b04      	ldr	r3, [sp, #16]
 800e8c4:	eba0 000a 	sub.w	r0, r0, sl
 800e8c8:	2240      	movs	r2, #64	@ 0x40
 800e8ca:	4082      	lsls	r2, r0
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	3401      	adds	r4, #1
 800e8d0:	9304      	str	r3, [sp, #16]
 800e8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8d6:	4829      	ldr	r0, [pc, #164]	@ (800e97c <_vfiprintf_r+0x220>)
 800e8d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e8dc:	2206      	movs	r2, #6
 800e8de:	f7f1 fcff 	bl	80002e0 <memchr>
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	d03f      	beq.n	800e966 <_vfiprintf_r+0x20a>
 800e8e6:	4b26      	ldr	r3, [pc, #152]	@ (800e980 <_vfiprintf_r+0x224>)
 800e8e8:	bb1b      	cbnz	r3, 800e932 <_vfiprintf_r+0x1d6>
 800e8ea:	9b03      	ldr	r3, [sp, #12]
 800e8ec:	3307      	adds	r3, #7
 800e8ee:	f023 0307 	bic.w	r3, r3, #7
 800e8f2:	3308      	adds	r3, #8
 800e8f4:	9303      	str	r3, [sp, #12]
 800e8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8f8:	443b      	add	r3, r7
 800e8fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8fc:	e76a      	b.n	800e7d4 <_vfiprintf_r+0x78>
 800e8fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800e902:	460c      	mov	r4, r1
 800e904:	2001      	movs	r0, #1
 800e906:	e7a8      	b.n	800e85a <_vfiprintf_r+0xfe>
 800e908:	2300      	movs	r3, #0
 800e90a:	3401      	adds	r4, #1
 800e90c:	9305      	str	r3, [sp, #20]
 800e90e:	4619      	mov	r1, r3
 800e910:	f04f 0c0a 	mov.w	ip, #10
 800e914:	4620      	mov	r0, r4
 800e916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e91a:	3a30      	subs	r2, #48	@ 0x30
 800e91c:	2a09      	cmp	r2, #9
 800e91e:	d903      	bls.n	800e928 <_vfiprintf_r+0x1cc>
 800e920:	2b00      	cmp	r3, #0
 800e922:	d0c6      	beq.n	800e8b2 <_vfiprintf_r+0x156>
 800e924:	9105      	str	r1, [sp, #20]
 800e926:	e7c4      	b.n	800e8b2 <_vfiprintf_r+0x156>
 800e928:	fb0c 2101 	mla	r1, ip, r1, r2
 800e92c:	4604      	mov	r4, r0
 800e92e:	2301      	movs	r3, #1
 800e930:	e7f0      	b.n	800e914 <_vfiprintf_r+0x1b8>
 800e932:	ab03      	add	r3, sp, #12
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	462a      	mov	r2, r5
 800e938:	4b12      	ldr	r3, [pc, #72]	@ (800e984 <_vfiprintf_r+0x228>)
 800e93a:	a904      	add	r1, sp, #16
 800e93c:	4630      	mov	r0, r6
 800e93e:	f7fc fa5b 	bl	800adf8 <_printf_float>
 800e942:	4607      	mov	r7, r0
 800e944:	1c78      	adds	r0, r7, #1
 800e946:	d1d6      	bne.n	800e8f6 <_vfiprintf_r+0x19a>
 800e948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e94a:	07d9      	lsls	r1, r3, #31
 800e94c:	d405      	bmi.n	800e95a <_vfiprintf_r+0x1fe>
 800e94e:	89ab      	ldrh	r3, [r5, #12]
 800e950:	059a      	lsls	r2, r3, #22
 800e952:	d402      	bmi.n	800e95a <_vfiprintf_r+0x1fe>
 800e954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e956:	f7fd f9e1 	bl	800bd1c <__retarget_lock_release_recursive>
 800e95a:	89ab      	ldrh	r3, [r5, #12]
 800e95c:	065b      	lsls	r3, r3, #25
 800e95e:	f53f af1f 	bmi.w	800e7a0 <_vfiprintf_r+0x44>
 800e962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e964:	e71e      	b.n	800e7a4 <_vfiprintf_r+0x48>
 800e966:	ab03      	add	r3, sp, #12
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	462a      	mov	r2, r5
 800e96c:	4b05      	ldr	r3, [pc, #20]	@ (800e984 <_vfiprintf_r+0x228>)
 800e96e:	a904      	add	r1, sp, #16
 800e970:	4630      	mov	r0, r6
 800e972:	f7fc fcc9 	bl	800b308 <_printf_i>
 800e976:	e7e4      	b.n	800e942 <_vfiprintf_r+0x1e6>
 800e978:	0800ff3f 	.word	0x0800ff3f
 800e97c:	0800ff49 	.word	0x0800ff49
 800e980:	0800adf9 	.word	0x0800adf9
 800e984:	0800e737 	.word	0x0800e737
 800e988:	0800ff45 	.word	0x0800ff45

0800e98c <_scanf_chars>:
 800e98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e990:	4615      	mov	r5, r2
 800e992:	688a      	ldr	r2, [r1, #8]
 800e994:	4680      	mov	r8, r0
 800e996:	460c      	mov	r4, r1
 800e998:	b932      	cbnz	r2, 800e9a8 <_scanf_chars+0x1c>
 800e99a:	698a      	ldr	r2, [r1, #24]
 800e99c:	2a00      	cmp	r2, #0
 800e99e:	bf14      	ite	ne
 800e9a0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800e9a4:	2201      	moveq	r2, #1
 800e9a6:	608a      	str	r2, [r1, #8]
 800e9a8:	6822      	ldr	r2, [r4, #0]
 800e9aa:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ea3c <_scanf_chars+0xb0>
 800e9ae:	06d1      	lsls	r1, r2, #27
 800e9b0:	bf5f      	itttt	pl
 800e9b2:	681a      	ldrpl	r2, [r3, #0]
 800e9b4:	1d11      	addpl	r1, r2, #4
 800e9b6:	6019      	strpl	r1, [r3, #0]
 800e9b8:	6816      	ldrpl	r6, [r2, #0]
 800e9ba:	2700      	movs	r7, #0
 800e9bc:	69a0      	ldr	r0, [r4, #24]
 800e9be:	b188      	cbz	r0, 800e9e4 <_scanf_chars+0x58>
 800e9c0:	2801      	cmp	r0, #1
 800e9c2:	d107      	bne.n	800e9d4 <_scanf_chars+0x48>
 800e9c4:	682b      	ldr	r3, [r5, #0]
 800e9c6:	781a      	ldrb	r2, [r3, #0]
 800e9c8:	6963      	ldr	r3, [r4, #20]
 800e9ca:	5c9b      	ldrb	r3, [r3, r2]
 800e9cc:	b953      	cbnz	r3, 800e9e4 <_scanf_chars+0x58>
 800e9ce:	2f00      	cmp	r7, #0
 800e9d0:	d031      	beq.n	800ea36 <_scanf_chars+0xaa>
 800e9d2:	e022      	b.n	800ea1a <_scanf_chars+0x8e>
 800e9d4:	2802      	cmp	r0, #2
 800e9d6:	d120      	bne.n	800ea1a <_scanf_chars+0x8e>
 800e9d8:	682b      	ldr	r3, [r5, #0]
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e9e0:	071b      	lsls	r3, r3, #28
 800e9e2:	d41a      	bmi.n	800ea1a <_scanf_chars+0x8e>
 800e9e4:	6823      	ldr	r3, [r4, #0]
 800e9e6:	06da      	lsls	r2, r3, #27
 800e9e8:	bf5e      	ittt	pl
 800e9ea:	682b      	ldrpl	r3, [r5, #0]
 800e9ec:	781b      	ldrbpl	r3, [r3, #0]
 800e9ee:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e9f2:	682a      	ldr	r2, [r5, #0]
 800e9f4:	686b      	ldr	r3, [r5, #4]
 800e9f6:	3201      	adds	r2, #1
 800e9f8:	602a      	str	r2, [r5, #0]
 800e9fa:	68a2      	ldr	r2, [r4, #8]
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	3a01      	subs	r2, #1
 800ea00:	606b      	str	r3, [r5, #4]
 800ea02:	3701      	adds	r7, #1
 800ea04:	60a2      	str	r2, [r4, #8]
 800ea06:	b142      	cbz	r2, 800ea1a <_scanf_chars+0x8e>
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	dcd7      	bgt.n	800e9bc <_scanf_chars+0x30>
 800ea0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ea10:	4629      	mov	r1, r5
 800ea12:	4640      	mov	r0, r8
 800ea14:	4798      	blx	r3
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d0d0      	beq.n	800e9bc <_scanf_chars+0x30>
 800ea1a:	6823      	ldr	r3, [r4, #0]
 800ea1c:	f013 0310 	ands.w	r3, r3, #16
 800ea20:	d105      	bne.n	800ea2e <_scanf_chars+0xa2>
 800ea22:	68e2      	ldr	r2, [r4, #12]
 800ea24:	3201      	adds	r2, #1
 800ea26:	60e2      	str	r2, [r4, #12]
 800ea28:	69a2      	ldr	r2, [r4, #24]
 800ea2a:	b102      	cbz	r2, 800ea2e <_scanf_chars+0xa2>
 800ea2c:	7033      	strb	r3, [r6, #0]
 800ea2e:	6923      	ldr	r3, [r4, #16]
 800ea30:	443b      	add	r3, r7
 800ea32:	6123      	str	r3, [r4, #16]
 800ea34:	2000      	movs	r0, #0
 800ea36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea3a:	bf00      	nop
 800ea3c:	08010161 	.word	0x08010161

0800ea40 <_scanf_i>:
 800ea40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea44:	4698      	mov	r8, r3
 800ea46:	4b74      	ldr	r3, [pc, #464]	@ (800ec18 <_scanf_i+0x1d8>)
 800ea48:	460c      	mov	r4, r1
 800ea4a:	4682      	mov	sl, r0
 800ea4c:	4616      	mov	r6, r2
 800ea4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea52:	b087      	sub	sp, #28
 800ea54:	ab03      	add	r3, sp, #12
 800ea56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ea5a:	4b70      	ldr	r3, [pc, #448]	@ (800ec1c <_scanf_i+0x1dc>)
 800ea5c:	69a1      	ldr	r1, [r4, #24]
 800ea5e:	4a70      	ldr	r2, [pc, #448]	@ (800ec20 <_scanf_i+0x1e0>)
 800ea60:	2903      	cmp	r1, #3
 800ea62:	bf08      	it	eq
 800ea64:	461a      	moveq	r2, r3
 800ea66:	68a3      	ldr	r3, [r4, #8]
 800ea68:	9201      	str	r2, [sp, #4]
 800ea6a:	1e5a      	subs	r2, r3, #1
 800ea6c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ea70:	bf88      	it	hi
 800ea72:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ea76:	4627      	mov	r7, r4
 800ea78:	bf82      	ittt	hi
 800ea7a:	eb03 0905 	addhi.w	r9, r3, r5
 800ea7e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ea82:	60a3      	strhi	r3, [r4, #8]
 800ea84:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ea88:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ea8c:	bf98      	it	ls
 800ea8e:	f04f 0900 	movls.w	r9, #0
 800ea92:	6023      	str	r3, [r4, #0]
 800ea94:	463d      	mov	r5, r7
 800ea96:	f04f 0b00 	mov.w	fp, #0
 800ea9a:	6831      	ldr	r1, [r6, #0]
 800ea9c:	ab03      	add	r3, sp, #12
 800ea9e:	7809      	ldrb	r1, [r1, #0]
 800eaa0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800eaa4:	2202      	movs	r2, #2
 800eaa6:	f7f1 fc1b 	bl	80002e0 <memchr>
 800eaaa:	b328      	cbz	r0, 800eaf8 <_scanf_i+0xb8>
 800eaac:	f1bb 0f01 	cmp.w	fp, #1
 800eab0:	d159      	bne.n	800eb66 <_scanf_i+0x126>
 800eab2:	6862      	ldr	r2, [r4, #4]
 800eab4:	b92a      	cbnz	r2, 800eac2 <_scanf_i+0x82>
 800eab6:	6822      	ldr	r2, [r4, #0]
 800eab8:	2108      	movs	r1, #8
 800eaba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eabe:	6061      	str	r1, [r4, #4]
 800eac0:	6022      	str	r2, [r4, #0]
 800eac2:	6822      	ldr	r2, [r4, #0]
 800eac4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800eac8:	6022      	str	r2, [r4, #0]
 800eaca:	68a2      	ldr	r2, [r4, #8]
 800eacc:	1e51      	subs	r1, r2, #1
 800eace:	60a1      	str	r1, [r4, #8]
 800ead0:	b192      	cbz	r2, 800eaf8 <_scanf_i+0xb8>
 800ead2:	6832      	ldr	r2, [r6, #0]
 800ead4:	1c51      	adds	r1, r2, #1
 800ead6:	6031      	str	r1, [r6, #0]
 800ead8:	7812      	ldrb	r2, [r2, #0]
 800eada:	f805 2b01 	strb.w	r2, [r5], #1
 800eade:	6872      	ldr	r2, [r6, #4]
 800eae0:	3a01      	subs	r2, #1
 800eae2:	2a00      	cmp	r2, #0
 800eae4:	6072      	str	r2, [r6, #4]
 800eae6:	dc07      	bgt.n	800eaf8 <_scanf_i+0xb8>
 800eae8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800eaec:	4631      	mov	r1, r6
 800eaee:	4650      	mov	r0, sl
 800eaf0:	4790      	blx	r2
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	f040 8085 	bne.w	800ec02 <_scanf_i+0x1c2>
 800eaf8:	f10b 0b01 	add.w	fp, fp, #1
 800eafc:	f1bb 0f03 	cmp.w	fp, #3
 800eb00:	d1cb      	bne.n	800ea9a <_scanf_i+0x5a>
 800eb02:	6863      	ldr	r3, [r4, #4]
 800eb04:	b90b      	cbnz	r3, 800eb0a <_scanf_i+0xca>
 800eb06:	230a      	movs	r3, #10
 800eb08:	6063      	str	r3, [r4, #4]
 800eb0a:	6863      	ldr	r3, [r4, #4]
 800eb0c:	4945      	ldr	r1, [pc, #276]	@ (800ec24 <_scanf_i+0x1e4>)
 800eb0e:	6960      	ldr	r0, [r4, #20]
 800eb10:	1ac9      	subs	r1, r1, r3
 800eb12:	f000 f935 	bl	800ed80 <__sccl>
 800eb16:	f04f 0b00 	mov.w	fp, #0
 800eb1a:	68a3      	ldr	r3, [r4, #8]
 800eb1c:	6822      	ldr	r2, [r4, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d03d      	beq.n	800eb9e <_scanf_i+0x15e>
 800eb22:	6831      	ldr	r1, [r6, #0]
 800eb24:	6960      	ldr	r0, [r4, #20]
 800eb26:	f891 c000 	ldrb.w	ip, [r1]
 800eb2a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	d035      	beq.n	800eb9e <_scanf_i+0x15e>
 800eb32:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800eb36:	d124      	bne.n	800eb82 <_scanf_i+0x142>
 800eb38:	0510      	lsls	r0, r2, #20
 800eb3a:	d522      	bpl.n	800eb82 <_scanf_i+0x142>
 800eb3c:	f10b 0b01 	add.w	fp, fp, #1
 800eb40:	f1b9 0f00 	cmp.w	r9, #0
 800eb44:	d003      	beq.n	800eb4e <_scanf_i+0x10e>
 800eb46:	3301      	adds	r3, #1
 800eb48:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800eb4c:	60a3      	str	r3, [r4, #8]
 800eb4e:	6873      	ldr	r3, [r6, #4]
 800eb50:	3b01      	subs	r3, #1
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	6073      	str	r3, [r6, #4]
 800eb56:	dd1b      	ble.n	800eb90 <_scanf_i+0x150>
 800eb58:	6833      	ldr	r3, [r6, #0]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	6033      	str	r3, [r6, #0]
 800eb5e:	68a3      	ldr	r3, [r4, #8]
 800eb60:	3b01      	subs	r3, #1
 800eb62:	60a3      	str	r3, [r4, #8]
 800eb64:	e7d9      	b.n	800eb1a <_scanf_i+0xda>
 800eb66:	f1bb 0f02 	cmp.w	fp, #2
 800eb6a:	d1ae      	bne.n	800eaca <_scanf_i+0x8a>
 800eb6c:	6822      	ldr	r2, [r4, #0]
 800eb6e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800eb72:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800eb76:	d1c4      	bne.n	800eb02 <_scanf_i+0xc2>
 800eb78:	2110      	movs	r1, #16
 800eb7a:	6061      	str	r1, [r4, #4]
 800eb7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800eb80:	e7a2      	b.n	800eac8 <_scanf_i+0x88>
 800eb82:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800eb86:	6022      	str	r2, [r4, #0]
 800eb88:	780b      	ldrb	r3, [r1, #0]
 800eb8a:	f805 3b01 	strb.w	r3, [r5], #1
 800eb8e:	e7de      	b.n	800eb4e <_scanf_i+0x10e>
 800eb90:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eb94:	4631      	mov	r1, r6
 800eb96:	4650      	mov	r0, sl
 800eb98:	4798      	blx	r3
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	d0df      	beq.n	800eb5e <_scanf_i+0x11e>
 800eb9e:	6823      	ldr	r3, [r4, #0]
 800eba0:	05d9      	lsls	r1, r3, #23
 800eba2:	d50d      	bpl.n	800ebc0 <_scanf_i+0x180>
 800eba4:	42bd      	cmp	r5, r7
 800eba6:	d909      	bls.n	800ebbc <_scanf_i+0x17c>
 800eba8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ebac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebb0:	4632      	mov	r2, r6
 800ebb2:	4650      	mov	r0, sl
 800ebb4:	4798      	blx	r3
 800ebb6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800ebba:	464d      	mov	r5, r9
 800ebbc:	42bd      	cmp	r5, r7
 800ebbe:	d028      	beq.n	800ec12 <_scanf_i+0x1d2>
 800ebc0:	6822      	ldr	r2, [r4, #0]
 800ebc2:	f012 0210 	ands.w	r2, r2, #16
 800ebc6:	d113      	bne.n	800ebf0 <_scanf_i+0x1b0>
 800ebc8:	702a      	strb	r2, [r5, #0]
 800ebca:	6863      	ldr	r3, [r4, #4]
 800ebcc:	9e01      	ldr	r6, [sp, #4]
 800ebce:	4639      	mov	r1, r7
 800ebd0:	4650      	mov	r0, sl
 800ebd2:	47b0      	blx	r6
 800ebd4:	f8d8 3000 	ldr.w	r3, [r8]
 800ebd8:	6821      	ldr	r1, [r4, #0]
 800ebda:	1d1a      	adds	r2, r3, #4
 800ebdc:	f8c8 2000 	str.w	r2, [r8]
 800ebe0:	f011 0f20 	tst.w	r1, #32
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	d00f      	beq.n	800ec08 <_scanf_i+0x1c8>
 800ebe8:	6018      	str	r0, [r3, #0]
 800ebea:	68e3      	ldr	r3, [r4, #12]
 800ebec:	3301      	adds	r3, #1
 800ebee:	60e3      	str	r3, [r4, #12]
 800ebf0:	6923      	ldr	r3, [r4, #16]
 800ebf2:	1bed      	subs	r5, r5, r7
 800ebf4:	445d      	add	r5, fp
 800ebf6:	442b      	add	r3, r5
 800ebf8:	6123      	str	r3, [r4, #16]
 800ebfa:	2000      	movs	r0, #0
 800ebfc:	b007      	add	sp, #28
 800ebfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec02:	f04f 0b00 	mov.w	fp, #0
 800ec06:	e7ca      	b.n	800eb9e <_scanf_i+0x15e>
 800ec08:	07ca      	lsls	r2, r1, #31
 800ec0a:	bf4c      	ite	mi
 800ec0c:	8018      	strhmi	r0, [r3, #0]
 800ec0e:	6018      	strpl	r0, [r3, #0]
 800ec10:	e7eb      	b.n	800ebea <_scanf_i+0x1aa>
 800ec12:	2001      	movs	r0, #1
 800ec14:	e7f2      	b.n	800ebfc <_scanf_i+0x1bc>
 800ec16:	bf00      	nop
 800ec18:	0800fddc 	.word	0x0800fddc
 800ec1c:	0800e0b5 	.word	0x0800e0b5
 800ec20:	0800f86d 	.word	0x0800f86d
 800ec24:	0800ff60 	.word	0x0800ff60

0800ec28 <__sflush_r>:
 800ec28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec30:	0716      	lsls	r6, r2, #28
 800ec32:	4605      	mov	r5, r0
 800ec34:	460c      	mov	r4, r1
 800ec36:	d454      	bmi.n	800ece2 <__sflush_r+0xba>
 800ec38:	684b      	ldr	r3, [r1, #4]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	dc02      	bgt.n	800ec44 <__sflush_r+0x1c>
 800ec3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	dd48      	ble.n	800ecd6 <__sflush_r+0xae>
 800ec44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec46:	2e00      	cmp	r6, #0
 800ec48:	d045      	beq.n	800ecd6 <__sflush_r+0xae>
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec50:	682f      	ldr	r7, [r5, #0]
 800ec52:	6a21      	ldr	r1, [r4, #32]
 800ec54:	602b      	str	r3, [r5, #0]
 800ec56:	d030      	beq.n	800ecba <__sflush_r+0x92>
 800ec58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec5a:	89a3      	ldrh	r3, [r4, #12]
 800ec5c:	0759      	lsls	r1, r3, #29
 800ec5e:	d505      	bpl.n	800ec6c <__sflush_r+0x44>
 800ec60:	6863      	ldr	r3, [r4, #4]
 800ec62:	1ad2      	subs	r2, r2, r3
 800ec64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec66:	b10b      	cbz	r3, 800ec6c <__sflush_r+0x44>
 800ec68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec6a:	1ad2      	subs	r2, r2, r3
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec70:	6a21      	ldr	r1, [r4, #32]
 800ec72:	4628      	mov	r0, r5
 800ec74:	47b0      	blx	r6
 800ec76:	1c43      	adds	r3, r0, #1
 800ec78:	89a3      	ldrh	r3, [r4, #12]
 800ec7a:	d106      	bne.n	800ec8a <__sflush_r+0x62>
 800ec7c:	6829      	ldr	r1, [r5, #0]
 800ec7e:	291d      	cmp	r1, #29
 800ec80:	d82b      	bhi.n	800ecda <__sflush_r+0xb2>
 800ec82:	4a2a      	ldr	r2, [pc, #168]	@ (800ed2c <__sflush_r+0x104>)
 800ec84:	40ca      	lsrs	r2, r1
 800ec86:	07d6      	lsls	r6, r2, #31
 800ec88:	d527      	bpl.n	800ecda <__sflush_r+0xb2>
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	6062      	str	r2, [r4, #4]
 800ec8e:	04d9      	lsls	r1, r3, #19
 800ec90:	6922      	ldr	r2, [r4, #16]
 800ec92:	6022      	str	r2, [r4, #0]
 800ec94:	d504      	bpl.n	800eca0 <__sflush_r+0x78>
 800ec96:	1c42      	adds	r2, r0, #1
 800ec98:	d101      	bne.n	800ec9e <__sflush_r+0x76>
 800ec9a:	682b      	ldr	r3, [r5, #0]
 800ec9c:	b903      	cbnz	r3, 800eca0 <__sflush_r+0x78>
 800ec9e:	6560      	str	r0, [r4, #84]	@ 0x54
 800eca0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eca2:	602f      	str	r7, [r5, #0]
 800eca4:	b1b9      	cbz	r1, 800ecd6 <__sflush_r+0xae>
 800eca6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ecaa:	4299      	cmp	r1, r3
 800ecac:	d002      	beq.n	800ecb4 <__sflush_r+0x8c>
 800ecae:	4628      	mov	r0, r5
 800ecb0:	f7fd fe24 	bl	800c8fc <_free_r>
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	6363      	str	r3, [r4, #52]	@ 0x34
 800ecb8:	e00d      	b.n	800ecd6 <__sflush_r+0xae>
 800ecba:	2301      	movs	r3, #1
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	47b0      	blx	r6
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	1c50      	adds	r0, r2, #1
 800ecc4:	d1c9      	bne.n	800ec5a <__sflush_r+0x32>
 800ecc6:	682b      	ldr	r3, [r5, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d0c6      	beq.n	800ec5a <__sflush_r+0x32>
 800eccc:	2b1d      	cmp	r3, #29
 800ecce:	d001      	beq.n	800ecd4 <__sflush_r+0xac>
 800ecd0:	2b16      	cmp	r3, #22
 800ecd2:	d11e      	bne.n	800ed12 <__sflush_r+0xea>
 800ecd4:	602f      	str	r7, [r5, #0]
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	e022      	b.n	800ed20 <__sflush_r+0xf8>
 800ecda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecde:	b21b      	sxth	r3, r3
 800ece0:	e01b      	b.n	800ed1a <__sflush_r+0xf2>
 800ece2:	690f      	ldr	r7, [r1, #16]
 800ece4:	2f00      	cmp	r7, #0
 800ece6:	d0f6      	beq.n	800ecd6 <__sflush_r+0xae>
 800ece8:	0793      	lsls	r3, r2, #30
 800ecea:	680e      	ldr	r6, [r1, #0]
 800ecec:	bf08      	it	eq
 800ecee:	694b      	ldreq	r3, [r1, #20]
 800ecf0:	600f      	str	r7, [r1, #0]
 800ecf2:	bf18      	it	ne
 800ecf4:	2300      	movne	r3, #0
 800ecf6:	eba6 0807 	sub.w	r8, r6, r7
 800ecfa:	608b      	str	r3, [r1, #8]
 800ecfc:	f1b8 0f00 	cmp.w	r8, #0
 800ed00:	dde9      	ble.n	800ecd6 <__sflush_r+0xae>
 800ed02:	6a21      	ldr	r1, [r4, #32]
 800ed04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ed06:	4643      	mov	r3, r8
 800ed08:	463a      	mov	r2, r7
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	47b0      	blx	r6
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	dc08      	bgt.n	800ed24 <__sflush_r+0xfc>
 800ed12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed1a:	81a3      	strh	r3, [r4, #12]
 800ed1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed24:	4407      	add	r7, r0
 800ed26:	eba8 0800 	sub.w	r8, r8, r0
 800ed2a:	e7e7      	b.n	800ecfc <__sflush_r+0xd4>
 800ed2c:	20400001 	.word	0x20400001

0800ed30 <_fflush_r>:
 800ed30:	b538      	push	{r3, r4, r5, lr}
 800ed32:	690b      	ldr	r3, [r1, #16]
 800ed34:	4605      	mov	r5, r0
 800ed36:	460c      	mov	r4, r1
 800ed38:	b913      	cbnz	r3, 800ed40 <_fflush_r+0x10>
 800ed3a:	2500      	movs	r5, #0
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	bd38      	pop	{r3, r4, r5, pc}
 800ed40:	b118      	cbz	r0, 800ed4a <_fflush_r+0x1a>
 800ed42:	6a03      	ldr	r3, [r0, #32]
 800ed44:	b90b      	cbnz	r3, 800ed4a <_fflush_r+0x1a>
 800ed46:	f7fc fe8f 	bl	800ba68 <__sinit>
 800ed4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d0f3      	beq.n	800ed3a <_fflush_r+0xa>
 800ed52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed54:	07d0      	lsls	r0, r2, #31
 800ed56:	d404      	bmi.n	800ed62 <_fflush_r+0x32>
 800ed58:	0599      	lsls	r1, r3, #22
 800ed5a:	d402      	bmi.n	800ed62 <_fflush_r+0x32>
 800ed5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed5e:	f7fc ffdc 	bl	800bd1a <__retarget_lock_acquire_recursive>
 800ed62:	4628      	mov	r0, r5
 800ed64:	4621      	mov	r1, r4
 800ed66:	f7ff ff5f 	bl	800ec28 <__sflush_r>
 800ed6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed6c:	07da      	lsls	r2, r3, #31
 800ed6e:	4605      	mov	r5, r0
 800ed70:	d4e4      	bmi.n	800ed3c <_fflush_r+0xc>
 800ed72:	89a3      	ldrh	r3, [r4, #12]
 800ed74:	059b      	lsls	r3, r3, #22
 800ed76:	d4e1      	bmi.n	800ed3c <_fflush_r+0xc>
 800ed78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed7a:	f7fc ffcf 	bl	800bd1c <__retarget_lock_release_recursive>
 800ed7e:	e7dd      	b.n	800ed3c <_fflush_r+0xc>

0800ed80 <__sccl>:
 800ed80:	b570      	push	{r4, r5, r6, lr}
 800ed82:	780b      	ldrb	r3, [r1, #0]
 800ed84:	4604      	mov	r4, r0
 800ed86:	2b5e      	cmp	r3, #94	@ 0x5e
 800ed88:	bf0b      	itete	eq
 800ed8a:	784b      	ldrbeq	r3, [r1, #1]
 800ed8c:	1c4a      	addne	r2, r1, #1
 800ed8e:	1c8a      	addeq	r2, r1, #2
 800ed90:	2100      	movne	r1, #0
 800ed92:	bf08      	it	eq
 800ed94:	2101      	moveq	r1, #1
 800ed96:	3801      	subs	r0, #1
 800ed98:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ed9c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800eda0:	42a8      	cmp	r0, r5
 800eda2:	d1fb      	bne.n	800ed9c <__sccl+0x1c>
 800eda4:	b90b      	cbnz	r3, 800edaa <__sccl+0x2a>
 800eda6:	1e50      	subs	r0, r2, #1
 800eda8:	bd70      	pop	{r4, r5, r6, pc}
 800edaa:	f081 0101 	eor.w	r1, r1, #1
 800edae:	54e1      	strb	r1, [r4, r3]
 800edb0:	4610      	mov	r0, r2
 800edb2:	4602      	mov	r2, r0
 800edb4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800edb8:	2d2d      	cmp	r5, #45	@ 0x2d
 800edba:	d005      	beq.n	800edc8 <__sccl+0x48>
 800edbc:	2d5d      	cmp	r5, #93	@ 0x5d
 800edbe:	d016      	beq.n	800edee <__sccl+0x6e>
 800edc0:	2d00      	cmp	r5, #0
 800edc2:	d0f1      	beq.n	800eda8 <__sccl+0x28>
 800edc4:	462b      	mov	r3, r5
 800edc6:	e7f2      	b.n	800edae <__sccl+0x2e>
 800edc8:	7846      	ldrb	r6, [r0, #1]
 800edca:	2e5d      	cmp	r6, #93	@ 0x5d
 800edcc:	d0fa      	beq.n	800edc4 <__sccl+0x44>
 800edce:	42b3      	cmp	r3, r6
 800edd0:	dcf8      	bgt.n	800edc4 <__sccl+0x44>
 800edd2:	3002      	adds	r0, #2
 800edd4:	461a      	mov	r2, r3
 800edd6:	3201      	adds	r2, #1
 800edd8:	4296      	cmp	r6, r2
 800edda:	54a1      	strb	r1, [r4, r2]
 800eddc:	dcfb      	bgt.n	800edd6 <__sccl+0x56>
 800edde:	1af2      	subs	r2, r6, r3
 800ede0:	3a01      	subs	r2, #1
 800ede2:	1c5d      	adds	r5, r3, #1
 800ede4:	42b3      	cmp	r3, r6
 800ede6:	bfa8      	it	ge
 800ede8:	2200      	movge	r2, #0
 800edea:	18ab      	adds	r3, r5, r2
 800edec:	e7e1      	b.n	800edb2 <__sccl+0x32>
 800edee:	4610      	mov	r0, r2
 800edf0:	e7da      	b.n	800eda8 <__sccl+0x28>

0800edf2 <__submore>:
 800edf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf6:	460c      	mov	r4, r1
 800edf8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800edfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edfe:	4299      	cmp	r1, r3
 800ee00:	d11d      	bne.n	800ee3e <__submore+0x4c>
 800ee02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ee06:	f7fd fded 	bl	800c9e4 <_malloc_r>
 800ee0a:	b918      	cbnz	r0, 800ee14 <__submore+0x22>
 800ee0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee18:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ee1a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ee1e:	6360      	str	r0, [r4, #52]	@ 0x34
 800ee20:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ee24:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ee28:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ee2c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ee30:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ee34:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ee38:	6020      	str	r0, [r4, #0]
 800ee3a:	2000      	movs	r0, #0
 800ee3c:	e7e8      	b.n	800ee10 <__submore+0x1e>
 800ee3e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ee40:	0077      	lsls	r7, r6, #1
 800ee42:	463a      	mov	r2, r7
 800ee44:	f000 fc75 	bl	800f732 <_realloc_r>
 800ee48:	4605      	mov	r5, r0
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d0de      	beq.n	800ee0c <__submore+0x1a>
 800ee4e:	eb00 0806 	add.w	r8, r0, r6
 800ee52:	4601      	mov	r1, r0
 800ee54:	4632      	mov	r2, r6
 800ee56:	4640      	mov	r0, r8
 800ee58:	f000 f8d6 	bl	800f008 <memcpy>
 800ee5c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ee60:	f8c4 8000 	str.w	r8, [r4]
 800ee64:	e7e9      	b.n	800ee3a <__submore+0x48>

0800ee66 <__swbuf_r>:
 800ee66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee68:	460e      	mov	r6, r1
 800ee6a:	4614      	mov	r4, r2
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	b118      	cbz	r0, 800ee78 <__swbuf_r+0x12>
 800ee70:	6a03      	ldr	r3, [r0, #32]
 800ee72:	b90b      	cbnz	r3, 800ee78 <__swbuf_r+0x12>
 800ee74:	f7fc fdf8 	bl	800ba68 <__sinit>
 800ee78:	69a3      	ldr	r3, [r4, #24]
 800ee7a:	60a3      	str	r3, [r4, #8]
 800ee7c:	89a3      	ldrh	r3, [r4, #12]
 800ee7e:	071a      	lsls	r2, r3, #28
 800ee80:	d501      	bpl.n	800ee86 <__swbuf_r+0x20>
 800ee82:	6923      	ldr	r3, [r4, #16]
 800ee84:	b943      	cbnz	r3, 800ee98 <__swbuf_r+0x32>
 800ee86:	4621      	mov	r1, r4
 800ee88:	4628      	mov	r0, r5
 800ee8a:	f000 f82b 	bl	800eee4 <__swsetup_r>
 800ee8e:	b118      	cbz	r0, 800ee98 <__swbuf_r+0x32>
 800ee90:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ee94:	4638      	mov	r0, r7
 800ee96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee98:	6823      	ldr	r3, [r4, #0]
 800ee9a:	6922      	ldr	r2, [r4, #16]
 800ee9c:	1a98      	subs	r0, r3, r2
 800ee9e:	6963      	ldr	r3, [r4, #20]
 800eea0:	b2f6      	uxtb	r6, r6
 800eea2:	4283      	cmp	r3, r0
 800eea4:	4637      	mov	r7, r6
 800eea6:	dc05      	bgt.n	800eeb4 <__swbuf_r+0x4e>
 800eea8:	4621      	mov	r1, r4
 800eeaa:	4628      	mov	r0, r5
 800eeac:	f7ff ff40 	bl	800ed30 <_fflush_r>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d1ed      	bne.n	800ee90 <__swbuf_r+0x2a>
 800eeb4:	68a3      	ldr	r3, [r4, #8]
 800eeb6:	3b01      	subs	r3, #1
 800eeb8:	60a3      	str	r3, [r4, #8]
 800eeba:	6823      	ldr	r3, [r4, #0]
 800eebc:	1c5a      	adds	r2, r3, #1
 800eebe:	6022      	str	r2, [r4, #0]
 800eec0:	701e      	strb	r6, [r3, #0]
 800eec2:	6962      	ldr	r2, [r4, #20]
 800eec4:	1c43      	adds	r3, r0, #1
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d004      	beq.n	800eed4 <__swbuf_r+0x6e>
 800eeca:	89a3      	ldrh	r3, [r4, #12]
 800eecc:	07db      	lsls	r3, r3, #31
 800eece:	d5e1      	bpl.n	800ee94 <__swbuf_r+0x2e>
 800eed0:	2e0a      	cmp	r6, #10
 800eed2:	d1df      	bne.n	800ee94 <__swbuf_r+0x2e>
 800eed4:	4621      	mov	r1, r4
 800eed6:	4628      	mov	r0, r5
 800eed8:	f7ff ff2a 	bl	800ed30 <_fflush_r>
 800eedc:	2800      	cmp	r0, #0
 800eede:	d0d9      	beq.n	800ee94 <__swbuf_r+0x2e>
 800eee0:	e7d6      	b.n	800ee90 <__swbuf_r+0x2a>
	...

0800eee4 <__swsetup_r>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4b29      	ldr	r3, [pc, #164]	@ (800ef8c <__swsetup_r+0xa8>)
 800eee8:	4605      	mov	r5, r0
 800eeea:	6818      	ldr	r0, [r3, #0]
 800eeec:	460c      	mov	r4, r1
 800eeee:	b118      	cbz	r0, 800eef8 <__swsetup_r+0x14>
 800eef0:	6a03      	ldr	r3, [r0, #32]
 800eef2:	b90b      	cbnz	r3, 800eef8 <__swsetup_r+0x14>
 800eef4:	f7fc fdb8 	bl	800ba68 <__sinit>
 800eef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eefc:	0719      	lsls	r1, r3, #28
 800eefe:	d422      	bmi.n	800ef46 <__swsetup_r+0x62>
 800ef00:	06da      	lsls	r2, r3, #27
 800ef02:	d407      	bmi.n	800ef14 <__swsetup_r+0x30>
 800ef04:	2209      	movs	r2, #9
 800ef06:	602a      	str	r2, [r5, #0]
 800ef08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef0c:	81a3      	strh	r3, [r4, #12]
 800ef0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef12:	e033      	b.n	800ef7c <__swsetup_r+0x98>
 800ef14:	0758      	lsls	r0, r3, #29
 800ef16:	d512      	bpl.n	800ef3e <__swsetup_r+0x5a>
 800ef18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef1a:	b141      	cbz	r1, 800ef2e <__swsetup_r+0x4a>
 800ef1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef20:	4299      	cmp	r1, r3
 800ef22:	d002      	beq.n	800ef2a <__swsetup_r+0x46>
 800ef24:	4628      	mov	r0, r5
 800ef26:	f7fd fce9 	bl	800c8fc <_free_r>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef2e:	89a3      	ldrh	r3, [r4, #12]
 800ef30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef34:	81a3      	strh	r3, [r4, #12]
 800ef36:	2300      	movs	r3, #0
 800ef38:	6063      	str	r3, [r4, #4]
 800ef3a:	6923      	ldr	r3, [r4, #16]
 800ef3c:	6023      	str	r3, [r4, #0]
 800ef3e:	89a3      	ldrh	r3, [r4, #12]
 800ef40:	f043 0308 	orr.w	r3, r3, #8
 800ef44:	81a3      	strh	r3, [r4, #12]
 800ef46:	6923      	ldr	r3, [r4, #16]
 800ef48:	b94b      	cbnz	r3, 800ef5e <__swsetup_r+0x7a>
 800ef4a:	89a3      	ldrh	r3, [r4, #12]
 800ef4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef54:	d003      	beq.n	800ef5e <__swsetup_r+0x7a>
 800ef56:	4621      	mov	r1, r4
 800ef58:	4628      	mov	r0, r5
 800ef5a:	f000 fcbc 	bl	800f8d6 <__smakebuf_r>
 800ef5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef62:	f013 0201 	ands.w	r2, r3, #1
 800ef66:	d00a      	beq.n	800ef7e <__swsetup_r+0x9a>
 800ef68:	2200      	movs	r2, #0
 800ef6a:	60a2      	str	r2, [r4, #8]
 800ef6c:	6962      	ldr	r2, [r4, #20]
 800ef6e:	4252      	negs	r2, r2
 800ef70:	61a2      	str	r2, [r4, #24]
 800ef72:	6922      	ldr	r2, [r4, #16]
 800ef74:	b942      	cbnz	r2, 800ef88 <__swsetup_r+0xa4>
 800ef76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef7a:	d1c5      	bne.n	800ef08 <__swsetup_r+0x24>
 800ef7c:	bd38      	pop	{r3, r4, r5, pc}
 800ef7e:	0799      	lsls	r1, r3, #30
 800ef80:	bf58      	it	pl
 800ef82:	6962      	ldrpl	r2, [r4, #20]
 800ef84:	60a2      	str	r2, [r4, #8]
 800ef86:	e7f4      	b.n	800ef72 <__swsetup_r+0x8e>
 800ef88:	2000      	movs	r0, #0
 800ef8a:	e7f7      	b.n	800ef7c <__swsetup_r+0x98>
 800ef8c:	2400001c 	.word	0x2400001c

0800ef90 <memmove>:
 800ef90:	4288      	cmp	r0, r1
 800ef92:	b510      	push	{r4, lr}
 800ef94:	eb01 0402 	add.w	r4, r1, r2
 800ef98:	d902      	bls.n	800efa0 <memmove+0x10>
 800ef9a:	4284      	cmp	r4, r0
 800ef9c:	4623      	mov	r3, r4
 800ef9e:	d807      	bhi.n	800efb0 <memmove+0x20>
 800efa0:	1e43      	subs	r3, r0, #1
 800efa2:	42a1      	cmp	r1, r4
 800efa4:	d008      	beq.n	800efb8 <memmove+0x28>
 800efa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efae:	e7f8      	b.n	800efa2 <memmove+0x12>
 800efb0:	4402      	add	r2, r0
 800efb2:	4601      	mov	r1, r0
 800efb4:	428a      	cmp	r2, r1
 800efb6:	d100      	bne.n	800efba <memmove+0x2a>
 800efb8:	bd10      	pop	{r4, pc}
 800efba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efc2:	e7f7      	b.n	800efb4 <memmove+0x24>

0800efc4 <strncmp>:
 800efc4:	b510      	push	{r4, lr}
 800efc6:	b16a      	cbz	r2, 800efe4 <strncmp+0x20>
 800efc8:	3901      	subs	r1, #1
 800efca:	1884      	adds	r4, r0, r2
 800efcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d103      	bne.n	800efe0 <strncmp+0x1c>
 800efd8:	42a0      	cmp	r0, r4
 800efda:	d001      	beq.n	800efe0 <strncmp+0x1c>
 800efdc:	2a00      	cmp	r2, #0
 800efde:	d1f5      	bne.n	800efcc <strncmp+0x8>
 800efe0:	1ad0      	subs	r0, r2, r3
 800efe2:	bd10      	pop	{r4, pc}
 800efe4:	4610      	mov	r0, r2
 800efe6:	e7fc      	b.n	800efe2 <strncmp+0x1e>

0800efe8 <_sbrk_r>:
 800efe8:	b538      	push	{r3, r4, r5, lr}
 800efea:	4d06      	ldr	r5, [pc, #24]	@ (800f004 <_sbrk_r+0x1c>)
 800efec:	2300      	movs	r3, #0
 800efee:	4604      	mov	r4, r0
 800eff0:	4608      	mov	r0, r1
 800eff2:	602b      	str	r3, [r5, #0]
 800eff4:	f7f2 fa36 	bl	8001464 <_sbrk>
 800eff8:	1c43      	adds	r3, r0, #1
 800effa:	d102      	bne.n	800f002 <_sbrk_r+0x1a>
 800effc:	682b      	ldr	r3, [r5, #0]
 800effe:	b103      	cbz	r3, 800f002 <_sbrk_r+0x1a>
 800f000:	6023      	str	r3, [r4, #0]
 800f002:	bd38      	pop	{r3, r4, r5, pc}
 800f004:	24003614 	.word	0x24003614

0800f008 <memcpy>:
 800f008:	440a      	add	r2, r1
 800f00a:	4291      	cmp	r1, r2
 800f00c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f010:	d100      	bne.n	800f014 <memcpy+0xc>
 800f012:	4770      	bx	lr
 800f014:	b510      	push	{r4, lr}
 800f016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f01a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f01e:	4291      	cmp	r1, r2
 800f020:	d1f9      	bne.n	800f016 <memcpy+0xe>
 800f022:	bd10      	pop	{r4, pc}
 800f024:	0000      	movs	r0, r0
	...

0800f028 <nan>:
 800f028:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f030 <nan+0x8>
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop
 800f030:	00000000 	.word	0x00000000
 800f034:	7ff80000 	.word	0x7ff80000

0800f038 <__assert_func>:
 800f038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f03a:	4614      	mov	r4, r2
 800f03c:	461a      	mov	r2, r3
 800f03e:	4b09      	ldr	r3, [pc, #36]	@ (800f064 <__assert_func+0x2c>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4605      	mov	r5, r0
 800f044:	68d8      	ldr	r0, [r3, #12]
 800f046:	b14c      	cbz	r4, 800f05c <__assert_func+0x24>
 800f048:	4b07      	ldr	r3, [pc, #28]	@ (800f068 <__assert_func+0x30>)
 800f04a:	9100      	str	r1, [sp, #0]
 800f04c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f050:	4906      	ldr	r1, [pc, #24]	@ (800f06c <__assert_func+0x34>)
 800f052:	462b      	mov	r3, r5
 800f054:	f7fc fd20 	bl	800ba98 <fiprintf>
 800f058:	f000 fc9c 	bl	800f994 <abort>
 800f05c:	4b04      	ldr	r3, [pc, #16]	@ (800f070 <__assert_func+0x38>)
 800f05e:	461c      	mov	r4, r3
 800f060:	e7f3      	b.n	800f04a <__assert_func+0x12>
 800f062:	bf00      	nop
 800f064:	2400001c 	.word	0x2400001c
 800f068:	0800ff73 	.word	0x0800ff73
 800f06c:	0800ff80 	.word	0x0800ff80
 800f070:	0800ffae 	.word	0x0800ffae

0800f074 <_calloc_r>:
 800f074:	b570      	push	{r4, r5, r6, lr}
 800f076:	fba1 5402 	umull	r5, r4, r1, r2
 800f07a:	b934      	cbnz	r4, 800f08a <_calloc_r+0x16>
 800f07c:	4629      	mov	r1, r5
 800f07e:	f7fd fcb1 	bl	800c9e4 <_malloc_r>
 800f082:	4606      	mov	r6, r0
 800f084:	b928      	cbnz	r0, 800f092 <_calloc_r+0x1e>
 800f086:	4630      	mov	r0, r6
 800f088:	bd70      	pop	{r4, r5, r6, pc}
 800f08a:	220c      	movs	r2, #12
 800f08c:	6002      	str	r2, [r0, #0]
 800f08e:	2600      	movs	r6, #0
 800f090:	e7f9      	b.n	800f086 <_calloc_r+0x12>
 800f092:	462a      	mov	r2, r5
 800f094:	4621      	mov	r1, r4
 800f096:	f7fc fdc2 	bl	800bc1e <memset>
 800f09a:	e7f4      	b.n	800f086 <_calloc_r+0x12>

0800f09c <rshift>:
 800f09c:	6903      	ldr	r3, [r0, #16]
 800f09e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f0a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f0aa:	f100 0414 	add.w	r4, r0, #20
 800f0ae:	dd45      	ble.n	800f13c <rshift+0xa0>
 800f0b0:	f011 011f 	ands.w	r1, r1, #31
 800f0b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f0b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f0bc:	d10c      	bne.n	800f0d8 <rshift+0x3c>
 800f0be:	f100 0710 	add.w	r7, r0, #16
 800f0c2:	4629      	mov	r1, r5
 800f0c4:	42b1      	cmp	r1, r6
 800f0c6:	d334      	bcc.n	800f132 <rshift+0x96>
 800f0c8:	1a9b      	subs	r3, r3, r2
 800f0ca:	009b      	lsls	r3, r3, #2
 800f0cc:	1eea      	subs	r2, r5, #3
 800f0ce:	4296      	cmp	r6, r2
 800f0d0:	bf38      	it	cc
 800f0d2:	2300      	movcc	r3, #0
 800f0d4:	4423      	add	r3, r4
 800f0d6:	e015      	b.n	800f104 <rshift+0x68>
 800f0d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f0dc:	f1c1 0820 	rsb	r8, r1, #32
 800f0e0:	40cf      	lsrs	r7, r1
 800f0e2:	f105 0e04 	add.w	lr, r5, #4
 800f0e6:	46a1      	mov	r9, r4
 800f0e8:	4576      	cmp	r6, lr
 800f0ea:	46f4      	mov	ip, lr
 800f0ec:	d815      	bhi.n	800f11a <rshift+0x7e>
 800f0ee:	1a9a      	subs	r2, r3, r2
 800f0f0:	0092      	lsls	r2, r2, #2
 800f0f2:	3a04      	subs	r2, #4
 800f0f4:	3501      	adds	r5, #1
 800f0f6:	42ae      	cmp	r6, r5
 800f0f8:	bf38      	it	cc
 800f0fa:	2200      	movcc	r2, #0
 800f0fc:	18a3      	adds	r3, r4, r2
 800f0fe:	50a7      	str	r7, [r4, r2]
 800f100:	b107      	cbz	r7, 800f104 <rshift+0x68>
 800f102:	3304      	adds	r3, #4
 800f104:	1b1a      	subs	r2, r3, r4
 800f106:	42a3      	cmp	r3, r4
 800f108:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f10c:	bf08      	it	eq
 800f10e:	2300      	moveq	r3, #0
 800f110:	6102      	str	r2, [r0, #16]
 800f112:	bf08      	it	eq
 800f114:	6143      	streq	r3, [r0, #20]
 800f116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f11a:	f8dc c000 	ldr.w	ip, [ip]
 800f11e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f122:	ea4c 0707 	orr.w	r7, ip, r7
 800f126:	f849 7b04 	str.w	r7, [r9], #4
 800f12a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f12e:	40cf      	lsrs	r7, r1
 800f130:	e7da      	b.n	800f0e8 <rshift+0x4c>
 800f132:	f851 cb04 	ldr.w	ip, [r1], #4
 800f136:	f847 cf04 	str.w	ip, [r7, #4]!
 800f13a:	e7c3      	b.n	800f0c4 <rshift+0x28>
 800f13c:	4623      	mov	r3, r4
 800f13e:	e7e1      	b.n	800f104 <rshift+0x68>

0800f140 <__hexdig_fun>:
 800f140:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f144:	2b09      	cmp	r3, #9
 800f146:	d802      	bhi.n	800f14e <__hexdig_fun+0xe>
 800f148:	3820      	subs	r0, #32
 800f14a:	b2c0      	uxtb	r0, r0
 800f14c:	4770      	bx	lr
 800f14e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f152:	2b05      	cmp	r3, #5
 800f154:	d801      	bhi.n	800f15a <__hexdig_fun+0x1a>
 800f156:	3847      	subs	r0, #71	@ 0x47
 800f158:	e7f7      	b.n	800f14a <__hexdig_fun+0xa>
 800f15a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f15e:	2b05      	cmp	r3, #5
 800f160:	d801      	bhi.n	800f166 <__hexdig_fun+0x26>
 800f162:	3827      	subs	r0, #39	@ 0x27
 800f164:	e7f1      	b.n	800f14a <__hexdig_fun+0xa>
 800f166:	2000      	movs	r0, #0
 800f168:	4770      	bx	lr
	...

0800f16c <__gethex>:
 800f16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f170:	b085      	sub	sp, #20
 800f172:	468a      	mov	sl, r1
 800f174:	9302      	str	r3, [sp, #8]
 800f176:	680b      	ldr	r3, [r1, #0]
 800f178:	9001      	str	r0, [sp, #4]
 800f17a:	4690      	mov	r8, r2
 800f17c:	1c9c      	adds	r4, r3, #2
 800f17e:	46a1      	mov	r9, r4
 800f180:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f184:	2830      	cmp	r0, #48	@ 0x30
 800f186:	d0fa      	beq.n	800f17e <__gethex+0x12>
 800f188:	eba9 0303 	sub.w	r3, r9, r3
 800f18c:	f1a3 0b02 	sub.w	fp, r3, #2
 800f190:	f7ff ffd6 	bl	800f140 <__hexdig_fun>
 800f194:	4605      	mov	r5, r0
 800f196:	2800      	cmp	r0, #0
 800f198:	d168      	bne.n	800f26c <__gethex+0x100>
 800f19a:	49a0      	ldr	r1, [pc, #640]	@ (800f41c <__gethex+0x2b0>)
 800f19c:	2201      	movs	r2, #1
 800f19e:	4648      	mov	r0, r9
 800f1a0:	f7ff ff10 	bl	800efc4 <strncmp>
 800f1a4:	4607      	mov	r7, r0
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d167      	bne.n	800f27a <__gethex+0x10e>
 800f1aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f1ae:	4626      	mov	r6, r4
 800f1b0:	f7ff ffc6 	bl	800f140 <__hexdig_fun>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	d062      	beq.n	800f27e <__gethex+0x112>
 800f1b8:	4623      	mov	r3, r4
 800f1ba:	7818      	ldrb	r0, [r3, #0]
 800f1bc:	2830      	cmp	r0, #48	@ 0x30
 800f1be:	4699      	mov	r9, r3
 800f1c0:	f103 0301 	add.w	r3, r3, #1
 800f1c4:	d0f9      	beq.n	800f1ba <__gethex+0x4e>
 800f1c6:	f7ff ffbb 	bl	800f140 <__hexdig_fun>
 800f1ca:	fab0 f580 	clz	r5, r0
 800f1ce:	096d      	lsrs	r5, r5, #5
 800f1d0:	f04f 0b01 	mov.w	fp, #1
 800f1d4:	464a      	mov	r2, r9
 800f1d6:	4616      	mov	r6, r2
 800f1d8:	3201      	adds	r2, #1
 800f1da:	7830      	ldrb	r0, [r6, #0]
 800f1dc:	f7ff ffb0 	bl	800f140 <__hexdig_fun>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	d1f8      	bne.n	800f1d6 <__gethex+0x6a>
 800f1e4:	498d      	ldr	r1, [pc, #564]	@ (800f41c <__gethex+0x2b0>)
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	4630      	mov	r0, r6
 800f1ea:	f7ff feeb 	bl	800efc4 <strncmp>
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	d13f      	bne.n	800f272 <__gethex+0x106>
 800f1f2:	b944      	cbnz	r4, 800f206 <__gethex+0x9a>
 800f1f4:	1c74      	adds	r4, r6, #1
 800f1f6:	4622      	mov	r2, r4
 800f1f8:	4616      	mov	r6, r2
 800f1fa:	3201      	adds	r2, #1
 800f1fc:	7830      	ldrb	r0, [r6, #0]
 800f1fe:	f7ff ff9f 	bl	800f140 <__hexdig_fun>
 800f202:	2800      	cmp	r0, #0
 800f204:	d1f8      	bne.n	800f1f8 <__gethex+0x8c>
 800f206:	1ba4      	subs	r4, r4, r6
 800f208:	00a7      	lsls	r7, r4, #2
 800f20a:	7833      	ldrb	r3, [r6, #0]
 800f20c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f210:	2b50      	cmp	r3, #80	@ 0x50
 800f212:	d13e      	bne.n	800f292 <__gethex+0x126>
 800f214:	7873      	ldrb	r3, [r6, #1]
 800f216:	2b2b      	cmp	r3, #43	@ 0x2b
 800f218:	d033      	beq.n	800f282 <__gethex+0x116>
 800f21a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f21c:	d034      	beq.n	800f288 <__gethex+0x11c>
 800f21e:	1c71      	adds	r1, r6, #1
 800f220:	2400      	movs	r4, #0
 800f222:	7808      	ldrb	r0, [r1, #0]
 800f224:	f7ff ff8c 	bl	800f140 <__hexdig_fun>
 800f228:	1e43      	subs	r3, r0, #1
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	2b18      	cmp	r3, #24
 800f22e:	d830      	bhi.n	800f292 <__gethex+0x126>
 800f230:	f1a0 0210 	sub.w	r2, r0, #16
 800f234:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f238:	f7ff ff82 	bl	800f140 <__hexdig_fun>
 800f23c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800f240:	fa5f fc8c 	uxtb.w	ip, ip
 800f244:	f1bc 0f18 	cmp.w	ip, #24
 800f248:	f04f 030a 	mov.w	r3, #10
 800f24c:	d91e      	bls.n	800f28c <__gethex+0x120>
 800f24e:	b104      	cbz	r4, 800f252 <__gethex+0xe6>
 800f250:	4252      	negs	r2, r2
 800f252:	4417      	add	r7, r2
 800f254:	f8ca 1000 	str.w	r1, [sl]
 800f258:	b1ed      	cbz	r5, 800f296 <__gethex+0x12a>
 800f25a:	f1bb 0f00 	cmp.w	fp, #0
 800f25e:	bf0c      	ite	eq
 800f260:	2506      	moveq	r5, #6
 800f262:	2500      	movne	r5, #0
 800f264:	4628      	mov	r0, r5
 800f266:	b005      	add	sp, #20
 800f268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f26c:	2500      	movs	r5, #0
 800f26e:	462c      	mov	r4, r5
 800f270:	e7b0      	b.n	800f1d4 <__gethex+0x68>
 800f272:	2c00      	cmp	r4, #0
 800f274:	d1c7      	bne.n	800f206 <__gethex+0x9a>
 800f276:	4627      	mov	r7, r4
 800f278:	e7c7      	b.n	800f20a <__gethex+0x9e>
 800f27a:	464e      	mov	r6, r9
 800f27c:	462f      	mov	r7, r5
 800f27e:	2501      	movs	r5, #1
 800f280:	e7c3      	b.n	800f20a <__gethex+0x9e>
 800f282:	2400      	movs	r4, #0
 800f284:	1cb1      	adds	r1, r6, #2
 800f286:	e7cc      	b.n	800f222 <__gethex+0xb6>
 800f288:	2401      	movs	r4, #1
 800f28a:	e7fb      	b.n	800f284 <__gethex+0x118>
 800f28c:	fb03 0002 	mla	r0, r3, r2, r0
 800f290:	e7ce      	b.n	800f230 <__gethex+0xc4>
 800f292:	4631      	mov	r1, r6
 800f294:	e7de      	b.n	800f254 <__gethex+0xe8>
 800f296:	eba6 0309 	sub.w	r3, r6, r9
 800f29a:	3b01      	subs	r3, #1
 800f29c:	4629      	mov	r1, r5
 800f29e:	2b07      	cmp	r3, #7
 800f2a0:	dc0a      	bgt.n	800f2b8 <__gethex+0x14c>
 800f2a2:	9801      	ldr	r0, [sp, #4]
 800f2a4:	f7fd fc2a 	bl	800cafc <_Balloc>
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	b940      	cbnz	r0, 800f2be <__gethex+0x152>
 800f2ac:	4b5c      	ldr	r3, [pc, #368]	@ (800f420 <__gethex+0x2b4>)
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	21e4      	movs	r1, #228	@ 0xe4
 800f2b2:	485c      	ldr	r0, [pc, #368]	@ (800f424 <__gethex+0x2b8>)
 800f2b4:	f7ff fec0 	bl	800f038 <__assert_func>
 800f2b8:	3101      	adds	r1, #1
 800f2ba:	105b      	asrs	r3, r3, #1
 800f2bc:	e7ef      	b.n	800f29e <__gethex+0x132>
 800f2be:	f100 0a14 	add.w	sl, r0, #20
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	4655      	mov	r5, sl
 800f2c6:	469b      	mov	fp, r3
 800f2c8:	45b1      	cmp	r9, r6
 800f2ca:	d337      	bcc.n	800f33c <__gethex+0x1d0>
 800f2cc:	f845 bb04 	str.w	fp, [r5], #4
 800f2d0:	eba5 050a 	sub.w	r5, r5, sl
 800f2d4:	10ad      	asrs	r5, r5, #2
 800f2d6:	6125      	str	r5, [r4, #16]
 800f2d8:	4658      	mov	r0, fp
 800f2da:	f7fd fd01 	bl	800cce0 <__hi0bits>
 800f2de:	016d      	lsls	r5, r5, #5
 800f2e0:	f8d8 6000 	ldr.w	r6, [r8]
 800f2e4:	1a2d      	subs	r5, r5, r0
 800f2e6:	42b5      	cmp	r5, r6
 800f2e8:	dd54      	ble.n	800f394 <__gethex+0x228>
 800f2ea:	1bad      	subs	r5, r5, r6
 800f2ec:	4629      	mov	r1, r5
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	f7fe f88a 	bl	800d408 <__any_on>
 800f2f4:	4681      	mov	r9, r0
 800f2f6:	b178      	cbz	r0, 800f318 <__gethex+0x1ac>
 800f2f8:	1e6b      	subs	r3, r5, #1
 800f2fa:	1159      	asrs	r1, r3, #5
 800f2fc:	f003 021f 	and.w	r2, r3, #31
 800f300:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f304:	f04f 0901 	mov.w	r9, #1
 800f308:	fa09 f202 	lsl.w	r2, r9, r2
 800f30c:	420a      	tst	r2, r1
 800f30e:	d003      	beq.n	800f318 <__gethex+0x1ac>
 800f310:	454b      	cmp	r3, r9
 800f312:	dc36      	bgt.n	800f382 <__gethex+0x216>
 800f314:	f04f 0902 	mov.w	r9, #2
 800f318:	4629      	mov	r1, r5
 800f31a:	4620      	mov	r0, r4
 800f31c:	f7ff febe 	bl	800f09c <rshift>
 800f320:	442f      	add	r7, r5
 800f322:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f326:	42bb      	cmp	r3, r7
 800f328:	da42      	bge.n	800f3b0 <__gethex+0x244>
 800f32a:	9801      	ldr	r0, [sp, #4]
 800f32c:	4621      	mov	r1, r4
 800f32e:	f7fd fc25 	bl	800cb7c <_Bfree>
 800f332:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f334:	2300      	movs	r3, #0
 800f336:	6013      	str	r3, [r2, #0]
 800f338:	25a3      	movs	r5, #163	@ 0xa3
 800f33a:	e793      	b.n	800f264 <__gethex+0xf8>
 800f33c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f340:	2a2e      	cmp	r2, #46	@ 0x2e
 800f342:	d012      	beq.n	800f36a <__gethex+0x1fe>
 800f344:	2b20      	cmp	r3, #32
 800f346:	d104      	bne.n	800f352 <__gethex+0x1e6>
 800f348:	f845 bb04 	str.w	fp, [r5], #4
 800f34c:	f04f 0b00 	mov.w	fp, #0
 800f350:	465b      	mov	r3, fp
 800f352:	7830      	ldrb	r0, [r6, #0]
 800f354:	9303      	str	r3, [sp, #12]
 800f356:	f7ff fef3 	bl	800f140 <__hexdig_fun>
 800f35a:	9b03      	ldr	r3, [sp, #12]
 800f35c:	f000 000f 	and.w	r0, r0, #15
 800f360:	4098      	lsls	r0, r3
 800f362:	ea4b 0b00 	orr.w	fp, fp, r0
 800f366:	3304      	adds	r3, #4
 800f368:	e7ae      	b.n	800f2c8 <__gethex+0x15c>
 800f36a:	45b1      	cmp	r9, r6
 800f36c:	d8ea      	bhi.n	800f344 <__gethex+0x1d8>
 800f36e:	492b      	ldr	r1, [pc, #172]	@ (800f41c <__gethex+0x2b0>)
 800f370:	9303      	str	r3, [sp, #12]
 800f372:	2201      	movs	r2, #1
 800f374:	4630      	mov	r0, r6
 800f376:	f7ff fe25 	bl	800efc4 <strncmp>
 800f37a:	9b03      	ldr	r3, [sp, #12]
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d1e1      	bne.n	800f344 <__gethex+0x1d8>
 800f380:	e7a2      	b.n	800f2c8 <__gethex+0x15c>
 800f382:	1ea9      	subs	r1, r5, #2
 800f384:	4620      	mov	r0, r4
 800f386:	f7fe f83f 	bl	800d408 <__any_on>
 800f38a:	2800      	cmp	r0, #0
 800f38c:	d0c2      	beq.n	800f314 <__gethex+0x1a8>
 800f38e:	f04f 0903 	mov.w	r9, #3
 800f392:	e7c1      	b.n	800f318 <__gethex+0x1ac>
 800f394:	da09      	bge.n	800f3aa <__gethex+0x23e>
 800f396:	1b75      	subs	r5, r6, r5
 800f398:	4621      	mov	r1, r4
 800f39a:	9801      	ldr	r0, [sp, #4]
 800f39c:	462a      	mov	r2, r5
 800f39e:	f7fd fdfd 	bl	800cf9c <__lshift>
 800f3a2:	1b7f      	subs	r7, r7, r5
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	f100 0a14 	add.w	sl, r0, #20
 800f3aa:	f04f 0900 	mov.w	r9, #0
 800f3ae:	e7b8      	b.n	800f322 <__gethex+0x1b6>
 800f3b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f3b4:	42bd      	cmp	r5, r7
 800f3b6:	dd6f      	ble.n	800f498 <__gethex+0x32c>
 800f3b8:	1bed      	subs	r5, r5, r7
 800f3ba:	42ae      	cmp	r6, r5
 800f3bc:	dc34      	bgt.n	800f428 <__gethex+0x2bc>
 800f3be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3c2:	2b02      	cmp	r3, #2
 800f3c4:	d022      	beq.n	800f40c <__gethex+0x2a0>
 800f3c6:	2b03      	cmp	r3, #3
 800f3c8:	d024      	beq.n	800f414 <__gethex+0x2a8>
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	d115      	bne.n	800f3fa <__gethex+0x28e>
 800f3ce:	42ae      	cmp	r6, r5
 800f3d0:	d113      	bne.n	800f3fa <__gethex+0x28e>
 800f3d2:	2e01      	cmp	r6, #1
 800f3d4:	d10b      	bne.n	800f3ee <__gethex+0x282>
 800f3d6:	9a02      	ldr	r2, [sp, #8]
 800f3d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f3dc:	6013      	str	r3, [r2, #0]
 800f3de:	2301      	movs	r3, #1
 800f3e0:	6123      	str	r3, [r4, #16]
 800f3e2:	f8ca 3000 	str.w	r3, [sl]
 800f3e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3e8:	2562      	movs	r5, #98	@ 0x62
 800f3ea:	601c      	str	r4, [r3, #0]
 800f3ec:	e73a      	b.n	800f264 <__gethex+0xf8>
 800f3ee:	1e71      	subs	r1, r6, #1
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	f7fe f809 	bl	800d408 <__any_on>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	d1ed      	bne.n	800f3d6 <__gethex+0x26a>
 800f3fa:	9801      	ldr	r0, [sp, #4]
 800f3fc:	4621      	mov	r1, r4
 800f3fe:	f7fd fbbd 	bl	800cb7c <_Bfree>
 800f402:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f404:	2300      	movs	r3, #0
 800f406:	6013      	str	r3, [r2, #0]
 800f408:	2550      	movs	r5, #80	@ 0x50
 800f40a:	e72b      	b.n	800f264 <__gethex+0xf8>
 800f40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d1f3      	bne.n	800f3fa <__gethex+0x28e>
 800f412:	e7e0      	b.n	800f3d6 <__gethex+0x26a>
 800f414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f416:	2b00      	cmp	r3, #0
 800f418:	d1dd      	bne.n	800f3d6 <__gethex+0x26a>
 800f41a:	e7ee      	b.n	800f3fa <__gethex+0x28e>
 800f41c:	0800ff3d 	.word	0x0800ff3d
 800f420:	0800fed3 	.word	0x0800fed3
 800f424:	0800ffaf 	.word	0x0800ffaf
 800f428:	1e6f      	subs	r7, r5, #1
 800f42a:	f1b9 0f00 	cmp.w	r9, #0
 800f42e:	d130      	bne.n	800f492 <__gethex+0x326>
 800f430:	b127      	cbz	r7, 800f43c <__gethex+0x2d0>
 800f432:	4639      	mov	r1, r7
 800f434:	4620      	mov	r0, r4
 800f436:	f7fd ffe7 	bl	800d408 <__any_on>
 800f43a:	4681      	mov	r9, r0
 800f43c:	117a      	asrs	r2, r7, #5
 800f43e:	2301      	movs	r3, #1
 800f440:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f444:	f007 071f 	and.w	r7, r7, #31
 800f448:	40bb      	lsls	r3, r7
 800f44a:	4213      	tst	r3, r2
 800f44c:	4629      	mov	r1, r5
 800f44e:	4620      	mov	r0, r4
 800f450:	bf18      	it	ne
 800f452:	f049 0902 	orrne.w	r9, r9, #2
 800f456:	f7ff fe21 	bl	800f09c <rshift>
 800f45a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f45e:	1b76      	subs	r6, r6, r5
 800f460:	2502      	movs	r5, #2
 800f462:	f1b9 0f00 	cmp.w	r9, #0
 800f466:	d047      	beq.n	800f4f8 <__gethex+0x38c>
 800f468:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f46c:	2b02      	cmp	r3, #2
 800f46e:	d015      	beq.n	800f49c <__gethex+0x330>
 800f470:	2b03      	cmp	r3, #3
 800f472:	d017      	beq.n	800f4a4 <__gethex+0x338>
 800f474:	2b01      	cmp	r3, #1
 800f476:	d109      	bne.n	800f48c <__gethex+0x320>
 800f478:	f019 0f02 	tst.w	r9, #2
 800f47c:	d006      	beq.n	800f48c <__gethex+0x320>
 800f47e:	f8da 3000 	ldr.w	r3, [sl]
 800f482:	ea49 0903 	orr.w	r9, r9, r3
 800f486:	f019 0f01 	tst.w	r9, #1
 800f48a:	d10e      	bne.n	800f4aa <__gethex+0x33e>
 800f48c:	f045 0510 	orr.w	r5, r5, #16
 800f490:	e032      	b.n	800f4f8 <__gethex+0x38c>
 800f492:	f04f 0901 	mov.w	r9, #1
 800f496:	e7d1      	b.n	800f43c <__gethex+0x2d0>
 800f498:	2501      	movs	r5, #1
 800f49a:	e7e2      	b.n	800f462 <__gethex+0x2f6>
 800f49c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f49e:	f1c3 0301 	rsb	r3, r3, #1
 800f4a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d0f0      	beq.n	800f48c <__gethex+0x320>
 800f4aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f4ae:	f104 0314 	add.w	r3, r4, #20
 800f4b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f4b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f4ba:	f04f 0c00 	mov.w	ip, #0
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4c4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800f4c8:	d01b      	beq.n	800f502 <__gethex+0x396>
 800f4ca:	3201      	adds	r2, #1
 800f4cc:	6002      	str	r2, [r0, #0]
 800f4ce:	2d02      	cmp	r5, #2
 800f4d0:	f104 0314 	add.w	r3, r4, #20
 800f4d4:	d13c      	bne.n	800f550 <__gethex+0x3e4>
 800f4d6:	f8d8 2000 	ldr.w	r2, [r8]
 800f4da:	3a01      	subs	r2, #1
 800f4dc:	42b2      	cmp	r2, r6
 800f4de:	d109      	bne.n	800f4f4 <__gethex+0x388>
 800f4e0:	1171      	asrs	r1, r6, #5
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f4e8:	f006 061f 	and.w	r6, r6, #31
 800f4ec:	fa02 f606 	lsl.w	r6, r2, r6
 800f4f0:	421e      	tst	r6, r3
 800f4f2:	d13a      	bne.n	800f56a <__gethex+0x3fe>
 800f4f4:	f045 0520 	orr.w	r5, r5, #32
 800f4f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4fa:	601c      	str	r4, [r3, #0]
 800f4fc:	9b02      	ldr	r3, [sp, #8]
 800f4fe:	601f      	str	r7, [r3, #0]
 800f500:	e6b0      	b.n	800f264 <__gethex+0xf8>
 800f502:	4299      	cmp	r1, r3
 800f504:	f843 cc04 	str.w	ip, [r3, #-4]
 800f508:	d8d9      	bhi.n	800f4be <__gethex+0x352>
 800f50a:	68a3      	ldr	r3, [r4, #8]
 800f50c:	459b      	cmp	fp, r3
 800f50e:	db17      	blt.n	800f540 <__gethex+0x3d4>
 800f510:	6861      	ldr	r1, [r4, #4]
 800f512:	9801      	ldr	r0, [sp, #4]
 800f514:	3101      	adds	r1, #1
 800f516:	f7fd faf1 	bl	800cafc <_Balloc>
 800f51a:	4681      	mov	r9, r0
 800f51c:	b918      	cbnz	r0, 800f526 <__gethex+0x3ba>
 800f51e:	4b1a      	ldr	r3, [pc, #104]	@ (800f588 <__gethex+0x41c>)
 800f520:	4602      	mov	r2, r0
 800f522:	2184      	movs	r1, #132	@ 0x84
 800f524:	e6c5      	b.n	800f2b2 <__gethex+0x146>
 800f526:	6922      	ldr	r2, [r4, #16]
 800f528:	3202      	adds	r2, #2
 800f52a:	f104 010c 	add.w	r1, r4, #12
 800f52e:	0092      	lsls	r2, r2, #2
 800f530:	300c      	adds	r0, #12
 800f532:	f7ff fd69 	bl	800f008 <memcpy>
 800f536:	4621      	mov	r1, r4
 800f538:	9801      	ldr	r0, [sp, #4]
 800f53a:	f7fd fb1f 	bl	800cb7c <_Bfree>
 800f53e:	464c      	mov	r4, r9
 800f540:	6923      	ldr	r3, [r4, #16]
 800f542:	1c5a      	adds	r2, r3, #1
 800f544:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f548:	6122      	str	r2, [r4, #16]
 800f54a:	2201      	movs	r2, #1
 800f54c:	615a      	str	r2, [r3, #20]
 800f54e:	e7be      	b.n	800f4ce <__gethex+0x362>
 800f550:	6922      	ldr	r2, [r4, #16]
 800f552:	455a      	cmp	r2, fp
 800f554:	dd0b      	ble.n	800f56e <__gethex+0x402>
 800f556:	2101      	movs	r1, #1
 800f558:	4620      	mov	r0, r4
 800f55a:	f7ff fd9f 	bl	800f09c <rshift>
 800f55e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f562:	3701      	adds	r7, #1
 800f564:	42bb      	cmp	r3, r7
 800f566:	f6ff aee0 	blt.w	800f32a <__gethex+0x1be>
 800f56a:	2501      	movs	r5, #1
 800f56c:	e7c2      	b.n	800f4f4 <__gethex+0x388>
 800f56e:	f016 061f 	ands.w	r6, r6, #31
 800f572:	d0fa      	beq.n	800f56a <__gethex+0x3fe>
 800f574:	4453      	add	r3, sl
 800f576:	f1c6 0620 	rsb	r6, r6, #32
 800f57a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f57e:	f7fd fbaf 	bl	800cce0 <__hi0bits>
 800f582:	42b0      	cmp	r0, r6
 800f584:	dbe7      	blt.n	800f556 <__gethex+0x3ea>
 800f586:	e7f0      	b.n	800f56a <__gethex+0x3fe>
 800f588:	0800fed3 	.word	0x0800fed3

0800f58c <L_shift>:
 800f58c:	f1c2 0208 	rsb	r2, r2, #8
 800f590:	0092      	lsls	r2, r2, #2
 800f592:	b570      	push	{r4, r5, r6, lr}
 800f594:	f1c2 0620 	rsb	r6, r2, #32
 800f598:	6843      	ldr	r3, [r0, #4]
 800f59a:	6804      	ldr	r4, [r0, #0]
 800f59c:	fa03 f506 	lsl.w	r5, r3, r6
 800f5a0:	432c      	orrs	r4, r5
 800f5a2:	40d3      	lsrs	r3, r2
 800f5a4:	6004      	str	r4, [r0, #0]
 800f5a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f5aa:	4288      	cmp	r0, r1
 800f5ac:	d3f4      	bcc.n	800f598 <L_shift+0xc>
 800f5ae:	bd70      	pop	{r4, r5, r6, pc}

0800f5b0 <__match>:
 800f5b0:	b530      	push	{r4, r5, lr}
 800f5b2:	6803      	ldr	r3, [r0, #0]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5ba:	b914      	cbnz	r4, 800f5c2 <__match+0x12>
 800f5bc:	6003      	str	r3, [r0, #0]
 800f5be:	2001      	movs	r0, #1
 800f5c0:	bd30      	pop	{r4, r5, pc}
 800f5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f5ca:	2d19      	cmp	r5, #25
 800f5cc:	bf98      	it	ls
 800f5ce:	3220      	addls	r2, #32
 800f5d0:	42a2      	cmp	r2, r4
 800f5d2:	d0f0      	beq.n	800f5b6 <__match+0x6>
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	e7f3      	b.n	800f5c0 <__match+0x10>

0800f5d8 <__hexnan>:
 800f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5dc:	680b      	ldr	r3, [r1, #0]
 800f5de:	6801      	ldr	r1, [r0, #0]
 800f5e0:	115e      	asrs	r6, r3, #5
 800f5e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f5e6:	f013 031f 	ands.w	r3, r3, #31
 800f5ea:	b087      	sub	sp, #28
 800f5ec:	bf18      	it	ne
 800f5ee:	3604      	addne	r6, #4
 800f5f0:	2500      	movs	r5, #0
 800f5f2:	1f37      	subs	r7, r6, #4
 800f5f4:	4682      	mov	sl, r0
 800f5f6:	4690      	mov	r8, r2
 800f5f8:	9301      	str	r3, [sp, #4]
 800f5fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800f5fe:	46b9      	mov	r9, r7
 800f600:	463c      	mov	r4, r7
 800f602:	9502      	str	r5, [sp, #8]
 800f604:	46ab      	mov	fp, r5
 800f606:	784a      	ldrb	r2, [r1, #1]
 800f608:	1c4b      	adds	r3, r1, #1
 800f60a:	9303      	str	r3, [sp, #12]
 800f60c:	b342      	cbz	r2, 800f660 <__hexnan+0x88>
 800f60e:	4610      	mov	r0, r2
 800f610:	9105      	str	r1, [sp, #20]
 800f612:	9204      	str	r2, [sp, #16]
 800f614:	f7ff fd94 	bl	800f140 <__hexdig_fun>
 800f618:	2800      	cmp	r0, #0
 800f61a:	d151      	bne.n	800f6c0 <__hexnan+0xe8>
 800f61c:	9a04      	ldr	r2, [sp, #16]
 800f61e:	9905      	ldr	r1, [sp, #20]
 800f620:	2a20      	cmp	r2, #32
 800f622:	d818      	bhi.n	800f656 <__hexnan+0x7e>
 800f624:	9b02      	ldr	r3, [sp, #8]
 800f626:	459b      	cmp	fp, r3
 800f628:	dd13      	ble.n	800f652 <__hexnan+0x7a>
 800f62a:	454c      	cmp	r4, r9
 800f62c:	d206      	bcs.n	800f63c <__hexnan+0x64>
 800f62e:	2d07      	cmp	r5, #7
 800f630:	dc04      	bgt.n	800f63c <__hexnan+0x64>
 800f632:	462a      	mov	r2, r5
 800f634:	4649      	mov	r1, r9
 800f636:	4620      	mov	r0, r4
 800f638:	f7ff ffa8 	bl	800f58c <L_shift>
 800f63c:	4544      	cmp	r4, r8
 800f63e:	d952      	bls.n	800f6e6 <__hexnan+0x10e>
 800f640:	2300      	movs	r3, #0
 800f642:	f1a4 0904 	sub.w	r9, r4, #4
 800f646:	f844 3c04 	str.w	r3, [r4, #-4]
 800f64a:	f8cd b008 	str.w	fp, [sp, #8]
 800f64e:	464c      	mov	r4, r9
 800f650:	461d      	mov	r5, r3
 800f652:	9903      	ldr	r1, [sp, #12]
 800f654:	e7d7      	b.n	800f606 <__hexnan+0x2e>
 800f656:	2a29      	cmp	r2, #41	@ 0x29
 800f658:	d157      	bne.n	800f70a <__hexnan+0x132>
 800f65a:	3102      	adds	r1, #2
 800f65c:	f8ca 1000 	str.w	r1, [sl]
 800f660:	f1bb 0f00 	cmp.w	fp, #0
 800f664:	d051      	beq.n	800f70a <__hexnan+0x132>
 800f666:	454c      	cmp	r4, r9
 800f668:	d206      	bcs.n	800f678 <__hexnan+0xa0>
 800f66a:	2d07      	cmp	r5, #7
 800f66c:	dc04      	bgt.n	800f678 <__hexnan+0xa0>
 800f66e:	462a      	mov	r2, r5
 800f670:	4649      	mov	r1, r9
 800f672:	4620      	mov	r0, r4
 800f674:	f7ff ff8a 	bl	800f58c <L_shift>
 800f678:	4544      	cmp	r4, r8
 800f67a:	d936      	bls.n	800f6ea <__hexnan+0x112>
 800f67c:	f1a8 0204 	sub.w	r2, r8, #4
 800f680:	4623      	mov	r3, r4
 800f682:	f853 1b04 	ldr.w	r1, [r3], #4
 800f686:	f842 1f04 	str.w	r1, [r2, #4]!
 800f68a:	429f      	cmp	r7, r3
 800f68c:	d2f9      	bcs.n	800f682 <__hexnan+0xaa>
 800f68e:	1b3b      	subs	r3, r7, r4
 800f690:	f023 0303 	bic.w	r3, r3, #3
 800f694:	3304      	adds	r3, #4
 800f696:	3401      	adds	r4, #1
 800f698:	3e03      	subs	r6, #3
 800f69a:	42b4      	cmp	r4, r6
 800f69c:	bf88      	it	hi
 800f69e:	2304      	movhi	r3, #4
 800f6a0:	4443      	add	r3, r8
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f843 2b04 	str.w	r2, [r3], #4
 800f6a8:	429f      	cmp	r7, r3
 800f6aa:	d2fb      	bcs.n	800f6a4 <__hexnan+0xcc>
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	b91b      	cbnz	r3, 800f6b8 <__hexnan+0xe0>
 800f6b0:	4547      	cmp	r7, r8
 800f6b2:	d128      	bne.n	800f706 <__hexnan+0x12e>
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	603b      	str	r3, [r7, #0]
 800f6b8:	2005      	movs	r0, #5
 800f6ba:	b007      	add	sp, #28
 800f6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c0:	3501      	adds	r5, #1
 800f6c2:	2d08      	cmp	r5, #8
 800f6c4:	f10b 0b01 	add.w	fp, fp, #1
 800f6c8:	dd06      	ble.n	800f6d8 <__hexnan+0x100>
 800f6ca:	4544      	cmp	r4, r8
 800f6cc:	d9c1      	bls.n	800f652 <__hexnan+0x7a>
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f6d4:	2501      	movs	r5, #1
 800f6d6:	3c04      	subs	r4, #4
 800f6d8:	6822      	ldr	r2, [r4, #0]
 800f6da:	f000 000f 	and.w	r0, r0, #15
 800f6de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f6e2:	6020      	str	r0, [r4, #0]
 800f6e4:	e7b5      	b.n	800f652 <__hexnan+0x7a>
 800f6e6:	2508      	movs	r5, #8
 800f6e8:	e7b3      	b.n	800f652 <__hexnan+0x7a>
 800f6ea:	9b01      	ldr	r3, [sp, #4]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d0dd      	beq.n	800f6ac <__hexnan+0xd4>
 800f6f0:	f1c3 0320 	rsb	r3, r3, #32
 800f6f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f6f8:	40da      	lsrs	r2, r3
 800f6fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f6fe:	4013      	ands	r3, r2
 800f700:	f846 3c04 	str.w	r3, [r6, #-4]
 800f704:	e7d2      	b.n	800f6ac <__hexnan+0xd4>
 800f706:	3f04      	subs	r7, #4
 800f708:	e7d0      	b.n	800f6ac <__hexnan+0xd4>
 800f70a:	2004      	movs	r0, #4
 800f70c:	e7d5      	b.n	800f6ba <__hexnan+0xe2>

0800f70e <__ascii_mbtowc>:
 800f70e:	b082      	sub	sp, #8
 800f710:	b901      	cbnz	r1, 800f714 <__ascii_mbtowc+0x6>
 800f712:	a901      	add	r1, sp, #4
 800f714:	b142      	cbz	r2, 800f728 <__ascii_mbtowc+0x1a>
 800f716:	b14b      	cbz	r3, 800f72c <__ascii_mbtowc+0x1e>
 800f718:	7813      	ldrb	r3, [r2, #0]
 800f71a:	600b      	str	r3, [r1, #0]
 800f71c:	7812      	ldrb	r2, [r2, #0]
 800f71e:	1e10      	subs	r0, r2, #0
 800f720:	bf18      	it	ne
 800f722:	2001      	movne	r0, #1
 800f724:	b002      	add	sp, #8
 800f726:	4770      	bx	lr
 800f728:	4610      	mov	r0, r2
 800f72a:	e7fb      	b.n	800f724 <__ascii_mbtowc+0x16>
 800f72c:	f06f 0001 	mvn.w	r0, #1
 800f730:	e7f8      	b.n	800f724 <__ascii_mbtowc+0x16>

0800f732 <_realloc_r>:
 800f732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f736:	4607      	mov	r7, r0
 800f738:	4614      	mov	r4, r2
 800f73a:	460d      	mov	r5, r1
 800f73c:	b921      	cbnz	r1, 800f748 <_realloc_r+0x16>
 800f73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f742:	4611      	mov	r1, r2
 800f744:	f7fd b94e 	b.w	800c9e4 <_malloc_r>
 800f748:	b92a      	cbnz	r2, 800f756 <_realloc_r+0x24>
 800f74a:	f7fd f8d7 	bl	800c8fc <_free_r>
 800f74e:	4625      	mov	r5, r4
 800f750:	4628      	mov	r0, r5
 800f752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f756:	f000 f924 	bl	800f9a2 <_malloc_usable_size_r>
 800f75a:	4284      	cmp	r4, r0
 800f75c:	4606      	mov	r6, r0
 800f75e:	d802      	bhi.n	800f766 <_realloc_r+0x34>
 800f760:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f764:	d8f4      	bhi.n	800f750 <_realloc_r+0x1e>
 800f766:	4621      	mov	r1, r4
 800f768:	4638      	mov	r0, r7
 800f76a:	f7fd f93b 	bl	800c9e4 <_malloc_r>
 800f76e:	4680      	mov	r8, r0
 800f770:	b908      	cbnz	r0, 800f776 <_realloc_r+0x44>
 800f772:	4645      	mov	r5, r8
 800f774:	e7ec      	b.n	800f750 <_realloc_r+0x1e>
 800f776:	42b4      	cmp	r4, r6
 800f778:	4622      	mov	r2, r4
 800f77a:	4629      	mov	r1, r5
 800f77c:	bf28      	it	cs
 800f77e:	4632      	movcs	r2, r6
 800f780:	f7ff fc42 	bl	800f008 <memcpy>
 800f784:	4629      	mov	r1, r5
 800f786:	4638      	mov	r0, r7
 800f788:	f7fd f8b8 	bl	800c8fc <_free_r>
 800f78c:	e7f1      	b.n	800f772 <_realloc_r+0x40>
	...

0800f790 <_strtoul_l.isra.0>:
 800f790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f794:	4e34      	ldr	r6, [pc, #208]	@ (800f868 <_strtoul_l.isra.0+0xd8>)
 800f796:	4686      	mov	lr, r0
 800f798:	460d      	mov	r5, r1
 800f79a:	4628      	mov	r0, r5
 800f79c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f7a0:	5d37      	ldrb	r7, [r6, r4]
 800f7a2:	f017 0708 	ands.w	r7, r7, #8
 800f7a6:	d1f8      	bne.n	800f79a <_strtoul_l.isra.0+0xa>
 800f7a8:	2c2d      	cmp	r4, #45	@ 0x2d
 800f7aa:	d110      	bne.n	800f7ce <_strtoul_l.isra.0+0x3e>
 800f7ac:	782c      	ldrb	r4, [r5, #0]
 800f7ae:	2701      	movs	r7, #1
 800f7b0:	1c85      	adds	r5, r0, #2
 800f7b2:	f033 0010 	bics.w	r0, r3, #16
 800f7b6:	d115      	bne.n	800f7e4 <_strtoul_l.isra.0+0x54>
 800f7b8:	2c30      	cmp	r4, #48	@ 0x30
 800f7ba:	d10d      	bne.n	800f7d8 <_strtoul_l.isra.0+0x48>
 800f7bc:	7828      	ldrb	r0, [r5, #0]
 800f7be:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f7c2:	2858      	cmp	r0, #88	@ 0x58
 800f7c4:	d108      	bne.n	800f7d8 <_strtoul_l.isra.0+0x48>
 800f7c6:	786c      	ldrb	r4, [r5, #1]
 800f7c8:	3502      	adds	r5, #2
 800f7ca:	2310      	movs	r3, #16
 800f7cc:	e00a      	b.n	800f7e4 <_strtoul_l.isra.0+0x54>
 800f7ce:	2c2b      	cmp	r4, #43	@ 0x2b
 800f7d0:	bf04      	itt	eq
 800f7d2:	782c      	ldrbeq	r4, [r5, #0]
 800f7d4:	1c85      	addeq	r5, r0, #2
 800f7d6:	e7ec      	b.n	800f7b2 <_strtoul_l.isra.0+0x22>
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d1f6      	bne.n	800f7ca <_strtoul_l.isra.0+0x3a>
 800f7dc:	2c30      	cmp	r4, #48	@ 0x30
 800f7de:	bf14      	ite	ne
 800f7e0:	230a      	movne	r3, #10
 800f7e2:	2308      	moveq	r3, #8
 800f7e4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800f7e8:	2600      	movs	r6, #0
 800f7ea:	fbb8 f8f3 	udiv	r8, r8, r3
 800f7ee:	fb03 f908 	mul.w	r9, r3, r8
 800f7f2:	ea6f 0909 	mvn.w	r9, r9
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f7fc:	f1bc 0f09 	cmp.w	ip, #9
 800f800:	d810      	bhi.n	800f824 <_strtoul_l.isra.0+0x94>
 800f802:	4664      	mov	r4, ip
 800f804:	42a3      	cmp	r3, r4
 800f806:	dd1e      	ble.n	800f846 <_strtoul_l.isra.0+0xb6>
 800f808:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800f80c:	d007      	beq.n	800f81e <_strtoul_l.isra.0+0x8e>
 800f80e:	4580      	cmp	r8, r0
 800f810:	d316      	bcc.n	800f840 <_strtoul_l.isra.0+0xb0>
 800f812:	d101      	bne.n	800f818 <_strtoul_l.isra.0+0x88>
 800f814:	45a1      	cmp	r9, r4
 800f816:	db13      	blt.n	800f840 <_strtoul_l.isra.0+0xb0>
 800f818:	fb00 4003 	mla	r0, r0, r3, r4
 800f81c:	2601      	movs	r6, #1
 800f81e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f822:	e7e9      	b.n	800f7f8 <_strtoul_l.isra.0+0x68>
 800f824:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f828:	f1bc 0f19 	cmp.w	ip, #25
 800f82c:	d801      	bhi.n	800f832 <_strtoul_l.isra.0+0xa2>
 800f82e:	3c37      	subs	r4, #55	@ 0x37
 800f830:	e7e8      	b.n	800f804 <_strtoul_l.isra.0+0x74>
 800f832:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f836:	f1bc 0f19 	cmp.w	ip, #25
 800f83a:	d804      	bhi.n	800f846 <_strtoul_l.isra.0+0xb6>
 800f83c:	3c57      	subs	r4, #87	@ 0x57
 800f83e:	e7e1      	b.n	800f804 <_strtoul_l.isra.0+0x74>
 800f840:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800f844:	e7eb      	b.n	800f81e <_strtoul_l.isra.0+0x8e>
 800f846:	1c73      	adds	r3, r6, #1
 800f848:	d106      	bne.n	800f858 <_strtoul_l.isra.0+0xc8>
 800f84a:	2322      	movs	r3, #34	@ 0x22
 800f84c:	f8ce 3000 	str.w	r3, [lr]
 800f850:	4630      	mov	r0, r6
 800f852:	b932      	cbnz	r2, 800f862 <_strtoul_l.isra.0+0xd2>
 800f854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f858:	b107      	cbz	r7, 800f85c <_strtoul_l.isra.0+0xcc>
 800f85a:	4240      	negs	r0, r0
 800f85c:	2a00      	cmp	r2, #0
 800f85e:	d0f9      	beq.n	800f854 <_strtoul_l.isra.0+0xc4>
 800f860:	b106      	cbz	r6, 800f864 <_strtoul_l.isra.0+0xd4>
 800f862:	1e69      	subs	r1, r5, #1
 800f864:	6011      	str	r1, [r2, #0]
 800f866:	e7f5      	b.n	800f854 <_strtoul_l.isra.0+0xc4>
 800f868:	08010161 	.word	0x08010161

0800f86c <_strtoul_r>:
 800f86c:	f7ff bf90 	b.w	800f790 <_strtoul_l.isra.0>

0800f870 <__ascii_wctomb>:
 800f870:	4603      	mov	r3, r0
 800f872:	4608      	mov	r0, r1
 800f874:	b141      	cbz	r1, 800f888 <__ascii_wctomb+0x18>
 800f876:	2aff      	cmp	r2, #255	@ 0xff
 800f878:	d904      	bls.n	800f884 <__ascii_wctomb+0x14>
 800f87a:	228a      	movs	r2, #138	@ 0x8a
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f882:	4770      	bx	lr
 800f884:	700a      	strb	r2, [r1, #0]
 800f886:	2001      	movs	r0, #1
 800f888:	4770      	bx	lr

0800f88a <__swhatbuf_r>:
 800f88a:	b570      	push	{r4, r5, r6, lr}
 800f88c:	460c      	mov	r4, r1
 800f88e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f892:	2900      	cmp	r1, #0
 800f894:	b096      	sub	sp, #88	@ 0x58
 800f896:	4615      	mov	r5, r2
 800f898:	461e      	mov	r6, r3
 800f89a:	da0d      	bge.n	800f8b8 <__swhatbuf_r+0x2e>
 800f89c:	89a3      	ldrh	r3, [r4, #12]
 800f89e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f8a2:	f04f 0100 	mov.w	r1, #0
 800f8a6:	bf14      	ite	ne
 800f8a8:	2340      	movne	r3, #64	@ 0x40
 800f8aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f8ae:	2000      	movs	r0, #0
 800f8b0:	6031      	str	r1, [r6, #0]
 800f8b2:	602b      	str	r3, [r5, #0]
 800f8b4:	b016      	add	sp, #88	@ 0x58
 800f8b6:	bd70      	pop	{r4, r5, r6, pc}
 800f8b8:	466a      	mov	r2, sp
 800f8ba:	f000 f849 	bl	800f950 <_fstat_r>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	dbec      	blt.n	800f89c <__swhatbuf_r+0x12>
 800f8c2:	9901      	ldr	r1, [sp, #4]
 800f8c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f8c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f8cc:	4259      	negs	r1, r3
 800f8ce:	4159      	adcs	r1, r3
 800f8d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f8d4:	e7eb      	b.n	800f8ae <__swhatbuf_r+0x24>

0800f8d6 <__smakebuf_r>:
 800f8d6:	898b      	ldrh	r3, [r1, #12]
 800f8d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8da:	079d      	lsls	r5, r3, #30
 800f8dc:	4606      	mov	r6, r0
 800f8de:	460c      	mov	r4, r1
 800f8e0:	d507      	bpl.n	800f8f2 <__smakebuf_r+0x1c>
 800f8e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f8e6:	6023      	str	r3, [r4, #0]
 800f8e8:	6123      	str	r3, [r4, #16]
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	6163      	str	r3, [r4, #20]
 800f8ee:	b003      	add	sp, #12
 800f8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8f2:	ab01      	add	r3, sp, #4
 800f8f4:	466a      	mov	r2, sp
 800f8f6:	f7ff ffc8 	bl	800f88a <__swhatbuf_r>
 800f8fa:	9f00      	ldr	r7, [sp, #0]
 800f8fc:	4605      	mov	r5, r0
 800f8fe:	4639      	mov	r1, r7
 800f900:	4630      	mov	r0, r6
 800f902:	f7fd f86f 	bl	800c9e4 <_malloc_r>
 800f906:	b948      	cbnz	r0, 800f91c <__smakebuf_r+0x46>
 800f908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f90c:	059a      	lsls	r2, r3, #22
 800f90e:	d4ee      	bmi.n	800f8ee <__smakebuf_r+0x18>
 800f910:	f023 0303 	bic.w	r3, r3, #3
 800f914:	f043 0302 	orr.w	r3, r3, #2
 800f918:	81a3      	strh	r3, [r4, #12]
 800f91a:	e7e2      	b.n	800f8e2 <__smakebuf_r+0xc>
 800f91c:	89a3      	ldrh	r3, [r4, #12]
 800f91e:	6020      	str	r0, [r4, #0]
 800f920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f924:	81a3      	strh	r3, [r4, #12]
 800f926:	9b01      	ldr	r3, [sp, #4]
 800f928:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f92c:	b15b      	cbz	r3, 800f946 <__smakebuf_r+0x70>
 800f92e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f932:	4630      	mov	r0, r6
 800f934:	f000 f81e 	bl	800f974 <_isatty_r>
 800f938:	b128      	cbz	r0, 800f946 <__smakebuf_r+0x70>
 800f93a:	89a3      	ldrh	r3, [r4, #12]
 800f93c:	f023 0303 	bic.w	r3, r3, #3
 800f940:	f043 0301 	orr.w	r3, r3, #1
 800f944:	81a3      	strh	r3, [r4, #12]
 800f946:	89a3      	ldrh	r3, [r4, #12]
 800f948:	431d      	orrs	r5, r3
 800f94a:	81a5      	strh	r5, [r4, #12]
 800f94c:	e7cf      	b.n	800f8ee <__smakebuf_r+0x18>
	...

0800f950 <_fstat_r>:
 800f950:	b538      	push	{r3, r4, r5, lr}
 800f952:	4d07      	ldr	r5, [pc, #28]	@ (800f970 <_fstat_r+0x20>)
 800f954:	2300      	movs	r3, #0
 800f956:	4604      	mov	r4, r0
 800f958:	4608      	mov	r0, r1
 800f95a:	4611      	mov	r1, r2
 800f95c:	602b      	str	r3, [r5, #0]
 800f95e:	f7f1 fd59 	bl	8001414 <_fstat>
 800f962:	1c43      	adds	r3, r0, #1
 800f964:	d102      	bne.n	800f96c <_fstat_r+0x1c>
 800f966:	682b      	ldr	r3, [r5, #0]
 800f968:	b103      	cbz	r3, 800f96c <_fstat_r+0x1c>
 800f96a:	6023      	str	r3, [r4, #0]
 800f96c:	bd38      	pop	{r3, r4, r5, pc}
 800f96e:	bf00      	nop
 800f970:	24003614 	.word	0x24003614

0800f974 <_isatty_r>:
 800f974:	b538      	push	{r3, r4, r5, lr}
 800f976:	4d06      	ldr	r5, [pc, #24]	@ (800f990 <_isatty_r+0x1c>)
 800f978:	2300      	movs	r3, #0
 800f97a:	4604      	mov	r4, r0
 800f97c:	4608      	mov	r0, r1
 800f97e:	602b      	str	r3, [r5, #0]
 800f980:	f7f1 fd58 	bl	8001434 <_isatty>
 800f984:	1c43      	adds	r3, r0, #1
 800f986:	d102      	bne.n	800f98e <_isatty_r+0x1a>
 800f988:	682b      	ldr	r3, [r5, #0]
 800f98a:	b103      	cbz	r3, 800f98e <_isatty_r+0x1a>
 800f98c:	6023      	str	r3, [r4, #0]
 800f98e:	bd38      	pop	{r3, r4, r5, pc}
 800f990:	24003614 	.word	0x24003614

0800f994 <abort>:
 800f994:	b508      	push	{r3, lr}
 800f996:	2006      	movs	r0, #6
 800f998:	f000 f834 	bl	800fa04 <raise>
 800f99c:	2001      	movs	r0, #1
 800f99e:	f7f1 fce9 	bl	8001374 <_exit>

0800f9a2 <_malloc_usable_size_r>:
 800f9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9a6:	1f18      	subs	r0, r3, #4
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	bfbc      	itt	lt
 800f9ac:	580b      	ldrlt	r3, [r1, r0]
 800f9ae:	18c0      	addlt	r0, r0, r3
 800f9b0:	4770      	bx	lr

0800f9b2 <_raise_r>:
 800f9b2:	291f      	cmp	r1, #31
 800f9b4:	b538      	push	{r3, r4, r5, lr}
 800f9b6:	4605      	mov	r5, r0
 800f9b8:	460c      	mov	r4, r1
 800f9ba:	d904      	bls.n	800f9c6 <_raise_r+0x14>
 800f9bc:	2316      	movs	r3, #22
 800f9be:	6003      	str	r3, [r0, #0]
 800f9c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f9c4:	bd38      	pop	{r3, r4, r5, pc}
 800f9c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f9c8:	b112      	cbz	r2, 800f9d0 <_raise_r+0x1e>
 800f9ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9ce:	b94b      	cbnz	r3, 800f9e4 <_raise_r+0x32>
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	f000 f831 	bl	800fa38 <_getpid_r>
 800f9d6:	4622      	mov	r2, r4
 800f9d8:	4601      	mov	r1, r0
 800f9da:	4628      	mov	r0, r5
 800f9dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9e0:	f000 b818 	b.w	800fa14 <_kill_r>
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d00a      	beq.n	800f9fe <_raise_r+0x4c>
 800f9e8:	1c59      	adds	r1, r3, #1
 800f9ea:	d103      	bne.n	800f9f4 <_raise_r+0x42>
 800f9ec:	2316      	movs	r3, #22
 800f9ee:	6003      	str	r3, [r0, #0]
 800f9f0:	2001      	movs	r0, #1
 800f9f2:	e7e7      	b.n	800f9c4 <_raise_r+0x12>
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	4798      	blx	r3
 800f9fe:	2000      	movs	r0, #0
 800fa00:	e7e0      	b.n	800f9c4 <_raise_r+0x12>
	...

0800fa04 <raise>:
 800fa04:	4b02      	ldr	r3, [pc, #8]	@ (800fa10 <raise+0xc>)
 800fa06:	4601      	mov	r1, r0
 800fa08:	6818      	ldr	r0, [r3, #0]
 800fa0a:	f7ff bfd2 	b.w	800f9b2 <_raise_r>
 800fa0e:	bf00      	nop
 800fa10:	2400001c 	.word	0x2400001c

0800fa14 <_kill_r>:
 800fa14:	b538      	push	{r3, r4, r5, lr}
 800fa16:	4d07      	ldr	r5, [pc, #28]	@ (800fa34 <_kill_r+0x20>)
 800fa18:	2300      	movs	r3, #0
 800fa1a:	4604      	mov	r4, r0
 800fa1c:	4608      	mov	r0, r1
 800fa1e:	4611      	mov	r1, r2
 800fa20:	602b      	str	r3, [r5, #0]
 800fa22:	f7f1 fc97 	bl	8001354 <_kill>
 800fa26:	1c43      	adds	r3, r0, #1
 800fa28:	d102      	bne.n	800fa30 <_kill_r+0x1c>
 800fa2a:	682b      	ldr	r3, [r5, #0]
 800fa2c:	b103      	cbz	r3, 800fa30 <_kill_r+0x1c>
 800fa2e:	6023      	str	r3, [r4, #0]
 800fa30:	bd38      	pop	{r3, r4, r5, pc}
 800fa32:	bf00      	nop
 800fa34:	24003614 	.word	0x24003614

0800fa38 <_getpid_r>:
 800fa38:	f7f1 bc84 	b.w	8001344 <_getpid>

0800fa3c <_init>:
 800fa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa3e:	bf00      	nop
 800fa40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa42:	bc08      	pop	{r3}
 800fa44:	469e      	mov	lr, r3
 800fa46:	4770      	bx	lr

0800fa48 <_fini>:
 800fa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa4a:	bf00      	nop
 800fa4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa4e:	bc08      	pop	{r3}
 800fa50:	469e      	mov	lr, r3
 800fa52:	4770      	bx	lr
