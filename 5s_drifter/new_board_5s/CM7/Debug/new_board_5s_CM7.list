
new_board_5s_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005c8c  08005c8c  00006c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c9c  08005c9c  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005c9c  08005c9c  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005c9c  08005c9c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c9c  08005c9c  00006c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ca0  08005ca0  00006ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08005ca4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  24000010  08005cb4  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000094  08005cb4  00007094  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfcb  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002007  00000000  00000000  00015009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00017010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093d  00000000  00000000  00017c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003aac1  00000000  00000000  000185a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eea5  00000000  00000000  00053066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00188a29  00000000  00000000  00061f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ea934  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000329c  00000000  00000000  001ea978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001edc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005c74 	.word	0x08005c74

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005c74 	.word	0x08005c74

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000444:	bf00      	nop
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <ExitRun0Mode+0x2c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	58024800 	.word	0x58024800

08000464 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08a      	sub	sp, #40	@ 0x28
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800046a:	f107 031c 	add.w	r3, r7, #28
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000476:	463b      	mov	r3, r7
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
 8000484:	615a      	str	r2, [r3, #20]
 8000486:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000488:	4b31      	ldr	r3, [pc, #196]	@ (8000550 <MX_ADC1_Init+0xec>)
 800048a:	4a32      	ldr	r2, [pc, #200]	@ (8000554 <MX_ADC1_Init+0xf0>)
 800048c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800048e:	4b30      	ldr	r3, [pc, #192]	@ (8000550 <MX_ADC1_Init+0xec>)
 8000490:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000494:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000496:	4b2e      	ldr	r3, [pc, #184]	@ (8000550 <MX_ADC1_Init+0xec>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800049c:	4b2c      	ldr	r3, [pc, #176]	@ (8000550 <MX_ADC1_Init+0xec>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004a4:	2204      	movs	r2, #4
 80004a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004a8:	4b29      	ldr	r3, [pc, #164]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ae:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80004b4:	4b26      	ldr	r3, [pc, #152]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ba:	4b25      	ldr	r3, [pc, #148]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004bc:	2200      	movs	r2, #0
 80004be:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004c0:	4b23      	ldr	r3, [pc, #140]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80004cc:	4b20      	ldr	r3, [pc, #128]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80004d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004da:	2200      	movs	r2, #0
 80004dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80004e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004ec:	4818      	ldr	r0, [pc, #96]	@ (8000550 <MX_ADC1_Init+0xec>)
 80004ee:	f000 fd09 	bl	8000f04 <HAL_ADC_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80004f8:	f000 fa2c 	bl	8000954 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000500:	f107 031c 	add.w	r3, r7, #28
 8000504:	4619      	mov	r1, r3
 8000506:	4812      	ldr	r0, [pc, #72]	@ (8000550 <MX_ADC1_Init+0xec>)
 8000508:	f001 fac0 	bl	8001a8c <HAL_ADCEx_MultiModeConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000512:	f000 fa1f 	bl	8000954 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000516:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <MX_ADC1_Init+0xf4>)
 8000518:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800051a:	2306      	movs	r3, #6
 800051c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000522:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000526:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000528:	2304      	movs	r3, #4
 800052a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000534:	463b      	mov	r3, r7
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	@ (8000550 <MX_ADC1_Init+0xec>)
 800053a:	f000 fe85 	bl	8001248 <HAL_ADC_ConfigChannel>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000544:	f000 fa06 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	3728      	adds	r7, #40	@ 0x28
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2400002c 	.word	0x2400002c
 8000554:	40022000 	.word	0x40022000
 8000558:	3ef08000 	.word	0x3ef08000

0800055c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b0ba      	sub	sp, #232	@ 0xe8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	22c0      	movs	r2, #192	@ 0xc0
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f005 fb4d 	bl	8005c1c <memset>
  if(adcHandle->Instance==ADC1)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a2b      	ldr	r2, [pc, #172]	@ (8000634 <HAL_ADC_MspInit+0xd8>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d14f      	bne.n	800062c <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800058c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000590:	f04f 0300 	mov.w	r3, #0
 8000594:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 800059c:	230a      	movs	r3, #10
 800059e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80005ac:	23c0      	movs	r3, #192	@ 0xc0
 80005ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80005b0:	2320      	movs	r3, #32
 80005b2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fe2c 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80005ce:	f000 f9c1 	bl	8000954 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <HAL_ADC_MspInit+0xdc>)
 80005d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80005d8:	4a17      	ldr	r2, [pc, #92]	@ (8000638 <HAL_ADC_MspInit+0xdc>)
 80005da:	f043 0320 	orr.w	r3, r3, #32
 80005de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <HAL_ADC_MspInit+0xdc>)
 80005e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80005e8:	f003 0320 	and.w	r3, r3, #32
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <HAL_ADC_MspInit+0xdc>)
 80005f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f6:	4a10      	ldr	r2, [pc, #64]	@ (8000638 <HAL_ADC_MspInit+0xdc>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000600:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <HAL_ADC_MspInit+0xdc>)
 8000602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800060e:	2308      	movs	r3, #8
 8000610:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000614:	2303      	movs	r3, #3
 8000616:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000628:	f001 fbf2 	bl	8001e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062c:	bf00      	nop
 800062e:	37e8      	adds	r7, #232	@ 0xe8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40022000 	.word	0x40022000
 8000638:	58024400 	.word	0x58024400
 800063c:	58020000 	.word	0x58020000

08000640 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4b59      	ldr	r3, [pc, #356]	@ (80007bc <MX_GPIO_Init+0x17c>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800065c:	4a57      	ldr	r2, [pc, #348]	@ (80007bc <MX_GPIO_Init+0x17c>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000666:	4b55      	ldr	r3, [pc, #340]	@ (80007bc <MX_GPIO_Init+0x17c>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b51      	ldr	r3, [pc, #324]	@ (80007bc <MX_GPIO_Init+0x17c>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800067a:	4a50      	ldr	r2, [pc, #320]	@ (80007bc <MX_GPIO_Init+0x17c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000684:	4b4d      	ldr	r3, [pc, #308]	@ (80007bc <MX_GPIO_Init+0x17c>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4b4a      	ldr	r3, [pc, #296]	@ (80007bc <MX_GPIO_Init+0x17c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000698:	4a48      	ldr	r2, [pc, #288]	@ (80007bc <MX_GPIO_Init+0x17c>)
 800069a:	f043 0302 	orr.w	r3, r3, #2
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a2:	4b46      	ldr	r3, [pc, #280]	@ (80007bc <MX_GPIO_Init+0x17c>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a8:	f003 0302 	and.w	r3, r3, #2
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b0:	4b42      	ldr	r3, [pc, #264]	@ (80007bc <MX_GPIO_Init+0x17c>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b6:	4a41      	ldr	r2, [pc, #260]	@ (80007bc <MX_GPIO_Init+0x17c>)
 80006b8:	f043 0308 	orr.w	r3, r3, #8
 80006bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006c0:	4b3e      	ldr	r3, [pc, #248]	@ (80007bc <MX_GPIO_Init+0x17c>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ce:	4b3b      	ldr	r3, [pc, #236]	@ (80007bc <MX_GPIO_Init+0x17c>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d4:	4a39      	ldr	r2, [pc, #228]	@ (80007bc <MX_GPIO_Init+0x17c>)
 80006d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006de:	4b37      	ldr	r3, [pc, #220]	@ (80007bc <MX_GPIO_Init+0x17c>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80006ec:	2332      	movs	r3, #50	@ 0x32
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006fc:	230b      	movs	r3, #11
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	482e      	ldr	r0, [pc, #184]	@ (80007c0 <MX_GPIO_Init+0x180>)
 8000708:	f001 fb82 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800070c:	2386      	movs	r3, #134	@ 0x86
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800071c:	230b      	movs	r3, #11
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	4827      	ldr	r0, [pc, #156]	@ (80007c4 <MX_GPIO_Init+0x184>)
 8000728:	f001 fb72 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800072c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800073e:	230b      	movs	r3, #11
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	481f      	ldr	r0, [pc, #124]	@ (80007c8 <MX_GPIO_Init+0x188>)
 800074a:	f001 fb61 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800074e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000760:	2307      	movs	r3, #7
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4818      	ldr	r0, [pc, #96]	@ (80007cc <MX_GPIO_Init+0x18c>)
 800076c:	f001 fb50 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000770:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000782:	230a      	movs	r3, #10
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	480d      	ldr	r0, [pc, #52]	@ (80007c4 <MX_GPIO_Init+0x184>)
 800078e:	f001 fb3f 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000792:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a4:	230b      	movs	r3, #11
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	4808      	ldr	r0, [pc, #32]	@ (80007d0 <MX_GPIO_Init+0x190>)
 80007b0:	f001 fb2e 	bl	8001e10 <HAL_GPIO_Init>

}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	@ 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	58024400 	.word	0x58024400
 80007c0:	58020800 	.word	0x58020800
 80007c4:	58020000 	.word	0x58020000
 80007c8:	58020400 	.word	0x58020400
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	58021800 	.word	0x58021800

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007de:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007e0:	bf00      	nop
 80007e2:	4b22      	ldr	r3, [pc, #136]	@ (800086c <main+0x98>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <main+0x24>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	dcf4      	bgt.n	80007e2 <main+0xe>
  if ( timeout < 0 )
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da01      	bge.n	8000802 <main+0x2e>
  {
  Error_Handler();
 80007fe:	f000 f8a9 	bl	8000954 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 f923 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f833 	bl	8000870 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <main+0x98>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000810:	4a16      	ldr	r2, [pc, #88]	@ (800086c <main+0x98>)
 8000812:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <main+0x98>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000828:	2000      	movs	r0, #0
 800082a:	f001 fca1 	bl	8002170 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800082e:	2100      	movs	r1, #0
 8000830:	2000      	movs	r0, #0
 8000832:	f001 fcb7 	bl	80021a4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000836:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800083a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800083c:	bf00      	nop
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <main+0x98>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d104      	bne.n	8000854 <main+0x80>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	1e5a      	subs	r2, r3, #1
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	dcf4      	bgt.n	800083e <main+0x6a>
if ( timeout < 0 )
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	da01      	bge.n	800085e <main+0x8a>
{
Error_Handler();
 800085a:	f000 f87b 	bl	8000954 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f7ff feef 	bl	8000640 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000862:	f7ff fdff 	bl	8000464 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000866:	bf00      	nop
 8000868:	e7fd      	b.n	8000866 <main+0x92>
 800086a:	bf00      	nop
 800086c:	58024400 	.word	0x58024400

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	@ 0x70
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087a:	224c      	movs	r2, #76	@ 0x4c
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f005 f9cc 	bl	8005c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2220      	movs	r2, #32
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f005 f9c6 	bl	8005c1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000890:	2004      	movs	r0, #4
 8000892:	f001 fc9b 	bl	80021cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <SystemClock_Config+0xd8>)
 800089c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800089e:	4a2a      	ldr	r2, [pc, #168]	@ (8000948 <SystemClock_Config+0xd8>)
 80008a0:	f023 0301 	bic.w	r3, r3, #1
 80008a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008a6:	4b28      	ldr	r3, [pc, #160]	@ (8000948 <SystemClock_Config+0xd8>)
 80008a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	4b26      	ldr	r3, [pc, #152]	@ (800094c <SystemClock_Config+0xdc>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b8:	4a24      	ldr	r2, [pc, #144]	@ (800094c <SystemClock_Config+0xdc>)
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b22      	ldr	r3, [pc, #136]	@ (800094c <SystemClock_Config+0xdc>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008cc:	bf00      	nop
 80008ce:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <SystemClock_Config+0xdc>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008da:	d1f8      	bne.n	80008ce <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80008dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <SystemClock_Config+0xe0>)
 80008de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000950 <SystemClock_Config+0xe0>)
 80008e2:	f023 0303 	bic.w	r3, r3, #3
 80008e6:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e8:	2302      	movs	r3, #2
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f0:	2340      	movs	r3, #64	@ 0x40
 80008f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 fcbf 	bl	8002280 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000908:	f000 f824 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	233f      	movs	r3, #63	@ 0x3f
 800090e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2101      	movs	r1, #1
 8000930:	4618      	mov	r0, r3
 8000932:	f002 f8ff 	bl	8002b34 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800093c:	f000 f80a 	bl	8000954 <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3770      	adds	r7, #112	@ 0x70
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58000400 	.word	0x58000400
 800094c:	58024800 	.word	0x58024800
 8000950:	58024400 	.word	0x58024400

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <Error_Handler+0x8>

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <HAL_MspInit+0x30>)
 8000968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800096c:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x30>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x30>)
 8000978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	58024400 	.word	0x58024400

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <NMI_Handler+0x4>

0800099c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <MemManage_Handler+0x4>

080009ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <UsageFault_Handler+0x4>

080009bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ea:	f000 f8a1 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80009f4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000a30 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80009f8:	f7ff fd1c 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009fc:	f7ff fc6c 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	@ (8000a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	@ (8000a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	@ (8000a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a26:	f005 f901 	bl	8005c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2a:	f7ff fed3 	bl	80007d4 <main>
  bx  lr
 8000a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a38:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a3c:	08005ca4 	.word	0x08005ca4
  ldr r2, =_sbss
 8000a40:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a44:	24000094 	.word	0x24000094

08000a48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC3_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a52:	2003      	movs	r0, #3
 8000a54:	f001 f9aa 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a58:	f002 fa22 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_Init+0x68>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	0a1b      	lsrs	r3, r3, #8
 8000a64:	f003 030f 	and.w	r3, r3, #15
 8000a68:	4913      	ldr	r1, [pc, #76]	@ (8000ab8 <HAL_Init+0x6c>)
 8000a6a:	5ccb      	ldrb	r3, [r1, r3]
 8000a6c:	f003 031f 	and.w	r3, r3, #31
 8000a70:	fa22 f303 	lsr.w	r3, r2, r3
 8000a74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <HAL_Init+0x68>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <HAL_Init+0x6c>)
 8000a80:	5cd3      	ldrb	r3, [r2, r3]
 8000a82:	f003 031f 	and.w	r3, r3, #31
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	fa22 f303 	lsr.w	r3, r2, r3
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000abc <HAL_Init+0x70>)
 8000a8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac0 <HAL_Init+0x74>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f814 	bl	8000ac4 <HAL_InitTick>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e002      	b.n	8000aac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa6:	f7ff ff5b 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	58024400 	.word	0x58024400
 8000ab8:	08005c8c 	.word	0x08005c8c
 8000abc:	24000004 	.word	0x24000004
 8000ac0:	24000000 	.word	0x24000000

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000acc:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <HAL_InitTick+0x60>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e021      	b.n	8000b1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ad8:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <HAL_InitTick+0x64>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <HAL_InitTick+0x60>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 f981 	bl	8001df6 <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00e      	b.n	8000b1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d80a      	bhi.n	8000b1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b0c:	f001 f959 	bl	8001dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4a06      	ldr	r2, [pc, #24]	@ (8000b2c <HAL_InitTick+0x68>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2400000c 	.word	0x2400000c
 8000b28:	24000000 	.word	0x24000000
 8000b2c:	24000008 	.word	0x24000008

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	2400000c 	.word	0x2400000c
 8000b54:	24000090 	.word	0x24000090

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	24000090 	.word	0x24000090

08000b70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b74:	4b03      	ldr	r3, [pc, #12]	@ (8000b84 <HAL_GetREVID+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	0c1b      	lsrs	r3, r3, #16
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	5c001000 	.word	0x5c001000

08000b88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d107      	bne.n	8000c14 <LL_ADC_SetChannelPreselection+0x24>
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	0e9b      	lsrs	r3, r3, #26
 8000c08:	f003 031f 	and.w	r3, r3, #31
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	e015      	b.n	8000c40 <LL_ADC_SetChannelPreselection+0x50>
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	fa93 f3a3 	rbit	r3, r3
 8000c1e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d101      	bne.n	8000c2e <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	e003      	b.n	8000c36 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fab3 f383 	clz	r3, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f003 031f 	and.w	r3, r3, #31
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	69d2      	ldr	r2, [r2, #28]
 8000c44:	431a      	orrs	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8000c4a:	bf00      	nop
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b087      	sub	sp, #28
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3360      	adds	r3, #96	@ 0x60
 8000c68:	461a      	mov	r2, r3
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	430b      	orrs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	371c      	adds	r7, #28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b085      	sub	sp, #20
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	f003 031f 	and.w	r3, r3, #31
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	611a      	str	r2, [r3, #16]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3360      	adds	r3, #96	@ 0x60
 8000cd8:	461a      	mov	r2, r3
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	601a      	str	r2, [r3, #0]
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b087      	sub	sp, #28
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3330      	adds	r3, #48	@ 0x30
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	0a1b      	lsrs	r3, r3, #8
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	4413      	add	r3, r2
 8000d1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	f003 031f 	and.w	r3, r3, #31
 8000d28:	211f      	movs	r1, #31
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	401a      	ands	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	0e9b      	lsrs	r3, r3, #26
 8000d36:	f003 011f 	and.w	r1, r3, #31
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	f003 031f 	and.w	r3, r3, #31
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	431a      	orrs	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d4a:	bf00      	nop
 8000d4c:	371c      	adds	r7, #28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b087      	sub	sp, #28
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3314      	adds	r3, #20
 8000d66:	461a      	mov	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	0e5b      	lsrs	r3, r3, #25
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	4413      	add	r3, r2
 8000d74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	0d1b      	lsrs	r3, r3, #20
 8000d7e:	f003 031f 	and.w	r3, r3, #31
 8000d82:	2107      	movs	r1, #7
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	0d1b      	lsrs	r3, r3, #20
 8000d90:	f003 031f 	and.w	r3, r3, #31
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000da0:	bf00      	nop
 8000da2:	371c      	adds	r7, #28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0318 	and.w	r3, r3, #24
 8000dce:	4908      	ldr	r1, [pc, #32]	@ (8000df0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000dd0:	40d9      	lsrs	r1, r3
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	400b      	ands	r3, r1
 8000dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	000fffff 	.word	0x000fffff

08000df4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	6093      	str	r3, [r2, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	5fffffc0 	.word	0x5fffffc0

08000e18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e2c:	d101      	bne.n	8000e32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	6fffffc0 	.word	0x6fffffc0

08000e68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000e7c:	d101      	bne.n	8000e82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d101      	bne.n	8000ea8 <LL_ADC_IsEnabled+0x18>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <LL_ADC_IsEnabled+0x1a>
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d101      	bne.n	8000ece <LL_ADC_REG_IsConversionOngoing+0x18>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d101      	bne.n	8000ef4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e000      	b.n	8000ef6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b089      	sub	sp, #36	@ 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e18f      	b.n	800123e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d109      	bne.n	8000f40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff fb15 	bl	800055c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff67 	bl	8000e18 <LL_ADC_IsDeepPowerDownEnabled>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d004      	beq.n	8000f5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff4d 	bl	8000df4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff82 	bl	8000e68 <LL_ADC_IsInternalRegulatorEnabled>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d114      	bne.n	8000f94 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff66 	bl	8000e40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f74:	4b87      	ldr	r3, [pc, #540]	@ (8001194 <HAL_ADC_Init+0x290>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	099b      	lsrs	r3, r3, #6
 8000f7a:	4a87      	ldr	r2, [pc, #540]	@ (8001198 <HAL_ADC_Init+0x294>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	099b      	lsrs	r3, r3, #6
 8000f82:	3301      	adds	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f86:	e002      	b.n	8000f8e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f9      	bne.n	8000f88 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff65 	bl	8000e68 <LL_ADC_IsInternalRegulatorEnabled>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d10d      	bne.n	8000fc0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa8:	f043 0210 	orr.w	r2, r3, #16
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb4:	f043 0201 	orr.w	r2, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff76 	bl	8000eb6 <LL_ADC_REG_IsConversionOngoing>
 8000fca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f040 8129 	bne.w	800122c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f040 8125 	bne.w	800122c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fe6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000fea:	f043 0202 	orr.w	r2, r3, #2
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff4a 	bl	8000e90 <LL_ADC_IsEnabled>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d136      	bne.n	8001070 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a65      	ldr	r2, [pc, #404]	@ (800119c <HAL_ADC_Init+0x298>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d004      	beq.n	8001016 <HAL_ADC_Init+0x112>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a63      	ldr	r2, [pc, #396]	@ (80011a0 <HAL_ADC_Init+0x29c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10e      	bne.n	8001034 <HAL_ADC_Init+0x130>
 8001016:	4861      	ldr	r0, [pc, #388]	@ (800119c <HAL_ADC_Init+0x298>)
 8001018:	f7ff ff3a 	bl	8000e90 <LL_ADC_IsEnabled>
 800101c:	4604      	mov	r4, r0
 800101e:	4860      	ldr	r0, [pc, #384]	@ (80011a0 <HAL_ADC_Init+0x29c>)
 8001020:	f7ff ff36 	bl	8000e90 <LL_ADC_IsEnabled>
 8001024:	4603      	mov	r3, r0
 8001026:	4323      	orrs	r3, r4
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf0c      	ite	eq
 800102c:	2301      	moveq	r3, #1
 800102e:	2300      	movne	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	e008      	b.n	8001046 <HAL_ADC_Init+0x142>
 8001034:	485b      	ldr	r0, [pc, #364]	@ (80011a4 <HAL_ADC_Init+0x2a0>)
 8001036:	f7ff ff2b 	bl	8000e90 <LL_ADC_IsEnabled>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf0c      	ite	eq
 8001040:	2301      	moveq	r3, #1
 8001042:	2300      	movne	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d012      	beq.n	8001070 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a53      	ldr	r2, [pc, #332]	@ (800119c <HAL_ADC_Init+0x298>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d004      	beq.n	800105e <HAL_ADC_Init+0x15a>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a51      	ldr	r2, [pc, #324]	@ (80011a0 <HAL_ADC_Init+0x29c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_ADC_Init+0x15e>
 800105e:	4a52      	ldr	r2, [pc, #328]	@ (80011a8 <HAL_ADC_Init+0x2a4>)
 8001060:	e000      	b.n	8001064 <HAL_ADC_Init+0x160>
 8001062:	4a52      	ldr	r2, [pc, #328]	@ (80011ac <HAL_ADC_Init+0x2a8>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4619      	mov	r1, r3
 800106a:	4610      	mov	r0, r2
 800106c:	f7ff fd8c 	bl	8000b88 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001070:	f7ff fd7e 	bl	8000b70 <HAL_GetREVID>
 8001074:	4603      	mov	r3, r0
 8001076:	f241 0203 	movw	r2, #4099	@ 0x1003
 800107a:	4293      	cmp	r3, r2
 800107c:	d914      	bls.n	80010a8 <HAL_ADC_Init+0x1a4>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b10      	cmp	r3, #16
 8001084:	d110      	bne.n	80010a8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7d5b      	ldrb	r3, [r3, #21]
 800108a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001090:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001096:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7f1b      	ldrb	r3, [r3, #28]
 800109c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800109e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010a0:	f043 030c 	orr.w	r3, r3, #12
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	e00d      	b.n	80010c4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7d5b      	ldrb	r3, [r3, #21]
 80010ac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010b2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80010b8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7f1b      	ldrb	r3, [r3, #28]
 80010be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7f1b      	ldrb	r3, [r3, #28]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d106      	bne.n	80010da <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	045b      	lsls	r3, r3, #17
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d009      	beq.n	80010f6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	4b2c      	ldr	r3, [pc, #176]	@ (80011b0 <HAL_ADC_Init+0x2ac>)
 80010fe:	4013      	ands	r3, r2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	69b9      	ldr	r1, [r7, #24]
 8001106:	430b      	orrs	r3, r1
 8001108:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fed1 	bl	8000eb6 <LL_ADC_REG_IsConversionOngoing>
 8001114:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fede 	bl	8000edc <LL_ADC_INJ_IsConversionOngoing>
 8001120:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d15f      	bne.n	80011e8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d15c      	bne.n	80011e8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7d1b      	ldrb	r3, [r3, #20]
 8001132:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <HAL_ADC_Init+0x2b0>)
 8001144:	4013      	ands	r3, r2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	69b9      	ldr	r1, [r7, #24]
 800114c:	430b      	orrs	r3, r1
 800114e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001156:	2b01      	cmp	r3, #1
 8001158:	d130      	bne.n	80011bc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <HAL_ADC_Init+0x2b4>)
 8001168:	4013      	ands	r3, r2
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800116e:	3a01      	subs	r2, #1
 8001170:	0411      	lsls	r1, r2, #16
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001176:	4311      	orrs	r1, r2
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800117c:	4311      	orrs	r1, r2
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001182:	430a      	orrs	r2, r1
 8001184:	431a      	orrs	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	611a      	str	r2, [r3, #16]
 8001190:	e01c      	b.n	80011cc <HAL_ADC_Init+0x2c8>
 8001192:	bf00      	nop
 8001194:	24000000 	.word	0x24000000
 8001198:	053e2d63 	.word	0x053e2d63
 800119c:	40022000 	.word	0x40022000
 80011a0:	40022100 	.word	0x40022100
 80011a4:	58026000 	.word	0x58026000
 80011a8:	40022300 	.word	0x40022300
 80011ac:	58026300 	.word	0x58026300
 80011b0:	fff0c003 	.word	0xfff0c003
 80011b4:	ffffbffc 	.word	0xffffbffc
 80011b8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	691a      	ldr	r2, [r3, #16]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 fb20 	bl	8001828 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d10c      	bne.n	800120a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f023 010f 	bic.w	r1, r3, #15
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	1e5a      	subs	r2, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	631a      	str	r2, [r3, #48]	@ 0x30
 8001208:	e007      	b.n	800121a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 020f 	bic.w	r2, r2, #15
 8001218:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800121e:	f023 0303 	bic.w	r3, r3, #3
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	655a      	str	r2, [r3, #84]	@ 0x54
 800122a:	e007      	b.n	800123c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001230:	f043 0210 	orr.w	r2, r3, #16
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800123c:	7ffb      	ldrb	r3, [r7, #31]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	bf00      	nop

08001248 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b08d      	sub	sp, #52	@ 0x34
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	4a65      	ldr	r2, [pc, #404]	@ (80013f8 <HAL_ADC_ConfigChannel+0x1b0>)
 8001262:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x2a>
 800126e:	2302      	movs	r3, #2
 8001270:	e2c7      	b.n	8001802 <HAL_ADC_ConfigChannel+0x5ba>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fe19 	bl	8000eb6 <LL_ADC_REG_IsConversionOngoing>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 82ac 	bne.w	80017e4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db2c      	blt.n	80012ee <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800129c:	2b00      	cmp	r3, #0
 800129e:	d108      	bne.n	80012b2 <HAL_ADC_ConfigChannel+0x6a>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0e9b      	lsrs	r3, r3, #26
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	2201      	movs	r2, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	e016      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x98>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa93 f3a3 	rbit	r3, r3
 80012be:	613b      	str	r3, [r7, #16]
  return result;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80012ca:	2320      	movs	r3, #32
 80012cc:	e003      	b.n	80012d6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	2201      	movs	r2, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	69d1      	ldr	r1, [r2, #28]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	430b      	orrs	r3, r1
 80012ec:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	6859      	ldr	r1, [r3, #4]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	f7ff fcff 	bl	8000cfe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fdd6 	bl	8000eb6 <LL_ADC_REG_IsConversionOngoing>
 800130a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fde3 	bl	8000edc <LL_ADC_INJ_IsConversionOngoing>
 8001316:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800131a:	2b00      	cmp	r3, #0
 800131c:	f040 80b8 	bne.w	8001490 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 80b4 	bne.w	8001490 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	6819      	ldr	r1, [r3, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	461a      	mov	r2, r3
 8001336:	f7ff fd0e 	bl	8000d56 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800133a:	4b30      	ldr	r3, [pc, #192]	@ (80013fc <HAL_ADC_ConfigChannel+0x1b4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001346:	d10b      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x118>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	695a      	ldr	r2, [r3, #20]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	e01d      	b.n	800139c <HAL_ADC_ConfigChannel+0x154>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10b      	bne.n	8001386 <HAL_ADC_ConfigChannel+0x13e>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	695a      	ldr	r2, [r3, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	e00a      	b.n	800139c <HAL_ADC_ConfigChannel+0x154>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	695a      	ldr	r2, [r3, #20]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d02c      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	6919      	ldr	r1, [r3, #16]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f7ff fc4f 	bl	8000c56 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	6919      	ldr	r1, [r3, #16]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	7e5b      	ldrb	r3, [r3, #25]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d102      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x186>
 80013c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80013cc:	e000      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x188>
 80013ce:	2300      	movs	r3, #0
 80013d0:	461a      	mov	r2, r3
 80013d2:	f7ff fc79 	bl	8000cc8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	6919      	ldr	r1, [r3, #16]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	7e1b      	ldrb	r3, [r3, #24]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d102      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1a4>
 80013e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013ea:	e000      	b.n	80013ee <HAL_ADC_ConfigChannel+0x1a6>
 80013ec:	2300      	movs	r3, #0
 80013ee:	461a      	mov	r2, r3
 80013f0:	f7ff fc51 	bl	8000c96 <LL_ADC_SetDataRightShift>
 80013f4:	e04c      	b.n	8001490 <HAL_ADC_ConfigChannel+0x248>
 80013f6:	bf00      	nop
 80013f8:	47ff0000 	.word	0x47ff0000
 80013fc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001406:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	069b      	lsls	r3, r3, #26
 8001410:	429a      	cmp	r2, r3
 8001412:	d107      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001422:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800142a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	069b      	lsls	r3, r3, #26
 8001434:	429a      	cmp	r2, r3
 8001436:	d107      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001446:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800144e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	069b      	lsls	r3, r3, #26
 8001458:	429a      	cmp	r2, r3
 800145a:	d107      	bne.n	800146c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800146a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001472:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	069b      	lsls	r3, r3, #26
 800147c:	429a      	cmp	r2, r3
 800147e:	d107      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800148e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fcfb 	bl	8000e90 <LL_ADC_IsEnabled>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	f040 81aa 	bne.w	80017f6 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f7ff fc7c 	bl	8000dac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4a87      	ldr	r2, [pc, #540]	@ (80016d8 <HAL_ADC_ConfigChannel+0x490>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	f040 809a 	bne.w	80015f4 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4984      	ldr	r1, [pc, #528]	@ (80016dc <HAL_ADC_ConfigChannel+0x494>)
 80014ca:	428b      	cmp	r3, r1
 80014cc:	d147      	bne.n	800155e <HAL_ADC_ConfigChannel+0x316>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4983      	ldr	r1, [pc, #524]	@ (80016e0 <HAL_ADC_ConfigChannel+0x498>)
 80014d4:	428b      	cmp	r3, r1
 80014d6:	d040      	beq.n	800155a <HAL_ADC_ConfigChannel+0x312>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4981      	ldr	r1, [pc, #516]	@ (80016e4 <HAL_ADC_ConfigChannel+0x49c>)
 80014de:	428b      	cmp	r3, r1
 80014e0:	d039      	beq.n	8001556 <HAL_ADC_ConfigChannel+0x30e>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4980      	ldr	r1, [pc, #512]	@ (80016e8 <HAL_ADC_ConfigChannel+0x4a0>)
 80014e8:	428b      	cmp	r3, r1
 80014ea:	d032      	beq.n	8001552 <HAL_ADC_ConfigChannel+0x30a>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	497e      	ldr	r1, [pc, #504]	@ (80016ec <HAL_ADC_ConfigChannel+0x4a4>)
 80014f2:	428b      	cmp	r3, r1
 80014f4:	d02b      	beq.n	800154e <HAL_ADC_ConfigChannel+0x306>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	497d      	ldr	r1, [pc, #500]	@ (80016f0 <HAL_ADC_ConfigChannel+0x4a8>)
 80014fc:	428b      	cmp	r3, r1
 80014fe:	d024      	beq.n	800154a <HAL_ADC_ConfigChannel+0x302>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	497b      	ldr	r1, [pc, #492]	@ (80016f4 <HAL_ADC_ConfigChannel+0x4ac>)
 8001506:	428b      	cmp	r3, r1
 8001508:	d01d      	beq.n	8001546 <HAL_ADC_ConfigChannel+0x2fe>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	497a      	ldr	r1, [pc, #488]	@ (80016f8 <HAL_ADC_ConfigChannel+0x4b0>)
 8001510:	428b      	cmp	r3, r1
 8001512:	d016      	beq.n	8001542 <HAL_ADC_ConfigChannel+0x2fa>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4978      	ldr	r1, [pc, #480]	@ (80016fc <HAL_ADC_ConfigChannel+0x4b4>)
 800151a:	428b      	cmp	r3, r1
 800151c:	d00f      	beq.n	800153e <HAL_ADC_ConfigChannel+0x2f6>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4977      	ldr	r1, [pc, #476]	@ (8001700 <HAL_ADC_ConfigChannel+0x4b8>)
 8001524:	428b      	cmp	r3, r1
 8001526:	d008      	beq.n	800153a <HAL_ADC_ConfigChannel+0x2f2>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4975      	ldr	r1, [pc, #468]	@ (8001704 <HAL_ADC_ConfigChannel+0x4bc>)
 800152e:	428b      	cmp	r3, r1
 8001530:	d101      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x2ee>
 8001532:	4b75      	ldr	r3, [pc, #468]	@ (8001708 <HAL_ADC_ConfigChannel+0x4c0>)
 8001534:	e05a      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 8001536:	2300      	movs	r3, #0
 8001538:	e058      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 800153a:	4b74      	ldr	r3, [pc, #464]	@ (800170c <HAL_ADC_ConfigChannel+0x4c4>)
 800153c:	e056      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 800153e:	4b74      	ldr	r3, [pc, #464]	@ (8001710 <HAL_ADC_ConfigChannel+0x4c8>)
 8001540:	e054      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 8001542:	4b6e      	ldr	r3, [pc, #440]	@ (80016fc <HAL_ADC_ConfigChannel+0x4b4>)
 8001544:	e052      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 8001546:	4b6c      	ldr	r3, [pc, #432]	@ (80016f8 <HAL_ADC_ConfigChannel+0x4b0>)
 8001548:	e050      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 800154a:	4b72      	ldr	r3, [pc, #456]	@ (8001714 <HAL_ADC_ConfigChannel+0x4cc>)
 800154c:	e04e      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 800154e:	4b72      	ldr	r3, [pc, #456]	@ (8001718 <HAL_ADC_ConfigChannel+0x4d0>)
 8001550:	e04c      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 8001552:	4b72      	ldr	r3, [pc, #456]	@ (800171c <HAL_ADC_ConfigChannel+0x4d4>)
 8001554:	e04a      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 8001556:	4b72      	ldr	r3, [pc, #456]	@ (8001720 <HAL_ADC_ConfigChannel+0x4d8>)
 8001558:	e048      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 800155a:	2301      	movs	r3, #1
 800155c:	e046      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4970      	ldr	r1, [pc, #448]	@ (8001724 <HAL_ADC_ConfigChannel+0x4dc>)
 8001564:	428b      	cmp	r3, r1
 8001566:	d140      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x3a2>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	495c      	ldr	r1, [pc, #368]	@ (80016e0 <HAL_ADC_ConfigChannel+0x498>)
 800156e:	428b      	cmp	r3, r1
 8001570:	d039      	beq.n	80015e6 <HAL_ADC_ConfigChannel+0x39e>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	495b      	ldr	r1, [pc, #364]	@ (80016e4 <HAL_ADC_ConfigChannel+0x49c>)
 8001578:	428b      	cmp	r3, r1
 800157a:	d032      	beq.n	80015e2 <HAL_ADC_ConfigChannel+0x39a>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4959      	ldr	r1, [pc, #356]	@ (80016e8 <HAL_ADC_ConfigChannel+0x4a0>)
 8001582:	428b      	cmp	r3, r1
 8001584:	d02b      	beq.n	80015de <HAL_ADC_ConfigChannel+0x396>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4958      	ldr	r1, [pc, #352]	@ (80016ec <HAL_ADC_ConfigChannel+0x4a4>)
 800158c:	428b      	cmp	r3, r1
 800158e:	d024      	beq.n	80015da <HAL_ADC_ConfigChannel+0x392>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4956      	ldr	r1, [pc, #344]	@ (80016f0 <HAL_ADC_ConfigChannel+0x4a8>)
 8001596:	428b      	cmp	r3, r1
 8001598:	d01d      	beq.n	80015d6 <HAL_ADC_ConfigChannel+0x38e>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4955      	ldr	r1, [pc, #340]	@ (80016f4 <HAL_ADC_ConfigChannel+0x4ac>)
 80015a0:	428b      	cmp	r3, r1
 80015a2:	d016      	beq.n	80015d2 <HAL_ADC_ConfigChannel+0x38a>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4953      	ldr	r1, [pc, #332]	@ (80016f8 <HAL_ADC_ConfigChannel+0x4b0>)
 80015aa:	428b      	cmp	r3, r1
 80015ac:	d00f      	beq.n	80015ce <HAL_ADC_ConfigChannel+0x386>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4952      	ldr	r1, [pc, #328]	@ (80016fc <HAL_ADC_ConfigChannel+0x4b4>)
 80015b4:	428b      	cmp	r3, r1
 80015b6:	d008      	beq.n	80015ca <HAL_ADC_ConfigChannel+0x382>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4951      	ldr	r1, [pc, #324]	@ (8001704 <HAL_ADC_ConfigChannel+0x4bc>)
 80015be:	428b      	cmp	r3, r1
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x37e>
 80015c2:	4b51      	ldr	r3, [pc, #324]	@ (8001708 <HAL_ADC_ConfigChannel+0x4c0>)
 80015c4:	e012      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 80015c6:	2300      	movs	r3, #0
 80015c8:	e010      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 80015ca:	4b51      	ldr	r3, [pc, #324]	@ (8001710 <HAL_ADC_ConfigChannel+0x4c8>)
 80015cc:	e00e      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 80015ce:	4b4b      	ldr	r3, [pc, #300]	@ (80016fc <HAL_ADC_ConfigChannel+0x4b4>)
 80015d0:	e00c      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 80015d2:	4b49      	ldr	r3, [pc, #292]	@ (80016f8 <HAL_ADC_ConfigChannel+0x4b0>)
 80015d4:	e00a      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 80015d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001714 <HAL_ADC_ConfigChannel+0x4cc>)
 80015d8:	e008      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 80015da:	4b4f      	ldr	r3, [pc, #316]	@ (8001718 <HAL_ADC_ConfigChannel+0x4d0>)
 80015dc:	e006      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 80015de:	4b4f      	ldr	r3, [pc, #316]	@ (800171c <HAL_ADC_ConfigChannel+0x4d4>)
 80015e0:	e004      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 80015e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001720 <HAL_ADC_ConfigChannel+0x4d8>)
 80015e4:	e002      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_ADC_ConfigChannel+0x3a4>
 80015ea:	2300      	movs	r3, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4610      	mov	r0, r2
 80015f0:	f7ff fafe 	bl	8000bf0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f280 80fc 	bge.w	80017f6 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a36      	ldr	r2, [pc, #216]	@ (80016dc <HAL_ADC_ConfigChannel+0x494>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d004      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x3ca>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a45      	ldr	r2, [pc, #276]	@ (8001724 <HAL_ADC_ConfigChannel+0x4dc>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x3ce>
 8001612:	4b45      	ldr	r3, [pc, #276]	@ (8001728 <HAL_ADC_ConfigChannel+0x4e0>)
 8001614:	e000      	b.n	8001618 <HAL_ADC_ConfigChannel+0x3d0>
 8001616:	4b45      	ldr	r3, [pc, #276]	@ (800172c <HAL_ADC_ConfigChannel+0x4e4>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fadb 	bl	8000bd4 <LL_ADC_GetCommonPathInternalCh>
 800161e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <HAL_ADC_ConfigChannel+0x494>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d004      	beq.n	8001634 <HAL_ADC_ConfigChannel+0x3ec>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a3d      	ldr	r2, [pc, #244]	@ (8001724 <HAL_ADC_ConfigChannel+0x4dc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d10e      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x40a>
 8001634:	4829      	ldr	r0, [pc, #164]	@ (80016dc <HAL_ADC_ConfigChannel+0x494>)
 8001636:	f7ff fc2b 	bl	8000e90 <LL_ADC_IsEnabled>
 800163a:	4604      	mov	r4, r0
 800163c:	4839      	ldr	r0, [pc, #228]	@ (8001724 <HAL_ADC_ConfigChannel+0x4dc>)
 800163e:	f7ff fc27 	bl	8000e90 <LL_ADC_IsEnabled>
 8001642:	4603      	mov	r3, r0
 8001644:	4323      	orrs	r3, r4
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf0c      	ite	eq
 800164a:	2301      	moveq	r3, #1
 800164c:	2300      	movne	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	e008      	b.n	8001664 <HAL_ADC_ConfigChannel+0x41c>
 8001652:	4837      	ldr	r0, [pc, #220]	@ (8001730 <HAL_ADC_ConfigChannel+0x4e8>)
 8001654:	f7ff fc1c 	bl	8000e90 <LL_ADC_IsEnabled>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf0c      	ite	eq
 800165e:	2301      	moveq	r3, #1
 8001660:	2300      	movne	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80b3 	beq.w	80017d0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a31      	ldr	r2, [pc, #196]	@ (8001734 <HAL_ADC_ConfigChannel+0x4ec>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d165      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x4f8>
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d160      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a2b      	ldr	r2, [pc, #172]	@ (8001730 <HAL_ADC_ConfigChannel+0x4e8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	f040 80b6 	bne.w	80017f6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a13      	ldr	r2, [pc, #76]	@ (80016dc <HAL_ADC_ConfigChannel+0x494>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d004      	beq.n	800169e <HAL_ADC_ConfigChannel+0x456>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a22      	ldr	r2, [pc, #136]	@ (8001724 <HAL_ADC_ConfigChannel+0x4dc>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x45a>
 800169e:	4a22      	ldr	r2, [pc, #136]	@ (8001728 <HAL_ADC_ConfigChannel+0x4e0>)
 80016a0:	e000      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x45c>
 80016a2:	4a22      	ldr	r2, [pc, #136]	@ (800172c <HAL_ADC_ConfigChannel+0x4e4>)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016aa:	4619      	mov	r1, r3
 80016ac:	4610      	mov	r0, r2
 80016ae:	f7ff fa7e 	bl	8000bae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016b2:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <HAL_ADC_ConfigChannel+0x4f0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	099b      	lsrs	r3, r3, #6
 80016b8:	4a20      	ldr	r2, [pc, #128]	@ (800173c <HAL_ADC_ConfigChannel+0x4f4>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	099b      	lsrs	r3, r3, #6
 80016c0:	3301      	adds	r3, #1
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80016c6:	e002      	b.n	80016ce <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f9      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016d4:	e08f      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x5ae>
 80016d6:	bf00      	nop
 80016d8:	47ff0000 	.word	0x47ff0000
 80016dc:	40022000 	.word	0x40022000
 80016e0:	04300002 	.word	0x04300002
 80016e4:	08600004 	.word	0x08600004
 80016e8:	0c900008 	.word	0x0c900008
 80016ec:	10c00010 	.word	0x10c00010
 80016f0:	14f00020 	.word	0x14f00020
 80016f4:	2a000400 	.word	0x2a000400
 80016f8:	2e300800 	.word	0x2e300800
 80016fc:	32601000 	.word	0x32601000
 8001700:	43210000 	.word	0x43210000
 8001704:	4b840000 	.word	0x4b840000
 8001708:	4fb80000 	.word	0x4fb80000
 800170c:	47520000 	.word	0x47520000
 8001710:	36902000 	.word	0x36902000
 8001714:	25b00200 	.word	0x25b00200
 8001718:	21800100 	.word	0x21800100
 800171c:	1d500080 	.word	0x1d500080
 8001720:	19200040 	.word	0x19200040
 8001724:	40022100 	.word	0x40022100
 8001728:	40022300 	.word	0x40022300
 800172c:	58026300 	.word	0x58026300
 8001730:	58026000 	.word	0x58026000
 8001734:	cb840000 	.word	0xcb840000
 8001738:	24000000 	.word	0x24000000
 800173c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a31      	ldr	r2, [pc, #196]	@ (800180c <HAL_ADC_ConfigChannel+0x5c4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d11e      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x540>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d119      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a2d      	ldr	r2, [pc, #180]	@ (8001810 <HAL_ADC_ConfigChannel+0x5c8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d14b      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a2c      	ldr	r2, [pc, #176]	@ (8001814 <HAL_ADC_ConfigChannel+0x5cc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d004      	beq.n	8001772 <HAL_ADC_ConfigChannel+0x52a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a2a      	ldr	r2, [pc, #168]	@ (8001818 <HAL_ADC_ConfigChannel+0x5d0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x52e>
 8001772:	4a2a      	ldr	r2, [pc, #168]	@ (800181c <HAL_ADC_ConfigChannel+0x5d4>)
 8001774:	e000      	b.n	8001778 <HAL_ADC_ConfigChannel+0x530>
 8001776:	4a2a      	ldr	r2, [pc, #168]	@ (8001820 <HAL_ADC_ConfigChannel+0x5d8>)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800177e:	4619      	mov	r1, r3
 8001780:	4610      	mov	r0, r2
 8001782:	f7ff fa14 	bl	8000bae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001786:	e036      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a25      	ldr	r2, [pc, #148]	@ (8001824 <HAL_ADC_ConfigChannel+0x5dc>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d131      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x5ae>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d12c      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001810 <HAL_ADC_ConfigChannel+0x5c8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d127      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001814 <HAL_ADC_ConfigChannel+0x5cc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d004      	beq.n	80017ba <HAL_ADC_ConfigChannel+0x572>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a18      	ldr	r2, [pc, #96]	@ (8001818 <HAL_ADC_ConfigChannel+0x5d0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_ADC_ConfigChannel+0x576>
 80017ba:	4a18      	ldr	r2, [pc, #96]	@ (800181c <HAL_ADC_ConfigChannel+0x5d4>)
 80017bc:	e000      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x578>
 80017be:	4a18      	ldr	r2, [pc, #96]	@ (8001820 <HAL_ADC_ConfigChannel+0x5d8>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f7ff f9f0 	bl	8000bae <LL_ADC_SetCommonPathInternalCh>
 80017ce:	e012      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d4:	f043 0220 	orr.w	r2, r3, #32
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80017e2:	e008      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e8:	f043 0220 	orr.w	r2, r3, #32
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80017fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001802:	4618      	mov	r0, r3
 8001804:	3734      	adds	r7, #52	@ 0x34
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	c7520000 	.word	0xc7520000
 8001810:	58026000 	.word	0x58026000
 8001814:	40022000 	.word	0x40022000
 8001818:	40022100 	.word	0x40022100
 800181c:	40022300 	.word	0x40022300
 8001820:	58026300 	.word	0x58026300
 8001824:	cfb80000 	.word	0xcfb80000

08001828 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a7a      	ldr	r2, [pc, #488]	@ (8001a20 <ADC_ConfigureBoostMode+0x1f8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d004      	beq.n	8001844 <ADC_ConfigureBoostMode+0x1c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a79      	ldr	r2, [pc, #484]	@ (8001a24 <ADC_ConfigureBoostMode+0x1fc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d109      	bne.n	8001858 <ADC_ConfigureBoostMode+0x30>
 8001844:	4b78      	ldr	r3, [pc, #480]	@ (8001a28 <ADC_ConfigureBoostMode+0x200>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf14      	ite	ne
 8001850:	2301      	movne	r3, #1
 8001852:	2300      	moveq	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	e008      	b.n	800186a <ADC_ConfigureBoostMode+0x42>
 8001858:	4b74      	ldr	r3, [pc, #464]	@ (8001a2c <ADC_ConfigureBoostMode+0x204>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf14      	ite	ne
 8001864:	2301      	movne	r3, #1
 8001866:	2300      	moveq	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d01c      	beq.n	80018a8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800186e:	f001 fc91 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 8001872:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800187c:	d010      	beq.n	80018a0 <ADC_ConfigureBoostMode+0x78>
 800187e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001882:	d873      	bhi.n	800196c <ADC_ConfigureBoostMode+0x144>
 8001884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001888:	d002      	beq.n	8001890 <ADC_ConfigureBoostMode+0x68>
 800188a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800188e:	d16d      	bne.n	800196c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	fbb2 f3f3 	udiv	r3, r2, r3
 800189c:	60fb      	str	r3, [r7, #12]
        break;
 800189e:	e068      	b.n	8001972 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	60fb      	str	r3, [r7, #12]
        break;
 80018a6:	e064      	b.n	8001972 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80018a8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	f002 fec0 	bl	8004634 <HAL_RCCEx_GetPeriphCLKFreq>
 80018b4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80018be:	d051      	beq.n	8001964 <ADC_ConfigureBoostMode+0x13c>
 80018c0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80018c4:	d854      	bhi.n	8001970 <ADC_ConfigureBoostMode+0x148>
 80018c6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80018ca:	d047      	beq.n	800195c <ADC_ConfigureBoostMode+0x134>
 80018cc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80018d0:	d84e      	bhi.n	8001970 <ADC_ConfigureBoostMode+0x148>
 80018d2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80018d6:	d03d      	beq.n	8001954 <ADC_ConfigureBoostMode+0x12c>
 80018d8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80018dc:	d848      	bhi.n	8001970 <ADC_ConfigureBoostMode+0x148>
 80018de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018e2:	d033      	beq.n	800194c <ADC_ConfigureBoostMode+0x124>
 80018e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018e8:	d842      	bhi.n	8001970 <ADC_ConfigureBoostMode+0x148>
 80018ea:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80018ee:	d029      	beq.n	8001944 <ADC_ConfigureBoostMode+0x11c>
 80018f0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80018f4:	d83c      	bhi.n	8001970 <ADC_ConfigureBoostMode+0x148>
 80018f6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80018fa:	d01a      	beq.n	8001932 <ADC_ConfigureBoostMode+0x10a>
 80018fc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001900:	d836      	bhi.n	8001970 <ADC_ConfigureBoostMode+0x148>
 8001902:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001906:	d014      	beq.n	8001932 <ADC_ConfigureBoostMode+0x10a>
 8001908:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800190c:	d830      	bhi.n	8001970 <ADC_ConfigureBoostMode+0x148>
 800190e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001912:	d00e      	beq.n	8001932 <ADC_ConfigureBoostMode+0x10a>
 8001914:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001918:	d82a      	bhi.n	8001970 <ADC_ConfigureBoostMode+0x148>
 800191a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800191e:	d008      	beq.n	8001932 <ADC_ConfigureBoostMode+0x10a>
 8001920:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001924:	d824      	bhi.n	8001970 <ADC_ConfigureBoostMode+0x148>
 8001926:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800192a:	d002      	beq.n	8001932 <ADC_ConfigureBoostMode+0x10a>
 800192c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001930:	d11e      	bne.n	8001970 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	0c9b      	lsrs	r3, r3, #18
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	60fb      	str	r3, [r7, #12]
        break;
 8001942:	e016      	b.n	8001972 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	60fb      	str	r3, [r7, #12]
        break;
 800194a:	e012      	b.n	8001972 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	60fb      	str	r3, [r7, #12]
        break;
 8001952:	e00e      	b.n	8001972 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	60fb      	str	r3, [r7, #12]
        break;
 800195a:	e00a      	b.n	8001972 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	09db      	lsrs	r3, r3, #7
 8001960:	60fb      	str	r3, [r7, #12]
        break;
 8001962:	e006      	b.n	8001972 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	60fb      	str	r3, [r7, #12]
        break;
 800196a:	e002      	b.n	8001972 <ADC_ConfigureBoostMode+0x14a>
        break;
 800196c:	bf00      	nop
 800196e:	e000      	b.n	8001972 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8001970:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001972:	f7ff f8fd 	bl	8000b70 <HAL_GetREVID>
 8001976:	4603      	mov	r3, r0
 8001978:	f241 0203 	movw	r2, #4099	@ 0x1003
 800197c:	4293      	cmp	r3, r2
 800197e:	d815      	bhi.n	80019ac <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4a2b      	ldr	r2, [pc, #172]	@ (8001a30 <ADC_ConfigureBoostMode+0x208>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d908      	bls.n	800199a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001996:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001998:	e03e      	b.n	8001a18 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019a8:	609a      	str	r2, [r3, #8]
}
 80019aa:	e035      	b.n	8001a18 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	085b      	lsrs	r3, r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a34 <ADC_ConfigureBoostMode+0x20c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d808      	bhi.n	80019cc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80019c8:	609a      	str	r2, [r3, #8]
}
 80019ca:	e025      	b.n	8001a18 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001a38 <ADC_ConfigureBoostMode+0x210>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d80a      	bhi.n	80019ea <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019e6:	609a      	str	r2, [r3, #8]
}
 80019e8:	e016      	b.n	8001a18 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4a13      	ldr	r2, [pc, #76]	@ (8001a3c <ADC_ConfigureBoostMode+0x214>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d80a      	bhi.n	8001a08 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a04:	609a      	str	r2, [r3, #8]
}
 8001a06:	e007      	b.n	8001a18 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001a16:	609a      	str	r2, [r3, #8]
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40022000 	.word	0x40022000
 8001a24:	40022100 	.word	0x40022100
 8001a28:	40022300 	.word	0x40022300
 8001a2c:	58026300 	.word	0x58026300
 8001a30:	01312d00 	.word	0x01312d00
 8001a34:	005f5e10 	.word	0x005f5e10
 8001a38:	00bebc20 	.word	0x00bebc20
 8001a3c:	017d7840 	.word	0x017d7840

08001a40 <LL_ADC_IsEnabled>:
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <LL_ADC_IsEnabled+0x18>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <LL_ADC_IsEnabled+0x1a>
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_ADC_REG_IsConversionOngoing>:
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d101      	bne.n	8001a7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b09f      	sub	sp, #124	@ 0x7c
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e0be      	b.n	8001c28 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a5c      	ldr	r2, [pc, #368]	@ (8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d102      	bne.n	8001aca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ac4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	e001      	b.n	8001ace <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10b      	bne.n	8001aec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad8:	f043 0220 	orr.w	r2, r3, #32
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e09d      	b.n	8001c28 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ffb9 	bl	8001a66 <LL_ADC_REG_IsConversionOngoing>
 8001af4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ffb3 	bl	8001a66 <LL_ADC_REG_IsConversionOngoing>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d17f      	bne.n	8001c06 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001b06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d17c      	bne.n	8001c06 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a47      	ldr	r2, [pc, #284]	@ (8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a46      	ldr	r2, [pc, #280]	@ (8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8001b20:	4b45      	ldr	r3, [pc, #276]	@ (8001c38 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001b22:	e000      	b.n	8001b26 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8001b24:	4b45      	ldr	r3, [pc, #276]	@ (8001c3c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001b26:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d039      	beq.n	8001ba4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001b30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b40:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a3a      	ldr	r2, [pc, #232]	@ (8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d004      	beq.n	8001b56 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a38      	ldr	r2, [pc, #224]	@ (8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10e      	bne.n	8001b74 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001b56:	4836      	ldr	r0, [pc, #216]	@ (8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001b58:	f7ff ff72 	bl	8001a40 <LL_ADC_IsEnabled>
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	4835      	ldr	r0, [pc, #212]	@ (8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001b60:	f7ff ff6e 	bl	8001a40 <LL_ADC_IsEnabled>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4323      	orrs	r3, r4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2301      	moveq	r3, #1
 8001b6e:	2300      	movne	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	e008      	b.n	8001b86 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8001b74:	4832      	ldr	r0, [pc, #200]	@ (8001c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001b76:	f7ff ff63 	bl	8001a40 <LL_ADC_IsEnabled>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d047      	beq.n	8001c1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001b8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	6811      	ldr	r1, [r2, #0]
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	6892      	ldr	r2, [r2, #8]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ba0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ba2:	e03a      	b.n	8001c1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d004      	beq.n	8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d10e      	bne.n	8001be2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8001bc4:	481a      	ldr	r0, [pc, #104]	@ (8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001bc6:	f7ff ff3b 	bl	8001a40 <LL_ADC_IsEnabled>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	4819      	ldr	r0, [pc, #100]	@ (8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001bce:	f7ff ff37 	bl	8001a40 <LL_ADC_IsEnabled>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4323      	orrs	r3, r4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf0c      	ite	eq
 8001bda:	2301      	moveq	r3, #1
 8001bdc:	2300      	movne	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	e008      	b.n	8001bf4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001be2:	4817      	ldr	r0, [pc, #92]	@ (8001c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001be4:	f7ff ff2c 	bl	8001a40 <LL_ADC_IsEnabled>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf0c      	ite	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	2300      	movne	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d010      	beq.n	8001c1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001c02:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c04:	e009      	b.n	8001c1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0a:	f043 0220 	orr.w	r2, r3, #32
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001c18:	e000      	b.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c1a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c24:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	377c      	adds	r7, #124	@ 0x7c
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40022100 	.word	0x40022100
 8001c38:	40022300 	.word	0x40022300
 8001c3c:	58026300 	.word	0x58026300
 8001c40:	58026000 	.word	0x58026000
 8001c44:	fffff0e0 	.word	0xfffff0e0

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <__NVIC_SetPriorityGrouping+0x40>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <__NVIC_SetPriorityGrouping+0x40>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00
 8001c8c:	05fa0000 	.word	0x05fa0000

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	@ (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	@ (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	@ 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d8c:	f7ff ff8e 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff47 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff5e 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff90 	bl	8001d00 <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5f 	bl	8001cac <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffb2 	bl	8001d68 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	@ 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e1e:	4b89      	ldr	r3, [pc, #548]	@ (8002044 <HAL_GPIO_Init+0x234>)
 8001e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e22:	e194      	b.n	800214e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8186 	beq.w	8002148 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d005      	beq.n	8001e54 <HAL_GPIO_Init+0x44>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d130      	bne.n	8001eb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 0201 	and.w	r2, r3, #1
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d017      	beq.n	8001ef2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d123      	bne.n	8001f46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	69b9      	ldr	r1, [r7, #24]
 8001f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0203 	and.w	r2, r3, #3
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80e0 	beq.w	8002148 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f88:	4b2f      	ldr	r3, [pc, #188]	@ (8002048 <HAL_GPIO_Init+0x238>)
 8001f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8002048 <HAL_GPIO_Init+0x238>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f98:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <HAL_GPIO_Init+0x238>)
 8001f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa6:	4a29      	ldr	r2, [pc, #164]	@ (800204c <HAL_GPIO_Init+0x23c>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a20      	ldr	r2, [pc, #128]	@ (8002050 <HAL_GPIO_Init+0x240>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d052      	beq.n	8002078 <HAL_GPIO_Init+0x268>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002054 <HAL_GPIO_Init+0x244>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d031      	beq.n	800203e <HAL_GPIO_Init+0x22e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8002058 <HAL_GPIO_Init+0x248>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d02b      	beq.n	800203a <HAL_GPIO_Init+0x22a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800205c <HAL_GPIO_Init+0x24c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d025      	beq.n	8002036 <HAL_GPIO_Init+0x226>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <HAL_GPIO_Init+0x250>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01f      	beq.n	8002032 <HAL_GPIO_Init+0x222>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8002064 <HAL_GPIO_Init+0x254>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x21e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8002068 <HAL_GPIO_Init+0x258>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x21a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_GPIO_Init+0x25c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x216>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <HAL_GPIO_Init+0x260>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x212>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a17      	ldr	r2, [pc, #92]	@ (8002074 <HAL_GPIO_Init+0x264>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x20e>
 800201a:	2309      	movs	r3, #9
 800201c:	e02d      	b.n	800207a <HAL_GPIO_Init+0x26a>
 800201e:	230a      	movs	r3, #10
 8002020:	e02b      	b.n	800207a <HAL_GPIO_Init+0x26a>
 8002022:	2308      	movs	r3, #8
 8002024:	e029      	b.n	800207a <HAL_GPIO_Init+0x26a>
 8002026:	2307      	movs	r3, #7
 8002028:	e027      	b.n	800207a <HAL_GPIO_Init+0x26a>
 800202a:	2306      	movs	r3, #6
 800202c:	e025      	b.n	800207a <HAL_GPIO_Init+0x26a>
 800202e:	2305      	movs	r3, #5
 8002030:	e023      	b.n	800207a <HAL_GPIO_Init+0x26a>
 8002032:	2304      	movs	r3, #4
 8002034:	e021      	b.n	800207a <HAL_GPIO_Init+0x26a>
 8002036:	2303      	movs	r3, #3
 8002038:	e01f      	b.n	800207a <HAL_GPIO_Init+0x26a>
 800203a:	2302      	movs	r3, #2
 800203c:	e01d      	b.n	800207a <HAL_GPIO_Init+0x26a>
 800203e:	2301      	movs	r3, #1
 8002040:	e01b      	b.n	800207a <HAL_GPIO_Init+0x26a>
 8002042:	bf00      	nop
 8002044:	58000080 	.word	0x58000080
 8002048:	58024400 	.word	0x58024400
 800204c:	58000400 	.word	0x58000400
 8002050:	58020000 	.word	0x58020000
 8002054:	58020400 	.word	0x58020400
 8002058:	58020800 	.word	0x58020800
 800205c:	58020c00 	.word	0x58020c00
 8002060:	58021000 	.word	0x58021000
 8002064:	58021400 	.word	0x58021400
 8002068:	58021800 	.word	0x58021800
 800206c:	58021c00 	.word	0x58021c00
 8002070:	58022000 	.word	0x58022000
 8002074:	58022400 	.word	0x58022400
 8002078:	2300      	movs	r3, #0
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	f002 0203 	and.w	r2, r2, #3
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	4093      	lsls	r3, r2
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208a:	4938      	ldr	r1, [pc, #224]	@ (800216c <HAL_GPIO_Init+0x35c>)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	3301      	adds	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	f47f ae63 	bne.w	8001e24 <HAL_GPIO_Init+0x14>
  }
}
 800215e:	bf00      	nop
 8002160:	bf00      	nop
 8002162:	3724      	adds	r7, #36	@ 0x24
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	58000400 	.word	0x58000400

08002170 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002178:	4a08      	ldr	r2, [pc, #32]	@ (800219c <HAL_HSEM_FastTake+0x2c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3320      	adds	r3, #32
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	4a07      	ldr	r2, [pc, #28]	@ (80021a0 <HAL_HSEM_FastTake+0x30>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d101      	bne.n	800218c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	58026400 	.word	0x58026400
 80021a0:	80000300 	.word	0x80000300

080021a4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80021ae:	4906      	ldr	r1, [pc, #24]	@ (80021c8 <HAL_HSEM_Release+0x24>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	58026400 	.word	0x58026400

080021cc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80021d4:	4b29      	ldr	r3, [pc, #164]	@ (800227c <HAL_PWREx_ConfigSupply+0xb0>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	2b06      	cmp	r3, #6
 80021de:	d00a      	beq.n	80021f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021e0:	4b26      	ldr	r3, [pc, #152]	@ (800227c <HAL_PWREx_ConfigSupply+0xb0>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d001      	beq.n	80021f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e040      	b.n	8002274 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e03e      	b.n	8002274 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021f6:	4b21      	ldr	r3, [pc, #132]	@ (800227c <HAL_PWREx_ConfigSupply+0xb0>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80021fe:	491f      	ldr	r1, [pc, #124]	@ (800227c <HAL_PWREx_ConfigSupply+0xb0>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4313      	orrs	r3, r2
 8002204:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002206:	f7fe fca7 	bl	8000b58 <HAL_GetTick>
 800220a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800220c:	e009      	b.n	8002222 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800220e:	f7fe fca3 	bl	8000b58 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800221c:	d901      	bls.n	8002222 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e028      	b.n	8002274 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002222:	4b16      	ldr	r3, [pc, #88]	@ (800227c <HAL_PWREx_ConfigSupply+0xb0>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800222a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800222e:	d1ee      	bne.n	800220e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b1e      	cmp	r3, #30
 8002234:	d008      	beq.n	8002248 <HAL_PWREx_ConfigSupply+0x7c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b2e      	cmp	r3, #46	@ 0x2e
 800223a:	d005      	beq.n	8002248 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b1d      	cmp	r3, #29
 8002240:	d002      	beq.n	8002248 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b2d      	cmp	r3, #45	@ 0x2d
 8002246:	d114      	bne.n	8002272 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002248:	f7fe fc86 	bl	8000b58 <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800224e:	e009      	b.n	8002264 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002250:	f7fe fc82 	bl	8000b58 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800225e:	d901      	bls.n	8002264 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e007      	b.n	8002274 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002264:	4b05      	ldr	r3, [pc, #20]	@ (800227c <HAL_PWREx_ConfigSupply+0xb0>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002270:	d1ee      	bne.n	8002250 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	58024800 	.word	0x58024800

08002280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	@ 0x30
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	f000 bc48 	b.w	8002b24 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8088 	beq.w	80023b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a2:	4b99      	ldr	r3, [pc, #612]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022ac:	4b96      	ldr	r3, [pc, #600]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b4:	2b10      	cmp	r3, #16
 80022b6:	d007      	beq.n	80022c8 <HAL_RCC_OscConfig+0x48>
 80022b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ba:	2b18      	cmp	r3, #24
 80022bc:	d111      	bne.n	80022e2 <HAL_RCC_OscConfig+0x62>
 80022be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d10c      	bne.n	80022e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d06d      	beq.n	80023b0 <HAL_RCC_OscConfig+0x130>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d169      	bne.n	80023b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	f000 bc21 	b.w	8002b24 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x7a>
 80022ec:	4b86      	ldr	r3, [pc, #536]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a85      	ldr	r2, [pc, #532]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	e02e      	b.n	8002358 <HAL_RCC_OscConfig+0xd8>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x9c>
 8002302:	4b81      	ldr	r3, [pc, #516]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a80      	ldr	r2, [pc, #512]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	4b7e      	ldr	r3, [pc, #504]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a7d      	ldr	r2, [pc, #500]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e01d      	b.n	8002358 <HAL_RCC_OscConfig+0xd8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0xc0>
 8002326:	4b78      	ldr	r3, [pc, #480]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a77      	ldr	r2, [pc, #476]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 800232c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b75      	ldr	r3, [pc, #468]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a74      	ldr	r2, [pc, #464]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e00b      	b.n	8002358 <HAL_RCC_OscConfig+0xd8>
 8002340:	4b71      	ldr	r3, [pc, #452]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a70      	ldr	r2, [pc, #448]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b6e      	ldr	r3, [pc, #440]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a6d      	ldr	r2, [pc, #436]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fbfa 	bl	8000b58 <HAL_GetTick>
 8002364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002368:	f7fe fbf6 	bl	8000b58 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	@ 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e3d4      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800237a:	4b63      	ldr	r3, [pc, #396]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0xe8>
 8002386:	e014      	b.n	80023b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fbe6 	bl	8000b58 <HAL_GetTick>
 800238c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002390:	f7fe fbe2 	bl	8000b58 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	@ 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e3c0      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023a2:	4b59      	ldr	r3, [pc, #356]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x110>
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80ca 	beq.w	8002554 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c0:	4b51      	ldr	r3, [pc, #324]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80023cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d007      	beq.n	80023e6 <HAL_RCC_OscConfig+0x166>
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	2b18      	cmp	r3, #24
 80023da:	d156      	bne.n	800248a <HAL_RCC_OscConfig+0x20a>
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d151      	bne.n	800248a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e6:	4b48      	ldr	r3, [pc, #288]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x17e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e392      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023fe:	4b42      	ldr	r3, [pc, #264]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0219 	bic.w	r2, r3, #25
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	493f      	ldr	r1, [pc, #252]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 800240c:	4313      	orrs	r3, r2
 800240e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fba2 	bl	8000b58 <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002418:	f7fe fb9e 	bl	8000b58 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e37c      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800242a:	4b37      	ldr	r3, [pc, #220]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	f7fe fb9b 	bl	8000b70 <HAL_GetREVID>
 800243a:	4603      	mov	r3, r0
 800243c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002440:	4293      	cmp	r3, r2
 8002442:	d817      	bhi.n	8002474 <HAL_RCC_OscConfig+0x1f4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2b40      	cmp	r3, #64	@ 0x40
 800244a:	d108      	bne.n	800245e <HAL_RCC_OscConfig+0x1de>
 800244c:	4b2e      	ldr	r3, [pc, #184]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002454:	4a2c      	ldr	r2, [pc, #176]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800245a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245c:	e07a      	b.n	8002554 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	4b2a      	ldr	r3, [pc, #168]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	031b      	lsls	r3, r3, #12
 800246c:	4926      	ldr	r1, [pc, #152]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002472:	e06f      	b.n	8002554 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	061b      	lsls	r3, r3, #24
 8002482:	4921      	ldr	r1, [pc, #132]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002488:	e064      	b.n	8002554 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d047      	beq.n	8002522 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002492:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 0219 	bic.w	r2, r3, #25
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	491a      	ldr	r1, [pc, #104]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fb58 	bl	8000b58 <HAL_GetTick>
 80024a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7fe fb54 	bl	8000b58 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e332      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024be:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	f7fe fb51 	bl	8000b70 <HAL_GetREVID>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d819      	bhi.n	800250c <HAL_RCC_OscConfig+0x28c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b40      	cmp	r3, #64	@ 0x40
 80024de:	d108      	bne.n	80024f2 <HAL_RCC_OscConfig+0x272>
 80024e0:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024e8:	4a07      	ldr	r2, [pc, #28]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80024ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ee:	6053      	str	r3, [r2, #4]
 80024f0:	e030      	b.n	8002554 <HAL_RCC_OscConfig+0x2d4>
 80024f2:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	031b      	lsls	r3, r3, #12
 8002500:	4901      	ldr	r1, [pc, #4]	@ (8002508 <HAL_RCC_OscConfig+0x288>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
 8002506:	e025      	b.n	8002554 <HAL_RCC_OscConfig+0x2d4>
 8002508:	58024400 	.word	0x58024400
 800250c:	4b9a      	ldr	r3, [pc, #616]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	4997      	ldr	r1, [pc, #604]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
 8002520:	e018      	b.n	8002554 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002522:	4b95      	ldr	r3, [pc, #596]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a94      	ldr	r2, [pc, #592]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7fe fb13 	bl	8000b58 <HAL_GetTick>
 8002532:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002536:	f7fe fb0f 	bl	8000b58 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e2ed      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002548:	4b8b      	ldr	r3, [pc, #556]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80a9 	beq.w	80026b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002562:	4b85      	ldr	r3, [pc, #532]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800256a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800256c:	4b82      	ldr	r3, [pc, #520]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d007      	beq.n	8002588 <HAL_RCC_OscConfig+0x308>
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b18      	cmp	r3, #24
 800257c:	d13a      	bne.n	80025f4 <HAL_RCC_OscConfig+0x374>
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d135      	bne.n	80025f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002588:	4b7b      	ldr	r3, [pc, #492]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_OscConfig+0x320>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	2b80      	cmp	r3, #128	@ 0x80
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e2c1      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025a0:	f7fe fae6 	bl	8000b70 <HAL_GetREVID>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d817      	bhi.n	80025de <HAL_RCC_OscConfig+0x35e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	d108      	bne.n	80025c8 <HAL_RCC_OscConfig+0x348>
 80025b6:	4b70      	ldr	r3, [pc, #448]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025be:	4a6e      	ldr	r2, [pc, #440]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80025c4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025c6:	e075      	b.n	80026b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	069b      	lsls	r3, r3, #26
 80025d6:	4968      	ldr	r1, [pc, #416]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025dc:	e06a      	b.n	80026b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025de:	4b66      	ldr	r3, [pc, #408]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	4962      	ldr	r1, [pc, #392]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025f2:	e05f      	b.n	80026b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d042      	beq.n	8002682 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a5d      	ldr	r2, [pc, #372]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe faa6 	bl	8000b58 <HAL_GetTick>
 800260c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002610:	f7fe faa2 	bl	8000b58 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e280      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002622:	4b55      	ldr	r3, [pc, #340]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800262e:	f7fe fa9f 	bl	8000b70 <HAL_GetREVID>
 8002632:	4603      	mov	r3, r0
 8002634:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002638:	4293      	cmp	r3, r2
 800263a:	d817      	bhi.n	800266c <HAL_RCC_OscConfig+0x3ec>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	2b20      	cmp	r3, #32
 8002642:	d108      	bne.n	8002656 <HAL_RCC_OscConfig+0x3d6>
 8002644:	4b4c      	ldr	r3, [pc, #304]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800264c:	4a4a      	ldr	r2, [pc, #296]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 800264e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002652:	6053      	str	r3, [r2, #4]
 8002654:	e02e      	b.n	80026b4 <HAL_RCC_OscConfig+0x434>
 8002656:	4b48      	ldr	r3, [pc, #288]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	069b      	lsls	r3, r3, #26
 8002664:	4944      	ldr	r1, [pc, #272]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
 800266a:	e023      	b.n	80026b4 <HAL_RCC_OscConfig+0x434>
 800266c:	4b42      	ldr	r3, [pc, #264]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	493f      	ldr	r1, [pc, #252]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 800267c:	4313      	orrs	r3, r2
 800267e:	60cb      	str	r3, [r1, #12]
 8002680:	e018      	b.n	80026b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002682:	4b3d      	ldr	r3, [pc, #244]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a3c      	ldr	r2, [pc, #240]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800268c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7fe fa63 	bl	8000b58 <HAL_GetTick>
 8002692:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002696:	f7fe fa5f 	bl	8000b58 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e23d      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026a8:	4b33      	ldr	r3, [pc, #204]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d036      	beq.n	800272e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d019      	beq.n	80026fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 80026ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe fa40 	bl	8000b58 <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026dc:	f7fe fa3c 	bl	8000b58 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e21a      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ee:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 80026f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x45c>
 80026fa:	e018      	b.n	800272e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 80026fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002700:	4a1d      	ldr	r2, [pc, #116]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7fe fa26 	bl	8000b58 <HAL_GetTick>
 800270c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002710:	f7fe fa22 	bl	8000b58 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e200      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002722:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d039      	beq.n	80027ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d01c      	beq.n	800277c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002742:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a0c      	ldr	r2, [pc, #48]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002748:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800274c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800274e:	f7fe fa03 	bl	8000b58 <HAL_GetTick>
 8002752:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002756:	f7fe f9ff 	bl	8000b58 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1dd      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002768:	4b03      	ldr	r3, [pc, #12]	@ (8002778 <HAL_RCC_OscConfig+0x4f8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x4d6>
 8002774:	e01b      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
 8002776:	bf00      	nop
 8002778:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800277c:	4b9b      	ldr	r3, [pc, #620]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a9a      	ldr	r2, [pc, #616]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002782:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002786:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002788:	f7fe f9e6 	bl	8000b58 <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002790:	f7fe f9e2 	bl	8000b58 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e1c0      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027a2:	4b92      	ldr	r3, [pc, #584]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8081 	beq.w	80028be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027bc:	4b8c      	ldr	r3, [pc, #560]	@ (80029f0 <HAL_RCC_OscConfig+0x770>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a8b      	ldr	r2, [pc, #556]	@ (80029f0 <HAL_RCC_OscConfig+0x770>)
 80027c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027c8:	f7fe f9c6 	bl	8000b58 <HAL_GetTick>
 80027cc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d0:	f7fe f9c2 	bl	8000b58 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	@ 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e1a0      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027e2:	4b83      	ldr	r3, [pc, #524]	@ (80029f0 <HAL_RCC_OscConfig+0x770>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d106      	bne.n	8002804 <HAL_RCC_OscConfig+0x584>
 80027f6:	4b7d      	ldr	r3, [pc, #500]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fa:	4a7c      	ldr	r2, [pc, #496]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6713      	str	r3, [r2, #112]	@ 0x70
 8002802:	e02d      	b.n	8002860 <HAL_RCC_OscConfig+0x5e0>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10c      	bne.n	8002826 <HAL_RCC_OscConfig+0x5a6>
 800280c:	4b77      	ldr	r3, [pc, #476]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002810:	4a76      	ldr	r2, [pc, #472]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6713      	str	r3, [r2, #112]	@ 0x70
 8002818:	4b74      	ldr	r3, [pc, #464]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281c:	4a73      	ldr	r2, [pc, #460]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 800281e:	f023 0304 	bic.w	r3, r3, #4
 8002822:	6713      	str	r3, [r2, #112]	@ 0x70
 8002824:	e01c      	b.n	8002860 <HAL_RCC_OscConfig+0x5e0>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b05      	cmp	r3, #5
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c8>
 800282e:	4b6f      	ldr	r3, [pc, #444]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002832:	4a6e      	ldr	r2, [pc, #440]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	6713      	str	r3, [r2, #112]	@ 0x70
 800283a:	4b6c      	ldr	r3, [pc, #432]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283e:	4a6b      	ldr	r2, [pc, #428]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	@ 0x70
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0x5e0>
 8002848:	4b68      	ldr	r3, [pc, #416]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284c:	4a67      	ldr	r2, [pc, #412]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	6713      	str	r3, [r2, #112]	@ 0x70
 8002854:	4b65      	ldr	r3, [pc, #404]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002858:	4a64      	ldr	r2, [pc, #400]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 800285a:	f023 0304 	bic.w	r3, r3, #4
 800285e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7fe f976 	bl	8000b58 <HAL_GetTick>
 800286c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800286e:	e00a      	b.n	8002886 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002870:	f7fe f972 	bl	8000b58 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e14e      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002886:	4b59      	ldr	r3, [pc, #356]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0ee      	beq.n	8002870 <HAL_RCC_OscConfig+0x5f0>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe f960 	bl	8000b58 <HAL_GetTick>
 8002898:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe f95c 	bl	8000b58 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e138      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028b2:	4b4e      	ldr	r3, [pc, #312]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ee      	bne.n	800289c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 812d 	beq.w	8002b22 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028c8:	4b48      	ldr	r3, [pc, #288]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028d0:	2b18      	cmp	r3, #24
 80028d2:	f000 80bd 	beq.w	8002a50 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	2b02      	cmp	r3, #2
 80028dc:	f040 809e 	bne.w	8002a1c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e0:	4b42      	ldr	r3, [pc, #264]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a41      	ldr	r2, [pc, #260]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80028e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe f934 	bl	8000b58 <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe f930 	bl	8000b58 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e10e      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002906:	4b39      	ldr	r3, [pc, #228]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002912:	4b36      	ldr	r3, [pc, #216]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002916:	4b37      	ldr	r3, [pc, #220]	@ (80029f4 <HAL_RCC_OscConfig+0x774>)
 8002918:	4013      	ands	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002922:	0112      	lsls	r2, r2, #4
 8002924:	430a      	orrs	r2, r1
 8002926:	4931      	ldr	r1, [pc, #196]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002928:	4313      	orrs	r3, r2
 800292a:	628b      	str	r3, [r1, #40]	@ 0x28
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002930:	3b01      	subs	r3, #1
 8002932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293a:	3b01      	subs	r3, #1
 800293c:	025b      	lsls	r3, r3, #9
 800293e:	b29b      	uxth	r3, r3
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002946:	3b01      	subs	r3, #1
 8002948:	041b      	lsls	r3, r3, #16
 800294a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002954:	3b01      	subs	r3, #1
 8002956:	061b      	lsls	r3, r3, #24
 8002958:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800295c:	4923      	ldr	r1, [pc, #140]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 800295e:	4313      	orrs	r3, r2
 8002960:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002962:	4b22      	ldr	r3, [pc, #136]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002966:	4a21      	ldr	r2, [pc, #132]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800296e:	4b1f      	ldr	r3, [pc, #124]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002972:	4b21      	ldr	r3, [pc, #132]	@ (80029f8 <HAL_RCC_OscConfig+0x778>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800297a:	00d2      	lsls	r2, r2, #3
 800297c:	491b      	ldr	r1, [pc, #108]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002982:	4b1a      	ldr	r3, [pc, #104]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002986:	f023 020c 	bic.w	r2, r3, #12
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	4917      	ldr	r1, [pc, #92]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002990:	4313      	orrs	r3, r2
 8002992:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002994:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 8002996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002998:	f023 0202 	bic.w	r2, r3, #2
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a0:	4912      	ldr	r1, [pc, #72]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029a6:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	4a10      	ldr	r2, [pc, #64]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b2:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	4a0d      	ldr	r2, [pc, #52]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029be:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	4a0a      	ldr	r2, [pc, #40]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029ca:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80029cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ce:	4a07      	ldr	r2, [pc, #28]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d6:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a04      	ldr	r2, [pc, #16]	@ (80029ec <HAL_RCC_OscConfig+0x76c>)
 80029dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe f8b9 	bl	8000b58 <HAL_GetTick>
 80029e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029e8:	e011      	b.n	8002a0e <HAL_RCC_OscConfig+0x78e>
 80029ea:	bf00      	nop
 80029ec:	58024400 	.word	0x58024400
 80029f0:	58024800 	.word	0x58024800
 80029f4:	fffffc0c 	.word	0xfffffc0c
 80029f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe f8ac 	bl	8000b58 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e08a      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a0e:	4b47      	ldr	r3, [pc, #284]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x77c>
 8002a1a:	e082      	b.n	8002b22 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	4b43      	ldr	r3, [pc, #268]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a42      	ldr	r2, [pc, #264]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe f896 	bl	8000b58 <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe f892 	bl	8000b58 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e070      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a42:	4b3a      	ldr	r3, [pc, #232]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x7b0>
 8002a4e:	e068      	b.n	8002b22 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a50:	4b36      	ldr	r3, [pc, #216]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a56:	4b35      	ldr	r3, [pc, #212]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d031      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f003 0203 	and.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d12a      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d122      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d11a      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	0a5b      	lsrs	r3, r3, #9
 8002a96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d111      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	0c1b      	lsrs	r3, r3, #16
 8002aa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	0e1b      	lsrs	r3, r3, #24
 8002aba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e02b      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002acc:	4b17      	ldr	r3, [pc, #92]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad0:	08db      	lsrs	r3, r3, #3
 8002ad2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ad6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d01f      	beq.n	8002b22 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ae2:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	4a11      	ldr	r2, [pc, #68]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aee:	f7fe f833 	bl	8000b58 <HAL_GetTick>
 8002af2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002af4:	bf00      	nop
 8002af6:	f7fe f82f 	bl	8000b58 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d0f9      	beq.n	8002af6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b02:	4b0a      	ldr	r3, [pc, #40]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b06:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <HAL_RCC_OscConfig+0x8b0>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b0e:	00d2      	lsls	r2, r2, #3
 8002b10:	4906      	ldr	r1, [pc, #24]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b16:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1a:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <HAL_RCC_OscConfig+0x8ac>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3730      	adds	r7, #48	@ 0x30
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	58024400 	.word	0x58024400
 8002b30:	ffff0007 	.word	0xffff0007

08002b34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e19c      	b.n	8002e82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b48:	4b8a      	ldr	r3, [pc, #552]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d910      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b87      	ldr	r3, [pc, #540]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 020f 	bic.w	r2, r3, #15
 8002b5e:	4985      	ldr	r1, [pc, #532]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b83      	ldr	r3, [pc, #524]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e184      	b.n	8002e82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d010      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	4b7b      	ldr	r3, [pc, #492]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d908      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b94:	4b78      	ldr	r3, [pc, #480]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	4975      	ldr	r1, [pc, #468]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d010      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	4b70      	ldr	r3, [pc, #448]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d908      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	496a      	ldr	r1, [pc, #424]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d010      	beq.n	8002c02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	4b64      	ldr	r3, [pc, #400]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d908      	bls.n	8002c02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bf0:	4b61      	ldr	r3, [pc, #388]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	495e      	ldr	r1, [pc, #376]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69da      	ldr	r2, [r3, #28]
 8002c12:	4b59      	ldr	r3, [pc, #356]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d908      	bls.n	8002c30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c1e:	4b56      	ldr	r3, [pc, #344]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	4953      	ldr	r1, [pc, #332]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	4b4d      	ldr	r3, [pc, #308]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d908      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f023 020f 	bic.w	r2, r3, #15
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4947      	ldr	r1, [pc, #284]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d055      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c6a:	4b43      	ldr	r3, [pc, #268]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	4940      	ldr	r1, [pc, #256]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c84:	4b3c      	ldr	r3, [pc, #240]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d121      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0f6      	b.n	8002e82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c9c:	4b36      	ldr	r3, [pc, #216]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d115      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0ea      	b.n	8002e82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cb4:	4b30      	ldr	r3, [pc, #192]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0de      	b.n	8002e82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0d6      	b.n	8002e82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cd4:	4b28      	ldr	r3, [pc, #160]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f023 0207 	bic.w	r2, r3, #7
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4925      	ldr	r1, [pc, #148]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce6:	f7fd ff37 	bl	8000b58 <HAL_GetTick>
 8002cea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cee:	f7fd ff33 	bl	8000b58 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e0be      	b.n	8002e82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d04:	4b1c      	ldr	r3, [pc, #112]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d1eb      	bne.n	8002cee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d010      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d208      	bcs.n	8002d44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d32:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f023 020f 	bic.w	r2, r3, #15
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	490e      	ldr	r1, [pc, #56]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d44:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d214      	bcs.n	8002d7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 020f 	bic.w	r2, r3, #15
 8002d5a:	4906      	ldr	r1, [pc, #24]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e086      	b.n	8002e82 <HAL_RCC_ClockConfig+0x34e>
 8002d74:	52002000 	.word	0x52002000
 8002d78:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d208      	bcs.n	8002daa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d98:	4b3c      	ldr	r3, [pc, #240]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	4939      	ldr	r1, [pc, #228]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	4b34      	ldr	r3, [pc, #208]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d208      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dc6:	4b31      	ldr	r3, [pc, #196]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	492e      	ldr	r1, [pc, #184]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	4b28      	ldr	r3, [pc, #160]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d208      	bcs.n	8002e06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002df4:	4b25      	ldr	r3, [pc, #148]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	4922      	ldr	r1, [pc, #136]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d010      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	4b1d      	ldr	r3, [pc, #116]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d208      	bcs.n	8002e34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e22:	4b1a      	ldr	r3, [pc, #104]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4917      	ldr	r1, [pc, #92]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e34:	f000 f834 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b14      	ldr	r3, [pc, #80]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	4912      	ldr	r1, [pc, #72]	@ (8002e90 <HAL_RCC_ClockConfig+0x35c>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e52:	4b0e      	ldr	r3, [pc, #56]	@ (8002e8c <HAL_RCC_ClockConfig+0x358>)
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8002e90 <HAL_RCC_ClockConfig+0x35c>)
 8002e5c:	5cd3      	ldrb	r3, [r2, r3]
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
 8002e68:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <HAL_RCC_ClockConfig+0x360>)
 8002e6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e98 <HAL_RCC_ClockConfig+0x364>)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e72:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <HAL_RCC_ClockConfig+0x368>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd fe24 	bl	8000ac4 <HAL_InitTick>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	58024400 	.word	0x58024400
 8002e90:	08005c8c 	.word	0x08005c8c
 8002e94:	24000004 	.word	0x24000004
 8002e98:	24000000 	.word	0x24000000
 8002e9c:	24000008 	.word	0x24000008

08002ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	@ 0x24
 8002ea4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea6:	4bb3      	ldr	r3, [pc, #716]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eae:	2b18      	cmp	r3, #24
 8002eb0:	f200 8155 	bhi.w	800315e <HAL_RCC_GetSysClockFreq+0x2be>
 8002eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8002ebc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002f21 	.word	0x08002f21
 8002ec0:	0800315f 	.word	0x0800315f
 8002ec4:	0800315f 	.word	0x0800315f
 8002ec8:	0800315f 	.word	0x0800315f
 8002ecc:	0800315f 	.word	0x0800315f
 8002ed0:	0800315f 	.word	0x0800315f
 8002ed4:	0800315f 	.word	0x0800315f
 8002ed8:	0800315f 	.word	0x0800315f
 8002edc:	08002f47 	.word	0x08002f47
 8002ee0:	0800315f 	.word	0x0800315f
 8002ee4:	0800315f 	.word	0x0800315f
 8002ee8:	0800315f 	.word	0x0800315f
 8002eec:	0800315f 	.word	0x0800315f
 8002ef0:	0800315f 	.word	0x0800315f
 8002ef4:	0800315f 	.word	0x0800315f
 8002ef8:	0800315f 	.word	0x0800315f
 8002efc:	08002f4d 	.word	0x08002f4d
 8002f00:	0800315f 	.word	0x0800315f
 8002f04:	0800315f 	.word	0x0800315f
 8002f08:	0800315f 	.word	0x0800315f
 8002f0c:	0800315f 	.word	0x0800315f
 8002f10:	0800315f 	.word	0x0800315f
 8002f14:	0800315f 	.word	0x0800315f
 8002f18:	0800315f 	.word	0x0800315f
 8002f1c:	08002f53 	.word	0x08002f53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f20:	4b94      	ldr	r3, [pc, #592]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f2c:	4b91      	ldr	r3, [pc, #580]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	08db      	lsrs	r3, r3, #3
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	4a90      	ldr	r2, [pc, #576]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f38:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f3e:	e111      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f40:	4b8d      	ldr	r3, [pc, #564]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f42:	61bb      	str	r3, [r7, #24]
      break;
 8002f44:	e10e      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f46:	4b8d      	ldr	r3, [pc, #564]	@ (800317c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f48:	61bb      	str	r3, [r7, #24]
      break;
 8002f4a:	e10b      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f4e:	61bb      	str	r3, [r7, #24]
      break;
 8002f50:	e108      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f52:	4b88      	ldr	r3, [pc, #544]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f5c:	4b85      	ldr	r3, [pc, #532]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f68:	4b82      	ldr	r3, [pc, #520]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f72:	4b80      	ldr	r3, [pc, #512]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f76:	08db      	lsrs	r3, r3, #3
 8002f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80e1 	beq.w	8003158 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	f000 8083 	beq.w	80030a4 <HAL_RCC_GetSysClockFreq+0x204>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	f200 80a1 	bhi.w	80030e8 <HAL_RCC_GetSysClockFreq+0x248>
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x114>
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d056      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002fb2:	e099      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d02d      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fc0:	4b6c      	ldr	r3, [pc, #432]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	08db      	lsrs	r3, r3, #3
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	4a6b      	ldr	r2, [pc, #428]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fea:	4b62      	ldr	r3, [pc, #392]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003184 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800300a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800300e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003016:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800301a:	e087      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003188 <HAL_RCC_GetSysClockFreq+0x2e8>
 800302a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302e:	4b51      	ldr	r3, [pc, #324]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003042:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003184 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800304a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800305e:	e065      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800318c <HAL_RCC_GetSysClockFreq+0x2ec>
 800306e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003072:	4b40      	ldr	r3, [pc, #256]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003082:	ed97 6a02 	vldr	s12, [r7, #8]
 8003086:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003184 <HAL_RCC_GetSysClockFreq+0x2e4>
 800308a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800309a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030a2:	e043      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003190 <HAL_RCC_GetSysClockFreq+0x2f0>
 80030b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003184 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030e6:	e021      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800318c <HAL_RCC_GetSysClockFreq+0x2ec>
 80030f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800310a:	ed97 6a02 	vldr	s12, [r7, #8]
 800310e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003184 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800311a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800311e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003126:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800312a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800312c:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003130:	0a5b      	lsrs	r3, r3, #9
 8003132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003136:	3301      	adds	r3, #1
 8003138:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003144:	edd7 6a07 	vldr	s13, [r7, #28]
 8003148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800314c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003150:	ee17 3a90 	vmov	r3, s15
 8003154:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003156:	e005      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
      break;
 800315c:	e002      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800315e:	4b07      	ldr	r3, [pc, #28]	@ (800317c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003160:	61bb      	str	r3, [r7, #24]
      break;
 8003162:	bf00      	nop
  }

  return sysclockfreq;
 8003164:	69bb      	ldr	r3, [r7, #24]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	@ 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	58024400 	.word	0x58024400
 8003178:	03d09000 	.word	0x03d09000
 800317c:	003d0900 	.word	0x003d0900
 8003180:	017d7840 	.word	0x017d7840
 8003184:	46000000 	.word	0x46000000
 8003188:	4c742400 	.word	0x4c742400
 800318c:	4a742400 	.word	0x4a742400
 8003190:	4bbebc20 	.word	0x4bbebc20

08003194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800319a:	f7ff fe81 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 800319e:	4602      	mov	r2, r0
 80031a0:	4b10      	ldr	r3, [pc, #64]	@ (80031e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	490f      	ldr	r1, [pc, #60]	@ (80031e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80031ac:	5ccb      	ldrb	r3, [r1, r3]
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	fa22 f303 	lsr.w	r3, r2, r3
 80031b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031b8:	4b0a      	ldr	r3, [pc, #40]	@ (80031e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	4a09      	ldr	r2, [pc, #36]	@ (80031e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80031c2:	5cd3      	ldrb	r3, [r2, r3]
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	fa22 f303 	lsr.w	r3, r2, r3
 80031ce:	4a07      	ldr	r2, [pc, #28]	@ (80031ec <HAL_RCC_GetHCLKFreq+0x58>)
 80031d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031d2:	4a07      	ldr	r2, [pc, #28]	@ (80031f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031d8:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <HAL_RCC_GetHCLKFreq+0x58>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	58024400 	.word	0x58024400
 80031e8:	08005c8c 	.word	0x08005c8c
 80031ec:	24000004 	.word	0x24000004
 80031f0:	24000000 	.word	0x24000000

080031f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031f8:	f7ff ffcc 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4904      	ldr	r1, [pc, #16]	@ (800321c <HAL_RCC_GetPCLK1Freq+0x28>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	58024400 	.word	0x58024400
 800321c:	08005c8c 	.word	0x08005c8c

08003220 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003224:	b0ca      	sub	sp, #296	@ 0x128
 8003226:	af00      	add	r7, sp, #0
 8003228:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800322c:	2300      	movs	r3, #0
 800322e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003232:	2300      	movs	r3, #0
 8003234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003244:	2500      	movs	r5, #0
 8003246:	ea54 0305 	orrs.w	r3, r4, r5
 800324a:	d049      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800324c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003250:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003252:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003256:	d02f      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003258:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800325c:	d828      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800325e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003262:	d01a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003264:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003268:	d822      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800326e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003272:	d007      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003274:	e01c      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003276:	4bb8      	ldr	r3, [pc, #736]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327a:	4ab7      	ldr	r2, [pc, #732]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800327c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003280:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003282:	e01a      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003288:	3308      	adds	r3, #8
 800328a:	2102      	movs	r1, #2
 800328c:	4618      	mov	r0, r3
 800328e:	f002 fb61 	bl	8005954 <RCCEx_PLL2_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003298:	e00f      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800329a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329e:	3328      	adds	r3, #40	@ 0x28
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f002 fc08 	bl	8005ab8 <RCCEx_PLL3_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032ae:	e004      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032b6:	e000      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032c2:	4ba5      	ldr	r3, [pc, #660]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032d0:	4aa1      	ldr	r2, [pc, #644]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032d2:	430b      	orrs	r3, r1
 80032d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80032d6:	e003      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80032ec:	f04f 0900 	mov.w	r9, #0
 80032f0:	ea58 0309 	orrs.w	r3, r8, r9
 80032f4:	d047      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80032f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d82a      	bhi.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003300:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	0800331d 	.word	0x0800331d
 800330c:	0800332b 	.word	0x0800332b
 8003310:	08003341 	.word	0x08003341
 8003314:	0800335f 	.word	0x0800335f
 8003318:	0800335f 	.word	0x0800335f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800331c:	4b8e      	ldr	r3, [pc, #568]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	4a8d      	ldr	r2, [pc, #564]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003326:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003328:	e01a      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800332a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332e:	3308      	adds	r3, #8
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f002 fb0e 	bl	8005954 <RCCEx_PLL2_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800333e:	e00f      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003344:	3328      	adds	r3, #40	@ 0x28
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f002 fbb5 	bl	8005ab8 <RCCEx_PLL3_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003354:	e004      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800335c:	e000      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800335e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003368:	4b7b      	ldr	r3, [pc, #492]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800336a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800336c:	f023 0107 	bic.w	r1, r3, #7
 8003370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	4a78      	ldr	r2, [pc, #480]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003378:	430b      	orrs	r3, r1
 800337a:	6513      	str	r3, [r2, #80]	@ 0x50
 800337c:	e003      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003392:	f04f 0b00 	mov.w	fp, #0
 8003396:	ea5a 030b 	orrs.w	r3, sl, fp
 800339a:	d04c      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033a6:	d030      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80033a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ac:	d829      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80033b0:	d02d      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80033b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80033b4:	d825      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033b6:	2b80      	cmp	r3, #128	@ 0x80
 80033b8:	d018      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033ba:	2b80      	cmp	r3, #128	@ 0x80
 80033bc:	d821      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80033c2:	2b40      	cmp	r3, #64	@ 0x40
 80033c4:	d007      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80033c6:	e01c      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c8:	4b63      	ldr	r3, [pc, #396]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	4a62      	ldr	r2, [pc, #392]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033d4:	e01c      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033da:	3308      	adds	r3, #8
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f002 fab8 	bl	8005954 <RCCEx_PLL2_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033ea:	e011      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f0:	3328      	adds	r3, #40	@ 0x28
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f002 fb5f 	bl	8005ab8 <RCCEx_PLL3_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003400:	e006      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003408:	e002      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800340a:	bf00      	nop
 800340c:	e000      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800340e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10a      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003418:	4b4f      	ldr	r3, [pc, #316]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800341a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003426:	4a4c      	ldr	r2, [pc, #304]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003428:	430b      	orrs	r3, r1
 800342a:	6513      	str	r3, [r2, #80]	@ 0x50
 800342c:	e003      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003442:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003446:	2300      	movs	r3, #0
 8003448:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800344c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003450:	460b      	mov	r3, r1
 8003452:	4313      	orrs	r3, r2
 8003454:	d053      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800345e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003462:	d035      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003464:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003468:	d82e      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800346a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800346e:	d031      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003470:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003474:	d828      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003476:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800347a:	d01a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800347c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003480:	d822      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003486:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800348a:	d007      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800348c:	e01c      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800348e:	4b32      	ldr	r3, [pc, #200]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	4a31      	ldr	r2, [pc, #196]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003498:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800349a:	e01c      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800349c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a0:	3308      	adds	r3, #8
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 fa55 	bl	8005954 <RCCEx_PLL2_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034b0:	e011      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b6:	3328      	adds	r3, #40	@ 0x28
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 fafc 	bl	8005ab8 <RCCEx_PLL3_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034c6:	e006      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ce:	e002      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034d0:	bf00      	nop
 80034d2:	e000      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10b      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034de:	4b1e      	ldr	r3, [pc, #120]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80034e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034f4:	e003      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800350a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003514:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003518:	460b      	mov	r3, r1
 800351a:	4313      	orrs	r3, r2
 800351c:	d056      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003522:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003526:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800352a:	d038      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800352c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003530:	d831      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003532:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003536:	d034      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003538:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800353c:	d82b      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800353e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003542:	d01d      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003544:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003548:	d825      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800354e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003554:	e01f      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003556:	bf00      	nop
 8003558:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355c:	4ba2      	ldr	r3, [pc, #648]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	4aa1      	ldr	r2, [pc, #644]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003568:	e01c      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356e:	3308      	adds	r3, #8
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f002 f9ee 	bl	8005954 <RCCEx_PLL2_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800357e:	e011      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003584:	3328      	adds	r3, #40	@ 0x28
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f002 fa95 	bl	8005ab8 <RCCEx_PLL3_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003594:	e006      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800359c:	e002      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035ac:	4b8e      	ldr	r3, [pc, #568]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035bc:	4a8a      	ldr	r2, [pc, #552]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035be:	430b      	orrs	r3, r1
 80035c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035c2:	e003      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035dc:	2300      	movs	r3, #0
 80035de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035e6:	460b      	mov	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	d03a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f2:	2b30      	cmp	r3, #48	@ 0x30
 80035f4:	d01f      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80035f6:	2b30      	cmp	r3, #48	@ 0x30
 80035f8:	d819      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d00c      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d815      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d019      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003606:	2b10      	cmp	r3, #16
 8003608:	d111      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360a:	4b77      	ldr	r3, [pc, #476]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	4a76      	ldr	r2, [pc, #472]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003614:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003616:	e011      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361c:	3308      	adds	r3, #8
 800361e:	2102      	movs	r1, #2
 8003620:	4618      	mov	r0, r3
 8003622:	f002 f997 	bl	8005954 <RCCEx_PLL2_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800362c:	e006      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003634:	e002      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800363a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003644:	4b68      	ldr	r3, [pc, #416]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003648:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003652:	4a65      	ldr	r2, [pc, #404]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003654:	430b      	orrs	r3, r1
 8003656:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800365e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800366e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003672:	2300      	movs	r3, #0
 8003674:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003678:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800367c:	460b      	mov	r3, r1
 800367e:	4313      	orrs	r3, r2
 8003680:	d051      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800368c:	d035      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800368e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003692:	d82e      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003694:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003698:	d031      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800369a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800369e:	d828      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036a4:	d01a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80036a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036aa:	d822      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80036b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b4:	d007      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80036b6:	e01c      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b8:	4b4b      	ldr	r3, [pc, #300]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036bc:	4a4a      	ldr	r2, [pc, #296]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036c4:	e01c      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ca:	3308      	adds	r3, #8
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f002 f940 	bl	8005954 <RCCEx_PLL2_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036da:	e011      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e0:	3328      	adds	r3, #40	@ 0x28
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f002 f9e7 	bl	8005ab8 <RCCEx_PLL3_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036f0:	e006      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036f8:	e002      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036fa:	bf00      	nop
 80036fc:	e000      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10a      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003708:	4b37      	ldr	r3, [pc, #220]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800370a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800370c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003716:	4a34      	ldr	r2, [pc, #208]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003718:	430b      	orrs	r3, r1
 800371a:	6513      	str	r3, [r2, #80]	@ 0x50
 800371c:	e003      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003732:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800373c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003740:	460b      	mov	r3, r1
 8003742:	4313      	orrs	r3, r2
 8003744:	d056      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800374c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003750:	d033      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003752:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003756:	d82c      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003758:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800375c:	d02f      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800375e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003762:	d826      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003764:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003768:	d02b      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800376a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800376e:	d820      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003770:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003774:	d012      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003776:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800377a:	d81a      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d022      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003784:	d115      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378a:	3308      	adds	r3, #8
 800378c:	2101      	movs	r1, #1
 800378e:	4618      	mov	r0, r3
 8003790:	f002 f8e0 	bl	8005954 <RCCEx_PLL2_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800379a:	e015      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800379c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a0:	3328      	adds	r3, #40	@ 0x28
 80037a2:	2101      	movs	r1, #1
 80037a4:	4618      	mov	r0, r3
 80037a6:	f002 f987 	bl	8005ab8 <RCCEx_PLL3_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037b0:	e00a      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037b8:	e006      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037ba:	bf00      	nop
 80037bc:	e004      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037be:	bf00      	nop
 80037c0:	e002      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10d      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037d0:	4b05      	ldr	r3, [pc, #20]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037de:	4a02      	ldr	r2, [pc, #8]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80037e4:	e006      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037e6:	bf00      	nop
 80037e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800380a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800380e:	460b      	mov	r3, r1
 8003810:	4313      	orrs	r3, r2
 8003812:	d055      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800381c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003820:	d033      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003826:	d82c      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800382c:	d02f      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800382e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003832:	d826      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003834:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003838:	d02b      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800383a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800383e:	d820      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003844:	d012      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800384a:	d81a      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d022      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003854:	d115      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	3308      	adds	r3, #8
 800385c:	2101      	movs	r1, #1
 800385e:	4618      	mov	r0, r3
 8003860:	f002 f878 	bl	8005954 <RCCEx_PLL2_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800386a:	e015      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	3328      	adds	r3, #40	@ 0x28
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f002 f91f 	bl	8005ab8 <RCCEx_PLL3_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003880:	e00a      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003888:	e006      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800388a:	bf00      	nop
 800388c:	e004      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800388e:	bf00      	nop
 8003890:	e002      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038a0:	4ba3      	ldr	r3, [pc, #652]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038b0:	4a9f      	ldr	r2, [pc, #636]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038b2:	430b      	orrs	r3, r1
 80038b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b6:	e003      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d037      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ea:	d00e      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80038ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038f0:	d816      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d018      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80038f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038fa:	d111      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003900:	4a8b      	ldr	r2, [pc, #556]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003908:	e00f      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390e:	3308      	adds	r3, #8
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f002 f81e 	bl	8005954 <RCCEx_PLL2_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800391e:	e004      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003926:	e000      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003932:	4b7f      	ldr	r3, [pc, #508]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003936:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800393a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003940:	4a7b      	ldr	r2, [pc, #492]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003942:	430b      	orrs	r3, r1
 8003944:	6513      	str	r3, [r2, #80]	@ 0x50
 8003946:	e003      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800395c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003960:	2300      	movs	r3, #0
 8003962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003966:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800396a:	460b      	mov	r3, r1
 800396c:	4313      	orrs	r3, r2
 800396e:	d039      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003976:	2b03      	cmp	r3, #3
 8003978:	d81c      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800397a:	a201      	add	r2, pc, #4	@ (adr r2, 8003980 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003980:	080039bd 	.word	0x080039bd
 8003984:	08003991 	.word	0x08003991
 8003988:	0800399f 	.word	0x0800399f
 800398c:	080039bd 	.word	0x080039bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003990:	4b67      	ldr	r3, [pc, #412]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003994:	4a66      	ldr	r2, [pc, #408]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800399a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800399c:	e00f      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a2:	3308      	adds	r3, #8
 80039a4:	2102      	movs	r1, #2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 ffd4 	bl	8005954 <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039b2:	e004      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039ba:	e000      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80039bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ca:	f023 0103 	bic.w	r1, r3, #3
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d4:	4a56      	ldr	r2, [pc, #344]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039d6:	430b      	orrs	r3, r1
 80039d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039da:	e003      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039fe:	460b      	mov	r3, r1
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f000 809f 	beq.w	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a06:	4b4b      	ldr	r3, [pc, #300]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a12:	f7fd f8a1 	bl	8000b58 <HAL_GetTick>
 8003a16:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7fd f89c 	bl	8000b58 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b64      	cmp	r3, #100	@ 0x64
 8003a2a:	d903      	bls.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a32:	e005      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a34:	4b3f      	ldr	r3, [pc, #252]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ed      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d179      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a48:	4b39      	ldr	r3, [pc, #228]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a54:	4053      	eors	r3, r2
 8003a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d015      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a5e:	4b34      	ldr	r3, [pc, #208]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a6a:	4b31      	ldr	r3, [pc, #196]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6e:	4a30      	ldr	r2, [pc, #192]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a74:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a76:	4b2e      	ldr	r3, [pc, #184]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a80:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a82:	4a2b      	ldr	r2, [pc, #172]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a88:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a96:	d118      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fd f85e 	bl	8000b58 <HAL_GetTick>
 8003a9c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aa0:	e00d      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fd f859 	bl	8000b58 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003aac:	1ad2      	subs	r2, r2, r3
 8003aae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d903      	bls.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003abc:	e005      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003abe:	4b1c      	ldr	r3, [pc, #112]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0eb      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d129      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ade:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ae2:	d10e      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ae4:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003af4:	091a      	lsrs	r2, r3, #4
 8003af6:	4b10      	ldr	r3, [pc, #64]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	4a0d      	ldr	r2, [pc, #52]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6113      	str	r3, [r2, #16]
 8003b00:	e005      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b02:	4b0b      	ldr	r3, [pc, #44]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	4a0a      	ldr	r2, [pc, #40]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b0c:	6113      	str	r3, [r2, #16]
 8003b0e:	4b08      	ldr	r3, [pc, #32]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b10:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1e:	4a04      	ldr	r2, [pc, #16]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b24:	e00e      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b2e:	e009      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b30:	58024400 	.word	0x58024400
 8003b34:	58024800 	.word	0x58024800
 8003b38:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	f002 0301 	and.w	r3, r2, #1
 8003b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f000 8089 	beq.w	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b6c:	2b28      	cmp	r3, #40	@ 0x28
 8003b6e:	d86b      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b70:	a201      	add	r2, pc, #4	@ (adr r2, 8003b78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003c51 	.word	0x08003c51
 8003b7c:	08003c49 	.word	0x08003c49
 8003b80:	08003c49 	.word	0x08003c49
 8003b84:	08003c49 	.word	0x08003c49
 8003b88:	08003c49 	.word	0x08003c49
 8003b8c:	08003c49 	.word	0x08003c49
 8003b90:	08003c49 	.word	0x08003c49
 8003b94:	08003c49 	.word	0x08003c49
 8003b98:	08003c1d 	.word	0x08003c1d
 8003b9c:	08003c49 	.word	0x08003c49
 8003ba0:	08003c49 	.word	0x08003c49
 8003ba4:	08003c49 	.word	0x08003c49
 8003ba8:	08003c49 	.word	0x08003c49
 8003bac:	08003c49 	.word	0x08003c49
 8003bb0:	08003c49 	.word	0x08003c49
 8003bb4:	08003c49 	.word	0x08003c49
 8003bb8:	08003c33 	.word	0x08003c33
 8003bbc:	08003c49 	.word	0x08003c49
 8003bc0:	08003c49 	.word	0x08003c49
 8003bc4:	08003c49 	.word	0x08003c49
 8003bc8:	08003c49 	.word	0x08003c49
 8003bcc:	08003c49 	.word	0x08003c49
 8003bd0:	08003c49 	.word	0x08003c49
 8003bd4:	08003c49 	.word	0x08003c49
 8003bd8:	08003c51 	.word	0x08003c51
 8003bdc:	08003c49 	.word	0x08003c49
 8003be0:	08003c49 	.word	0x08003c49
 8003be4:	08003c49 	.word	0x08003c49
 8003be8:	08003c49 	.word	0x08003c49
 8003bec:	08003c49 	.word	0x08003c49
 8003bf0:	08003c49 	.word	0x08003c49
 8003bf4:	08003c49 	.word	0x08003c49
 8003bf8:	08003c51 	.word	0x08003c51
 8003bfc:	08003c49 	.word	0x08003c49
 8003c00:	08003c49 	.word	0x08003c49
 8003c04:	08003c49 	.word	0x08003c49
 8003c08:	08003c49 	.word	0x08003c49
 8003c0c:	08003c49 	.word	0x08003c49
 8003c10:	08003c49 	.word	0x08003c49
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08003c51 	.word	0x08003c51
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c20:	3308      	adds	r3, #8
 8003c22:	2101      	movs	r1, #1
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 fe95 	bl	8005954 <RCCEx_PLL2_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c30:	e00f      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	3328      	adds	r3, #40	@ 0x28
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 ff3c 	bl	8005ab8 <RCCEx_PLL3_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c46:	e004      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c4e:	e000      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10a      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c5a:	4bbf      	ldr	r3, [pc, #764]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c68:	4abb      	ldr	r2, [pc, #748]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c6e:	e003      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	f002 0302 	and.w	r3, r2, #2
 8003c84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c92:	460b      	mov	r3, r1
 8003c94:	4313      	orrs	r3, r2
 8003c96:	d041      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c9e:	2b05      	cmp	r3, #5
 8003ca0:	d824      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cf5 	.word	0x08003cf5
 8003cac:	08003cc1 	.word	0x08003cc1
 8003cb0:	08003cd7 	.word	0x08003cd7
 8003cb4:	08003cf5 	.word	0x08003cf5
 8003cb8:	08003cf5 	.word	0x08003cf5
 8003cbc:	08003cf5 	.word	0x08003cf5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f001 fe43 	bl	8005954 <RCCEx_PLL2_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cd4:	e00f      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cda:	3328      	adds	r3, #40	@ 0x28
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 feea 	bl	8005ab8 <RCCEx_PLL3_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cea:	e004      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cfe:	4b96      	ldr	r3, [pc, #600]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d02:	f023 0107 	bic.w	r1, r3, #7
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d0c:	4a92      	ldr	r2, [pc, #584]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d12:	e003      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f002 0304 	and.w	r3, r2, #4
 8003d28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	d044      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d44:	2b05      	cmp	r3, #5
 8003d46:	d825      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d48:	a201      	add	r2, pc, #4	@ (adr r2, 8003d50 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d9d 	.word	0x08003d9d
 8003d54:	08003d69 	.word	0x08003d69
 8003d58:	08003d7f 	.word	0x08003d7f
 8003d5c:	08003d9d 	.word	0x08003d9d
 8003d60:	08003d9d 	.word	0x08003d9d
 8003d64:	08003d9d 	.word	0x08003d9d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	2101      	movs	r1, #1
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 fdef 	bl	8005954 <RCCEx_PLL2_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d7c:	e00f      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d82:	3328      	adds	r3, #40	@ 0x28
 8003d84:	2101      	movs	r1, #1
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 fe96 	bl	8005ab8 <RCCEx_PLL3_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d92:	e004      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d9a:	e000      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10b      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003da6:	4b6c      	ldr	r3, [pc, #432]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003daa:	f023 0107 	bic.w	r1, r3, #7
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db6:	4a68      	ldr	r2, [pc, #416]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003db8:	430b      	orrs	r3, r1
 8003dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dbc:	e003      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f002 0320 	and.w	r3, r2, #32
 8003dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ddc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003de0:	460b      	mov	r3, r1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d055      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003df2:	d033      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003df8:	d82c      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dfe:	d02f      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e04:	d826      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e0a:	d02b      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e10:	d820      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e16:	d012      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e1c:	d81a      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d022      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e26:	d115      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 fd8f 	bl	8005954 <RCCEx_PLL2_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e3c:	e015      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e42:	3328      	adds	r3, #40	@ 0x28
 8003e44:	2102      	movs	r1, #2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 fe36 	bl	8005ab8 <RCCEx_PLL3_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e52:	e00a      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e5a:	e006      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e5c:	bf00      	nop
 8003e5e:	e004      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e60:	bf00      	nop
 8003e62:	e002      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e64:	bf00      	nop
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e72:	4b39      	ldr	r3, [pc, #228]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	4a35      	ldr	r2, [pc, #212]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e88:	e003      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ea8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	d058      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ebe:	d033      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ec0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ec4:	d82c      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eca:	d02f      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed0:	d826      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ed2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ed6:	d02b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ed8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003edc:	d820      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ede:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ee2:	d012      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ee8:	d81a      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d022      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef2:	d115      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef8:	3308      	adds	r3, #8
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 fd29 	bl	8005954 <RCCEx_PLL2_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f08:	e015      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	3328      	adds	r3, #40	@ 0x28
 8003f10:	2102      	movs	r1, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 fdd0 	bl	8005ab8 <RCCEx_PLL3_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f26:	e006      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f28:	bf00      	nop
 8003f2a:	e004      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f2c:	bf00      	nop
 8003f2e:	e002      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10e      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f3e:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f42:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f4e:	4a02      	ldr	r2, [pc, #8]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f54:	e006      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f56:	bf00      	nop
 8003f58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f74:	2300      	movs	r3, #0
 8003f76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4313      	orrs	r3, r2
 8003f82:	d055      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f8c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f90:	d033      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003f92:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f96:	d82c      	bhi.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f9c:	d02f      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003f9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa2:	d826      	bhi.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fa4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fa8:	d02b      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003faa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fae:	d820      	bhi.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fb4:	d012      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003fb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fba:	d81a      	bhi.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d022      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fc4:	d115      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fca:	3308      	adds	r3, #8
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 fcc0 	bl	8005954 <RCCEx_PLL2_Config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fda:	e015      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe0:	3328      	adds	r3, #40	@ 0x28
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 fd67 	bl	8005ab8 <RCCEx_PLL3_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ff0:	e00a      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ff8:	e006      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ffa:	bf00      	nop
 8003ffc:	e004      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ffe:	bf00      	nop
 8004000:	e002      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004010:	4ba1      	ldr	r3, [pc, #644]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004014:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004020:	4a9d      	ldr	r2, [pc, #628]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004022:	430b      	orrs	r3, r1
 8004024:	6593      	str	r3, [r2, #88]	@ 0x58
 8004026:	e003      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	f002 0308 	and.w	r3, r2, #8
 800403c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004040:	2300      	movs	r3, #0
 8004042:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004046:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	d01e      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800405c:	d10c      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	3328      	adds	r3, #40	@ 0x28
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f001 fd26 	bl	8005ab8 <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004078:	4b87      	ldr	r3, [pc, #540]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004088:	4a83      	ldr	r2, [pc, #524]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800408a:	430b      	orrs	r3, r1
 800408c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f002 0310 	and.w	r3, r2, #16
 800409a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800409e:	2300      	movs	r3, #0
 80040a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80040a8:	460b      	mov	r3, r1
 80040aa:	4313      	orrs	r3, r2
 80040ac:	d01e      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ba:	d10c      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c0:	3328      	adds	r3, #40	@ 0x28
 80040c2:	2102      	movs	r1, #2
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 fcf7 	bl	8005ab8 <RCCEx_PLL3_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040d6:	4b70      	ldr	r3, [pc, #448]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040e6:	4a6c      	ldr	r2, [pc, #432]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004102:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d03e      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004110:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004114:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004118:	d022      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800411a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800411e:	d81b      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004128:	d00b      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800412a:	e015      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004130:	3308      	adds	r3, #8
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f001 fc0d 	bl	8005954 <RCCEx_PLL2_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004140:	e00f      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004146:	3328      	adds	r3, #40	@ 0x28
 8004148:	2102      	movs	r1, #2
 800414a:	4618      	mov	r0, r3
 800414c:	f001 fcb4 	bl	8005ab8 <RCCEx_PLL3_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004156:	e004      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800415e:	e000      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800416a:	4b4b      	ldr	r3, [pc, #300]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004176:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800417a:	4a47      	ldr	r2, [pc, #284]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800417c:	430b      	orrs	r3, r1
 800417e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004180:	e003      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004196:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004198:	2300      	movs	r3, #0
 800419a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800419c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041a0:	460b      	mov	r3, r1
 80041a2:	4313      	orrs	r3, r2
 80041a4:	d03b      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041b2:	d01f      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80041b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041b8:	d818      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80041ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041be:	d003      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80041c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041c4:	d007      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80041c6:	e011      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c8:	4b33      	ldr	r3, [pc, #204]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	4a32      	ldr	r2, [pc, #200]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041d4:	e00f      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041da:	3328      	adds	r3, #40	@ 0x28
 80041dc:	2101      	movs	r1, #1
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 fc6a 	bl	8005ab8 <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80041ea:	e004      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041f2:	e000      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80041f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10b      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041fe:	4b26      	ldr	r3, [pc, #152]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004202:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420e:	4a22      	ldr	r2, [pc, #136]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004210:	430b      	orrs	r3, r1
 8004212:	6553      	str	r3, [r2, #84]	@ 0x54
 8004214:	e003      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800421a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800422a:	673b      	str	r3, [r7, #112]	@ 0x70
 800422c:	2300      	movs	r3, #0
 800422e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004230:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004234:	460b      	mov	r3, r1
 8004236:	4313      	orrs	r3, r2
 8004238:	d034      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004248:	d007      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800424a:	e011      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424c:	4b12      	ldr	r3, [pc, #72]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	4a11      	ldr	r2, [pc, #68]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004258:	e00e      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425e:	3308      	adds	r3, #8
 8004260:	2102      	movs	r1, #2
 8004262:	4618      	mov	r0, r3
 8004264:	f001 fb76 	bl	8005954 <RCCEx_PLL2_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800426e:	e003      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10d      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004280:	4b05      	ldr	r3, [pc, #20]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004284:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800428e:	4a02      	ldr	r2, [pc, #8]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004290:	430b      	orrs	r3, r1
 8004292:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004294:	e006      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004296:	bf00      	nop
 8004298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80042b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042b2:	2300      	movs	r3, #0
 80042b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042ba:	460b      	mov	r3, r1
 80042bc:	4313      	orrs	r3, r2
 80042be:	d00c      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c4:	3328      	adds	r3, #40	@ 0x28
 80042c6:	2102      	movs	r1, #2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fbf5 	bl	8005ab8 <RCCEx_PLL3_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80042e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80042e8:	2300      	movs	r3, #0
 80042ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80042ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042f0:	460b      	mov	r3, r1
 80042f2:	4313      	orrs	r3, r2
 80042f4:	d038      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004302:	d018      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004304:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004308:	d811      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800430a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800430e:	d014      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004314:	d80b      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d011      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800431a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800431e:	d106      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004320:	4bc3      	ldr	r3, [pc, #780]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	4ac2      	ldr	r2, [pc, #776]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800432a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800432c:	e008      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004334:	e004      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004336:	bf00      	nop
 8004338:	e002      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800433a:	bf00      	nop
 800433c:	e000      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800433e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004348:	4bb9      	ldr	r3, [pc, #740]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800434a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004358:	4ab5      	ldr	r2, [pc, #724]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800435a:	430b      	orrs	r3, r1
 800435c:	6553      	str	r3, [r2, #84]	@ 0x54
 800435e:	e003      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004374:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004376:	2300      	movs	r3, #0
 8004378:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800437a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800437e:	460b      	mov	r3, r1
 8004380:	4313      	orrs	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004384:	4baa      	ldr	r3, [pc, #680]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004388:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004392:	4aa7      	ldr	r2, [pc, #668]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004394:	430b      	orrs	r3, r1
 8004396:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80043a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80043a6:	2300      	movs	r3, #0
 80043a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80043aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80043ae:	460b      	mov	r3, r1
 80043b0:	4313      	orrs	r3, r2
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043b4:	4b9e      	ldr	r3, [pc, #632]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80043bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80043c4:	4a9a      	ldr	r2, [pc, #616]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043c6:	430b      	orrs	r3, r1
 80043c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d8:	2300      	movs	r3, #0
 80043da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043e0:	460b      	mov	r3, r1
 80043e2:	4313      	orrs	r3, r2
 80043e4:	d009      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043e6:	4b92      	ldr	r3, [pc, #584]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043f4:	4a8e      	ldr	r2, [pc, #568]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043f6:	430b      	orrs	r3, r1
 80043f8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004406:	643b      	str	r3, [r7, #64]	@ 0x40
 8004408:	2300      	movs	r3, #0
 800440a:	647b      	str	r3, [r7, #68]	@ 0x44
 800440c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004410:	460b      	mov	r3, r1
 8004412:	4313      	orrs	r3, r2
 8004414:	d00e      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004416:	4b86      	ldr	r3, [pc, #536]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	4a85      	ldr	r2, [pc, #532]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800441c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004420:	6113      	str	r3, [r2, #16]
 8004422:	4b83      	ldr	r3, [pc, #524]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004424:	6919      	ldr	r1, [r3, #16]
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800442e:	4a80      	ldr	r2, [pc, #512]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004430:	430b      	orrs	r3, r1
 8004432:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004440:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004442:	2300      	movs	r3, #0
 8004444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004446:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800444a:	460b      	mov	r3, r1
 800444c:	4313      	orrs	r3, r2
 800444e:	d009      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004450:	4b77      	ldr	r3, [pc, #476]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004454:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445e:	4a74      	ldr	r2, [pc, #464]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004460:	430b      	orrs	r3, r1
 8004462:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004470:	633b      	str	r3, [r7, #48]	@ 0x30
 8004472:	2300      	movs	r3, #0
 8004474:	637b      	str	r3, [r7, #52]	@ 0x34
 8004476:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800447a:	460b      	mov	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004480:	4b6b      	ldr	r3, [pc, #428]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004484:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004490:	4a67      	ldr	r2, [pc, #412]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004492:	430b      	orrs	r3, r1
 8004494:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	2100      	movs	r1, #0
 80044a0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d011      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	3308      	adds	r3, #8
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f001 fa4a 	bl	8005954 <RCCEx_PLL2_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044de:	2100      	movs	r1, #0
 80044e0:	6239      	str	r1, [r7, #32]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044ec:	460b      	mov	r3, r1
 80044ee:	4313      	orrs	r3, r2
 80044f0:	d011      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f6:	3308      	adds	r3, #8
 80044f8:	2101      	movs	r1, #1
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 fa2a 	bl	8005954 <RCCEx_PLL2_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	2100      	movs	r1, #0
 8004520:	61b9      	str	r1, [r7, #24]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800452c:	460b      	mov	r3, r1
 800452e:	4313      	orrs	r3, r2
 8004530:	d011      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004536:	3308      	adds	r3, #8
 8004538:	2102      	movs	r1, #2
 800453a:	4618      	mov	r0, r3
 800453c:	f001 fa0a 	bl	8005954 <RCCEx_PLL2_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004552:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	2100      	movs	r1, #0
 8004560:	6139      	str	r1, [r7, #16]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800456c:	460b      	mov	r3, r1
 800456e:	4313      	orrs	r3, r2
 8004570:	d011      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004576:	3328      	adds	r3, #40	@ 0x28
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f001 fa9c 	bl	8005ab8 <RCCEx_PLL3_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004592:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	2100      	movs	r1, #0
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045ac:	460b      	mov	r3, r1
 80045ae:	4313      	orrs	r3, r2
 80045b0:	d011      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b6:	3328      	adds	r3, #40	@ 0x28
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 fa7c 	bl	8005ab8 <RCCEx_PLL3_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	2100      	movs	r1, #0
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045ec:	460b      	mov	r3, r1
 80045ee:	4313      	orrs	r3, r2
 80045f0:	d011      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	3328      	adds	r3, #40	@ 0x28
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 fa5c 	bl	8005ab8 <RCCEx_PLL3_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004612:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004616:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	e000      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
}
 8004624:	4618      	mov	r0, r3
 8004626:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800462a:	46bd      	mov	sp, r7
 800462c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004630:	58024400 	.word	0x58024400

08004634 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b090      	sub	sp, #64	@ 0x40
 8004638:	af00      	add	r7, sp, #0
 800463a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800463e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004642:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004646:	430b      	orrs	r3, r1
 8004648:	f040 8094 	bne.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800464c:	4b9e      	ldr	r3, [pc, #632]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800464e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004658:	2b04      	cmp	r3, #4
 800465a:	f200 8087 	bhi.w	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800465e:	a201      	add	r2, pc, #4	@ (adr r2, 8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	08004679 	.word	0x08004679
 8004668:	080046a1 	.word	0x080046a1
 800466c:	080046c9 	.word	0x080046c9
 8004670:	08004765 	.word	0x08004765
 8004674:	080046f1 	.word	0x080046f1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004678:	4b93      	ldr	r3, [pc, #588]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004680:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004684:	d108      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800468a:	4618      	mov	r0, r3
 800468c:	f001 f810 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004694:	f000 bd45 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800469c:	f000 bd41 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046a0:	4b89      	ldr	r3, [pc, #548]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046ac:	d108      	bne.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046ae:	f107 0318 	add.w	r3, r7, #24
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fd54 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046bc:	f000 bd31 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046c4:	f000 bd2d 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046c8:	4b7f      	ldr	r3, [pc, #508]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046d4:	d108      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046d6:	f107 030c 	add.w	r3, r7, #12
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fe94 	bl	8005408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046e4:	f000 bd1d 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046ec:	f000 bd19 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80046f0:	4b75      	ldr	r3, [pc, #468]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80046f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80046fa:	4b73      	ldr	r3, [pc, #460]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b04      	cmp	r3, #4
 8004704:	d10c      	bne.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800470c:	4b6e      	ldr	r3, [pc, #440]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	08db      	lsrs	r3, r3, #3
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	4a6d      	ldr	r2, [pc, #436]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
 800471c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800471e:	e01f      	b.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004720:	4b69      	ldr	r3, [pc, #420]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800472c:	d106      	bne.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800472e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004730:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004734:	d102      	bne.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004736:	4b66      	ldr	r3, [pc, #408]	@ (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800473a:	e011      	b.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800473c:	4b62      	ldr	r3, [pc, #392]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004744:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004748:	d106      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800474a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004750:	d102      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004752:	4b60      	ldr	r3, [pc, #384]	@ (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004756:	e003      	b.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800475c:	f000 bce1 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004760:	f000 bcdf 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004764:	4b5c      	ldr	r3, [pc, #368]	@ (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004768:	f000 bcdb 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004770:	f000 bcd7 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004778:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800477c:	430b      	orrs	r3, r1
 800477e:	f040 80ad 	bne.w	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004782:	4b51      	ldr	r3, [pc, #324]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004786:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800478a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004792:	d056      	beq.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800479a:	f200 8090 	bhi.w	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800479e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a0:	2bc0      	cmp	r3, #192	@ 0xc0
 80047a2:	f000 8088 	beq.w	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80047aa:	f200 8088 	bhi.w	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	2b80      	cmp	r3, #128	@ 0x80
 80047b2:	d032      	beq.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	2b80      	cmp	r3, #128	@ 0x80
 80047b8:	f200 8081 	bhi.w	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80047c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c4:	2b40      	cmp	r3, #64	@ 0x40
 80047c6:	d014      	beq.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80047c8:	e079      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047ca:	4b3f      	ldr	r3, [pc, #252]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047d6:	d108      	bne.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 ff67 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047e6:	f000 bc9c 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047ee:	f000 bc98 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047f2:	4b35      	ldr	r3, [pc, #212]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047fe:	d108      	bne.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004800:	f107 0318 	add.w	r3, r7, #24
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fcab 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800480e:	f000 bc88 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004816:	f000 bc84 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800481a:	4b2b      	ldr	r3, [pc, #172]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004826:	d108      	bne.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fdeb 	bl	8005408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004836:	f000 bc74 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800483e:	f000 bc70 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004842:	4b21      	ldr	r3, [pc, #132]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004846:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800484a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800484c:	4b1e      	ldr	r3, [pc, #120]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d10c      	bne.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800485e:	4b1a      	ldr	r3, [pc, #104]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	08db      	lsrs	r3, r3, #3
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	4a18      	ldr	r2, [pc, #96]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800486a:	fa22 f303 	lsr.w	r3, r2, r3
 800486e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004870:	e01f      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004872:	4b15      	ldr	r3, [pc, #84]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800487e:	d106      	bne.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004886:	d102      	bne.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004888:	4b11      	ldr	r3, [pc, #68]	@ (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800488a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800488c:	e011      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800488e:	4b0e      	ldr	r3, [pc, #56]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004896:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800489a:	d106      	bne.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800489c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048a2:	d102      	bne.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80048a4:	4b0b      	ldr	r3, [pc, #44]	@ (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80048a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a8:	e003      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80048ae:	f000 bc38 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80048b2:	f000 bc36 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80048b6:	4b08      	ldr	r3, [pc, #32]	@ (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80048b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048ba:	f000 bc32 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048c2:	f000 bc2e 	b.w	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400
 80048cc:	03d09000 	.word	0x03d09000
 80048d0:	003d0900 	.word	0x003d0900
 80048d4:	017d7840 	.word	0x017d7840
 80048d8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80048dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048e0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80048e4:	430b      	orrs	r3, r1
 80048e6:	f040 809c 	bne.w	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80048ea:	4b9e      	ldr	r3, [pc, #632]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80048ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ee:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80048f2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80048f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048fa:	d054      	beq.n	80049a6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004902:	f200 808b 	bhi.w	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800490c:	f000 8083 	beq.w	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004912:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004916:	f200 8081 	bhi.w	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800491a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004920:	d02f      	beq.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8004922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004924:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004928:	d878      	bhi.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004936:	d012      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004938:	e070      	b.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800493a:	4b8a      	ldr	r3, [pc, #552]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004942:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004946:	d107      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800494c:	4618      	mov	r0, r3
 800494e:	f000 feaf 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004956:	e3e4      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800495c:	e3e1      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800495e:	4b81      	ldr	r3, [pc, #516]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004966:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800496a:	d107      	bne.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800496c:	f107 0318 	add.w	r3, r7, #24
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fbf5 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800497a:	e3d2      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004980:	e3cf      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004982:	4b78      	ldr	r3, [pc, #480]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800498a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800498e:	d107      	bne.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004990:	f107 030c 	add.w	r3, r7, #12
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fd37 	bl	8005408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800499e:	e3c0      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049a4:	e3bd      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80049a6:	4b6f      	ldr	r3, [pc, #444]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80049a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80049ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80049bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049c2:	4b68      	ldr	r3, [pc, #416]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	08db      	lsrs	r3, r3, #3
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	4a66      	ldr	r2, [pc, #408]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80049ce:	fa22 f303 	lsr.w	r3, r2, r3
 80049d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049d4:	e01e      	b.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049d6:	4b63      	ldr	r3, [pc, #396]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e2:	d106      	bne.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80049e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ea:	d102      	bne.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80049ec:	4b5f      	ldr	r3, [pc, #380]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80049ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049f0:	e010      	b.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049fe:	d106      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8004a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a06:	d102      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004a08:	4b59      	ldr	r3, [pc, #356]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a0c:	e002      	b.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004a12:	e386      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004a14:	e385      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004a16:	4b57      	ldr	r3, [pc, #348]	@ (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a1a:	e382      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a20:	e37f      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a26:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	f040 80a7 	bne.w	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004a30:	4b4c      	ldr	r3, [pc, #304]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a34:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004a38:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a40:	d055      	beq.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8004a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a48:	f200 8096 	bhi.w	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a52:	f000 8084 	beq.w	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a5c:	f200 808c 	bhi.w	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a66:	d030      	beq.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8004a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a6e:	f200 8083 	bhi.w	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a7e:	d012      	beq.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004a80:	e07a      	b.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a82:	4b38      	ldr	r3, [pc, #224]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fe0b 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a9e:	e340      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004aa4:	e33d      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ab4:	f107 0318 	add.w	r3, r7, #24
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fb51 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ac2:	e32e      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ac8:	e32b      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004aca:	4b26      	ldr	r3, [pc, #152]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fc93 	bl	8005408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ae6:	e31c      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004aec:	e319      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004aee:	4b1d      	ldr	r3, [pc, #116]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004af6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004af8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d10c      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b0a:	4b16      	ldr	r3, [pc, #88]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	08db      	lsrs	r3, r3, #3
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	4a14      	ldr	r2, [pc, #80]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004b16:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b1c:	e01e      	b.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b1e:	4b11      	ldr	r3, [pc, #68]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b2a:	d106      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b32:	d102      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004b34:	4b0d      	ldr	r3, [pc, #52]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b38:	e010      	b.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b46:	d106      	bne.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8004b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b4e:	d102      	bne.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004b50:	4b07      	ldr	r3, [pc, #28]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b54:	e002      	b.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004b5a:	e2e2      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004b5c:	e2e1      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b5e:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b62:	e2de      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004b64:	58024400 	.word	0x58024400
 8004b68:	03d09000 	.word	0x03d09000
 8004b6c:	003d0900 	.word	0x003d0900
 8004b70:	017d7840 	.word	0x017d7840
 8004b74:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b7c:	e2d1      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b82:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004b86:	430b      	orrs	r3, r1
 8004b88:	f040 809c 	bne.w	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004b8c:	4b93      	ldr	r3, [pc, #588]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b90:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004b94:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b9c:	d054      	beq.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ba4:	f200 808b 	bhi.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004baa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bae:	f000 8083 	beq.w	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bb8:	f200 8081 	bhi.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc2:	d02f      	beq.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bca:	d878      	bhi.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd8:	d012      	beq.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004bda:	e070      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bdc:	4b7f      	ldr	r3, [pc, #508]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004be8:	d107      	bne.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fd5e 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bf8:	e293      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bfe:	e290      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c00:	4b76      	ldr	r3, [pc, #472]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c0c:	d107      	bne.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c0e:	f107 0318 	add.w	r3, r7, #24
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 faa4 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c1c:	e281      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c22:	e27e      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c24:	4b6d      	ldr	r3, [pc, #436]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c30:	d107      	bne.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c32:	f107 030c 	add.w	r3, r7, #12
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fbe6 	bl	8005408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c40:	e26f      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c46:	e26c      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c48:	4b64      	ldr	r3, [pc, #400]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c50:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c52:	4b62      	ldr	r3, [pc, #392]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d10c      	bne.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c64:	4b5d      	ldr	r3, [pc, #372]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	08db      	lsrs	r3, r3, #3
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	4a5c      	ldr	r2, [pc, #368]	@ (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
 8004c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c76:	e01e      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c78:	4b58      	ldr	r3, [pc, #352]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c84:	d106      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c8c:	d102      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004c8e:	4b55      	ldr	r3, [pc, #340]	@ (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c92:	e010      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c94:	4b51      	ldr	r3, [pc, #324]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ca0:	d106      	bne.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ca8:	d102      	bne.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004caa:	4b4f      	ldr	r3, [pc, #316]	@ (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cae:	e002      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004cb4:	e235      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004cb6:	e234      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004cb8:	4b4c      	ldr	r3, [pc, #304]	@ (8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cbc:	e231      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cc2:	e22e      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	f040 808f 	bne.w	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004cd2:	4b42      	ldr	r3, [pc, #264]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004cda:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce2:	d06b      	beq.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cea:	d874      	bhi.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cf2:	d056      	beq.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cfa:	d86c      	bhi.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d02:	d03b      	beq.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8004d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d0a:	d864      	bhi.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d12:	d021      	beq.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d1a:	d85c      	bhi.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d004      	beq.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8004d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d28:	d004      	beq.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8004d2a:	e054      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004d2c:	f7fe fa62 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 8004d30:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d32:	e1f6      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d34:	4b29      	ldr	r3, [pc, #164]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d40:	d107      	bne.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d42:	f107 0318 	add.w	r3, r7, #24
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fa0a 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d50:	e1e7      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d56:	e1e4      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d58:	4b20      	ldr	r3, [pc, #128]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d64:	d107      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d66:	f107 030c 	add.w	r3, r7, #12
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fb4c 	bl	8005408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d74:	e1d5      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d7a:	e1d2      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d7c:	4b17      	ldr	r3, [pc, #92]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d109      	bne.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d88:	4b14      	ldr	r3, [pc, #80]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	08db      	lsrs	r3, r3, #3
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	4a13      	ldr	r2, [pc, #76]	@ (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
 8004d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d9a:	e1c2      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004da0:	e1bf      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004da2:	4b0e      	ldr	r3, [pc, #56]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dae:	d102      	bne.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8004db0:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004db4:	e1b5      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dba:	e1b2      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004dbc:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dc8:	d102      	bne.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8004dca:	4b07      	ldr	r3, [pc, #28]	@ (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004dce:	e1a8      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dd4:	e1a5      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dda:	e1a2      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004ddc:	58024400 	.word	0x58024400
 8004de0:	03d09000 	.word	0x03d09000
 8004de4:	003d0900 	.word	0x003d0900
 8004de8:	017d7840 	.word	0x017d7840
 8004dec:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004df4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	d173      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004dfc:	4b9c      	ldr	r3, [pc, #624]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e04:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e0c:	d02f      	beq.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e14:	d863      	bhi.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8004e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d004      	beq.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e22:	d012      	beq.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8004e24:	e05b      	b.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e26:	4b92      	ldr	r3, [pc, #584]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e32:	d107      	bne.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e34:	f107 0318 	add.w	r3, r7, #24
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f991 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e42:	e16e      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e48:	e16b      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e4a:	4b89      	ldr	r3, [pc, #548]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e56:	d107      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e58:	f107 030c 	add.w	r3, r7, #12
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fad3 	bl	8005408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e66:	e15c      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e6c:	e159      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e6e:	4b80      	ldr	r3, [pc, #512]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e78:	4b7d      	ldr	r3, [pc, #500]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d10c      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e8a:	4b79      	ldr	r3, [pc, #484]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	08db      	lsrs	r3, r3, #3
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	4a77      	ldr	r2, [pc, #476]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8004e96:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e9c:	e01e      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e9e:	4b74      	ldr	r3, [pc, #464]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eaa:	d106      	bne.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8004eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eb2:	d102      	bne.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004eb4:	4b70      	ldr	r3, [pc, #448]	@ (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8004eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eb8:	e010      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004eba:	4b6d      	ldr	r3, [pc, #436]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ec6:	d106      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8004ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ece:	d102      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004ed0:	4b6a      	ldr	r3, [pc, #424]	@ (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ed4:	e002      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004eda:	e122      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004edc:	e121      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ee2:	e11e      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004eec:	430b      	orrs	r3, r1
 8004eee:	d133      	bne.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004ef0:	4b5f      	ldr	r3, [pc, #380]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f06:	d012      	beq.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8004f08:	e023      	b.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f0a:	4b59      	ldr	r3, [pc, #356]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f16:	d107      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fbc7 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f26:	e0fc      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f2c:	e0f9      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f2e:	4b50      	ldr	r3, [pc, #320]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f3c:	f107 0318 	add.w	r3, r7, #24
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f90d 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f4a:	e0ea      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f50:	e0e7      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f56:	e0e4      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f5c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004f60:	430b      	orrs	r3, r1
 8004f62:	f040 808d 	bne.w	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004f66:	4b42      	ldr	r3, [pc, #264]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004f6e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f76:	d06b      	beq.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f7e:	d874      	bhi.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f86:	d056      	beq.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8004f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8e:	d86c      	bhi.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f96:	d03b      	beq.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8004f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f9e:	d864      	bhi.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fa6:	d021      	beq.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fae:	d85c      	bhi.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fbc:	d004      	beq.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8004fbe:	e054      	b.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004fc0:	f000 f8b8 	bl	8005134 <HAL_RCCEx_GetD3PCLK1Freq>
 8004fc4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004fc6:	e0ac      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fc8:	4b29      	ldr	r3, [pc, #164]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fd6:	f107 0318 	add.w	r3, r7, #24
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f8c0 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fe4:	e09d      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fea:	e09a      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fec:	4b20      	ldr	r3, [pc, #128]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ff8:	d107      	bne.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ffa:	f107 030c 	add.w	r3, r7, #12
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fa02 	bl	8005408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005008:	e08b      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800500e:	e088      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005010:	4b17      	ldr	r3, [pc, #92]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d109      	bne.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800501c:	4b14      	ldr	r3, [pc, #80]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	08db      	lsrs	r3, r3, #3
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	4a13      	ldr	r2, [pc, #76]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
 800502c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800502e:	e078      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005034:	e075      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005036:	4b0e      	ldr	r3, [pc, #56]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005042:	d102      	bne.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005044:	4b0c      	ldr	r3, [pc, #48]	@ (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005048:	e06b      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800504e:	e068      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005050:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800505c:	d102      	bne.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800505e:	4b07      	ldr	r3, [pc, #28]	@ (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005062:	e05e      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005068:	e05b      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800506e:	e058      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005070:	58024400 	.word	0x58024400
 8005074:	03d09000 	.word	0x03d09000
 8005078:	003d0900 	.word	0x003d0900
 800507c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005084:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005088:	430b      	orrs	r3, r1
 800508a:	d148      	bne.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800508c:	4b27      	ldr	r3, [pc, #156]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800508e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005090:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005094:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800509c:	d02a      	beq.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800509e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050a4:	d838      	bhi.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d004      	beq.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80050ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050b2:	d00d      	beq.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80050b4:	e030      	b.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050b6:	4b1d      	ldr	r3, [pc, #116]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050c2:	d102      	bne.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80050c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005130 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80050c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050c8:	e02b      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050ce:	e028      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050d0:	4b16      	ldr	r3, [pc, #88]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050dc:	d107      	bne.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fae4 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050ec:	e019      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050ee:	2300      	movs	r3, #0
 80050f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050f2:	e016      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050f4:	4b0d      	ldr	r3, [pc, #52]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005100:	d107      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005102:	f107 0318 	add.w	r3, r7, #24
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f82a 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005110:	e007      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005116:	e004      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800511c:	e001      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005124:	4618      	mov	r0, r3
 8005126:	3740      	adds	r7, #64	@ 0x40
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	58024400 	.word	0x58024400
 8005130:	017d7840 	.word	0x017d7840

08005134 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005138:	f7fe f82c 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 800513c:	4602      	mov	r2, r0
 800513e:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4904      	ldr	r1, [pc, #16]	@ (800515c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800514a:	5ccb      	ldrb	r3, [r1, r3]
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	58024400 	.word	0x58024400
 800515c:	08005c8c 	.word	0x08005c8c

08005160 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005160:	b480      	push	{r7}
 8005162:	b089      	sub	sp, #36	@ 0x24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005168:	4ba1      	ldr	r3, [pc, #644]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005172:	4b9f      	ldr	r3, [pc, #636]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005176:	0b1b      	lsrs	r3, r3, #12
 8005178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800517c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800517e:	4b9c      	ldr	r3, [pc, #624]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800518a:	4b99      	ldr	r3, [pc, #612]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800518c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518e:	08db      	lsrs	r3, r3, #3
 8005190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8111 	beq.w	80053d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	f000 8083 	beq.w	80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	f200 80a1 	bhi.w	8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d056      	beq.n	8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80051ca:	e099      	b.n	8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051cc:	4b88      	ldr	r3, [pc, #544]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d02d      	beq.n	8005234 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051d8:	4b85      	ldr	r3, [pc, #532]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	08db      	lsrs	r3, r3, #3
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	4a84      	ldr	r2, [pc, #528]	@ (80053f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
 80051e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005202:	4b7b      	ldr	r3, [pc, #492]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005212:	ed97 6a03 	vldr	s12, [r7, #12]
 8005216:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800521a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005232:	e087      	b.n	8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005246:	4b6a      	ldr	r3, [pc, #424]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005256:	ed97 6a03 	vldr	s12, [r7, #12]
 800525a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800525e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800526a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800526e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005276:	e065      	b.n	8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005282:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528a:	4b59      	ldr	r3, [pc, #356]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800528c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529a:	ed97 6a03 	vldr	s12, [r7, #12]
 800529e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ba:	e043      	b.n	8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80052ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ce:	4b48      	ldr	r3, [pc, #288]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	ed97 6a03 	vldr	s12, [r7, #12]
 80052e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052fe:	e021      	b.n	8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800530e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005312:	4b37      	ldr	r3, [pc, #220]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005322:	ed97 6a03 	vldr	s12, [r7, #12]
 8005326:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800532a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005342:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005344:	4b2a      	ldr	r3, [pc, #168]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005348:	0a5b      	lsrs	r3, r3, #9
 800534a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005356:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800535a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800535e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800536a:	ee17 2a90 	vmov	r2, s15
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005372:	4b1f      	ldr	r3, [pc, #124]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005376:	0c1b      	lsrs	r3, r3, #16
 8005378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005384:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800538c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005398:	ee17 2a90 	vmov	r2, s15
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80053a0:	4b13      	ldr	r3, [pc, #76]	@ (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a4:	0e1b      	lsrs	r3, r3, #24
 80053a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80053be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c6:	ee17 2a90 	vmov	r2, s15
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053ce:	e008      	b.n	80053e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	609a      	str	r2, [r3, #8]
}
 80053e2:	bf00      	nop
 80053e4:	3724      	adds	r7, #36	@ 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
 80053f4:	03d09000 	.word	0x03d09000
 80053f8:	46000000 	.word	0x46000000
 80053fc:	4c742400 	.word	0x4c742400
 8005400:	4a742400 	.word	0x4a742400
 8005404:	4bbebc20 	.word	0x4bbebc20

08005408 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	@ 0x24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005410:	4ba1      	ldr	r3, [pc, #644]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800541a:	4b9f      	ldr	r3, [pc, #636]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	0d1b      	lsrs	r3, r3, #20
 8005420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005424:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005426:	4b9c      	ldr	r3, [pc, #624]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005432:	4b99      	ldr	r3, [pc, #612]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005436:	08db      	lsrs	r3, r3, #3
 8005438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	fb02 f303 	mul.w	r3, r2, r3
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8111 	beq.w	8005678 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b02      	cmp	r3, #2
 800545a:	f000 8083 	beq.w	8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b02      	cmp	r3, #2
 8005462:	f200 80a1 	bhi.w	80055a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d056      	beq.n	8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005472:	e099      	b.n	80055a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005474:	4b88      	ldr	r3, [pc, #544]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02d      	beq.n	80054dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005480:	4b85      	ldr	r3, [pc, #532]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	08db      	lsrs	r3, r3, #3
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	4a84      	ldr	r2, [pc, #528]	@ (800569c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
 8005490:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	ee07 3a90 	vmov	s15, r3
 8005498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80054be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054da:	e087      	b.n	80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80056a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80054ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005502:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800551e:	e065      	b.n	80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800552e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005532:	4b59      	ldr	r3, [pc, #356]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005542:	ed97 6a03 	vldr	s12, [r7, #12]
 8005546:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800554a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800555a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005562:	e043      	b.n	80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80056ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005576:	4b48      	ldr	r3, [pc, #288]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005586:	ed97 6a03 	vldr	s12, [r7, #12]
 800558a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800558e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800559a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055a6:	e021      	b.n	80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ba:	4b37      	ldr	r3, [pc, #220]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80055ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	0a5b      	lsrs	r3, r3, #9
 80055f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005606:	edd7 6a07 	vldr	s13, [r7, #28]
 800560a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800560e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005612:	ee17 2a90 	vmov	r2, s15
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800561a:	4b1f      	ldr	r3, [pc, #124]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005624:	ee07 3a90 	vmov	s15, r3
 8005628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005634:	edd7 6a07 	vldr	s13, [r7, #28]
 8005638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800563c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005640:	ee17 2a90 	vmov	r2, s15
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005648:	4b13      	ldr	r3, [pc, #76]	@ (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800564a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564c:	0e1b      	lsrs	r3, r3, #24
 800564e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800565e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005662:	edd7 6a07 	vldr	s13, [r7, #28]
 8005666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800566a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800566e:	ee17 2a90 	vmov	r2, s15
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005676:	e008      	b.n	800568a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	609a      	str	r2, [r3, #8]
}
 800568a:	bf00      	nop
 800568c:	3724      	adds	r7, #36	@ 0x24
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	58024400 	.word	0x58024400
 800569c:	03d09000 	.word	0x03d09000
 80056a0:	46000000 	.word	0x46000000
 80056a4:	4c742400 	.word	0x4c742400
 80056a8:	4a742400 	.word	0x4a742400
 80056ac:	4bbebc20 	.word	0x4bbebc20

080056b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b089      	sub	sp, #36	@ 0x24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056b8:	4ba0      	ldr	r3, [pc, #640]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80056c2:	4b9e      	ldr	r3, [pc, #632]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c6:	091b      	lsrs	r3, r3, #4
 80056c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80056ce:	4b9b      	ldr	r3, [pc, #620]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80056d8:	4b98      	ldr	r3, [pc, #608]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056dc:	08db      	lsrs	r3, r3, #3
 80056de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	fb02 f303 	mul.w	r3, r2, r3
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8111 	beq.w	800591e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	f000 8083 	beq.w	800580a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b02      	cmp	r3, #2
 8005708:	f200 80a1 	bhi.w	800584e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d056      	beq.n	80057c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005718:	e099      	b.n	800584e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800571a:	4b88      	ldr	r3, [pc, #544]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d02d      	beq.n	8005782 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005726:	4b85      	ldr	r3, [pc, #532]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	08db      	lsrs	r3, r3, #3
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	4a83      	ldr	r2, [pc, #524]	@ (8005940 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005732:	fa22 f303 	lsr.w	r3, r2, r3
 8005736:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	ee07 3a90 	vmov	s15, r3
 8005748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005750:	4b7a      	ldr	r3, [pc, #488]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005760:	ed97 6a03 	vldr	s12, [r7, #12]
 8005764:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005780:	e087      	b.n	8005892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8005948 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005794:	4b69      	ldr	r3, [pc, #420]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579c:	ee07 3a90 	vmov	s15, r3
 80057a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80057a8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80057ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057c4:	e065      	b.n	8005892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800594c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80057d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d8:	4b58      	ldr	r3, [pc, #352]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e0:	ee07 3a90 	vmov	s15, r3
 80057e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ec:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80057f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005804:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005808:	e043      	b.n	8005892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	ee07 3a90 	vmov	s15, r3
 8005810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005814:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8005950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581c:	4b47      	ldr	r3, [pc, #284]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800581e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005824:	ee07 3a90 	vmov	s15, r3
 8005828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005830:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005848:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800584c:	e021      	b.n	8005892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	ee07 3a90 	vmov	s15, r3
 8005854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005858:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005948 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800585c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005860:	4b36      	ldr	r3, [pc, #216]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005868:	ee07 3a90 	vmov	s15, r3
 800586c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005870:	ed97 6a03 	vldr	s12, [r7, #12]
 8005874:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005880:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005890:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005892:	4b2a      	ldr	r3, [pc, #168]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005896:	0a5b      	lsrs	r3, r3, #9
 8005898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800589c:	ee07 3a90 	vmov	s15, r3
 80058a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058b8:	ee17 2a90 	vmov	r2, s15
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80058c0:	4b1e      	ldr	r3, [pc, #120]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058da:	edd7 6a07 	vldr	s13, [r7, #28]
 80058de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058e6:	ee17 2a90 	vmov	r2, s15
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80058ee:	4b13      	ldr	r3, [pc, #76]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f2:	0e1b      	lsrs	r3, r3, #24
 80058f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058f8:	ee07 3a90 	vmov	s15, r3
 80058fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005900:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005904:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005908:	edd7 6a07 	vldr	s13, [r7, #28]
 800590c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005914:	ee17 2a90 	vmov	r2, s15
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800591c:	e008      	b.n	8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	609a      	str	r2, [r3, #8]
}
 8005930:	bf00      	nop
 8005932:	3724      	adds	r7, #36	@ 0x24
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	58024400 	.word	0x58024400
 8005940:	03d09000 	.word	0x03d09000
 8005944:	46000000 	.word	0x46000000
 8005948:	4c742400 	.word	0x4c742400
 800594c:	4a742400 	.word	0x4a742400
 8005950:	4bbebc20 	.word	0x4bbebc20

08005954 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005962:	4b53      	ldr	r3, [pc, #332]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b03      	cmp	r3, #3
 800596c:	d101      	bne.n	8005972 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e099      	b.n	8005aa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005972:	4b4f      	ldr	r3, [pc, #316]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a4e      	ldr	r2, [pc, #312]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005978:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800597c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800597e:	f7fb f8eb 	bl	8000b58 <HAL_GetTick>
 8005982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005984:	e008      	b.n	8005998 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005986:	f7fb f8e7 	bl	8000b58 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e086      	b.n	8005aa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005998:	4b45      	ldr	r3, [pc, #276]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1f0      	bne.n	8005986 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80059a4:	4b42      	ldr	r3, [pc, #264]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	031b      	lsls	r3, r3, #12
 80059b2:	493f      	ldr	r1, [pc, #252]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	3b01      	subs	r3, #1
 80059be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	025b      	lsls	r3, r3, #9
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	041b      	lsls	r3, r3, #16
 80059d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	061b      	lsls	r3, r3, #24
 80059e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059e8:	4931      	ldr	r1, [pc, #196]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80059ee:	4b30      	ldr	r3, [pc, #192]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	492d      	ldr	r1, [pc, #180]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a00:	4b2b      	ldr	r3, [pc, #172]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a04:	f023 0220 	bic.w	r2, r3, #32
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	4928      	ldr	r1, [pc, #160]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a12:	4b27      	ldr	r3, [pc, #156]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	4a26      	ldr	r2, [pc, #152]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a18:	f023 0310 	bic.w	r3, r3, #16
 8005a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a1e:	4b24      	ldr	r3, [pc, #144]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a22:	4b24      	ldr	r3, [pc, #144]	@ (8005ab4 <RCCEx_PLL2_Config+0x160>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	69d2      	ldr	r2, [r2, #28]
 8005a2a:	00d2      	lsls	r2, r2, #3
 8005a2c:	4920      	ldr	r1, [pc, #128]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a32:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a36:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a38:	f043 0310 	orr.w	r3, r3, #16
 8005a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a44:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a48:	4a19      	ldr	r2, [pc, #100]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a50:	e00f      	b.n	8005a72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d106      	bne.n	8005a66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a58:	4b15      	ldr	r3, [pc, #84]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	4a14      	ldr	r2, [pc, #80]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a64:	e005      	b.n	8005a72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a66:	4b12      	ldr	r3, [pc, #72]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6a:	4a11      	ldr	r2, [pc, #68]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a72:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a0e      	ldr	r2, [pc, #56]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a7e:	f7fb f86b 	bl	8000b58 <HAL_GetTick>
 8005a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a84:	e008      	b.n	8005a98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a86:	f7fb f867 	bl	8000b58 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e006      	b.n	8005aa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a98:	4b05      	ldr	r3, [pc, #20]	@ (8005ab0 <RCCEx_PLL2_Config+0x15c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	58024400 	.word	0x58024400
 8005ab4:	ffff0007 	.word	0xffff0007

08005ab8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ac6:	4b53      	ldr	r3, [pc, #332]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d101      	bne.n	8005ad6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e099      	b.n	8005c0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a4e      	ldr	r2, [pc, #312]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae2:	f7fb f839 	bl	8000b58 <HAL_GetTick>
 8005ae6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ae8:	e008      	b.n	8005afc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005aea:	f7fb f835 	bl	8000b58 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e086      	b.n	8005c0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005afc:	4b45      	ldr	r3, [pc, #276]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1f0      	bne.n	8005aea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b08:	4b42      	ldr	r3, [pc, #264]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	051b      	lsls	r3, r3, #20
 8005b16:	493f      	ldr	r1, [pc, #252]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	025b      	lsls	r3, r3, #9
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	041b      	lsls	r3, r3, #16
 8005b3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	061b      	lsls	r3, r3, #24
 8005b48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b4c:	4931      	ldr	r1, [pc, #196]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b52:	4b30      	ldr	r3, [pc, #192]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	492d      	ldr	r1, [pc, #180]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b64:	4b2b      	ldr	r3, [pc, #172]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b68:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	4928      	ldr	r1, [pc, #160]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b76:	4b27      	ldr	r3, [pc, #156]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7a:	4a26      	ldr	r2, [pc, #152]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b82:	4b24      	ldr	r3, [pc, #144]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b86:	4b24      	ldr	r3, [pc, #144]	@ (8005c18 <RCCEx_PLL3_Config+0x160>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	69d2      	ldr	r2, [r2, #28]
 8005b8e:	00d2      	lsls	r2, r2, #3
 8005b90:	4920      	ldr	r1, [pc, #128]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b96:	4b1f      	ldr	r3, [pc, #124]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d106      	bne.n	8005bb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	4a19      	ldr	r2, [pc, #100]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005bae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005bb4:	e00f      	b.n	8005bd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d106      	bne.n	8005bca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005bbc:	4b15      	ldr	r3, [pc, #84]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc0:	4a14      	ldr	r2, [pc, #80]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005bc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005bc8:	e005      	b.n	8005bd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005bca:	4b12      	ldr	r3, [pc, #72]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	4a11      	ldr	r2, [pc, #68]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005bd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a0e      	ldr	r2, [pc, #56]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be2:	f7fa ffb9 	bl	8000b58 <HAL_GetTick>
 8005be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005be8:	e008      	b.n	8005bfc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bea:	f7fa ffb5 	bl	8000b58 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e006      	b.n	8005c0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bfc:	4b05      	ldr	r3, [pc, #20]	@ (8005c14 <RCCEx_PLL3_Config+0x15c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f0      	beq.n	8005bea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	58024400 	.word	0x58024400
 8005c18:	ffff0007 	.word	0xffff0007

08005c1c <memset>:
 8005c1c:	4402      	add	r2, r0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d100      	bne.n	8005c26 <memset+0xa>
 8005c24:	4770      	bx	lr
 8005c26:	f803 1b01 	strb.w	r1, [r3], #1
 8005c2a:	e7f9      	b.n	8005c20 <memset+0x4>

08005c2c <__libc_init_array>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c64 <__libc_init_array+0x38>)
 8005c30:	4c0d      	ldr	r4, [pc, #52]	@ (8005c68 <__libc_init_array+0x3c>)
 8005c32:	1b64      	subs	r4, r4, r5
 8005c34:	10a4      	asrs	r4, r4, #2
 8005c36:	2600      	movs	r6, #0
 8005c38:	42a6      	cmp	r6, r4
 8005c3a:	d109      	bne.n	8005c50 <__libc_init_array+0x24>
 8005c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c6c <__libc_init_array+0x40>)
 8005c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c70 <__libc_init_array+0x44>)
 8005c40:	f000 f818 	bl	8005c74 <_init>
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	2600      	movs	r6, #0
 8005c4a:	42a6      	cmp	r6, r4
 8005c4c:	d105      	bne.n	8005c5a <__libc_init_array+0x2e>
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c54:	4798      	blx	r3
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7ee      	b.n	8005c38 <__libc_init_array+0xc>
 8005c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c5e:	4798      	blx	r3
 8005c60:	3601      	adds	r6, #1
 8005c62:	e7f2      	b.n	8005c4a <__libc_init_array+0x1e>
 8005c64:	08005c9c 	.word	0x08005c9c
 8005c68:	08005c9c 	.word	0x08005c9c
 8005c6c:	08005c9c 	.word	0x08005c9c
 8005c70:	08005ca0 	.word	0x08005ca0

08005c74 <_init>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr

08005c80 <_fini>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	bf00      	nop
 8005c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c86:	bc08      	pop	{r3}
 8005c88:	469e      	mov	lr, r3
 8005c8a:	4770      	bx	lr
